
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014dac  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08015050  08015050  00025050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080155b8  080155b8  000255b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080155c0  080155c0  000255c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080155c4  080155c4  000255c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  24000000  080155c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000cc0  240001f8  080157c0  000301f8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000eb8  080157c0  00030eb8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c37c  00000000  00000000  00030226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004698  00000000  00000000  0005c5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001858  00000000  00000000  00060c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001738  00000000  00000000  00062498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039530  00000000  00000000  00063bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002014d  00000000  00000000  0009d100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168919  00000000  00000000  000bd24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00225b66  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000787c  00000000  00000000  00225bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015034 	.word	0x08015034

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	08015034 	.word	0x08015034

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <iBus_Check_CHKSUM>:
uint8_t iBus_failsafe = 0;
uint8_t motor_arming_flag = 0;
uint8_t iBus_rx_cnt = 0;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000698:	81fb      	strh	r3, [r7, #14]

	for(int i=0; i<len-2;i++)
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	e00a      	b.n	80006b6 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	89fa      	ldrh	r2, [r7, #14]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2;i++)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	3301      	adds	r3, #1
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	3b02      	subs	r3, #2
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbef      	blt.n	80006a0 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8) && data[31]);
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	321e      	adds	r2, #30
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d10b      	bne.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d006      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	331f      	adds	r3, #31
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <iBus_Check_CHKSUM+0x60>
 80006e6:	2300      	movs	r3, #0
 80006e8:	b2db      	uxtb	r3, r3

}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0FFF;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3302      	adds	r3, #2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b21a      	sxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3303      	adds	r3, #3
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21b      	sxth	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b21b      	sxth	r3, r3
 8000716:	b29b      	uxth	r3, r3
 8000718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0FFF;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3304      	adds	r3, #4
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b21a      	sxth	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3305      	adds	r3, #5
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29b      	uxth	r3, r3
 800073a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800073e:	b29a      	uxth	r2, r3
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0FFF;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3306      	adds	r3, #6
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b21a      	sxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3307      	adds	r3, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	b21b      	sxth	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b21b      	sxth	r3, r3
 800075a:	b29b      	uxth	r3, r3
 800075c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000760:	b29a      	uxth	r2, r3
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0FFF;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3308      	adds	r3, #8
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b21a      	sxth	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3309      	adds	r3, #9
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21b      	sxth	r3, r3
 800077c:	b29b      	uxth	r3, r3
 800077e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000782:	b29a      	uxth	r2, r3
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0FFF;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	330a      	adds	r3, #10
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b21a      	sxth	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	330b      	adds	r3, #11
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21b      	sxth	r3, r3
 800079a:	4313      	orrs	r3, r2
 800079c:	b21b      	sxth	r3, r3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	811a      	strh	r2, [r3, #8]
	iBus->SwB = (data[12] | data[13]<<8) & 0x0FFF;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	330c      	adds	r3, #12
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	330d      	adds	r3, #13
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	819a      	strh	r2, [r3, #12]
	iBus->VrA = (data[14] | data[15]<<8) & 0x0FFF;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	330e      	adds	r3, #14
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	330f      	adds	r3, #15
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	829a      	strh	r2, [r3, #20]
	iBus->VrB = (data[16] | data[17]<<8) & 0x0FFF;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3310      	adds	r3, #16
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3311      	adds	r3, #17
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	b21b      	sxth	r3, r3
 8000804:	b29b      	uxth	r3, r3
 8000806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800080a:	b29a      	uxth	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	82da      	strh	r2, [r3, #22]
	iBus->SwC = (data[18] | data[19]<<8) & 0x0FFF;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3312      	adds	r3, #18
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b21a      	sxth	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3313      	adds	r3, #19
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	b29b      	uxth	r3, r3
 8000828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800082c:	b29a      	uxth	r2, r3
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	81da      	strh	r2, [r3, #14]
	iBus->SwD = (data[20] | data[21]<<8) & 0x0FFF;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3314      	adds	r3, #20
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b21a      	sxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3315      	adds	r3, #21
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21b      	sxth	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	b21b      	sxth	r3, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800084e:	b29a      	uxth	r2, r3
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	821a      	strh	r2, [r3, #16]

	iBus->FailSafe = (data[13] >> 4);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	330d      	adds	r3, #13
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	091b      	lsrs	r3, r3, #4
 800085c:	b2da      	uxtb	r2, r3
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	761a      	strb	r2, [r3, #24]
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <iBus_isActiveFailSafe>:

unsigned char iBus_isActiveFailSafe(FSiA6B_iBus* iBus)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7e1b      	ldrb	r3, [r3, #24]
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af04      	add	r7, sp, #16
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	4608      	mov	r0, r1
 800089a:	4611      	mov	r1, r2
 800089c:	461a      	mov	r2, r3
 800089e:	4603      	mov	r3, r0
 80008a0:	70fb      	strb	r3, [r7, #3]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70bb      	strb	r3, [r7, #2]
 80008a6:	4613      	mov	r3, r2
 80008a8:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 80008aa:	78fb      	ldrb	r3, [r7, #3]
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d81b      	bhi.n	80008e8 <MPU9250_Init+0x58>
 80008b0:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <MPU9250_Init+0x28>)
 80008b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b6:	bf00      	nop
 80008b8:	080008c9 	.word	0x080008c9
 80008bc:	080008d1 	.word	0x080008d1
 80008c0:	080008d9 	.word	0x080008d9
 80008c4:	080008e1 	.word	0x080008e1
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 80008c8:	4b5d      	ldr	r3, [pc, #372]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008ca:	4a5e      	ldr	r2, [pc, #376]	; (8000a44 <MPU9250_Init+0x1b4>)
 80008cc:	601a      	str	r2, [r3, #0]
		break;
 80008ce:	e00c      	b.n	80008ea <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80008d0:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008d2:	4a5d      	ldr	r2, [pc, #372]	; (8000a48 <MPU9250_Init+0x1b8>)
 80008d4:	601a      	str	r2, [r3, #0]
		break;
 80008d6:	e008      	b.n	80008ea <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80008d8:	4b59      	ldr	r3, [pc, #356]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008da:	4a5c      	ldr	r2, [pc, #368]	; (8000a4c <MPU9250_Init+0x1bc>)
 80008dc:	601a      	str	r2, [r3, #0]
		break;
 80008de:	e004      	b.n	80008ea <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80008e0:	4b57      	ldr	r3, [pc, #348]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008e2:	4a5b      	ldr	r2, [pc, #364]	; (8000a50 <MPU9250_Init+0x1c0>)
 80008e4:	601a      	str	r2, [r3, #0]
		break;
 80008e6:	e000      	b.n	80008ea <MPU9250_Init+0x5a>
	default:
		break;
 80008e8:	bf00      	nop
	}

	switch(Acc_FS)
 80008ea:	78bb      	ldrb	r3, [r7, #2]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d81f      	bhi.n	8000930 <MPU9250_Init+0xa0>
 80008f0:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <MPU9250_Init+0x68>)
 80008f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f6:	bf00      	nop
 80008f8:	08000909 	.word	0x08000909
 80008fc:	08000913 	.word	0x08000913
 8000900:	0800091d 	.word	0x0800091d
 8000904:	08000927 	.word	0x08000927
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 8000908:	4b52      	ldr	r3, [pc, #328]	; (8000a54 <MPU9250_Init+0x1c4>)
 800090a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800090e:	601a      	str	r2, [r3, #0]
		break;
 8000910:	e00f      	b.n	8000932 <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 8000912:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <MPU9250_Init+0x1c4>)
 8000914:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000918:	601a      	str	r2, [r3, #0]
		break;
 800091a:	e00a      	b.n	8000932 <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 800091c:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <MPU9250_Init+0x1c4>)
 800091e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000922:	601a      	str	r2, [r3, #0]
		break;
 8000924:	e005      	b.n	8000932 <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 8000926:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <MPU9250_Init+0x1c4>)
 8000928:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800092c:	601a      	str	r2, [r3, #0]
		break;
 800092e:	e000      	b.n	8000932 <MPU9250_Init+0xa2>
	default:
		break;
 8000930:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 8000932:	2364      	movs	r3, #100	; 0x64
 8000934:	9302      	str	r3, [sp, #8]
 8000936:	2301      	movs	r3, #1
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <MPU9250_Init+0x1c8>)
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2301      	movs	r3, #1
 8000940:	2275      	movs	r2, #117	; 0x75
 8000942:	21d0      	movs	r1, #208	; 0xd0
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f008 fcdb 	bl	8009300 <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 800094a:	4b43      	ldr	r3, [pc, #268]	; (8000a58 <MPU9250_Init+0x1c8>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b71      	cmp	r3, #113	; 0x71
 8000950:	d171      	bne.n	8000a36 <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 8000952:	4b42      	ldr	r3, [pc, #264]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000958:	2364      	movs	r3, #100	; 0x64
 800095a:	9302      	str	r3, [sp, #8]
 800095c:	2301      	movs	r3, #1
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	4b3e      	ldr	r3, [pc, #248]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2301      	movs	r3, #1
 8000966:	2219      	movs	r2, #25
 8000968:	21d0      	movs	r1, #208	; 0xd0
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f008 fbb4 	bl	80090d8 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000970:	200a      	movs	r0, #10
 8000972:	f005 f9c3 	bl	8005cfc <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 8000976:	4a39      	ldr	r2, [pc, #228]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000978:	787b      	ldrb	r3, [r7, #1]
 800097a:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	2301      	movs	r3, #1
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	4b35      	ldr	r3, [pc, #212]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2301      	movs	r3, #1
 800098a:	221a      	movs	r2, #26
 800098c:	21d0      	movs	r1, #208	; 0xd0
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f008 fba2 	bl	80090d8 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000994:	200a      	movs	r0, #10
 8000996:	f005 f9b1 	bl	8005cfc <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009a2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 80009a4:	2364      	movs	r3, #100	; 0x64
 80009a6:	9302      	str	r3, [sp, #8]
 80009a8:	2301      	movs	r3, #1
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2301      	movs	r3, #1
 80009b2:	221b      	movs	r2, #27
 80009b4:	21d0      	movs	r1, #208	; 0xd0
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f008 fb8e 	bl	80090d8 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009bc:	200a      	movs	r0, #10
 80009be:	f005 f99d 	bl	8005cfc <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 80009c2:	78bb      	ldrb	r3, [r7, #2]
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ca:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 80009cc:	2364      	movs	r3, #100	; 0x64
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	2301      	movs	r3, #1
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2301      	movs	r3, #1
 80009da:	221c      	movs	r2, #28
 80009dc:	21d0      	movs	r1, #208	; 0xd0
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f008 fb7a 	bl	80090d8 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009e4:	200a      	movs	r0, #10
 80009e6:	f005 f989 	bl	8005cfc <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ec:	7c3b      	ldrb	r3, [r7, #16]
 80009ee:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	9302      	str	r3, [sp, #8]
 80009f4:	2301      	movs	r3, #1
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2301      	movs	r3, #1
 80009fe:	221d      	movs	r2, #29
 8000a00:	21d0      	movs	r1, #208	; 0xd0
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f008 fb68 	bl	80090d8 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f005 f977 	bl	8005cfc <HAL_Delay>

		MPU9250_tx = 0x00;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	9302      	str	r3, [sp, #8]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2301      	movs	r3, #1
 8000a22:	226b      	movs	r2, #107	; 0x6b
 8000a24:	21d0      	movs	r1, #208	; 0xd0
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f008 fb56 	bl	80090d8 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000a2c:	200a      	movs	r0, #10
 8000a2e:	f005 f965 	bl	8005cfc <HAL_Delay>

		return 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <MPU9250_Init+0x1a8>
	}
	return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	24000000 	.word	0x24000000
 8000a44:	43030000 	.word	0x43030000
 8000a48:	42830000 	.word	0x42830000
 8000a4c:	42033333 	.word	0x42033333
 8000a50:	41833333 	.word	0x41833333
 8000a54:	24000004 	.word	0x24000004
 8000a58:	240002f5 	.word	0x240002f5
 8000a5c:	24000275 	.word	0x24000275

08000a60 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af04      	add	r7, sp, #16
 8000a66:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000a6e:	2364      	movs	r3, #100	; 0x64
 8000a70:	9302      	str	r3, [sp, #8]
 8000a72:	2301      	movs	r3, #1
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	226a      	movs	r2, #106	; 0x6a
 8000a7e:	21d0      	movs	r1, #208	; 0xd0
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f008 fb29 	bl	80090d8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a86:	200a      	movs	r0, #10
 8000a88:	f005 f938 	bl	8005cfc <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a8e:	2202      	movs	r2, #2
 8000a90:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 8000a92:	2364      	movs	r3, #100	; 0x64
 8000a94:	9302      	str	r3, [sp, #8]
 8000a96:	2301      	movs	r3, #1
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	2237      	movs	r2, #55	; 0x37
 8000aa2:	21d0      	movs	r1, #208	; 0xd0
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f008 fb17 	bl	80090d8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f005 f926 	bl	8005cfc <HAL_Delay>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	24000275 	.word	0x24000275

08000abc <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af04      	add	r7, sp, #16
 8000ac2:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <MPU9250_Master+0xa0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	9302      	str	r3, [sp, #8]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <MPU9250_Master+0xa0>)
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	2237      	movs	r2, #55	; 0x37
 8000ada:	21d0      	movs	r1, #208	; 0xd0
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f008 fafb 	bl	80090d8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ae2:	200a      	movs	r0, #10
 8000ae4:	f005 f90a 	bl	8005cfc <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <MPU9250_Master+0xa0>)
 8000aea:	2220      	movs	r2, #32
 8000aec:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2301      	movs	r3, #1
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <MPU9250_Master+0xa0>)
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	226a      	movs	r2, #106	; 0x6a
 8000afe:	21d0      	movs	r1, #208	; 0xd0
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f008 fae9 	bl	80090d8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b06:	200a      	movs	r0, #10
 8000b08:	f005 f8f8 	bl	8005cfc <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b0e:	220d      	movs	r2, #13
 8000b10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 8000b12:	2364      	movs	r3, #100	; 0x64
 8000b14:	9302      	str	r3, [sp, #8]
 8000b16:	2301      	movs	r3, #1
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	2224      	movs	r2, #36	; 0x24
 8000b22:	21d0      	movs	r1, #208	; 0xd0
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f008 fad7 	bl	80090d8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f005 f8e6 	bl	8005cfc <HAL_Delay>

	MPU9250_tx = 0x00;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000b36:	2364      	movs	r3, #100	; 0x64
 8000b38:	9302      	str	r3, [sp, #8]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2301      	movs	r3, #1
 8000b44:	226b      	movs	r2, #107	; 0x6b
 8000b46:	21d0      	movs	r1, #208	; 0xd0
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f008 fac5 	bl	80090d8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b4e:	200a      	movs	r0, #10
 8000b50:	f005 f8d4 	bl	8005cfc <HAL_Delay>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	24000275 	.word	0x24000275

08000b60 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *DataStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af04      	add	r7, sp, #16
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000b6a:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <MPU9250_AK8963_Setup+0xa0>)
 8000b6c:	2216      	movs	r2, #22
 8000b6e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000b70:	2364      	movs	r3, #100	; 0x64
 8000b72:	9302      	str	r3, [sp, #8]
 8000b74:	2301      	movs	r3, #1
 8000b76:	9301      	str	r3, [sp, #4]
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MPU9250_AK8963_Setup+0xa0>)
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	220a      	movs	r2, #10
 8000b80:	2118      	movs	r1, #24
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f008 faa8 	bl	80090d8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b88:	200a      	movs	r0, #10
 8000b8a:	f005 f8b7 	bl	8005cfc <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_MPU9250_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000b8e:	2364      	movs	r3, #100	; 0x64
 8000b90:	9302      	str	r3, [sp, #8]
 8000b92:	2303      	movs	r3, #3
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	2118      	movs	r1, #24
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f008 fbad 	bl	8009300 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f005 f8a8 	bl	8005cfc <HAL_Delay>

	DataStruct->ASAX = MPU9250_rx_buf[0];
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	DataStruct->ASAY = MPU9250_rx_buf[1];
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bb8:	785a      	ldrb	r2, [r3, #1]
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	DataStruct->ASAZ = MPU9250_rx_buf[2];
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bc2:	789a      	ldrb	r2, [r3, #2]
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 8000bca:	2364      	movs	r3, #100	; 0x64
 8000bcc:	9302      	str	r3, [sp, #8]
 8000bce:	2303      	movs	r3, #3
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MPU9250_AK8963_Setup+0xa8>)
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2118      	movs	r1, #24
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f008 fb8f 	bl	8009300 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000be2:	200a      	movs	r0, #10
 8000be4:	f005 f88a 	bl	8005cfc <HAL_Delay>

	if(AK8963_WAI == 0b01001000) return 1;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MPU9250_AK8963_Setup+0xa8>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b48      	cmp	r3, #72	; 0x48
 8000bee:	d101      	bne.n	8000bf4 <MPU9250_AK8963_Setup+0x94>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <MPU9250_AK8963_Setup+0x96>
	return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	24000275 	.word	0x24000275
 8000c04:	240002f8 	.word	0x240002f8
 8000c08:	240002f4 	.word	0x240002f4

08000c0c <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af04      	add	r7, sp, #16
 8000c12:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c16:	228c      	movs	r2, #140	; 0x8c
 8000c18:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000c1a:	2364      	movs	r3, #100	; 0x64
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2301      	movs	r3, #1
 8000c28:	2225      	movs	r2, #37	; 0x25
 8000c2a:	21d0      	movs	r1, #208	; 0xd0
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f008 fa53 	bl	80090d8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c32:	200a      	movs	r0, #10
 8000c34:	f005 f862 	bl	8005cfc <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000c3e:	2364      	movs	r3, #100	; 0x64
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	2301      	movs	r3, #1
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2226      	movs	r2, #38	; 0x26
 8000c4e:	21d0      	movs	r1, #208	; 0xd0
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f008 fa41 	bl	80090d8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c56:	200a      	movs	r0, #10
 8000c58:	f005 f850 	bl	8005cfc <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c5e:	2287      	movs	r2, #135	; 0x87
 8000c60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000c62:	2364      	movs	r3, #100	; 0x64
 8000c64:	9302      	str	r3, [sp, #8]
 8000c66:	2301      	movs	r3, #1
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	2227      	movs	r2, #39	; 0x27
 8000c72:	21d0      	movs	r1, #208	; 0xd0
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f008 fa2f 	bl	80090d8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f005 f83e 	bl	8005cfc <HAL_Delay>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24000275 	.word	0x24000275

08000c8c <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000c94:	2314      	movs	r3, #20
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <MPU9250_Read_All+0x24>)
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	223b      	movs	r2, #59	; 0x3b
 8000ca0:	21d0      	movs	r1, #208	; 0xd0
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f008 fc46 	bl	8009534 <HAL_I2C_Mem_Read_DMA>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240002f8 	.word	0x240002f8

08000cb4 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000cbc:	4bb6      	ldr	r3, [pc, #728]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	021b      	lsls	r3, r3, #8
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	4bb4      	ldr	r3, [pc, #720]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cc6:	785b      	ldrb	r3, [r3, #1]
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	b21a      	sxth	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000cda:	4baf      	ldr	r3, [pc, #700]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cdc:	789b      	ldrb	r3, [r3, #2]
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	4bad      	ldr	r3, [pc, #692]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000ce4:	78db      	ldrb	r3, [r3, #3]
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]); // Didn't Save Temp Value
 8000cf0:	4ba9      	ldr	r3, [pc, #676]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cf2:	791b      	ldrb	r3, [r3, #4]
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	4ba7      	ldr	r3, [pc, #668]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cfa:	795b      	ldrb	r3, [r3, #5]
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	809a      	strh	r2, [r3, #4]
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000d06:	4ba4      	ldr	r3, [pc, #656]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d08:	7a1b      	ldrb	r3, [r3, #8]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	4ba2      	ldr	r3, [pc, #648]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d10:	7a5b      	ldrb	r3, [r3, #9]
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000d1c:	4b9e      	ldr	r3, [pc, #632]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d1e:	7a9b      	ldrb	r3, [r3, #10]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	4b9c      	ldr	r3, [pc, #624]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d26:	7adb      	ldrb	r3, [r3, #11]
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	425b      	negs	r3, r3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	b21a      	sxth	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000d3a:	4b97      	ldr	r3, [pc, #604]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d3c:	7b1b      	ldrb	r3, [r3, #12]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	4b95      	ldr	r3, [pc, #596]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d44:	7b5b      	ldrb	r3, [r3, #13]
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	425b      	negs	r3, r3
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	b21a      	sxth	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	831a      	strh	r2, [r3, #24]
	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000d58:	4b8f      	ldr	r3, [pc, #572]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d5a:	7bdb      	ldrb	r3, [r3, #15]
 8000d5c:	021b      	lsls	r3, r3, #8
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b8d      	ldr	r3, [pc, #564]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d62:	7b9b      	ldrb	r3, [r3, #14]
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	4313      	orrs	r3, r2
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	425b      	negs	r3, r3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	b21a      	sxth	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000d78:	4b87      	ldr	r3, [pc, #540]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d7a:	7c5b      	ldrb	r3, [r3, #17]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	4b85      	ldr	r3, [pc, #532]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d82:	7c1b      	ldrb	r3, [r3, #16]
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	4313      	orrs	r3, r2
 8000d88:	b21a      	sxth	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000d90:	4b81      	ldr	r3, [pc, #516]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d92:	7cdb      	ldrb	r3, [r3, #19]
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	4b7f      	ldr	r3, [pc, #508]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d9a:	7c9b      	ldrb	r3, [r3, #18]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	b21a      	sxth	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dae:	ee07 3a90 	vmov	s15, r3
 8000db2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000db6:	4b79      	ldr	r3, [pc, #484]	; (8000f9c <MPU9250_Parsing+0x2e8>)
 8000db8:	ed93 7a00 	vldr	s14, [r3]
 8000dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dcc:	ee07 3a90 	vmov	s15, r3
 8000dd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dd4:	4b71      	ldr	r3, [pc, #452]	; (8000f9c <MPU9250_Parsing+0x2e8>)
 8000dd6:	ed93 7a00 	vldr	s14, [r3]
 8000dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = (DataStruct->Az_Raw / MPU9250_Acc_LSB);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dea:	ee07 3a90 	vmov	s15, r3
 8000dee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000df2:	4b6a      	ldr	r3, [pc, #424]	; (8000f9c <MPU9250_Parsing+0x2e8>)
 8000df4:	ed93 7a00 	vldr	s14, [r3]
 8000df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000e08:	ee07 3a90 	vmov	s15, r3
 8000e0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e10:	4b63      	ldr	r3, [pc, #396]	; (8000fa0 <MPU9250_Parsing+0x2ec>)
 8000e12:	ed93 7a00 	vldr	s14, [r3]
 8000e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000e26:	ee07 3a90 	vmov	s15, r3
 8000e2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e2e:	4b5c      	ldr	r3, [pc, #368]	; (8000fa0 <MPU9250_Parsing+0x2ec>)
 8000e30:	ed93 7a00 	vldr	s14, [r3]
 8000e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000e44:	ee07 3a90 	vmov	s15, r3
 8000e48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e4c:	4b54      	ldr	r3, [pc, #336]	; (8000fa0 <MPU9250_Parsing+0x2ec>)
 8000e4e:	ed93 7a00 	vldr	s14, [r3]
 8000e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8000e62:	461a      	mov	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000e6a:	3b80      	subs	r3, #128	; 0x80
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	da00      	bge.n	8000e72 <MPU9250_Parsing+0x1be>
 8000e70:	33ff      	adds	r3, #255	; 0xff
 8000e72:	121b      	asrs	r3, r3, #8
 8000e74:	3301      	adds	r3, #1
 8000e76:	fb03 f302 	mul.w	r3, r3, r2
 8000e7a:	ee07 3a90 	vmov	s15, r3
 8000e7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e82:	4b48      	ldr	r3, [pc, #288]	; (8000fa4 <MPU9250_Parsing+0x2f0>)
 8000e84:	edd3 7a00 	vldr	s15, [r3]
 8000e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8000e98:	461a      	mov	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000ea0:	3b80      	subs	r3, #128	; 0x80
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	da00      	bge.n	8000ea8 <MPU9250_Parsing+0x1f4>
 8000ea6:	33ff      	adds	r3, #255	; 0xff
 8000ea8:	121b      	asrs	r3, r3, #8
 8000eaa:	3301      	adds	r3, #1
 8000eac:	fb03 f302 	mul.w	r3, r3, r2
 8000eb0:	ee07 3a90 	vmov	s15, r3
 8000eb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb8:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <MPU9250_Parsing+0x2f0>)
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000ed6:	3b80      	subs	r3, #128	; 0x80
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da00      	bge.n	8000ede <MPU9250_Parsing+0x22a>
 8000edc:	33ff      	adds	r3, #255	; 0xff
 8000ede:	121b      	asrs	r3, r3, #8
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	fb03 f302 	mul.w	r3, r3, r2
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eee:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <MPU9250_Parsing+0x2f0>)
 8000ef0:	edd3 7a00 	vldr	s15, [r3]
 8000ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	ed93 7a07 	vldr	s14, [r3, #28]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My -= DataStruct->My_Offset;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8000f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8000f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f88:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000fa8 <MPU9250_Parsing+0x2f4>
 8000f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8000f96:	e009      	b.n	8000fac <MPU9250_Parsing+0x2f8>
 8000f98:	240002f8 	.word	0x240002f8
 8000f9c:	24000004 	.word	0x24000004
 8000fa0:	24000000 	.word	0x24000000
 8000fa4:	24000008 	.word	0x24000008
 8000fa8:	3c8efa35 	.word	0x3c8efa35
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fb2:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8000fa8 <MPU9250_Parsing+0x2f4>
 8000fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000fc6:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8000fa8 <MPU9250_Parsing+0x2f4>
 8000fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <MPU9250_Parsing_NoOffset>:

void MPU9250_Parsing_NoOffset(MPU9250_t *DataStruct)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000fe8:	4ba2      	ldr	r3, [pc, #648]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	4ba0      	ldr	r3, [pc, #640]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8000ff2:	785b      	ldrb	r3, [r3, #1]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	425b      	negs	r3, r3
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b21a      	sxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8001006:	4b9b      	ldr	r3, [pc, #620]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001008:	789b      	ldrb	r3, [r3, #2]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b99      	ldr	r3, [pc, #612]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001010:	78db      	ldrb	r3, [r3, #3]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21a      	sxth	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]); // Didn't Save Temp Value
 800101c:	4b95      	ldr	r3, [pc, #596]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 800101e:	791b      	ldrb	r3, [r3, #4]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b93      	ldr	r3, [pc, #588]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001026:	795b      	ldrb	r3, [r3, #5]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	809a      	strh	r2, [r3, #4]
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8001032:	4b90      	ldr	r3, [pc, #576]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001034:	7a1b      	ldrb	r3, [r3, #8]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b8e      	ldr	r3, [pc, #568]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 800103c:	7a5b      	ldrb	r3, [r3, #9]
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21a      	sxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8001048:	4b8a      	ldr	r3, [pc, #552]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 800104a:	7a9b      	ldrb	r3, [r3, #10]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	4b88      	ldr	r3, [pc, #544]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001052:	7adb      	ldrb	r3, [r3, #11]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21b      	sxth	r3, r3
 800105a:	b29b      	uxth	r3, r3
 800105c:	425b      	negs	r3, r3
 800105e:	b29b      	uxth	r3, r3
 8001060:	b21a      	sxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8001066:	4b83      	ldr	r3, [pc, #524]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001068:	7b1b      	ldrb	r3, [r3, #12]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b81      	ldr	r3, [pc, #516]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001070:	7b5b      	ldrb	r3, [r3, #13]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21b      	sxth	r3, r3
 8001078:	b29b      	uxth	r3, r3
 800107a:	425b      	negs	r3, r3
 800107c:	b29b      	uxth	r3, r3
 800107e:	b21a      	sxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	831a      	strh	r2, [r3, #24]
	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8001084:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001086:	7bdb      	ldrb	r3, [r3, #15]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b79      	ldr	r3, [pc, #484]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 800108e:	7b9b      	ldrb	r3, [r3, #14]
 8001090:	b21b      	sxth	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b21b      	sxth	r3, r3
 8001096:	b29b      	uxth	r3, r3
 8001098:	425b      	negs	r3, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	b21a      	sxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 80010a4:	4b73      	ldr	r3, [pc, #460]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 80010a6:	7c5b      	ldrb	r3, [r3, #17]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	4b71      	ldr	r3, [pc, #452]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 80010ae:	7c1b      	ldrb	r3, [r3, #16]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 80010bc:	4b6d      	ldr	r3, [pc, #436]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 80010be:	7cdb      	ldrb	r3, [r3, #19]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 80010c6:	7c9b      	ldrb	r3, [r3, #18]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010e2:	4b65      	ldr	r3, [pc, #404]	; (8001278 <MPU9250_Parsing_NoOffset+0x298>)
 80010e4:	ed93 7a00 	vldr	s14, [r3]
 80010e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001100:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <MPU9250_Parsing_NoOffset+0x298>)
 8001102:	ed93 7a00 	vldr	s14, [r3]
 8001106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = (DataStruct->Az_Raw / MPU9250_Acc_LSB);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800111e:	4b56      	ldr	r3, [pc, #344]	; (8001278 <MPU9250_Parsing_NoOffset+0x298>)
 8001120:	ed93 7a00 	vldr	s14, [r3]
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800113c:	4b4f      	ldr	r3, [pc, #316]	; (800127c <MPU9250_Parsing_NoOffset+0x29c>)
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800115a:	4b48      	ldr	r3, [pc, #288]	; (800127c <MPU9250_Parsing_NoOffset+0x29c>)
 800115c:	ed93 7a00 	vldr	s14, [r3]
 8001160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001178:	4b40      	ldr	r3, [pc, #256]	; (800127c <MPU9250_Parsing_NoOffset+0x29c>)
 800117a:	ed93 7a00 	vldr	s14, [r3]
 800117e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001196:	3b80      	subs	r3, #128	; 0x80
 8001198:	2b00      	cmp	r3, #0
 800119a:	da00      	bge.n	800119e <MPU9250_Parsing_NoOffset+0x1be>
 800119c:	33ff      	adds	r3, #255	; 0xff
 800119e:	121b      	asrs	r3, r3, #8
 80011a0:	3301      	adds	r3, #1
 80011a2:	fb03 f302 	mul.w	r3, r3, r2
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ae:	4b34      	ldr	r3, [pc, #208]	; (8001280 <MPU9250_Parsing_NoOffset+0x2a0>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80011c4:	461a      	mov	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80011cc:	3b80      	subs	r3, #128	; 0x80
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da00      	bge.n	80011d4 <MPU9250_Parsing_NoOffset+0x1f4>
 80011d2:	33ff      	adds	r3, #255	; 0xff
 80011d4:	121b      	asrs	r3, r3, #8
 80011d6:	3301      	adds	r3, #1
 80011d8:	fb03 f302 	mul.w	r3, r3, r2
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <MPU9250_Parsing_NoOffset+0x2a0>)
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001202:	3b80      	subs	r3, #128	; 0x80
 8001204:	2b00      	cmp	r3, #0
 8001206:	da00      	bge.n	800120a <MPU9250_Parsing_NoOffset+0x22a>
 8001208:	33ff      	adds	r3, #255	; 0xff
 800120a:	121b      	asrs	r3, r3, #8
 800120c:	3301      	adds	r3, #1
 800120e:	fb03 f302 	mul.w	r3, r3, r2
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MPU9250_Parsing_NoOffset+0x2a0>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001230:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001284 <MPU9250_Parsing_NoOffset+0x2a4>
 8001234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	edd3 7a08 	vldr	s15, [r3, #32]
 8001244:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001284 <MPU9250_Parsing_NoOffset+0x2a4>
 8001248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001258:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001284 <MPU9250_Parsing_NoOffset+0x2a4>
 800125c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	240002f8 	.word	0x240002f8
 8001278:	24000004 	.word	0x24000004
 800127c:	24000000 	.word	0x24000000
 8001280:	24000008 	.word	0x24000008
 8001284:	3c8efa35 	.word	0x3c8efa35

08001288 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b0ae      	sub	sp, #184	; 0xb8
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001292:	edc7 0a08 	vstr	s1, [r7, #32]
 8001296:	ed87 1a07 	vstr	s2, [r7, #28]
 800129a:	edc7 1a06 	vstr	s3, [r7, #24]
 800129e:	ed87 2a05 	vstr	s4, [r7, #20]
 80012a2:	edc7 2a04 	vstr	s5, [r7, #16]
 80012a6:	ed87 3a03 	vstr	s6, [r7, #12]
 80012aa:	edc7 3a02 	vstr	s7, [r7, #8]
 80012ae:	ed87 4a01 	vstr	s8, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 80012b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012be:	d11d      	bne.n	80012fc <MadgwickAHRSupdate+0x74>
 80012c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	d116      	bne.n	80012fc <MadgwickAHRSupdate+0x74>
 80012ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012da:	d10f      	bne.n	80012fc <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 80012dc:	edd7 2a04 	vldr	s5, [r7, #16]
 80012e0:	ed97 2a05 	vldr	s4, [r7, #20]
 80012e4:	edd7 1a06 	vldr	s3, [r7, #24]
 80012e8:	ed97 1a07 	vldr	s2, [r7, #28]
 80012ec:	edd7 0a08 	vldr	s1, [r7, #32]
 80012f0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80012f4:	f000 ffd6 	bl	80022a4 <MadgwickAHRSupdateIMU>
		return;
 80012f8:	f000 bfb4 	b.w	8002264 <MadgwickAHRSupdate+0xfdc>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80012fc:	4be6      	ldr	r3, [pc, #920]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	eeb1 7a67 	vneg.f32	s14, s15
 8001306:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800130a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800130e:	4be3      	ldr	r3, [pc, #908]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001310:	edd3 6a00 	vldr	s13, [r3]
 8001314:	edd7 7a08 	vldr	s15, [r7, #32]
 8001318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001320:	4bdf      	ldr	r3, [pc, #892]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001322:	edd3 6a00 	vldr	s13, [r3]
 8001326:	edd7 7a07 	vldr	s15, [r7, #28]
 800132a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800132e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001332:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800133e:	4bd9      	ldr	r3, [pc, #868]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 8001340:	ed93 7a00 	vldr	s14, [r3]
 8001344:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134c:	4bd3      	ldr	r3, [pc, #844]	; (800169c <MadgwickAHRSupdate+0x414>)
 800134e:	edd3 6a00 	vldr	s13, [r3]
 8001352:	edd7 7a07 	vldr	s15, [r7, #28]
 8001356:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135e:	4bd0      	ldr	r3, [pc, #832]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001360:	edd3 6a00 	vldr	s13, [r3]
 8001364:	edd7 7a08 	vldr	s15, [r7, #32]
 8001368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001370:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001378:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800137c:	4bc9      	ldr	r3, [pc, #804]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 800137e:	ed93 7a00 	vldr	s14, [r3]
 8001382:	edd7 7a08 	vldr	s15, [r7, #32]
 8001386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138a:	4bc3      	ldr	r3, [pc, #780]	; (8001698 <MadgwickAHRSupdate+0x410>)
 800138c:	edd3 6a00 	vldr	s13, [r3]
 8001390:	edd7 7a07 	vldr	s15, [r7, #28]
 8001394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001398:	ee37 7a67 	vsub.f32	s14, s14, s15
 800139c:	4bc0      	ldr	r3, [pc, #768]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 800139e:	edd3 6a00 	vldr	s13, [r3]
 80013a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80013ba:	4bba      	ldr	r3, [pc, #744]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80013bc:	ed93 7a00 	vldr	s14, [r3]
 80013c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80013c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c8:	4bb3      	ldr	r3, [pc, #716]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80013ca:	edd3 6a00 	vldr	s13, [r3]
 80013ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80013d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013da:	4bb0      	ldr	r3, [pc, #704]	; (800169c <MadgwickAHRSupdate+0x414>)
 80013dc:	edd3 6a00 	vldr	s13, [r3]
 80013e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80013f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80013fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001404:	d10e      	bne.n	8001424 <MadgwickAHRSupdate+0x19c>
 8001406:	edd7 7a05 	vldr	s15, [r7, #20]
 800140a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800140e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001412:	d107      	bne.n	8001424 <MadgwickAHRSupdate+0x19c>
 8001414:	edd7 7a04 	vldr	s15, [r7, #16]
 8001418:	eef5 7a40 	vcmp.f32	s15, #0.0
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	f000 85a6 	beq.w	8001f70 <MadgwickAHRSupdate+0xce8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001424:	edd7 7a06 	vldr	s15, [r7, #24]
 8001428:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800142c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001430:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001438:	edd7 7a04 	vldr	s15, [r7, #16]
 800143c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	f001 fb5a 	bl	8002b00 <invSqrt>
 800144c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 8001450:	ed97 7a06 	vldr	s14, [r7, #24]
 8001454:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145c:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8001460:	ed97 7a05 	vldr	s14, [r7, #20]
 8001464:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146c:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001470:	ed97 7a04 	vldr	s14, [r7, #16]
 8001474:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147c:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001480:	edd7 7a03 	vldr	s15, [r7, #12]
 8001484:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001488:	edd7 7a02 	vldr	s15, [r7, #8]
 800148c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001494:	edd7 7a01 	vldr	s15, [r7, #4]
 8001498:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800149c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	f001 fb2c 	bl	8002b00 <invSqrt>
 80014a8:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 80014ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80014b0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b8:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 80014bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80014c0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c8:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 80014cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80014d0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d8:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 80014dc:	4b71      	ldr	r3, [pc, #452]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80014ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ee:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 80014f2:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001504:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8001508:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001512:	ed97 7a01 	vldr	s14, [r7, #4]
 8001516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 800151e:	4b5e      	ldr	r3, [pc, #376]	; (8001698 <MadgwickAHRSupdate+0x410>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001528:	ed97 7a03 	vldr	s14, [r7, #12]
 800152c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001530:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 8001534:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800153e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 8001542:	4b55      	ldr	r3, [pc, #340]	; (8001698 <MadgwickAHRSupdate+0x410>)
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800154c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 8001550:	4b52      	ldr	r3, [pc, #328]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800155a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 800155e:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001568:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 800156c:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001576:	4b49      	ldr	r3, [pc, #292]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001580:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 8001584:	4b45      	ldr	r3, [pc, #276]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800158e:	4b44      	ldr	r3, [pc, #272]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001598:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 800159c:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 800159e:	ed93 7a00 	vldr	s14, [r3]
 80015a2:	4b40      	ldr	r3, [pc, #256]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ac:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 80015b0:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80015b2:	ed93 7a00 	vldr	s14, [r3]
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 80015c4:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80015c6:	ed93 7a00 	vldr	s14, [r3]
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <MadgwickAHRSupdate+0x414>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 80015d8:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80015da:	ed93 7a00 	vldr	s14, [r3]
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80015ee:	ed93 7a00 	vldr	s14, [r3]
 80015f2:	4b29      	ldr	r3, [pc, #164]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80015f4:	edd3 7a00 	vldr	s15, [r3]
 80015f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <MadgwickAHRSupdate+0x410>)
 8001602:	ed93 7a00 	vldr	s14, [r3]
 8001606:	4b25      	ldr	r3, [pc, #148]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001610:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <MadgwickAHRSupdate+0x410>)
 8001616:	ed93 7a00 	vldr	s14, [r3]
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001624:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <MadgwickAHRSupdate+0x414>)
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001638:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <MadgwickAHRSupdate+0x414>)
 800163e:	ed93 7a00 	vldr	s14, [r3]
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001652:	ed93 7a00 	vldr	s14, [r3]
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001660:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001664:	ed97 7a03 	vldr	s14, [r7, #12]
 8001668:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800166c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001672:	edd3 6a00 	vldr	s13, [r3]
 8001676:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800167a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001684:	edd3 6a00 	vldr	s13, [r3]
 8001688:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800168c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001690:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001694:	e008      	b.n	80016a8 <MadgwickAHRSupdate+0x420>
 8001696:	bf00      	nop
 8001698:	24000218 	.word	0x24000218
 800169c:	2400021c 	.word	0x2400021c
 80016a0:	24000220 	.word	0x24000220
 80016a4:	24000010 	.word	0x24000010
 80016a8:	edd7 6a03 	vldr	s13, [r7, #12]
 80016ac:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80016b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016b8:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80016bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80016c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016c4:	4bf5      	ldr	r3, [pc, #980]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d2:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80016d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016de:	4bf0      	ldr	r3, [pc, #960]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ec:	edd7 6a03 	vldr	s13, [r7, #12]
 80016f0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016fc:	edd7 6a03 	vldr	s13, [r7, #12]
 8001700:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001710:	4be3      	ldr	r3, [pc, #908]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001712:	ed93 7a00 	vldr	s14, [r3]
 8001716:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800171a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800171e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001722:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800172e:	4bdd      	ldr	r3, [pc, #884]	; (8001aa4 <MadgwickAHRSupdate+0x81c>)
 8001730:	edd3 6a00 	vldr	s13, [r3]
 8001734:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001740:	4bd6      	ldr	r3, [pc, #856]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 8001742:	edd3 6a00 	vldr	s13, [r3]
 8001746:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800174a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001752:	edd7 6a02 	vldr	s13, [r7, #8]
 8001756:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800175a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800175e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001762:	edd7 6a02 	vldr	s13, [r7, #8]
 8001766:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800176a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001772:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001776:	edd7 7a01 	vldr	s15, [r7, #4]
 800177a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800177e:	4bc8      	ldr	r3, [pc, #800]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001788:	ee37 7a27 	vadd.f32	s14, s14, s15
 800178c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001790:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 80017a0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80017a4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017a8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80017ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017b8:	eeb0 0b47 	vmov.f64	d0, d7
 80017bc:	f012 ff98 	bl	80146f0 <sqrt>
 80017c0:	eeb0 7b40 	vmov.f64	d7, d0
 80017c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017c8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80017cc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80017d0:	eeb1 7a67 	vneg.f32	s14, s15
 80017d4:	4bb1      	ldr	r3, [pc, #708]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017de:	4bb1      	ldr	r3, [pc, #708]	; (8001aa4 <MadgwickAHRSupdate+0x81c>)
 80017e0:	edd3 6a00 	vldr	s13, [r3]
 80017e4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80017e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f0:	edd7 6a01 	vldr	s13, [r7, #4]
 80017f4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80017f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001800:	4ba7      	ldr	r3, [pc, #668]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001802:	edd3 6a00 	vldr	s13, [r3]
 8001806:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800180a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001812:	edd7 6a01 	vldr	s13, [r7, #4]
 8001816:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800181a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800181e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001822:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001826:	edd7 7a02 	vldr	s15, [r7, #8]
 800182a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800182e:	4b9c      	ldr	r3, [pc, #624]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001838:	ee37 7a27 	vadd.f32	s14, s14, s15
 800183c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001840:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001848:	ee37 7a67 	vsub.f32	s14, s14, s15
 800184c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001850:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8001860:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001864:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001868:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 800186c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001870:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001874:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001878:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800187c:	eeb1 7a67 	vneg.f32	s14, s15
 8001880:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001884:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001888:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800188c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001890:	edd7 7a06 	vldr	s15, [r7, #24]
 8001894:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800189c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80018a0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018a4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80018a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018b4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80018b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c0:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 80018c2:	edd3 6a00 	vldr	s13, [r3]
 80018c6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018ce:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80018d2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018d6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018da:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018de:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018e6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018ea:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80018ee:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80018f2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018f6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018fa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018fe:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001902:	edd7 7a03 	vldr	s15, [r7, #12]
 8001906:	ee76 7a67 	vsub.f32	s15, s12, s15
 800190a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001912:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001916:	eef1 6a67 	vneg.f32	s13, s15
 800191a:	4b61      	ldr	r3, [pc, #388]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001924:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <MadgwickAHRSupdate+0x81c>)
 8001926:	ed93 6a00 	vldr	s12, [r3]
 800192a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800192e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001932:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001936:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800193a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800193e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001942:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001946:	ee26 6a27 	vmul.f32	s12, s12, s15
 800194a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800194e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001952:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001956:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800195a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800195e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001962:	edd7 7a02 	vldr	s15, [r7, #8]
 8001966:	ee76 7a67 	vsub.f32	s15, s12, s15
 800196a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800196e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001972:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 8001974:	edd3 6a00 	vldr	s13, [r3]
 8001978:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800197c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001980:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001984:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001988:	ee36 6a27 	vadd.f32	s12, s12, s15
 800198c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001990:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001994:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001998:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800199c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019a0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019a4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019a8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80019c8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019cc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019d0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80019d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80019dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019e0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80019e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80019ec:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019f0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80019f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a00:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0c:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <MadgwickAHRSupdate+0x81c>)
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001a16:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a1a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a22:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001a26:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a2a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a32:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a36:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a3a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001a48:	edd3 6a00 	vldr	s13, [r3]
 8001a4c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a54:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001a58:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a5c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a60:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a64:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a68:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a70:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001a74:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001a78:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a7c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a80:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a84:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a8c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a98:	e006      	b.n	8001aa8 <MadgwickAHRSupdate+0x820>
 8001a9a:	bf00      	nop
 8001a9c:	2400021c 	.word	0x2400021c
 8001aa0:	24000220 	.word	0x24000220
 8001aa4:	24000218 	.word	0x24000218
 8001aa8:	4bf6      	ldr	r3, [pc, #984]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001aaa:	edd3 6a00 	vldr	s13, [r3]
 8001aae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ab2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ab6:	4bf4      	ldr	r3, [pc, #976]	; (8001e88 <MadgwickAHRSupdate+0xc00>)
 8001ab8:	ed93 6a00 	vldr	s12, [r3]
 8001abc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ac0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ac4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ac8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001acc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001ad0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ad4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ad8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001adc:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001ae0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ae4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001ae8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001aec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001af0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001af4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001af8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b04:	4be1      	ldr	r3, [pc, #900]	; (8001e8c <MadgwickAHRSupdate+0xc04>)
 8001b06:	edd3 6a00 	vldr	s13, [r3]
 8001b0a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b12:	4bdf      	ldr	r3, [pc, #892]	; (8001e90 <MadgwickAHRSupdate+0xc08>)
 8001b14:	ed93 6a00 	vldr	s12, [r3]
 8001b18:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b1c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b20:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b24:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001b28:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b2c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b30:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b38:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b3c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b40:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b44:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b48:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b4c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b50:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b54:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b5c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b68:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b6c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001b70:	eeb1 7a67 	vneg.f32	s14, s15
 8001b74:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b78:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b7c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b80:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b84:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b88:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b90:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b94:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b98:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001b9c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ba0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ba4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ba8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb4:	4bb3      	ldr	r3, [pc, #716]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001bbe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001bc2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001bc6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001bce:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bd2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bda:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bde:	edd7 7a04 	vldr	s15, [r7, #16]
 8001be2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001bf2:	eef1 6a67 	vneg.f32	s13, s15
 8001bf6:	4ba3      	ldr	r3, [pc, #652]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c00:	4ba1      	ldr	r3, [pc, #644]	; (8001e88 <MadgwickAHRSupdate+0xc00>)
 8001c02:	ed93 6a00 	vldr	s12, [r3]
 8001c06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c0a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c0e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c12:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001c16:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c1a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c1e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c22:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c26:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c2a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c2e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001c32:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c36:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c3e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c42:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c4a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c56:	4b8e      	ldr	r3, [pc, #568]	; (8001e90 <MadgwickAHRSupdate+0xc08>)
 8001c58:	edd3 6a00 	vldr	s13, [r3]
 8001c5c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c64:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <MadgwickAHRSupdate+0xc04>)
 8001c66:	ed93 6a00 	vldr	s12, [r3]
 8001c6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c6e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c72:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c76:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001c7a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001c7e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c82:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c86:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c8a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001c8e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c92:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001c96:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c9a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c9e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ca2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ca6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb2:	4b75      	ldr	r3, [pc, #468]	; (8001e88 <MadgwickAHRSupdate+0xc00>)
 8001cb4:	edd3 6a00 	vldr	s13, [r3]
 8001cb8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cc0:	4b70      	ldr	r3, [pc, #448]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001cc2:	ed93 6a00 	vldr	s12, [r3]
 8001cc6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001cca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cd2:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001cd6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001cda:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cde:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ce2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ce6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001cea:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001cee:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cf2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cf6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cfa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cfe:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d02:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d16:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001d1a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d1e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d22:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d32:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d3a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d3e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d42:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001d46:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d4e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d52:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d5e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d62:	eef1 6a67 	vneg.f32	s13, s15
 8001d66:	4b49      	ldr	r3, [pc, #292]	; (8001e8c <MadgwickAHRSupdate+0xc04>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d70:	4b47      	ldr	r3, [pc, #284]	; (8001e90 <MadgwickAHRSupdate+0xc08>)
 8001d72:	ed93 6a00 	vldr	s12, [r3]
 8001d76:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d7a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d7e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d82:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001d86:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d8a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d8e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d92:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d96:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d9a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d9e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001da2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001da6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001daa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dae:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001db2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001db6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dba:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dca:	eef1 6a67 	vneg.f32	s13, s15
 8001dce:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <MadgwickAHRSupdate+0xc00>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001dda:	ed93 6a00 	vldr	s12, [r3]
 8001dde:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001de2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001de6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dea:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001dee:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001df2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001df6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dfa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dfe:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001e02:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e06:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001e0a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e0e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e12:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e16:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e1a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <MadgwickAHRSupdate+0xc08>)
 8001e28:	edd3 6a00 	vldr	s13, [r3]
 8001e2c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e34:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001e38:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e3c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e40:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e44:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e48:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001e4c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e50:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e54:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e58:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e60:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e64:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e78:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001e7c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e80:	e008      	b.n	8001e94 <MadgwickAHRSupdate+0xc0c>
 8001e82:	bf00      	nop
 8001e84:	2400021c 	.word	0x2400021c
 8001e88:	24000010 	.word	0x24000010
 8001e8c:	24000220 	.word	0x24000220
 8001e90:	24000218 	.word	0x24000218
 8001e94:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e98:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ea0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ea8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001eb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec0:	f000 fe1e 	bl	8002b00 <invSqrt>
 8001ec4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001ec8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001ecc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001ed8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001edc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001ee8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001eec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001ef8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001efc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f04:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001f08:	4bd8      	ldr	r3, [pc, #864]	; (800226c <MadgwickAHRSupdate+0xfe4>)
 8001f0a:	ed93 7a00 	vldr	s14, [r3]
 8001f0e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f16:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f1e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001f22:	4bd2      	ldr	r3, [pc, #840]	; (800226c <MadgwickAHRSupdate+0xfe4>)
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f30:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f38:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001f3c:	4bcb      	ldr	r3, [pc, #812]	; (800226c <MadgwickAHRSupdate+0xfe4>)
 8001f3e:	ed93 7a00 	vldr	s14, [r3]
 8001f42:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f52:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001f56:	4bc5      	ldr	r3, [pc, #788]	; (800226c <MadgwickAHRSupdate+0xfe4>)
 8001f58:	ed93 7a00 	vldr	s14, [r3]
 8001f5c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f64:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f6c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001f70:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001f74:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8002270 <MadgwickAHRSupdate+0xfe8>
 8001f78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f7c:	4bbd      	ldr	r3, [pc, #756]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f86:	4bbb      	ldr	r3, [pc, #748]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8001f88:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001f8c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001f90:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8002270 <MadgwickAHRSupdate+0xfe8>
 8001f94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f98:	4bb7      	ldr	r3, [pc, #732]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa2:	4bb5      	ldr	r3, [pc, #724]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8001fa4:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001fa8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001fac:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8002270 <MadgwickAHRSupdate+0xfe8>
 8001fb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fb4:	4bb1      	ldr	r3, [pc, #708]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbe:	4baf      	ldr	r3, [pc, #700]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8001fc0:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001fc4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001fc8:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002270 <MadgwickAHRSupdate+0xfe8>
 8001fcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fd0:	4bab      	ldr	r3, [pc, #684]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fda:	4ba9      	ldr	r3, [pc, #676]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8001fdc:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001fe0:	4ba4      	ldr	r3, [pc, #656]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8001fe2:	ed93 7a00 	vldr	s14, [r3]
 8001fe6:	4ba3      	ldr	r3, [pc, #652]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ff0:	4ba1      	ldr	r3, [pc, #644]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8001ff2:	edd3 6a00 	vldr	s13, [r3]
 8001ff6:	4ba0      	ldr	r3, [pc, #640]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002000:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002004:	4b9d      	ldr	r3, [pc, #628]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002006:	edd3 6a00 	vldr	s13, [r3]
 800200a:	4b9c      	ldr	r3, [pc, #624]	; (800227c <MadgwickAHRSupdate+0xff4>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002018:	4b99      	ldr	r3, [pc, #612]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 800201a:	edd3 6a00 	vldr	s13, [r3]
 800201e:	4b98      	ldr	r3, [pc, #608]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202c:	eeb0 0a67 	vmov.f32	s0, s15
 8002030:	f000 fd66 	bl	8002b00 <invSqrt>
 8002034:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8002038:	4b8e      	ldr	r3, [pc, #568]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 800203a:	ed93 7a00 	vldr	s14, [r3]
 800203e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002046:	4b8b      	ldr	r3, [pc, #556]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8002048:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800204c:	4b8a      	ldr	r3, [pc, #552]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 800204e:	ed93 7a00 	vldr	s14, [r3]
 8002052:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205a:	4b87      	ldr	r3, [pc, #540]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 800205c:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002060:	4b86      	ldr	r3, [pc, #536]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002062:	ed93 7a00 	vldr	s14, [r3]
 8002066:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800206a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206e:	4b83      	ldr	r3, [pc, #524]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002070:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002074:	4b82      	ldr	r3, [pc, #520]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002076:	ed93 7a00 	vldr	s14, [r3]
 800207a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800207e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002082:	4b7f      	ldr	r3, [pc, #508]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002084:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8002088:	4b7a      	ldr	r3, [pc, #488]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 800208a:	ed93 7a00 	vldr	s14, [r3]
 800208e:	4b7a      	ldr	r3, [pc, #488]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002098:	4b78      	ldr	r3, [pc, #480]	; (800227c <MadgwickAHRSupdate+0xff4>)
 800209a:	edd3 6a00 	vldr	s13, [r3]
 800209e:	4b78      	ldr	r3, [pc, #480]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 80020a0:	edd3 7a00 	vldr	s15, [r3]
 80020a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a8:	ee37 6a27 	vadd.f32	s12, s14, s15
 80020ac:	4b72      	ldr	r3, [pc, #456]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 80020ae:	ed93 7a00 	vldr	s14, [r3]
 80020b2:	4b71      	ldr	r3, [pc, #452]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020c4:	4b6d      	ldr	r3, [pc, #436]	; (800227c <MadgwickAHRSupdate+0xff4>)
 80020c6:	edd3 6a00 	vldr	s13, [r3]
 80020ca:	4b6c      	ldr	r3, [pc, #432]	; (800227c <MadgwickAHRSupdate+0xff4>)
 80020cc:	edd3 7a00 	vldr	s15, [r3]
 80020d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d8:	eef0 0a67 	vmov.f32	s1, s15
 80020dc:	eeb0 0a46 	vmov.f32	s0, s12
 80020e0:	f012 fb62 	bl	80147a8 <atan2f>
 80020e4:	eef0 7a40 	vmov.f32	s15, s0
 80020e8:	4b66      	ldr	r3, [pc, #408]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 80020ea:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 80020ee:	4b62      	ldr	r3, [pc, #392]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 80020f0:	ed93 7a00 	vldr	s14, [r3]
 80020f4:	4b62      	ldr	r3, [pc, #392]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020fe:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8002100:	edd3 6a00 	vldr	s13, [r3]
 8002104:	4b5d      	ldr	r3, [pc, #372]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002112:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800211a:	eeb0 0a67 	vmov.f32	s0, s15
 800211e:	f012 fb11 	bl	8014744 <asinf>
 8002122:	eef0 7a40 	vmov.f32	s15, s0
 8002126:	4b58      	ldr	r3, [pc, #352]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 8002128:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 800212c:	4b52      	ldr	r3, [pc, #328]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 800212e:	ed93 7a00 	vldr	s14, [r3]
 8002132:	4b52      	ldr	r3, [pc, #328]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800213c:	4b4d      	ldr	r3, [pc, #308]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 800213e:	edd3 6a00 	vldr	s13, [r3]
 8002142:	4b4f      	ldr	r3, [pc, #316]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800214c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002150:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002154:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002158:	4b46      	ldr	r3, [pc, #280]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 800215a:	ed93 6a00 	vldr	s12, [r3]
 800215e:	4b45      	ldr	r3, [pc, #276]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8002160:	edd3 6a00 	vldr	s13, [r3]
 8002164:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002168:	4b43      	ldr	r3, [pc, #268]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 800216a:	edd3 5a00 	vldr	s11, [r3]
 800216e:	4b42      	ldr	r3, [pc, #264]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8002170:	edd3 6a00 	vldr	s13, [r3]
 8002174:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002178:	ee36 6a26 	vadd.f32	s12, s12, s13
 800217c:	4b3f      	ldr	r3, [pc, #252]	; (800227c <MadgwickAHRSupdate+0xff4>)
 800217e:	edd3 5a00 	vldr	s11, [r3]
 8002182:	4b3e      	ldr	r3, [pc, #248]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002184:	edd3 6a00 	vldr	s13, [r3]
 8002188:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800218c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002190:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002192:	edd3 5a00 	vldr	s11, [r3]
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002198:	edd3 6a00 	vldr	s13, [r3]
 800219c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021a0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80021a4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80021a8:	eeb0 1b46 	vmov.f64	d1, d6
 80021ac:	eeb0 0b47 	vmov.f64	d0, d7
 80021b0:	f012 fa9a 	bl	80146e8 <atan2>
 80021b4:	eeb0 7b40 	vmov.f64	d7, d0
 80021b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021bc:	4b33      	ldr	r3, [pc, #204]	; (800228c <MadgwickAHRSupdate+0x1004>)
 80021be:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 80021c2:	4b30      	ldr	r3, [pc, #192]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002290 <MadgwickAHRSupdate+0x1008>
 80021cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d0:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 80021d2:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002290 <MadgwickAHRSupdate+0x1008>
 80021e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e4:	4b28      	ldr	r3, [pc, #160]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 80021e6:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 80021ea:	4b28      	ldr	r3, [pc, #160]	; (800228c <MadgwickAHRSupdate+0x1004>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002290 <MadgwickAHRSupdate+0x1008>
 80021f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <MadgwickAHRSupdate+0x1004>)
 80021fa:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 80021fe:	4b21      	ldr	r3, [pc, #132]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 8002200:	ed93 7a00 	vldr	s14, [r3]
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <MadgwickAHRSupdate+0x100c>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 8002210:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 8002216:	ed93 7a00 	vldr	s14, [r3]
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <MadgwickAHRSupdate+0x1010>)
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 8002226:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <MadgwickAHRSupdate+0x1004>)
 800222c:	ed93 7a00 	vldr	s14, [r3]
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <MadgwickAHRSupdate+0x1014>)
 8002232:	edd3 7a00 	vldr	s15, [r3]
 8002236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <MadgwickAHRSupdate+0x1004>)
 800223c:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <MadgwickAHRSupdate+0x1004>)
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800224a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224e:	d509      	bpl.n	8002264 <MadgwickAHRSupdate+0xfdc>
	{
		System_Yaw = 360.0f + System_Yaw;
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <MadgwickAHRSupdate+0x1004>)
 8002252:	edd3 7a00 	vldr	s15, [r3]
 8002256:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80022a0 <MadgwickAHRSupdate+0x1018>
 800225a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <MadgwickAHRSupdate+0x1004>)
 8002260:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002264:	37b8      	adds	r7, #184	; 0xb8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2400000c 	.word	0x2400000c
 8002270:	3b03126f 	.word	0x3b03126f
 8002274:	24000010 	.word	0x24000010
 8002278:	24000218 	.word	0x24000218
 800227c:	2400021c 	.word	0x2400021c
 8002280:	24000220 	.word	0x24000220
 8002284:	24000310 	.word	0x24000310
 8002288:	24000314 	.word	0x24000314
 800228c:	2400030c 	.word	0x2400030c
 8002290:	42652ee1 	.word	0x42652ee1
 8002294:	24000224 	.word	0x24000224
 8002298:	24000228 	.word	0x24000228
 800229c:	2400022c 	.word	0x2400022c
 80022a0:	43b40000 	.word	0x43b40000

080022a4 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b09c      	sub	sp, #112	; 0x70
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80022ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80022b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80022b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80022ba:	ed87 2a01 	vstr	s4, [r7, #4]
 80022be:	edc7 2a00 	vstr	s5, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80022c2:	4bee      	ldr	r3, [pc, #952]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	eeb1 7a67 	vneg.f32	s14, s15
 80022cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80022d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d4:	4bea      	ldr	r3, [pc, #936]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80022d6:	edd3 6a00 	vldr	s13, [r3]
 80022da:	edd7 7a04 	vldr	s15, [r7, #16]
 80022de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022e6:	4be7      	ldr	r3, [pc, #924]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 80022e8:	edd3 6a00 	vldr	s13, [r3]
 80022ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80022f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002300:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002304:	4be0      	ldr	r3, [pc, #896]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002306:	ed93 7a00 	vldr	s14, [r3]
 800230a:	edd7 7a05 	vldr	s15, [r7, #20]
 800230e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002312:	4bdb      	ldr	r3, [pc, #876]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 8002314:	edd3 6a00 	vldr	s13, [r3]
 8002318:	edd7 7a03 	vldr	s15, [r7, #12]
 800231c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002320:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002324:	4bd7      	ldr	r3, [pc, #860]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 8002326:	edd3 6a00 	vldr	s13, [r3]
 800232a:	edd7 7a04 	vldr	s15, [r7, #16]
 800232e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002336:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800233a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800233e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002342:	4bd1      	ldr	r3, [pc, #836]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002344:	ed93 7a00 	vldr	s14, [r3]
 8002348:	edd7 7a04 	vldr	s15, [r7, #16]
 800234c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002350:	4bca      	ldr	r3, [pc, #808]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002352:	edd3 6a00 	vldr	s13, [r3]
 8002356:	edd7 7a03 	vldr	s15, [r7, #12]
 800235a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800235e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002362:	4bc8      	ldr	r3, [pc, #800]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 8002364:	edd3 6a00 	vldr	s13, [r3]
 8002368:	edd7 7a05 	vldr	s15, [r7, #20]
 800236c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002374:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002380:	4bc1      	ldr	r3, [pc, #772]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002382:	ed93 7a00 	vldr	s14, [r3]
 8002386:	edd7 7a03 	vldr	s15, [r7, #12]
 800238a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800238e:	4bbb      	ldr	r3, [pc, #748]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002390:	edd3 6a00 	vldr	s13, [r3]
 8002394:	edd7 7a04 	vldr	s15, [r7, #16]
 8002398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a0:	4bb7      	ldr	r3, [pc, #732]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80023a2:	edd3 6a00 	vldr	s13, [r3]
 80023a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80023aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ba:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80023be:	edd7 7a02 	vldr	s15, [r7, #8]
 80023c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ca:	d10e      	bne.n	80023ea <MadgwickAHRSupdateIMU+0x146>
 80023cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80023d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	d107      	bne.n	80023ea <MadgwickAHRSupdateIMU+0x146>
 80023da:	edd7 7a00 	vldr	s15, [r7]
 80023de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e6:	f000 81e5 	beq.w	80027b4 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80023ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80023ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80023f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fe:	edd7 7a00 	vldr	s15, [r7]
 8002402:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	f000 fb77 	bl	8002b00 <invSqrt>
 8002412:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8002416:	ed97 7a02 	vldr	s14, [r7, #8]
 800241a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800241e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002422:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8002426:	ed97 7a01 	vldr	s14, [r7, #4]
 800242a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800242e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002432:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 8002436:	ed97 7a00 	vldr	s14, [r7]
 800243a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002442:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8002446:	4b90      	ldr	r3, [pc, #576]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002450:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 8002454:	4b89      	ldr	r3, [pc, #548]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800245e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 8002462:	4b87      	ldr	r3, [pc, #540]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800246c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8002470:	4b84      	ldr	r3, [pc, #528]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 8002472:	edd3 7a00 	vldr	s15, [r3]
 8002476:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800247a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 800247e:	4b82      	ldr	r3, [pc, #520]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8002490:	4b7a      	ldr	r3, [pc, #488]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800249a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800249e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 80024a2:	4b77      	ldr	r3, [pc, #476]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 80024b4:	4b71      	ldr	r3, [pc, #452]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80024be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 80024c6:	4b6e      	ldr	r3, [pc, #440]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80024d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 80024d8:	4b6b      	ldr	r3, [pc, #428]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 80024da:	ed93 7a00 	vldr	s14, [r3]
 80024de:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 80024ec:	4b63      	ldr	r3, [pc, #396]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 80024ee:	ed93 7a00 	vldr	s14, [r3]
 80024f2:	4b62      	ldr	r3, [pc, #392]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8002500:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 8002502:	ed93 7a00 	vldr	s14, [r3]
 8002506:	4b5e      	ldr	r3, [pc, #376]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002510:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8002514:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 8002516:	ed93 7a00 	vldr	s14, [r3]
 800251a:	4b5a      	ldr	r3, [pc, #360]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002524:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002528:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800252c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002534:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002538:	edd7 7a02 	vldr	s15, [r7, #8]
 800253c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002544:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002548:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800254c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002550:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002554:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002558:	edd7 7a01 	vldr	s15, [r7, #4]
 800255c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002564:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002568:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800256c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002574:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002578:	edd7 7a02 	vldr	s15, [r7, #8]
 800257c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002580:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002584:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002588:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800258c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002590:	4b3a      	ldr	r3, [pc, #232]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80025a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80025b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025b6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80025ba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025c6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80025ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025d6:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80025da:	edd7 7a00 	vldr	s15, [r7]
 80025de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e6:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80025ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025ee:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80025f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002600:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002604:	edd7 7a02 	vldr	s15, [r7, #8]
 8002608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800260c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002610:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002614:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002620:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002624:	edd7 7a01 	vldr	s15, [r7, #4]
 8002628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002630:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002634:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002638:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800263c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002648:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800264c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002654:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002658:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800265c:	edd7 7a00 	vldr	s15, [r7]
 8002660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002668:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800266c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002670:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002674:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002678:	e008      	b.n	800268c <MadgwickAHRSupdateIMU+0x3e8>
 800267a:	bf00      	nop
 800267c:	24000218 	.word	0x24000218
 8002680:	2400021c 	.word	0x2400021c
 8002684:	24000220 	.word	0x24000220
 8002688:	24000010 	.word	0x24000010
 800268c:	4be0      	ldr	r3, [pc, #896]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 800268e:	edd3 7a00 	vldr	s15, [r3]
 8002692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002696:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800269a:	edd7 7a02 	vldr	s15, [r7, #8]
 800269e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026aa:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80026ae:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80026b2:	4bd7      	ldr	r3, [pc, #860]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80026b4:	edd3 7a00 	vldr	s15, [r3]
 80026b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80026c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80026c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d0:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80026d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80026dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80026e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80026ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80026f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	f000 f9fc 	bl	8002b00 <invSqrt>
 8002708:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 800270c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002710:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002718:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 800271c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002720:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002728:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 800272c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002730:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002738:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 800273c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002740:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 800274c:	4bb1      	ldr	r3, [pc, #708]	; (8002a14 <MadgwickAHRSupdateIMU+0x770>)
 800274e:	ed93 7a00 	vldr	s14, [r3]
 8002752:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800275e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002762:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8002766:	4bab      	ldr	r3, [pc, #684]	; (8002a14 <MadgwickAHRSupdateIMU+0x770>)
 8002768:	ed93 7a00 	vldr	s14, [r3]
 800276c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002774:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800277c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8002780:	4ba4      	ldr	r3, [pc, #656]	; (8002a14 <MadgwickAHRSupdateIMU+0x770>)
 8002782:	ed93 7a00 	vldr	s14, [r3]
 8002786:	edd7 7a07 	vldr	s15, [r7, #28]
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002796:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 800279a:	4b9e      	ldr	r3, [pc, #632]	; (8002a14 <MadgwickAHRSupdateIMU+0x770>)
 800279c:	ed93 7a00 	vldr	s14, [r3]
 80027a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80027a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80027ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80027b4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80027b8:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8002a18 <MadgwickAHRSupdateIMU+0x774>
 80027bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027c0:	4b96      	ldr	r3, [pc, #600]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ca:	4b94      	ldr	r3, [pc, #592]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 80027cc:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 80027d0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80027d4:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002a18 <MadgwickAHRSupdateIMU+0x774>
 80027d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027dc:	4b90      	ldr	r3, [pc, #576]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	4b8e      	ldr	r3, [pc, #568]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80027e8:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80027ec:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80027f0:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002a18 <MadgwickAHRSupdateIMU+0x774>
 80027f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027f8:	4b8a      	ldr	r3, [pc, #552]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80027fa:	edd3 7a00 	vldr	s15, [r3]
 80027fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002802:	4b88      	ldr	r3, [pc, #544]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 8002804:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002808:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800280c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002a18 <MadgwickAHRSupdateIMU+0x774>
 8002810:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002814:	4b7e      	ldr	r3, [pc, #504]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 8002816:	edd3 7a00 	vldr	s15, [r3]
 800281a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281e:	4b7c      	ldr	r3, [pc, #496]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 8002820:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002824:	4b7d      	ldr	r3, [pc, #500]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 8002826:	ed93 7a00 	vldr	s14, [r3]
 800282a:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 800282c:	edd3 7a00 	vldr	s15, [r3]
 8002830:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002834:	4b7a      	ldr	r3, [pc, #488]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 8002836:	edd3 6a00 	vldr	s13, [r3]
 800283a:	4b79      	ldr	r3, [pc, #484]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002848:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 800284a:	edd3 6a00 	vldr	s13, [r3]
 800284e:	4b75      	ldr	r3, [pc, #468]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002858:	ee37 7a27 	vadd.f32	s14, s14, s15
 800285c:	4b6c      	ldr	r3, [pc, #432]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 800285e:	edd3 6a00 	vldr	s13, [r3]
 8002862:	4b6b      	ldr	r3, [pc, #428]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800286c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002870:	eeb0 0a67 	vmov.f32	s0, s15
 8002874:	f000 f944 	bl	8002b00 <invSqrt>
 8002878:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 800287c:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 800287e:	ed93 7a00 	vldr	s14, [r3]
 8002882:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288a:	4b64      	ldr	r3, [pc, #400]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 800288c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002890:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 8002892:	ed93 7a00 	vldr	s14, [r3]
 8002896:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800289a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289e:	4b60      	ldr	r3, [pc, #384]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80028a0:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80028a4:	4b5f      	ldr	r3, [pc, #380]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80028a6:	ed93 7a00 	vldr	s14, [r3]
 80028aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b2:	4b5c      	ldr	r3, [pc, #368]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80028b4:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80028b8:	4b55      	ldr	r3, [pc, #340]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80028ba:	ed93 7a00 	vldr	s14, [r3]
 80028be:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c6:	4b52      	ldr	r3, [pc, #328]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80028c8:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 80028ce:	ed93 7a00 	vldr	s14, [r3]
 80028d2:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028dc:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80028de:	edd3 6a00 	vldr	s13, [r3]
 80028e2:	4b4b      	ldr	r3, [pc, #300]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ec:	ee37 6a27 	vadd.f32	s12, s14, s15
 80028f0:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80028f2:	ed93 7a00 	vldr	s14, [r3]
 80028f6:	4b4a      	ldr	r3, [pc, #296]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002900:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002904:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002908:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 800290a:	edd3 6a00 	vldr	s13, [r3]
 800290e:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 8002910:	edd3 7a00 	vldr	s15, [r3]
 8002914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291c:	eef0 0a67 	vmov.f32	s1, s15
 8002920:	eeb0 0a46 	vmov.f32	s0, s12
 8002924:	f011 ff40 	bl	80147a8 <atan2f>
 8002928:	eef0 7a40 	vmov.f32	s15, s0
 800292c:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <MadgwickAHRSupdateIMU+0x784>)
 800292e:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8002932:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 8002934:	ed93 7a00 	vldr	s14, [r3]
 8002938:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002942:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 8002944:	edd3 6a00 	vldr	s13, [r3]
 8002948:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002956:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800295a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800295e:	eeb0 0a67 	vmov.f32	s0, s15
 8002962:	f011 feef 	bl	8014744 <asinf>
 8002966:	eef0 7a40 	vmov.f32	s15, s0
 800296a:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <MadgwickAHRSupdateIMU+0x788>)
 800296c:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 8002970:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 8002972:	ed93 7a00 	vldr	s14, [r3]
 8002976:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002980:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 8002982:	edd3 6a00 	vldr	s13, [r3]
 8002986:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 8002988:	edd3 7a00 	vldr	s15, [r3]
 800298c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002994:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002998:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800299c:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 800299e:	ed93 6a00 	vldr	s12, [r3]
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 80029a4:	edd3 6a00 	vldr	s13, [r3]
 80029a8:	ee26 6a26 	vmul.f32	s12, s12, s13
 80029ac:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80029ae:	edd3 5a00 	vldr	s11, [r3]
 80029b2:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80029b4:	edd3 6a00 	vldr	s13, [r3]
 80029b8:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80029bc:	ee36 6a26 	vadd.f32	s12, s12, s13
 80029c0:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80029c2:	edd3 5a00 	vldr	s11, [r3]
 80029c6:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80029c8:	edd3 6a00 	vldr	s13, [r3]
 80029cc:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80029d0:	ee36 6a66 	vsub.f32	s12, s12, s13
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80029d6:	edd3 5a00 	vldr	s11, [r3]
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80029dc:	edd3 6a00 	vldr	s13, [r3]
 80029e0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80029e4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80029e8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80029ec:	eeb0 1b46 	vmov.f64	d1, d6
 80029f0:	eeb0 0b47 	vmov.f64	d0, d7
 80029f4:	f011 fe78 	bl	80146e8 <atan2>
 80029f8:	eeb0 7b40 	vmov.f64	d7, d0
 80029fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <MadgwickAHRSupdateIMU+0x78c>)
 8002a02:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <MadgwickAHRSupdateIMU+0x784>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	e014      	b.n	8002a38 <MadgwickAHRSupdateIMU+0x794>
 8002a0e:	bf00      	nop
 8002a10:	24000220 	.word	0x24000220
 8002a14:	2400000c 	.word	0x2400000c
 8002a18:	3b03126f 	.word	0x3b03126f
 8002a1c:	24000010 	.word	0x24000010
 8002a20:	24000218 	.word	0x24000218
 8002a24:	2400021c 	.word	0x2400021c
 8002a28:	24000310 	.word	0x24000310
 8002a2c:	24000314 	.word	0x24000314
 8002a30:	2400030c 	.word	0x2400030c
 8002a34:	42652ee1 	.word	0x42652ee1
 8002a38:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002a34 <MadgwickAHRSupdateIMU+0x790>
 8002a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a40:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <MadgwickAHRSupdateIMU+0x83c>)
 8002a42:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <MadgwickAHRSupdateIMU+0x840>)
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002ae8 <MadgwickAHRSupdateIMU+0x844>
 8002a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a54:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <MadgwickAHRSupdateIMU+0x840>)
 8002a56:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 8002a5a:	4b24      	ldr	r3, [pc, #144]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002ae8 <MadgwickAHRSupdateIMU+0x844>
 8002a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a68:	4b20      	ldr	r3, [pc, #128]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002a6a:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <MadgwickAHRSupdateIMU+0x83c>)
 8002a70:	ed93 7a00 	vldr	s14, [r3]
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <MadgwickAHRSupdateIMU+0x84c>)
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <MadgwickAHRSupdateIMU+0x83c>)
 8002a80:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002a84:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <MadgwickAHRSupdateIMU+0x840>)
 8002a86:	ed93 7a00 	vldr	s14, [r3]
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <MadgwickAHRSupdateIMU+0x850>)
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a94:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <MadgwickAHRSupdateIMU+0x840>)
 8002a96:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002a9c:	ed93 7a00 	vldr	s14, [r3]
 8002aa0:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <MadgwickAHRSupdateIMU+0x854>)
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002aac:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002ab2:	edd3 7a00 	vldr	s15, [r3]
 8002ab6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abe:	d400      	bmi.n	8002ac2 <MadgwickAHRSupdateIMU+0x81e>
	{
		System_Yaw = 360.0f + System_Yaw;
	}
}
 8002ac0:	e009      	b.n	8002ad6 <MadgwickAHRSupdateIMU+0x832>
		System_Yaw = 360.0f + System_Yaw;
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002afc <MadgwickAHRSupdateIMU+0x858>
 8002acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002ad2:	edc3 7a00 	vstr	s15, [r3]
}
 8002ad6:	bf00      	nop
 8002ad8:	3770      	adds	r7, #112	; 0x70
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	24000310 	.word	0x24000310
 8002ae4:	24000314 	.word	0x24000314
 8002ae8:	42652ee1 	.word	0x42652ee1
 8002aec:	2400030c 	.word	0x2400030c
 8002af0:	24000224 	.word	0x24000224
 8002af4:	24000228 	.word	0x24000228
 8002af8:	2400022c 	.word	0x2400022c
 8002afc:	43b40000 	.word	0x43b40000

08002b00 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002b0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b0e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b16:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	105a      	asrs	r2, r3, #1
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <invSqrt+0x74>)
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002b30:	f107 030c 	add.w	r3, r7, #12
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002b38:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b44:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002b50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b54:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	ee07 3a90 	vmov	s15, r3
}
 8002b66:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	5f3759df 	.word	0x5f3759df

08002b78 <Double_PID_Calculation_Rate>:
	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result;
	/*********** Double PID Inner End *************/
}

void Double_PID_Calculation_Rate(PIDDouble* axis, float set_point, float value, float rate, float out_error_sum_max, float in_error_sum_max, int out_filter, int in_filter, int is_yaw)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b08b      	sub	sp, #44	; 0x2c
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6278      	str	r0, [r7, #36]	; 0x24
 8002b80:	ed87 0a08 	vstr	s0, [r7, #32]
 8002b84:	edc7 0a07 	vstr	s1, [r7, #28]
 8002b88:	ed87 1a06 	vstr	s2, [r7, #24]
 8002b8c:	edc7 1a05 	vstr	s3, [r7, #20]
 8002b90:	ed87 2a04 	vstr	s4, [r7, #16]
 8002b94:	60f9      	str	r1, [r7, #12]
 8002b96:	60ba      	str	r2, [r7, #8]
 8002b98:	607b      	str	r3, [r7, #4]
	/*********** Double PID Outer Begin *************/
	axis->out.reference = set_point;
 8002b9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	axis->out.meas_value = value;
 8002ba8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80

	axis->out.error = axis->out.reference - axis->out.meas_value;
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8002bc2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002bc6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	axis->out.p_result = axis->out.error * axis->out.kp;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	axis->out.error_sum += axis->out.error * DT;
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002bf2:	eddf 6a97 	vldr	s13, [pc, #604]	; 8002e50 <Double_PID_Calculation_Rate+0x2d8>
 8002bf6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

	axis->out.error_sum_max = out_error_sum_max;
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	axis->out.error_sum_min = -out_error_sum_max;
 8002c0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c10:	eef1 7a67 	vneg.f32	s15, s15
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
	if(axis->out.error_sum > axis->out.error_sum_max) axis->out.error_sum = axis->out.error_sum_max;
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8002c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2e:	dd06      	ble.n	8002c3e <Double_PID_Calculation_Rate+0xc6>
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002c3c:	e010      	b.n	8002c60 <Double_PID_Calculation_Rate+0xe8>
	else if(axis->out.error_sum < axis->out.error_sum_min) axis->out.error_sum = axis->out.error_sum_min;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8002c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c52:	d505      	bpl.n	8002c60 <Double_PID_Calculation_Rate+0xe8>
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	axis->out.i_result = axis->out.error_sum * axis->out.ki;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0

	axis->out.error_deriv = -rate;
 8002c76:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c7a:	eef1 7a67 	vneg.f32	s15, s15
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	axis->out.d_result = axis->out.error_deriv * axis->out.kd;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8002ca6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
	/*********** Double PID Outer End *************/

	/*********** Double PID Inner Begin *************/
	axis->in.reference = axis->out.pid_result;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8002cc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	ed83 7b04 	vstr	d7, [r3, #16]
	axis->in.meas_value = rate;
 8002cca:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	ed83 7b06 	vstr	d7, [r3, #24]

	axis->in.error = axis->in.reference - axis->in.meas_value;
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	ed93 6b04 	vldr	d6, [r3, #16]
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	ed93 7b06 	vldr	d7, [r3, #24]
 8002ce4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ce8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	axis->in.p_result = axis->in.error * axis->in.kp;
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002d14:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002e50 <Double_PID_Calculation_Rate+0x2d8>
 8002d18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	axis->in.error_sum_max = in_error_sum_max;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	64da      	str	r2, [r3, #76]	; 0x4c
	axis->in.error_sum_min = -in_error_sum_max;
 8002d2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d30:	eef1 7a67 	vneg.f32	s15, s15
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	if(axis->in.error_sum > axis->in.error_sum_max) axis->in.error_sum = axis->in.error_sum_max;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002d46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4e:	dd04      	ble.n	8002d5a <Double_PID_Calculation_Rate+0x1e2>
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40
 8002d58:	e00e      	b.n	8002d78 <Double_PID_Calculation_Rate+0x200>
	else if(axis->in.error_sum < axis->in.error_sum_min) axis->in.error_sum = axis->in.error_sum_min;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6e:	d503      	bpl.n	8002d78 <Double_PID_Calculation_Rate+0x200>
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
	axis->in.i_result = axis->in.error_sum * axis->in.ki;
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

	axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	ed93 6b06 	vldr	d6, [r3, #24]
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	ed93 7b08 	vldr	d7, [r3, #32]
 8002d9a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002d9e:	eeb1 6b47 	vneg.f64	d6, d7
 8002da2:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8002e48 <Double_PID_Calculation_Rate+0x2d0>
 8002da6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002daa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	axis->in.meas_value_prev = axis->in.meas_value;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dbc:	e9c1 2308 	strd	r2, r3, [r1, #32]

	if(in_filter == 0) axis->in.d_result = axis->in.error_deriv * axis->in.kd;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <Double_PID_Calculation_Rate+0x266>
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 8002ddc:	e01d      	b.n	8002e1a <Double_PID_Calculation_Rate+0x2a2>
	else
	{
		axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002de4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002de8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002df2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002df6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	}

	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result;
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002e26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	/*********** Double PID Inner End *************/
}
 8002e3a:	bf00      	nop
 8002e3c:	372c      	adds	r7, #44	; 0x2c
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	e0000000 	.word	0xe0000000
 8002e4c:	3f60624d 	.word	0x3f60624d
 8002e50:	3b03126f 	.word	0x3b03126f
 8002e54:	00000000 	.word	0x00000000

08002e58 <Single_PID_Calculation>:

void Single_PID_Calculation(PIDDouble* axis, float set_point, float value, float out_error_sum_max, int out_filter, int is_yaw)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6178      	str	r0, [r7, #20]
 8002e60:	ed87 0a04 	vstr	s0, [r7, #16]
 8002e64:	edc7 0a03 	vstr	s1, [r7, #12]
 8002e68:	ed87 1a02 	vstr	s2, [r7, #8]
 8002e6c:	6079      	str	r1, [r7, #4]
 8002e6e:	603a      	str	r2, [r7, #0]
	/*********** Double PID Outer Begin *************/
	axis->out.reference = set_point;	//Set point of outer PID control
 8002e70:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	axis->out.meas_value = value;			//Current Value
 8002e7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
	//error + P output
	axis->out.error = axis->out.reference - axis->out.meas_value;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8002e98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	if(is_yaw == 1)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d128      	bne.n	8002efe <Single_PID_Calculation+0xa6>
	{
		if(axis->out.error > 180.f) axis->out.error -= 360.f;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002eb2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8003068 <Single_PID_Calculation+0x210>
 8002eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebe:	dd0a      	ble.n	8002ed6 <Single_PID_Calculation+0x7e>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002ec6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800306c <Single_PID_Calculation+0x214>
 8002eca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
 8002ed4:	e013      	b.n	8002efe <Single_PID_Calculation+0xa6>
		else if(axis->out.error < -180.f) axis->out.error += 360.f;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002edc:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003070 <Single_PID_Calculation+0x218>
 8002ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee8:	d509      	bpl.n	8002efe <Single_PID_Calculation+0xa6>
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002ef0:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800306c <Single_PID_Calculation+0x214>
 8002ef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	}
	axis->out.p_result = axis->out.error * axis->out.kp;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	axis->out.error_sum += axis->out.error * DT;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002f20:	eddf 6a54 	vldr	s13, [pc, #336]	; 8003074 <Single_PID_Calculation+0x21c>
 8002f24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	// i output
	axis->out.error_sum_max = out_error_sum_max;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	axis->out.error_sum_min = -out_error_sum_max;
 8002f3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f3e:	eef1 7a67 	vneg.f32	s15, s15
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
	if(axis->out.error_sum > axis->out.error_sum_max) axis->out.error_sum = axis->out.error_sum_max;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8002f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5c:	dd06      	ble.n	8002f6c <Single_PID_Calculation+0x114>
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002f6a:	e010      	b.n	8002f8e <Single_PID_Calculation+0x136>
	else if(axis->out.error_sum < axis->out.error_sum_min) axis->out.error_sum = axis->out.error_sum_min;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8002f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f80:	d505      	bpl.n	8002f8e <Single_PID_Calculation+0x136>
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	axis->out.i_result = axis->out.error_sum * axis->out.ki;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
	//d output
	axis->out.error_deriv = -(axis->out.meas_value - axis->out.meas_value_prev) / DT;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8002fb0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002fb4:	eeb1 6b47 	vneg.f64	d6, d7
 8002fb8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8003060 <Single_PID_Calculation+0x208>
 8002fbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002fc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	axis->out.meas_value_prev = axis->out.meas_value;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002fd0:	6979      	ldr	r1, [r7, #20]
 8002fd2:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	if(out_filter == 0) axis->out.d_result = axis->out.error_deriv * axis->out.kd;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <Single_PID_Calculation+0x19c>
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
 8002ff2:	e01d      	b.n	8003030 <Single_PID_Calculation+0x1d8>
	else
	{
		axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.3f + axis->out.error_deriv * 0.7f;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002ffa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003078 <Single_PID_Calculation+0x220>
 8002ffe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8003008:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800307c <Single_PID_Calculation+0x224>
 800300c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
	}
	//result
	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800303c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
	/*********** Double PID Outer End *************/
}
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	f3af 8000 	nop.w
 8003060:	e0000000 	.word	0xe0000000
 8003064:	3f60624d 	.word	0x3f60624d
 8003068:	43340000 	.word	0x43340000
 800306c:	43b40000 	.word	0x43b40000
 8003070:	c3340000 	.word	0xc3340000
 8003074:	3b03126f 	.word	0x3b03126f
 8003078:	3e99999a 	.word	0x3e99999a
 800307c:	3f333333 	.word	0x3f333333

08003080 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	b29b      	uxth	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	4803      	ldr	r0, [pc, #12]	; (80030a4 <_write+0x24>)
 8003096:	f00d f8bb 	bl	8010210 <HAL_UART_Transmit_DMA>
	return len;
 800309a:	687b      	ldr	r3, [r7, #4]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	24000bdc 	.word	0x24000bdc

080030a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030ac:	b088      	sub	sp, #32
 80030ae:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
	MPU9250.Gx_Offset = 0.43;
 80030b0:	4bb1      	ldr	r3, [pc, #708]	; (8003378 <main+0x2d0>)
 80030b2:	4ab2      	ldr	r2, [pc, #712]	; (800337c <main+0x2d4>)
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
	MPU9250.Gy_Offset = -0.49;
 80030b6:	4bb0      	ldr	r3, [pc, #704]	; (8003378 <main+0x2d0>)
 80030b8:	4ab1      	ldr	r2, [pc, #708]	; (8003380 <main+0x2d8>)
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c
	MPU9250.Gz_Offset = -1.40;
 80030bc:	4bae      	ldr	r3, [pc, #696]	; (8003378 <main+0x2d0>)
 80030be:	4ab1      	ldr	r2, [pc, #708]	; (8003384 <main+0x2dc>)
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
	MPU9250.Mx_Offset = 0;
 80030c2:	4bad      	ldr	r3, [pc, #692]	; (8003378 <main+0x2d0>)
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	665a      	str	r2, [r3, #100]	; 0x64
	MPU9250.My_Offset = 0;
 80030ca:	4bab      	ldr	r3, [pc, #684]	; (8003378 <main+0x2d0>)
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	669a      	str	r2, [r3, #104]	; 0x68
	MPU9250.Mz_Offset = 0;
 80030d2:	4ba9      	ldr	r3, [pc, #676]	; (8003378 <main+0x2d0>)
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030da:	f002 fd7d 	bl	8005bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030de:	f000 fd09 	bl	8003af4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80030e2:	f000 fd85 	bl	8003bf0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030e6:	f001 f827 	bl	8004138 <MX_GPIO_Init>
  MX_DMA_Init();
 80030ea:	f000 ffe5 	bl	80040b8 <MX_DMA_Init>
  MX_TIM7_Init();
 80030ee:	f000 fec9 	bl	8003e84 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80030f2:	f000 fefd 	bl	8003ef0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80030f6:	f000 fd97 	bl	8003c28 <MX_I2C1_Init>
  MX_SPI1_Init();
 80030fa:	f000 fdd5 	bl	8003ca8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80030fe:	f000 ff43 	bl	8003f88 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8003102:	f000 fe27 	bl	8003d54 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8003106:	f000 ff8b 	bl	8004020 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800310a:	2200      	movs	r2, #0
 800310c:	2102      	movs	r1, #2
 800310e:	489e      	ldr	r0, [pc, #632]	; (8003388 <main+0x2e0>)
 8003110:	f005 ff38 	bl	8008f84 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003114:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003118:	f002 fdf0 	bl	8005cfc <HAL_Delay>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800311c:	2201      	movs	r2, #1
 800311e:	2102      	movs	r1, #2
 8003120:	4899      	ldr	r0, [pc, #612]	; (8003388 <main+0x2e0>)
 8003122:	f005 ff2f 	bl	8008f84 <HAL_GPIO_WritePin>

  //General Timer HAL
  HAL_TIM_Base_Start_IT(&htim7);
 8003126:	4899      	ldr	r0, [pc, #612]	; (800338c <main+0x2e4>)
 8003128:	f00b fde4 	bl	800ecf4 <HAL_TIM_Base_Start_IT>
  //General PWM LL
//  LL_TIM_EnableCounter(TIM7);
//  LL_TIM_EnableIT_UPDATE(TIM7);

  //USART Channels HAL
  HAL_UART_Receive_DMA(&huart1, &uart1_rx_data, 1); //FTDI
 800312c:	2201      	movs	r2, #1
 800312e:	4998      	ldr	r1, [pc, #608]	; (8003390 <main+0x2e8>)
 8003130:	4898      	ldr	r0, [pc, #608]	; (8003394 <main+0x2ec>)
 8003132:	f00d f8ed 	bl	8010310 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, &uart2_rx_data, 1); //Receiver
 8003136:	2201      	movs	r2, #1
 8003138:	4997      	ldr	r1, [pc, #604]	; (8003398 <main+0x2f0>)
 800313a:	4898      	ldr	r0, [pc, #608]	; (800339c <main+0x2f4>)
 800313c:	f00d f8e8 	bl	8010310 <HAL_UART_Receive_DMA>

	//Motor PWM HAL
	HAL_TIM_Base_Start_IT(&htim3);
 8003140:	4897      	ldr	r0, [pc, #604]	; (80033a0 <main+0x2f8>)
 8003142:	f00b fdd7 	bl	800ecf4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8003146:	2100      	movs	r1, #0
 8003148:	4895      	ldr	r0, [pc, #596]	; (80033a0 <main+0x2f8>)
 800314a:	f00b fea5 	bl	800ee98 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 800314e:	2104      	movs	r1, #4
 8003150:	4893      	ldr	r0, [pc, #588]	; (80033a0 <main+0x2f8>)
 8003152:	f00b fea1 	bl	800ee98 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8003156:	2108      	movs	r1, #8
 8003158:	4891      	ldr	r0, [pc, #580]	; (80033a0 <main+0x2f8>)
 800315a:	f00b fe9d 	bl	800ee98 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 800315e:	210c      	movs	r1, #12
 8003160:	488f      	ldr	r0, [pc, #572]	; (80033a0 <main+0x2f8>)
 8003162:	f00b fe99 	bl	800ee98 <HAL_TIM_PWM_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8003166:	e009      	b.n	800317c <main+0xd4>
	{
		if(tim1_20ms_flag == 1)
 8003168:	4b8e      	ldr	r3, [pc, #568]	; (80033a4 <main+0x2fc>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d105      	bne.n	800317c <main+0xd4>
		{
			tim1_20ms_flag = 0;
 8003170:	4b8c      	ldr	r3, [pc, #560]	; (80033a4 <main+0x2fc>)
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialing \n");
 8003176:	488c      	ldr	r0, [pc, #560]	; (80033a8 <main+0x300>)
 8003178:	f00f fab2 	bl	80126e0 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 800317c:	2303      	movs	r3, #3
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	2303      	movs	r3, #3
 8003182:	2203      	movs	r2, #3
 8003184:	2103      	movs	r1, #3
 8003186:	4889      	ldr	r0, [pc, #548]	; (80033ac <main+0x304>)
 8003188:	f7fd fb82 	bl	8000890 <MPU9250_Init>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0ea      	beq.n	8003168 <main+0xc0>
		}
	}
	MPU9250_Bypass(&hi2c1);
 8003192:	4886      	ldr	r0, [pc, #536]	; (80033ac <main+0x304>)
 8003194:	f7fd fc64 	bl	8000a60 <MPU9250_Bypass>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8003198:	e009      	b.n	80031ae <main+0x106>
	{
		if(tim1_20ms_flag == 1)
 800319a:	4b82      	ldr	r3, [pc, #520]	; (80033a4 <main+0x2fc>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d105      	bne.n	80031ae <main+0x106>
		{
			tim1_20ms_flag = 0;
 80031a2:	4b80      	ldr	r3, [pc, #512]	; (80033a4 <main+0x2fc>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialing \n");
 80031a8:	4881      	ldr	r0, [pc, #516]	; (80033b0 <main+0x308>)
 80031aa:	f00f fa99 	bl	80126e0 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 80031ae:	4972      	ldr	r1, [pc, #456]	; (8003378 <main+0x2d0>)
 80031b0:	487e      	ldr	r0, [pc, #504]	; (80033ac <main+0x304>)
 80031b2:	f7fd fcd5 	bl	8000b60 <MPU9250_AK8963_Setup>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ee      	beq.n	800319a <main+0xf2>
		}
	}
	MPU9250_Master(&hi2c1);
 80031bc:	487b      	ldr	r0, [pc, #492]	; (80033ac <main+0x304>)
 80031be:	f7fd fc7d 	bl	8000abc <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 80031c2:	487a      	ldr	r0, [pc, #488]	; (80033ac <main+0x304>)
 80031c4:	f7fd fd22 	bl	8000c0c <MPU9250_Slave0_Enable>

	//Initialize MS5611

	//EEPROM
	W25qxx_Init();
 80031c8:	f002 f9d6 	bl	8005578 <W25qxx_Init>
	W25qxx_ReadSector(Mag_Calib, 0, 0, 12);
 80031cc:	230c      	movs	r3, #12
 80031ce:	2200      	movs	r2, #0
 80031d0:	2100      	movs	r1, #0
 80031d2:	4878      	ldr	r0, [pc, #480]	; (80033b4 <main+0x30c>)
 80031d4:	f002 fc74 	bl	8005ac0 <W25qxx_ReadSector>
	MPU9250.Mx_Offset = *(float*)&Mag_Calib[0];
 80031d8:	4b76      	ldr	r3, [pc, #472]	; (80033b4 <main+0x30c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a66      	ldr	r2, [pc, #408]	; (8003378 <main+0x2d0>)
 80031de:	6653      	str	r3, [r2, #100]	; 0x64
	MPU9250.My_Offset = *(float*)&Mag_Calib[4];
 80031e0:	4b75      	ldr	r3, [pc, #468]	; (80033b8 <main+0x310>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a64      	ldr	r2, [pc, #400]	; (8003378 <main+0x2d0>)
 80031e6:	6693      	str	r3, [r2, #104]	; 0x68
	MPU9250.Mz_Offset = *(float*)&Mag_Calib[8];
 80031e8:	4b74      	ldr	r3, [pc, #464]	; (80033bc <main+0x314>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a62      	ldr	r2, [pc, #392]	; (8003378 <main+0x2d0>)
 80031ee:	66d3      	str	r3, [r2, #108]	; 0x6c

	//Receiver Check
	printf("Receiver Status Check \n"); HAL_Delay(10);
 80031f0:	4873      	ldr	r0, [pc, #460]	; (80033c0 <main+0x318>)
 80031f2:	f00f fa75 	bl	80126e0 <puts>
 80031f6:	200a      	movs	r0, #10
 80031f8:	f002 fd80 	bl	8005cfc <HAL_Delay>
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 80031fc:	e011      	b.n	8003222 <main+0x17a>
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80031fe:	2200      	movs	r2, #0
 8003200:	2102      	movs	r1, #2
 8003202:	4861      	ldr	r0, [pc, #388]	; (8003388 <main+0x2e0>)
 8003204:	f005 febe 	bl	8008f84 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800320c:	f002 fd76 	bl	8005cfc <HAL_Delay>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8003210:	2201      	movs	r2, #1
 8003212:	2102      	movs	r1, #2
 8003214:	485c      	ldr	r0, [pc, #368]	; (8003388 <main+0x2e0>)
 8003216:	f005 feb5 	bl	8008f84 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800321a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800321e:	f002 fd6d 	bl	8005cfc <HAL_Delay>
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 8003222:	4b68      	ldr	r3, [pc, #416]	; (80033c4 <main+0x31c>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f001 ff0c 	bl	8005044 <Is_iBus_Received>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0e5      	beq.n	80031fe <main+0x156>
	}
	while(Is_Throttle_Min() == 0)
 8003232:	e011      	b.n	8003258 <main+0x1b0>
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8003234:	2200      	movs	r2, #0
 8003236:	2102      	movs	r1, #2
 8003238:	4853      	ldr	r0, [pc, #332]	; (8003388 <main+0x2e0>)
 800323a:	f005 fea3 	bl	8008f84 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800323e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003242:	f002 fd5b 	bl	8005cfc <HAL_Delay>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8003246:	2201      	movs	r2, #1
 8003248:	2102      	movs	r1, #2
 800324a:	484f      	ldr	r0, [pc, #316]	; (8003388 <main+0x2e0>)
 800324c:	f005 fe9a 	bl	8008f84 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003254:	f002 fd52 	bl	8005cfc <HAL_Delay>
	while(Is_Throttle_Min() == 0)
 8003258:	f001 ff2c 	bl	80050b4 <Is_Throttle_Min>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0e8      	beq.n	8003234 <main+0x18c>
	}
	printf("Receiver OK \n"); HAL_Delay(10);
 8003262:	4859      	ldr	r0, [pc, #356]	; (80033c8 <main+0x320>)
 8003264:	f00f fa3c 	bl	80126e0 <puts>
 8003268:	200a      	movs	r0, #10
 800326a:	f002 fd47 	bl	8005cfc <HAL_Delay>

	//ESC Calibration
	if(iBus.SwB == 2000 && iBus.SwC == 2000)
 800326e:	4b57      	ldr	r3, [pc, #348]	; (80033cc <main+0x324>)
 8003270:	899b      	ldrh	r3, [r3, #12]
 8003272:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003276:	d111      	bne.n	800329c <main+0x1f4>
 8003278:	4b54      	ldr	r3, [pc, #336]	; (80033cc <main+0x324>)
 800327a:	89db      	ldrh	r3, [r3, #14]
 800327c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003280:	d10c      	bne.n	800329c <main+0x1f4>
	{
		ESC_Calibration();
 8003282:	f001 f8ff 	bl	8004484 <ESC_Calibration>
		while(iBus.SwB != 1000) Is_iBus_Received(ibus_rx_cplt_flag);
 8003286:	e004      	b.n	8003292 <main+0x1ea>
 8003288:	4b4e      	ldr	r3, [pc, #312]	; (80033c4 <main+0x31c>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f001 fed9 	bl	8005044 <Is_iBus_Received>
 8003292:	4b4e      	ldr	r3, [pc, #312]	; (80033cc <main+0x324>)
 8003294:	899b      	ldrh	r3, [r3, #12]
 8003296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800329a:	d1f5      	bne.n	8003288 <main+0x1e0>
	}

	while (1)
	{
		//UART Message Check
		Receive_Command();
 800329c:	f001 fe5a 	bl	8004f54 <Receive_Command>


		//Receiver Channel Check
		Is_iBus_Received(ibus_rx_cplt_flag);
 80032a0:	4b48      	ldr	r3, [pc, #288]	; (80033c4 <main+0x31c>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 fecd 	bl	8005044 <Is_iBus_Received>
		if(iBus.SwA == 2000 && iBus.SwA_Prev != 2000)
 80032aa:	4b48      	ldr	r3, [pc, #288]	; (80033cc <main+0x324>)
 80032ac:	891b      	ldrh	r3, [r3, #8]
 80032ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80032b2:	d111      	bne.n	80032d8 <main+0x230>
 80032b4:	4b45      	ldr	r3, [pc, #276]	; (80033cc <main+0x324>)
 80032b6:	895b      	ldrh	r3, [r3, #10]
 80032b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80032bc:	d00c      	beq.n	80032d8 <main+0x230>
		{
			if(iBus.LV < 1010)
 80032be:	4b43      	ldr	r3, [pc, #268]	; (80033cc <main+0x324>)
 80032c0:	889b      	ldrh	r3, [r3, #4]
 80032c2:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d806      	bhi.n	80032d8 <main+0x230>
			{
				motor_arming_flag = 1;
 80032ca:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <main+0x328>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
				yaw_heading_reference = System_Yaw;
 80032d0:	4b40      	ldr	r3, [pc, #256]	; (80033d4 <main+0x32c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a40      	ldr	r2, [pc, #256]	; (80033d8 <main+0x330>)
 80032d6:	6013      	str	r3, [r2, #0]
			}
		}
		iBus.SwA_Prev = iBus.SwA;
 80032d8:	4b3c      	ldr	r3, [pc, #240]	; (80033cc <main+0x324>)
 80032da:	891a      	ldrh	r2, [r3, #8]
 80032dc:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <main+0x324>)
 80032de:	815a      	strh	r2, [r3, #10]
		if(iBus.SwA != 2000)
 80032e0:	4b3a      	ldr	r3, [pc, #232]	; (80033cc <main+0x324>)
 80032e2:	891b      	ldrh	r3, [r3, #8]
 80032e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80032e8:	d002      	beq.n	80032f0 <main+0x248>
		{
			motor_arming_flag = 0;
 80032ea:	4b39      	ldr	r3, [pc, #228]	; (80033d0 <main+0x328>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
		}
		if(motor_arming_flag == 1)
 80032f0:	4b37      	ldr	r3, [pc, #220]	; (80033d0 <main+0x328>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	f040 809c 	bne.w	8003432 <main+0x38a>
		{
			if(iBus_failsafe == 0)
 80032fa:	4b38      	ldr	r3, [pc, #224]	; (80033dc <main+0x334>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 8092 	bne.w	8003428 <main+0x380>
			{
				if(iBus.LV > 1010)
 8003304:	4b31      	ldr	r3, [pc, #196]	; (80033cc <main+0x324>)
 8003306:	889b      	ldrh	r3, [r3, #4]
 8003308:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800330c:	4293      	cmp	r3, r2
 800330e:	f240 8086 	bls.w	800341e <main+0x376>
				{
					TIM3->CCR1 = ccr1 > 20000 ? 19900 : ccr1 < 10000 ? 10000 : ccr1;
 8003312:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <main+0x338>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f644 6220 	movw	r2, #20000	; 0x4e20
 800331a:	4293      	cmp	r3, r2
 800331c:	d807      	bhi.n	800332e <main+0x286>
 800331e:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <main+0x338>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f242 7210 	movw	r2, #10000	; 0x2710
 8003326:	4293      	cmp	r3, r2
 8003328:	bf38      	it	cc
 800332a:	4613      	movcc	r3, r2
 800332c:	e001      	b.n	8003332 <main+0x28a>
 800332e:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 8003332:	4a2c      	ldr	r2, [pc, #176]	; (80033e4 <main+0x33c>)
 8003334:	6353      	str	r3, [r2, #52]	; 0x34
					TIM3->CCR2 = ccr2 > 20000 ? 19900 : ccr2 < 10000 ? 10000 : ccr2;
 8003336:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <main+0x340>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800333e:	4293      	cmp	r3, r2
 8003340:	d807      	bhi.n	8003352 <main+0x2aa>
 8003342:	4b29      	ldr	r3, [pc, #164]	; (80033e8 <main+0x340>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f242 7210 	movw	r2, #10000	; 0x2710
 800334a:	4293      	cmp	r3, r2
 800334c:	bf38      	it	cc
 800334e:	4613      	movcc	r3, r2
 8003350:	e001      	b.n	8003356 <main+0x2ae>
 8003352:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 8003356:	4a23      	ldr	r2, [pc, #140]	; (80033e4 <main+0x33c>)
 8003358:	6393      	str	r3, [r2, #56]	; 0x38
					TIM3->CCR3 = ccr3 > 20000 ? 19900 : ccr3 < 10000 ? 10000 : ccr3;
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <main+0x344>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003362:	4293      	cmp	r3, r2
 8003364:	d844      	bhi.n	80033f0 <main+0x348>
 8003366:	4b21      	ldr	r3, [pc, #132]	; (80033ec <main+0x344>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f242 7210 	movw	r2, #10000	; 0x2710
 800336e:	4293      	cmp	r3, r2
 8003370:	bf38      	it	cc
 8003372:	4613      	movcc	r3, r2
 8003374:	e03e      	b.n	80033f4 <main+0x34c>
 8003376:	bf00      	nop
 8003378:	24000278 	.word	0x24000278
 800337c:	3edc28f6 	.word	0x3edc28f6
 8003380:	befae148 	.word	0xbefae148
 8003384:	bfb33333 	.word	0xbfb33333
 8003388:	58020000 	.word	0x58020000
 800338c:	24000e0c 	.word	0x24000e0c
 8003390:	2400023d 	.word	0x2400023d
 8003394:	24000bdc 	.word	0x24000bdc
 8003398:	2400023f 	.word	0x2400023f
 800339c:	24000d70 	.word	0x24000d70
 80033a0:	24000a98 	.word	0x24000a98
 80033a4:	2400023a 	.word	0x2400023a
 80033a8:	08015050 	.word	0x08015050
 80033ac:	24000a4c 	.word	0x24000a4c
 80033b0:	08015064 	.word	0x08015064
 80033b4:	24000e00 	.word	0x24000e00
 80033b8:	24000e04 	.word	0x24000e04
 80033bc:	24000e08 	.word	0x24000e08
 80033c0:	08015078 	.word	0x08015078
 80033c4:	24000240 	.word	0x24000240
 80033c8:	08015090 	.word	0x08015090
 80033cc:	24000258 	.word	0x24000258
 80033d0:	24000215 	.word	0x24000215
 80033d4:	2400030c 	.word	0x2400030c
 80033d8:	24000234 	.word	0x24000234
 80033dc:	24000214 	.word	0x24000214
 80033e0:	24000940 	.word	0x24000940
 80033e4:	40000400 	.word	0x40000400
 80033e8:	24000bd4 	.word	0x24000bd4
 80033ec:	24000d6c 	.word	0x24000d6c
 80033f0:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 80033f4:	4a6e      	ldr	r2, [pc, #440]	; (80035b0 <main+0x508>)
 80033f6:	63d3      	str	r3, [r2, #60]	; 0x3c
					TIM3->CCR4 = ccr4 > 20000 ? 19900 : ccr4 < 10000 ? 10000 : ccr4;
 80033f8:	4b6e      	ldr	r3, [pc, #440]	; (80035b4 <main+0x50c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003400:	4293      	cmp	r3, r2
 8003402:	d807      	bhi.n	8003414 <main+0x36c>
 8003404:	4b6b      	ldr	r3, [pc, #428]	; (80035b4 <main+0x50c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f242 7210 	movw	r2, #10000	; 0x2710
 800340c:	4293      	cmp	r3, r2
 800340e:	bf38      	it	cc
 8003410:	4613      	movcc	r3, r2
 8003412:	e001      	b.n	8003418 <main+0x370>
 8003414:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 8003418:	4a65      	ldr	r2, [pc, #404]	; (80035b0 <main+0x508>)
 800341a:	6413      	str	r3, [r2, #64]	; 0x40
 800341c:	e024      	b.n	8003468 <main+0x3c0>
				}
				else Stop_Motor(10000);
 800341e:	f242 7010 	movw	r0, #10000	; 0x2710
 8003422:	f001 f85d 	bl	80044e0 <Stop_Motor>
 8003426:	e01f      	b.n	8003468 <main+0x3c0>
			}
			else Stop_Motor(10000);
 8003428:	f242 7010 	movw	r0, #10000	; 0x2710
 800342c:	f001 f858 	bl	80044e0 <Stop_Motor>
 8003430:	e01a      	b.n	8003468 <main+0x3c0>
		}
		else
		{
			Stop_Motor(10000);
 8003432:	f242 7010 	movw	r0, #10000	; 0x2710
 8003436:	f001 f853 	bl	80044e0 <Stop_Motor>
			Compass_Calibration(mag_calibration_enable | (iBus.SwB == 2000 && iBus.SwC == 1000));
 800343a:	4b5f      	ldr	r3, [pc, #380]	; (80035b8 <main+0x510>)
 800343c:	899b      	ldrh	r3, [r3, #12]
 800343e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003442:	d106      	bne.n	8003452 <main+0x3aa>
 8003444:	4b5c      	ldr	r3, [pc, #368]	; (80035b8 <main+0x510>)
 8003446:	89db      	ldrh	r3, [r3, #14]
 8003448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800344c:	d101      	bne.n	8003452 <main+0x3aa>
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <main+0x3ac>
 8003452:	2300      	movs	r3, #0
 8003454:	b25a      	sxtb	r2, r3
 8003456:	4b59      	ldr	r3, [pc, #356]	; (80035bc <main+0x514>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	b25b      	sxtb	r3, r3
 800345c:	4313      	orrs	r3, r2
 800345e:	b25b      	sxtb	r3, r3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	4618      	mov	r0, r3
 8003464:	f000 ff1a 	bl	800429c <Compass_Calibration>
		}

		if(iBus.SwD == 2000 && iBus.SwD_Prev != 2000) ; //Toggle LED, Buzzer On
 8003468:	4b53      	ldr	r3, [pc, #332]	; (80035b8 <main+0x510>)
 800346a:	8a1b      	ldrh	r3, [r3, #16]
 800346c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		if(iBus.SwD == 1000 && iBus.SwD_Prev != 1000) ; //Buzzer Off
 8003470:	4b51      	ldr	r3, [pc, #324]	; (80035b8 <main+0x510>)
 8003472:	8a1b      	ldrh	r3, [r3, #16]
 8003474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		iBus.SwD_Prev = iBus.SwD;
 8003478:	4b4f      	ldr	r3, [pc, #316]	; (80035b8 <main+0x510>)
 800347a:	8a1a      	ldrh	r2, [r3, #16]
 800347c:	4b4e      	ldr	r3, [pc, #312]	; (80035b8 <main+0x510>)
 800347e:	825a      	strh	r2, [r3, #18]


		//Read MPU9250 + Motor PID
		if(tim1_2ms_flag == 1)
 8003480:	4b4f      	ldr	r3, [pc, #316]	; (80035c0 <main+0x518>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	f040 8213 	bne.w	80038b0 <main+0x808>
		{
			tim1_2ms_flag = 0;
 800348a:	4b4d      	ldr	r3, [pc, #308]	; (80035c0 <main+0x518>)
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
			MPU9250_Read_All(&hi2c1);
 8003490:	484c      	ldr	r0, [pc, #304]	; (80035c4 <main+0x51c>)
 8003492:	f7fd fbfb 	bl	8000c8c <MPU9250_Read_All>
			MPU9250_Parsing(&MPU9250);
 8003496:	484c      	ldr	r0, [pc, #304]	; (80035c8 <main+0x520>)
 8003498:	f7fd fc0c 	bl	8000cb4 <MPU9250_Parsing>
			MadgwickAHRSupdate(MPU9250.Gx_Rad, MPU9250.Gy_Rad, MPU9250.Gz_Rad, MPU9250.Ax, MPU9250.Ay, MPU9250.Az, MPU9250.Mx, MPU9250.My, MPU9250.Mz);
 800349c:	4b4a      	ldr	r3, [pc, #296]	; (80035c8 <main+0x520>)
 800349e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80034a2:	4b49      	ldr	r3, [pc, #292]	; (80035c8 <main+0x520>)
 80034a4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80034a8:	4b47      	ldr	r3, [pc, #284]	; (80035c8 <main+0x520>)
 80034aa:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80034ae:	4b46      	ldr	r3, [pc, #280]	; (80035c8 <main+0x520>)
 80034b0:	ed93 6a02 	vldr	s12, [r3, #8]
 80034b4:	4b44      	ldr	r3, [pc, #272]	; (80035c8 <main+0x520>)
 80034b6:	edd3 5a03 	vldr	s11, [r3, #12]
 80034ba:	4b43      	ldr	r3, [pc, #268]	; (80035c8 <main+0x520>)
 80034bc:	ed93 5a04 	vldr	s10, [r3, #16]
 80034c0:	4b41      	ldr	r3, [pc, #260]	; (80035c8 <main+0x520>)
 80034c2:	edd3 4a1c 	vldr	s9, [r3, #112]	; 0x70
 80034c6:	4b40      	ldr	r3, [pc, #256]	; (80035c8 <main+0x520>)
 80034c8:	edd3 3a1d 	vldr	s7, [r3, #116]	; 0x74
 80034cc:	4b3e      	ldr	r3, [pc, #248]	; (80035c8 <main+0x520>)
 80034ce:	ed93 4a1e 	vldr	s8, [r3, #120]	; 0x78
 80034d2:	eeb0 3a64 	vmov.f32	s6, s9
 80034d6:	eef0 2a45 	vmov.f32	s5, s10
 80034da:	eeb0 2a65 	vmov.f32	s4, s11
 80034de:	eef0 1a46 	vmov.f32	s3, s12
 80034e2:	eeb0 1a66 	vmov.f32	s2, s13
 80034e6:	eef0 0a47 	vmov.f32	s1, s14
 80034ea:	eeb0 0a67 	vmov.f32	s0, s15
 80034ee:	f7fd fecb 	bl	8001288 <MadgwickAHRSupdate>
			Double_PID_Calculation_Rate(&roll, (iBus.LH - 1500) * 0.7, System_Roll, MPU9250.Gx, 1000, 500, 0, 1, 0);
 80034f2:	4b31      	ldr	r3, [pc, #196]	; (80035b8 <main+0x510>)
 80034f4:	88db      	ldrh	r3, [r3, #6]
 80034f6:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003502:	ed9f 6b29 	vldr	d6, [pc, #164]	; 80035a8 <main+0x500>
 8003506:	ee27 7b06 	vmul.f64	d7, d7, d6
 800350a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800350e:	4b2f      	ldr	r3, [pc, #188]	; (80035cc <main+0x524>)
 8003510:	ed93 7a00 	vldr	s14, [r3]
 8003514:	4b2c      	ldr	r3, [pc, #176]	; (80035c8 <main+0x520>)
 8003516:	edd3 6a07 	vldr	s13, [r3, #28]
 800351a:	2300      	movs	r3, #0
 800351c:	2201      	movs	r2, #1
 800351e:	2100      	movs	r1, #0
 8003520:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 80035d0 <main+0x528>
 8003524:	eddf 1a2b 	vldr	s3, [pc, #172]	; 80035d4 <main+0x52c>
 8003528:	eeb0 1a66 	vmov.f32	s2, s13
 800352c:	eef0 0a47 	vmov.f32	s1, s14
 8003530:	eeb0 0a67 	vmov.f32	s0, s15
 8003534:	4828      	ldr	r0, [pc, #160]	; (80035d8 <main+0x530>)
 8003536:	f7ff fb1f 	bl	8002b78 <Double_PID_Calculation_Rate>
			Double_PID_Calculation_Rate(&pitch, -(iBus.LV - 1500) * 0.7, System_Pitch, MPU9250.Gy, 1000, 500, 0, 1, 0);
 800353a:	4b1f      	ldr	r3, [pc, #124]	; (80035b8 <main+0x510>)
 800353c:	889b      	ldrh	r3, [r3, #4]
 800353e:	461a      	mov	r2, r3
 8003540:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800354e:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80035a8 <main+0x500>
 8003552:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003556:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800355a:	4b20      	ldr	r3, [pc, #128]	; (80035dc <main+0x534>)
 800355c:	ed93 7a00 	vldr	s14, [r3]
 8003560:	4b19      	ldr	r3, [pc, #100]	; (80035c8 <main+0x520>)
 8003562:	edd3 6a08 	vldr	s13, [r3, #32]
 8003566:	2300      	movs	r3, #0
 8003568:	2201      	movs	r2, #1
 800356a:	2100      	movs	r1, #0
 800356c:	ed9f 2a18 	vldr	s4, [pc, #96]	; 80035d0 <main+0x528>
 8003570:	eddf 1a18 	vldr	s3, [pc, #96]	; 80035d4 <main+0x52c>
 8003574:	eeb0 1a66 	vmov.f32	s2, s13
 8003578:	eef0 0a47 	vmov.f32	s1, s14
 800357c:	eeb0 0a67 	vmov.f32	s0, s15
 8003580:	4817      	ldr	r0, [pc, #92]	; (80035e0 <main+0x538>)
 8003582:	f7ff faf9 	bl	8002b78 <Double_PID_Calculation_Rate>

			if(iBus.LH > 1480 && iBus.LH < 1520) is_yaw_middle = 1;
 8003586:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <main+0x510>)
 8003588:	88db      	ldrh	r3, [r3, #6]
 800358a:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 800358e:	d92b      	bls.n	80035e8 <main+0x540>
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <main+0x510>)
 8003592:	88db      	ldrh	r3, [r3, #6]
 8003594:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8003598:	d226      	bcs.n	80035e8 <main+0x540>
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <main+0x53c>)
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e025      	b.n	80035ee <main+0x546>
 80035a2:	bf00      	nop
 80035a4:	f3af 8000 	nop.w
 80035a8:	66666666 	.word	0x66666666
 80035ac:	3fe66666 	.word	0x3fe66666
 80035b0:	40000400 	.word	0x40000400
 80035b4:	24000bd8 	.word	0x24000bd8
 80035b8:	24000258 	.word	0x24000258
 80035bc:	24000231 	.word	0x24000231
 80035c0:	24000238 	.word	0x24000238
 80035c4:	24000a4c 	.word	0x24000a4c
 80035c8:	24000278 	.word	0x24000278
 80035cc:	24000310 	.word	0x24000310
 80035d0:	43fa0000 	.word	0x43fa0000
 80035d4:	447a0000 	.word	0x447a0000
 80035d8:	24000728 	.word	0x24000728
 80035dc:	24000314 	.word	0x24000314
 80035e0:	24000658 	.word	0x24000658
 80035e4:	24000232 	.word	0x24000232
			else is_yaw_middle = 0;
 80035e8:	4bd2      	ldr	r3, [pc, #840]	; (8003934 <main+0x88c>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	701a      	strb	r2, [r3, #0]

			if(is_yaw_middle == 0)
 80035ee:	4bd1      	ldr	r3, [pc, #836]	; (8003934 <main+0x88c>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f040 80af 	bne.w	8003756 <main+0x6ae>
			{
				yaw_heading_reference = System_Yaw;
 80035f8:	4bcf      	ldr	r3, [pc, #828]	; (8003938 <main+0x890>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4acf      	ldr	r2, [pc, #828]	; (800393c <main+0x894>)
 80035fe:	6013      	str	r3, [r2, #0]
				Single_PID_Calculation(&yaw_rate, (iBus.LH-1500), MPU9250.Gz, 200,1 ,1);
 8003600:	4bcf      	ldr	r3, [pc, #828]	; (8003940 <main+0x898>)
 8003602:	88db      	ldrh	r3, [r3, #6]
 8003604:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8003608:	ee07 3a90 	vmov	s15, r3
 800360c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003610:	4bcc      	ldr	r3, [pc, #816]	; (8003944 <main+0x89c>)
 8003612:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003616:	2201      	movs	r2, #1
 8003618:	2101      	movs	r1, #1
 800361a:	ed9f 1acb 	vldr	s2, [pc, #812]	; 8003948 <main+0x8a0>
 800361e:	eef0 0a47 	vmov.f32	s1, s14
 8003622:	eeb0 0a67 	vmov.f32	s0, s15
 8003626:	48c9      	ldr	r0, [pc, #804]	; (800394c <main+0x8a4>)
 8003628:	f7ff fc16 	bl	8002e58 <Single_PID_Calculation>
				ccr1 = 10000 + (iBus.LV-1000)*10 + roll.in.pid_result + pitch.in.pid_result - yaw_rate.out.pid_result;
 800362c:	4bc4      	ldr	r3, [pc, #784]	; (8003940 <main+0x898>)
 800362e:	889b      	ldrh	r3, [r3, #4]
 8003630:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	461a      	mov	r2, r3
 800363e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003642:	4413      	add	r3, r2
 8003644:	ee07 3a90 	vmov	s15, r3
 8003648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800364c:	4bc0      	ldr	r3, [pc, #768]	; (8003950 <main+0x8a8>)
 800364e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003652:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003656:	4bbf      	ldr	r3, [pc, #764]	; (8003954 <main+0x8ac>)
 8003658:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800365c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003660:	4bba      	ldr	r3, [pc, #744]	; (800394c <main+0x8a4>)
 8003662:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8003666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800366a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800366e:	ee17 2a90 	vmov	r2, s15
 8003672:	4bb9      	ldr	r3, [pc, #740]	; (8003958 <main+0x8b0>)
 8003674:	601a      	str	r2, [r3, #0]
				ccr2 = 10000 + (iBus.LV-1000)*10 + roll.in.pid_result - pitch.in.pid_result + yaw_rate.out.pid_result;
 8003676:	4bb2      	ldr	r3, [pc, #712]	; (8003940 <main+0x898>)
 8003678:	889b      	ldrh	r3, [r3, #4]
 800367a:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	461a      	mov	r2, r3
 8003688:	f242 7310 	movw	r3, #10000	; 0x2710
 800368c:	4413      	add	r3, r2
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003696:	4bae      	ldr	r3, [pc, #696]	; (8003950 <main+0x8a8>)
 8003698:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800369c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a0:	4bac      	ldr	r3, [pc, #688]	; (8003954 <main+0x8ac>)
 80036a2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80036a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036aa:	4ba8      	ldr	r3, [pc, #672]	; (800394c <main+0x8a4>)
 80036ac:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80036b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036b8:	ee17 2a90 	vmov	r2, s15
 80036bc:	4ba7      	ldr	r3, [pc, #668]	; (800395c <main+0x8b4>)
 80036be:	601a      	str	r2, [r3, #0]
				ccr3 = 10000 + (iBus.LV-1000)*10 - roll.in.pid_result - pitch.in.pid_result + yaw_rate.out.pid_result;
 80036c0:	4b9f      	ldr	r3, [pc, #636]	; (8003940 <main+0x898>)
 80036c2:	889b      	ldrh	r3, [r3, #4]
 80036c4:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	461a      	mov	r2, r3
 80036d2:	f242 7310 	movw	r3, #10000	; 0x2710
 80036d6:	4413      	add	r3, r2
 80036d8:	ee07 3a90 	vmov	s15, r3
 80036dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036e0:	4b9b      	ldr	r3, [pc, #620]	; (8003950 <main+0x8a8>)
 80036e2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80036e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036ea:	4b9a      	ldr	r3, [pc, #616]	; (8003954 <main+0x8ac>)
 80036ec:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80036f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036f4:	4b95      	ldr	r3, [pc, #596]	; (800394c <main+0x8a4>)
 80036f6:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80036fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003702:	ee17 2a90 	vmov	r2, s15
 8003706:	4b96      	ldr	r3, [pc, #600]	; (8003960 <main+0x8b8>)
 8003708:	601a      	str	r2, [r3, #0]
				ccr4 = 10000 + (iBus.LV-1000)*10 - roll.in.pid_result + pitch.in.pid_result - yaw_rate.out.pid_result;
 800370a:	4b8d      	ldr	r3, [pc, #564]	; (8003940 <main+0x898>)
 800370c:	889b      	ldrh	r3, [r3, #4]
 800370e:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	461a      	mov	r2, r3
 800371c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003720:	4413      	add	r3, r2
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800372a:	4b89      	ldr	r3, [pc, #548]	; (8003950 <main+0x8a8>)
 800372c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003730:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003734:	4b87      	ldr	r3, [pc, #540]	; (8003954 <main+0x8ac>)
 8003736:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800373a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800373e:	4b83      	ldr	r3, [pc, #524]	; (800394c <main+0x8a4>)
 8003740:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8003744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800374c:	ee17 2a90 	vmov	r2, s15
 8003750:	4b84      	ldr	r3, [pc, #528]	; (8003964 <main+0x8bc>)
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e0ac      	b.n	80038b0 <main+0x808>
			}
			else
			{
				Double_PID_Calculation_Rate(&yaw_heading, yaw_heading_reference, System_Yaw, MPU9250.Gz, 400, 150, 0, 1, 1);
 8003756:	4b79      	ldr	r3, [pc, #484]	; (800393c <main+0x894>)
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	4b76      	ldr	r3, [pc, #472]	; (8003938 <main+0x890>)
 800375e:	ed93 7a00 	vldr	s14, [r3]
 8003762:	4b78      	ldr	r3, [pc, #480]	; (8003944 <main+0x89c>)
 8003764:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003768:	2301      	movs	r3, #1
 800376a:	2201      	movs	r2, #1
 800376c:	2100      	movs	r1, #0
 800376e:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8003968 <main+0x8c0>
 8003772:	eddf 1a7e 	vldr	s3, [pc, #504]	; 800396c <main+0x8c4>
 8003776:	eeb0 1a66 	vmov.f32	s2, s13
 800377a:	eef0 0a47 	vmov.f32	s1, s14
 800377e:	eeb0 0a67 	vmov.f32	s0, s15
 8003782:	487b      	ldr	r0, [pc, #492]	; (8003970 <main+0x8c8>)
 8003784:	f7ff f9f8 	bl	8002b78 <Double_PID_Calculation_Rate>
				ccr1 = 10000 + (iBus.LV-1000)*10 + roll.in.pid_result + pitch.in.pid_result - yaw_heading.in.pid_result;
 8003788:	4b6d      	ldr	r3, [pc, #436]	; (8003940 <main+0x898>)
 800378a:	889b      	ldrh	r3, [r3, #4]
 800378c:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	461a      	mov	r2, r3
 800379a:	f242 7310 	movw	r3, #10000	; 0x2710
 800379e:	4413      	add	r3, r2
 80037a0:	ee07 3a90 	vmov	s15, r3
 80037a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037a8:	4b69      	ldr	r3, [pc, #420]	; (8003950 <main+0x8a8>)
 80037aa:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80037ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b2:	4b68      	ldr	r3, [pc, #416]	; (8003954 <main+0x8ac>)
 80037b4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80037b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037bc:	4b6c      	ldr	r3, [pc, #432]	; (8003970 <main+0x8c8>)
 80037be:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80037c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ca:	ee17 2a90 	vmov	r2, s15
 80037ce:	4b62      	ldr	r3, [pc, #392]	; (8003958 <main+0x8b0>)
 80037d0:	601a      	str	r2, [r3, #0]
				ccr2 = 10000 + (iBus.LV-1000)*10 + roll.in.pid_result - pitch.in.pid_result + yaw_heading.in.pid_result;
 80037d2:	4b5b      	ldr	r3, [pc, #364]	; (8003940 <main+0x898>)
 80037d4:	889b      	ldrh	r3, [r3, #4]
 80037d6:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	461a      	mov	r2, r3
 80037e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80037e8:	4413      	add	r3, r2
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037f2:	4b57      	ldr	r3, [pc, #348]	; (8003950 <main+0x8a8>)
 80037f4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80037f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037fc:	4b55      	ldr	r3, [pc, #340]	; (8003954 <main+0x8ac>)
 80037fe:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003802:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003806:	4b5a      	ldr	r3, [pc, #360]	; (8003970 <main+0x8c8>)
 8003808:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800380c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003814:	ee17 2a90 	vmov	r2, s15
 8003818:	4b50      	ldr	r3, [pc, #320]	; (800395c <main+0x8b4>)
 800381a:	601a      	str	r2, [r3, #0]
				ccr3 = 10000 + (iBus.LV-1000)*10 - roll.in.pid_result - pitch.in.pid_result + yaw_heading.in.pid_result;
 800381c:	4b48      	ldr	r3, [pc, #288]	; (8003940 <main+0x898>)
 800381e:	889b      	ldrh	r3, [r3, #4]
 8003820:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	461a      	mov	r2, r3
 800382e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003832:	4413      	add	r3, r2
 8003834:	ee07 3a90 	vmov	s15, r3
 8003838:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800383c:	4b44      	ldr	r3, [pc, #272]	; (8003950 <main+0x8a8>)
 800383e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003842:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003846:	4b43      	ldr	r3, [pc, #268]	; (8003954 <main+0x8ac>)
 8003848:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800384c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003850:	4b47      	ldr	r3, [pc, #284]	; (8003970 <main+0x8c8>)
 8003852:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800385a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800385e:	ee17 2a90 	vmov	r2, s15
 8003862:	4b3f      	ldr	r3, [pc, #252]	; (8003960 <main+0x8b8>)
 8003864:	601a      	str	r2, [r3, #0]
				ccr4 = 10000 + (iBus.LV-1000)*10 - roll.in.pid_result + pitch.in.pid_result - yaw_heading.in.pid_result;
 8003866:	4b36      	ldr	r3, [pc, #216]	; (8003940 <main+0x898>)
 8003868:	889b      	ldrh	r3, [r3, #4]
 800386a:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	461a      	mov	r2, r3
 8003878:	f242 7310 	movw	r3, #10000	; 0x2710
 800387c:	4413      	add	r3, r2
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003886:	4b32      	ldr	r3, [pc, #200]	; (8003950 <main+0x8a8>)
 8003888:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800388c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003890:	4b30      	ldr	r3, [pc, #192]	; (8003954 <main+0x8ac>)
 8003892:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003896:	ee37 7a27 	vadd.f32	s14, s14, s15
 800389a:	4b35      	ldr	r3, [pc, #212]	; (8003970 <main+0x8c8>)
 800389c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80038a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038a8:	ee17 2a90 	vmov	r2, s15
 80038ac:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <main+0x8bc>)
 80038ae:	601a      	str	r2, [r3, #0]
			}
		}

		//Print According to the Input
		if(tim1_20ms_flag == 1)
 80038b0:	4b30      	ldr	r3, [pc, #192]	; (8003974 <main+0x8cc>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	f040 80f6 	bne.w	8003aa6 <main+0x9fe>
		{
			tim1_20ms_flag = 0;
 80038ba:	4b2e      	ldr	r3, [pc, #184]	; (8003974 <main+0x8cc>)
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]

			switch(print_mode)
 80038c0:	4b2d      	ldr	r3, [pc, #180]	; (8003978 <main+0x8d0>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	3b01      	subs	r3, #1
 80038c6:	2b0a      	cmp	r3, #10
 80038c8:	f200 80ef 	bhi.w	8003aaa <main+0xa02>
 80038cc:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <main+0x82c>)
 80038ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d2:	bf00      	nop
 80038d4:	08003901 	.word	0x08003901
 80038d8:	08003aab 	.word	0x08003aab
 80038dc:	08003989 	.word	0x08003989
 80038e0:	080039bb 	.word	0x080039bb
 80038e4:	080039ed 	.word	0x080039ed
 80038e8:	08003a1f 	.word	0x08003a1f
 80038ec:	08003aab 	.word	0x08003aab
 80038f0:	08003aab 	.word	0x08003aab
 80038f4:	08003aab 	.word	0x08003aab
 80038f8:	08003aab 	.word	0x08003aab
 80038fc:	08003a51 	.word	0x08003a51
			{
			case 1: printf("%.2f \t %.2f \t %.2f \t \n", System_Roll, System_Pitch, System_Yaw); break; //Roll, Pitch, Yaw
 8003900:	4b1e      	ldr	r3, [pc, #120]	; (800397c <main+0x8d4>)
 8003902:	edd3 7a00 	vldr	s15, [r3]
 8003906:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800390a:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <main+0x8d8>)
 800390c:	edd3 7a00 	vldr	s15, [r3]
 8003910:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003914:	4b08      	ldr	r3, [pc, #32]	; (8003938 <main+0x890>)
 8003916:	edd3 6a00 	vldr	s13, [r3]
 800391a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800391e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003922:	ed8d 7b00 	vstr	d7, [sp]
 8003926:	ec53 2b15 	vmov	r2, r3, d5
 800392a:	4816      	ldr	r0, [pc, #88]	; (8003984 <main+0x8dc>)
 800392c:	f00e fe52 	bl	80125d4 <iprintf>
 8003930:	e0bc      	b.n	8003aac <main+0xa04>
 8003932:	bf00      	nop
 8003934:	24000232 	.word	0x24000232
 8003938:	2400030c 	.word	0x2400030c
 800393c:	24000234 	.word	0x24000234
 8003940:	24000258 	.word	0x24000258
 8003944:	24000278 	.word	0x24000278
 8003948:	43480000 	.word	0x43480000
 800394c:	24000318 	.word	0x24000318
 8003950:	24000728 	.word	0x24000728
 8003954:	24000658 	.word	0x24000658
 8003958:	24000940 	.word	0x24000940
 800395c:	24000bd4 	.word	0x24000bd4
 8003960:	24000d6c 	.word	0x24000d6c
 8003964:	24000bd8 	.word	0x24000bd8
 8003968:	43160000 	.word	0x43160000
 800396c:	43c80000 	.word	0x43c80000
 8003970:	24000588 	.word	0x24000588
 8003974:	2400023a 	.word	0x2400023a
 8003978:	24000230 	.word	0x24000230
 800397c:	24000310 	.word	0x24000310
 8003980:	24000314 	.word	0x24000314
 8003984:	080150a0 	.word	0x080150a0
			case 2: /* printf("%.2f \t %.2f \t \m", Alt, Alt_Filt); */ break; //Alt Raw, Alt Filt
			case 3: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Gx, MPU9250.Gy, MPU9250.Gz); break; //Gyro
 8003988:	4b52      	ldr	r3, [pc, #328]	; (8003ad4 <main+0xa2c>)
 800398a:	edd3 7a07 	vldr	s15, [r3, #28]
 800398e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003992:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <main+0xa2c>)
 8003994:	edd3 7a08 	vldr	s15, [r3, #32]
 8003998:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800399c:	4b4d      	ldr	r3, [pc, #308]	; (8003ad4 <main+0xa2c>)
 800399e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80039a2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80039a6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80039aa:	ed8d 7b00 	vstr	d7, [sp]
 80039ae:	ec53 2b15 	vmov	r2, r3, d5
 80039b2:	4849      	ldr	r0, [pc, #292]	; (8003ad8 <main+0xa30>)
 80039b4:	f00e fe0e 	bl	80125d4 <iprintf>
 80039b8:	e078      	b.n	8003aac <main+0xa04>
			case 4: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Ax, MPU9250.Ay, MPU9250.Az); break; //Accel
 80039ba:	4b46      	ldr	r3, [pc, #280]	; (8003ad4 <main+0xa2c>)
 80039bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80039c0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80039c4:	4b43      	ldr	r3, [pc, #268]	; (8003ad4 <main+0xa2c>)
 80039c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80039ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039ce:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <main+0xa2c>)
 80039d0:	edd3 6a04 	vldr	s13, [r3, #16]
 80039d4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80039d8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80039dc:	ed8d 7b00 	vstr	d7, [sp]
 80039e0:	ec53 2b15 	vmov	r2, r3, d5
 80039e4:	483c      	ldr	r0, [pc, #240]	; (8003ad8 <main+0xa30>)
 80039e6:	f00e fdf5 	bl	80125d4 <iprintf>
 80039ea:	e05f      	b.n	8003aac <main+0xa04>
			case 5: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Mx, MPU9250.My, MPU9250.Mz); break; //Mag
 80039ec:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <main+0xa2c>)
 80039ee:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80039f2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80039f6:	4b37      	ldr	r3, [pc, #220]	; (8003ad4 <main+0xa2c>)
 80039f8:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80039fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a00:	4b34      	ldr	r3, [pc, #208]	; (8003ad4 <main+0xa2c>)
 8003a02:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 8003a06:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003a0a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003a0e:	ed8d 7b00 	vstr	d7, [sp]
 8003a12:	ec53 2b15 	vmov	r2, r3, d5
 8003a16:	4830      	ldr	r0, [pc, #192]	; (8003ad8 <main+0xa30>)
 8003a18:	f00e fddc 	bl	80125d4 <iprintf>
 8003a1c:	e046      	b.n	8003aac <main+0xa04>
			case 6: printf("%f \t %f \t %f \t \n", MPU9250.Mx_Offset, MPU9250.My_Offset, MPU9250.Mz_Offset); break; //Mag_Offset
 8003a1e:	4b2d      	ldr	r3, [pc, #180]	; (8003ad4 <main+0xa2c>)
 8003a20:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003a24:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003a28:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <main+0xa2c>)
 8003a2a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003a2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a32:	4b28      	ldr	r3, [pc, #160]	; (8003ad4 <main+0xa2c>)
 8003a34:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8003a38:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003a3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003a40:	ed8d 7b00 	vstr	d7, [sp]
 8003a44:	ec53 2b15 	vmov	r2, r3, d5
 8003a48:	4824      	ldr	r0, [pc, #144]	; (8003adc <main+0xa34>)
 8003a4a:	f00e fdc3 	bl	80125d4 <iprintf>
 8003a4e:	e02d      	b.n	8003aac <main+0xa04>
			case 11: printf("%d %d %d %d %d %d %d %d %d %d \n", iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.VrA, iBus.VrB, iBus.SwC, iBus.SwD); break; //Mag_Offset
 8003a50:	4b23      	ldr	r3, [pc, #140]	; (8003ae0 <main+0xa38>)
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	469c      	mov	ip, r3
 8003a56:	4b22      	ldr	r3, [pc, #136]	; (8003ae0 <main+0xa38>)
 8003a58:	885b      	ldrh	r3, [r3, #2]
 8003a5a:	469e      	mov	lr, r3
 8003a5c:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <main+0xa38>)
 8003a5e:	889b      	ldrh	r3, [r3, #4]
 8003a60:	4698      	mov	r8, r3
 8003a62:	4b1f      	ldr	r3, [pc, #124]	; (8003ae0 <main+0xa38>)
 8003a64:	88db      	ldrh	r3, [r3, #6]
 8003a66:	461a      	mov	r2, r3
 8003a68:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <main+0xa38>)
 8003a6a:	891b      	ldrh	r3, [r3, #8]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ae0 <main+0xa38>)
 8003a70:	899b      	ldrh	r3, [r3, #12]
 8003a72:	4618      	mov	r0, r3
 8003a74:	4b1a      	ldr	r3, [pc, #104]	; (8003ae0 <main+0xa38>)
 8003a76:	8a9b      	ldrh	r3, [r3, #20]
 8003a78:	461c      	mov	r4, r3
 8003a7a:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <main+0xa38>)
 8003a7c:	8adb      	ldrh	r3, [r3, #22]
 8003a7e:	461d      	mov	r5, r3
 8003a80:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <main+0xa38>)
 8003a82:	89db      	ldrh	r3, [r3, #14]
 8003a84:	461e      	mov	r6, r3
 8003a86:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <main+0xa38>)
 8003a88:	8a1b      	ldrh	r3, [r3, #16]
 8003a8a:	9306      	str	r3, [sp, #24]
 8003a8c:	9605      	str	r6, [sp, #20]
 8003a8e:	9504      	str	r5, [sp, #16]
 8003a90:	9403      	str	r4, [sp, #12]
 8003a92:	9002      	str	r0, [sp, #8]
 8003a94:	9101      	str	r1, [sp, #4]
 8003a96:	9200      	str	r2, [sp, #0]
 8003a98:	4643      	mov	r3, r8
 8003a9a:	4672      	mov	r2, lr
 8003a9c:	4661      	mov	r1, ip
 8003a9e:	4811      	ldr	r0, [pc, #68]	; (8003ae4 <main+0xa3c>)
 8003aa0:	f00e fd98 	bl	80125d4 <iprintf>
 8003aa4:	e002      	b.n	8003aac <main+0xa04>
			default: break;
			}
		}
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <main+0xa04>
			default: break;
 8003aaa:	bf00      	nop

		//iBus Connection Failsafe
		if(tim1_500ms_flag == 1)
 8003aac:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <main+0xa40>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	f47f abf3 	bne.w	800329c <main+0x1f4>
		{
			tim1_500ms_flag = 0;
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <main+0xa40>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
			if(iBus_rx_cnt == 0)
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <main+0xa44>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <main+0xa22>
			{
				iBus_failsafe = 2;
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <main+0xa48>)
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	701a      	strb	r2, [r3, #0]
			}
			iBus_rx_cnt = 0;
 8003aca:	4b08      	ldr	r3, [pc, #32]	; (8003aec <main+0xa44>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]
	{
 8003ad0:	f7ff bbe4 	b.w	800329c <main+0x1f4>
 8003ad4:	24000278 	.word	0x24000278
 8003ad8:	080150a0 	.word	0x080150a0
 8003adc:	080150b8 	.word	0x080150b8
 8003ae0:	24000258 	.word	0x24000258
 8003ae4:	080150cc 	.word	0x080150cc
 8003ae8:	2400023b 	.word	0x2400023b
 8003aec:	24000216 	.word	0x24000216
 8003af0:	24000214 	.word	0x24000214

08003af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b09c      	sub	sp, #112	; 0x70
 8003af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003afe:	224c      	movs	r2, #76	; 0x4c
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f00e f91c 	bl	8011d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b08:	1d3b      	adds	r3, r7, #4
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f00e f916 	bl	8011d40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003b14:	2002      	movs	r0, #2
 8003b16:	f007 fca3 	bl	800b460 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	4b32      	ldr	r3, [pc, #200]	; (8003be8 <SystemClock_Config+0xf4>)
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	4a31      	ldr	r2, [pc, #196]	; (8003be8 <SystemClock_Config+0xf4>)
 8003b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b28:	6193      	str	r3, [r2, #24]
 8003b2a:	4b2f      	ldr	r3, [pc, #188]	; (8003be8 <SystemClock_Config+0xf4>)
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	4b2d      	ldr	r3, [pc, #180]	; (8003bec <SystemClock_Config+0xf8>)
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	4a2c      	ldr	r2, [pc, #176]	; (8003bec <SystemClock_Config+0xf8>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b40:	4b2a      	ldr	r3, [pc, #168]	; (8003bec <SystemClock_Config+0xf8>)
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003b4c:	bf00      	nop
 8003b4e:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <SystemClock_Config+0xf4>)
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b5a:	d1f8      	bne.n	8003b4e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003b66:	2301      	movs	r3, #1
 8003b68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b6a:	2340      	movs	r3, #64	; 0x40
 8003b6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b72:	2302      	movs	r3, #2
 8003b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8003b76:	2305      	movs	r3, #5
 8003b78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003b7a:	23c0      	movs	r3, #192	; 0xc0
 8003b7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003b82:	2302      	movs	r3, #2
 8003b84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003b86:	2302      	movs	r3, #2
 8003b88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f007 fc9a 	bl	800b4d4 <HAL_RCC_OscConfig>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003ba6:	f000 fcb3 	bl	8004510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003baa:	233f      	movs	r3, #63	; 0x3f
 8003bac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003bba:	2340      	movs	r3, #64	; 0x40
 8003bbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003bbe:	2340      	movs	r3, #64	; 0x40
 8003bc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bc6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003bc8:	2340      	movs	r3, #64	; 0x40
 8003bca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003bcc:	1d3b      	adds	r3, r7, #4
 8003bce:	2104      	movs	r1, #4
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f008 f88f 	bl	800bcf4 <HAL_RCC_ClockConfig>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8003bdc:	f000 fc98 	bl	8004510 <Error_Handler>
  }
}
 8003be0:	bf00      	nop
 8003be2:	3770      	adds	r7, #112	; 0x70
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	58024800 	.word	0x58024800
 8003bec:	58000400 	.word	0x58000400

08003bf0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b0b0      	sub	sp, #192	; 0xc0
 8003bf4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bf6:	1d3b      	adds	r3, r7, #4
 8003bf8:	22bc      	movs	r2, #188	; 0xbc
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f00e f89f 	bl	8011d40 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8003c02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c06:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c0c:	1d3b      	adds	r3, r7, #4
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f008 fbfc 	bl	800c40c <HAL_RCCEx_PeriphCLKConfig>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8003c1a:	f000 fc79 	bl	8004510 <Error_Handler>
  }
}
 8003c1e:	bf00      	nop
 8003c20:	37c0      	adds	r7, #192	; 0xc0
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ca0 <MX_I2C1_Init+0x78>)
 8003c30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8003c32:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c34:	4a1b      	ldr	r2, [pc, #108]	; (8003ca4 <MX_I2C1_Init+0x7c>)
 8003c36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003c38:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c3e:	4b17      	ldr	r3, [pc, #92]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c44:	4b15      	ldr	r3, [pc, #84]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003c4a:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c50:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c62:	480e      	ldr	r0, [pc, #56]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c64:	f005 f9a8 	bl	8008fb8 <HAL_I2C_Init>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003c6e:	f000 fc4f 	bl	8004510 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c72:	2100      	movs	r1, #0
 8003c74:	4809      	ldr	r0, [pc, #36]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c76:	f007 fb5b 	bl	800b330 <HAL_I2CEx_ConfigAnalogFilter>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003c80:	f000 fc46 	bl	8004510 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003c84:	2100      	movs	r1, #0
 8003c86:	4805      	ldr	r0, [pc, #20]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c88:	f007 fb9d 	bl	800b3c6 <HAL_I2CEx_ConfigDigitalFilter>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003c92:	f000 fc3d 	bl	8004510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	24000a4c 	.word	0x24000a4c
 8003ca0:	40005400 	.word	0x40005400
 8003ca4:	00b03fdb 	.word	0x00b03fdb

08003ca8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cae:	4a28      	ldr	r2, [pc, #160]	; (8003d50 <MX_SPI1_Init+0xa8>)
 8003cb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cb2:	4b26      	ldr	r3, [pc, #152]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cb4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003cb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cba:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cc0:	4b22      	ldr	r3, [pc, #136]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cc2:	2207      	movs	r2, #7
 8003cc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cc6:	4b21      	ldr	r3, [pc, #132]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ccc:	4b1f      	ldr	r3, [pc, #124]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cd2:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cd4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003cd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003cda:	4b1c      	ldr	r3, [pc, #112]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cdc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003ce0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ce2:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ce8:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cee:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003cf4:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003cfa:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d00:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003d02:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003d08:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003d14:	4b0d      	ldr	r3, [pc, #52]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003d1a:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003d20:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003d2c:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d38:	4804      	ldr	r0, [pc, #16]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d3a:	f009 fec9 	bl	800dad0 <HAL_SPI_Init>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003d44:	f000 fbe4 	bl	8004510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	24000ce4 	.word	0x24000ce4
 8003d50:	40013000 	.word	0x40013000

08003d54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08e      	sub	sp, #56	; 0x38
 8003d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	605a      	str	r2, [r3, #4]
 8003d64:	609a      	str	r2, [r3, #8]
 8003d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d68:	f107 031c 	add.w	r3, r7, #28
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d74:	463b      	mov	r3, r7
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	605a      	str	r2, [r3, #4]
 8003d7c:	609a      	str	r2, [r3, #8]
 8003d7e:	60da      	str	r2, [r3, #12]
 8003d80:	611a      	str	r2, [r3, #16]
 8003d82:	615a      	str	r2, [r3, #20]
 8003d84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d86:	4b3d      	ldr	r3, [pc, #244]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003d88:	4a3d      	ldr	r2, [pc, #244]	; (8003e80 <MX_TIM3_Init+0x12c>)
 8003d8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8003d8c:	4b3b      	ldr	r3, [pc, #236]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003d8e:	2217      	movs	r2, #23
 8003d90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d92:	4b3a      	ldr	r3, [pc, #232]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8003d98:	4b38      	ldr	r3, [pc, #224]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003d9a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003d9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da0:	4b36      	ldr	r3, [pc, #216]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003da6:	4b35      	ldr	r3, [pc, #212]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003dac:	4833      	ldr	r0, [pc, #204]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003dae:	f00a ff4a 	bl	800ec46 <HAL_TIM_Base_Init>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003db8:	f000 fbaa 	bl	8004510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003dc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	482c      	ldr	r0, [pc, #176]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003dca:	f00b fbe3 	bl	800f594 <HAL_TIM_ConfigClockSource>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003dd4:	f000 fb9c 	bl	8004510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003dd8:	4828      	ldr	r0, [pc, #160]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003dda:	f00a fffb 	bl	800edd4 <HAL_TIM_PWM_Init>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003de4:	f000 fb94 	bl	8004510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003df0:	f107 031c 	add.w	r3, r7, #28
 8003df4:	4619      	mov	r1, r3
 8003df6:	4821      	ldr	r0, [pc, #132]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003df8:	f00c f914 	bl	8010024 <HAL_TIMEx_MasterConfigSynchronization>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003e02:	f000 fb85 	bl	8004510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e06:	2360      	movs	r3, #96	; 0x60
 8003e08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e16:	463b      	mov	r3, r7
 8003e18:	2200      	movs	r2, #0
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4817      	ldr	r0, [pc, #92]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003e1e:	f00b faa9 	bl	800f374 <HAL_TIM_PWM_ConfigChannel>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003e28:	f000 fb72 	bl	8004510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e2c:	463b      	mov	r3, r7
 8003e2e:	2204      	movs	r2, #4
 8003e30:	4619      	mov	r1, r3
 8003e32:	4812      	ldr	r0, [pc, #72]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003e34:	f00b fa9e 	bl	800f374 <HAL_TIM_PWM_ConfigChannel>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003e3e:	f000 fb67 	bl	8004510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e42:	463b      	mov	r3, r7
 8003e44:	2208      	movs	r2, #8
 8003e46:	4619      	mov	r1, r3
 8003e48:	480c      	ldr	r0, [pc, #48]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003e4a:	f00b fa93 	bl	800f374 <HAL_TIM_PWM_ConfigChannel>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8003e54:	f000 fb5c 	bl	8004510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e58:	463b      	mov	r3, r7
 8003e5a:	220c      	movs	r2, #12
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4807      	ldr	r0, [pc, #28]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003e60:	f00b fa88 	bl	800f374 <HAL_TIM_PWM_ConfigChannel>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8003e6a:	f000 fb51 	bl	8004510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003e6e:	4803      	ldr	r0, [pc, #12]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003e70:	f000 fcba 	bl	80047e8 <HAL_TIM_MspPostInit>

}
 8003e74:	bf00      	nop
 8003e76:	3738      	adds	r7, #56	; 0x38
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	24000a98 	.word	0x24000a98
 8003e80:	40000400 	.word	0x40000400

08003e84 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e8a:	1d3b      	adds	r3, r7, #4
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003e94:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <MX_TIM7_Init+0x64>)
 8003e96:	4a15      	ldr	r2, [pc, #84]	; (8003eec <MX_TIM7_Init+0x68>)
 8003e98:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 8003e9a:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <MX_TIM7_Init+0x64>)
 8003e9c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003ea0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <MX_TIM7_Init+0x64>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <MX_TIM7_Init+0x64>)
 8003eaa:	2205      	movs	r2, #5
 8003eac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003eae:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <MX_TIM7_Init+0x64>)
 8003eb0:	2280      	movs	r2, #128	; 0x80
 8003eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003eb4:	480c      	ldr	r0, [pc, #48]	; (8003ee8 <MX_TIM7_Init+0x64>)
 8003eb6:	f00a fec6 	bl	800ec46 <HAL_TIM_Base_Init>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003ec0:	f000 fb26 	bl	8004510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003ecc:	1d3b      	adds	r3, r7, #4
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4805      	ldr	r0, [pc, #20]	; (8003ee8 <MX_TIM7_Init+0x64>)
 8003ed2:	f00c f8a7 	bl	8010024 <HAL_TIMEx_MasterConfigSynchronization>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003edc:	f000 fb18 	bl	8004510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	24000e0c 	.word	0x24000e0c
 8003eec:	40001400 	.word	0x40001400

08003ef0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ef4:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003ef6:	4a23      	ldr	r2, [pc, #140]	; (8003f84 <MX_USART1_UART_Init+0x94>)
 8003ef8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003efa:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f02:	4b1f      	ldr	r3, [pc, #124]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f08:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f0e:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f14:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f16:	220c      	movs	r2, #12
 8003f18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f1a:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f20:	4b17      	ldr	r3, [pc, #92]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f26:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f32:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f38:	4811      	ldr	r0, [pc, #68]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f3a:	f00c f919 	bl	8010170 <HAL_UART_Init>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003f44:	f000 fae4 	bl	8004510 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f48:	2100      	movs	r1, #0
 8003f4a:	480d      	ldr	r0, [pc, #52]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f4c:	f00d fe04 	bl	8011b58 <HAL_UARTEx_SetTxFifoThreshold>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003f56:	f000 fadb 	bl	8004510 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	4808      	ldr	r0, [pc, #32]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f5e:	f00d fe39 	bl	8011bd4 <HAL_UARTEx_SetRxFifoThreshold>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003f68:	f000 fad2 	bl	8004510 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003f6c:	4804      	ldr	r0, [pc, #16]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f6e:	f00d fdba 	bl	8011ae6 <HAL_UARTEx_DisableFifoMode>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003f78:	f000 faca 	bl	8004510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f7c:	bf00      	nop
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	24000bdc 	.word	0x24000bdc
 8003f84:	40011000 	.word	0x40011000

08003f88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f8c:	4b22      	ldr	r3, [pc, #136]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003f8e:	4a23      	ldr	r2, [pc, #140]	; (800401c <MX_USART2_UART_Init+0x94>)
 8003f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f92:	4b21      	ldr	r3, [pc, #132]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f9a:	4b1f      	ldr	r3, [pc, #124]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003fa0:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003fa6:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003fac:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fae:	220c      	movs	r2, #12
 8003fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fb2:	4b19      	ldr	r3, [pc, #100]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fb8:	4b17      	ldr	r3, [pc, #92]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fbe:	4b16      	ldr	r3, [pc, #88]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003fc4:	4b14      	ldr	r3, [pc, #80]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fca:	4b13      	ldr	r3, [pc, #76]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003fd0:	4811      	ldr	r0, [pc, #68]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fd2:	f00c f8cd 	bl	8010170 <HAL_UART_Init>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003fdc:	f000 fa98 	bl	8004510 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	480d      	ldr	r0, [pc, #52]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fe4:	f00d fdb8 	bl	8011b58 <HAL_UARTEx_SetTxFifoThreshold>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003fee:	f000 fa8f 	bl	8004510 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	4808      	ldr	r0, [pc, #32]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003ff6:	f00d fded 	bl	8011bd4 <HAL_UARTEx_SetRxFifoThreshold>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004000:	f000 fa86 	bl	8004510 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004004:	4804      	ldr	r0, [pc, #16]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8004006:	f00d fd6e 	bl	8011ae6 <HAL_UARTEx_DisableFifoMode>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004010:	f000 fa7e 	bl	8004510 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004014:	bf00      	nop
 8004016:	bd80      	pop	{r7, pc}
 8004018:	24000d70 	.word	0x24000d70
 800401c:	40004400 	.word	0x40004400

08004020 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004024:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 8004026:	4a23      	ldr	r2, [pc, #140]	; (80040b4 <MX_USART3_UART_Init+0x94>)
 8004028:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 800402a:	4b21      	ldr	r3, [pc, #132]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 800402c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8004030:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004032:	4b1f      	ldr	r3, [pc, #124]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 8004034:	2200      	movs	r2, #0
 8004036:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004038:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 800403a:	2200      	movs	r2, #0
 800403c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800403e:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 8004040:	2200      	movs	r2, #0
 8004042:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004044:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 8004046:	220c      	movs	r2, #12
 8004048:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800404a:	4b19      	ldr	r3, [pc, #100]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 800404c:	2200      	movs	r2, #0
 800404e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004050:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 8004052:	2200      	movs	r2, #0
 8004054:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004056:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 8004058:	2200      	movs	r2, #0
 800405a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800405c:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 800405e:	2200      	movs	r2, #0
 8004060:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004062:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 8004064:	2200      	movs	r2, #0
 8004066:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004068:	4811      	ldr	r0, [pc, #68]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 800406a:	f00c f881 	bl	8010170 <HAL_UART_Init>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004074:	f000 fa4c 	bl	8004510 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004078:	2100      	movs	r1, #0
 800407a:	480d      	ldr	r0, [pc, #52]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 800407c:	f00d fd6c 	bl	8011b58 <HAL_UARTEx_SetTxFifoThreshold>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004086:	f000 fa43 	bl	8004510 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800408a:	2100      	movs	r1, #0
 800408c:	4808      	ldr	r0, [pc, #32]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 800408e:	f00d fda1 	bl	8011bd4 <HAL_UARTEx_SetRxFifoThreshold>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004098:	f000 fa3a 	bl	8004510 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800409c:	4804      	ldr	r0, [pc, #16]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 800409e:	f00d fd22 	bl	8011ae6 <HAL_UARTEx_DisableFifoMode>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80040a8:	f000 fa32 	bl	8004510 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80040ac:	bf00      	nop
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	240009bc 	.word	0x240009bc
 80040b4:	40004800 	.word	0x40004800

080040b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80040be:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <MX_DMA_Init+0x7c>)
 80040c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80040c4:	4a1b      	ldr	r2, [pc, #108]	; (8004134 <MX_DMA_Init+0x7c>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80040ce:	4b19      	ldr	r3, [pc, #100]	; (8004134 <MX_DMA_Init+0x7c>)
 80040d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	607b      	str	r3, [r7, #4]
 80040da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80040dc:	2200      	movs	r2, #0
 80040de:	2100      	movs	r1, #0
 80040e0:	200b      	movs	r0, #11
 80040e2:	f001 ff16 	bl	8005f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80040e6:	200b      	movs	r0, #11
 80040e8:	f001 ff2d 	bl	8005f46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80040ec:	2200      	movs	r2, #0
 80040ee:	2100      	movs	r1, #0
 80040f0:	200c      	movs	r0, #12
 80040f2:	f001 ff0e 	bl	8005f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80040f6:	200c      	movs	r0, #12
 80040f8:	f001 ff25 	bl	8005f46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80040fc:	2200      	movs	r2, #0
 80040fe:	2100      	movs	r1, #0
 8004100:	200d      	movs	r0, #13
 8004102:	f001 ff06 	bl	8005f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004106:	200d      	movs	r0, #13
 8004108:	f001 ff1d 	bl	8005f46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800410c:	2200      	movs	r2, #0
 800410e:	2100      	movs	r1, #0
 8004110:	200e      	movs	r0, #14
 8004112:	f001 fefe 	bl	8005f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004116:	200e      	movs	r0, #14
 8004118:	f001 ff15 	bl	8005f46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800411c:	2200      	movs	r2, #0
 800411e:	2100      	movs	r1, #0
 8004120:	200f      	movs	r0, #15
 8004122:	f001 fef6 	bl	8005f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004126:	200f      	movs	r0, #15
 8004128:	f001 ff0d 	bl	8005f46 <HAL_NVIC_EnableIRQ>

}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	58024400 	.word	0x58024400

08004138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800413e:	f107 0314 	add.w	r3, r7, #20
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	609a      	str	r2, [r3, #8]
 800414a:	60da      	str	r2, [r3, #12]
 800414c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800414e:	4b4e      	ldr	r3, [pc, #312]	; (8004288 <MX_GPIO_Init+0x150>)
 8004150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004154:	4a4c      	ldr	r2, [pc, #304]	; (8004288 <MX_GPIO_Init+0x150>)
 8004156:	f043 0310 	orr.w	r3, r3, #16
 800415a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800415e:	4b4a      	ldr	r3, [pc, #296]	; (8004288 <MX_GPIO_Init+0x150>)
 8004160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800416c:	4b46      	ldr	r3, [pc, #280]	; (8004288 <MX_GPIO_Init+0x150>)
 800416e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004172:	4a45      	ldr	r2, [pc, #276]	; (8004288 <MX_GPIO_Init+0x150>)
 8004174:	f043 0304 	orr.w	r3, r3, #4
 8004178:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800417c:	4b42      	ldr	r3, [pc, #264]	; (8004288 <MX_GPIO_Init+0x150>)
 800417e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800418a:	4b3f      	ldr	r3, [pc, #252]	; (8004288 <MX_GPIO_Init+0x150>)
 800418c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004190:	4a3d      	ldr	r2, [pc, #244]	; (8004288 <MX_GPIO_Init+0x150>)
 8004192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004196:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800419a:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <MX_GPIO_Init+0x150>)
 800419c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a8:	4b37      	ldr	r3, [pc, #220]	; (8004288 <MX_GPIO_Init+0x150>)
 80041aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ae:	4a36      	ldr	r2, [pc, #216]	; (8004288 <MX_GPIO_Init+0x150>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041b8:	4b33      	ldr	r3, [pc, #204]	; (8004288 <MX_GPIO_Init+0x150>)
 80041ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	607b      	str	r3, [r7, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041c6:	4b30      	ldr	r3, [pc, #192]	; (8004288 <MX_GPIO_Init+0x150>)
 80041c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041cc:	4a2e      	ldr	r2, [pc, #184]	; (8004288 <MX_GPIO_Init+0x150>)
 80041ce:	f043 0302 	orr.w	r3, r3, #2
 80041d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041d6:	4b2c      	ldr	r3, [pc, #176]	; (8004288 <MX_GPIO_Init+0x150>)
 80041d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80041e4:	2200      	movs	r2, #0
 80041e6:	2108      	movs	r1, #8
 80041e8:	4828      	ldr	r0, [pc, #160]	; (800428c <MX_GPIO_Init+0x154>)
 80041ea:	f004 fecb 	bl	8008f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80041ee:	2200      	movs	r2, #0
 80041f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041f4:	4826      	ldr	r0, [pc, #152]	; (8004290 <MX_GPIO_Init+0x158>)
 80041f6:	f004 fec5 	bl	8008f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80041fa:	2200      	movs	r2, #0
 80041fc:	2102      	movs	r1, #2
 80041fe:	4825      	ldr	r0, [pc, #148]	; (8004294 <MX_GPIO_Init+0x15c>)
 8004200:	f004 fec0 	bl	8008f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W25qxx_CS_GPIO_Port, W25qxx_CS_Pin, GPIO_PIN_RESET);
 8004204:	2200      	movs	r2, #0
 8004206:	2140      	movs	r1, #64	; 0x40
 8004208:	4823      	ldr	r0, [pc, #140]	; (8004298 <MX_GPIO_Init+0x160>)
 800420a:	f004 febb 	bl	8008f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 800420e:	2308      	movs	r3, #8
 8004210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004212:	2301      	movs	r3, #1
 8004214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421a:	2300      	movs	r3, #0
 800421c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800421e:	f107 0314 	add.w	r3, r7, #20
 8004222:	4619      	mov	r1, r3
 8004224:	4819      	ldr	r0, [pc, #100]	; (800428c <MX_GPIO_Init+0x154>)
 8004226:	f004 fcfd 	bl	8008c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800422a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800422e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004230:	2301      	movs	r3, #1
 8004232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004234:	2300      	movs	r3, #0
 8004236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004238:	2300      	movs	r3, #0
 800423a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800423c:	f107 0314 	add.w	r3, r7, #20
 8004240:	4619      	mov	r1, r3
 8004242:	4813      	ldr	r0, [pc, #76]	; (8004290 <MX_GPIO_Init+0x158>)
 8004244:	f004 fcee 	bl	8008c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8004248:	2302      	movs	r3, #2
 800424a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800424c:	2301      	movs	r3, #1
 800424e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004250:	2300      	movs	r3, #0
 8004252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004254:	2300      	movs	r3, #0
 8004256:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8004258:	f107 0314 	add.w	r3, r7, #20
 800425c:	4619      	mov	r1, r3
 800425e:	480d      	ldr	r0, [pc, #52]	; (8004294 <MX_GPIO_Init+0x15c>)
 8004260:	f004 fce0 	bl	8008c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : W25qxx_CS_Pin */
  GPIO_InitStruct.Pin = W25qxx_CS_Pin;
 8004264:	2340      	movs	r3, #64	; 0x40
 8004266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004268:	2301      	movs	r3, #1
 800426a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426c:	2300      	movs	r3, #0
 800426e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004270:	2300      	movs	r3, #0
 8004272:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W25qxx_CS_GPIO_Port, &GPIO_InitStruct);
 8004274:	f107 0314 	add.w	r3, r7, #20
 8004278:	4619      	mov	r1, r3
 800427a:	4807      	ldr	r0, [pc, #28]	; (8004298 <MX_GPIO_Init+0x160>)
 800427c:	f004 fcd2 	bl	8008c24 <HAL_GPIO_Init>

}
 8004280:	bf00      	nop
 8004282:	3728      	adds	r7, #40	; 0x28
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	58024400 	.word	0x58024400
 800428c:	58021000 	.word	0x58021000
 8004290:	58020800 	.word	0x58020800
 8004294:	58020000 	.word	0x58020000
 8004298:	58020400 	.word	0x58020400

0800429c <Compass_Calibration>:

/* USER CODE BEGIN 4 */
void Compass_Calibration(uint8_t mag_calibration_enable)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
	if(mag_calibration_enable == 1)
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	f040 80db 	bne.w	8004464 <Compass_Calibration+0x1c8>
	{
		for(int i =0;i<5;i++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e00b      	b.n	80042cc <Compass_Calibration+0x30>
		{
			MPU9250_Read_All(&hi2c1);
 80042b4:	486d      	ldr	r0, [pc, #436]	; (800446c <Compass_Calibration+0x1d0>)
 80042b6:	f7fc fce9 	bl	8000c8c <MPU9250_Read_All>
			HAL_Delay(1);
 80042ba:	2001      	movs	r0, #1
 80042bc:	f001 fd1e 	bl	8005cfc <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 80042c0:	486b      	ldr	r0, [pc, #428]	; (8004470 <Compass_Calibration+0x1d4>)
 80042c2:	f7fc fe8d 	bl	8000fe0 <MPU9250_Parsing_NoOffset>
		for(int i =0;i<5;i++)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3301      	adds	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	ddf0      	ble.n	80042b4 <Compass_Calibration+0x18>
		}
		MPU9250.Mx_Max = MPU9250.Mx;
 80042d2:	4b67      	ldr	r3, [pc, #412]	; (8004470 <Compass_Calibration+0x1d4>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	4a66      	ldr	r2, [pc, #408]	; (8004470 <Compass_Calibration+0x1d4>)
 80042d8:	6593      	str	r3, [r2, #88]	; 0x58
		MPU9250.Mx_Min = MPU9250.Mx;
 80042da:	4b65      	ldr	r3, [pc, #404]	; (8004470 <Compass_Calibration+0x1d4>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	4a64      	ldr	r2, [pc, #400]	; (8004470 <Compass_Calibration+0x1d4>)
 80042e0:	64d3      	str	r3, [r2, #76]	; 0x4c
		MPU9250.My_Max = MPU9250.My;
 80042e2:	4b63      	ldr	r3, [pc, #396]	; (8004470 <Compass_Calibration+0x1d4>)
 80042e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e6:	4a62      	ldr	r2, [pc, #392]	; (8004470 <Compass_Calibration+0x1d4>)
 80042e8:	65d3      	str	r3, [r2, #92]	; 0x5c
		MPU9250.My_Min = MPU9250.My;
 80042ea:	4b61      	ldr	r3, [pc, #388]	; (8004470 <Compass_Calibration+0x1d4>)
 80042ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ee:	4a60      	ldr	r2, [pc, #384]	; (8004470 <Compass_Calibration+0x1d4>)
 80042f0:	6513      	str	r3, [r2, #80]	; 0x50
		MPU9250.Mz_Max = MPU9250.Mz;
 80042f2:	4b5f      	ldr	r3, [pc, #380]	; (8004470 <Compass_Calibration+0x1d4>)
 80042f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042f6:	4a5e      	ldr	r2, [pc, #376]	; (8004470 <Compass_Calibration+0x1d4>)
 80042f8:	6613      	str	r3, [r2, #96]	; 0x60
		MPU9250.Mz_Min = MPU9250.Mz;
 80042fa:	4b5d      	ldr	r3, [pc, #372]	; (8004470 <Compass_Calibration+0x1d4>)
 80042fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042fe:	4a5c      	ldr	r2, [pc, #368]	; (8004470 <Compass_Calibration+0x1d4>)
 8004300:	6553      	str	r3, [r2, #84]	; 0x54

		while(mag_calibration_enable != 0)
 8004302:	e06a      	b.n	80043da <Compass_Calibration+0x13e>
		{
			Is_iBus_Received(ibus_rx_cplt_flag);
 8004304:	4b5b      	ldr	r3, [pc, #364]	; (8004474 <Compass_Calibration+0x1d8>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fe9b 	bl	8005044 <Is_iBus_Received>
			Receive_Command();
 800430e:	f000 fe21 	bl	8004f54 <Receive_Command>
			MPU9250_Read_All(&hi2c1);
 8004312:	4856      	ldr	r0, [pc, #344]	; (800446c <Compass_Calibration+0x1d0>)
 8004314:	f7fc fcba 	bl	8000c8c <MPU9250_Read_All>
			HAL_Delay(1);
 8004318:	2001      	movs	r0, #1
 800431a:	f001 fcef 	bl	8005cfc <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 800431e:	4854      	ldr	r0, [pc, #336]	; (8004470 <Compass_Calibration+0x1d4>)
 8004320:	f7fc fe5e 	bl	8000fe0 <MPU9250_Parsing_NoOffset>
			if(MPU9250.Mx > MPU9250.Mx_Max) MPU9250.Mx_Max = MPU9250.Mx;
 8004324:	4b52      	ldr	r3, [pc, #328]	; (8004470 <Compass_Calibration+0x1d4>)
 8004326:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800432a:	4b51      	ldr	r3, [pc, #324]	; (8004470 <Compass_Calibration+0x1d4>)
 800432c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004330:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004338:	dd03      	ble.n	8004342 <Compass_Calibration+0xa6>
 800433a:	4b4d      	ldr	r3, [pc, #308]	; (8004470 <Compass_Calibration+0x1d4>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433e:	4a4c      	ldr	r2, [pc, #304]	; (8004470 <Compass_Calibration+0x1d4>)
 8004340:	6593      	str	r3, [r2, #88]	; 0x58
			if(MPU9250.Mx < MPU9250.Mx_Min) MPU9250.Mx_Min = MPU9250.Mx;
 8004342:	4b4b      	ldr	r3, [pc, #300]	; (8004470 <Compass_Calibration+0x1d4>)
 8004344:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8004348:	4b49      	ldr	r3, [pc, #292]	; (8004470 <Compass_Calibration+0x1d4>)
 800434a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800434e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004356:	d503      	bpl.n	8004360 <Compass_Calibration+0xc4>
 8004358:	4b45      	ldr	r3, [pc, #276]	; (8004470 <Compass_Calibration+0x1d4>)
 800435a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435c:	4a44      	ldr	r2, [pc, #272]	; (8004470 <Compass_Calibration+0x1d4>)
 800435e:	64d3      	str	r3, [r2, #76]	; 0x4c

			if(MPU9250.My > MPU9250.My_Max) MPU9250.My_Max = MPU9250.My;
 8004360:	4b43      	ldr	r3, [pc, #268]	; (8004470 <Compass_Calibration+0x1d4>)
 8004362:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8004366:	4b42      	ldr	r3, [pc, #264]	; (8004470 <Compass_Calibration+0x1d4>)
 8004368:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800436c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004374:	dd03      	ble.n	800437e <Compass_Calibration+0xe2>
 8004376:	4b3e      	ldr	r3, [pc, #248]	; (8004470 <Compass_Calibration+0x1d4>)
 8004378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437a:	4a3d      	ldr	r2, [pc, #244]	; (8004470 <Compass_Calibration+0x1d4>)
 800437c:	65d3      	str	r3, [r2, #92]	; 0x5c
			if(MPU9250.My < MPU9250.My_Min) MPU9250.My_Min = MPU9250.My;
 800437e:	4b3c      	ldr	r3, [pc, #240]	; (8004470 <Compass_Calibration+0x1d4>)
 8004380:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8004384:	4b3a      	ldr	r3, [pc, #232]	; (8004470 <Compass_Calibration+0x1d4>)
 8004386:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800438a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004392:	d503      	bpl.n	800439c <Compass_Calibration+0x100>
 8004394:	4b36      	ldr	r3, [pc, #216]	; (8004470 <Compass_Calibration+0x1d4>)
 8004396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004398:	4a35      	ldr	r2, [pc, #212]	; (8004470 <Compass_Calibration+0x1d4>)
 800439a:	6513      	str	r3, [r2, #80]	; 0x50

			if(MPU9250.Mz > MPU9250.Mz_Max) MPU9250.Mz_Max = MPU9250.Mz;
 800439c:	4b34      	ldr	r3, [pc, #208]	; (8004470 <Compass_Calibration+0x1d4>)
 800439e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80043a2:	4b33      	ldr	r3, [pc, #204]	; (8004470 <Compass_Calibration+0x1d4>)
 80043a4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80043a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b0:	dd03      	ble.n	80043ba <Compass_Calibration+0x11e>
 80043b2:	4b2f      	ldr	r3, [pc, #188]	; (8004470 <Compass_Calibration+0x1d4>)
 80043b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043b6:	4a2e      	ldr	r2, [pc, #184]	; (8004470 <Compass_Calibration+0x1d4>)
 80043b8:	6613      	str	r3, [r2, #96]	; 0x60
			if(MPU9250.Mz < MPU9250.Mz_Min) MPU9250.Mz_Min = MPU9250.Mz;
 80043ba:	4b2d      	ldr	r3, [pc, #180]	; (8004470 <Compass_Calibration+0x1d4>)
 80043bc:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80043c0:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <Compass_Calibration+0x1d4>)
 80043c2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80043c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ce:	d400      	bmi.n	80043d2 <Compass_Calibration+0x136>
 80043d0:	e003      	b.n	80043da <Compass_Calibration+0x13e>
 80043d2:	4b27      	ldr	r3, [pc, #156]	; (8004470 <Compass_Calibration+0x1d4>)
 80043d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043d6:	4a26      	ldr	r2, [pc, #152]	; (8004470 <Compass_Calibration+0x1d4>)
 80043d8:	6553      	str	r3, [r2, #84]	; 0x54
		while(mag_calibration_enable != 0)
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d191      	bne.n	8004304 <Compass_Calibration+0x68>
		}
		MPU9250.Mx_Offset = (MPU9250.Mx_Max + MPU9250.Mx_Min) / 2;
 80043e0:	4b23      	ldr	r3, [pc, #140]	; (8004470 <Compass_Calibration+0x1d4>)
 80043e2:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80043e6:	4b22      	ldr	r3, [pc, #136]	; (8004470 <Compass_Calibration+0x1d4>)
 80043e8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80043ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80043f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043f8:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <Compass_Calibration+0x1d4>)
 80043fa:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		MPU9250.My_Offset = (MPU9250.My_Max + MPU9250.My_Min) / 2;
 80043fe:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <Compass_Calibration+0x1d4>)
 8004400:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8004404:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <Compass_Calibration+0x1d4>)
 8004406:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800440a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800440e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004412:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004416:	4b16      	ldr	r3, [pc, #88]	; (8004470 <Compass_Calibration+0x1d4>)
 8004418:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		MPU9250.Mz_Offset = (MPU9250.Mz_Max + MPU9250.Mz_Min) / 2;
 800441c:	4b14      	ldr	r3, [pc, #80]	; (8004470 <Compass_Calibration+0x1d4>)
 800441e:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8004422:	4b13      	ldr	r3, [pc, #76]	; (8004470 <Compass_Calibration+0x1d4>)
 8004424:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004428:	ee37 7a27 	vadd.f32	s14, s14, s15
 800442c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004430:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004434:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <Compass_Calibration+0x1d4>)
 8004436:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

		*(float*)&Mag_Calib[0] = MPU9250.Mx_Offset;
 800443a:	4a0f      	ldr	r2, [pc, #60]	; (8004478 <Compass_Calibration+0x1dc>)
 800443c:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <Compass_Calibration+0x1d4>)
 800443e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004440:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[4] = MPU9250.My_Offset;
 8004442:	4a0e      	ldr	r2, [pc, #56]	; (800447c <Compass_Calibration+0x1e0>)
 8004444:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <Compass_Calibration+0x1d4>)
 8004446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004448:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[8] = MPU9250.Mz_Offset;
 800444a:	4a0d      	ldr	r2, [pc, #52]	; (8004480 <Compass_Calibration+0x1e4>)
 800444c:	4b08      	ldr	r3, [pc, #32]	; (8004470 <Compass_Calibration+0x1d4>)
 800444e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004450:	6013      	str	r3, [r2, #0]

		W25qxx_EraseSector(0);
 8004452:	2000      	movs	r0, #0
 8004454:	f001 f962 	bl	800571c <W25qxx_EraseSector>
		W25qxx_WriteSector(Mag_Calib, 0, 0, 12);
 8004458:	230c      	movs	r3, #12
 800445a:	2200      	movs	r2, #0
 800445c:	2100      	movs	r1, #0
 800445e:	4806      	ldr	r0, [pc, #24]	; (8004478 <Compass_Calibration+0x1dc>)
 8004460:	f001 fa4e 	bl	8005900 <W25qxx_WriteSector>
	}
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	24000a4c 	.word	0x24000a4c
 8004470:	24000278 	.word	0x24000278
 8004474:	24000240 	.word	0x24000240
 8004478:	24000e00 	.word	0x24000e00
 800447c:	24000e04 	.word	0x24000e04
 8004480:	24000e08 	.word	0x24000e08

08004484 <ESC_Calibration>:

void ESC_Calibration(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 20000;
 8004488:	4b14      	ldr	r3, [pc, #80]	; (80044dc <ESC_Calibration+0x58>)
 800448a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800448e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 20000;
 8004490:	4b12      	ldr	r3, [pc, #72]	; (80044dc <ESC_Calibration+0x58>)
 8004492:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004496:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 20000;
 8004498:	4b10      	ldr	r3, [pc, #64]	; (80044dc <ESC_Calibration+0x58>)
 800449a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800449e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 20000;
 80044a0:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <ESC_Calibration+0x58>)
 80044a2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(7000);
 80044a8:	f641 3058 	movw	r0, #7000	; 0x1b58
 80044ac:	f001 fc26 	bl	8005cfc <HAL_Delay>
	TIM3->CCR1 = 10000;
 80044b0:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <ESC_Calibration+0x58>)
 80044b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80044b6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 10000;
 80044b8:	4b08      	ldr	r3, [pc, #32]	; (80044dc <ESC_Calibration+0x58>)
 80044ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80044be:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 10000;
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <ESC_Calibration+0x58>)
 80044c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80044c6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 10000;
 80044c8:	4b04      	ldr	r3, [pc, #16]	; (80044dc <ESC_Calibration+0x58>)
 80044ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(8000);
 80044d0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80044d4:	f001 fc12 	bl	8005cfc <HAL_Delay>
}
 80044d8:	bf00      	nop
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40000400 	.word	0x40000400

080044e0 <Stop_Motor>:

void Stop_Motor(int ccr)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	TIM3->CCR1 = ccr;
 80044e8:	4a08      	ldr	r2, [pc, #32]	; (800450c <Stop_Motor+0x2c>)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->CCR2 = ccr;
 80044ee:	4a07      	ldr	r2, [pc, #28]	; (800450c <Stop_Motor+0x2c>)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3->CCR3 = ccr;
 80044f4:	4a05      	ldr	r2, [pc, #20]	; (800450c <Stop_Motor+0x2c>)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM3->CCR4 = ccr;
 80044fa:	4a04      	ldr	r2, [pc, #16]	; (800450c <Stop_Motor+0x2c>)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	40000400 	.word	0x40000400

08004510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004514:	b672      	cpsid	i
}
 8004516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004518:	e7fe      	b.n	8004518 <Error_Handler+0x8>
	...

0800451c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004522:	4b0a      	ldr	r3, [pc, #40]	; (800454c <HAL_MspInit+0x30>)
 8004524:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004528:	4a08      	ldr	r2, [pc, #32]	; (800454c <HAL_MspInit+0x30>)
 800452a:	f043 0302 	orr.w	r3, r3, #2
 800452e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004532:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_MspInit+0x30>)
 8004534:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	607b      	str	r3, [r7, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	58024400 	.word	0x58024400

08004550 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b0b8      	sub	sp, #224	; 0xe0
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004558:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	605a      	str	r2, [r3, #4]
 8004562:	609a      	str	r2, [r3, #8]
 8004564:	60da      	str	r2, [r3, #12]
 8004566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004568:	f107 0310 	add.w	r3, r7, #16
 800456c:	22bc      	movs	r2, #188	; 0xbc
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f00d fbe5 	bl	8011d40 <memset>
  if(hi2c->Instance==I2C1)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a3f      	ldr	r2, [pc, #252]	; (8004678 <HAL_I2C_MspInit+0x128>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d177      	bne.n	8004670 <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004580:	2308      	movs	r3, #8
 8004582:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8004584:	2300      	movs	r3, #0
 8004586:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800458a:	f107 0310 	add.w	r3, r7, #16
 800458e:	4618      	mov	r0, r3
 8004590:	f007 ff3c 	bl	800c40c <HAL_RCCEx_PeriphCLKConfig>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800459a:	f7ff ffb9 	bl	8004510 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800459e:	4b37      	ldr	r3, [pc, #220]	; (800467c <HAL_I2C_MspInit+0x12c>)
 80045a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045a4:	4a35      	ldr	r2, [pc, #212]	; (800467c <HAL_I2C_MspInit+0x12c>)
 80045a6:	f043 0302 	orr.w	r3, r3, #2
 80045aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045ae:	4b33      	ldr	r3, [pc, #204]	; (800467c <HAL_I2C_MspInit+0x12c>)
 80045b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80045bc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80045c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045c4:	2312      	movs	r3, #18
 80045c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d0:	2300      	movs	r3, #0
 80045d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045d6:	2304      	movs	r3, #4
 80045d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80045e0:	4619      	mov	r1, r3
 80045e2:	4827      	ldr	r0, [pc, #156]	; (8004680 <HAL_I2C_MspInit+0x130>)
 80045e4:	f004 fb1e 	bl	8008c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045e8:	4b24      	ldr	r3, [pc, #144]	; (800467c <HAL_I2C_MspInit+0x12c>)
 80045ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045ee:	4a23      	ldr	r2, [pc, #140]	; (800467c <HAL_I2C_MspInit+0x12c>)
 80045f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045f8:	4b20      	ldr	r3, [pc, #128]	; (800467c <HAL_I2C_MspInit+0x12c>)
 80045fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004602:	60bb      	str	r3, [r7, #8]
 8004604:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 8004606:	4b1f      	ldr	r3, [pc, #124]	; (8004684 <HAL_I2C_MspInit+0x134>)
 8004608:	4a1f      	ldr	r2, [pc, #124]	; (8004688 <HAL_I2C_MspInit+0x138>)
 800460a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800460c:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <HAL_I2C_MspInit+0x134>)
 800460e:	2221      	movs	r2, #33	; 0x21
 8004610:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004612:	4b1c      	ldr	r3, [pc, #112]	; (8004684 <HAL_I2C_MspInit+0x134>)
 8004614:	2200      	movs	r2, #0
 8004616:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004618:	4b1a      	ldr	r3, [pc, #104]	; (8004684 <HAL_I2C_MspInit+0x134>)
 800461a:	2200      	movs	r2, #0
 800461c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800461e:	4b19      	ldr	r3, [pc, #100]	; (8004684 <HAL_I2C_MspInit+0x134>)
 8004620:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004624:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004626:	4b17      	ldr	r3, [pc, #92]	; (8004684 <HAL_I2C_MspInit+0x134>)
 8004628:	2200      	movs	r2, #0
 800462a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800462c:	4b15      	ldr	r3, [pc, #84]	; (8004684 <HAL_I2C_MspInit+0x134>)
 800462e:	2200      	movs	r2, #0
 8004630:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004632:	4b14      	ldr	r3, [pc, #80]	; (8004684 <HAL_I2C_MspInit+0x134>)
 8004634:	2200      	movs	r2, #0
 8004636:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004638:	4b12      	ldr	r3, [pc, #72]	; (8004684 <HAL_I2C_MspInit+0x134>)
 800463a:	2200      	movs	r2, #0
 800463c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800463e:	4b11      	ldr	r3, [pc, #68]	; (8004684 <HAL_I2C_MspInit+0x134>)
 8004640:	2200      	movs	r2, #0
 8004642:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004644:	480f      	ldr	r0, [pc, #60]	; (8004684 <HAL_I2C_MspInit+0x134>)
 8004646:	f001 fc99 	bl	8005f7c <HAL_DMA_Init>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 8004650:	f7ff ff5e 	bl	8004510 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a0b      	ldr	r2, [pc, #44]	; (8004684 <HAL_I2C_MspInit+0x134>)
 8004658:	63da      	str	r2, [r3, #60]	; 0x3c
 800465a:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <HAL_I2C_MspInit+0x134>)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004660:	2200      	movs	r2, #0
 8004662:	2100      	movs	r1, #0
 8004664:	201f      	movs	r0, #31
 8004666:	f001 fc54 	bl	8005f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800466a:	201f      	movs	r0, #31
 800466c:	f001 fc6b 	bl	8005f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004670:	bf00      	nop
 8004672:	37e0      	adds	r7, #224	; 0xe0
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40005400 	.word	0x40005400
 800467c:	58024400 	.word	0x58024400
 8004680:	58020400 	.word	0x58020400
 8004684:	24000c6c 	.word	0x24000c6c
 8004688:	40020028 	.word	0x40020028

0800468c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b0b8      	sub	sp, #224	; 0xe0
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004694:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	609a      	str	r2, [r3, #8]
 80046a0:	60da      	str	r2, [r3, #12]
 80046a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046a4:	f107 0310 	add.w	r3, r7, #16
 80046a8:	22bc      	movs	r2, #188	; 0xbc
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f00d fb47 	bl	8011d40 <memset>
  if(hspi->Instance==SPI1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a25      	ldr	r2, [pc, #148]	; (800474c <HAL_SPI_MspInit+0xc0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d142      	bne.n	8004742 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80046bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80046c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046c8:	f107 0310 	add.w	r3, r7, #16
 80046cc:	4618      	mov	r0, r3
 80046ce:	f007 fe9d 	bl	800c40c <HAL_RCCEx_PeriphCLKConfig>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80046d8:	f7ff ff1a 	bl	8004510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046dc:	4b1c      	ldr	r3, [pc, #112]	; (8004750 <HAL_SPI_MspInit+0xc4>)
 80046de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046e2:	4a1b      	ldr	r2, [pc, #108]	; (8004750 <HAL_SPI_MspInit+0xc4>)
 80046e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80046ec:	4b18      	ldr	r3, [pc, #96]	; (8004750 <HAL_SPI_MspInit+0xc4>)
 80046ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046fa:	4b15      	ldr	r3, [pc, #84]	; (8004750 <HAL_SPI_MspInit+0xc4>)
 80046fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004700:	4a13      	ldr	r2, [pc, #76]	; (8004750 <HAL_SPI_MspInit+0xc4>)
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800470a:	4b11      	ldr	r3, [pc, #68]	; (8004750 <HAL_SPI_MspInit+0xc4>)
 800470c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004718:	23e0      	movs	r3, #224	; 0xe0
 800471a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471e:	2302      	movs	r3, #2
 8004720:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800472a:	2300      	movs	r3, #0
 800472c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004730:	2305      	movs	r3, #5
 8004732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004736:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800473a:	4619      	mov	r1, r3
 800473c:	4805      	ldr	r0, [pc, #20]	; (8004754 <HAL_SPI_MspInit+0xc8>)
 800473e:	f004 fa71 	bl	8008c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004742:	bf00      	nop
 8004744:	37e0      	adds	r7, #224	; 0xe0
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40013000 	.word	0x40013000
 8004750:	58024400 	.word	0x58024400
 8004754:	58020000 	.word	0x58020000

08004758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1d      	ldr	r2, [pc, #116]	; (80047dc <HAL_TIM_Base_MspInit+0x84>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d117      	bne.n	800479a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800476a:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <HAL_TIM_Base_MspInit+0x88>)
 800476c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004770:	4a1b      	ldr	r2, [pc, #108]	; (80047e0 <HAL_TIM_Base_MspInit+0x88>)
 8004772:	f043 0302 	orr.w	r3, r3, #2
 8004776:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800477a:	4b19      	ldr	r3, [pc, #100]	; (80047e0 <HAL_TIM_Base_MspInit+0x88>)
 800477c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004788:	2200      	movs	r2, #0
 800478a:	2100      	movs	r1, #0
 800478c:	201d      	movs	r0, #29
 800478e:	f001 fbc0 	bl	8005f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004792:	201d      	movs	r0, #29
 8004794:	f001 fbd7 	bl	8005f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004798:	e01b      	b.n	80047d2 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM7)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a11      	ldr	r2, [pc, #68]	; (80047e4 <HAL_TIM_Base_MspInit+0x8c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d116      	bne.n	80047d2 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80047a4:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <HAL_TIM_Base_MspInit+0x88>)
 80047a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047aa:	4a0d      	ldr	r2, [pc, #52]	; (80047e0 <HAL_TIM_Base_MspInit+0x88>)
 80047ac:	f043 0320 	orr.w	r3, r3, #32
 80047b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047b4:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <HAL_TIM_Base_MspInit+0x88>)
 80047b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80047c2:	2200      	movs	r2, #0
 80047c4:	2100      	movs	r1, #0
 80047c6:	2037      	movs	r0, #55	; 0x37
 80047c8:	f001 fba3 	bl	8005f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80047cc:	2037      	movs	r0, #55	; 0x37
 80047ce:	f001 fbba 	bl	8005f46 <HAL_NVIC_EnableIRQ>
}
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40000400 	.word	0x40000400
 80047e0:	58024400 	.word	0x58024400
 80047e4:	40001400 	.word	0x40001400

080047e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	; 0x28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f0:	f107 0314 	add.w	r3, r7, #20
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	605a      	str	r2, [r3, #4]
 80047fa:	609a      	str	r2, [r3, #8]
 80047fc:	60da      	str	r2, [r3, #12]
 80047fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a22      	ldr	r2, [pc, #136]	; (8004890 <HAL_TIM_MspPostInit+0xa8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d13d      	bne.n	8004886 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800480a:	4b22      	ldr	r3, [pc, #136]	; (8004894 <HAL_TIM_MspPostInit+0xac>)
 800480c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004810:	4a20      	ldr	r2, [pc, #128]	; (8004894 <HAL_TIM_MspPostInit+0xac>)
 8004812:	f043 0302 	orr.w	r3, r3, #2
 8004816:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800481a:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <HAL_TIM_MspPostInit+0xac>)
 800481c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004828:	4b1a      	ldr	r3, [pc, #104]	; (8004894 <HAL_TIM_MspPostInit+0xac>)
 800482a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800482e:	4a19      	ldr	r2, [pc, #100]	; (8004894 <HAL_TIM_MspPostInit+0xac>)
 8004830:	f043 0304 	orr.w	r3, r3, #4
 8004834:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004838:	4b16      	ldr	r3, [pc, #88]	; (8004894 <HAL_TIM_MspPostInit+0xac>)
 800483a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004846:	2303      	movs	r3, #3
 8004848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484a:	2302      	movs	r3, #2
 800484c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004852:	2300      	movs	r3, #0
 8004854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004856:	2302      	movs	r3, #2
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800485a:	f107 0314 	add.w	r3, r7, #20
 800485e:	4619      	mov	r1, r3
 8004860:	480d      	ldr	r0, [pc, #52]	; (8004898 <HAL_TIM_MspPostInit+0xb0>)
 8004862:	f004 f9df 	bl	8008c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004866:	23c0      	movs	r3, #192	; 0xc0
 8004868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486a:	2302      	movs	r3, #2
 800486c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004872:	2300      	movs	r3, #0
 8004874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004876:	2302      	movs	r3, #2
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800487a:	f107 0314 	add.w	r3, r7, #20
 800487e:	4619      	mov	r1, r3
 8004880:	4806      	ldr	r0, [pc, #24]	; (800489c <HAL_TIM_MspPostInit+0xb4>)
 8004882:	f004 f9cf 	bl	8008c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004886:	bf00      	nop
 8004888:	3728      	adds	r7, #40	; 0x28
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40000400 	.word	0x40000400
 8004894:	58024400 	.word	0x58024400
 8004898:	58020400 	.word	0x58020400
 800489c:	58020800 	.word	0x58020800

080048a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b0bc      	sub	sp, #240	; 0xf0
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	605a      	str	r2, [r3, #4]
 80048b2:	609a      	str	r2, [r3, #8]
 80048b4:	60da      	str	r2, [r3, #12]
 80048b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048b8:	f107 0320 	add.w	r3, r7, #32
 80048bc:	22bc      	movs	r2, #188	; 0xbc
 80048be:	2100      	movs	r1, #0
 80048c0:	4618      	mov	r0, r3
 80048c2:	f00d fa3d 	bl	8011d40 <memset>
  if(huart->Instance==USART1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a95      	ldr	r2, [pc, #596]	; (8004b20 <HAL_UART_MspInit+0x280>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	f040 80a7 	bne.w	8004a20 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80048d2:	2301      	movs	r3, #1
 80048d4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048dc:	f107 0320 	add.w	r3, r7, #32
 80048e0:	4618      	mov	r0, r3
 80048e2:	f007 fd93 	bl	800c40c <HAL_RCCEx_PeriphCLKConfig>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80048ec:	f7ff fe10 	bl	8004510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048f0:	4b8c      	ldr	r3, [pc, #560]	; (8004b24 <HAL_UART_MspInit+0x284>)
 80048f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048f6:	4a8b      	ldr	r2, [pc, #556]	; (8004b24 <HAL_UART_MspInit+0x284>)
 80048f8:	f043 0310 	orr.w	r3, r3, #16
 80048fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004900:	4b88      	ldr	r3, [pc, #544]	; (8004b24 <HAL_UART_MspInit+0x284>)
 8004902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	61fb      	str	r3, [r7, #28]
 800490c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800490e:	4b85      	ldr	r3, [pc, #532]	; (8004b24 <HAL_UART_MspInit+0x284>)
 8004910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004914:	4a83      	ldr	r2, [pc, #524]	; (8004b24 <HAL_UART_MspInit+0x284>)
 8004916:	f043 0302 	orr.w	r3, r3, #2
 800491a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800491e:	4b81      	ldr	r3, [pc, #516]	; (8004b24 <HAL_UART_MspInit+0x284>)
 8004920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800492c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004930:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004934:	2302      	movs	r3, #2
 8004936:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493a:	2300      	movs	r3, #0
 800493c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004940:	2300      	movs	r3, #0
 8004942:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004946:	2304      	movs	r3, #4
 8004948:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800494c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004950:	4619      	mov	r1, r3
 8004952:	4875      	ldr	r0, [pc, #468]	; (8004b28 <HAL_UART_MspInit+0x288>)
 8004954:	f004 f966 	bl	8008c24 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004958:	4b74      	ldr	r3, [pc, #464]	; (8004b2c <HAL_UART_MspInit+0x28c>)
 800495a:	4a75      	ldr	r2, [pc, #468]	; (8004b30 <HAL_UART_MspInit+0x290>)
 800495c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800495e:	4b73      	ldr	r3, [pc, #460]	; (8004b2c <HAL_UART_MspInit+0x28c>)
 8004960:	2229      	movs	r2, #41	; 0x29
 8004962:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004964:	4b71      	ldr	r3, [pc, #452]	; (8004b2c <HAL_UART_MspInit+0x28c>)
 8004966:	2200      	movs	r2, #0
 8004968:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800496a:	4b70      	ldr	r3, [pc, #448]	; (8004b2c <HAL_UART_MspInit+0x28c>)
 800496c:	2200      	movs	r2, #0
 800496e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004970:	4b6e      	ldr	r3, [pc, #440]	; (8004b2c <HAL_UART_MspInit+0x28c>)
 8004972:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004976:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004978:	4b6c      	ldr	r3, [pc, #432]	; (8004b2c <HAL_UART_MspInit+0x28c>)
 800497a:	2200      	movs	r2, #0
 800497c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800497e:	4b6b      	ldr	r3, [pc, #428]	; (8004b2c <HAL_UART_MspInit+0x28c>)
 8004980:	2200      	movs	r2, #0
 8004982:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004984:	4b69      	ldr	r3, [pc, #420]	; (8004b2c <HAL_UART_MspInit+0x28c>)
 8004986:	f44f 7280 	mov.w	r2, #256	; 0x100
 800498a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800498c:	4b67      	ldr	r3, [pc, #412]	; (8004b2c <HAL_UART_MspInit+0x28c>)
 800498e:	2200      	movs	r2, #0
 8004990:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004992:	4b66      	ldr	r3, [pc, #408]	; (8004b2c <HAL_UART_MspInit+0x28c>)
 8004994:	2200      	movs	r2, #0
 8004996:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004998:	4864      	ldr	r0, [pc, #400]	; (8004b2c <HAL_UART_MspInit+0x28c>)
 800499a:	f001 faef 	bl	8005f7c <HAL_DMA_Init>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80049a4:	f7ff fdb4 	bl	8004510 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a60      	ldr	r2, [pc, #384]	; (8004b2c <HAL_UART_MspInit+0x28c>)
 80049ac:	67da      	str	r2, [r3, #124]	; 0x7c
 80049ae:	4a5f      	ldr	r2, [pc, #380]	; (8004b2c <HAL_UART_MspInit+0x28c>)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80049b4:	4b5f      	ldr	r3, [pc, #380]	; (8004b34 <HAL_UART_MspInit+0x294>)
 80049b6:	4a60      	ldr	r2, [pc, #384]	; (8004b38 <HAL_UART_MspInit+0x298>)
 80049b8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80049ba:	4b5e      	ldr	r3, [pc, #376]	; (8004b34 <HAL_UART_MspInit+0x294>)
 80049bc:	222a      	movs	r2, #42	; 0x2a
 80049be:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049c0:	4b5c      	ldr	r3, [pc, #368]	; (8004b34 <HAL_UART_MspInit+0x294>)
 80049c2:	2240      	movs	r2, #64	; 0x40
 80049c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049c6:	4b5b      	ldr	r3, [pc, #364]	; (8004b34 <HAL_UART_MspInit+0x294>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049cc:	4b59      	ldr	r3, [pc, #356]	; (8004b34 <HAL_UART_MspInit+0x294>)
 80049ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049d4:	4b57      	ldr	r3, [pc, #348]	; (8004b34 <HAL_UART_MspInit+0x294>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049da:	4b56      	ldr	r3, [pc, #344]	; (8004b34 <HAL_UART_MspInit+0x294>)
 80049dc:	2200      	movs	r2, #0
 80049de:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80049e0:	4b54      	ldr	r3, [pc, #336]	; (8004b34 <HAL_UART_MspInit+0x294>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80049e6:	4b53      	ldr	r3, [pc, #332]	; (8004b34 <HAL_UART_MspInit+0x294>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049ec:	4b51      	ldr	r3, [pc, #324]	; (8004b34 <HAL_UART_MspInit+0x294>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80049f2:	4850      	ldr	r0, [pc, #320]	; (8004b34 <HAL_UART_MspInit+0x294>)
 80049f4:	f001 fac2 	bl	8005f7c <HAL_DMA_Init>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80049fe:	f7ff fd87 	bl	8004510 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a4b      	ldr	r2, [pc, #300]	; (8004b34 <HAL_UART_MspInit+0x294>)
 8004a06:	679a      	str	r2, [r3, #120]	; 0x78
 8004a08:	4a4a      	ldr	r2, [pc, #296]	; (8004b34 <HAL_UART_MspInit+0x294>)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2100      	movs	r1, #0
 8004a12:	2025      	movs	r0, #37	; 0x25
 8004a14:	f001 fa7d 	bl	8005f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a18:	2025      	movs	r0, #37	; 0x25
 8004a1a:	f001 fa94 	bl	8005f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004a1e:	e112      	b.n	8004c46 <HAL_UART_MspInit+0x3a6>
  else if(huart->Instance==USART2)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a45      	ldr	r2, [pc, #276]	; (8004b3c <HAL_UART_MspInit+0x29c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	f040 8090 	bne.w	8004b4c <HAL_UART_MspInit+0x2ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004a30:	2300      	movs	r3, #0
 8004a32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a36:	f107 0320 	add.w	r3, r7, #32
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f007 fce6 	bl	800c40c <HAL_RCCEx_PeriphCLKConfig>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8004a46:	f7ff fd63 	bl	8004510 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a4a:	4b36      	ldr	r3, [pc, #216]	; (8004b24 <HAL_UART_MspInit+0x284>)
 8004a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a50:	4a34      	ldr	r2, [pc, #208]	; (8004b24 <HAL_UART_MspInit+0x284>)
 8004a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a5a:	4b32      	ldr	r3, [pc, #200]	; (8004b24 <HAL_UART_MspInit+0x284>)
 8004a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a68:	4b2e      	ldr	r3, [pc, #184]	; (8004b24 <HAL_UART_MspInit+0x284>)
 8004a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a6e:	4a2d      	ldr	r2, [pc, #180]	; (8004b24 <HAL_UART_MspInit+0x284>)
 8004a70:	f043 0301 	orr.w	r3, r3, #1
 8004a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a78:	4b2a      	ldr	r3, [pc, #168]	; (8004b24 <HAL_UART_MspInit+0x284>)
 8004a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004a86:	230c      	movs	r3, #12
 8004a88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a9e:	2307      	movs	r3, #7
 8004aa0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aa4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4825      	ldr	r0, [pc, #148]	; (8004b40 <HAL_UART_MspInit+0x2a0>)
 8004aac:	f004 f8ba 	bl	8008c24 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream3;
 8004ab0:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <HAL_UART_MspInit+0x2a4>)
 8004ab2:	4a25      	ldr	r2, [pc, #148]	; (8004b48 <HAL_UART_MspInit+0x2a8>)
 8004ab4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004ab6:	4b23      	ldr	r3, [pc, #140]	; (8004b44 <HAL_UART_MspInit+0x2a4>)
 8004ab8:	222b      	movs	r2, #43	; 0x2b
 8004aba:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004abc:	4b21      	ldr	r3, [pc, #132]	; (8004b44 <HAL_UART_MspInit+0x2a4>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ac2:	4b20      	ldr	r3, [pc, #128]	; (8004b44 <HAL_UART_MspInit+0x2a4>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_DISABLE;
 8004ac8:	4b1e      	ldr	r3, [pc, #120]	; (8004b44 <HAL_UART_MspInit+0x2a4>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ace:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <HAL_UART_MspInit+0x2a4>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ad4:	4b1b      	ldr	r3, [pc, #108]	; (8004b44 <HAL_UART_MspInit+0x2a4>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004ada:	4b1a      	ldr	r3, [pc, #104]	; (8004b44 <HAL_UART_MspInit+0x2a4>)
 8004adc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ae0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004ae2:	4b18      	ldr	r3, [pc, #96]	; (8004b44 <HAL_UART_MspInit+0x2a4>)
 8004ae4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004ae8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004aea:	4b16      	ldr	r3, [pc, #88]	; (8004b44 <HAL_UART_MspInit+0x2a4>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004af0:	4814      	ldr	r0, [pc, #80]	; (8004b44 <HAL_UART_MspInit+0x2a4>)
 8004af2:	f001 fa43 	bl	8005f7c <HAL_DMA_Init>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <HAL_UART_MspInit+0x260>
      Error_Handler();
 8004afc:	f7ff fd08 	bl	8004510 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a10      	ldr	r2, [pc, #64]	; (8004b44 <HAL_UART_MspInit+0x2a4>)
 8004b04:	67da      	str	r2, [r3, #124]	; 0x7c
 8004b06:	4a0f      	ldr	r2, [pc, #60]	; (8004b44 <HAL_UART_MspInit+0x2a4>)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2100      	movs	r1, #0
 8004b10:	2026      	movs	r0, #38	; 0x26
 8004b12:	f001 f9fe 	bl	8005f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b16:	2026      	movs	r0, #38	; 0x26
 8004b18:	f001 fa15 	bl	8005f46 <HAL_NVIC_EnableIRQ>
}
 8004b1c:	e093      	b.n	8004c46 <HAL_UART_MspInit+0x3a6>
 8004b1e:	bf00      	nop
 8004b20:	40011000 	.word	0x40011000
 8004b24:	58024400 	.word	0x58024400
 8004b28:	58020400 	.word	0x58020400
 8004b2c:	24000b5c 	.word	0x24000b5c
 8004b30:	40020010 	.word	0x40020010
 8004b34:	24000ae4 	.word	0x24000ae4
 8004b38:	40020040 	.word	0x40020040
 8004b3c:	40004400 	.word	0x40004400
 8004b40:	58020000 	.word	0x58020000
 8004b44:	240008c8 	.word	0x240008c8
 8004b48:	40020058 	.word	0x40020058
  else if(huart->Instance==USART3)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a3f      	ldr	r2, [pc, #252]	; (8004c50 <HAL_UART_MspInit+0x3b0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d177      	bne.n	8004c46 <HAL_UART_MspInit+0x3a6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004b56:	2302      	movs	r3, #2
 8004b58:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b60:	f107 0320 	add.w	r3, r7, #32
 8004b64:	4618      	mov	r0, r3
 8004b66:	f007 fc51 	bl	800c40c <HAL_RCCEx_PeriphCLKConfig>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_UART_MspInit+0x2d4>
      Error_Handler();
 8004b70:	f7ff fcce 	bl	8004510 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b74:	4b37      	ldr	r3, [pc, #220]	; (8004c54 <HAL_UART_MspInit+0x3b4>)
 8004b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b7a:	4a36      	ldr	r2, [pc, #216]	; (8004c54 <HAL_UART_MspInit+0x3b4>)
 8004b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b84:	4b33      	ldr	r3, [pc, #204]	; (8004c54 <HAL_UART_MspInit+0x3b4>)
 8004b86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b92:	4b30      	ldr	r3, [pc, #192]	; (8004c54 <HAL_UART_MspInit+0x3b4>)
 8004b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b98:	4a2e      	ldr	r2, [pc, #184]	; (8004c54 <HAL_UART_MspInit+0x3b4>)
 8004b9a:	f043 0302 	orr.w	r3, r3, #2
 8004b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ba2:	4b2c      	ldr	r3, [pc, #176]	; (8004c54 <HAL_UART_MspInit+0x3b4>)
 8004ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004bb0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004bb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004bca:	2307      	movs	r3, #7
 8004bcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bd0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4820      	ldr	r0, [pc, #128]	; (8004c58 <HAL_UART_MspInit+0x3b8>)
 8004bd8:	f004 f824 	bl	8008c24 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream4;
 8004bdc:	4b1f      	ldr	r3, [pc, #124]	; (8004c5c <HAL_UART_MspInit+0x3bc>)
 8004bde:	4a20      	ldr	r2, [pc, #128]	; (8004c60 <HAL_UART_MspInit+0x3c0>)
 8004be0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004be2:	4b1e      	ldr	r3, [pc, #120]	; (8004c5c <HAL_UART_MspInit+0x3bc>)
 8004be4:	222d      	movs	r2, #45	; 0x2d
 8004be6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004be8:	4b1c      	ldr	r3, [pc, #112]	; (8004c5c <HAL_UART_MspInit+0x3bc>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bee:	4b1b      	ldr	r3, [pc, #108]	; (8004c5c <HAL_UART_MspInit+0x3bc>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bf4:	4b19      	ldr	r3, [pc, #100]	; (8004c5c <HAL_UART_MspInit+0x3bc>)
 8004bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bfa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bfc:	4b17      	ldr	r3, [pc, #92]	; (8004c5c <HAL_UART_MspInit+0x3bc>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c02:	4b16      	ldr	r3, [pc, #88]	; (8004c5c <HAL_UART_MspInit+0x3bc>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004c08:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <HAL_UART_MspInit+0x3bc>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <HAL_UART_MspInit+0x3bc>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c14:	4b11      	ldr	r3, [pc, #68]	; (8004c5c <HAL_UART_MspInit+0x3bc>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004c1a:	4810      	ldr	r0, [pc, #64]	; (8004c5c <HAL_UART_MspInit+0x3bc>)
 8004c1c:	f001 f9ae 	bl	8005f7c <HAL_DMA_Init>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <HAL_UART_MspInit+0x38a>
      Error_Handler();
 8004c26:	f7ff fc73 	bl	8004510 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a0b      	ldr	r2, [pc, #44]	; (8004c5c <HAL_UART_MspInit+0x3bc>)
 8004c2e:	67da      	str	r2, [r3, #124]	; 0x7c
 8004c30:	4a0a      	ldr	r2, [pc, #40]	; (8004c5c <HAL_UART_MspInit+0x3bc>)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004c36:	2200      	movs	r2, #0
 8004c38:	2100      	movs	r1, #0
 8004c3a:	2027      	movs	r0, #39	; 0x27
 8004c3c:	f001 f969 	bl	8005f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004c40:	2027      	movs	r0, #39	; 0x27
 8004c42:	f001 f980 	bl	8005f46 <HAL_NVIC_EnableIRQ>
}
 8004c46:	bf00      	nop
 8004c48:	37f0      	adds	r7, #240	; 0xf0
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40004800 	.word	0x40004800
 8004c54:	58024400 	.word	0x58024400
 8004c58:	58020400 	.word	0x58020400
 8004c5c:	24000944 	.word	0x24000944
 8004c60:	40020070 	.word	0x40020070

08004c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8004c68:	e7fe      	b.n	8004c68 <NMI_Handler+0x4>

08004c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c6e:	e7fe      	b.n	8004c6e <HardFault_Handler+0x4>

08004c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c74:	e7fe      	b.n	8004c74 <MemManage_Handler+0x4>

08004c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c76:	b480      	push	{r7}
 8004c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c7a:	e7fe      	b.n	8004c7a <BusFault_Handler+0x4>

08004c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c80:	e7fe      	b.n	8004c80 <UsageFault_Handler+0x4>

08004c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c82:	b480      	push	{r7}
 8004c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c86:	bf00      	nop
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c94:	bf00      	nop
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ca2:	bf00      	nop
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cb0:	f001 f804 	bl	8005cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cb4:	bf00      	nop
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004cbc:	4802      	ldr	r0, [pc, #8]	; (8004cc8 <DMA1_Stream0_IRQHandler+0x10>)
 8004cbe:	f002 fc85 	bl	80075cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004cc2:	bf00      	nop
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	24000b5c 	.word	0x24000b5c

08004ccc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004cd0:	4802      	ldr	r0, [pc, #8]	; (8004cdc <DMA1_Stream1_IRQHandler+0x10>)
 8004cd2:	f002 fc7b 	bl	80075cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004cd6:	bf00      	nop
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	24000c6c 	.word	0x24000c6c

08004ce0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004ce4:	4802      	ldr	r0, [pc, #8]	; (8004cf0 <DMA1_Stream2_IRQHandler+0x10>)
 8004ce6:	f002 fc71 	bl	80075cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004cea:	bf00      	nop
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	24000ae4 	.word	0x24000ae4

08004cf4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004cf8:	4802      	ldr	r0, [pc, #8]	; (8004d04 <DMA1_Stream3_IRQHandler+0x10>)
 8004cfa:	f002 fc67 	bl	80075cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004cfe:	bf00      	nop
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	240008c8 	.word	0x240008c8

08004d08 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004d0c:	4802      	ldr	r0, [pc, #8]	; (8004d18 <DMA1_Stream4_IRQHandler+0x10>)
 8004d0e:	f002 fc5d 	bl	80075cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004d12:	bf00      	nop
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	24000944 	.word	0x24000944

08004d1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004d20:	4802      	ldr	r0, [pc, #8]	; (8004d2c <TIM3_IRQHandler+0x10>)
 8004d22:	f00a fa07 	bl	800f134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004d26:	bf00      	nop
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	24000a98 	.word	0x24000a98

08004d30 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004d34:	4802      	ldr	r0, [pc, #8]	; (8004d40 <I2C1_EV_IRQHandler+0x10>)
 8004d36:	f004 fcf5 	bl	8009724 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004d3a:	bf00      	nop
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	24000a4c 	.word	0x24000a4c

08004d44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004d48:	4802      	ldr	r0, [pc, #8]	; (8004d54 <USART1_IRQHandler+0x10>)
 8004d4a:	f00b fb27 	bl	801039c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004d4e:	bf00      	nop
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	24000bdc 	.word	0x24000bdc

08004d58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004d5c:	4802      	ldr	r0, [pc, #8]	; (8004d68 <USART2_IRQHandler+0x10>)
 8004d5e:	f00b fb1d 	bl	801039c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004d62:	bf00      	nop
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	24000d70 	.word	0x24000d70

08004d6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004d70:	4802      	ldr	r0, [pc, #8]	; (8004d7c <USART3_IRQHandler+0x10>)
 8004d72:	f00b fb13 	bl	801039c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004d76:	bf00      	nop
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	240009bc 	.word	0x240009bc

08004d80 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
//			tim1_20ms_count = 0;
//			tim1_20ms_flag = 1;
//		}
//	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004d84:	4802      	ldr	r0, [pc, #8]	; (8004d90 <TIM7_IRQHandler+0x10>)
 8004d86:	f00a f9d5 	bl	800f134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004d8a:	bf00      	nop
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	24000e0c 	.word	0x24000e0c

08004d94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
	static unsigned short tim1_2ms_count = 0;
	static unsigned short tim1_10ms_count = 0;
	static unsigned short tim1_20ms_count = 0;
	static unsigned short tim1_500ms_count = 0;

	if(htim->Instance == TIM7)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d13f      	bne.n	8004e26 <HAL_TIM_PeriodElapsedCallback+0x92>
	{
		tim1_2ms_count++;
 8004da6:	4b24      	ldr	r3, [pc, #144]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	3301      	adds	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	4b22      	ldr	r3, [pc, #136]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004db0:	801a      	strh	r2, [r3, #0]
		if(tim1_2ms_count == 2)
 8004db2:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d105      	bne.n	8004dc6 <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			tim1_2ms_count = 0;
 8004dba:	4b1f      	ldr	r3, [pc, #124]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	801a      	strh	r2, [r3, #0]
			tim1_2ms_flag = 1;
 8004dc0:	4b1e      	ldr	r3, [pc, #120]	; (8004e3c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	701a      	strb	r2, [r3, #0]
		}
		tim1_10ms_count++;
 8004dc6:	4b1e      	ldr	r3, [pc, #120]	; (8004e40 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	4b1c      	ldr	r3, [pc, #112]	; (8004e40 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004dd0:	801a      	strh	r2, [r3, #0]
		if(tim1_10ms_count == 10)
 8004dd2:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	2b0a      	cmp	r3, #10
 8004dd8:	d105      	bne.n	8004de6 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			tim1_10ms_count = 0;
 8004dda:	4b19      	ldr	r3, [pc, #100]	; (8004e40 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	801a      	strh	r2, [r3, #0]
			tim1_10ms_flag = 1;
 8004de0:	4b18      	ldr	r3, [pc, #96]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004de2:	2201      	movs	r2, #1
 8004de4:	701a      	strb	r2, [r3, #0]
		}
		tim1_20ms_count++;
 8004de6:	4b18      	ldr	r3, [pc, #96]	; (8004e48 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	3301      	adds	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	4b16      	ldr	r3, [pc, #88]	; (8004e48 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004df0:	801a      	strh	r2, [r3, #0]
		if(tim1_20ms_count == 20)
 8004df2:	4b15      	ldr	r3, [pc, #84]	; (8004e48 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	2b14      	cmp	r3, #20
 8004df8:	d105      	bne.n	8004e06 <HAL_TIM_PeriodElapsedCallback+0x72>
		{
			tim1_20ms_count = 0;
 8004dfa:	4b13      	ldr	r3, [pc, #76]	; (8004e48 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	801a      	strh	r2, [r3, #0]
			tim1_20ms_flag = 1;
 8004e00:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8004e02:	2201      	movs	r2, #1
 8004e04:	701a      	strb	r2, [r3, #0]
		}
		tim1_500ms_count++;
 8004e06:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004e10:	801a      	strh	r2, [r3, #0]
		if(tim1_500ms_count == 20)
 8004e12:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	2b14      	cmp	r3, #20
 8004e18:	d105      	bne.n	8004e26 <HAL_TIM_PeriodElapsedCallback+0x92>
		{
			tim1_500ms_count = 0;
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	; (8004e50 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	801a      	strh	r2, [r3, #0]
			tim1_500ms_flag = 1;
 8004e20:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004e22:	2201      	movs	r2, #1
 8004e24:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40001400 	.word	0x40001400
 8004e38:	24000242 	.word	0x24000242
 8004e3c:	24000238 	.word	0x24000238
 8004e40:	24000244 	.word	0x24000244
 8004e44:	24000239 	.word	0x24000239
 8004e48:	24000246 	.word	0x24000246
 8004e4c:	2400023a 	.word	0x2400023a
 8004e50:	24000248 	.word	0x24000248
 8004e54:	2400023b 	.word	0x2400023b

08004e58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a33      	ldr	r2, [pc, #204]	; (8004f34 <HAL_UART_RxCpltCallback+0xdc>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d103      	bne.n	8004e72 <HAL_UART_RxCpltCallback+0x1a>
	{
		uart1_rx_flag = 1;
 8004e6a:	4b33      	ldr	r3, [pc, #204]	; (8004f38 <HAL_UART_RxCpltCallback+0xe0>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	701a      	strb	r2, [r3, #0]
			ibus_rx_buf[cnt]=uart2_rx_data;
			cnt++;
			break;
		}
	}
}
 8004e70:	e059      	b.n	8004f26 <HAL_UART_RxCpltCallback+0xce>
	else if(huart->Instance == USART2)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a31      	ldr	r2, [pc, #196]	; (8004f3c <HAL_UART_RxCpltCallback+0xe4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d151      	bne.n	8004f20 <HAL_UART_RxCpltCallback+0xc8>
		uart2_rx_flag = 1;
 8004e7c:	4b30      	ldr	r3, [pc, #192]	; (8004f40 <HAL_UART_RxCpltCallback+0xe8>)
 8004e7e:	2201      	movs	r2, #1
 8004e80:	701a      	strb	r2, [r3, #0]
		switch(cnt)
 8004e82:	4b30      	ldr	r3, [pc, #192]	; (8004f44 <HAL_UART_RxCpltCallback+0xec>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b1f      	cmp	r3, #31
 8004e88:	d02e      	beq.n	8004ee8 <HAL_UART_RxCpltCallback+0x90>
 8004e8a:	2b1f      	cmp	r3, #31
 8004e8c:	dc3a      	bgt.n	8004f04 <HAL_UART_RxCpltCallback+0xac>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_UART_RxCpltCallback+0x40>
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d012      	beq.n	8004ebc <HAL_UART_RxCpltCallback+0x64>
 8004e96:	e035      	b.n	8004f04 <HAL_UART_RxCpltCallback+0xac>
			if(uart2_rx_data==0x20)
 8004e98:	4b2b      	ldr	r3, [pc, #172]	; (8004f48 <HAL_UART_RxCpltCallback+0xf0>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d141      	bne.n	8004f24 <HAL_UART_RxCpltCallback+0xcc>
				ibus_rx_buf[cnt]=uart2_rx_data;
 8004ea0:	4b28      	ldr	r3, [pc, #160]	; (8004f44 <HAL_UART_RxCpltCallback+0xec>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4b28      	ldr	r3, [pc, #160]	; (8004f48 <HAL_UART_RxCpltCallback+0xf0>)
 8004ea8:	7819      	ldrb	r1, [r3, #0]
 8004eaa:	4b28      	ldr	r3, [pc, #160]	; (8004f4c <HAL_UART_RxCpltCallback+0xf4>)
 8004eac:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004eae:	4b25      	ldr	r3, [pc, #148]	; (8004f44 <HAL_UART_RxCpltCallback+0xec>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	4b23      	ldr	r3, [pc, #140]	; (8004f44 <HAL_UART_RxCpltCallback+0xec>)
 8004eb8:	701a      	strb	r2, [r3, #0]
			break;
 8004eba:	e033      	b.n	8004f24 <HAL_UART_RxCpltCallback+0xcc>
			if(uart2_rx_data==0x40)
 8004ebc:	4b22      	ldr	r3, [pc, #136]	; (8004f48 <HAL_UART_RxCpltCallback+0xf0>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d10d      	bne.n	8004ee0 <HAL_UART_RxCpltCallback+0x88>
				ibus_rx_buf[cnt]=uart2_rx_data;
 8004ec4:	4b1f      	ldr	r3, [pc, #124]	; (8004f44 <HAL_UART_RxCpltCallback+0xec>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4b1f      	ldr	r3, [pc, #124]	; (8004f48 <HAL_UART_RxCpltCallback+0xf0>)
 8004ecc:	7819      	ldrb	r1, [r3, #0]
 8004ece:	4b1f      	ldr	r3, [pc, #124]	; (8004f4c <HAL_UART_RxCpltCallback+0xf4>)
 8004ed0:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004ed2:	4b1c      	ldr	r3, [pc, #112]	; (8004f44 <HAL_UART_RxCpltCallback+0xec>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	4b1a      	ldr	r3, [pc, #104]	; (8004f44 <HAL_UART_RxCpltCallback+0xec>)
 8004edc:	701a      	strb	r2, [r3, #0]
			break;
 8004ede:	e022      	b.n	8004f26 <HAL_UART_RxCpltCallback+0xce>
				cnt=0;
 8004ee0:	4b18      	ldr	r3, [pc, #96]	; (8004f44 <HAL_UART_RxCpltCallback+0xec>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	701a      	strb	r2, [r3, #0]
			break;
 8004ee6:	e01e      	b.n	8004f26 <HAL_UART_RxCpltCallback+0xce>
			ibus_rx_buf[cnt]=uart2_rx_data;
 8004ee8:	4b16      	ldr	r3, [pc, #88]	; (8004f44 <HAL_UART_RxCpltCallback+0xec>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	4b16      	ldr	r3, [pc, #88]	; (8004f48 <HAL_UART_RxCpltCallback+0xf0>)
 8004ef0:	7819      	ldrb	r1, [r3, #0]
 8004ef2:	4b16      	ldr	r3, [pc, #88]	; (8004f4c <HAL_UART_RxCpltCallback+0xf4>)
 8004ef4:	5499      	strb	r1, [r3, r2]
			cnt=0;
 8004ef6:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <HAL_UART_RxCpltCallback+0xec>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8004efc:	4b14      	ldr	r3, [pc, #80]	; (8004f50 <HAL_UART_RxCpltCallback+0xf8>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	701a      	strb	r2, [r3, #0]
			break;
 8004f02:	e010      	b.n	8004f26 <HAL_UART_RxCpltCallback+0xce>
			ibus_rx_buf[cnt]=uart2_rx_data;
 8004f04:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <HAL_UART_RxCpltCallback+0xec>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <HAL_UART_RxCpltCallback+0xf0>)
 8004f0c:	7819      	ldrb	r1, [r3, #0]
 8004f0e:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <HAL_UART_RxCpltCallback+0xf4>)
 8004f10:	5499      	strb	r1, [r3, r2]
			cnt++;
 8004f12:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <HAL_UART_RxCpltCallback+0xec>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	3301      	adds	r3, #1
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <HAL_UART_RxCpltCallback+0xec>)
 8004f1c:	701a      	strb	r2, [r3, #0]
			break;
 8004f1e:	e002      	b.n	8004f26 <HAL_UART_RxCpltCallback+0xce>
	}
 8004f20:	bf00      	nop
 8004f22:	e000      	b.n	8004f26 <HAL_UART_RxCpltCallback+0xce>
			break;
 8004f24:	bf00      	nop
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40011000 	.word	0x40011000
 8004f38:	2400023c 	.word	0x2400023c
 8004f3c:	40004400 	.word	0x40004400
 8004f40:	2400023e 	.word	0x2400023e
 8004f44:	2400024a 	.word	0x2400024a
 8004f48:	2400023f 	.word	0x2400023f
 8004f4c:	24000e5c 	.word	0x24000e5c
 8004f50:	24000240 	.word	0x24000240

08004f54 <Receive_Command>:

void Receive_Command(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
	if(uart1_rx_flag == 1)
 8004f58:	4b36      	ldr	r3, [pc, #216]	; (8005034 <Receive_Command+0xe0>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d163      	bne.n	8005028 <Receive_Command+0xd4>
	{
		uart1_rx_flag = 0;
 8004f60:	4b34      	ldr	r3, [pc, #208]	; (8005034 <Receive_Command+0xe0>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]

		switch(uart1_rx_data)
 8004f66:	4b34      	ldr	r3, [pc, #208]	; (8005038 <Receive_Command+0xe4>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	2b14      	cmp	r3, #20
 8004f6e:	d854      	bhi.n	800501a <Receive_Command+0xc6>
 8004f70:	a201      	add	r2, pc, #4	; (adr r2, 8004f78 <Receive_Command+0x24>)
 8004f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f76:	bf00      	nop
 8004f78:	08004fcd 	.word	0x08004fcd
 8004f7c:	08004fd5 	.word	0x08004fd5
 8004f80:	08004fdd 	.word	0x08004fdd
 8004f84:	08004fe5 	.word	0x08004fe5
 8004f88:	08004fed 	.word	0x08004fed
 8004f8c:	08004ff5 	.word	0x08004ff5
 8004f90:	0800501b 	.word	0x0800501b
 8004f94:	0800501b 	.word	0x0800501b
 8004f98:	0800501b 	.word	0x0800501b
 8004f9c:	0800501b 	.word	0x0800501b
 8004fa0:	08004ffd 	.word	0x08004ffd
 8004fa4:	08005005 	.word	0x08005005
 8004fa8:	0800501b 	.word	0x0800501b
 8004fac:	0800501b 	.word	0x0800501b
 8004fb0:	0800501b 	.word	0x0800501b
 8004fb4:	0800501b 	.word	0x0800501b
 8004fb8:	0800501b 	.word	0x0800501b
 8004fbc:	0800501b 	.word	0x0800501b
 8004fc0:	0800501b 	.word	0x0800501b
 8004fc4:	0800501b 	.word	0x0800501b
 8004fc8:	0800500d 	.word	0x0800500d
		{
		case 1: print_mode = 1; break; //Roll, Pitch, Yaw
 8004fcc:	4b1b      	ldr	r3, [pc, #108]	; (800503c <Receive_Command+0xe8>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	e02a      	b.n	800502a <Receive_Command+0xd6>
		case 2: print_mode = 2; break; //Alt Raw, Alt Filt
 8004fd4:	4b19      	ldr	r3, [pc, #100]	; (800503c <Receive_Command+0xe8>)
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	e026      	b.n	800502a <Receive_Command+0xd6>
		case 3: print_mode = 3; break; //Gyro
 8004fdc:	4b17      	ldr	r3, [pc, #92]	; (800503c <Receive_Command+0xe8>)
 8004fde:	2203      	movs	r2, #3
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	e022      	b.n	800502a <Receive_Command+0xd6>
		case 4: print_mode = 4; break; //Accel
 8004fe4:	4b15      	ldr	r3, [pc, #84]	; (800503c <Receive_Command+0xe8>)
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	e01e      	b.n	800502a <Receive_Command+0xd6>
		case 5: print_mode = 5; break; //Mag
 8004fec:	4b13      	ldr	r3, [pc, #76]	; (800503c <Receive_Command+0xe8>)
 8004fee:	2205      	movs	r2, #5
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	e01a      	b.n	800502a <Receive_Command+0xd6>
		case 6: print_mode = 6; break; //Mag_Offset
 8004ff4:	4b11      	ldr	r3, [pc, #68]	; (800503c <Receive_Command+0xe8>)
 8004ff6:	2206      	movs	r2, #6
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	e016      	b.n	800502a <Receive_Command+0xd6>
		case 11: print_mode = 11; break; //Controller Channels
 8004ffc:	4b0f      	ldr	r3, [pc, #60]	; (800503c <Receive_Command+0xe8>)
 8004ffe:	220b      	movs	r2, #11
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	e012      	b.n	800502a <Receive_Command+0xd6>
		case 12: print_mode = 12; break; //GPS
 8005004:	4b0d      	ldr	r3, [pc, #52]	; (800503c <Receive_Command+0xe8>)
 8005006:	220c      	movs	r2, #12
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	e00e      	b.n	800502a <Receive_Command+0xd6>
		case 21: mag_calibration_enable = 1; print_mode = 0; break; //Mag Offset
 800500c:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <Receive_Command+0xec>)
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	4b0a      	ldr	r3, [pc, #40]	; (800503c <Receive_Command+0xe8>)
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	e007      	b.n	800502a <Receive_Command+0xd6>
		default: mag_calibration_enable = 0; print_mode = 0; break; // Stop Printing
 800501a:	4b09      	ldr	r3, [pc, #36]	; (8005040 <Receive_Command+0xec>)
 800501c:	2200      	movs	r2, #0
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	4b06      	ldr	r3, [pc, #24]	; (800503c <Receive_Command+0xe8>)
 8005022:	2200      	movs	r2, #0
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	e000      	b.n	800502a <Receive_Command+0xd6>
		}
	}
 8005028:	bf00      	nop
}
 800502a:	bf00      	nop
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	2400023c 	.word	0x2400023c
 8005038:	2400023d 	.word	0x2400023d
 800503c:	24000230 	.word	0x24000230
 8005040:	24000231 	.word	0x24000231

08005044 <Is_iBus_Received>:

int Is_iBus_Received(uint8_t ibus_rx_cplt_flag)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	71fb      	strb	r3, [r7, #7]
	if(ibus_rx_cplt_flag==1)
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d121      	bne.n	8005098 <Is_iBus_Received+0x54>
	{
		ibus_rx_cplt_flag=0;
 8005054:	2300      	movs	r3, #0
 8005056:	71fb      	strb	r3, [r7, #7]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 8005058:	2120      	movs	r1, #32
 800505a:	4812      	ldr	r0, [pc, #72]	; (80050a4 <Is_iBus_Received+0x60>)
 800505c:	f7fb fb14 	bl	8000688 <iBus_Check_CHKSUM>
 8005060:	4603      	mov	r3, r0
 8005062:	2b01      	cmp	r3, #1
 8005064:	d118      	bne.n	8005098 <Is_iBus_Received+0x54>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8005066:	4910      	ldr	r1, [pc, #64]	; (80050a8 <Is_iBus_Received+0x64>)
 8005068:	480e      	ldr	r0, [pc, #56]	; (80050a4 <Is_iBus_Received+0x60>)
 800506a:	f7fb fb44 	bl	80006f6 <iBus_Parsing>
			iBus_rx_cnt++;
 800506e:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <Is_iBus_Received+0x68>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	3301      	adds	r3, #1
 8005074:	b2da      	uxtb	r2, r3
 8005076:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <Is_iBus_Received+0x68>)
 8005078:	701a      	strb	r2, [r3, #0]
			if(iBus_isActiveFailSafe(&iBus) == 1)
 800507a:	480b      	ldr	r0, [pc, #44]	; (80050a8 <Is_iBus_Received+0x64>)
 800507c:	f7fb fbf7 	bl	800086e <iBus_isActiveFailSafe>
 8005080:	4603      	mov	r3, r0
 8005082:	2b01      	cmp	r3, #1
 8005084:	d103      	bne.n	800508e <Is_iBus_Received+0x4a>
			{
				iBus_failsafe = 1;
 8005086:	4b0a      	ldr	r3, [pc, #40]	; (80050b0 <Is_iBus_Received+0x6c>)
 8005088:	2201      	movs	r2, #1
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	e004      	b.n	8005098 <Is_iBus_Received+0x54>
			}
			else
			{
				iBus_failsafe = 0;
 800508e:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <Is_iBus_Received+0x6c>)
 8005090:	2200      	movs	r2, #0
 8005092:	701a      	strb	r2, [r3, #0]
				return 1;
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <Is_iBus_Received+0x56>
			}
		}
	}
	return 0;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	24000e5c 	.word	0x24000e5c
 80050a8:	24000258 	.word	0x24000258
 80050ac:	24000216 	.word	0x24000216
 80050b0:	24000214 	.word	0x24000214

080050b4 <Is_Throttle_Min>:

int Is_Throttle_Min(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag==1)
 80050b8:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <Is_Throttle_Min+0x3c>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d114      	bne.n	80050ea <Is_Throttle_Min+0x36>
	{
		ibus_rx_cplt_flag=0;
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <Is_Throttle_Min+0x3c>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 80050c6:	2120      	movs	r1, #32
 80050c8:	480a      	ldr	r0, [pc, #40]	; (80050f4 <Is_Throttle_Min+0x40>)
 80050ca:	f7fb fadd 	bl	8000688 <iBus_Check_CHKSUM>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d10a      	bne.n	80050ea <Is_Throttle_Min+0x36>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80050d4:	4908      	ldr	r1, [pc, #32]	; (80050f8 <Is_Throttle_Min+0x44>)
 80050d6:	4807      	ldr	r0, [pc, #28]	; (80050f4 <Is_Throttle_Min+0x40>)
 80050d8:	f7fb fb0d 	bl	80006f6 <iBus_Parsing>
			if(iBus.LV < 1025) return 1;
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <Is_Throttle_Min+0x44>)
 80050de:	889b      	ldrh	r3, [r3, #4]
 80050e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e4:	d801      	bhi.n	80050ea <Is_Throttle_Min+0x36>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <Is_Throttle_Min+0x38>
		}
	}
	return 0;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	24000240 	.word	0x24000240
 80050f4:	24000e5c 	.word	0x24000e5c
 80050f8:	24000258 	.word	0x24000258

080050fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
	return 1;
 8005100:	2301      	movs	r3, #1
}
 8005102:	4618      	mov	r0, r3
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <_kill>:

int _kill(int pid, int sig)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005116:	f00c fde9 	bl	8011cec <__errno>
 800511a:	4603      	mov	r3, r0
 800511c:	2216      	movs	r2, #22
 800511e:	601a      	str	r2, [r3, #0]
	return -1;
 8005120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <_exit>:

void _exit (int status)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005134:	f04f 31ff 	mov.w	r1, #4294967295
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff ffe7 	bl	800510c <_kill>
	while (1) {}		/* Make sure we hang here */
 800513e:	e7fe      	b.n	800513e <_exit+0x12>

08005140 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800514c:	2300      	movs	r3, #0
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	e00a      	b.n	8005168 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005152:	f3af 8000 	nop.w
 8005156:	4601      	mov	r1, r0
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	60ba      	str	r2, [r7, #8]
 800515e:	b2ca      	uxtb	r2, r1
 8005160:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	3301      	adds	r3, #1
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	429a      	cmp	r2, r3
 800516e:	dbf0      	blt.n	8005152 <_read+0x12>
	}

return len;
 8005170:	687b      	ldr	r3, [r7, #4]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <_close>:
	}
	return len;
}

int _close(int file)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
	return -1;
 8005182:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005186:	4618      	mov	r0, r3
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051a2:	605a      	str	r2, [r3, #4]
	return 0;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <_isatty>:

int _isatty(int file)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
	return 1;
 80051ba:	2301      	movs	r3, #1
}
 80051bc:	4618      	mov	r0, r3
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
	return 0;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
	...

080051e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051ec:	4a14      	ldr	r2, [pc, #80]	; (8005240 <_sbrk+0x5c>)
 80051ee:	4b15      	ldr	r3, [pc, #84]	; (8005244 <_sbrk+0x60>)
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051f8:	4b13      	ldr	r3, [pc, #76]	; (8005248 <_sbrk+0x64>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005200:	4b11      	ldr	r3, [pc, #68]	; (8005248 <_sbrk+0x64>)
 8005202:	4a12      	ldr	r2, [pc, #72]	; (800524c <_sbrk+0x68>)
 8005204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005206:	4b10      	ldr	r3, [pc, #64]	; (8005248 <_sbrk+0x64>)
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4413      	add	r3, r2
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	429a      	cmp	r2, r3
 8005212:	d207      	bcs.n	8005224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005214:	f00c fd6a 	bl	8011cec <__errno>
 8005218:	4603      	mov	r3, r0
 800521a:	220c      	movs	r2, #12
 800521c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800521e:	f04f 33ff 	mov.w	r3, #4294967295
 8005222:	e009      	b.n	8005238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005224:	4b08      	ldr	r3, [pc, #32]	; (8005248 <_sbrk+0x64>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800522a:	4b07      	ldr	r3, [pc, #28]	; (8005248 <_sbrk+0x64>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4413      	add	r3, r2
 8005232:	4a05      	ldr	r2, [pc, #20]	; (8005248 <_sbrk+0x64>)
 8005234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005236:	68fb      	ldr	r3, [r7, #12]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	24080000 	.word	0x24080000
 8005244:	00000400 	.word	0x00000400
 8005248:	2400024c 	.word	0x2400024c
 800524c:	24000eb8 	.word	0x24000eb8

08005250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005254:	4b39      	ldr	r3, [pc, #228]	; (800533c <SystemInit+0xec>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	4a38      	ldr	r2, [pc, #224]	; (800533c <SystemInit+0xec>)
 800525c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005264:	4b36      	ldr	r3, [pc, #216]	; (8005340 <SystemInit+0xf0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	2b06      	cmp	r3, #6
 800526e:	d807      	bhi.n	8005280 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005270:	4b33      	ldr	r3, [pc, #204]	; (8005340 <SystemInit+0xf0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f023 030f 	bic.w	r3, r3, #15
 8005278:	4a31      	ldr	r2, [pc, #196]	; (8005340 <SystemInit+0xf0>)
 800527a:	f043 0307 	orr.w	r3, r3, #7
 800527e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005280:	4b30      	ldr	r3, [pc, #192]	; (8005344 <SystemInit+0xf4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a2f      	ldr	r2, [pc, #188]	; (8005344 <SystemInit+0xf4>)
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800528c:	4b2d      	ldr	r3, [pc, #180]	; (8005344 <SystemInit+0xf4>)
 800528e:	2200      	movs	r2, #0
 8005290:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005292:	4b2c      	ldr	r3, [pc, #176]	; (8005344 <SystemInit+0xf4>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	492b      	ldr	r1, [pc, #172]	; (8005344 <SystemInit+0xf4>)
 8005298:	4b2b      	ldr	r3, [pc, #172]	; (8005348 <SystemInit+0xf8>)
 800529a:	4013      	ands	r3, r2
 800529c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800529e:	4b28      	ldr	r3, [pc, #160]	; (8005340 <SystemInit+0xf0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d007      	beq.n	80052ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80052aa:	4b25      	ldr	r3, [pc, #148]	; (8005340 <SystemInit+0xf0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f023 030f 	bic.w	r3, r3, #15
 80052b2:	4a23      	ldr	r2, [pc, #140]	; (8005340 <SystemInit+0xf0>)
 80052b4:	f043 0307 	orr.w	r3, r3, #7
 80052b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80052ba:	4b22      	ldr	r3, [pc, #136]	; (8005344 <SystemInit+0xf4>)
 80052bc:	2200      	movs	r2, #0
 80052be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80052c0:	4b20      	ldr	r3, [pc, #128]	; (8005344 <SystemInit+0xf4>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80052c6:	4b1f      	ldr	r3, [pc, #124]	; (8005344 <SystemInit+0xf4>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80052cc:	4b1d      	ldr	r3, [pc, #116]	; (8005344 <SystemInit+0xf4>)
 80052ce:	4a1f      	ldr	r2, [pc, #124]	; (800534c <SystemInit+0xfc>)
 80052d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80052d2:	4b1c      	ldr	r3, [pc, #112]	; (8005344 <SystemInit+0xf4>)
 80052d4:	4a1e      	ldr	r2, [pc, #120]	; (8005350 <SystemInit+0x100>)
 80052d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80052d8:	4b1a      	ldr	r3, [pc, #104]	; (8005344 <SystemInit+0xf4>)
 80052da:	4a1e      	ldr	r2, [pc, #120]	; (8005354 <SystemInit+0x104>)
 80052dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80052de:	4b19      	ldr	r3, [pc, #100]	; (8005344 <SystemInit+0xf4>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80052e4:	4b17      	ldr	r3, [pc, #92]	; (8005344 <SystemInit+0xf4>)
 80052e6:	4a1b      	ldr	r2, [pc, #108]	; (8005354 <SystemInit+0x104>)
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80052ea:	4b16      	ldr	r3, [pc, #88]	; (8005344 <SystemInit+0xf4>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80052f0:	4b14      	ldr	r3, [pc, #80]	; (8005344 <SystemInit+0xf4>)
 80052f2:	4a18      	ldr	r2, [pc, #96]	; (8005354 <SystemInit+0x104>)
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80052f6:	4b13      	ldr	r3, [pc, #76]	; (8005344 <SystemInit+0xf4>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80052fc:	4b11      	ldr	r3, [pc, #68]	; (8005344 <SystemInit+0xf4>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a10      	ldr	r2, [pc, #64]	; (8005344 <SystemInit+0xf4>)
 8005302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005306:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005308:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <SystemInit+0xf4>)
 800530a:	2200      	movs	r2, #0
 800530c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800530e:	4b12      	ldr	r3, [pc, #72]	; (8005358 <SystemInit+0x108>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4b12      	ldr	r3, [pc, #72]	; (800535c <SystemInit+0x10c>)
 8005314:	4013      	ands	r3, r2
 8005316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800531a:	d202      	bcs.n	8005322 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800531c:	4b10      	ldr	r3, [pc, #64]	; (8005360 <SystemInit+0x110>)
 800531e:	2201      	movs	r2, #1
 8005320:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005322:	4b10      	ldr	r3, [pc, #64]	; (8005364 <SystemInit+0x114>)
 8005324:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005328:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800532a:	4b04      	ldr	r3, [pc, #16]	; (800533c <SystemInit+0xec>)
 800532c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005330:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005332:	bf00      	nop
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	e000ed00 	.word	0xe000ed00
 8005340:	52002000 	.word	0x52002000
 8005344:	58024400 	.word	0x58024400
 8005348:	eaf6ed7f 	.word	0xeaf6ed7f
 800534c:	02020200 	.word	0x02020200
 8005350:	01ff0000 	.word	0x01ff0000
 8005354:	01010280 	.word	0x01010280
 8005358:	5c001000 	.word	0x5c001000
 800535c:	ffff0000 	.word	0xffff0000
 8005360:	51008108 	.word	0x51008108
 8005364:	52004000 	.word	0x52004000

08005368 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af02      	add	r7, sp, #8
 800536e:	4603      	mov	r3, r0
 8005370:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8005372:	f107 020f 	add.w	r2, r7, #15
 8005376:	1df9      	adds	r1, r7, #7
 8005378:	2364      	movs	r3, #100	; 0x64
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	2301      	movs	r3, #1
 800537e:	4804      	ldr	r0, [pc, #16]	; (8005390 <W25qxx_Spi+0x28>)
 8005380:	f009 f88c 	bl	800e49c <HAL_SPI_TransmitReceive>
	return ret;
 8005384:	7bfb      	ldrb	r3, [r7, #15]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	24000ce4 	.word	0x24000ce4

08005394 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	2300      	movs	r3, #0
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	2300      	movs	r3, #0
 80053a4:	607b      	str	r3, [r7, #4]
 80053a6:	2300      	movs	r3, #0
 80053a8:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80053aa:	2200      	movs	r2, #0
 80053ac:	2140      	movs	r1, #64	; 0x40
 80053ae:	4813      	ldr	r0, [pc, #76]	; (80053fc <W25qxx_ReadID+0x68>)
 80053b0:	f003 fde8 	bl	8008f84 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80053b4:	209f      	movs	r0, #159	; 0x9f
 80053b6:	f7ff ffd7 	bl	8005368 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80053ba:	20a5      	movs	r0, #165	; 0xa5
 80053bc:	f7ff ffd4 	bl	8005368 <W25qxx_Spi>
 80053c0:	4603      	mov	r3, r0
 80053c2:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80053c4:	20a5      	movs	r0, #165	; 0xa5
 80053c6:	f7ff ffcf 	bl	8005368 <W25qxx_Spi>
 80053ca:	4603      	mov	r3, r0
 80053cc:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80053ce:	20a5      	movs	r0, #165	; 0xa5
 80053d0:	f7ff ffca 	bl	8005368 <W25qxx_Spi>
 80053d4:	4603      	mov	r3, r0
 80053d6:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80053d8:	2201      	movs	r2, #1
 80053da:	2140      	movs	r1, #64	; 0x40
 80053dc:	4807      	ldr	r0, [pc, #28]	; (80053fc <W25qxx_ReadID+0x68>)
 80053de:	f003 fdd1 	bl	8008f84 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	041a      	lsls	r2, r3, #16
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	021b      	lsls	r3, r3, #8
 80053ea:	4313      	orrs	r3, r2
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
	return Temp;
 80053f2:	68fb      	ldr	r3, [r7, #12]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	58020400 	.word	0x58020400

08005400 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8005400:	b590      	push	{r4, r7, lr}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005406:	2200      	movs	r2, #0
 8005408:	2140      	movs	r1, #64	; 0x40
 800540a:	4816      	ldr	r0, [pc, #88]	; (8005464 <W25qxx_ReadUniqID+0x64>)
 800540c:	f003 fdba 	bl	8008f84 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8005410:	204b      	movs	r0, #75	; 0x4b
 8005412:	f7ff ffa9 	bl	8005368 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8005416:	2300      	movs	r3, #0
 8005418:	71fb      	strb	r3, [r7, #7]
 800541a:	e005      	b.n	8005428 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800541c:	20a5      	movs	r0, #165	; 0xa5
 800541e:	f7ff ffa3 	bl	8005368 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	3301      	adds	r3, #1
 8005426:	71fb      	strb	r3, [r7, #7]
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	2b03      	cmp	r3, #3
 800542c:	d9f6      	bls.n	800541c <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 800542e:	2300      	movs	r3, #0
 8005430:	71bb      	strb	r3, [r7, #6]
 8005432:	e00b      	b.n	800544c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005434:	79bc      	ldrb	r4, [r7, #6]
 8005436:	20a5      	movs	r0, #165	; 0xa5
 8005438:	f7ff ff96 	bl	8005368 <W25qxx_Spi>
 800543c:	4603      	mov	r3, r0
 800543e:	461a      	mov	r2, r3
 8005440:	4b09      	ldr	r3, [pc, #36]	; (8005468 <W25qxx_ReadUniqID+0x68>)
 8005442:	4423      	add	r3, r4
 8005444:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8005446:	79bb      	ldrb	r3, [r7, #6]
 8005448:	3301      	adds	r3, #1
 800544a:	71bb      	strb	r3, [r7, #6]
 800544c:	79bb      	ldrb	r3, [r7, #6]
 800544e:	2b07      	cmp	r3, #7
 8005450:	d9f0      	bls.n	8005434 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005452:	2201      	movs	r2, #1
 8005454:	2140      	movs	r1, #64	; 0x40
 8005456:	4803      	ldr	r0, [pc, #12]	; (8005464 <W25qxx_ReadUniqID+0x64>)
 8005458:	f003 fd94 	bl	8008f84 <HAL_GPIO_WritePin>
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	bd90      	pop	{r4, r7, pc}
 8005464:	58020400 	.word	0x58020400
 8005468:	24000e7c 	.word	0x24000e7c

0800546c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005470:	2200      	movs	r2, #0
 8005472:	2140      	movs	r1, #64	; 0x40
 8005474:	4807      	ldr	r0, [pc, #28]	; (8005494 <W25qxx_WriteEnable+0x28>)
 8005476:	f003 fd85 	bl	8008f84 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800547a:	2006      	movs	r0, #6
 800547c:	f7ff ff74 	bl	8005368 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005480:	2201      	movs	r2, #1
 8005482:	2140      	movs	r1, #64	; 0x40
 8005484:	4803      	ldr	r0, [pc, #12]	; (8005494 <W25qxx_WriteEnable+0x28>)
 8005486:	f003 fd7d 	bl	8008f84 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800548a:	2001      	movs	r0, #1
 800548c:	f000 fc36 	bl	8005cfc <HAL_Delay>
}
 8005490:	bf00      	nop
 8005492:	bd80      	pop	{r7, pc}
 8005494:	58020400 	.word	0x58020400

08005498 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80054a6:	2200      	movs	r2, #0
 80054a8:	2140      	movs	r1, #64	; 0x40
 80054aa:	481c      	ldr	r0, [pc, #112]	; (800551c <W25qxx_ReadStatusRegister+0x84>)
 80054ac:	f003 fd6a 	bl	8008f84 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80054b0:	79fb      	ldrb	r3, [r7, #7]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d10c      	bne.n	80054d0 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80054b6:	2005      	movs	r0, #5
 80054b8:	f7ff ff56 	bl	8005368 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80054bc:	20a5      	movs	r0, #165	; 0xa5
 80054be:	f7ff ff53 	bl	8005368 <W25qxx_Spi>
 80054c2:	4603      	mov	r3, r0
 80054c4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80054c6:	4a16      	ldr	r2, [pc, #88]	; (8005520 <W25qxx_ReadStatusRegister+0x88>)
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80054ce:	e01b      	b.n	8005508 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80054d0:	79fb      	ldrb	r3, [r7, #7]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d10c      	bne.n	80054f0 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80054d6:	2035      	movs	r0, #53	; 0x35
 80054d8:	f7ff ff46 	bl	8005368 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80054dc:	20a5      	movs	r0, #165	; 0xa5
 80054de:	f7ff ff43 	bl	8005368 <W25qxx_Spi>
 80054e2:	4603      	mov	r3, r0
 80054e4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80054e6:	4a0e      	ldr	r2, [pc, #56]	; (8005520 <W25qxx_ReadStatusRegister+0x88>)
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80054ee:	e00b      	b.n	8005508 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80054f0:	2015      	movs	r0, #21
 80054f2:	f7ff ff39 	bl	8005368 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80054f6:	20a5      	movs	r0, #165	; 0xa5
 80054f8:	f7ff ff36 	bl	8005368 <W25qxx_Spi>
 80054fc:	4603      	mov	r3, r0
 80054fe:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8005500:	4a07      	ldr	r2, [pc, #28]	; (8005520 <W25qxx_ReadStatusRegister+0x88>)
 8005502:	7bfb      	ldrb	r3, [r7, #15]
 8005504:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005508:	2201      	movs	r2, #1
 800550a:	2140      	movs	r1, #64	; 0x40
 800550c:	4803      	ldr	r0, [pc, #12]	; (800551c <W25qxx_ReadStatusRegister+0x84>)
 800550e:	f003 fd39 	bl	8008f84 <HAL_GPIO_WritePin>
	return status;
 8005512:	7bfb      	ldrb	r3, [r7, #15]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	58020400 	.word	0x58020400
 8005520:	24000e7c 	.word	0x24000e7c

08005524 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8005528:	2001      	movs	r0, #1
 800552a:	f000 fbe7 	bl	8005cfc <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800552e:	2200      	movs	r2, #0
 8005530:	2140      	movs	r1, #64	; 0x40
 8005532:	480f      	ldr	r0, [pc, #60]	; (8005570 <W25qxx_WaitForWriteEnd+0x4c>)
 8005534:	f003 fd26 	bl	8008f84 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8005538:	2005      	movs	r0, #5
 800553a:	f7ff ff15 	bl	8005368 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800553e:	20a5      	movs	r0, #165	; 0xa5
 8005540:	f7ff ff12 	bl	8005368 <W25qxx_Spi>
 8005544:	4603      	mov	r3, r0
 8005546:	461a      	mov	r2, r3
 8005548:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <W25qxx_WaitForWriteEnd+0x50>)
 800554a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 800554e:	2001      	movs	r0, #1
 8005550:	f000 fbd4 	bl	8005cfc <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8005554:	4b07      	ldr	r3, [pc, #28]	; (8005574 <W25qxx_WaitForWriteEnd+0x50>)
 8005556:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1ed      	bne.n	800553e <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005562:	2201      	movs	r2, #1
 8005564:	2140      	movs	r1, #64	; 0x40
 8005566:	4802      	ldr	r0, [pc, #8]	; (8005570 <W25qxx_WaitForWriteEnd+0x4c>)
 8005568:	f003 fd0c 	bl	8008f84 <HAL_GPIO_WritePin>
}
 800556c:	bf00      	nop
 800556e:	bd80      	pop	{r7, pc}
 8005570:	58020400 	.word	0x58020400
 8005574:	24000e7c 	.word	0x24000e7c

08005578 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800557e:	4b65      	ldr	r3, [pc, #404]	; (8005714 <W25qxx_Init+0x19c>)
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8005586:	e002      	b.n	800558e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8005588:	2001      	movs	r0, #1
 800558a:	f000 fbb7 	bl	8005cfc <HAL_Delay>
	while (HAL_GetTick() < 100)
 800558e:	f000 fba9 	bl	8005ce4 <HAL_GetTick>
 8005592:	4603      	mov	r3, r0
 8005594:	2b63      	cmp	r3, #99	; 0x63
 8005596:	d9f7      	bls.n	8005588 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005598:	2201      	movs	r2, #1
 800559a:	2140      	movs	r1, #64	; 0x40
 800559c:	485e      	ldr	r0, [pc, #376]	; (8005718 <W25qxx_Init+0x1a0>)
 800559e:	f003 fcf1 	bl	8008f84 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80055a2:	2064      	movs	r0, #100	; 0x64
 80055a4:	f000 fbaa 	bl	8005cfc <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80055a8:	f7ff fef4 	bl	8005394 <W25qxx_ReadID>
 80055ac:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	3b11      	subs	r3, #17
 80055b4:	2b0f      	cmp	r3, #15
 80055b6:	d86c      	bhi.n	8005692 <W25qxx_Init+0x11a>
 80055b8:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <W25qxx_Init+0x48>)
 80055ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055be:	bf00      	nop
 80055c0:	08005685 	.word	0x08005685
 80055c4:	08005677 	.word	0x08005677
 80055c8:	08005669 	.word	0x08005669
 80055cc:	0800565b 	.word	0x0800565b
 80055d0:	0800564d 	.word	0x0800564d
 80055d4:	0800563f 	.word	0x0800563f
 80055d8:	08005631 	.word	0x08005631
 80055dc:	08005621 	.word	0x08005621
 80055e0:	08005611 	.word	0x08005611
 80055e4:	08005693 	.word	0x08005693
 80055e8:	08005693 	.word	0x08005693
 80055ec:	08005693 	.word	0x08005693
 80055f0:	08005693 	.word	0x08005693
 80055f4:	08005693 	.word	0x08005693
 80055f8:	08005693 	.word	0x08005693
 80055fc:	08005601 	.word	0x08005601
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8005600:	4b44      	ldr	r3, [pc, #272]	; (8005714 <W25qxx_Init+0x19c>)
 8005602:	220a      	movs	r2, #10
 8005604:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8005606:	4b43      	ldr	r3, [pc, #268]	; (8005714 <W25qxx_Init+0x19c>)
 8005608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800560c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800560e:	e046      	b.n	800569e <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8005610:	4b40      	ldr	r3, [pc, #256]	; (8005714 <W25qxx_Init+0x19c>)
 8005612:	2209      	movs	r2, #9
 8005614:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8005616:	4b3f      	ldr	r3, [pc, #252]	; (8005714 <W25qxx_Init+0x19c>)
 8005618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800561c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800561e:	e03e      	b.n	800569e <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8005620:	4b3c      	ldr	r3, [pc, #240]	; (8005714 <W25qxx_Init+0x19c>)
 8005622:	2208      	movs	r2, #8
 8005624:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8005626:	4b3b      	ldr	r3, [pc, #236]	; (8005714 <W25qxx_Init+0x19c>)
 8005628:	f44f 7280 	mov.w	r2, #256	; 0x100
 800562c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800562e:	e036      	b.n	800569e <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8005630:	4b38      	ldr	r3, [pc, #224]	; (8005714 <W25qxx_Init+0x19c>)
 8005632:	2207      	movs	r2, #7
 8005634:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8005636:	4b37      	ldr	r3, [pc, #220]	; (8005714 <W25qxx_Init+0x19c>)
 8005638:	2280      	movs	r2, #128	; 0x80
 800563a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 800563c:	e02f      	b.n	800569e <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800563e:	4b35      	ldr	r3, [pc, #212]	; (8005714 <W25qxx_Init+0x19c>)
 8005640:	2206      	movs	r2, #6
 8005642:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8005644:	4b33      	ldr	r3, [pc, #204]	; (8005714 <W25qxx_Init+0x19c>)
 8005646:	2240      	movs	r2, #64	; 0x40
 8005648:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800564a:	e028      	b.n	800569e <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800564c:	4b31      	ldr	r3, [pc, #196]	; (8005714 <W25qxx_Init+0x19c>)
 800564e:	2205      	movs	r2, #5
 8005650:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8005652:	4b30      	ldr	r3, [pc, #192]	; (8005714 <W25qxx_Init+0x19c>)
 8005654:	2220      	movs	r2, #32
 8005656:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8005658:	e021      	b.n	800569e <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800565a:	4b2e      	ldr	r3, [pc, #184]	; (8005714 <W25qxx_Init+0x19c>)
 800565c:	2204      	movs	r2, #4
 800565e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8005660:	4b2c      	ldr	r3, [pc, #176]	; (8005714 <W25qxx_Init+0x19c>)
 8005662:	2210      	movs	r2, #16
 8005664:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8005666:	e01a      	b.n	800569e <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8005668:	4b2a      	ldr	r3, [pc, #168]	; (8005714 <W25qxx_Init+0x19c>)
 800566a:	2203      	movs	r2, #3
 800566c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800566e:	4b29      	ldr	r3, [pc, #164]	; (8005714 <W25qxx_Init+0x19c>)
 8005670:	2208      	movs	r2, #8
 8005672:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8005674:	e013      	b.n	800569e <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8005676:	4b27      	ldr	r3, [pc, #156]	; (8005714 <W25qxx_Init+0x19c>)
 8005678:	2202      	movs	r2, #2
 800567a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800567c:	4b25      	ldr	r3, [pc, #148]	; (8005714 <W25qxx_Init+0x19c>)
 800567e:	2204      	movs	r2, #4
 8005680:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8005682:	e00c      	b.n	800569e <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8005684:	4b23      	ldr	r3, [pc, #140]	; (8005714 <W25qxx_Init+0x19c>)
 8005686:	2201      	movs	r2, #1
 8005688:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800568a:	4b22      	ldr	r3, [pc, #136]	; (8005714 <W25qxx_Init+0x19c>)
 800568c:	2202      	movs	r2, #2
 800568e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8005690:	e005      	b.n	800569e <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8005692:	4b20      	ldr	r3, [pc, #128]	; (8005714 <W25qxx_Init+0x19c>)
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800569a:	2300      	movs	r3, #0
 800569c:	e036      	b.n	800570c <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 800569e:	4b1d      	ldr	r3, [pc, #116]	; (8005714 <W25qxx_Init+0x19c>)
 80056a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056a4:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80056a6:	4b1b      	ldr	r3, [pc, #108]	; (8005714 <W25qxx_Init+0x19c>)
 80056a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056ac:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80056ae:	4b19      	ldr	r3, [pc, #100]	; (8005714 <W25qxx_Init+0x19c>)
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	4a17      	ldr	r2, [pc, #92]	; (8005714 <W25qxx_Init+0x19c>)
 80056b6:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80056b8:	4b16      	ldr	r3, [pc, #88]	; (8005714 <W25qxx_Init+0x19c>)
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	4a15      	ldr	r2, [pc, #84]	; (8005714 <W25qxx_Init+0x19c>)
 80056be:	6912      	ldr	r2, [r2, #16]
 80056c0:	fb02 f303 	mul.w	r3, r2, r3
 80056c4:	4a13      	ldr	r2, [pc, #76]	; (8005714 <W25qxx_Init+0x19c>)
 80056c6:	8952      	ldrh	r2, [r2, #10]
 80056c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80056cc:	4a11      	ldr	r2, [pc, #68]	; (8005714 <W25qxx_Init+0x19c>)
 80056ce:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80056d0:	4b10      	ldr	r3, [pc, #64]	; (8005714 <W25qxx_Init+0x19c>)
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	4a0f      	ldr	r2, [pc, #60]	; (8005714 <W25qxx_Init+0x19c>)
 80056d8:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80056da:	4b0e      	ldr	r3, [pc, #56]	; (8005714 <W25qxx_Init+0x19c>)
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	4a0d      	ldr	r2, [pc, #52]	; (8005714 <W25qxx_Init+0x19c>)
 80056e0:	6912      	ldr	r2, [r2, #16]
 80056e2:	fb02 f303 	mul.w	r3, r2, r3
 80056e6:	0a9b      	lsrs	r3, r3, #10
 80056e8:	4a0a      	ldr	r2, [pc, #40]	; (8005714 <W25qxx_Init+0x19c>)
 80056ea:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80056ec:	f7ff fe88 	bl	8005400 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80056f0:	2001      	movs	r0, #1
 80056f2:	f7ff fed1 	bl	8005498 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80056f6:	2002      	movs	r0, #2
 80056f8:	f7ff fece 	bl	8005498 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80056fc:	2003      	movs	r0, #3
 80056fe:	f7ff fecb 	bl	8005498 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8005702:	4b04      	ldr	r3, [pc, #16]	; (8005714 <W25qxx_Init+0x19c>)
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800570a:	2301      	movs	r3, #1
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	24000e7c 	.word	0x24000e7c
 8005718:	58020400 	.word	0x58020400

0800571c <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8005724:	e002      	b.n	800572c <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8005726:	2001      	movs	r0, #1
 8005728:	f000 fae8 	bl	8005cfc <HAL_Delay>
	while (w25qxx.Lock == 1)
 800572c:	4b25      	ldr	r3, [pc, #148]	; (80057c4 <W25qxx_EraseSector+0xa8>)
 800572e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005732:	2b01      	cmp	r3, #1
 8005734:	d0f7      	beq.n	8005726 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8005736:	4b23      	ldr	r3, [pc, #140]	; (80057c4 <W25qxx_EraseSector+0xa8>)
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 800573e:	f7ff fef1 	bl	8005524 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8005742:	4b20      	ldr	r3, [pc, #128]	; (80057c4 <W25qxx_EraseSector+0xa8>)
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	fb02 f303 	mul.w	r3, r2, r3
 800574c:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 800574e:	f7ff fe8d 	bl	800546c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005752:	2200      	movs	r2, #0
 8005754:	2140      	movs	r1, #64	; 0x40
 8005756:	481c      	ldr	r0, [pc, #112]	; (80057c8 <W25qxx_EraseSector+0xac>)
 8005758:	f003 fc14 	bl	8008f84 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800575c:	4b19      	ldr	r3, [pc, #100]	; (80057c4 <W25qxx_EraseSector+0xa8>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b08      	cmp	r3, #8
 8005762:	d909      	bls.n	8005778 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8005764:	2021      	movs	r0, #33	; 0x21
 8005766:	f7ff fdff 	bl	8005368 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	0e1b      	lsrs	r3, r3, #24
 800576e:	b2db      	uxtb	r3, r3
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff fdf9 	bl	8005368 <W25qxx_Spi>
 8005776:	e002      	b.n	800577e <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8005778:	2020      	movs	r0, #32
 800577a:	f7ff fdf5 	bl	8005368 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	0c1b      	lsrs	r3, r3, #16
 8005782:	b2db      	uxtb	r3, r3
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff fdef 	bl	8005368 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	0a1b      	lsrs	r3, r3, #8
 800578e:	b2db      	uxtb	r3, r3
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fde9 	bl	8005368 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff fde4 	bl	8005368 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80057a0:	2201      	movs	r2, #1
 80057a2:	2140      	movs	r1, #64	; 0x40
 80057a4:	4808      	ldr	r0, [pc, #32]	; (80057c8 <W25qxx_EraseSector+0xac>)
 80057a6:	f003 fbed 	bl	8008f84 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80057aa:	f7ff febb 	bl	8005524 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 80057ae:	2001      	movs	r0, #1
 80057b0:	f000 faa4 	bl	8005cfc <HAL_Delay>
	w25qxx.Lock = 0;
 80057b4:	4b03      	ldr	r3, [pc, #12]	; (80057c4 <W25qxx_EraseSector+0xa8>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	24000e7c 	.word	0x24000e7c
 80057c8:	58020400 	.word	0x58020400

080057cc <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80057d4:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <W25qxx_SectorToPage+0x28>)
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	4a05      	ldr	r2, [pc, #20]	; (80057f4 <W25qxx_SectorToPage+0x28>)
 80057e0:	8952      	ldrh	r2, [r2, #10]
 80057e2:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	24000e7c 	.word	0x24000e7c

080057f8 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8005806:	e002      	b.n	800580e <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8005808:	2001      	movs	r0, #1
 800580a:	f000 fa77 	bl	8005cfc <HAL_Delay>
	while (w25qxx.Lock == 1)
 800580e:	4b39      	ldr	r3, [pc, #228]	; (80058f4 <W25qxx_WritePage+0xfc>)
 8005810:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005814:	2b01      	cmp	r3, #1
 8005816:	d0f7      	beq.n	8005808 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8005818:	4b36      	ldr	r3, [pc, #216]	; (80058f4 <W25qxx_WritePage+0xfc>)
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4413      	add	r3, r2
 8005826:	4a33      	ldr	r2, [pc, #204]	; (80058f4 <W25qxx_WritePage+0xfc>)
 8005828:	8952      	ldrh	r2, [r2, #10]
 800582a:	4293      	cmp	r3, r2
 800582c:	d802      	bhi.n	8005834 <W25qxx_WritePage+0x3c>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d105      	bne.n	8005840 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8005834:	4b2f      	ldr	r3, [pc, #188]	; (80058f4 <W25qxx_WritePage+0xfc>)
 8005836:	895b      	ldrh	r3, [r3, #10]
 8005838:	461a      	mov	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	4413      	add	r3, r2
 8005846:	4a2b      	ldr	r2, [pc, #172]	; (80058f4 <W25qxx_WritePage+0xfc>)
 8005848:	8952      	ldrh	r2, [r2, #10]
 800584a:	4293      	cmp	r3, r2
 800584c:	d905      	bls.n	800585a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800584e:	4b29      	ldr	r3, [pc, #164]	; (80058f4 <W25qxx_WritePage+0xfc>)
 8005850:	895b      	ldrh	r3, [r3, #10]
 8005852:	461a      	mov	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 800585a:	f7ff fe63 	bl	8005524 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800585e:	f7ff fe05 	bl	800546c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005862:	2200      	movs	r2, #0
 8005864:	2140      	movs	r1, #64	; 0x40
 8005866:	4824      	ldr	r0, [pc, #144]	; (80058f8 <W25qxx_WritePage+0x100>)
 8005868:	f003 fb8c 	bl	8008f84 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800586c:	4b21      	ldr	r3, [pc, #132]	; (80058f4 <W25qxx_WritePage+0xfc>)
 800586e:	895b      	ldrh	r3, [r3, #10]
 8005870:	461a      	mov	r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	fb03 f302 	mul.w	r3, r3, r2
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	4413      	add	r3, r2
 800587c:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800587e:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <W25qxx_WritePage+0xfc>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b08      	cmp	r3, #8
 8005884:	d909      	bls.n	800589a <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8005886:	2012      	movs	r0, #18
 8005888:	f7ff fd6e 	bl	8005368 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	0e1b      	lsrs	r3, r3, #24
 8005890:	b2db      	uxtb	r3, r3
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff fd68 	bl	8005368 <W25qxx_Spi>
 8005898:	e002      	b.n	80058a0 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 800589a:	2002      	movs	r0, #2
 800589c:	f7ff fd64 	bl	8005368 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	0c1b      	lsrs	r3, r3, #16
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff fd5e 	bl	8005368 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	0a1b      	lsrs	r3, r3, #8
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff fd58 	bl	8005368 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff fd53 	bl	8005368 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	2364      	movs	r3, #100	; 0x64
 80058c8:	68f9      	ldr	r1, [r7, #12]
 80058ca:	480c      	ldr	r0, [pc, #48]	; (80058fc <W25qxx_WritePage+0x104>)
 80058cc:	f008 fa02 	bl	800dcd4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80058d0:	2201      	movs	r2, #1
 80058d2:	2140      	movs	r1, #64	; 0x40
 80058d4:	4808      	ldr	r0, [pc, #32]	; (80058f8 <W25qxx_WritePage+0x100>)
 80058d6:	f003 fb55 	bl	8008f84 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80058da:	f7ff fe23 	bl	8005524 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80058de:	2001      	movs	r0, #1
 80058e0:	f000 fa0c 	bl	8005cfc <HAL_Delay>
	w25qxx.Lock = 0;
 80058e4:	4b03      	ldr	r3, [pc, #12]	; (80058f4 <W25qxx_WritePage+0xfc>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80058ec:	bf00      	nop
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	24000e7c 	.word	0x24000e7c
 80058f8:	58020400 	.word	0x58020400
 80058fc:	24000ce4 	.word	0x24000ce4

08005900 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800590e:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <W25qxx_WriteSector+0xc0>)
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d802      	bhi.n	800591e <W25qxx_WriteSector+0x1e>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d102      	bne.n	8005924 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800591e:	4b28      	ldr	r3, [pc, #160]	; (80059c0 <W25qxx_WriteSector+0xc0>)
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8005924:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <W25qxx_WriteSector+0xc0>)
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	429a      	cmp	r2, r3
 800592c:	d243      	bcs.n	80059b6 <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	441a      	add	r2, r3
 8005934:	4b22      	ldr	r3, [pc, #136]	; (80059c0 <W25qxx_WriteSector+0xc0>)
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	429a      	cmp	r2, r3
 800593a:	d905      	bls.n	8005948 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 800593c:	4b20      	ldr	r3, [pc, #128]	; (80059c0 <W25qxx_WriteSector+0xc0>)
 800593e:	691a      	ldr	r2, [r3, #16]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	e001      	b.n	800594c <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800594c:	68b8      	ldr	r0, [r7, #8]
 800594e:	f7ff ff3d 	bl	80057cc <W25qxx_SectorToPage>
 8005952:	4602      	mov	r2, r0
 8005954:	4b1a      	ldr	r3, [pc, #104]	; (80059c0 <W25qxx_WriteSector+0xc0>)
 8005956:	895b      	ldrh	r3, [r3, #10]
 8005958:	4619      	mov	r1, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005960:	4413      	add	r3, r2
 8005962:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8005964:	4b16      	ldr	r3, [pc, #88]	; (80059c0 <W25qxx_WriteSector+0xc0>)
 8005966:	895b      	ldrh	r3, [r3, #10]
 8005968:	461a      	mov	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005970:	fb02 f201 	mul.w	r2, r2, r1
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	69f9      	ldr	r1, [r7, #28]
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f7ff ff3a 	bl	80057f8 <W25qxx_WritePage>
		StartPage++;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	3301      	adds	r3, #1
 8005988:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800598a:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <W25qxx_WriteSector+0xc0>)
 800598c:	895b      	ldrh	r3, [r3, #10]
 800598e:	461a      	mov	r2, r3
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	1a9a      	subs	r2, r3, r2
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	4413      	add	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <W25qxx_WriteSector+0xc0>)
 800599c:	895b      	ldrh	r3, [r3, #10]
 800599e:	461a      	mov	r2, r3
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	dce1      	bgt.n	8005978 <W25qxx_WriteSector+0x78>
 80059b4:	e000      	b.n	80059b8 <W25qxx_WriteSector+0xb8>
		return;
 80059b6:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80059b8:	3720      	adds	r7, #32
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	24000e7c 	.word	0x24000e7c

080059c4 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80059d2:	e002      	b.n	80059da <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80059d4:	2001      	movs	r0, #1
 80059d6:	f000 f991 	bl	8005cfc <HAL_Delay>
	while (w25qxx.Lock == 1)
 80059da:	4b36      	ldr	r3, [pc, #216]	; (8005ab4 <W25qxx_ReadPage+0xf0>)
 80059dc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d0f7      	beq.n	80059d4 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80059e4:	4b33      	ldr	r3, [pc, #204]	; (8005ab4 <W25qxx_ReadPage+0xf0>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80059ec:	4b31      	ldr	r3, [pc, #196]	; (8005ab4 <W25qxx_ReadPage+0xf0>)
 80059ee:	895b      	ldrh	r3, [r3, #10]
 80059f0:	461a      	mov	r2, r3
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d802      	bhi.n	80059fe <W25qxx_ReadPage+0x3a>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d102      	bne.n	8005a04 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80059fe:	4b2d      	ldr	r3, [pc, #180]	; (8005ab4 <W25qxx_ReadPage+0xf0>)
 8005a00:	895b      	ldrh	r3, [r3, #10]
 8005a02:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	4413      	add	r3, r2
 8005a0a:	4a2a      	ldr	r2, [pc, #168]	; (8005ab4 <W25qxx_ReadPage+0xf0>)
 8005a0c:	8952      	ldrh	r2, [r2, #10]
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d905      	bls.n	8005a1e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8005a12:	4b28      	ldr	r3, [pc, #160]	; (8005ab4 <W25qxx_ReadPage+0xf0>)
 8005a14:	895b      	ldrh	r3, [r3, #10]
 8005a16:	461a      	mov	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8005a1e:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <W25qxx_ReadPage+0xf0>)
 8005a20:	895b      	ldrh	r3, [r3, #10]
 8005a22:	461a      	mov	r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	fb03 f302 	mul.w	r3, r3, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005a30:	2200      	movs	r2, #0
 8005a32:	2140      	movs	r1, #64	; 0x40
 8005a34:	4820      	ldr	r0, [pc, #128]	; (8005ab8 <W25qxx_ReadPage+0xf4>)
 8005a36:	f003 faa5 	bl	8008f84 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8005a3a:	4b1e      	ldr	r3, [pc, #120]	; (8005ab4 <W25qxx_ReadPage+0xf0>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d909      	bls.n	8005a56 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8005a42:	200c      	movs	r0, #12
 8005a44:	f7ff fc90 	bl	8005368 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	0e1b      	lsrs	r3, r3, #24
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff fc8a 	bl	8005368 <W25qxx_Spi>
 8005a54:	e002      	b.n	8005a5c <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8005a56:	200b      	movs	r0, #11
 8005a58:	f7ff fc86 	bl	8005368 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	0c1b      	lsrs	r3, r3, #16
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7ff fc80 	bl	8005368 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	0a1b      	lsrs	r3, r3, #8
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fc7a 	bl	8005368 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff fc75 	bl	8005368 <W25qxx_Spi>
	W25qxx_Spi(0);
 8005a7e:	2000      	movs	r0, #0
 8005a80:	f7ff fc72 	bl	8005368 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	2364      	movs	r3, #100	; 0x64
 8005a8a:	68f9      	ldr	r1, [r7, #12]
 8005a8c:	480b      	ldr	r0, [pc, #44]	; (8005abc <W25qxx_ReadPage+0xf8>)
 8005a8e:	f008 fb13 	bl	800e0b8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005a92:	2201      	movs	r2, #1
 8005a94:	2140      	movs	r1, #64	; 0x40
 8005a96:	4808      	ldr	r0, [pc, #32]	; (8005ab8 <W25qxx_ReadPage+0xf4>)
 8005a98:	f003 fa74 	bl	8008f84 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	f000 f92d 	bl	8005cfc <HAL_Delay>
	w25qxx.Lock = 0;
 8005aa2:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <W25qxx_ReadPage+0xf0>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	24000e7c 	.word	0x24000e7c
 8005ab8:	58020400 	.word	0x58020400
 8005abc:	24000ce4 	.word	0x24000ce4

08005ac0 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8005ace:	4b2c      	ldr	r3, [pc, #176]	; (8005b80 <W25qxx_ReadSector+0xc0>)
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d802      	bhi.n	8005ade <W25qxx_ReadSector+0x1e>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8005ade:	4b28      	ldr	r3, [pc, #160]	; (8005b80 <W25qxx_ReadSector+0xc0>)
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8005ae4:	4b26      	ldr	r3, [pc, #152]	; (8005b80 <W25qxx_ReadSector+0xc0>)
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d243      	bcs.n	8005b76 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	441a      	add	r2, r3
 8005af4:	4b22      	ldr	r3, [pc, #136]	; (8005b80 <W25qxx_ReadSector+0xc0>)
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d905      	bls.n	8005b08 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8005afc:	4b20      	ldr	r3, [pc, #128]	; (8005b80 <W25qxx_ReadSector+0xc0>)
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	e001      	b.n	8005b0c <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8005b0c:	68b8      	ldr	r0, [r7, #8]
 8005b0e:	f7ff fe5d 	bl	80057cc <W25qxx_SectorToPage>
 8005b12:	4602      	mov	r2, r0
 8005b14:	4b1a      	ldr	r3, [pc, #104]	; (8005b80 <W25qxx_ReadSector+0xc0>)
 8005b16:	895b      	ldrh	r3, [r3, #10]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b20:	4413      	add	r3, r2
 8005b22:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8005b24:	4b16      	ldr	r3, [pc, #88]	; (8005b80 <W25qxx_ReadSector+0xc0>)
 8005b26:	895b      	ldrh	r3, [r3, #10]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b30:	fb02 f201 	mul.w	r2, r2, r1
 8005b34:	1a9b      	subs	r3, r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	69f9      	ldr	r1, [r7, #28]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7ff ff40 	bl	80059c4 <W25qxx_ReadPage>
		StartPage++;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	3301      	adds	r3, #1
 8005b48:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	; (8005b80 <W25qxx_ReadSector+0xc0>)
 8005b4c:	895b      	ldrh	r3, [r3, #10]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	1a9a      	subs	r2, r3, r2
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	4413      	add	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8005b5a:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <W25qxx_ReadSector+0xc0>)
 8005b5c:	895b      	ldrh	r3, [r3, #10]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	dce1      	bgt.n	8005b38 <W25qxx_ReadSector+0x78>
 8005b74:	e000      	b.n	8005b78 <W25qxx_ReadSector+0xb8>
		return;
 8005b76:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8005b78:	3720      	adds	r7, #32
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	24000e7c 	.word	0x24000e7c

08005b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005bbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005b88:	f7ff fb62 	bl	8005250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005b8c:	480c      	ldr	r0, [pc, #48]	; (8005bc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005b8e:	490d      	ldr	r1, [pc, #52]	; (8005bc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005b90:	4a0d      	ldr	r2, [pc, #52]	; (8005bc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b94:	e002      	b.n	8005b9c <LoopCopyDataInit>

08005b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b9a:	3304      	adds	r3, #4

08005b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ba0:	d3f9      	bcc.n	8005b96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ba2:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005ba4:	4c0a      	ldr	r4, [pc, #40]	; (8005bd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ba8:	e001      	b.n	8005bae <LoopFillZerobss>

08005baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005bac:	3204      	adds	r2, #4

08005bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005bb0:	d3fb      	bcc.n	8005baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005bb2:	f00c f8a1 	bl	8011cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005bb6:	f7fd fa77 	bl	80030a8 <main>
  bx  lr
 8005bba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005bbc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005bc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005bc4:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8005bc8:	080155c8 	.word	0x080155c8
  ldr r2, =_sbss
 8005bcc:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8005bd0:	24000eb8 	.word	0x24000eb8

08005bd4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005bd4:	e7fe      	b.n	8005bd4 <ADC3_IRQHandler>
	...

08005bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bde:	2003      	movs	r0, #3
 8005be0:	f000 f98c 	bl	8005efc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005be4:	f006 fa3c 	bl	800c060 <HAL_RCC_GetSysClockFreq>
 8005be8:	4602      	mov	r2, r0
 8005bea:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <HAL_Init+0x68>)
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	0a1b      	lsrs	r3, r3, #8
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	4913      	ldr	r1, [pc, #76]	; (8005c44 <HAL_Init+0x6c>)
 8005bf6:	5ccb      	ldrb	r3, [r1, r3]
 8005bf8:	f003 031f 	and.w	r3, r3, #31
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005c00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c02:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <HAL_Init+0x68>)
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	4a0e      	ldr	r2, [pc, #56]	; (8005c44 <HAL_Init+0x6c>)
 8005c0c:	5cd3      	ldrb	r3, [r2, r3]
 8005c0e:	f003 031f 	and.w	r3, r3, #31
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
 8005c18:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <HAL_Init+0x70>)
 8005c1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c1c:	4a0b      	ldr	r2, [pc, #44]	; (8005c4c <HAL_Init+0x74>)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c22:	200f      	movs	r0, #15
 8005c24:	f000 f814 	bl	8005c50 <HAL_InitTick>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e002      	b.n	8005c38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005c32:	f7fe fc73 	bl	800451c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	58024400 	.word	0x58024400
 8005c44:	080150ec 	.word	0x080150ec
 8005c48:	24000018 	.word	0x24000018
 8005c4c:	24000014 	.word	0x24000014

08005c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005c58:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <HAL_InitTick+0x60>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e021      	b.n	8005ca8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005c64:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <HAL_InitTick+0x64>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	4b11      	ldr	r3, [pc, #68]	; (8005cb0 <HAL_InitTick+0x60>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 f971 	bl	8005f62 <HAL_SYSTICK_Config>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e00e      	b.n	8005ca8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b0f      	cmp	r3, #15
 8005c8e:	d80a      	bhi.n	8005ca6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c90:	2200      	movs	r2, #0
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	f04f 30ff 	mov.w	r0, #4294967295
 8005c98:	f000 f93b 	bl	8005f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c9c:	4a06      	ldr	r2, [pc, #24]	; (8005cb8 <HAL_InitTick+0x68>)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e000      	b.n	8005ca8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	24000020 	.word	0x24000020
 8005cb4:	24000014 	.word	0x24000014
 8005cb8:	2400001c 	.word	0x2400001c

08005cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005cc0:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <HAL_IncTick+0x20>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <HAL_IncTick+0x24>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4413      	add	r3, r2
 8005ccc:	4a04      	ldr	r2, [pc, #16]	; (8005ce0 <HAL_IncTick+0x24>)
 8005cce:	6013      	str	r3, [r2, #0]
}
 8005cd0:	bf00      	nop
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	24000020 	.word	0x24000020
 8005ce0:	24000ea4 	.word	0x24000ea4

08005ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8005ce8:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <HAL_GetTick+0x14>)
 8005cea:	681b      	ldr	r3, [r3, #0]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	24000ea4 	.word	0x24000ea4

08005cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d04:	f7ff ffee 	bl	8005ce4 <HAL_GetTick>
 8005d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d14:	d005      	beq.n	8005d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d16:	4b0a      	ldr	r3, [pc, #40]	; (8005d40 <HAL_Delay+0x44>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d22:	bf00      	nop
 8005d24:	f7ff ffde 	bl	8005ce4 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d8f7      	bhi.n	8005d24 <HAL_Delay+0x28>
  {
  }
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	24000020 	.word	0x24000020

08005d44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005d48:	4b03      	ldr	r3, [pc, #12]	; (8005d58 <HAL_GetREVID+0x14>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	0c1b      	lsrs	r3, r3, #16
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	5c001000 	.word	0x5c001000

08005d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d6c:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <__NVIC_SetPriorityGrouping+0x40>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d78:	4013      	ands	r3, r2
 8005d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005d84:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <__NVIC_SetPriorityGrouping+0x44>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d8a:	4a04      	ldr	r2, [pc, #16]	; (8005d9c <__NVIC_SetPriorityGrouping+0x40>)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	60d3      	str	r3, [r2, #12]
}
 8005d90:	bf00      	nop
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	e000ed00 	.word	0xe000ed00
 8005da0:	05fa0000 	.word	0x05fa0000

08005da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005da8:	4b04      	ldr	r3, [pc, #16]	; (8005dbc <__NVIC_GetPriorityGrouping+0x18>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	0a1b      	lsrs	r3, r3, #8
 8005dae:	f003 0307 	and.w	r3, r3, #7
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	e000ed00 	.word	0xe000ed00

08005dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	db0b      	blt.n	8005dea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dd2:	88fb      	ldrh	r3, [r7, #6]
 8005dd4:	f003 021f 	and.w	r2, r3, #31
 8005dd8:	4907      	ldr	r1, [pc, #28]	; (8005df8 <__NVIC_EnableIRQ+0x38>)
 8005dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	2001      	movs	r0, #1
 8005de2:	fa00 f202 	lsl.w	r2, r0, r2
 8005de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	e000e100 	.word	0xe000e100

08005dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	6039      	str	r1, [r7, #0]
 8005e06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	db0a      	blt.n	8005e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	490c      	ldr	r1, [pc, #48]	; (8005e48 <__NVIC_SetPriority+0x4c>)
 8005e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e1a:	0112      	lsls	r2, r2, #4
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	440b      	add	r3, r1
 8005e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e24:	e00a      	b.n	8005e3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	4908      	ldr	r1, [pc, #32]	; (8005e4c <__NVIC_SetPriority+0x50>)
 8005e2c:	88fb      	ldrh	r3, [r7, #6]
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	3b04      	subs	r3, #4
 8005e34:	0112      	lsls	r2, r2, #4
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	440b      	add	r3, r1
 8005e3a:	761a      	strb	r2, [r3, #24]
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	e000e100 	.word	0xe000e100
 8005e4c:	e000ed00 	.word	0xe000ed00

08005e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b089      	sub	sp, #36	; 0x24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f1c3 0307 	rsb	r3, r3, #7
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	bf28      	it	cs
 8005e6e:	2304      	movcs	r3, #4
 8005e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	3304      	adds	r3, #4
 8005e76:	2b06      	cmp	r3, #6
 8005e78:	d902      	bls.n	8005e80 <NVIC_EncodePriority+0x30>
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	3b03      	subs	r3, #3
 8005e7e:	e000      	b.n	8005e82 <NVIC_EncodePriority+0x32>
 8005e80:	2300      	movs	r3, #0
 8005e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e84:	f04f 32ff 	mov.w	r2, #4294967295
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8e:	43da      	mvns	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	401a      	ands	r2, r3
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e98:	f04f 31ff 	mov.w	r1, #4294967295
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea2:	43d9      	mvns	r1, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ea8:	4313      	orrs	r3, r2
         );
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3724      	adds	r7, #36	; 0x24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ec8:	d301      	bcc.n	8005ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e00f      	b.n	8005eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ece:	4a0a      	ldr	r2, [pc, #40]	; (8005ef8 <SysTick_Config+0x40>)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ed6:	210f      	movs	r1, #15
 8005ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8005edc:	f7ff ff8e 	bl	8005dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ee0:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <SysTick_Config+0x40>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ee6:	4b04      	ldr	r3, [pc, #16]	; (8005ef8 <SysTick_Config+0x40>)
 8005ee8:	2207      	movs	r2, #7
 8005eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	e000e010 	.word	0xe000e010

08005efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7ff ff29 	bl	8005d5c <__NVIC_SetPriorityGrouping>
}
 8005f0a:	bf00      	nop
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b086      	sub	sp, #24
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	4603      	mov	r3, r0
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	607a      	str	r2, [r7, #4]
 8005f1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f20:	f7ff ff40 	bl	8005da4 <__NVIC_GetPriorityGrouping>
 8005f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	6978      	ldr	r0, [r7, #20]
 8005f2c:	f7ff ff90 	bl	8005e50 <NVIC_EncodePriority>
 8005f30:	4602      	mov	r2, r0
 8005f32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f36:	4611      	mov	r1, r2
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff ff5f 	bl	8005dfc <__NVIC_SetPriority>
}
 8005f3e:	bf00      	nop
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b082      	sub	sp, #8
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7ff ff33 	bl	8005dc0 <__NVIC_EnableIRQ>
}
 8005f5a:	bf00      	nop
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b082      	sub	sp, #8
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff ffa4 	bl	8005eb8 <SysTick_Config>
 8005f70:	4603      	mov	r3, r0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005f84:	f7ff feae 	bl	8005ce4 <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e316      	b.n	80065c2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a66      	ldr	r2, [pc, #408]	; (8006134 <HAL_DMA_Init+0x1b8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d04a      	beq.n	8006034 <HAL_DMA_Init+0xb8>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a65      	ldr	r2, [pc, #404]	; (8006138 <HAL_DMA_Init+0x1bc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d045      	beq.n	8006034 <HAL_DMA_Init+0xb8>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a63      	ldr	r2, [pc, #396]	; (800613c <HAL_DMA_Init+0x1c0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d040      	beq.n	8006034 <HAL_DMA_Init+0xb8>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a62      	ldr	r2, [pc, #392]	; (8006140 <HAL_DMA_Init+0x1c4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d03b      	beq.n	8006034 <HAL_DMA_Init+0xb8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a60      	ldr	r2, [pc, #384]	; (8006144 <HAL_DMA_Init+0x1c8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d036      	beq.n	8006034 <HAL_DMA_Init+0xb8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a5f      	ldr	r2, [pc, #380]	; (8006148 <HAL_DMA_Init+0x1cc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d031      	beq.n	8006034 <HAL_DMA_Init+0xb8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a5d      	ldr	r2, [pc, #372]	; (800614c <HAL_DMA_Init+0x1d0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d02c      	beq.n	8006034 <HAL_DMA_Init+0xb8>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a5c      	ldr	r2, [pc, #368]	; (8006150 <HAL_DMA_Init+0x1d4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d027      	beq.n	8006034 <HAL_DMA_Init+0xb8>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a5a      	ldr	r2, [pc, #360]	; (8006154 <HAL_DMA_Init+0x1d8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d022      	beq.n	8006034 <HAL_DMA_Init+0xb8>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a59      	ldr	r2, [pc, #356]	; (8006158 <HAL_DMA_Init+0x1dc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d01d      	beq.n	8006034 <HAL_DMA_Init+0xb8>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a57      	ldr	r2, [pc, #348]	; (800615c <HAL_DMA_Init+0x1e0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d018      	beq.n	8006034 <HAL_DMA_Init+0xb8>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a56      	ldr	r2, [pc, #344]	; (8006160 <HAL_DMA_Init+0x1e4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <HAL_DMA_Init+0xb8>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a54      	ldr	r2, [pc, #336]	; (8006164 <HAL_DMA_Init+0x1e8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00e      	beq.n	8006034 <HAL_DMA_Init+0xb8>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a53      	ldr	r2, [pc, #332]	; (8006168 <HAL_DMA_Init+0x1ec>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_DMA_Init+0xb8>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a51      	ldr	r2, [pc, #324]	; (800616c <HAL_DMA_Init+0x1f0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <HAL_DMA_Init+0xb8>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a50      	ldr	r2, [pc, #320]	; (8006170 <HAL_DMA_Init+0x1f4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d101      	bne.n	8006038 <HAL_DMA_Init+0xbc>
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <HAL_DMA_Init+0xbe>
 8006038:	2300      	movs	r3, #0
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 813b 	beq.w	80062b6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a37      	ldr	r2, [pc, #220]	; (8006134 <HAL_DMA_Init+0x1b8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d04a      	beq.n	80060f0 <HAL_DMA_Init+0x174>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a36      	ldr	r2, [pc, #216]	; (8006138 <HAL_DMA_Init+0x1bc>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d045      	beq.n	80060f0 <HAL_DMA_Init+0x174>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a34      	ldr	r2, [pc, #208]	; (800613c <HAL_DMA_Init+0x1c0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d040      	beq.n	80060f0 <HAL_DMA_Init+0x174>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a33      	ldr	r2, [pc, #204]	; (8006140 <HAL_DMA_Init+0x1c4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d03b      	beq.n	80060f0 <HAL_DMA_Init+0x174>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a31      	ldr	r2, [pc, #196]	; (8006144 <HAL_DMA_Init+0x1c8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d036      	beq.n	80060f0 <HAL_DMA_Init+0x174>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a30      	ldr	r2, [pc, #192]	; (8006148 <HAL_DMA_Init+0x1cc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d031      	beq.n	80060f0 <HAL_DMA_Init+0x174>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a2e      	ldr	r2, [pc, #184]	; (800614c <HAL_DMA_Init+0x1d0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d02c      	beq.n	80060f0 <HAL_DMA_Init+0x174>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a2d      	ldr	r2, [pc, #180]	; (8006150 <HAL_DMA_Init+0x1d4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d027      	beq.n	80060f0 <HAL_DMA_Init+0x174>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a2b      	ldr	r2, [pc, #172]	; (8006154 <HAL_DMA_Init+0x1d8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d022      	beq.n	80060f0 <HAL_DMA_Init+0x174>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a2a      	ldr	r2, [pc, #168]	; (8006158 <HAL_DMA_Init+0x1dc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d01d      	beq.n	80060f0 <HAL_DMA_Init+0x174>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a28      	ldr	r2, [pc, #160]	; (800615c <HAL_DMA_Init+0x1e0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d018      	beq.n	80060f0 <HAL_DMA_Init+0x174>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a27      	ldr	r2, [pc, #156]	; (8006160 <HAL_DMA_Init+0x1e4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d013      	beq.n	80060f0 <HAL_DMA_Init+0x174>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a25      	ldr	r2, [pc, #148]	; (8006164 <HAL_DMA_Init+0x1e8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00e      	beq.n	80060f0 <HAL_DMA_Init+0x174>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a24      	ldr	r2, [pc, #144]	; (8006168 <HAL_DMA_Init+0x1ec>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d009      	beq.n	80060f0 <HAL_DMA_Init+0x174>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a22      	ldr	r2, [pc, #136]	; (800616c <HAL_DMA_Init+0x1f0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d004      	beq.n	80060f0 <HAL_DMA_Init+0x174>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a21      	ldr	r2, [pc, #132]	; (8006170 <HAL_DMA_Init+0x1f4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d108      	bne.n	8006102 <HAL_DMA_Init+0x186>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0201 	bic.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	e007      	b.n	8006112 <HAL_DMA_Init+0x196>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0201 	bic.w	r2, r2, #1
 8006110:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006112:	e02f      	b.n	8006174 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006114:	f7ff fde6 	bl	8005ce4 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b05      	cmp	r3, #5
 8006120:	d928      	bls.n	8006174 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2203      	movs	r2, #3
 800612c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e246      	b.n	80065c2 <HAL_DMA_Init+0x646>
 8006134:	40020010 	.word	0x40020010
 8006138:	40020028 	.word	0x40020028
 800613c:	40020040 	.word	0x40020040
 8006140:	40020058 	.word	0x40020058
 8006144:	40020070 	.word	0x40020070
 8006148:	40020088 	.word	0x40020088
 800614c:	400200a0 	.word	0x400200a0
 8006150:	400200b8 	.word	0x400200b8
 8006154:	40020410 	.word	0x40020410
 8006158:	40020428 	.word	0x40020428
 800615c:	40020440 	.word	0x40020440
 8006160:	40020458 	.word	0x40020458
 8006164:	40020470 	.word	0x40020470
 8006168:	40020488 	.word	0x40020488
 800616c:	400204a0 	.word	0x400204a0
 8006170:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1c8      	bne.n	8006114 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4b83      	ldr	r3, [pc, #524]	; (800639c <HAL_DMA_Init+0x420>)
 800618e:	4013      	ands	r3, r2
 8006190:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800619a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d107      	bne.n	80061d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d0:	4313      	orrs	r3, r2
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80061d8:	4b71      	ldr	r3, [pc, #452]	; (80063a0 <HAL_DMA_Init+0x424>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	4b71      	ldr	r3, [pc, #452]	; (80063a4 <HAL_DMA_Init+0x428>)
 80061de:	4013      	ands	r3, r2
 80061e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061e4:	d328      	bcc.n	8006238 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b28      	cmp	r3, #40	; 0x28
 80061ec:	d903      	bls.n	80061f6 <HAL_DMA_Init+0x27a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2b2e      	cmp	r3, #46	; 0x2e
 80061f4:	d917      	bls.n	8006226 <HAL_DMA_Init+0x2aa>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	2b3e      	cmp	r3, #62	; 0x3e
 80061fc:	d903      	bls.n	8006206 <HAL_DMA_Init+0x28a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b42      	cmp	r3, #66	; 0x42
 8006204:	d90f      	bls.n	8006226 <HAL_DMA_Init+0x2aa>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b46      	cmp	r3, #70	; 0x46
 800620c:	d903      	bls.n	8006216 <HAL_DMA_Init+0x29a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b48      	cmp	r3, #72	; 0x48
 8006214:	d907      	bls.n	8006226 <HAL_DMA_Init+0x2aa>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b4e      	cmp	r3, #78	; 0x4e
 800621c:	d905      	bls.n	800622a <HAL_DMA_Init+0x2ae>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b52      	cmp	r3, #82	; 0x52
 8006224:	d801      	bhi.n	800622a <HAL_DMA_Init+0x2ae>
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <HAL_DMA_Init+0x2b0>
 800622a:	2300      	movs	r3, #0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006236:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f023 0307 	bic.w	r3, r3, #7
 800624e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	2b04      	cmp	r3, #4
 8006260:	d117      	bne.n	8006292 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00e      	beq.n	8006292 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f002 fb4b 	bl	8008910 <DMA_CheckFifoParam>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d008      	beq.n	8006292 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2240      	movs	r2, #64	; 0x40
 8006284:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e197      	b.n	80065c2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f002 fa86 	bl	80087ac <DMA_CalcBaseAndBitshift>
 80062a0:	4603      	mov	r3, r0
 80062a2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a8:	f003 031f 	and.w	r3, r3, #31
 80062ac:	223f      	movs	r2, #63	; 0x3f
 80062ae:	409a      	lsls	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	609a      	str	r2, [r3, #8]
 80062b4:	e0cd      	b.n	8006452 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a3b      	ldr	r2, [pc, #236]	; (80063a8 <HAL_DMA_Init+0x42c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d022      	beq.n	8006306 <HAL_DMA_Init+0x38a>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a39      	ldr	r2, [pc, #228]	; (80063ac <HAL_DMA_Init+0x430>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d01d      	beq.n	8006306 <HAL_DMA_Init+0x38a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a38      	ldr	r2, [pc, #224]	; (80063b0 <HAL_DMA_Init+0x434>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d018      	beq.n	8006306 <HAL_DMA_Init+0x38a>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a36      	ldr	r2, [pc, #216]	; (80063b4 <HAL_DMA_Init+0x438>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <HAL_DMA_Init+0x38a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a35      	ldr	r2, [pc, #212]	; (80063b8 <HAL_DMA_Init+0x43c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00e      	beq.n	8006306 <HAL_DMA_Init+0x38a>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a33      	ldr	r2, [pc, #204]	; (80063bc <HAL_DMA_Init+0x440>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_DMA_Init+0x38a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a32      	ldr	r2, [pc, #200]	; (80063c0 <HAL_DMA_Init+0x444>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <HAL_DMA_Init+0x38a>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a30      	ldr	r2, [pc, #192]	; (80063c4 <HAL_DMA_Init+0x448>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d101      	bne.n	800630a <HAL_DMA_Init+0x38e>
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <HAL_DMA_Init+0x390>
 800630a:	2300      	movs	r3, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 8097 	beq.w	8006440 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a24      	ldr	r2, [pc, #144]	; (80063a8 <HAL_DMA_Init+0x42c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d021      	beq.n	8006360 <HAL_DMA_Init+0x3e4>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a22      	ldr	r2, [pc, #136]	; (80063ac <HAL_DMA_Init+0x430>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d01c      	beq.n	8006360 <HAL_DMA_Init+0x3e4>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a21      	ldr	r2, [pc, #132]	; (80063b0 <HAL_DMA_Init+0x434>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d017      	beq.n	8006360 <HAL_DMA_Init+0x3e4>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a1f      	ldr	r2, [pc, #124]	; (80063b4 <HAL_DMA_Init+0x438>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d012      	beq.n	8006360 <HAL_DMA_Init+0x3e4>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a1e      	ldr	r2, [pc, #120]	; (80063b8 <HAL_DMA_Init+0x43c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00d      	beq.n	8006360 <HAL_DMA_Init+0x3e4>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1c      	ldr	r2, [pc, #112]	; (80063bc <HAL_DMA_Init+0x440>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d008      	beq.n	8006360 <HAL_DMA_Init+0x3e4>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a1b      	ldr	r2, [pc, #108]	; (80063c0 <HAL_DMA_Init+0x444>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d003      	beq.n	8006360 <HAL_DMA_Init+0x3e4>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a19      	ldr	r2, [pc, #100]	; (80063c4 <HAL_DMA_Init+0x448>)
 800635e:	4293      	cmp	r3, r2
 8006360:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2202      	movs	r2, #2
 800636e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <HAL_DMA_Init+0x44c>)
 800637e:	4013      	ands	r3, r2
 8006380:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	2b40      	cmp	r3, #64	; 0x40
 8006388:	d020      	beq.n	80063cc <HAL_DMA_Init+0x450>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	2b80      	cmp	r3, #128	; 0x80
 8006390:	d102      	bne.n	8006398 <HAL_DMA_Init+0x41c>
 8006392:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006396:	e01a      	b.n	80063ce <HAL_DMA_Init+0x452>
 8006398:	2300      	movs	r3, #0
 800639a:	e018      	b.n	80063ce <HAL_DMA_Init+0x452>
 800639c:	fe10803f 	.word	0xfe10803f
 80063a0:	5c001000 	.word	0x5c001000
 80063a4:	ffff0000 	.word	0xffff0000
 80063a8:	58025408 	.word	0x58025408
 80063ac:	5802541c 	.word	0x5802541c
 80063b0:	58025430 	.word	0x58025430
 80063b4:	58025444 	.word	0x58025444
 80063b8:	58025458 	.word	0x58025458
 80063bc:	5802546c 	.word	0x5802546c
 80063c0:	58025480 	.word	0x58025480
 80063c4:	58025494 	.word	0x58025494
 80063c8:	fffe000f 	.word	0xfffe000f
 80063cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	68d2      	ldr	r2, [r2, #12]
 80063d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80063d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80063dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80063e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80063ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80063f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80063fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	4b6e      	ldr	r3, [pc, #440]	; (80065cc <HAL_DMA_Init+0x650>)
 8006414:	4413      	add	r3, r2
 8006416:	4a6e      	ldr	r2, [pc, #440]	; (80065d0 <HAL_DMA_Init+0x654>)
 8006418:	fba2 2303 	umull	r2, r3, r2, r3
 800641c:	091b      	lsrs	r3, r3, #4
 800641e:	009a      	lsls	r2, r3, #2
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f002 f9c1 	bl	80087ac <DMA_CalcBaseAndBitshift>
 800642a:	4603      	mov	r3, r0
 800642c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006432:	f003 031f 	and.w	r3, r3, #31
 8006436:	2201      	movs	r2, #1
 8006438:	409a      	lsls	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	605a      	str	r2, [r3, #4]
 800643e:	e008      	b.n	8006452 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2240      	movs	r2, #64	; 0x40
 8006444:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2203      	movs	r2, #3
 800644a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e0b7      	b.n	80065c2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a5f      	ldr	r2, [pc, #380]	; (80065d4 <HAL_DMA_Init+0x658>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d072      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a5d      	ldr	r2, [pc, #372]	; (80065d8 <HAL_DMA_Init+0x65c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d06d      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a5c      	ldr	r2, [pc, #368]	; (80065dc <HAL_DMA_Init+0x660>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d068      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a5a      	ldr	r2, [pc, #360]	; (80065e0 <HAL_DMA_Init+0x664>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d063      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a59      	ldr	r2, [pc, #356]	; (80065e4 <HAL_DMA_Init+0x668>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d05e      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a57      	ldr	r2, [pc, #348]	; (80065e8 <HAL_DMA_Init+0x66c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d059      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a56      	ldr	r2, [pc, #344]	; (80065ec <HAL_DMA_Init+0x670>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d054      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a54      	ldr	r2, [pc, #336]	; (80065f0 <HAL_DMA_Init+0x674>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d04f      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a53      	ldr	r2, [pc, #332]	; (80065f4 <HAL_DMA_Init+0x678>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d04a      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a51      	ldr	r2, [pc, #324]	; (80065f8 <HAL_DMA_Init+0x67c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d045      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a50      	ldr	r2, [pc, #320]	; (80065fc <HAL_DMA_Init+0x680>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d040      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a4e      	ldr	r2, [pc, #312]	; (8006600 <HAL_DMA_Init+0x684>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d03b      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a4d      	ldr	r2, [pc, #308]	; (8006604 <HAL_DMA_Init+0x688>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d036      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a4b      	ldr	r2, [pc, #300]	; (8006608 <HAL_DMA_Init+0x68c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d031      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a4a      	ldr	r2, [pc, #296]	; (800660c <HAL_DMA_Init+0x690>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d02c      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a48      	ldr	r2, [pc, #288]	; (8006610 <HAL_DMA_Init+0x694>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d027      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a47      	ldr	r2, [pc, #284]	; (8006614 <HAL_DMA_Init+0x698>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d022      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a45      	ldr	r2, [pc, #276]	; (8006618 <HAL_DMA_Init+0x69c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d01d      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a44      	ldr	r2, [pc, #272]	; (800661c <HAL_DMA_Init+0x6a0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d018      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a42      	ldr	r2, [pc, #264]	; (8006620 <HAL_DMA_Init+0x6a4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d013      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a41      	ldr	r2, [pc, #260]	; (8006624 <HAL_DMA_Init+0x6a8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d00e      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a3f      	ldr	r2, [pc, #252]	; (8006628 <HAL_DMA_Init+0x6ac>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d009      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a3e      	ldr	r2, [pc, #248]	; (800662c <HAL_DMA_Init+0x6b0>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d004      	beq.n	8006542 <HAL_DMA_Init+0x5c6>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a3c      	ldr	r2, [pc, #240]	; (8006630 <HAL_DMA_Init+0x6b4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d101      	bne.n	8006546 <HAL_DMA_Init+0x5ca>
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <HAL_DMA_Init+0x5cc>
 8006546:	2300      	movs	r3, #0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d032      	beq.n	80065b2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f002 fa5b 	bl	8008a08 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2b80      	cmp	r3, #128	; 0x80
 8006558:	d102      	bne.n	8006560 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006574:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d010      	beq.n	80065a0 <HAL_DMA_Init+0x624>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b08      	cmp	r3, #8
 8006584:	d80c      	bhi.n	80065a0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f002 fad8 	bl	8008b3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800659c:	605a      	str	r2, [r3, #4]
 800659e:	e008      	b.n	80065b2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	a7fdabf8 	.word	0xa7fdabf8
 80065d0:	cccccccd 	.word	0xcccccccd
 80065d4:	40020010 	.word	0x40020010
 80065d8:	40020028 	.word	0x40020028
 80065dc:	40020040 	.word	0x40020040
 80065e0:	40020058 	.word	0x40020058
 80065e4:	40020070 	.word	0x40020070
 80065e8:	40020088 	.word	0x40020088
 80065ec:	400200a0 	.word	0x400200a0
 80065f0:	400200b8 	.word	0x400200b8
 80065f4:	40020410 	.word	0x40020410
 80065f8:	40020428 	.word	0x40020428
 80065fc:	40020440 	.word	0x40020440
 8006600:	40020458 	.word	0x40020458
 8006604:	40020470 	.word	0x40020470
 8006608:	40020488 	.word	0x40020488
 800660c:	400204a0 	.word	0x400204a0
 8006610:	400204b8 	.word	0x400204b8
 8006614:	58025408 	.word	0x58025408
 8006618:	5802541c 	.word	0x5802541c
 800661c:	58025430 	.word	0x58025430
 8006620:	58025444 	.word	0x58025444
 8006624:	58025458 	.word	0x58025458
 8006628:	5802546c 	.word	0x5802546c
 800662c:	58025480 	.word	0x58025480
 8006630:	58025494 	.word	0x58025494

08006634 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e226      	b.n	8006a9e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_DMA_Start_IT+0x2a>
 800665a:	2302      	movs	r3, #2
 800665c:	e21f      	b.n	8006a9e <HAL_DMA_Start_IT+0x46a>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b01      	cmp	r3, #1
 8006670:	f040 820a 	bne.w	8006a88 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a68      	ldr	r2, [pc, #416]	; (8006828 <HAL_DMA_Start_IT+0x1f4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d04a      	beq.n	8006722 <HAL_DMA_Start_IT+0xee>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a66      	ldr	r2, [pc, #408]	; (800682c <HAL_DMA_Start_IT+0x1f8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d045      	beq.n	8006722 <HAL_DMA_Start_IT+0xee>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a65      	ldr	r2, [pc, #404]	; (8006830 <HAL_DMA_Start_IT+0x1fc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d040      	beq.n	8006722 <HAL_DMA_Start_IT+0xee>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a63      	ldr	r2, [pc, #396]	; (8006834 <HAL_DMA_Start_IT+0x200>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d03b      	beq.n	8006722 <HAL_DMA_Start_IT+0xee>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a62      	ldr	r2, [pc, #392]	; (8006838 <HAL_DMA_Start_IT+0x204>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d036      	beq.n	8006722 <HAL_DMA_Start_IT+0xee>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a60      	ldr	r2, [pc, #384]	; (800683c <HAL_DMA_Start_IT+0x208>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d031      	beq.n	8006722 <HAL_DMA_Start_IT+0xee>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a5f      	ldr	r2, [pc, #380]	; (8006840 <HAL_DMA_Start_IT+0x20c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d02c      	beq.n	8006722 <HAL_DMA_Start_IT+0xee>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a5d      	ldr	r2, [pc, #372]	; (8006844 <HAL_DMA_Start_IT+0x210>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d027      	beq.n	8006722 <HAL_DMA_Start_IT+0xee>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a5c      	ldr	r2, [pc, #368]	; (8006848 <HAL_DMA_Start_IT+0x214>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d022      	beq.n	8006722 <HAL_DMA_Start_IT+0xee>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a5a      	ldr	r2, [pc, #360]	; (800684c <HAL_DMA_Start_IT+0x218>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d01d      	beq.n	8006722 <HAL_DMA_Start_IT+0xee>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a59      	ldr	r2, [pc, #356]	; (8006850 <HAL_DMA_Start_IT+0x21c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d018      	beq.n	8006722 <HAL_DMA_Start_IT+0xee>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a57      	ldr	r2, [pc, #348]	; (8006854 <HAL_DMA_Start_IT+0x220>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <HAL_DMA_Start_IT+0xee>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a56      	ldr	r2, [pc, #344]	; (8006858 <HAL_DMA_Start_IT+0x224>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00e      	beq.n	8006722 <HAL_DMA_Start_IT+0xee>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a54      	ldr	r2, [pc, #336]	; (800685c <HAL_DMA_Start_IT+0x228>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d009      	beq.n	8006722 <HAL_DMA_Start_IT+0xee>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a53      	ldr	r2, [pc, #332]	; (8006860 <HAL_DMA_Start_IT+0x22c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_DMA_Start_IT+0xee>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a51      	ldr	r2, [pc, #324]	; (8006864 <HAL_DMA_Start_IT+0x230>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d108      	bne.n	8006734 <HAL_DMA_Start_IT+0x100>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0201 	bic.w	r2, r2, #1
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	e007      	b.n	8006744 <HAL_DMA_Start_IT+0x110>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0201 	bic.w	r2, r2, #1
 8006742:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f001 fe82 	bl	8008454 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a34      	ldr	r2, [pc, #208]	; (8006828 <HAL_DMA_Start_IT+0x1f4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d04a      	beq.n	80067f0 <HAL_DMA_Start_IT+0x1bc>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a33      	ldr	r2, [pc, #204]	; (800682c <HAL_DMA_Start_IT+0x1f8>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d045      	beq.n	80067f0 <HAL_DMA_Start_IT+0x1bc>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a31      	ldr	r2, [pc, #196]	; (8006830 <HAL_DMA_Start_IT+0x1fc>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d040      	beq.n	80067f0 <HAL_DMA_Start_IT+0x1bc>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a30      	ldr	r2, [pc, #192]	; (8006834 <HAL_DMA_Start_IT+0x200>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d03b      	beq.n	80067f0 <HAL_DMA_Start_IT+0x1bc>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a2e      	ldr	r2, [pc, #184]	; (8006838 <HAL_DMA_Start_IT+0x204>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d036      	beq.n	80067f0 <HAL_DMA_Start_IT+0x1bc>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a2d      	ldr	r2, [pc, #180]	; (800683c <HAL_DMA_Start_IT+0x208>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d031      	beq.n	80067f0 <HAL_DMA_Start_IT+0x1bc>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a2b      	ldr	r2, [pc, #172]	; (8006840 <HAL_DMA_Start_IT+0x20c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d02c      	beq.n	80067f0 <HAL_DMA_Start_IT+0x1bc>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a2a      	ldr	r2, [pc, #168]	; (8006844 <HAL_DMA_Start_IT+0x210>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d027      	beq.n	80067f0 <HAL_DMA_Start_IT+0x1bc>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a28      	ldr	r2, [pc, #160]	; (8006848 <HAL_DMA_Start_IT+0x214>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d022      	beq.n	80067f0 <HAL_DMA_Start_IT+0x1bc>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a27      	ldr	r2, [pc, #156]	; (800684c <HAL_DMA_Start_IT+0x218>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d01d      	beq.n	80067f0 <HAL_DMA_Start_IT+0x1bc>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a25      	ldr	r2, [pc, #148]	; (8006850 <HAL_DMA_Start_IT+0x21c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d018      	beq.n	80067f0 <HAL_DMA_Start_IT+0x1bc>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a24      	ldr	r2, [pc, #144]	; (8006854 <HAL_DMA_Start_IT+0x220>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d013      	beq.n	80067f0 <HAL_DMA_Start_IT+0x1bc>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a22      	ldr	r2, [pc, #136]	; (8006858 <HAL_DMA_Start_IT+0x224>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00e      	beq.n	80067f0 <HAL_DMA_Start_IT+0x1bc>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a21      	ldr	r2, [pc, #132]	; (800685c <HAL_DMA_Start_IT+0x228>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d009      	beq.n	80067f0 <HAL_DMA_Start_IT+0x1bc>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a1f      	ldr	r2, [pc, #124]	; (8006860 <HAL_DMA_Start_IT+0x22c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d004      	beq.n	80067f0 <HAL_DMA_Start_IT+0x1bc>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a1e      	ldr	r2, [pc, #120]	; (8006864 <HAL_DMA_Start_IT+0x230>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d101      	bne.n	80067f4 <HAL_DMA_Start_IT+0x1c0>
 80067f0:	2301      	movs	r3, #1
 80067f2:	e000      	b.n	80067f6 <HAL_DMA_Start_IT+0x1c2>
 80067f4:	2300      	movs	r3, #0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d036      	beq.n	8006868 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f023 021e 	bic.w	r2, r3, #30
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f042 0216 	orr.w	r2, r2, #22
 800680c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	d03e      	beq.n	8006894 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0208 	orr.w	r2, r2, #8
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	e035      	b.n	8006894 <HAL_DMA_Start_IT+0x260>
 8006828:	40020010 	.word	0x40020010
 800682c:	40020028 	.word	0x40020028
 8006830:	40020040 	.word	0x40020040
 8006834:	40020058 	.word	0x40020058
 8006838:	40020070 	.word	0x40020070
 800683c:	40020088 	.word	0x40020088
 8006840:	400200a0 	.word	0x400200a0
 8006844:	400200b8 	.word	0x400200b8
 8006848:	40020410 	.word	0x40020410
 800684c:	40020428 	.word	0x40020428
 8006850:	40020440 	.word	0x40020440
 8006854:	40020458 	.word	0x40020458
 8006858:	40020470 	.word	0x40020470
 800685c:	40020488 	.word	0x40020488
 8006860:	400204a0 	.word	0x400204a0
 8006864:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f023 020e 	bic.w	r2, r3, #14
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 020a 	orr.w	r2, r2, #10
 800687a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	2b00      	cmp	r3, #0
 8006882:	d007      	beq.n	8006894 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0204 	orr.w	r2, r2, #4
 8006892:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a83      	ldr	r2, [pc, #524]	; (8006aa8 <HAL_DMA_Start_IT+0x474>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d072      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a82      	ldr	r2, [pc, #520]	; (8006aac <HAL_DMA_Start_IT+0x478>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d06d      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a80      	ldr	r2, [pc, #512]	; (8006ab0 <HAL_DMA_Start_IT+0x47c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d068      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a7f      	ldr	r2, [pc, #508]	; (8006ab4 <HAL_DMA_Start_IT+0x480>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d063      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a7d      	ldr	r2, [pc, #500]	; (8006ab8 <HAL_DMA_Start_IT+0x484>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d05e      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a7c      	ldr	r2, [pc, #496]	; (8006abc <HAL_DMA_Start_IT+0x488>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d059      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a7a      	ldr	r2, [pc, #488]	; (8006ac0 <HAL_DMA_Start_IT+0x48c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d054      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a79      	ldr	r2, [pc, #484]	; (8006ac4 <HAL_DMA_Start_IT+0x490>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d04f      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a77      	ldr	r2, [pc, #476]	; (8006ac8 <HAL_DMA_Start_IT+0x494>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d04a      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a76      	ldr	r2, [pc, #472]	; (8006acc <HAL_DMA_Start_IT+0x498>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d045      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a74      	ldr	r2, [pc, #464]	; (8006ad0 <HAL_DMA_Start_IT+0x49c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d040      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a73      	ldr	r2, [pc, #460]	; (8006ad4 <HAL_DMA_Start_IT+0x4a0>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d03b      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a71      	ldr	r2, [pc, #452]	; (8006ad8 <HAL_DMA_Start_IT+0x4a4>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d036      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a70      	ldr	r2, [pc, #448]	; (8006adc <HAL_DMA_Start_IT+0x4a8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d031      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a6e      	ldr	r2, [pc, #440]	; (8006ae0 <HAL_DMA_Start_IT+0x4ac>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d02c      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a6d      	ldr	r2, [pc, #436]	; (8006ae4 <HAL_DMA_Start_IT+0x4b0>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d027      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a6b      	ldr	r2, [pc, #428]	; (8006ae8 <HAL_DMA_Start_IT+0x4b4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d022      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a6a      	ldr	r2, [pc, #424]	; (8006aec <HAL_DMA_Start_IT+0x4b8>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d01d      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a68      	ldr	r2, [pc, #416]	; (8006af0 <HAL_DMA_Start_IT+0x4bc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d018      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a67      	ldr	r2, [pc, #412]	; (8006af4 <HAL_DMA_Start_IT+0x4c0>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d013      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a65      	ldr	r2, [pc, #404]	; (8006af8 <HAL_DMA_Start_IT+0x4c4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00e      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a64      	ldr	r2, [pc, #400]	; (8006afc <HAL_DMA_Start_IT+0x4c8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d009      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a62      	ldr	r2, [pc, #392]	; (8006b00 <HAL_DMA_Start_IT+0x4cc>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d004      	beq.n	8006984 <HAL_DMA_Start_IT+0x350>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a61      	ldr	r2, [pc, #388]	; (8006b04 <HAL_DMA_Start_IT+0x4d0>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d101      	bne.n	8006988 <HAL_DMA_Start_IT+0x354>
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <HAL_DMA_Start_IT+0x356>
 8006988:	2300      	movs	r3, #0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d01a      	beq.n	80069c4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d007      	beq.n	80069ac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069aa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d007      	beq.n	80069c4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069c2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a37      	ldr	r2, [pc, #220]	; (8006aa8 <HAL_DMA_Start_IT+0x474>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d04a      	beq.n	8006a64 <HAL_DMA_Start_IT+0x430>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a36      	ldr	r2, [pc, #216]	; (8006aac <HAL_DMA_Start_IT+0x478>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d045      	beq.n	8006a64 <HAL_DMA_Start_IT+0x430>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a34      	ldr	r2, [pc, #208]	; (8006ab0 <HAL_DMA_Start_IT+0x47c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d040      	beq.n	8006a64 <HAL_DMA_Start_IT+0x430>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a33      	ldr	r2, [pc, #204]	; (8006ab4 <HAL_DMA_Start_IT+0x480>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d03b      	beq.n	8006a64 <HAL_DMA_Start_IT+0x430>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a31      	ldr	r2, [pc, #196]	; (8006ab8 <HAL_DMA_Start_IT+0x484>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d036      	beq.n	8006a64 <HAL_DMA_Start_IT+0x430>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a30      	ldr	r2, [pc, #192]	; (8006abc <HAL_DMA_Start_IT+0x488>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d031      	beq.n	8006a64 <HAL_DMA_Start_IT+0x430>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a2e      	ldr	r2, [pc, #184]	; (8006ac0 <HAL_DMA_Start_IT+0x48c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d02c      	beq.n	8006a64 <HAL_DMA_Start_IT+0x430>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a2d      	ldr	r2, [pc, #180]	; (8006ac4 <HAL_DMA_Start_IT+0x490>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d027      	beq.n	8006a64 <HAL_DMA_Start_IT+0x430>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a2b      	ldr	r2, [pc, #172]	; (8006ac8 <HAL_DMA_Start_IT+0x494>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d022      	beq.n	8006a64 <HAL_DMA_Start_IT+0x430>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a2a      	ldr	r2, [pc, #168]	; (8006acc <HAL_DMA_Start_IT+0x498>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d01d      	beq.n	8006a64 <HAL_DMA_Start_IT+0x430>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a28      	ldr	r2, [pc, #160]	; (8006ad0 <HAL_DMA_Start_IT+0x49c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d018      	beq.n	8006a64 <HAL_DMA_Start_IT+0x430>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a27      	ldr	r2, [pc, #156]	; (8006ad4 <HAL_DMA_Start_IT+0x4a0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d013      	beq.n	8006a64 <HAL_DMA_Start_IT+0x430>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a25      	ldr	r2, [pc, #148]	; (8006ad8 <HAL_DMA_Start_IT+0x4a4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00e      	beq.n	8006a64 <HAL_DMA_Start_IT+0x430>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a24      	ldr	r2, [pc, #144]	; (8006adc <HAL_DMA_Start_IT+0x4a8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d009      	beq.n	8006a64 <HAL_DMA_Start_IT+0x430>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a22      	ldr	r2, [pc, #136]	; (8006ae0 <HAL_DMA_Start_IT+0x4ac>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d004      	beq.n	8006a64 <HAL_DMA_Start_IT+0x430>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a21      	ldr	r2, [pc, #132]	; (8006ae4 <HAL_DMA_Start_IT+0x4b0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d108      	bne.n	8006a76 <HAL_DMA_Start_IT+0x442>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e012      	b.n	8006a9c <HAL_DMA_Start_IT+0x468>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0201 	orr.w	r2, r2, #1
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	e009      	b.n	8006a9c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	40020010 	.word	0x40020010
 8006aac:	40020028 	.word	0x40020028
 8006ab0:	40020040 	.word	0x40020040
 8006ab4:	40020058 	.word	0x40020058
 8006ab8:	40020070 	.word	0x40020070
 8006abc:	40020088 	.word	0x40020088
 8006ac0:	400200a0 	.word	0x400200a0
 8006ac4:	400200b8 	.word	0x400200b8
 8006ac8:	40020410 	.word	0x40020410
 8006acc:	40020428 	.word	0x40020428
 8006ad0:	40020440 	.word	0x40020440
 8006ad4:	40020458 	.word	0x40020458
 8006ad8:	40020470 	.word	0x40020470
 8006adc:	40020488 	.word	0x40020488
 8006ae0:	400204a0 	.word	0x400204a0
 8006ae4:	400204b8 	.word	0x400204b8
 8006ae8:	58025408 	.word	0x58025408
 8006aec:	5802541c 	.word	0x5802541c
 8006af0:	58025430 	.word	0x58025430
 8006af4:	58025444 	.word	0x58025444
 8006af8:	58025458 	.word	0x58025458
 8006afc:	5802546c 	.word	0x5802546c
 8006b00:	58025480 	.word	0x58025480
 8006b04:	58025494 	.word	0x58025494

08006b08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006b10:	f7ff f8e8 	bl	8005ce4 <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e2dc      	b.n	80070da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d008      	beq.n	8006b3e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2280      	movs	r2, #128	; 0x80
 8006b30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e2cd      	b.n	80070da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a76      	ldr	r2, [pc, #472]	; (8006d1c <HAL_DMA_Abort+0x214>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d04a      	beq.n	8006bde <HAL_DMA_Abort+0xd6>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a74      	ldr	r2, [pc, #464]	; (8006d20 <HAL_DMA_Abort+0x218>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d045      	beq.n	8006bde <HAL_DMA_Abort+0xd6>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a73      	ldr	r2, [pc, #460]	; (8006d24 <HAL_DMA_Abort+0x21c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d040      	beq.n	8006bde <HAL_DMA_Abort+0xd6>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a71      	ldr	r2, [pc, #452]	; (8006d28 <HAL_DMA_Abort+0x220>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d03b      	beq.n	8006bde <HAL_DMA_Abort+0xd6>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a70      	ldr	r2, [pc, #448]	; (8006d2c <HAL_DMA_Abort+0x224>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d036      	beq.n	8006bde <HAL_DMA_Abort+0xd6>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a6e      	ldr	r2, [pc, #440]	; (8006d30 <HAL_DMA_Abort+0x228>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d031      	beq.n	8006bde <HAL_DMA_Abort+0xd6>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a6d      	ldr	r2, [pc, #436]	; (8006d34 <HAL_DMA_Abort+0x22c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d02c      	beq.n	8006bde <HAL_DMA_Abort+0xd6>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a6b      	ldr	r2, [pc, #428]	; (8006d38 <HAL_DMA_Abort+0x230>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d027      	beq.n	8006bde <HAL_DMA_Abort+0xd6>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a6a      	ldr	r2, [pc, #424]	; (8006d3c <HAL_DMA_Abort+0x234>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d022      	beq.n	8006bde <HAL_DMA_Abort+0xd6>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a68      	ldr	r2, [pc, #416]	; (8006d40 <HAL_DMA_Abort+0x238>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d01d      	beq.n	8006bde <HAL_DMA_Abort+0xd6>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a67      	ldr	r2, [pc, #412]	; (8006d44 <HAL_DMA_Abort+0x23c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d018      	beq.n	8006bde <HAL_DMA_Abort+0xd6>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a65      	ldr	r2, [pc, #404]	; (8006d48 <HAL_DMA_Abort+0x240>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d013      	beq.n	8006bde <HAL_DMA_Abort+0xd6>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a64      	ldr	r2, [pc, #400]	; (8006d4c <HAL_DMA_Abort+0x244>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d00e      	beq.n	8006bde <HAL_DMA_Abort+0xd6>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a62      	ldr	r2, [pc, #392]	; (8006d50 <HAL_DMA_Abort+0x248>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d009      	beq.n	8006bde <HAL_DMA_Abort+0xd6>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a61      	ldr	r2, [pc, #388]	; (8006d54 <HAL_DMA_Abort+0x24c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d004      	beq.n	8006bde <HAL_DMA_Abort+0xd6>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a5f      	ldr	r2, [pc, #380]	; (8006d58 <HAL_DMA_Abort+0x250>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d101      	bne.n	8006be2 <HAL_DMA_Abort+0xda>
 8006bde:	2301      	movs	r3, #1
 8006be0:	e000      	b.n	8006be4 <HAL_DMA_Abort+0xdc>
 8006be2:	2300      	movs	r3, #0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d013      	beq.n	8006c10 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 021e 	bic.w	r2, r2, #30
 8006bf6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	695a      	ldr	r2, [r3, #20]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c06:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	e00a      	b.n	8006c26 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 020e 	bic.w	r2, r2, #14
 8006c1e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a3c      	ldr	r2, [pc, #240]	; (8006d1c <HAL_DMA_Abort+0x214>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d072      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a3a      	ldr	r2, [pc, #232]	; (8006d20 <HAL_DMA_Abort+0x218>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d06d      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a39      	ldr	r2, [pc, #228]	; (8006d24 <HAL_DMA_Abort+0x21c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d068      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a37      	ldr	r2, [pc, #220]	; (8006d28 <HAL_DMA_Abort+0x220>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d063      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a36      	ldr	r2, [pc, #216]	; (8006d2c <HAL_DMA_Abort+0x224>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d05e      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a34      	ldr	r2, [pc, #208]	; (8006d30 <HAL_DMA_Abort+0x228>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d059      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a33      	ldr	r2, [pc, #204]	; (8006d34 <HAL_DMA_Abort+0x22c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d054      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a31      	ldr	r2, [pc, #196]	; (8006d38 <HAL_DMA_Abort+0x230>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d04f      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a30      	ldr	r2, [pc, #192]	; (8006d3c <HAL_DMA_Abort+0x234>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d04a      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a2e      	ldr	r2, [pc, #184]	; (8006d40 <HAL_DMA_Abort+0x238>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d045      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a2d      	ldr	r2, [pc, #180]	; (8006d44 <HAL_DMA_Abort+0x23c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d040      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a2b      	ldr	r2, [pc, #172]	; (8006d48 <HAL_DMA_Abort+0x240>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d03b      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a2a      	ldr	r2, [pc, #168]	; (8006d4c <HAL_DMA_Abort+0x244>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d036      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a28      	ldr	r2, [pc, #160]	; (8006d50 <HAL_DMA_Abort+0x248>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d031      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a27      	ldr	r2, [pc, #156]	; (8006d54 <HAL_DMA_Abort+0x24c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d02c      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a25      	ldr	r2, [pc, #148]	; (8006d58 <HAL_DMA_Abort+0x250>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d027      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a24      	ldr	r2, [pc, #144]	; (8006d5c <HAL_DMA_Abort+0x254>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d022      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a22      	ldr	r2, [pc, #136]	; (8006d60 <HAL_DMA_Abort+0x258>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d01d      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a21      	ldr	r2, [pc, #132]	; (8006d64 <HAL_DMA_Abort+0x25c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d018      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a1f      	ldr	r2, [pc, #124]	; (8006d68 <HAL_DMA_Abort+0x260>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d013      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a1e      	ldr	r2, [pc, #120]	; (8006d6c <HAL_DMA_Abort+0x264>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00e      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1c      	ldr	r2, [pc, #112]	; (8006d70 <HAL_DMA_Abort+0x268>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d009      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1b      	ldr	r2, [pc, #108]	; (8006d74 <HAL_DMA_Abort+0x26c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d004      	beq.n	8006d16 <HAL_DMA_Abort+0x20e>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a19      	ldr	r2, [pc, #100]	; (8006d78 <HAL_DMA_Abort+0x270>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d132      	bne.n	8006d7c <HAL_DMA_Abort+0x274>
 8006d16:	2301      	movs	r3, #1
 8006d18:	e031      	b.n	8006d7e <HAL_DMA_Abort+0x276>
 8006d1a:	bf00      	nop
 8006d1c:	40020010 	.word	0x40020010
 8006d20:	40020028 	.word	0x40020028
 8006d24:	40020040 	.word	0x40020040
 8006d28:	40020058 	.word	0x40020058
 8006d2c:	40020070 	.word	0x40020070
 8006d30:	40020088 	.word	0x40020088
 8006d34:	400200a0 	.word	0x400200a0
 8006d38:	400200b8 	.word	0x400200b8
 8006d3c:	40020410 	.word	0x40020410
 8006d40:	40020428 	.word	0x40020428
 8006d44:	40020440 	.word	0x40020440
 8006d48:	40020458 	.word	0x40020458
 8006d4c:	40020470 	.word	0x40020470
 8006d50:	40020488 	.word	0x40020488
 8006d54:	400204a0 	.word	0x400204a0
 8006d58:	400204b8 	.word	0x400204b8
 8006d5c:	58025408 	.word	0x58025408
 8006d60:	5802541c 	.word	0x5802541c
 8006d64:	58025430 	.word	0x58025430
 8006d68:	58025444 	.word	0x58025444
 8006d6c:	58025458 	.word	0x58025458
 8006d70:	5802546c 	.word	0x5802546c
 8006d74:	58025480 	.word	0x58025480
 8006d78:	58025494 	.word	0x58025494
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d007      	beq.n	8006d92 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d90:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a6d      	ldr	r2, [pc, #436]	; (8006f4c <HAL_DMA_Abort+0x444>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d04a      	beq.n	8006e32 <HAL_DMA_Abort+0x32a>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a6b      	ldr	r2, [pc, #428]	; (8006f50 <HAL_DMA_Abort+0x448>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d045      	beq.n	8006e32 <HAL_DMA_Abort+0x32a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a6a      	ldr	r2, [pc, #424]	; (8006f54 <HAL_DMA_Abort+0x44c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d040      	beq.n	8006e32 <HAL_DMA_Abort+0x32a>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a68      	ldr	r2, [pc, #416]	; (8006f58 <HAL_DMA_Abort+0x450>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d03b      	beq.n	8006e32 <HAL_DMA_Abort+0x32a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a67      	ldr	r2, [pc, #412]	; (8006f5c <HAL_DMA_Abort+0x454>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d036      	beq.n	8006e32 <HAL_DMA_Abort+0x32a>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a65      	ldr	r2, [pc, #404]	; (8006f60 <HAL_DMA_Abort+0x458>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d031      	beq.n	8006e32 <HAL_DMA_Abort+0x32a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a64      	ldr	r2, [pc, #400]	; (8006f64 <HAL_DMA_Abort+0x45c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d02c      	beq.n	8006e32 <HAL_DMA_Abort+0x32a>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a62      	ldr	r2, [pc, #392]	; (8006f68 <HAL_DMA_Abort+0x460>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d027      	beq.n	8006e32 <HAL_DMA_Abort+0x32a>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a61      	ldr	r2, [pc, #388]	; (8006f6c <HAL_DMA_Abort+0x464>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d022      	beq.n	8006e32 <HAL_DMA_Abort+0x32a>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a5f      	ldr	r2, [pc, #380]	; (8006f70 <HAL_DMA_Abort+0x468>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d01d      	beq.n	8006e32 <HAL_DMA_Abort+0x32a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a5e      	ldr	r2, [pc, #376]	; (8006f74 <HAL_DMA_Abort+0x46c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d018      	beq.n	8006e32 <HAL_DMA_Abort+0x32a>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a5c      	ldr	r2, [pc, #368]	; (8006f78 <HAL_DMA_Abort+0x470>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d013      	beq.n	8006e32 <HAL_DMA_Abort+0x32a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a5b      	ldr	r2, [pc, #364]	; (8006f7c <HAL_DMA_Abort+0x474>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00e      	beq.n	8006e32 <HAL_DMA_Abort+0x32a>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a59      	ldr	r2, [pc, #356]	; (8006f80 <HAL_DMA_Abort+0x478>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d009      	beq.n	8006e32 <HAL_DMA_Abort+0x32a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a58      	ldr	r2, [pc, #352]	; (8006f84 <HAL_DMA_Abort+0x47c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d004      	beq.n	8006e32 <HAL_DMA_Abort+0x32a>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a56      	ldr	r2, [pc, #344]	; (8006f88 <HAL_DMA_Abort+0x480>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d108      	bne.n	8006e44 <HAL_DMA_Abort+0x33c>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 0201 	bic.w	r2, r2, #1
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	e007      	b.n	8006e54 <HAL_DMA_Abort+0x34c>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0201 	bic.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006e54:	e013      	b.n	8006e7e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e56:	f7fe ff45 	bl	8005ce4 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	2b05      	cmp	r3, #5
 8006e62:	d90c      	bls.n	8006e7e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2220      	movs	r2, #32
 8006e68:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2203      	movs	r2, #3
 8006e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e12d      	b.n	80070da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e5      	bne.n	8006e56 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a2f      	ldr	r2, [pc, #188]	; (8006f4c <HAL_DMA_Abort+0x444>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d04a      	beq.n	8006f2a <HAL_DMA_Abort+0x422>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a2d      	ldr	r2, [pc, #180]	; (8006f50 <HAL_DMA_Abort+0x448>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d045      	beq.n	8006f2a <HAL_DMA_Abort+0x422>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a2c      	ldr	r2, [pc, #176]	; (8006f54 <HAL_DMA_Abort+0x44c>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d040      	beq.n	8006f2a <HAL_DMA_Abort+0x422>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a2a      	ldr	r2, [pc, #168]	; (8006f58 <HAL_DMA_Abort+0x450>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d03b      	beq.n	8006f2a <HAL_DMA_Abort+0x422>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a29      	ldr	r2, [pc, #164]	; (8006f5c <HAL_DMA_Abort+0x454>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d036      	beq.n	8006f2a <HAL_DMA_Abort+0x422>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a27      	ldr	r2, [pc, #156]	; (8006f60 <HAL_DMA_Abort+0x458>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d031      	beq.n	8006f2a <HAL_DMA_Abort+0x422>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a26      	ldr	r2, [pc, #152]	; (8006f64 <HAL_DMA_Abort+0x45c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d02c      	beq.n	8006f2a <HAL_DMA_Abort+0x422>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a24      	ldr	r2, [pc, #144]	; (8006f68 <HAL_DMA_Abort+0x460>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d027      	beq.n	8006f2a <HAL_DMA_Abort+0x422>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a23      	ldr	r2, [pc, #140]	; (8006f6c <HAL_DMA_Abort+0x464>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d022      	beq.n	8006f2a <HAL_DMA_Abort+0x422>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a21      	ldr	r2, [pc, #132]	; (8006f70 <HAL_DMA_Abort+0x468>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d01d      	beq.n	8006f2a <HAL_DMA_Abort+0x422>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a20      	ldr	r2, [pc, #128]	; (8006f74 <HAL_DMA_Abort+0x46c>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d018      	beq.n	8006f2a <HAL_DMA_Abort+0x422>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a1e      	ldr	r2, [pc, #120]	; (8006f78 <HAL_DMA_Abort+0x470>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d013      	beq.n	8006f2a <HAL_DMA_Abort+0x422>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a1d      	ldr	r2, [pc, #116]	; (8006f7c <HAL_DMA_Abort+0x474>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00e      	beq.n	8006f2a <HAL_DMA_Abort+0x422>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a1b      	ldr	r2, [pc, #108]	; (8006f80 <HAL_DMA_Abort+0x478>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d009      	beq.n	8006f2a <HAL_DMA_Abort+0x422>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1a      	ldr	r2, [pc, #104]	; (8006f84 <HAL_DMA_Abort+0x47c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d004      	beq.n	8006f2a <HAL_DMA_Abort+0x422>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a18      	ldr	r2, [pc, #96]	; (8006f88 <HAL_DMA_Abort+0x480>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d101      	bne.n	8006f2e <HAL_DMA_Abort+0x426>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e000      	b.n	8006f30 <HAL_DMA_Abort+0x428>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d02b      	beq.n	8006f8c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f38:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3e:	f003 031f 	and.w	r3, r3, #31
 8006f42:	223f      	movs	r2, #63	; 0x3f
 8006f44:	409a      	lsls	r2, r3
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	609a      	str	r2, [r3, #8]
 8006f4a:	e02a      	b.n	8006fa2 <HAL_DMA_Abort+0x49a>
 8006f4c:	40020010 	.word	0x40020010
 8006f50:	40020028 	.word	0x40020028
 8006f54:	40020040 	.word	0x40020040
 8006f58:	40020058 	.word	0x40020058
 8006f5c:	40020070 	.word	0x40020070
 8006f60:	40020088 	.word	0x40020088
 8006f64:	400200a0 	.word	0x400200a0
 8006f68:	400200b8 	.word	0x400200b8
 8006f6c:	40020410 	.word	0x40020410
 8006f70:	40020428 	.word	0x40020428
 8006f74:	40020440 	.word	0x40020440
 8006f78:	40020458 	.word	0x40020458
 8006f7c:	40020470 	.word	0x40020470
 8006f80:	40020488 	.word	0x40020488
 8006f84:	400204a0 	.word	0x400204a0
 8006f88:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f90:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f96:	f003 031f 	and.w	r3, r3, #31
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	409a      	lsls	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a4f      	ldr	r2, [pc, #316]	; (80070e4 <HAL_DMA_Abort+0x5dc>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d072      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a4d      	ldr	r2, [pc, #308]	; (80070e8 <HAL_DMA_Abort+0x5e0>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d06d      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a4c      	ldr	r2, [pc, #304]	; (80070ec <HAL_DMA_Abort+0x5e4>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d068      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a4a      	ldr	r2, [pc, #296]	; (80070f0 <HAL_DMA_Abort+0x5e8>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d063      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a49      	ldr	r2, [pc, #292]	; (80070f4 <HAL_DMA_Abort+0x5ec>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d05e      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a47      	ldr	r2, [pc, #284]	; (80070f8 <HAL_DMA_Abort+0x5f0>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d059      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a46      	ldr	r2, [pc, #280]	; (80070fc <HAL_DMA_Abort+0x5f4>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d054      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a44      	ldr	r2, [pc, #272]	; (8007100 <HAL_DMA_Abort+0x5f8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d04f      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a43      	ldr	r2, [pc, #268]	; (8007104 <HAL_DMA_Abort+0x5fc>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d04a      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a41      	ldr	r2, [pc, #260]	; (8007108 <HAL_DMA_Abort+0x600>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d045      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a40      	ldr	r2, [pc, #256]	; (800710c <HAL_DMA_Abort+0x604>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d040      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a3e      	ldr	r2, [pc, #248]	; (8007110 <HAL_DMA_Abort+0x608>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d03b      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a3d      	ldr	r2, [pc, #244]	; (8007114 <HAL_DMA_Abort+0x60c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d036      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a3b      	ldr	r2, [pc, #236]	; (8007118 <HAL_DMA_Abort+0x610>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d031      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a3a      	ldr	r2, [pc, #232]	; (800711c <HAL_DMA_Abort+0x614>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d02c      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a38      	ldr	r2, [pc, #224]	; (8007120 <HAL_DMA_Abort+0x618>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d027      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a37      	ldr	r2, [pc, #220]	; (8007124 <HAL_DMA_Abort+0x61c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d022      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a35      	ldr	r2, [pc, #212]	; (8007128 <HAL_DMA_Abort+0x620>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d01d      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a34      	ldr	r2, [pc, #208]	; (800712c <HAL_DMA_Abort+0x624>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d018      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a32      	ldr	r2, [pc, #200]	; (8007130 <HAL_DMA_Abort+0x628>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d013      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a31      	ldr	r2, [pc, #196]	; (8007134 <HAL_DMA_Abort+0x62c>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00e      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a2f      	ldr	r2, [pc, #188]	; (8007138 <HAL_DMA_Abort+0x630>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d009      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a2e      	ldr	r2, [pc, #184]	; (800713c <HAL_DMA_Abort+0x634>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d004      	beq.n	8007092 <HAL_DMA_Abort+0x58a>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a2c      	ldr	r2, [pc, #176]	; (8007140 <HAL_DMA_Abort+0x638>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d101      	bne.n	8007096 <HAL_DMA_Abort+0x58e>
 8007092:	2301      	movs	r3, #1
 8007094:	e000      	b.n	8007098 <HAL_DMA_Abort+0x590>
 8007096:	2300      	movs	r3, #0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d015      	beq.n	80070c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80070a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00c      	beq.n	80070c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80070c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	40020010 	.word	0x40020010
 80070e8:	40020028 	.word	0x40020028
 80070ec:	40020040 	.word	0x40020040
 80070f0:	40020058 	.word	0x40020058
 80070f4:	40020070 	.word	0x40020070
 80070f8:	40020088 	.word	0x40020088
 80070fc:	400200a0 	.word	0x400200a0
 8007100:	400200b8 	.word	0x400200b8
 8007104:	40020410 	.word	0x40020410
 8007108:	40020428 	.word	0x40020428
 800710c:	40020440 	.word	0x40020440
 8007110:	40020458 	.word	0x40020458
 8007114:	40020470 	.word	0x40020470
 8007118:	40020488 	.word	0x40020488
 800711c:	400204a0 	.word	0x400204a0
 8007120:	400204b8 	.word	0x400204b8
 8007124:	58025408 	.word	0x58025408
 8007128:	5802541c 	.word	0x5802541c
 800712c:	58025430 	.word	0x58025430
 8007130:	58025444 	.word	0x58025444
 8007134:	58025458 	.word	0x58025458
 8007138:	5802546c 	.word	0x5802546c
 800713c:	58025480 	.word	0x58025480
 8007140:	58025494 	.word	0x58025494

08007144 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e205      	b.n	8007562 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b02      	cmp	r3, #2
 8007160:	d004      	beq.n	800716c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2280      	movs	r2, #128	; 0x80
 8007166:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e1fa      	b.n	8007562 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a8c      	ldr	r2, [pc, #560]	; (80073a4 <HAL_DMA_Abort_IT+0x260>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d04a      	beq.n	800720c <HAL_DMA_Abort_IT+0xc8>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a8b      	ldr	r2, [pc, #556]	; (80073a8 <HAL_DMA_Abort_IT+0x264>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d045      	beq.n	800720c <HAL_DMA_Abort_IT+0xc8>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a89      	ldr	r2, [pc, #548]	; (80073ac <HAL_DMA_Abort_IT+0x268>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d040      	beq.n	800720c <HAL_DMA_Abort_IT+0xc8>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a88      	ldr	r2, [pc, #544]	; (80073b0 <HAL_DMA_Abort_IT+0x26c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d03b      	beq.n	800720c <HAL_DMA_Abort_IT+0xc8>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a86      	ldr	r2, [pc, #536]	; (80073b4 <HAL_DMA_Abort_IT+0x270>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d036      	beq.n	800720c <HAL_DMA_Abort_IT+0xc8>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a85      	ldr	r2, [pc, #532]	; (80073b8 <HAL_DMA_Abort_IT+0x274>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d031      	beq.n	800720c <HAL_DMA_Abort_IT+0xc8>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a83      	ldr	r2, [pc, #524]	; (80073bc <HAL_DMA_Abort_IT+0x278>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d02c      	beq.n	800720c <HAL_DMA_Abort_IT+0xc8>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a82      	ldr	r2, [pc, #520]	; (80073c0 <HAL_DMA_Abort_IT+0x27c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d027      	beq.n	800720c <HAL_DMA_Abort_IT+0xc8>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a80      	ldr	r2, [pc, #512]	; (80073c4 <HAL_DMA_Abort_IT+0x280>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d022      	beq.n	800720c <HAL_DMA_Abort_IT+0xc8>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a7f      	ldr	r2, [pc, #508]	; (80073c8 <HAL_DMA_Abort_IT+0x284>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d01d      	beq.n	800720c <HAL_DMA_Abort_IT+0xc8>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a7d      	ldr	r2, [pc, #500]	; (80073cc <HAL_DMA_Abort_IT+0x288>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d018      	beq.n	800720c <HAL_DMA_Abort_IT+0xc8>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a7c      	ldr	r2, [pc, #496]	; (80073d0 <HAL_DMA_Abort_IT+0x28c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d013      	beq.n	800720c <HAL_DMA_Abort_IT+0xc8>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a7a      	ldr	r2, [pc, #488]	; (80073d4 <HAL_DMA_Abort_IT+0x290>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00e      	beq.n	800720c <HAL_DMA_Abort_IT+0xc8>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a79      	ldr	r2, [pc, #484]	; (80073d8 <HAL_DMA_Abort_IT+0x294>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d009      	beq.n	800720c <HAL_DMA_Abort_IT+0xc8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a77      	ldr	r2, [pc, #476]	; (80073dc <HAL_DMA_Abort_IT+0x298>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d004      	beq.n	800720c <HAL_DMA_Abort_IT+0xc8>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a76      	ldr	r2, [pc, #472]	; (80073e0 <HAL_DMA_Abort_IT+0x29c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d101      	bne.n	8007210 <HAL_DMA_Abort_IT+0xcc>
 800720c:	2301      	movs	r3, #1
 800720e:	e000      	b.n	8007212 <HAL_DMA_Abort_IT+0xce>
 8007210:	2300      	movs	r3, #0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d065      	beq.n	80072e2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2204      	movs	r2, #4
 800721a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a60      	ldr	r2, [pc, #384]	; (80073a4 <HAL_DMA_Abort_IT+0x260>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d04a      	beq.n	80072be <HAL_DMA_Abort_IT+0x17a>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a5e      	ldr	r2, [pc, #376]	; (80073a8 <HAL_DMA_Abort_IT+0x264>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d045      	beq.n	80072be <HAL_DMA_Abort_IT+0x17a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a5d      	ldr	r2, [pc, #372]	; (80073ac <HAL_DMA_Abort_IT+0x268>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d040      	beq.n	80072be <HAL_DMA_Abort_IT+0x17a>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a5b      	ldr	r2, [pc, #364]	; (80073b0 <HAL_DMA_Abort_IT+0x26c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d03b      	beq.n	80072be <HAL_DMA_Abort_IT+0x17a>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a5a      	ldr	r2, [pc, #360]	; (80073b4 <HAL_DMA_Abort_IT+0x270>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d036      	beq.n	80072be <HAL_DMA_Abort_IT+0x17a>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a58      	ldr	r2, [pc, #352]	; (80073b8 <HAL_DMA_Abort_IT+0x274>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d031      	beq.n	80072be <HAL_DMA_Abort_IT+0x17a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a57      	ldr	r2, [pc, #348]	; (80073bc <HAL_DMA_Abort_IT+0x278>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d02c      	beq.n	80072be <HAL_DMA_Abort_IT+0x17a>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a55      	ldr	r2, [pc, #340]	; (80073c0 <HAL_DMA_Abort_IT+0x27c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d027      	beq.n	80072be <HAL_DMA_Abort_IT+0x17a>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a54      	ldr	r2, [pc, #336]	; (80073c4 <HAL_DMA_Abort_IT+0x280>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d022      	beq.n	80072be <HAL_DMA_Abort_IT+0x17a>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a52      	ldr	r2, [pc, #328]	; (80073c8 <HAL_DMA_Abort_IT+0x284>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d01d      	beq.n	80072be <HAL_DMA_Abort_IT+0x17a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a51      	ldr	r2, [pc, #324]	; (80073cc <HAL_DMA_Abort_IT+0x288>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d018      	beq.n	80072be <HAL_DMA_Abort_IT+0x17a>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a4f      	ldr	r2, [pc, #316]	; (80073d0 <HAL_DMA_Abort_IT+0x28c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d013      	beq.n	80072be <HAL_DMA_Abort_IT+0x17a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a4e      	ldr	r2, [pc, #312]	; (80073d4 <HAL_DMA_Abort_IT+0x290>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00e      	beq.n	80072be <HAL_DMA_Abort_IT+0x17a>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a4c      	ldr	r2, [pc, #304]	; (80073d8 <HAL_DMA_Abort_IT+0x294>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d009      	beq.n	80072be <HAL_DMA_Abort_IT+0x17a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a4b      	ldr	r2, [pc, #300]	; (80073dc <HAL_DMA_Abort_IT+0x298>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d004      	beq.n	80072be <HAL_DMA_Abort_IT+0x17a>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a49      	ldr	r2, [pc, #292]	; (80073e0 <HAL_DMA_Abort_IT+0x29c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d108      	bne.n	80072d0 <HAL_DMA_Abort_IT+0x18c>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 0201 	bic.w	r2, r2, #1
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	e147      	b.n	8007560 <HAL_DMA_Abort_IT+0x41c>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0201 	bic.w	r2, r2, #1
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	e13e      	b.n	8007560 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 020e 	bic.w	r2, r2, #14
 80072f0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a2b      	ldr	r2, [pc, #172]	; (80073a4 <HAL_DMA_Abort_IT+0x260>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d04a      	beq.n	8007392 <HAL_DMA_Abort_IT+0x24e>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a29      	ldr	r2, [pc, #164]	; (80073a8 <HAL_DMA_Abort_IT+0x264>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d045      	beq.n	8007392 <HAL_DMA_Abort_IT+0x24e>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a28      	ldr	r2, [pc, #160]	; (80073ac <HAL_DMA_Abort_IT+0x268>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d040      	beq.n	8007392 <HAL_DMA_Abort_IT+0x24e>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a26      	ldr	r2, [pc, #152]	; (80073b0 <HAL_DMA_Abort_IT+0x26c>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d03b      	beq.n	8007392 <HAL_DMA_Abort_IT+0x24e>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a25      	ldr	r2, [pc, #148]	; (80073b4 <HAL_DMA_Abort_IT+0x270>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d036      	beq.n	8007392 <HAL_DMA_Abort_IT+0x24e>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a23      	ldr	r2, [pc, #140]	; (80073b8 <HAL_DMA_Abort_IT+0x274>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d031      	beq.n	8007392 <HAL_DMA_Abort_IT+0x24e>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a22      	ldr	r2, [pc, #136]	; (80073bc <HAL_DMA_Abort_IT+0x278>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d02c      	beq.n	8007392 <HAL_DMA_Abort_IT+0x24e>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a20      	ldr	r2, [pc, #128]	; (80073c0 <HAL_DMA_Abort_IT+0x27c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d027      	beq.n	8007392 <HAL_DMA_Abort_IT+0x24e>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a1f      	ldr	r2, [pc, #124]	; (80073c4 <HAL_DMA_Abort_IT+0x280>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d022      	beq.n	8007392 <HAL_DMA_Abort_IT+0x24e>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a1d      	ldr	r2, [pc, #116]	; (80073c8 <HAL_DMA_Abort_IT+0x284>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d01d      	beq.n	8007392 <HAL_DMA_Abort_IT+0x24e>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a1c      	ldr	r2, [pc, #112]	; (80073cc <HAL_DMA_Abort_IT+0x288>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d018      	beq.n	8007392 <HAL_DMA_Abort_IT+0x24e>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a1a      	ldr	r2, [pc, #104]	; (80073d0 <HAL_DMA_Abort_IT+0x28c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d013      	beq.n	8007392 <HAL_DMA_Abort_IT+0x24e>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a19      	ldr	r2, [pc, #100]	; (80073d4 <HAL_DMA_Abort_IT+0x290>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00e      	beq.n	8007392 <HAL_DMA_Abort_IT+0x24e>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a17      	ldr	r2, [pc, #92]	; (80073d8 <HAL_DMA_Abort_IT+0x294>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d009      	beq.n	8007392 <HAL_DMA_Abort_IT+0x24e>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a16      	ldr	r2, [pc, #88]	; (80073dc <HAL_DMA_Abort_IT+0x298>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d004      	beq.n	8007392 <HAL_DMA_Abort_IT+0x24e>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a14      	ldr	r2, [pc, #80]	; (80073e0 <HAL_DMA_Abort_IT+0x29c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d128      	bne.n	80073e4 <HAL_DMA_Abort_IT+0x2a0>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0201 	bic.w	r2, r2, #1
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	e027      	b.n	80073f4 <HAL_DMA_Abort_IT+0x2b0>
 80073a4:	40020010 	.word	0x40020010
 80073a8:	40020028 	.word	0x40020028
 80073ac:	40020040 	.word	0x40020040
 80073b0:	40020058 	.word	0x40020058
 80073b4:	40020070 	.word	0x40020070
 80073b8:	40020088 	.word	0x40020088
 80073bc:	400200a0 	.word	0x400200a0
 80073c0:	400200b8 	.word	0x400200b8
 80073c4:	40020410 	.word	0x40020410
 80073c8:	40020428 	.word	0x40020428
 80073cc:	40020440 	.word	0x40020440
 80073d0:	40020458 	.word	0x40020458
 80073d4:	40020470 	.word	0x40020470
 80073d8:	40020488 	.word	0x40020488
 80073dc:	400204a0 	.word	0x400204a0
 80073e0:	400204b8 	.word	0x400204b8
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0201 	bic.w	r2, r2, #1
 80073f2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a5c      	ldr	r2, [pc, #368]	; (800756c <HAL_DMA_Abort_IT+0x428>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d072      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a5b      	ldr	r2, [pc, #364]	; (8007570 <HAL_DMA_Abort_IT+0x42c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d06d      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a59      	ldr	r2, [pc, #356]	; (8007574 <HAL_DMA_Abort_IT+0x430>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d068      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a58      	ldr	r2, [pc, #352]	; (8007578 <HAL_DMA_Abort_IT+0x434>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d063      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a56      	ldr	r2, [pc, #344]	; (800757c <HAL_DMA_Abort_IT+0x438>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d05e      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a55      	ldr	r2, [pc, #340]	; (8007580 <HAL_DMA_Abort_IT+0x43c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d059      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a53      	ldr	r2, [pc, #332]	; (8007584 <HAL_DMA_Abort_IT+0x440>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d054      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a52      	ldr	r2, [pc, #328]	; (8007588 <HAL_DMA_Abort_IT+0x444>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d04f      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a50      	ldr	r2, [pc, #320]	; (800758c <HAL_DMA_Abort_IT+0x448>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d04a      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a4f      	ldr	r2, [pc, #316]	; (8007590 <HAL_DMA_Abort_IT+0x44c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d045      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a4d      	ldr	r2, [pc, #308]	; (8007594 <HAL_DMA_Abort_IT+0x450>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d040      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a4c      	ldr	r2, [pc, #304]	; (8007598 <HAL_DMA_Abort_IT+0x454>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d03b      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a4a      	ldr	r2, [pc, #296]	; (800759c <HAL_DMA_Abort_IT+0x458>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d036      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a49      	ldr	r2, [pc, #292]	; (80075a0 <HAL_DMA_Abort_IT+0x45c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d031      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a47      	ldr	r2, [pc, #284]	; (80075a4 <HAL_DMA_Abort_IT+0x460>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d02c      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a46      	ldr	r2, [pc, #280]	; (80075a8 <HAL_DMA_Abort_IT+0x464>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d027      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a44      	ldr	r2, [pc, #272]	; (80075ac <HAL_DMA_Abort_IT+0x468>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d022      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a43      	ldr	r2, [pc, #268]	; (80075b0 <HAL_DMA_Abort_IT+0x46c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d01d      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a41      	ldr	r2, [pc, #260]	; (80075b4 <HAL_DMA_Abort_IT+0x470>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d018      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a40      	ldr	r2, [pc, #256]	; (80075b8 <HAL_DMA_Abort_IT+0x474>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d013      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a3e      	ldr	r2, [pc, #248]	; (80075bc <HAL_DMA_Abort_IT+0x478>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00e      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a3d      	ldr	r2, [pc, #244]	; (80075c0 <HAL_DMA_Abort_IT+0x47c>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d009      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a3b      	ldr	r2, [pc, #236]	; (80075c4 <HAL_DMA_Abort_IT+0x480>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d004      	beq.n	80074e4 <HAL_DMA_Abort_IT+0x3a0>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a3a      	ldr	r2, [pc, #232]	; (80075c8 <HAL_DMA_Abort_IT+0x484>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d101      	bne.n	80074e8 <HAL_DMA_Abort_IT+0x3a4>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e000      	b.n	80074ea <HAL_DMA_Abort_IT+0x3a6>
 80074e8:	2300      	movs	r3, #0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d028      	beq.n	8007540 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007502:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007508:	f003 031f 	and.w	r3, r3, #31
 800750c:	2201      	movs	r2, #1
 800750e:	409a      	lsls	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800751c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00c      	beq.n	8007540 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007534:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800753e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	40020010 	.word	0x40020010
 8007570:	40020028 	.word	0x40020028
 8007574:	40020040 	.word	0x40020040
 8007578:	40020058 	.word	0x40020058
 800757c:	40020070 	.word	0x40020070
 8007580:	40020088 	.word	0x40020088
 8007584:	400200a0 	.word	0x400200a0
 8007588:	400200b8 	.word	0x400200b8
 800758c:	40020410 	.word	0x40020410
 8007590:	40020428 	.word	0x40020428
 8007594:	40020440 	.word	0x40020440
 8007598:	40020458 	.word	0x40020458
 800759c:	40020470 	.word	0x40020470
 80075a0:	40020488 	.word	0x40020488
 80075a4:	400204a0 	.word	0x400204a0
 80075a8:	400204b8 	.word	0x400204b8
 80075ac:	58025408 	.word	0x58025408
 80075b0:	5802541c 	.word	0x5802541c
 80075b4:	58025430 	.word	0x58025430
 80075b8:	58025444 	.word	0x58025444
 80075bc:	58025458 	.word	0x58025458
 80075c0:	5802546c 	.word	0x5802546c
 80075c4:	58025480 	.word	0x58025480
 80075c8:	58025494 	.word	0x58025494

080075cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b08a      	sub	sp, #40	; 0x28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80075d8:	4b67      	ldr	r3, [pc, #412]	; (8007778 <HAL_DMA_IRQHandler+0x1ac>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a67      	ldr	r2, [pc, #412]	; (800777c <HAL_DMA_IRQHandler+0x1b0>)
 80075de:	fba2 2303 	umull	r2, r3, r2, r3
 80075e2:	0a9b      	lsrs	r3, r3, #10
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a5f      	ldr	r2, [pc, #380]	; (8007780 <HAL_DMA_IRQHandler+0x1b4>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d04a      	beq.n	800769e <HAL_DMA_IRQHandler+0xd2>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a5d      	ldr	r2, [pc, #372]	; (8007784 <HAL_DMA_IRQHandler+0x1b8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d045      	beq.n	800769e <HAL_DMA_IRQHandler+0xd2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a5c      	ldr	r2, [pc, #368]	; (8007788 <HAL_DMA_IRQHandler+0x1bc>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d040      	beq.n	800769e <HAL_DMA_IRQHandler+0xd2>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a5a      	ldr	r2, [pc, #360]	; (800778c <HAL_DMA_IRQHandler+0x1c0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d03b      	beq.n	800769e <HAL_DMA_IRQHandler+0xd2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a59      	ldr	r2, [pc, #356]	; (8007790 <HAL_DMA_IRQHandler+0x1c4>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d036      	beq.n	800769e <HAL_DMA_IRQHandler+0xd2>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a57      	ldr	r2, [pc, #348]	; (8007794 <HAL_DMA_IRQHandler+0x1c8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d031      	beq.n	800769e <HAL_DMA_IRQHandler+0xd2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a56      	ldr	r2, [pc, #344]	; (8007798 <HAL_DMA_IRQHandler+0x1cc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d02c      	beq.n	800769e <HAL_DMA_IRQHandler+0xd2>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a54      	ldr	r2, [pc, #336]	; (800779c <HAL_DMA_IRQHandler+0x1d0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d027      	beq.n	800769e <HAL_DMA_IRQHandler+0xd2>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a53      	ldr	r2, [pc, #332]	; (80077a0 <HAL_DMA_IRQHandler+0x1d4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d022      	beq.n	800769e <HAL_DMA_IRQHandler+0xd2>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a51      	ldr	r2, [pc, #324]	; (80077a4 <HAL_DMA_IRQHandler+0x1d8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d01d      	beq.n	800769e <HAL_DMA_IRQHandler+0xd2>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a50      	ldr	r2, [pc, #320]	; (80077a8 <HAL_DMA_IRQHandler+0x1dc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d018      	beq.n	800769e <HAL_DMA_IRQHandler+0xd2>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a4e      	ldr	r2, [pc, #312]	; (80077ac <HAL_DMA_IRQHandler+0x1e0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d013      	beq.n	800769e <HAL_DMA_IRQHandler+0xd2>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a4d      	ldr	r2, [pc, #308]	; (80077b0 <HAL_DMA_IRQHandler+0x1e4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d00e      	beq.n	800769e <HAL_DMA_IRQHandler+0xd2>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a4b      	ldr	r2, [pc, #300]	; (80077b4 <HAL_DMA_IRQHandler+0x1e8>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d009      	beq.n	800769e <HAL_DMA_IRQHandler+0xd2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a4a      	ldr	r2, [pc, #296]	; (80077b8 <HAL_DMA_IRQHandler+0x1ec>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d004      	beq.n	800769e <HAL_DMA_IRQHandler+0xd2>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a48      	ldr	r2, [pc, #288]	; (80077bc <HAL_DMA_IRQHandler+0x1f0>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d101      	bne.n	80076a2 <HAL_DMA_IRQHandler+0xd6>
 800769e:	2301      	movs	r3, #1
 80076a0:	e000      	b.n	80076a4 <HAL_DMA_IRQHandler+0xd8>
 80076a2:	2300      	movs	r3, #0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 842b 	beq.w	8007f00 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ae:	f003 031f 	and.w	r3, r3, #31
 80076b2:	2208      	movs	r2, #8
 80076b4:	409a      	lsls	r2, r3
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	4013      	ands	r3, r2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 80a2 	beq.w	8007804 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a2e      	ldr	r2, [pc, #184]	; (8007780 <HAL_DMA_IRQHandler+0x1b4>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d04a      	beq.n	8007760 <HAL_DMA_IRQHandler+0x194>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a2d      	ldr	r2, [pc, #180]	; (8007784 <HAL_DMA_IRQHandler+0x1b8>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d045      	beq.n	8007760 <HAL_DMA_IRQHandler+0x194>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a2b      	ldr	r2, [pc, #172]	; (8007788 <HAL_DMA_IRQHandler+0x1bc>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d040      	beq.n	8007760 <HAL_DMA_IRQHandler+0x194>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a2a      	ldr	r2, [pc, #168]	; (800778c <HAL_DMA_IRQHandler+0x1c0>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d03b      	beq.n	8007760 <HAL_DMA_IRQHandler+0x194>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a28      	ldr	r2, [pc, #160]	; (8007790 <HAL_DMA_IRQHandler+0x1c4>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d036      	beq.n	8007760 <HAL_DMA_IRQHandler+0x194>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a27      	ldr	r2, [pc, #156]	; (8007794 <HAL_DMA_IRQHandler+0x1c8>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d031      	beq.n	8007760 <HAL_DMA_IRQHandler+0x194>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a25      	ldr	r2, [pc, #148]	; (8007798 <HAL_DMA_IRQHandler+0x1cc>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d02c      	beq.n	8007760 <HAL_DMA_IRQHandler+0x194>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a24      	ldr	r2, [pc, #144]	; (800779c <HAL_DMA_IRQHandler+0x1d0>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d027      	beq.n	8007760 <HAL_DMA_IRQHandler+0x194>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a22      	ldr	r2, [pc, #136]	; (80077a0 <HAL_DMA_IRQHandler+0x1d4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d022      	beq.n	8007760 <HAL_DMA_IRQHandler+0x194>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a21      	ldr	r2, [pc, #132]	; (80077a4 <HAL_DMA_IRQHandler+0x1d8>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d01d      	beq.n	8007760 <HAL_DMA_IRQHandler+0x194>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1f      	ldr	r2, [pc, #124]	; (80077a8 <HAL_DMA_IRQHandler+0x1dc>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d018      	beq.n	8007760 <HAL_DMA_IRQHandler+0x194>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1e      	ldr	r2, [pc, #120]	; (80077ac <HAL_DMA_IRQHandler+0x1e0>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d013      	beq.n	8007760 <HAL_DMA_IRQHandler+0x194>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a1c      	ldr	r2, [pc, #112]	; (80077b0 <HAL_DMA_IRQHandler+0x1e4>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d00e      	beq.n	8007760 <HAL_DMA_IRQHandler+0x194>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a1b      	ldr	r2, [pc, #108]	; (80077b4 <HAL_DMA_IRQHandler+0x1e8>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d009      	beq.n	8007760 <HAL_DMA_IRQHandler+0x194>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a19      	ldr	r2, [pc, #100]	; (80077b8 <HAL_DMA_IRQHandler+0x1ec>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d004      	beq.n	8007760 <HAL_DMA_IRQHandler+0x194>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a18      	ldr	r2, [pc, #96]	; (80077bc <HAL_DMA_IRQHandler+0x1f0>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d12f      	bne.n	80077c0 <HAL_DMA_IRQHandler+0x1f4>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	2b00      	cmp	r3, #0
 800776c:	bf14      	ite	ne
 800776e:	2301      	movne	r3, #1
 8007770:	2300      	moveq	r3, #0
 8007772:	b2db      	uxtb	r3, r3
 8007774:	e02e      	b.n	80077d4 <HAL_DMA_IRQHandler+0x208>
 8007776:	bf00      	nop
 8007778:	24000014 	.word	0x24000014
 800777c:	1b4e81b5 	.word	0x1b4e81b5
 8007780:	40020010 	.word	0x40020010
 8007784:	40020028 	.word	0x40020028
 8007788:	40020040 	.word	0x40020040
 800778c:	40020058 	.word	0x40020058
 8007790:	40020070 	.word	0x40020070
 8007794:	40020088 	.word	0x40020088
 8007798:	400200a0 	.word	0x400200a0
 800779c:	400200b8 	.word	0x400200b8
 80077a0:	40020410 	.word	0x40020410
 80077a4:	40020428 	.word	0x40020428
 80077a8:	40020440 	.word	0x40020440
 80077ac:	40020458 	.word	0x40020458
 80077b0:	40020470 	.word	0x40020470
 80077b4:	40020488 	.word	0x40020488
 80077b8:	400204a0 	.word	0x400204a0
 80077bc:	400204b8 	.word	0x400204b8
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	bf14      	ite	ne
 80077ce:	2301      	movne	r3, #1
 80077d0:	2300      	moveq	r3, #0
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d015      	beq.n	8007804 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 0204 	bic.w	r2, r2, #4
 80077e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ec:	f003 031f 	and.w	r3, r3, #31
 80077f0:	2208      	movs	r2, #8
 80077f2:	409a      	lsls	r2, r3
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fc:	f043 0201 	orr.w	r2, r3, #1
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007808:	f003 031f 	and.w	r3, r3, #31
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	fa22 f303 	lsr.w	r3, r2, r3
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d06e      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a69      	ldr	r2, [pc, #420]	; (80079c4 <HAL_DMA_IRQHandler+0x3f8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d04a      	beq.n	80078ba <HAL_DMA_IRQHandler+0x2ee>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a67      	ldr	r2, [pc, #412]	; (80079c8 <HAL_DMA_IRQHandler+0x3fc>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d045      	beq.n	80078ba <HAL_DMA_IRQHandler+0x2ee>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a66      	ldr	r2, [pc, #408]	; (80079cc <HAL_DMA_IRQHandler+0x400>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d040      	beq.n	80078ba <HAL_DMA_IRQHandler+0x2ee>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a64      	ldr	r2, [pc, #400]	; (80079d0 <HAL_DMA_IRQHandler+0x404>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d03b      	beq.n	80078ba <HAL_DMA_IRQHandler+0x2ee>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a63      	ldr	r2, [pc, #396]	; (80079d4 <HAL_DMA_IRQHandler+0x408>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d036      	beq.n	80078ba <HAL_DMA_IRQHandler+0x2ee>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a61      	ldr	r2, [pc, #388]	; (80079d8 <HAL_DMA_IRQHandler+0x40c>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d031      	beq.n	80078ba <HAL_DMA_IRQHandler+0x2ee>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a60      	ldr	r2, [pc, #384]	; (80079dc <HAL_DMA_IRQHandler+0x410>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d02c      	beq.n	80078ba <HAL_DMA_IRQHandler+0x2ee>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a5e      	ldr	r2, [pc, #376]	; (80079e0 <HAL_DMA_IRQHandler+0x414>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d027      	beq.n	80078ba <HAL_DMA_IRQHandler+0x2ee>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a5d      	ldr	r2, [pc, #372]	; (80079e4 <HAL_DMA_IRQHandler+0x418>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d022      	beq.n	80078ba <HAL_DMA_IRQHandler+0x2ee>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a5b      	ldr	r2, [pc, #364]	; (80079e8 <HAL_DMA_IRQHandler+0x41c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d01d      	beq.n	80078ba <HAL_DMA_IRQHandler+0x2ee>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a5a      	ldr	r2, [pc, #360]	; (80079ec <HAL_DMA_IRQHandler+0x420>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d018      	beq.n	80078ba <HAL_DMA_IRQHandler+0x2ee>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a58      	ldr	r2, [pc, #352]	; (80079f0 <HAL_DMA_IRQHandler+0x424>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d013      	beq.n	80078ba <HAL_DMA_IRQHandler+0x2ee>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a57      	ldr	r2, [pc, #348]	; (80079f4 <HAL_DMA_IRQHandler+0x428>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d00e      	beq.n	80078ba <HAL_DMA_IRQHandler+0x2ee>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a55      	ldr	r2, [pc, #340]	; (80079f8 <HAL_DMA_IRQHandler+0x42c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d009      	beq.n	80078ba <HAL_DMA_IRQHandler+0x2ee>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a54      	ldr	r2, [pc, #336]	; (80079fc <HAL_DMA_IRQHandler+0x430>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d004      	beq.n	80078ba <HAL_DMA_IRQHandler+0x2ee>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a52      	ldr	r2, [pc, #328]	; (8007a00 <HAL_DMA_IRQHandler+0x434>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d10a      	bne.n	80078d0 <HAL_DMA_IRQHandler+0x304>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	bf14      	ite	ne
 80078c8:	2301      	movne	r3, #1
 80078ca:	2300      	moveq	r3, #0
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	e003      	b.n	80078d8 <HAL_DMA_IRQHandler+0x30c>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2300      	movs	r3, #0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00d      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e0:	f003 031f 	and.w	r3, r3, #31
 80078e4:	2201      	movs	r2, #1
 80078e6:	409a      	lsls	r2, r3
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f0:	f043 0202 	orr.w	r2, r3, #2
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fc:	f003 031f 	and.w	r3, r3, #31
 8007900:	2204      	movs	r2, #4
 8007902:	409a      	lsls	r2, r3
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	4013      	ands	r3, r2
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 808f 	beq.w	8007a2c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a2c      	ldr	r2, [pc, #176]	; (80079c4 <HAL_DMA_IRQHandler+0x3f8>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d04a      	beq.n	80079ae <HAL_DMA_IRQHandler+0x3e2>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a2a      	ldr	r2, [pc, #168]	; (80079c8 <HAL_DMA_IRQHandler+0x3fc>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d045      	beq.n	80079ae <HAL_DMA_IRQHandler+0x3e2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a29      	ldr	r2, [pc, #164]	; (80079cc <HAL_DMA_IRQHandler+0x400>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d040      	beq.n	80079ae <HAL_DMA_IRQHandler+0x3e2>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a27      	ldr	r2, [pc, #156]	; (80079d0 <HAL_DMA_IRQHandler+0x404>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d03b      	beq.n	80079ae <HAL_DMA_IRQHandler+0x3e2>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a26      	ldr	r2, [pc, #152]	; (80079d4 <HAL_DMA_IRQHandler+0x408>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d036      	beq.n	80079ae <HAL_DMA_IRQHandler+0x3e2>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a24      	ldr	r2, [pc, #144]	; (80079d8 <HAL_DMA_IRQHandler+0x40c>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d031      	beq.n	80079ae <HAL_DMA_IRQHandler+0x3e2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a23      	ldr	r2, [pc, #140]	; (80079dc <HAL_DMA_IRQHandler+0x410>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d02c      	beq.n	80079ae <HAL_DMA_IRQHandler+0x3e2>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a21      	ldr	r2, [pc, #132]	; (80079e0 <HAL_DMA_IRQHandler+0x414>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d027      	beq.n	80079ae <HAL_DMA_IRQHandler+0x3e2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a20      	ldr	r2, [pc, #128]	; (80079e4 <HAL_DMA_IRQHandler+0x418>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d022      	beq.n	80079ae <HAL_DMA_IRQHandler+0x3e2>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a1e      	ldr	r2, [pc, #120]	; (80079e8 <HAL_DMA_IRQHandler+0x41c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d01d      	beq.n	80079ae <HAL_DMA_IRQHandler+0x3e2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1d      	ldr	r2, [pc, #116]	; (80079ec <HAL_DMA_IRQHandler+0x420>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d018      	beq.n	80079ae <HAL_DMA_IRQHandler+0x3e2>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a1b      	ldr	r2, [pc, #108]	; (80079f0 <HAL_DMA_IRQHandler+0x424>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d013      	beq.n	80079ae <HAL_DMA_IRQHandler+0x3e2>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a1a      	ldr	r2, [pc, #104]	; (80079f4 <HAL_DMA_IRQHandler+0x428>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d00e      	beq.n	80079ae <HAL_DMA_IRQHandler+0x3e2>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a18      	ldr	r2, [pc, #96]	; (80079f8 <HAL_DMA_IRQHandler+0x42c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d009      	beq.n	80079ae <HAL_DMA_IRQHandler+0x3e2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a17      	ldr	r2, [pc, #92]	; (80079fc <HAL_DMA_IRQHandler+0x430>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d004      	beq.n	80079ae <HAL_DMA_IRQHandler+0x3e2>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a15      	ldr	r2, [pc, #84]	; (8007a00 <HAL_DMA_IRQHandler+0x434>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d12a      	bne.n	8007a04 <HAL_DMA_IRQHandler+0x438>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	bf14      	ite	ne
 80079bc:	2301      	movne	r3, #1
 80079be:	2300      	moveq	r3, #0
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	e023      	b.n	8007a0c <HAL_DMA_IRQHandler+0x440>
 80079c4:	40020010 	.word	0x40020010
 80079c8:	40020028 	.word	0x40020028
 80079cc:	40020040 	.word	0x40020040
 80079d0:	40020058 	.word	0x40020058
 80079d4:	40020070 	.word	0x40020070
 80079d8:	40020088 	.word	0x40020088
 80079dc:	400200a0 	.word	0x400200a0
 80079e0:	400200b8 	.word	0x400200b8
 80079e4:	40020410 	.word	0x40020410
 80079e8:	40020428 	.word	0x40020428
 80079ec:	40020440 	.word	0x40020440
 80079f0:	40020458 	.word	0x40020458
 80079f4:	40020470 	.word	0x40020470
 80079f8:	40020488 	.word	0x40020488
 80079fc:	400204a0 	.word	0x400204a0
 8007a00:	400204b8 	.word	0x400204b8
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00d      	beq.n	8007a2c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a14:	f003 031f 	and.w	r3, r3, #31
 8007a18:	2204      	movs	r2, #4
 8007a1a:	409a      	lsls	r2, r3
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a24:	f043 0204 	orr.w	r2, r3, #4
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a30:	f003 031f 	and.w	r3, r3, #31
 8007a34:	2210      	movs	r2, #16
 8007a36:	409a      	lsls	r2, r3
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 80a6 	beq.w	8007b8e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a85      	ldr	r2, [pc, #532]	; (8007c5c <HAL_DMA_IRQHandler+0x690>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d04a      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0x516>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a83      	ldr	r2, [pc, #524]	; (8007c60 <HAL_DMA_IRQHandler+0x694>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d045      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0x516>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a82      	ldr	r2, [pc, #520]	; (8007c64 <HAL_DMA_IRQHandler+0x698>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d040      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0x516>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a80      	ldr	r2, [pc, #512]	; (8007c68 <HAL_DMA_IRQHandler+0x69c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d03b      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0x516>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a7f      	ldr	r2, [pc, #508]	; (8007c6c <HAL_DMA_IRQHandler+0x6a0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d036      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0x516>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a7d      	ldr	r2, [pc, #500]	; (8007c70 <HAL_DMA_IRQHandler+0x6a4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d031      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0x516>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a7c      	ldr	r2, [pc, #496]	; (8007c74 <HAL_DMA_IRQHandler+0x6a8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d02c      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0x516>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a7a      	ldr	r2, [pc, #488]	; (8007c78 <HAL_DMA_IRQHandler+0x6ac>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d027      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0x516>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a79      	ldr	r2, [pc, #484]	; (8007c7c <HAL_DMA_IRQHandler+0x6b0>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d022      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0x516>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a77      	ldr	r2, [pc, #476]	; (8007c80 <HAL_DMA_IRQHandler+0x6b4>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d01d      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0x516>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a76      	ldr	r2, [pc, #472]	; (8007c84 <HAL_DMA_IRQHandler+0x6b8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d018      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0x516>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a74      	ldr	r2, [pc, #464]	; (8007c88 <HAL_DMA_IRQHandler+0x6bc>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d013      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0x516>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a73      	ldr	r2, [pc, #460]	; (8007c8c <HAL_DMA_IRQHandler+0x6c0>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d00e      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0x516>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a71      	ldr	r2, [pc, #452]	; (8007c90 <HAL_DMA_IRQHandler+0x6c4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d009      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0x516>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a70      	ldr	r2, [pc, #448]	; (8007c94 <HAL_DMA_IRQHandler+0x6c8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d004      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0x516>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a6e      	ldr	r2, [pc, #440]	; (8007c98 <HAL_DMA_IRQHandler+0x6cc>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d10a      	bne.n	8007af8 <HAL_DMA_IRQHandler+0x52c>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0308 	and.w	r3, r3, #8
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	bf14      	ite	ne
 8007af0:	2301      	movne	r3, #1
 8007af2:	2300      	moveq	r3, #0
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	e009      	b.n	8007b0c <HAL_DMA_IRQHandler+0x540>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	bf14      	ite	ne
 8007b06:	2301      	movne	r3, #1
 8007b08:	2300      	moveq	r3, #0
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d03e      	beq.n	8007b8e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b14:	f003 031f 	and.w	r3, r3, #31
 8007b18:	2210      	movs	r2, #16
 8007b1a:	409a      	lsls	r2, r3
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d018      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d108      	bne.n	8007b4e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d024      	beq.n	8007b8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	4798      	blx	r3
 8007b4c:	e01f      	b.n	8007b8e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d01b      	beq.n	8007b8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	4798      	blx	r3
 8007b5e:	e016      	b.n	8007b8e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d107      	bne.n	8007b7e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 0208 	bic.w	r2, r2, #8
 8007b7c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b92:	f003 031f 	and.w	r3, r3, #31
 8007b96:	2220      	movs	r2, #32
 8007b98:	409a      	lsls	r2, r3
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 8110 	beq.w	8007dc4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a2c      	ldr	r2, [pc, #176]	; (8007c5c <HAL_DMA_IRQHandler+0x690>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d04a      	beq.n	8007c44 <HAL_DMA_IRQHandler+0x678>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a2b      	ldr	r2, [pc, #172]	; (8007c60 <HAL_DMA_IRQHandler+0x694>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d045      	beq.n	8007c44 <HAL_DMA_IRQHandler+0x678>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a29      	ldr	r2, [pc, #164]	; (8007c64 <HAL_DMA_IRQHandler+0x698>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d040      	beq.n	8007c44 <HAL_DMA_IRQHandler+0x678>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a28      	ldr	r2, [pc, #160]	; (8007c68 <HAL_DMA_IRQHandler+0x69c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d03b      	beq.n	8007c44 <HAL_DMA_IRQHandler+0x678>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a26      	ldr	r2, [pc, #152]	; (8007c6c <HAL_DMA_IRQHandler+0x6a0>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d036      	beq.n	8007c44 <HAL_DMA_IRQHandler+0x678>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a25      	ldr	r2, [pc, #148]	; (8007c70 <HAL_DMA_IRQHandler+0x6a4>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d031      	beq.n	8007c44 <HAL_DMA_IRQHandler+0x678>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a23      	ldr	r2, [pc, #140]	; (8007c74 <HAL_DMA_IRQHandler+0x6a8>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d02c      	beq.n	8007c44 <HAL_DMA_IRQHandler+0x678>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a22      	ldr	r2, [pc, #136]	; (8007c78 <HAL_DMA_IRQHandler+0x6ac>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d027      	beq.n	8007c44 <HAL_DMA_IRQHandler+0x678>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a20      	ldr	r2, [pc, #128]	; (8007c7c <HAL_DMA_IRQHandler+0x6b0>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d022      	beq.n	8007c44 <HAL_DMA_IRQHandler+0x678>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a1f      	ldr	r2, [pc, #124]	; (8007c80 <HAL_DMA_IRQHandler+0x6b4>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d01d      	beq.n	8007c44 <HAL_DMA_IRQHandler+0x678>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a1d      	ldr	r2, [pc, #116]	; (8007c84 <HAL_DMA_IRQHandler+0x6b8>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d018      	beq.n	8007c44 <HAL_DMA_IRQHandler+0x678>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a1c      	ldr	r2, [pc, #112]	; (8007c88 <HAL_DMA_IRQHandler+0x6bc>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d013      	beq.n	8007c44 <HAL_DMA_IRQHandler+0x678>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a1a      	ldr	r2, [pc, #104]	; (8007c8c <HAL_DMA_IRQHandler+0x6c0>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d00e      	beq.n	8007c44 <HAL_DMA_IRQHandler+0x678>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a19      	ldr	r2, [pc, #100]	; (8007c90 <HAL_DMA_IRQHandler+0x6c4>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d009      	beq.n	8007c44 <HAL_DMA_IRQHandler+0x678>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a17      	ldr	r2, [pc, #92]	; (8007c94 <HAL_DMA_IRQHandler+0x6c8>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d004      	beq.n	8007c44 <HAL_DMA_IRQHandler+0x678>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a16      	ldr	r2, [pc, #88]	; (8007c98 <HAL_DMA_IRQHandler+0x6cc>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d12b      	bne.n	8007c9c <HAL_DMA_IRQHandler+0x6d0>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0310 	and.w	r3, r3, #16
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bf14      	ite	ne
 8007c52:	2301      	movne	r3, #1
 8007c54:	2300      	moveq	r3, #0
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	e02a      	b.n	8007cb0 <HAL_DMA_IRQHandler+0x6e4>
 8007c5a:	bf00      	nop
 8007c5c:	40020010 	.word	0x40020010
 8007c60:	40020028 	.word	0x40020028
 8007c64:	40020040 	.word	0x40020040
 8007c68:	40020058 	.word	0x40020058
 8007c6c:	40020070 	.word	0x40020070
 8007c70:	40020088 	.word	0x40020088
 8007c74:	400200a0 	.word	0x400200a0
 8007c78:	400200b8 	.word	0x400200b8
 8007c7c:	40020410 	.word	0x40020410
 8007c80:	40020428 	.word	0x40020428
 8007c84:	40020440 	.word	0x40020440
 8007c88:	40020458 	.word	0x40020458
 8007c8c:	40020470 	.word	0x40020470
 8007c90:	40020488 	.word	0x40020488
 8007c94:	400204a0 	.word	0x400204a0
 8007c98:	400204b8 	.word	0x400204b8
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	bf14      	ite	ne
 8007caa:	2301      	movne	r3, #1
 8007cac:	2300      	moveq	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f000 8087 	beq.w	8007dc4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cba:	f003 031f 	and.w	r3, r3, #31
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	409a      	lsls	r2, r3
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d139      	bne.n	8007d46 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f022 0216 	bic.w	r2, r2, #22
 8007ce0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	695a      	ldr	r2, [r3, #20]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cf0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d103      	bne.n	8007d02 <HAL_DMA_IRQHandler+0x736>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d007      	beq.n	8007d12 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 0208 	bic.w	r2, r2, #8
 8007d10:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d16:	f003 031f 	and.w	r3, r3, #31
 8007d1a:	223f      	movs	r2, #63	; 0x3f
 8007d1c:	409a      	lsls	r2, r3
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 834a 	beq.w	80083d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	4798      	blx	r3
          }
          return;
 8007d44:	e344      	b.n	80083d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d018      	beq.n	8007d86 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d108      	bne.n	8007d74 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d02c      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	4798      	blx	r3
 8007d72:	e027      	b.n	8007dc4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d023      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	4798      	blx	r3
 8007d84:	e01e      	b.n	8007dc4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10f      	bne.n	8007db4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f022 0210 	bic.w	r2, r2, #16
 8007da2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 8306 	beq.w	80083da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 8088 	beq.w	8007eec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2204      	movs	r2, #4
 8007de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a7a      	ldr	r2, [pc, #488]	; (8007fd4 <HAL_DMA_IRQHandler+0xa08>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d04a      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x8b8>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a79      	ldr	r2, [pc, #484]	; (8007fd8 <HAL_DMA_IRQHandler+0xa0c>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d045      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x8b8>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a77      	ldr	r2, [pc, #476]	; (8007fdc <HAL_DMA_IRQHandler+0xa10>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d040      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x8b8>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a76      	ldr	r2, [pc, #472]	; (8007fe0 <HAL_DMA_IRQHandler+0xa14>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d03b      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x8b8>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a74      	ldr	r2, [pc, #464]	; (8007fe4 <HAL_DMA_IRQHandler+0xa18>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d036      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x8b8>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a73      	ldr	r2, [pc, #460]	; (8007fe8 <HAL_DMA_IRQHandler+0xa1c>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d031      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x8b8>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a71      	ldr	r2, [pc, #452]	; (8007fec <HAL_DMA_IRQHandler+0xa20>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d02c      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x8b8>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a70      	ldr	r2, [pc, #448]	; (8007ff0 <HAL_DMA_IRQHandler+0xa24>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d027      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x8b8>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a6e      	ldr	r2, [pc, #440]	; (8007ff4 <HAL_DMA_IRQHandler+0xa28>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d022      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x8b8>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a6d      	ldr	r2, [pc, #436]	; (8007ff8 <HAL_DMA_IRQHandler+0xa2c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d01d      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x8b8>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a6b      	ldr	r2, [pc, #428]	; (8007ffc <HAL_DMA_IRQHandler+0xa30>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d018      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x8b8>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a6a      	ldr	r2, [pc, #424]	; (8008000 <HAL_DMA_IRQHandler+0xa34>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d013      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x8b8>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a68      	ldr	r2, [pc, #416]	; (8008004 <HAL_DMA_IRQHandler+0xa38>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00e      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x8b8>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a67      	ldr	r2, [pc, #412]	; (8008008 <HAL_DMA_IRQHandler+0xa3c>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d009      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x8b8>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a65      	ldr	r2, [pc, #404]	; (800800c <HAL_DMA_IRQHandler+0xa40>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d004      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x8b8>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a64      	ldr	r2, [pc, #400]	; (8008010 <HAL_DMA_IRQHandler+0xa44>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d108      	bne.n	8007e96 <HAL_DMA_IRQHandler+0x8ca>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0201 	bic.w	r2, r2, #1
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	e007      	b.n	8007ea6 <HAL_DMA_IRQHandler+0x8da>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f022 0201 	bic.w	r2, r2, #1
 8007ea4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d307      	bcc.n	8007ec2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1f2      	bne.n	8007ea6 <HAL_DMA_IRQHandler+0x8da>
 8007ec0:	e000      	b.n	8007ec4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007ec2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d004      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2203      	movs	r2, #3
 8007ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007ee2:	e003      	b.n	8007eec <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 8272 	beq.w	80083da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	4798      	blx	r3
 8007efe:	e26c      	b.n	80083da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a43      	ldr	r2, [pc, #268]	; (8008014 <HAL_DMA_IRQHandler+0xa48>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d022      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x984>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a42      	ldr	r2, [pc, #264]	; (8008018 <HAL_DMA_IRQHandler+0xa4c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d01d      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x984>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a40      	ldr	r2, [pc, #256]	; (800801c <HAL_DMA_IRQHandler+0xa50>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d018      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x984>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a3f      	ldr	r2, [pc, #252]	; (8008020 <HAL_DMA_IRQHandler+0xa54>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d013      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x984>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a3d      	ldr	r2, [pc, #244]	; (8008024 <HAL_DMA_IRQHandler+0xa58>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d00e      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x984>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a3c      	ldr	r2, [pc, #240]	; (8008028 <HAL_DMA_IRQHandler+0xa5c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d009      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x984>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a3a      	ldr	r2, [pc, #232]	; (800802c <HAL_DMA_IRQHandler+0xa60>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d004      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x984>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a39      	ldr	r2, [pc, #228]	; (8008030 <HAL_DMA_IRQHandler+0xa64>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d101      	bne.n	8007f54 <HAL_DMA_IRQHandler+0x988>
 8007f50:	2301      	movs	r3, #1
 8007f52:	e000      	b.n	8007f56 <HAL_DMA_IRQHandler+0x98a>
 8007f54:	2300      	movs	r3, #0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 823f 	beq.w	80083da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f68:	f003 031f 	and.w	r3, r3, #31
 8007f6c:	2204      	movs	r2, #4
 8007f6e:	409a      	lsls	r2, r3
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	4013      	ands	r3, r2
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 80cd 	beq.w	8008114 <HAL_DMA_IRQHandler+0xb48>
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 80c7 	beq.w	8008114 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f8a:	f003 031f 	and.w	r3, r3, #31
 8007f8e:	2204      	movs	r2, #4
 8007f90:	409a      	lsls	r2, r3
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d049      	beq.n	8008034 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d109      	bne.n	8007fbe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 8210 	beq.w	80083d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fbc:	e20a      	b.n	80083d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 8206 	beq.w	80083d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fd0:	e200      	b.n	80083d4 <HAL_DMA_IRQHandler+0xe08>
 8007fd2:	bf00      	nop
 8007fd4:	40020010 	.word	0x40020010
 8007fd8:	40020028 	.word	0x40020028
 8007fdc:	40020040 	.word	0x40020040
 8007fe0:	40020058 	.word	0x40020058
 8007fe4:	40020070 	.word	0x40020070
 8007fe8:	40020088 	.word	0x40020088
 8007fec:	400200a0 	.word	0x400200a0
 8007ff0:	400200b8 	.word	0x400200b8
 8007ff4:	40020410 	.word	0x40020410
 8007ff8:	40020428 	.word	0x40020428
 8007ffc:	40020440 	.word	0x40020440
 8008000:	40020458 	.word	0x40020458
 8008004:	40020470 	.word	0x40020470
 8008008:	40020488 	.word	0x40020488
 800800c:	400204a0 	.word	0x400204a0
 8008010:	400204b8 	.word	0x400204b8
 8008014:	58025408 	.word	0x58025408
 8008018:	5802541c 	.word	0x5802541c
 800801c:	58025430 	.word	0x58025430
 8008020:	58025444 	.word	0x58025444
 8008024:	58025458 	.word	0x58025458
 8008028:	5802546c 	.word	0x5802546c
 800802c:	58025480 	.word	0x58025480
 8008030:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	f003 0320 	and.w	r3, r3, #32
 800803a:	2b00      	cmp	r3, #0
 800803c:	d160      	bne.n	8008100 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a8c      	ldr	r2, [pc, #560]	; (8008274 <HAL_DMA_IRQHandler+0xca8>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d04a      	beq.n	80080de <HAL_DMA_IRQHandler+0xb12>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a8a      	ldr	r2, [pc, #552]	; (8008278 <HAL_DMA_IRQHandler+0xcac>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d045      	beq.n	80080de <HAL_DMA_IRQHandler+0xb12>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a89      	ldr	r2, [pc, #548]	; (800827c <HAL_DMA_IRQHandler+0xcb0>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d040      	beq.n	80080de <HAL_DMA_IRQHandler+0xb12>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a87      	ldr	r2, [pc, #540]	; (8008280 <HAL_DMA_IRQHandler+0xcb4>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d03b      	beq.n	80080de <HAL_DMA_IRQHandler+0xb12>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a86      	ldr	r2, [pc, #536]	; (8008284 <HAL_DMA_IRQHandler+0xcb8>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d036      	beq.n	80080de <HAL_DMA_IRQHandler+0xb12>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a84      	ldr	r2, [pc, #528]	; (8008288 <HAL_DMA_IRQHandler+0xcbc>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d031      	beq.n	80080de <HAL_DMA_IRQHandler+0xb12>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a83      	ldr	r2, [pc, #524]	; (800828c <HAL_DMA_IRQHandler+0xcc0>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d02c      	beq.n	80080de <HAL_DMA_IRQHandler+0xb12>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a81      	ldr	r2, [pc, #516]	; (8008290 <HAL_DMA_IRQHandler+0xcc4>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d027      	beq.n	80080de <HAL_DMA_IRQHandler+0xb12>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a80      	ldr	r2, [pc, #512]	; (8008294 <HAL_DMA_IRQHandler+0xcc8>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d022      	beq.n	80080de <HAL_DMA_IRQHandler+0xb12>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a7e      	ldr	r2, [pc, #504]	; (8008298 <HAL_DMA_IRQHandler+0xccc>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d01d      	beq.n	80080de <HAL_DMA_IRQHandler+0xb12>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a7d      	ldr	r2, [pc, #500]	; (800829c <HAL_DMA_IRQHandler+0xcd0>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d018      	beq.n	80080de <HAL_DMA_IRQHandler+0xb12>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a7b      	ldr	r2, [pc, #492]	; (80082a0 <HAL_DMA_IRQHandler+0xcd4>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d013      	beq.n	80080de <HAL_DMA_IRQHandler+0xb12>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a7a      	ldr	r2, [pc, #488]	; (80082a4 <HAL_DMA_IRQHandler+0xcd8>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d00e      	beq.n	80080de <HAL_DMA_IRQHandler+0xb12>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a78      	ldr	r2, [pc, #480]	; (80082a8 <HAL_DMA_IRQHandler+0xcdc>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d009      	beq.n	80080de <HAL_DMA_IRQHandler+0xb12>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a77      	ldr	r2, [pc, #476]	; (80082ac <HAL_DMA_IRQHandler+0xce0>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d004      	beq.n	80080de <HAL_DMA_IRQHandler+0xb12>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a75      	ldr	r2, [pc, #468]	; (80082b0 <HAL_DMA_IRQHandler+0xce4>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d108      	bne.n	80080f0 <HAL_DMA_IRQHandler+0xb24>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f022 0208 	bic.w	r2, r2, #8
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	e007      	b.n	8008100 <HAL_DMA_IRQHandler+0xb34>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 0204 	bic.w	r2, r2, #4
 80080fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 8165 	beq.w	80083d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008112:	e15f      	b.n	80083d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008118:	f003 031f 	and.w	r3, r3, #31
 800811c:	2202      	movs	r2, #2
 800811e:	409a      	lsls	r2, r3
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	4013      	ands	r3, r2
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 80c5 	beq.w	80082b4 <HAL_DMA_IRQHandler+0xce8>
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f003 0302 	and.w	r3, r3, #2
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 80bf 	beq.w	80082b4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800813a:	f003 031f 	and.w	r3, r3, #31
 800813e:	2202      	movs	r2, #2
 8008140:	409a      	lsls	r2, r3
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d018      	beq.n	8008182 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d109      	bne.n	800816e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 813a 	beq.w	80083d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800816c:	e134      	b.n	80083d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 8130 	beq.w	80083d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008180:	e12a      	b.n	80083d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f003 0320 	and.w	r3, r3, #32
 8008188:	2b00      	cmp	r3, #0
 800818a:	d168      	bne.n	800825e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a38      	ldr	r2, [pc, #224]	; (8008274 <HAL_DMA_IRQHandler+0xca8>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d04a      	beq.n	800822c <HAL_DMA_IRQHandler+0xc60>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a37      	ldr	r2, [pc, #220]	; (8008278 <HAL_DMA_IRQHandler+0xcac>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d045      	beq.n	800822c <HAL_DMA_IRQHandler+0xc60>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a35      	ldr	r2, [pc, #212]	; (800827c <HAL_DMA_IRQHandler+0xcb0>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d040      	beq.n	800822c <HAL_DMA_IRQHandler+0xc60>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a34      	ldr	r2, [pc, #208]	; (8008280 <HAL_DMA_IRQHandler+0xcb4>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d03b      	beq.n	800822c <HAL_DMA_IRQHandler+0xc60>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a32      	ldr	r2, [pc, #200]	; (8008284 <HAL_DMA_IRQHandler+0xcb8>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d036      	beq.n	800822c <HAL_DMA_IRQHandler+0xc60>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a31      	ldr	r2, [pc, #196]	; (8008288 <HAL_DMA_IRQHandler+0xcbc>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d031      	beq.n	800822c <HAL_DMA_IRQHandler+0xc60>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a2f      	ldr	r2, [pc, #188]	; (800828c <HAL_DMA_IRQHandler+0xcc0>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d02c      	beq.n	800822c <HAL_DMA_IRQHandler+0xc60>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a2e      	ldr	r2, [pc, #184]	; (8008290 <HAL_DMA_IRQHandler+0xcc4>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d027      	beq.n	800822c <HAL_DMA_IRQHandler+0xc60>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a2c      	ldr	r2, [pc, #176]	; (8008294 <HAL_DMA_IRQHandler+0xcc8>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d022      	beq.n	800822c <HAL_DMA_IRQHandler+0xc60>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a2b      	ldr	r2, [pc, #172]	; (8008298 <HAL_DMA_IRQHandler+0xccc>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d01d      	beq.n	800822c <HAL_DMA_IRQHandler+0xc60>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a29      	ldr	r2, [pc, #164]	; (800829c <HAL_DMA_IRQHandler+0xcd0>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d018      	beq.n	800822c <HAL_DMA_IRQHandler+0xc60>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a28      	ldr	r2, [pc, #160]	; (80082a0 <HAL_DMA_IRQHandler+0xcd4>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d013      	beq.n	800822c <HAL_DMA_IRQHandler+0xc60>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a26      	ldr	r2, [pc, #152]	; (80082a4 <HAL_DMA_IRQHandler+0xcd8>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d00e      	beq.n	800822c <HAL_DMA_IRQHandler+0xc60>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a25      	ldr	r2, [pc, #148]	; (80082a8 <HAL_DMA_IRQHandler+0xcdc>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d009      	beq.n	800822c <HAL_DMA_IRQHandler+0xc60>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a23      	ldr	r2, [pc, #140]	; (80082ac <HAL_DMA_IRQHandler+0xce0>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d004      	beq.n	800822c <HAL_DMA_IRQHandler+0xc60>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a22      	ldr	r2, [pc, #136]	; (80082b0 <HAL_DMA_IRQHandler+0xce4>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d108      	bne.n	800823e <HAL_DMA_IRQHandler+0xc72>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 0214 	bic.w	r2, r2, #20
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	e007      	b.n	800824e <HAL_DMA_IRQHandler+0xc82>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f022 020a 	bic.w	r2, r2, #10
 800824c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008262:	2b00      	cmp	r3, #0
 8008264:	f000 80b8 	beq.w	80083d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008270:	e0b2      	b.n	80083d8 <HAL_DMA_IRQHandler+0xe0c>
 8008272:	bf00      	nop
 8008274:	40020010 	.word	0x40020010
 8008278:	40020028 	.word	0x40020028
 800827c:	40020040 	.word	0x40020040
 8008280:	40020058 	.word	0x40020058
 8008284:	40020070 	.word	0x40020070
 8008288:	40020088 	.word	0x40020088
 800828c:	400200a0 	.word	0x400200a0
 8008290:	400200b8 	.word	0x400200b8
 8008294:	40020410 	.word	0x40020410
 8008298:	40020428 	.word	0x40020428
 800829c:	40020440 	.word	0x40020440
 80082a0:	40020458 	.word	0x40020458
 80082a4:	40020470 	.word	0x40020470
 80082a8:	40020488 	.word	0x40020488
 80082ac:	400204a0 	.word	0x400204a0
 80082b0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082b8:	f003 031f 	and.w	r3, r3, #31
 80082bc:	2208      	movs	r2, #8
 80082be:	409a      	lsls	r2, r3
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	4013      	ands	r3, r2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 8088 	beq.w	80083da <HAL_DMA_IRQHandler+0xe0e>
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f003 0308 	and.w	r3, r3, #8
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 8082 	beq.w	80083da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a41      	ldr	r2, [pc, #260]	; (80083e0 <HAL_DMA_IRQHandler+0xe14>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d04a      	beq.n	8008376 <HAL_DMA_IRQHandler+0xdaa>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a3f      	ldr	r2, [pc, #252]	; (80083e4 <HAL_DMA_IRQHandler+0xe18>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d045      	beq.n	8008376 <HAL_DMA_IRQHandler+0xdaa>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a3e      	ldr	r2, [pc, #248]	; (80083e8 <HAL_DMA_IRQHandler+0xe1c>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d040      	beq.n	8008376 <HAL_DMA_IRQHandler+0xdaa>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a3c      	ldr	r2, [pc, #240]	; (80083ec <HAL_DMA_IRQHandler+0xe20>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d03b      	beq.n	8008376 <HAL_DMA_IRQHandler+0xdaa>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a3b      	ldr	r2, [pc, #236]	; (80083f0 <HAL_DMA_IRQHandler+0xe24>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d036      	beq.n	8008376 <HAL_DMA_IRQHandler+0xdaa>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a39      	ldr	r2, [pc, #228]	; (80083f4 <HAL_DMA_IRQHandler+0xe28>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d031      	beq.n	8008376 <HAL_DMA_IRQHandler+0xdaa>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a38      	ldr	r2, [pc, #224]	; (80083f8 <HAL_DMA_IRQHandler+0xe2c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d02c      	beq.n	8008376 <HAL_DMA_IRQHandler+0xdaa>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a36      	ldr	r2, [pc, #216]	; (80083fc <HAL_DMA_IRQHandler+0xe30>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d027      	beq.n	8008376 <HAL_DMA_IRQHandler+0xdaa>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a35      	ldr	r2, [pc, #212]	; (8008400 <HAL_DMA_IRQHandler+0xe34>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d022      	beq.n	8008376 <HAL_DMA_IRQHandler+0xdaa>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a33      	ldr	r2, [pc, #204]	; (8008404 <HAL_DMA_IRQHandler+0xe38>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d01d      	beq.n	8008376 <HAL_DMA_IRQHandler+0xdaa>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a32      	ldr	r2, [pc, #200]	; (8008408 <HAL_DMA_IRQHandler+0xe3c>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d018      	beq.n	8008376 <HAL_DMA_IRQHandler+0xdaa>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a30      	ldr	r2, [pc, #192]	; (800840c <HAL_DMA_IRQHandler+0xe40>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d013      	beq.n	8008376 <HAL_DMA_IRQHandler+0xdaa>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a2f      	ldr	r2, [pc, #188]	; (8008410 <HAL_DMA_IRQHandler+0xe44>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d00e      	beq.n	8008376 <HAL_DMA_IRQHandler+0xdaa>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a2d      	ldr	r2, [pc, #180]	; (8008414 <HAL_DMA_IRQHandler+0xe48>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d009      	beq.n	8008376 <HAL_DMA_IRQHandler+0xdaa>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a2c      	ldr	r2, [pc, #176]	; (8008418 <HAL_DMA_IRQHandler+0xe4c>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d004      	beq.n	8008376 <HAL_DMA_IRQHandler+0xdaa>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a2a      	ldr	r2, [pc, #168]	; (800841c <HAL_DMA_IRQHandler+0xe50>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d108      	bne.n	8008388 <HAL_DMA_IRQHandler+0xdbc>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 021c 	bic.w	r2, r2, #28
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	e007      	b.n	8008398 <HAL_DMA_IRQHandler+0xdcc>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 020e 	bic.w	r2, r2, #14
 8008396:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800839c:	f003 031f 	and.w	r3, r3, #31
 80083a0:	2201      	movs	r2, #1
 80083a2:	409a      	lsls	r2, r3
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d009      	beq.n	80083da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	4798      	blx	r3
 80083ce:	e004      	b.n	80083da <HAL_DMA_IRQHandler+0xe0e>
          return;
 80083d0:	bf00      	nop
 80083d2:	e002      	b.n	80083da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083d4:	bf00      	nop
 80083d6:	e000      	b.n	80083da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80083da:	3728      	adds	r7, #40	; 0x28
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	40020010 	.word	0x40020010
 80083e4:	40020028 	.word	0x40020028
 80083e8:	40020040 	.word	0x40020040
 80083ec:	40020058 	.word	0x40020058
 80083f0:	40020070 	.word	0x40020070
 80083f4:	40020088 	.word	0x40020088
 80083f8:	400200a0 	.word	0x400200a0
 80083fc:	400200b8 	.word	0x400200b8
 8008400:	40020410 	.word	0x40020410
 8008404:	40020428 	.word	0x40020428
 8008408:	40020440 	.word	0x40020440
 800840c:	40020458 	.word	0x40020458
 8008410:	40020470 	.word	0x40020470
 8008414:	40020488 	.word	0x40020488
 8008418:	400204a0 	.word	0x400204a0
 800841c:	400204b8 	.word	0x400204b8

08008420 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800842e:	b2db      	uxtb	r3, r3
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008448:	4618      	mov	r0, r3
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008454:	b480      	push	{r7}
 8008456:	b087      	sub	sp, #28
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
 8008460:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008466:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800846c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a84      	ldr	r2, [pc, #528]	; (8008684 <DMA_SetConfig+0x230>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d072      	beq.n	800855e <DMA_SetConfig+0x10a>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a82      	ldr	r2, [pc, #520]	; (8008688 <DMA_SetConfig+0x234>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d06d      	beq.n	800855e <DMA_SetConfig+0x10a>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a81      	ldr	r2, [pc, #516]	; (800868c <DMA_SetConfig+0x238>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d068      	beq.n	800855e <DMA_SetConfig+0x10a>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a7f      	ldr	r2, [pc, #508]	; (8008690 <DMA_SetConfig+0x23c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d063      	beq.n	800855e <DMA_SetConfig+0x10a>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a7e      	ldr	r2, [pc, #504]	; (8008694 <DMA_SetConfig+0x240>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d05e      	beq.n	800855e <DMA_SetConfig+0x10a>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a7c      	ldr	r2, [pc, #496]	; (8008698 <DMA_SetConfig+0x244>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d059      	beq.n	800855e <DMA_SetConfig+0x10a>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a7b      	ldr	r2, [pc, #492]	; (800869c <DMA_SetConfig+0x248>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d054      	beq.n	800855e <DMA_SetConfig+0x10a>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a79      	ldr	r2, [pc, #484]	; (80086a0 <DMA_SetConfig+0x24c>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d04f      	beq.n	800855e <DMA_SetConfig+0x10a>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a78      	ldr	r2, [pc, #480]	; (80086a4 <DMA_SetConfig+0x250>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d04a      	beq.n	800855e <DMA_SetConfig+0x10a>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a76      	ldr	r2, [pc, #472]	; (80086a8 <DMA_SetConfig+0x254>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d045      	beq.n	800855e <DMA_SetConfig+0x10a>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a75      	ldr	r2, [pc, #468]	; (80086ac <DMA_SetConfig+0x258>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d040      	beq.n	800855e <DMA_SetConfig+0x10a>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a73      	ldr	r2, [pc, #460]	; (80086b0 <DMA_SetConfig+0x25c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d03b      	beq.n	800855e <DMA_SetConfig+0x10a>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a72      	ldr	r2, [pc, #456]	; (80086b4 <DMA_SetConfig+0x260>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d036      	beq.n	800855e <DMA_SetConfig+0x10a>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a70      	ldr	r2, [pc, #448]	; (80086b8 <DMA_SetConfig+0x264>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d031      	beq.n	800855e <DMA_SetConfig+0x10a>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a6f      	ldr	r2, [pc, #444]	; (80086bc <DMA_SetConfig+0x268>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d02c      	beq.n	800855e <DMA_SetConfig+0x10a>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a6d      	ldr	r2, [pc, #436]	; (80086c0 <DMA_SetConfig+0x26c>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d027      	beq.n	800855e <DMA_SetConfig+0x10a>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a6c      	ldr	r2, [pc, #432]	; (80086c4 <DMA_SetConfig+0x270>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d022      	beq.n	800855e <DMA_SetConfig+0x10a>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a6a      	ldr	r2, [pc, #424]	; (80086c8 <DMA_SetConfig+0x274>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d01d      	beq.n	800855e <DMA_SetConfig+0x10a>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a69      	ldr	r2, [pc, #420]	; (80086cc <DMA_SetConfig+0x278>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d018      	beq.n	800855e <DMA_SetConfig+0x10a>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a67      	ldr	r2, [pc, #412]	; (80086d0 <DMA_SetConfig+0x27c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d013      	beq.n	800855e <DMA_SetConfig+0x10a>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a66      	ldr	r2, [pc, #408]	; (80086d4 <DMA_SetConfig+0x280>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d00e      	beq.n	800855e <DMA_SetConfig+0x10a>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a64      	ldr	r2, [pc, #400]	; (80086d8 <DMA_SetConfig+0x284>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d009      	beq.n	800855e <DMA_SetConfig+0x10a>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a63      	ldr	r2, [pc, #396]	; (80086dc <DMA_SetConfig+0x288>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d004      	beq.n	800855e <DMA_SetConfig+0x10a>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a61      	ldr	r2, [pc, #388]	; (80086e0 <DMA_SetConfig+0x28c>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d101      	bne.n	8008562 <DMA_SetConfig+0x10e>
 800855e:	2301      	movs	r3, #1
 8008560:	e000      	b.n	8008564 <DMA_SetConfig+0x110>
 8008562:	2300      	movs	r3, #0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00d      	beq.n	8008584 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008570:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008576:	2b00      	cmp	r3, #0
 8008578:	d004      	beq.n	8008584 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008582:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a3e      	ldr	r2, [pc, #248]	; (8008684 <DMA_SetConfig+0x230>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d04a      	beq.n	8008624 <DMA_SetConfig+0x1d0>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a3d      	ldr	r2, [pc, #244]	; (8008688 <DMA_SetConfig+0x234>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d045      	beq.n	8008624 <DMA_SetConfig+0x1d0>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a3b      	ldr	r2, [pc, #236]	; (800868c <DMA_SetConfig+0x238>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d040      	beq.n	8008624 <DMA_SetConfig+0x1d0>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a3a      	ldr	r2, [pc, #232]	; (8008690 <DMA_SetConfig+0x23c>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d03b      	beq.n	8008624 <DMA_SetConfig+0x1d0>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a38      	ldr	r2, [pc, #224]	; (8008694 <DMA_SetConfig+0x240>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d036      	beq.n	8008624 <DMA_SetConfig+0x1d0>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a37      	ldr	r2, [pc, #220]	; (8008698 <DMA_SetConfig+0x244>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d031      	beq.n	8008624 <DMA_SetConfig+0x1d0>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a35      	ldr	r2, [pc, #212]	; (800869c <DMA_SetConfig+0x248>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d02c      	beq.n	8008624 <DMA_SetConfig+0x1d0>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a34      	ldr	r2, [pc, #208]	; (80086a0 <DMA_SetConfig+0x24c>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d027      	beq.n	8008624 <DMA_SetConfig+0x1d0>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a32      	ldr	r2, [pc, #200]	; (80086a4 <DMA_SetConfig+0x250>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d022      	beq.n	8008624 <DMA_SetConfig+0x1d0>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a31      	ldr	r2, [pc, #196]	; (80086a8 <DMA_SetConfig+0x254>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d01d      	beq.n	8008624 <DMA_SetConfig+0x1d0>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a2f      	ldr	r2, [pc, #188]	; (80086ac <DMA_SetConfig+0x258>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d018      	beq.n	8008624 <DMA_SetConfig+0x1d0>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a2e      	ldr	r2, [pc, #184]	; (80086b0 <DMA_SetConfig+0x25c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d013      	beq.n	8008624 <DMA_SetConfig+0x1d0>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a2c      	ldr	r2, [pc, #176]	; (80086b4 <DMA_SetConfig+0x260>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d00e      	beq.n	8008624 <DMA_SetConfig+0x1d0>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a2b      	ldr	r2, [pc, #172]	; (80086b8 <DMA_SetConfig+0x264>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d009      	beq.n	8008624 <DMA_SetConfig+0x1d0>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a29      	ldr	r2, [pc, #164]	; (80086bc <DMA_SetConfig+0x268>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d004      	beq.n	8008624 <DMA_SetConfig+0x1d0>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a28      	ldr	r2, [pc, #160]	; (80086c0 <DMA_SetConfig+0x26c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d101      	bne.n	8008628 <DMA_SetConfig+0x1d4>
 8008624:	2301      	movs	r3, #1
 8008626:	e000      	b.n	800862a <DMA_SetConfig+0x1d6>
 8008628:	2300      	movs	r3, #0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d05a      	beq.n	80086e4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008632:	f003 031f 	and.w	r3, r3, #31
 8008636:	223f      	movs	r2, #63	; 0x3f
 8008638:	409a      	lsls	r2, r3
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800864c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	2b40      	cmp	r3, #64	; 0x40
 800865c:	d108      	bne.n	8008670 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800866e:	e087      	b.n	8008780 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	60da      	str	r2, [r3, #12]
}
 8008680:	e07e      	b.n	8008780 <DMA_SetConfig+0x32c>
 8008682:	bf00      	nop
 8008684:	40020010 	.word	0x40020010
 8008688:	40020028 	.word	0x40020028
 800868c:	40020040 	.word	0x40020040
 8008690:	40020058 	.word	0x40020058
 8008694:	40020070 	.word	0x40020070
 8008698:	40020088 	.word	0x40020088
 800869c:	400200a0 	.word	0x400200a0
 80086a0:	400200b8 	.word	0x400200b8
 80086a4:	40020410 	.word	0x40020410
 80086a8:	40020428 	.word	0x40020428
 80086ac:	40020440 	.word	0x40020440
 80086b0:	40020458 	.word	0x40020458
 80086b4:	40020470 	.word	0x40020470
 80086b8:	40020488 	.word	0x40020488
 80086bc:	400204a0 	.word	0x400204a0
 80086c0:	400204b8 	.word	0x400204b8
 80086c4:	58025408 	.word	0x58025408
 80086c8:	5802541c 	.word	0x5802541c
 80086cc:	58025430 	.word	0x58025430
 80086d0:	58025444 	.word	0x58025444
 80086d4:	58025458 	.word	0x58025458
 80086d8:	5802546c 	.word	0x5802546c
 80086dc:	58025480 	.word	0x58025480
 80086e0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a28      	ldr	r2, [pc, #160]	; (800878c <DMA_SetConfig+0x338>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d022      	beq.n	8008734 <DMA_SetConfig+0x2e0>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a27      	ldr	r2, [pc, #156]	; (8008790 <DMA_SetConfig+0x33c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d01d      	beq.n	8008734 <DMA_SetConfig+0x2e0>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a25      	ldr	r2, [pc, #148]	; (8008794 <DMA_SetConfig+0x340>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d018      	beq.n	8008734 <DMA_SetConfig+0x2e0>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a24      	ldr	r2, [pc, #144]	; (8008798 <DMA_SetConfig+0x344>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d013      	beq.n	8008734 <DMA_SetConfig+0x2e0>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a22      	ldr	r2, [pc, #136]	; (800879c <DMA_SetConfig+0x348>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d00e      	beq.n	8008734 <DMA_SetConfig+0x2e0>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a21      	ldr	r2, [pc, #132]	; (80087a0 <DMA_SetConfig+0x34c>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d009      	beq.n	8008734 <DMA_SetConfig+0x2e0>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a1f      	ldr	r2, [pc, #124]	; (80087a4 <DMA_SetConfig+0x350>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d004      	beq.n	8008734 <DMA_SetConfig+0x2e0>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a1e      	ldr	r2, [pc, #120]	; (80087a8 <DMA_SetConfig+0x354>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d101      	bne.n	8008738 <DMA_SetConfig+0x2e4>
 8008734:	2301      	movs	r3, #1
 8008736:	e000      	b.n	800873a <DMA_SetConfig+0x2e6>
 8008738:	2300      	movs	r3, #0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d020      	beq.n	8008780 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008742:	f003 031f 	and.w	r3, r3, #31
 8008746:	2201      	movs	r2, #1
 8008748:	409a      	lsls	r2, r3
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	2b40      	cmp	r3, #64	; 0x40
 800875c:	d108      	bne.n	8008770 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	60da      	str	r2, [r3, #12]
}
 800876e:	e007      	b.n	8008780 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	60da      	str	r2, [r3, #12]
}
 8008780:	bf00      	nop
 8008782:	371c      	adds	r7, #28
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	58025408 	.word	0x58025408
 8008790:	5802541c 	.word	0x5802541c
 8008794:	58025430 	.word	0x58025430
 8008798:	58025444 	.word	0x58025444
 800879c:	58025458 	.word	0x58025458
 80087a0:	5802546c 	.word	0x5802546c
 80087a4:	58025480 	.word	0x58025480
 80087a8:	58025494 	.word	0x58025494

080087ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a42      	ldr	r2, [pc, #264]	; (80088c4 <DMA_CalcBaseAndBitshift+0x118>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d04a      	beq.n	8008854 <DMA_CalcBaseAndBitshift+0xa8>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a41      	ldr	r2, [pc, #260]	; (80088c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d045      	beq.n	8008854 <DMA_CalcBaseAndBitshift+0xa8>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a3f      	ldr	r2, [pc, #252]	; (80088cc <DMA_CalcBaseAndBitshift+0x120>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d040      	beq.n	8008854 <DMA_CalcBaseAndBitshift+0xa8>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a3e      	ldr	r2, [pc, #248]	; (80088d0 <DMA_CalcBaseAndBitshift+0x124>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d03b      	beq.n	8008854 <DMA_CalcBaseAndBitshift+0xa8>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a3c      	ldr	r2, [pc, #240]	; (80088d4 <DMA_CalcBaseAndBitshift+0x128>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d036      	beq.n	8008854 <DMA_CalcBaseAndBitshift+0xa8>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a3b      	ldr	r2, [pc, #236]	; (80088d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d031      	beq.n	8008854 <DMA_CalcBaseAndBitshift+0xa8>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a39      	ldr	r2, [pc, #228]	; (80088dc <DMA_CalcBaseAndBitshift+0x130>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d02c      	beq.n	8008854 <DMA_CalcBaseAndBitshift+0xa8>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a38      	ldr	r2, [pc, #224]	; (80088e0 <DMA_CalcBaseAndBitshift+0x134>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d027      	beq.n	8008854 <DMA_CalcBaseAndBitshift+0xa8>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a36      	ldr	r2, [pc, #216]	; (80088e4 <DMA_CalcBaseAndBitshift+0x138>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d022      	beq.n	8008854 <DMA_CalcBaseAndBitshift+0xa8>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a35      	ldr	r2, [pc, #212]	; (80088e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d01d      	beq.n	8008854 <DMA_CalcBaseAndBitshift+0xa8>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a33      	ldr	r2, [pc, #204]	; (80088ec <DMA_CalcBaseAndBitshift+0x140>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d018      	beq.n	8008854 <DMA_CalcBaseAndBitshift+0xa8>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a32      	ldr	r2, [pc, #200]	; (80088f0 <DMA_CalcBaseAndBitshift+0x144>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d013      	beq.n	8008854 <DMA_CalcBaseAndBitshift+0xa8>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a30      	ldr	r2, [pc, #192]	; (80088f4 <DMA_CalcBaseAndBitshift+0x148>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d00e      	beq.n	8008854 <DMA_CalcBaseAndBitshift+0xa8>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a2f      	ldr	r2, [pc, #188]	; (80088f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d009      	beq.n	8008854 <DMA_CalcBaseAndBitshift+0xa8>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a2d      	ldr	r2, [pc, #180]	; (80088fc <DMA_CalcBaseAndBitshift+0x150>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d004      	beq.n	8008854 <DMA_CalcBaseAndBitshift+0xa8>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a2c      	ldr	r2, [pc, #176]	; (8008900 <DMA_CalcBaseAndBitshift+0x154>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d101      	bne.n	8008858 <DMA_CalcBaseAndBitshift+0xac>
 8008854:	2301      	movs	r3, #1
 8008856:	e000      	b.n	800885a <DMA_CalcBaseAndBitshift+0xae>
 8008858:	2300      	movs	r3, #0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d024      	beq.n	80088a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	b2db      	uxtb	r3, r3
 8008864:	3b10      	subs	r3, #16
 8008866:	4a27      	ldr	r2, [pc, #156]	; (8008904 <DMA_CalcBaseAndBitshift+0x158>)
 8008868:	fba2 2303 	umull	r2, r3, r2, r3
 800886c:	091b      	lsrs	r3, r3, #4
 800886e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f003 0307 	and.w	r3, r3, #7
 8008876:	4a24      	ldr	r2, [pc, #144]	; (8008908 <DMA_CalcBaseAndBitshift+0x15c>)
 8008878:	5cd3      	ldrb	r3, [r2, r3]
 800887a:	461a      	mov	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2b03      	cmp	r3, #3
 8008884:	d908      	bls.n	8008898 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	4b1f      	ldr	r3, [pc, #124]	; (800890c <DMA_CalcBaseAndBitshift+0x160>)
 800888e:	4013      	ands	r3, r2
 8008890:	1d1a      	adds	r2, r3, #4
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	659a      	str	r2, [r3, #88]	; 0x58
 8008896:	e00d      	b.n	80088b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	461a      	mov	r2, r3
 800889e:	4b1b      	ldr	r3, [pc, #108]	; (800890c <DMA_CalcBaseAndBitshift+0x160>)
 80088a0:	4013      	ands	r3, r2
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	6593      	str	r3, [r2, #88]	; 0x58
 80088a6:	e005      	b.n	80088b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	40020010 	.word	0x40020010
 80088c8:	40020028 	.word	0x40020028
 80088cc:	40020040 	.word	0x40020040
 80088d0:	40020058 	.word	0x40020058
 80088d4:	40020070 	.word	0x40020070
 80088d8:	40020088 	.word	0x40020088
 80088dc:	400200a0 	.word	0x400200a0
 80088e0:	400200b8 	.word	0x400200b8
 80088e4:	40020410 	.word	0x40020410
 80088e8:	40020428 	.word	0x40020428
 80088ec:	40020440 	.word	0x40020440
 80088f0:	40020458 	.word	0x40020458
 80088f4:	40020470 	.word	0x40020470
 80088f8:	40020488 	.word	0x40020488
 80088fc:	400204a0 	.word	0x400204a0
 8008900:	400204b8 	.word	0x400204b8
 8008904:	aaaaaaab 	.word	0xaaaaaaab
 8008908:	080150fc 	.word	0x080150fc
 800890c:	fffffc00 	.word	0xfffffc00

08008910 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d120      	bne.n	8008966 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008928:	2b03      	cmp	r3, #3
 800892a:	d858      	bhi.n	80089de <DMA_CheckFifoParam+0xce>
 800892c:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <DMA_CheckFifoParam+0x24>)
 800892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008932:	bf00      	nop
 8008934:	08008945 	.word	0x08008945
 8008938:	08008957 	.word	0x08008957
 800893c:	08008945 	.word	0x08008945
 8008940:	080089df 	.word	0x080089df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d048      	beq.n	80089e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008954:	e045      	b.n	80089e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800895e:	d142      	bne.n	80089e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008964:	e03f      	b.n	80089e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800896e:	d123      	bne.n	80089b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008974:	2b03      	cmp	r3, #3
 8008976:	d838      	bhi.n	80089ea <DMA_CheckFifoParam+0xda>
 8008978:	a201      	add	r2, pc, #4	; (adr r2, 8008980 <DMA_CheckFifoParam+0x70>)
 800897a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897e:	bf00      	nop
 8008980:	08008991 	.word	0x08008991
 8008984:	08008997 	.word	0x08008997
 8008988:	08008991 	.word	0x08008991
 800898c:	080089a9 	.word	0x080089a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	73fb      	strb	r3, [r7, #15]
        break;
 8008994:	e030      	b.n	80089f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d025      	beq.n	80089ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80089a6:	e022      	b.n	80089ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80089b0:	d11f      	bne.n	80089f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80089b6:	e01c      	b.n	80089f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d902      	bls.n	80089c6 <DMA_CheckFifoParam+0xb6>
 80089c0:	2b03      	cmp	r3, #3
 80089c2:	d003      	beq.n	80089cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80089c4:	e018      	b.n	80089f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	73fb      	strb	r3, [r7, #15]
        break;
 80089ca:	e015      	b.n	80089f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00e      	beq.n	80089f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	73fb      	strb	r3, [r7, #15]
    break;
 80089dc:	e00b      	b.n	80089f6 <DMA_CheckFifoParam+0xe6>
        break;
 80089de:	bf00      	nop
 80089e0:	e00a      	b.n	80089f8 <DMA_CheckFifoParam+0xe8>
        break;
 80089e2:	bf00      	nop
 80089e4:	e008      	b.n	80089f8 <DMA_CheckFifoParam+0xe8>
        break;
 80089e6:	bf00      	nop
 80089e8:	e006      	b.n	80089f8 <DMA_CheckFifoParam+0xe8>
        break;
 80089ea:	bf00      	nop
 80089ec:	e004      	b.n	80089f8 <DMA_CheckFifoParam+0xe8>
        break;
 80089ee:	bf00      	nop
 80089f0:	e002      	b.n	80089f8 <DMA_CheckFifoParam+0xe8>
        break;
 80089f2:	bf00      	nop
 80089f4:	e000      	b.n	80089f8 <DMA_CheckFifoParam+0xe8>
    break;
 80089f6:	bf00      	nop
    }
  }

  return status;
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop

08008a08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a38      	ldr	r2, [pc, #224]	; (8008afc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d022      	beq.n	8008a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a36      	ldr	r2, [pc, #216]	; (8008b00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d01d      	beq.n	8008a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a35      	ldr	r2, [pc, #212]	; (8008b04 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d018      	beq.n	8008a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a33      	ldr	r2, [pc, #204]	; (8008b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d013      	beq.n	8008a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a32      	ldr	r2, [pc, #200]	; (8008b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d00e      	beq.n	8008a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a30      	ldr	r2, [pc, #192]	; (8008b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d009      	beq.n	8008a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a2f      	ldr	r2, [pc, #188]	; (8008b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d004      	beq.n	8008a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a2d      	ldr	r2, [pc, #180]	; (8008b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d101      	bne.n	8008a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008a66:	2301      	movs	r3, #1
 8008a68:	e000      	b.n	8008a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d01a      	beq.n	8008aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	3b08      	subs	r3, #8
 8008a78:	4a28      	ldr	r2, [pc, #160]	; (8008b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a7e:	091b      	lsrs	r3, r3, #4
 8008a80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	4b26      	ldr	r3, [pc, #152]	; (8008b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a24      	ldr	r2, [pc, #144]	; (8008b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008a94:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f003 031f 	and.w	r3, r3, #31
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	409a      	lsls	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008aa4:	e024      	b.n	8008af0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	3b10      	subs	r3, #16
 8008aae:	4a1e      	ldr	r2, [pc, #120]	; (8008b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab4:	091b      	lsrs	r3, r3, #4
 8008ab6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	4a1c      	ldr	r2, [pc, #112]	; (8008b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d806      	bhi.n	8008ace <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	4a1b      	ldr	r2, [pc, #108]	; (8008b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d902      	bls.n	8008ace <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3308      	adds	r3, #8
 8008acc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	4b18      	ldr	r3, [pc, #96]	; (8008b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a16      	ldr	r2, [pc, #88]	; (8008b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008ae0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f003 031f 	and.w	r3, r3, #31
 8008ae8:	2201      	movs	r2, #1
 8008aea:	409a      	lsls	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008af0:	bf00      	nop
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	58025408 	.word	0x58025408
 8008b00:	5802541c 	.word	0x5802541c
 8008b04:	58025430 	.word	0x58025430
 8008b08:	58025444 	.word	0x58025444
 8008b0c:	58025458 	.word	0x58025458
 8008b10:	5802546c 	.word	0x5802546c
 8008b14:	58025480 	.word	0x58025480
 8008b18:	58025494 	.word	0x58025494
 8008b1c:	cccccccd 	.word	0xcccccccd
 8008b20:	16009600 	.word	0x16009600
 8008b24:	58025880 	.word	0x58025880
 8008b28:	aaaaaaab 	.word	0xaaaaaaab
 8008b2c:	400204b8 	.word	0x400204b8
 8008b30:	4002040f 	.word	0x4002040f
 8008b34:	10008200 	.word	0x10008200
 8008b38:	40020880 	.word	0x40020880

08008b3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d04a      	beq.n	8008be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b08      	cmp	r3, #8
 8008b56:	d847      	bhi.n	8008be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a25      	ldr	r2, [pc, #148]	; (8008bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d022      	beq.n	8008ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a24      	ldr	r2, [pc, #144]	; (8008bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d01d      	beq.n	8008ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a22      	ldr	r2, [pc, #136]	; (8008bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d018      	beq.n	8008ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a21      	ldr	r2, [pc, #132]	; (8008c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d013      	beq.n	8008ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a1f      	ldr	r2, [pc, #124]	; (8008c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d00e      	beq.n	8008ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a1e      	ldr	r2, [pc, #120]	; (8008c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d009      	beq.n	8008ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a1c      	ldr	r2, [pc, #112]	; (8008c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d004      	beq.n	8008ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a1b      	ldr	r2, [pc, #108]	; (8008c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d101      	bne.n	8008bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e000      	b.n	8008bae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008bac:	2300      	movs	r3, #0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	4b17      	ldr	r3, [pc, #92]	; (8008c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008bb6:	4413      	add	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	461a      	mov	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a15      	ldr	r2, [pc, #84]	; (8008c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008bc4:	671a      	str	r2, [r3, #112]	; 0x70
 8008bc6:	e009      	b.n	8008bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	4b14      	ldr	r3, [pc, #80]	; (8008c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a11      	ldr	r2, [pc, #68]	; (8008c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008bda:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3b01      	subs	r3, #1
 8008be0:	2201      	movs	r2, #1
 8008be2:	409a      	lsls	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008be8:	bf00      	nop
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	58025408 	.word	0x58025408
 8008bf8:	5802541c 	.word	0x5802541c
 8008bfc:	58025430 	.word	0x58025430
 8008c00:	58025444 	.word	0x58025444
 8008c04:	58025458 	.word	0x58025458
 8008c08:	5802546c 	.word	0x5802546c
 8008c0c:	58025480 	.word	0x58025480
 8008c10:	58025494 	.word	0x58025494
 8008c14:	1600963f 	.word	0x1600963f
 8008c18:	58025940 	.word	0x58025940
 8008c1c:	1000823f 	.word	0x1000823f
 8008c20:	40020940 	.word	0x40020940

08008c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b089      	sub	sp, #36	; 0x24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c32:	4b89      	ldr	r3, [pc, #548]	; (8008e58 <HAL_GPIO_Init+0x234>)
 8008c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c36:	e194      	b.n	8008f62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	fa01 f303 	lsl.w	r3, r1, r3
 8008c44:	4013      	ands	r3, r2
 8008c46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f000 8186 	beq.w	8008f5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d00b      	beq.n	8008c70 <HAL_GPIO_Init+0x4c>
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d007      	beq.n	8008c70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c64:	2b11      	cmp	r3, #17
 8008c66:	d003      	beq.n	8008c70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	2b12      	cmp	r3, #18
 8008c6e:	d130      	bne.n	8008cd2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	2203      	movs	r2, #3
 8008c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c80:	43db      	mvns	r3, r3
 8008c82:	69ba      	ldr	r2, [r7, #24]
 8008c84:	4013      	ands	r3, r2
 8008c86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	005b      	lsls	r3, r3, #1
 8008c90:	fa02 f303 	lsl.w	r3, r2, r3
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	fa02 f303 	lsl.w	r3, r2, r3
 8008cae:	43db      	mvns	r3, r3
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	091b      	lsrs	r3, r3, #4
 8008cbc:	f003 0201 	and.w	r2, r3, #1
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	005b      	lsls	r3, r3, #1
 8008cdc:	2203      	movs	r2, #3
 8008cde:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce2:	43db      	mvns	r3, r3
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	689a      	ldr	r2, [r3, #8]
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	005b      	lsls	r3, r3, #1
 8008cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d003      	beq.n	8008d12 <HAL_GPIO_Init+0xee>
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	2b12      	cmp	r3, #18
 8008d10:	d123      	bne.n	8008d5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	08da      	lsrs	r2, r3, #3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3208      	adds	r2, #8
 8008d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	f003 0307 	and.w	r3, r3, #7
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	220f      	movs	r2, #15
 8008d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2e:	43db      	mvns	r3, r3
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	4013      	ands	r3, r2
 8008d34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	691a      	ldr	r2, [r3, #16]
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	f003 0307 	and.w	r3, r3, #7
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	fa02 f303 	lsl.w	r3, r2, r3
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	08da      	lsrs	r2, r3, #3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	3208      	adds	r2, #8
 8008d54:	69b9      	ldr	r1, [r7, #24]
 8008d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	005b      	lsls	r3, r3, #1
 8008d64:	2203      	movs	r2, #3
 8008d66:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6a:	43db      	mvns	r3, r3
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	4013      	ands	r3, r2
 8008d70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f003 0203 	and.w	r2, r3, #3
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	005b      	lsls	r3, r3, #1
 8008d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d82:	69ba      	ldr	r2, [r7, #24]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	69ba      	ldr	r2, [r7, #24]
 8008d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 80e0 	beq.w	8008f5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d9c:	4b2f      	ldr	r3, [pc, #188]	; (8008e5c <HAL_GPIO_Init+0x238>)
 8008d9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008da2:	4a2e      	ldr	r2, [pc, #184]	; (8008e5c <HAL_GPIO_Init+0x238>)
 8008da4:	f043 0302 	orr.w	r3, r3, #2
 8008da8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008dac:	4b2b      	ldr	r3, [pc, #172]	; (8008e5c <HAL_GPIO_Init+0x238>)
 8008dae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008dba:	4a29      	ldr	r2, [pc, #164]	; (8008e60 <HAL_GPIO_Init+0x23c>)
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	089b      	lsrs	r3, r3, #2
 8008dc0:	3302      	adds	r3, #2
 8008dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	f003 0303 	and.w	r3, r3, #3
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	220f      	movs	r2, #15
 8008dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd6:	43db      	mvns	r3, r3
 8008dd8:	69ba      	ldr	r2, [r7, #24]
 8008dda:	4013      	ands	r3, r2
 8008ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a20      	ldr	r2, [pc, #128]	; (8008e64 <HAL_GPIO_Init+0x240>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d052      	beq.n	8008e8c <HAL_GPIO_Init+0x268>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a1f      	ldr	r2, [pc, #124]	; (8008e68 <HAL_GPIO_Init+0x244>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d031      	beq.n	8008e52 <HAL_GPIO_Init+0x22e>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a1e      	ldr	r2, [pc, #120]	; (8008e6c <HAL_GPIO_Init+0x248>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d02b      	beq.n	8008e4e <HAL_GPIO_Init+0x22a>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a1d      	ldr	r2, [pc, #116]	; (8008e70 <HAL_GPIO_Init+0x24c>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d025      	beq.n	8008e4a <HAL_GPIO_Init+0x226>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a1c      	ldr	r2, [pc, #112]	; (8008e74 <HAL_GPIO_Init+0x250>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d01f      	beq.n	8008e46 <HAL_GPIO_Init+0x222>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a1b      	ldr	r2, [pc, #108]	; (8008e78 <HAL_GPIO_Init+0x254>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d019      	beq.n	8008e42 <HAL_GPIO_Init+0x21e>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a1a      	ldr	r2, [pc, #104]	; (8008e7c <HAL_GPIO_Init+0x258>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d013      	beq.n	8008e3e <HAL_GPIO_Init+0x21a>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a19      	ldr	r2, [pc, #100]	; (8008e80 <HAL_GPIO_Init+0x25c>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d00d      	beq.n	8008e3a <HAL_GPIO_Init+0x216>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a18      	ldr	r2, [pc, #96]	; (8008e84 <HAL_GPIO_Init+0x260>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d007      	beq.n	8008e36 <HAL_GPIO_Init+0x212>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a17      	ldr	r2, [pc, #92]	; (8008e88 <HAL_GPIO_Init+0x264>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d101      	bne.n	8008e32 <HAL_GPIO_Init+0x20e>
 8008e2e:	2309      	movs	r3, #9
 8008e30:	e02d      	b.n	8008e8e <HAL_GPIO_Init+0x26a>
 8008e32:	230a      	movs	r3, #10
 8008e34:	e02b      	b.n	8008e8e <HAL_GPIO_Init+0x26a>
 8008e36:	2308      	movs	r3, #8
 8008e38:	e029      	b.n	8008e8e <HAL_GPIO_Init+0x26a>
 8008e3a:	2307      	movs	r3, #7
 8008e3c:	e027      	b.n	8008e8e <HAL_GPIO_Init+0x26a>
 8008e3e:	2306      	movs	r3, #6
 8008e40:	e025      	b.n	8008e8e <HAL_GPIO_Init+0x26a>
 8008e42:	2305      	movs	r3, #5
 8008e44:	e023      	b.n	8008e8e <HAL_GPIO_Init+0x26a>
 8008e46:	2304      	movs	r3, #4
 8008e48:	e021      	b.n	8008e8e <HAL_GPIO_Init+0x26a>
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e01f      	b.n	8008e8e <HAL_GPIO_Init+0x26a>
 8008e4e:	2302      	movs	r3, #2
 8008e50:	e01d      	b.n	8008e8e <HAL_GPIO_Init+0x26a>
 8008e52:	2301      	movs	r3, #1
 8008e54:	e01b      	b.n	8008e8e <HAL_GPIO_Init+0x26a>
 8008e56:	bf00      	nop
 8008e58:	58000080 	.word	0x58000080
 8008e5c:	58024400 	.word	0x58024400
 8008e60:	58000400 	.word	0x58000400
 8008e64:	58020000 	.word	0x58020000
 8008e68:	58020400 	.word	0x58020400
 8008e6c:	58020800 	.word	0x58020800
 8008e70:	58020c00 	.word	0x58020c00
 8008e74:	58021000 	.word	0x58021000
 8008e78:	58021400 	.word	0x58021400
 8008e7c:	58021800 	.word	0x58021800
 8008e80:	58021c00 	.word	0x58021c00
 8008e84:	58022000 	.word	0x58022000
 8008e88:	58022400 	.word	0x58022400
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	69fa      	ldr	r2, [r7, #28]
 8008e90:	f002 0203 	and.w	r2, r2, #3
 8008e94:	0092      	lsls	r2, r2, #2
 8008e96:	4093      	lsls	r3, r2
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e9e:	4938      	ldr	r1, [pc, #224]	; (8008f80 <HAL_GPIO_Init+0x35c>)
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	089b      	lsrs	r3, r3, #2
 8008ea4:	3302      	adds	r3, #2
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	43db      	mvns	r3, r3
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	4013      	ands	r3, r2
 8008eba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d003      	beq.n	8008ed0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	69ba      	ldr	r2, [r7, #24]
 8008ed4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	43db      	mvns	r3, r3
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d003      	beq.n	8008efa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008ef2:	69ba      	ldr	r2, [r7, #24]
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	43db      	mvns	r3, r3
 8008f0c:	69ba      	ldr	r2, [r7, #24]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	43db      	mvns	r3, r3
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f47f ae63 	bne.w	8008c38 <HAL_GPIO_Init+0x14>
  }
}
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
 8008f76:	3724      	adds	r7, #36	; 0x24
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	58000400 	.word	0x58000400

08008f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	807b      	strh	r3, [r7, #2]
 8008f90:	4613      	mov	r3, r2
 8008f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f94:	787b      	ldrb	r3, [r7, #1]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f9a:	887a      	ldrh	r2, [r7, #2]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008fa0:	e003      	b.n	8008faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008fa2:	887b      	ldrh	r3, [r7, #2]
 8008fa4:	041a      	lsls	r2, r3, #16
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	619a      	str	r2, [r3, #24]
}
 8008faa:	bf00      	nop
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
	...

08008fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e07f      	b.n	80090ca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d106      	bne.n	8008fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f7fb fab6 	bl	8004550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2224      	movs	r2, #36	; 0x24
 8008fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0201 	bic.w	r2, r2, #1
 8008ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685a      	ldr	r2, [r3, #4]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009008:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	689a      	ldr	r2, [r3, #8]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009018:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d107      	bne.n	8009032 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	689a      	ldr	r2, [r3, #8]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800902e:	609a      	str	r2, [r3, #8]
 8009030:	e006      	b.n	8009040 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	689a      	ldr	r2, [r3, #8]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800903e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	2b02      	cmp	r3, #2
 8009046:	d104      	bne.n	8009052 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009050:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6859      	ldr	r1, [r3, #4]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	4b1d      	ldr	r3, [pc, #116]	; (80090d4 <HAL_I2C_Init+0x11c>)
 800905e:	430b      	orrs	r3, r1
 8009060:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68da      	ldr	r2, [r3, #12]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009070:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	691a      	ldr	r2, [r3, #16]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	ea42 0103 	orr.w	r1, r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	021a      	lsls	r2, r3, #8
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	430a      	orrs	r2, r1
 800908a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	69d9      	ldr	r1, [r3, #28]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a1a      	ldr	r2, [r3, #32]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	430a      	orrs	r2, r1
 800909a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f042 0201 	orr.w	r2, r2, #1
 80090aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2220      	movs	r2, #32
 80090b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	02008000 	.word	0x02008000

080090d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af02      	add	r7, sp, #8
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	4608      	mov	r0, r1
 80090e2:	4611      	mov	r1, r2
 80090e4:	461a      	mov	r2, r3
 80090e6:	4603      	mov	r3, r0
 80090e8:	817b      	strh	r3, [r7, #10]
 80090ea:	460b      	mov	r3, r1
 80090ec:	813b      	strh	r3, [r7, #8]
 80090ee:	4613      	mov	r3, r2
 80090f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b20      	cmp	r3, #32
 80090fc:	f040 80f9 	bne.w	80092f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <HAL_I2C_Mem_Write+0x34>
 8009106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009108:	2b00      	cmp	r3, #0
 800910a:	d105      	bne.n	8009118 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009112:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e0ed      	b.n	80092f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800911e:	2b01      	cmp	r3, #1
 8009120:	d101      	bne.n	8009126 <HAL_I2C_Mem_Write+0x4e>
 8009122:	2302      	movs	r3, #2
 8009124:	e0e6      	b.n	80092f4 <HAL_I2C_Mem_Write+0x21c>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800912e:	f7fc fdd9 	bl	8005ce4 <HAL_GetTick>
 8009132:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	2319      	movs	r3, #25
 800913a:	2201      	movs	r2, #1
 800913c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f001 fee3 	bl	800af0c <I2C_WaitOnFlagUntilTimeout>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e0d1      	b.n	80092f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2221      	movs	r2, #33	; 0x21
 8009154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2240      	movs	r2, #64	; 0x40
 800915c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6a3a      	ldr	r2, [r7, #32]
 800916a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009170:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009178:	88f8      	ldrh	r0, [r7, #6]
 800917a:	893a      	ldrh	r2, [r7, #8]
 800917c:	8979      	ldrh	r1, [r7, #10]
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	4603      	mov	r3, r0
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f000 ff23 	bl	8009fd4 <I2C_RequestMemoryWrite>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d005      	beq.n	80091a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e0a9      	b.n	80092f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	2bff      	cmp	r3, #255	; 0xff
 80091a8:	d90e      	bls.n	80091c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	22ff      	movs	r2, #255	; 0xff
 80091ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091b4:	b2da      	uxtb	r2, r3
 80091b6:	8979      	ldrh	r1, [r7, #10]
 80091b8:	2300      	movs	r3, #0
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f001 ffc5 	bl	800b150 <I2C_TransferConfig>
 80091c6:	e00f      	b.n	80091e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	8979      	ldrh	r1, [r7, #10]
 80091da:	2300      	movs	r3, #0
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f001 ffb4 	bl	800b150 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f001 fecd 	bl	800af8c <I2C_WaitOnTXISFlagUntilTimeout>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e07b      	b.n	80092f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	781a      	ldrb	r2, [r3, #0]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920c:	1c5a      	adds	r2, r3, #1
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009216:	b29b      	uxth	r3, r3
 8009218:	3b01      	subs	r3, #1
 800921a:	b29a      	uxth	r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009224:	3b01      	subs	r3, #1
 8009226:	b29a      	uxth	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009230:	b29b      	uxth	r3, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	d034      	beq.n	80092a0 <HAL_I2C_Mem_Write+0x1c8>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800923a:	2b00      	cmp	r3, #0
 800923c:	d130      	bne.n	80092a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009244:	2200      	movs	r2, #0
 8009246:	2180      	movs	r1, #128	; 0x80
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f001 fe5f 	bl	800af0c <I2C_WaitOnFlagUntilTimeout>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d001      	beq.n	8009258 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e04d      	b.n	80092f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800925c:	b29b      	uxth	r3, r3
 800925e:	2bff      	cmp	r3, #255	; 0xff
 8009260:	d90e      	bls.n	8009280 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	22ff      	movs	r2, #255	; 0xff
 8009266:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800926c:	b2da      	uxtb	r2, r3
 800926e:	8979      	ldrh	r1, [r7, #10]
 8009270:	2300      	movs	r3, #0
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f001 ff69 	bl	800b150 <I2C_TransferConfig>
 800927e:	e00f      	b.n	80092a0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009284:	b29a      	uxth	r2, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800928e:	b2da      	uxtb	r2, r3
 8009290:	8979      	ldrh	r1, [r7, #10]
 8009292:	2300      	movs	r3, #0
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f001 ff58 	bl	800b150 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d19e      	bne.n	80091e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f001 feac 	bl	800b00c <I2C_WaitOnSTOPFlagUntilTimeout>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e01a      	b.n	80092f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2220      	movs	r2, #32
 80092c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	6859      	ldr	r1, [r3, #4]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <HAL_I2C_Mem_Write+0x224>)
 80092d2:	400b      	ands	r3, r1
 80092d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2220      	movs	r2, #32
 80092da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	e000      	b.n	80092f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80092f2:	2302      	movs	r3, #2
  }
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3718      	adds	r7, #24
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	fe00e800 	.word	0xfe00e800

08009300 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af02      	add	r7, sp, #8
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	4608      	mov	r0, r1
 800930a:	4611      	mov	r1, r2
 800930c:	461a      	mov	r2, r3
 800930e:	4603      	mov	r3, r0
 8009310:	817b      	strh	r3, [r7, #10]
 8009312:	460b      	mov	r3, r1
 8009314:	813b      	strh	r3, [r7, #8]
 8009316:	4613      	mov	r3, r2
 8009318:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b20      	cmp	r3, #32
 8009324:	f040 80fd 	bne.w	8009522 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d002      	beq.n	8009334 <HAL_I2C_Mem_Read+0x34>
 800932e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009330:	2b00      	cmp	r3, #0
 8009332:	d105      	bne.n	8009340 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800933a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	e0f1      	b.n	8009524 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009346:	2b01      	cmp	r3, #1
 8009348:	d101      	bne.n	800934e <HAL_I2C_Mem_Read+0x4e>
 800934a:	2302      	movs	r3, #2
 800934c:	e0ea      	b.n	8009524 <HAL_I2C_Mem_Read+0x224>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009356:	f7fc fcc5 	bl	8005ce4 <HAL_GetTick>
 800935a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	2319      	movs	r3, #25
 8009362:	2201      	movs	r2, #1
 8009364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f001 fdcf 	bl	800af0c <I2C_WaitOnFlagUntilTimeout>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e0d5      	b.n	8009524 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2222      	movs	r2, #34	; 0x22
 800937c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2240      	movs	r2, #64	; 0x40
 8009384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6a3a      	ldr	r2, [r7, #32]
 8009392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009398:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80093a0:	88f8      	ldrh	r0, [r7, #6]
 80093a2:	893a      	ldrh	r2, [r7, #8]
 80093a4:	8979      	ldrh	r1, [r7, #10]
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	9301      	str	r3, [sp, #4]
 80093aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	4603      	mov	r3, r0
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 fe63 	bl	800a07c <I2C_RequestMemoryRead>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d005      	beq.n	80093c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e0ad      	b.n	8009524 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	2bff      	cmp	r3, #255	; 0xff
 80093d0:	d90e      	bls.n	80093f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	22ff      	movs	r2, #255	; 0xff
 80093d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	8979      	ldrh	r1, [r7, #10]
 80093e0:	4b52      	ldr	r3, [pc, #328]	; (800952c <HAL_I2C_Mem_Read+0x22c>)
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f001 feb1 	bl	800b150 <I2C_TransferConfig>
 80093ee:	e00f      	b.n	8009410 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093fe:	b2da      	uxtb	r2, r3
 8009400:	8979      	ldrh	r1, [r7, #10]
 8009402:	4b4a      	ldr	r3, [pc, #296]	; (800952c <HAL_I2C_Mem_Read+0x22c>)
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f001 fea0 	bl	800b150 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009416:	2200      	movs	r2, #0
 8009418:	2104      	movs	r1, #4
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f001 fd76 	bl	800af0c <I2C_WaitOnFlagUntilTimeout>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e07c      	b.n	8009524 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009434:	b2d2      	uxtb	r2, r2
 8009436:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009446:	3b01      	subs	r3, #1
 8009448:	b29a      	uxth	r2, r3
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009452:	b29b      	uxth	r3, r3
 8009454:	3b01      	subs	r3, #1
 8009456:	b29a      	uxth	r2, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009460:	b29b      	uxth	r3, r3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d034      	beq.n	80094d0 <HAL_I2C_Mem_Read+0x1d0>
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800946a:	2b00      	cmp	r3, #0
 800946c:	d130      	bne.n	80094d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009474:	2200      	movs	r2, #0
 8009476:	2180      	movs	r1, #128	; 0x80
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f001 fd47 	bl	800af0c <I2C_WaitOnFlagUntilTimeout>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d001      	beq.n	8009488 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e04d      	b.n	8009524 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800948c:	b29b      	uxth	r3, r3
 800948e:	2bff      	cmp	r3, #255	; 0xff
 8009490:	d90e      	bls.n	80094b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	22ff      	movs	r2, #255	; 0xff
 8009496:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800949c:	b2da      	uxtb	r2, r3
 800949e:	8979      	ldrh	r1, [r7, #10]
 80094a0:	2300      	movs	r3, #0
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f001 fe51 	bl	800b150 <I2C_TransferConfig>
 80094ae:	e00f      	b.n	80094d0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	8979      	ldrh	r1, [r7, #10]
 80094c2:	2300      	movs	r3, #0
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f001 fe40 	bl	800b150 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d19a      	bne.n	8009410 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f001 fd94 	bl	800b00c <I2C_WaitOnSTOPFlagUntilTimeout>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e01a      	b.n	8009524 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2220      	movs	r2, #32
 80094f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6859      	ldr	r1, [r3, #4]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	4b0b      	ldr	r3, [pc, #44]	; (8009530 <HAL_I2C_Mem_Read+0x230>)
 8009502:	400b      	ands	r3, r1
 8009504:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2220      	movs	r2, #32
 800950a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800951e:	2300      	movs	r3, #0
 8009520:	e000      	b.n	8009524 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009522:	2302      	movs	r3, #2
  }
}
 8009524:	4618      	mov	r0, r3
 8009526:	3718      	adds	r7, #24
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	80002400 	.word	0x80002400
 8009530:	fe00e800 	.word	0xfe00e800

08009534 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b08a      	sub	sp, #40	; 0x28
 8009538:	af02      	add	r7, sp, #8
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	4608      	mov	r0, r1
 800953e:	4611      	mov	r1, r2
 8009540:	461a      	mov	r2, r3
 8009542:	4603      	mov	r3, r0
 8009544:	817b      	strh	r3, [r7, #10]
 8009546:	460b      	mov	r3, r1
 8009548:	813b      	strh	r3, [r7, #8]
 800954a:	4613      	mov	r3, r2
 800954c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b20      	cmp	r3, #32
 8009558:	f040 80d5 	bne.w	8009706 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 800955c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955e:	2b00      	cmp	r3, #0
 8009560:	d002      	beq.n	8009568 <HAL_I2C_Mem_Read_DMA+0x34>
 8009562:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009564:	2b00      	cmp	r3, #0
 8009566:	d105      	bne.n	8009574 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800956e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	e0c9      	b.n	8009708 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800957e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009582:	d101      	bne.n	8009588 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8009584:	2302      	movs	r3, #2
 8009586:	e0bf      	b.n	8009708 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800958e:	2b01      	cmp	r3, #1
 8009590:	d101      	bne.n	8009596 <HAL_I2C_Mem_Read_DMA+0x62>
 8009592:	2302      	movs	r3, #2
 8009594:	e0b8      	b.n	8009708 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800959e:	f7fc fba1 	bl	8005ce4 <HAL_GetTick>
 80095a2:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2222      	movs	r2, #34	; 0x22
 80095a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2240      	movs	r2, #64	; 0x40
 80095b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80095c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	4a51      	ldr	r2, [pc, #324]	; (8009710 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 80095ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4a51      	ldr	r2, [pc, #324]	; (8009714 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 80095d0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	2bff      	cmp	r3, #255	; 0xff
 80095da:	d906      	bls.n	80095ea <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	22ff      	movs	r2, #255	; 0xff
 80095e0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80095e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095e6:	61fb      	str	r3, [r7, #28]
 80095e8:	e007      	b.n	80095fa <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80095f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095f8:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80095fa:	88f8      	ldrh	r0, [r7, #6]
 80095fc:	893a      	ldrh	r2, [r7, #8]
 80095fe:	8979      	ldrh	r1, [r7, #10]
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	9301      	str	r3, [sp, #4]
 8009604:	2319      	movs	r3, #25
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	4603      	mov	r3, r0
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f000 fd36 	bl	800a07c <I2C_RequestMemoryRead>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d005      	beq.n	8009622 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e072      	b.n	8009708 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009626:	2b00      	cmp	r3, #0
 8009628:	d020      	beq.n	800966c <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800962e:	4a3a      	ldr	r2, [pc, #232]	; (8009718 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8009630:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009636:	4a39      	ldr	r2, [pc, #228]	; (800971c <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8009638:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800963e:	2200      	movs	r2, #0
 8009640:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009646:	2200      	movs	r2, #0
 8009648:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3324      	adds	r3, #36	; 0x24
 8009654:	4619      	mov	r1, r3
 8009656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800965c:	f7fc ffea 	bl	8006634 <HAL_DMA_Start_IT>
 8009660:	4603      	mov	r3, r0
 8009662:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8009664:	7dfb      	ldrb	r3, [r7, #23]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d139      	bne.n	80096de <HAL_I2C_Mem_Read_DMA+0x1aa>
 800966a:	e013      	b.n	8009694 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2220      	movs	r2, #32
 8009670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009680:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e039      	b.n	8009708 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009698:	b2da      	uxtb	r2, r3
 800969a:	8979      	ldrh	r1, [r7, #10]
 800969c:	4b20      	ldr	r3, [pc, #128]	; (8009720 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f001 fd54 	bl	800b150 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80096c2:	2110      	movs	r1, #16
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f001 fd71 	bl	800b1ac <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096d8:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	e014      	b.n	8009708 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2220      	movs	r2, #32
 80096e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f2:	f043 0210 	orr.w	r2, r3, #16
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e000      	b.n	8009708 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8009706:	2302      	movs	r3, #2
  }
}
 8009708:	4618      	mov	r0, r3
 800970a:	3720      	adds	r7, #32
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	ffff0000 	.word	0xffff0000
 8009714:	08009a2f 	.word	0x08009a2f
 8009718:	0800abcb 	.word	0x0800abcb
 800971c:	0800ac61 	.word	0x0800ac61
 8009720:	80002400 	.word	0x80002400

08009724 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	699b      	ldr	r3, [r3, #24]
 8009732:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009740:	2b00      	cmp	r3, #0
 8009742:	d005      	beq.n	8009750 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	68f9      	ldr	r1, [r7, #12]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	4798      	blx	r3
  }
}
 8009750:	bf00      	nop
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	460b      	mov	r3, r1
 80097b2:	70fb      	strb	r3, [r7, #3]
 80097b4:	4613      	mov	r3, r2
 80097b6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009838:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009844:	2b01      	cmp	r3, #1
 8009846:	d101      	bne.n	800984c <I2C_Slave_ISR_IT+0x24>
 8009848:	2302      	movs	r3, #2
 800984a:	e0ec      	b.n	8009a26 <I2C_Slave_ISR_IT+0x1fe>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	095b      	lsrs	r3, r3, #5
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	2b00      	cmp	r3, #0
 800985e:	d009      	beq.n	8009874 <I2C_Slave_ISR_IT+0x4c>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	095b      	lsrs	r3, r3, #5
 8009864:	f003 0301 	and.w	r3, r3, #1
 8009868:	2b00      	cmp	r3, #0
 800986a:	d003      	beq.n	8009874 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800986c:	6939      	ldr	r1, [r7, #16]
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 fe42 	bl	800a4f8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	091b      	lsrs	r3, r3, #4
 8009878:	f003 0301 	and.w	r3, r3, #1
 800987c:	2b00      	cmp	r3, #0
 800987e:	d04d      	beq.n	800991c <I2C_Slave_ISR_IT+0xf4>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	091b      	lsrs	r3, r3, #4
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	2b00      	cmp	r3, #0
 800988a:	d047      	beq.n	800991c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009890:	b29b      	uxth	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d128      	bne.n	80098e8 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800989c:	b2db      	uxtb	r3, r3
 800989e:	2b28      	cmp	r3, #40	; 0x28
 80098a0:	d108      	bne.n	80098b4 <I2C_Slave_ISR_IT+0x8c>
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098a8:	d104      	bne.n	80098b4 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80098aa:	6939      	ldr	r1, [r7, #16]
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f001 f81b 	bl	800a8e8 <I2C_ITListenCplt>
 80098b2:	e032      	b.n	800991a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	2b29      	cmp	r3, #41	; 0x29
 80098be:	d10e      	bne.n	80098de <I2C_Slave_ISR_IT+0xb6>
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80098c6:	d00a      	beq.n	80098de <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2210      	movs	r2, #16
 80098ce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f001 f956 	bl	800ab82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 fce5 	bl	800a2a6 <I2C_ITSlaveSeqCplt>
 80098dc:	e01d      	b.n	800991a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2210      	movs	r2, #16
 80098e4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80098e6:	e096      	b.n	8009a16 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2210      	movs	r2, #16
 80098ee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f4:	f043 0204 	orr.w	r2, r3, #4
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d004      	beq.n	800990c <I2C_Slave_ISR_IT+0xe4>
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009908:	f040 8085 	bne.w	8009a16 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009910:	4619      	mov	r1, r3
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f001 f83e 	bl	800a994 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009918:	e07d      	b.n	8009a16 <I2C_Slave_ISR_IT+0x1ee>
 800991a:	e07c      	b.n	8009a16 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	089b      	lsrs	r3, r3, #2
 8009920:	f003 0301 	and.w	r3, r3, #1
 8009924:	2b00      	cmp	r3, #0
 8009926:	d030      	beq.n	800998a <I2C_Slave_ISR_IT+0x162>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	089b      	lsrs	r3, r3, #2
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	2b00      	cmp	r3, #0
 8009932:	d02a      	beq.n	800998a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009938:	b29b      	uxth	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d018      	beq.n	8009970 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009948:	b2d2      	uxtb	r2, r2
 800994a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009950:	1c5a      	adds	r2, r3, #1
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800995a:	3b01      	subs	r3, #1
 800995c:	b29a      	uxth	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009966:	b29b      	uxth	r3, r3
 8009968:	3b01      	subs	r3, #1
 800996a:	b29a      	uxth	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009974:	b29b      	uxth	r3, r3
 8009976:	2b00      	cmp	r3, #0
 8009978:	d14f      	bne.n	8009a1a <I2C_Slave_ISR_IT+0x1f2>
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009980:	d04b      	beq.n	8009a1a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f000 fc8f 	bl	800a2a6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009988:	e047      	b.n	8009a1a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	08db      	lsrs	r3, r3, #3
 800998e:	f003 0301 	and.w	r3, r3, #1
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00a      	beq.n	80099ac <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	08db      	lsrs	r3, r3, #3
 800999a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d004      	beq.n	80099ac <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80099a2:	6939      	ldr	r1, [r7, #16]
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 fbbd 	bl	800a124 <I2C_ITAddrCplt>
 80099aa:	e037      	b.n	8009a1c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	085b      	lsrs	r3, r3, #1
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d031      	beq.n	8009a1c <I2C_Slave_ISR_IT+0x1f4>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	085b      	lsrs	r3, r3, #1
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d02b      	beq.n	8009a1c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d018      	beq.n	8009a00 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d2:	781a      	ldrb	r2, [r3, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	3b01      	subs	r3, #1
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099f6:	3b01      	subs	r3, #1
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	851a      	strh	r2, [r3, #40]	; 0x28
 80099fe:	e00d      	b.n	8009a1c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a06:	d002      	beq.n	8009a0e <I2C_Slave_ISR_IT+0x1e6>
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d106      	bne.n	8009a1c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 fc49 	bl	800a2a6 <I2C_ITSlaveSeqCplt>
 8009a14:	e002      	b.n	8009a1c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8009a16:	bf00      	nop
 8009a18:	e000      	b.n	8009a1c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8009a1a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3718      	adds	r7, #24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b088      	sub	sp, #32
 8009a32:	af02      	add	r7, sp, #8
 8009a34:	60f8      	str	r0, [r7, #12]
 8009a36:	60b9      	str	r1, [r7, #8]
 8009a38:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d101      	bne.n	8009a48 <I2C_Master_ISR_DMA+0x1a>
 8009a44:	2302      	movs	r3, #2
 8009a46:	e0e1      	b.n	8009c0c <I2C_Master_ISR_DMA+0x1de>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	091b      	lsrs	r3, r3, #4
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d017      	beq.n	8009a8c <I2C_Master_ISR_DMA+0x5e>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	091b      	lsrs	r3, r3, #4
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d011      	beq.n	8009a8c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2210      	movs	r2, #16
 8009a6e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a74:	f043 0204 	orr.w	r2, r3, #4
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009a7c:	2120      	movs	r1, #32
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f001 fb94 	bl	800b1ac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f001 f87c 	bl	800ab82 <I2C_Flush_TXDR>
 8009a8a:	e0ba      	b.n	8009c02 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	09db      	lsrs	r3, r3, #7
 8009a90:	f003 0301 	and.w	r3, r3, #1
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d072      	beq.n	8009b7e <I2C_Master_ISR_DMA+0x150>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	099b      	lsrs	r3, r3, #6
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d06c      	beq.n	8009b7e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ab2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d04e      	beq.n	8009b5c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009aca:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	2bff      	cmp	r3, #255	; 0xff
 8009ad4:	d906      	bls.n	8009ae4 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	22ff      	movs	r2, #255	; 0xff
 8009ada:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8009adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ae0:	617b      	str	r3, [r7, #20]
 8009ae2:	e010      	b.n	8009b06 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009af6:	d003      	beq.n	8009b00 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afc:	617b      	str	r3, [r7, #20]
 8009afe:	e002      	b.n	8009b06 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009b00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b04:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	8a79      	ldrh	r1, [r7, #18]
 8009b0e:	2300      	movs	r3, #0
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f001 fb1b 	bl	800b150 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	2b22      	cmp	r3, #34	; 0x22
 8009b36:	d108      	bne.n	8009b4a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b46:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009b48:	e05b      	b.n	8009c02 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b58:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009b5a:	e052      	b.n	8009c02 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b6a:	d003      	beq.n	8009b74 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f000 fb5d 	bl	800a22c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009b72:	e046      	b.n	8009c02 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009b74:	2140      	movs	r1, #64	; 0x40
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f000 ff0c 	bl	800a994 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009b7c:	e041      	b.n	8009c02 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	099b      	lsrs	r3, r3, #6
 8009b82:	f003 0301 	and.w	r3, r3, #1
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d029      	beq.n	8009bde <I2C_Master_ISR_DMA+0x1b0>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	099b      	lsrs	r3, r3, #6
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d023      	beq.n	8009bde <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d119      	bne.n	8009bd4 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009baa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bae:	d027      	beq.n	8009c00 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009bb8:	d108      	bne.n	8009bcc <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bc8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009bca:	e019      	b.n	8009c00 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f000 fb2d 	bl	800a22c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009bd2:	e015      	b.n	8009c00 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009bd4:	2140      	movs	r1, #64	; 0x40
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 fedc 	bl	800a994 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009bdc:	e010      	b.n	8009c00 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	095b      	lsrs	r3, r3, #5
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00b      	beq.n	8009c02 <I2C_Master_ISR_DMA+0x1d4>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	095b      	lsrs	r3, r3, #5
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d005      	beq.n	8009c02 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009bf6:	68b9      	ldr	r1, [r7, #8]
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f000 fbb3 	bl	800a364 <I2C_ITMasterCplt>
 8009bfe:	e000      	b.n	8009c02 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8009c00:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b088      	sub	sp, #32
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d101      	bne.n	8009c38 <I2C_Slave_ISR_DMA+0x24>
 8009c34:	2302      	movs	r3, #2
 8009c36:	e1c8      	b.n	8009fca <I2C_Slave_ISR_DMA+0x3b6>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	095b      	lsrs	r3, r3, #5
 8009c44:	f003 0301 	and.w	r3, r3, #1
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d009      	beq.n	8009c60 <I2C_Slave_ISR_DMA+0x4c>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	095b      	lsrs	r3, r3, #5
 8009c50:	f003 0301 	and.w	r3, r3, #1
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d003      	beq.n	8009c60 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009c58:	68b9      	ldr	r1, [r7, #8]
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 fc4c 	bl	800a4f8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	091b      	lsrs	r3, r3, #4
 8009c64:	f003 0301 	and.w	r3, r3, #1
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f000 8199 	beq.w	8009fa0 <I2C_Slave_ISR_DMA+0x38c>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	091b      	lsrs	r3, r3, #4
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f000 8192 	beq.w	8009fa0 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	0b9b      	lsrs	r3, r3, #14
 8009c80:	f003 0301 	and.w	r3, r3, #1
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d106      	bne.n	8009c96 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	0bdb      	lsrs	r3, r3, #15
 8009c8c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 817e 	beq.w	8009f92 <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d07c      	beq.n	8009d98 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	0bdb      	lsrs	r3, r3, #15
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d076      	beq.n	8009d98 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a8d      	ldr	r2, [pc, #564]	; (8009ee8 <I2C_Slave_ISR_DMA+0x2d4>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d059      	beq.n	8009d6a <I2C_Slave_ISR_DMA+0x156>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a8b      	ldr	r2, [pc, #556]	; (8009eec <I2C_Slave_ISR_DMA+0x2d8>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d053      	beq.n	8009d6a <I2C_Slave_ISR_DMA+0x156>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a89      	ldr	r2, [pc, #548]	; (8009ef0 <I2C_Slave_ISR_DMA+0x2dc>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d04d      	beq.n	8009d6a <I2C_Slave_ISR_DMA+0x156>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a87      	ldr	r2, [pc, #540]	; (8009ef4 <I2C_Slave_ISR_DMA+0x2e0>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d047      	beq.n	8009d6a <I2C_Slave_ISR_DMA+0x156>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a85      	ldr	r2, [pc, #532]	; (8009ef8 <I2C_Slave_ISR_DMA+0x2e4>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d041      	beq.n	8009d6a <I2C_Slave_ISR_DMA+0x156>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a83      	ldr	r2, [pc, #524]	; (8009efc <I2C_Slave_ISR_DMA+0x2e8>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d03b      	beq.n	8009d6a <I2C_Slave_ISR_DMA+0x156>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a81      	ldr	r2, [pc, #516]	; (8009f00 <I2C_Slave_ISR_DMA+0x2ec>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d035      	beq.n	8009d6a <I2C_Slave_ISR_DMA+0x156>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a7f      	ldr	r2, [pc, #508]	; (8009f04 <I2C_Slave_ISR_DMA+0x2f0>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d02f      	beq.n	8009d6a <I2C_Slave_ISR_DMA+0x156>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a7d      	ldr	r2, [pc, #500]	; (8009f08 <I2C_Slave_ISR_DMA+0x2f4>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d029      	beq.n	8009d6a <I2C_Slave_ISR_DMA+0x156>
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a7b      	ldr	r2, [pc, #492]	; (8009f0c <I2C_Slave_ISR_DMA+0x2f8>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d023      	beq.n	8009d6a <I2C_Slave_ISR_DMA+0x156>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a79      	ldr	r2, [pc, #484]	; (8009f10 <I2C_Slave_ISR_DMA+0x2fc>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d01d      	beq.n	8009d6a <I2C_Slave_ISR_DMA+0x156>
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a77      	ldr	r2, [pc, #476]	; (8009f14 <I2C_Slave_ISR_DMA+0x300>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d017      	beq.n	8009d6a <I2C_Slave_ISR_DMA+0x156>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a75      	ldr	r2, [pc, #468]	; (8009f18 <I2C_Slave_ISR_DMA+0x304>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d011      	beq.n	8009d6a <I2C_Slave_ISR_DMA+0x156>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a73      	ldr	r2, [pc, #460]	; (8009f1c <I2C_Slave_ISR_DMA+0x308>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d00b      	beq.n	8009d6a <I2C_Slave_ISR_DMA+0x156>
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a71      	ldr	r2, [pc, #452]	; (8009f20 <I2C_Slave_ISR_DMA+0x30c>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d005      	beq.n	8009d6a <I2C_Slave_ISR_DMA+0x156>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a6f      	ldr	r2, [pc, #444]	; (8009f24 <I2C_Slave_ISR_DMA+0x310>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d109      	bne.n	8009d7e <I2C_Slave_ISR_DMA+0x16a>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	bf0c      	ite	eq
 8009d76:	2301      	moveq	r3, #1
 8009d78:	2300      	movne	r3, #0
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	e008      	b.n	8009d90 <I2C_Slave_ISR_DMA+0x17c>
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	bf0c      	ite	eq
 8009d8a:	2301      	moveq	r3, #1
 8009d8c:	2300      	movne	r3, #0
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d001      	beq.n	8009d98 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8009d94:	2301      	movs	r3, #1
 8009d96:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d07c      	beq.n	8009e9a <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	0b9b      	lsrs	r3, r3, #14
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d076      	beq.n	8009e9a <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a4d      	ldr	r2, [pc, #308]	; (8009ee8 <I2C_Slave_ISR_DMA+0x2d4>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d059      	beq.n	8009e6c <I2C_Slave_ISR_DMA+0x258>
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a4b      	ldr	r2, [pc, #300]	; (8009eec <I2C_Slave_ISR_DMA+0x2d8>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d053      	beq.n	8009e6c <I2C_Slave_ISR_DMA+0x258>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a49      	ldr	r2, [pc, #292]	; (8009ef0 <I2C_Slave_ISR_DMA+0x2dc>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d04d      	beq.n	8009e6c <I2C_Slave_ISR_DMA+0x258>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a47      	ldr	r2, [pc, #284]	; (8009ef4 <I2C_Slave_ISR_DMA+0x2e0>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d047      	beq.n	8009e6c <I2C_Slave_ISR_DMA+0x258>
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a45      	ldr	r2, [pc, #276]	; (8009ef8 <I2C_Slave_ISR_DMA+0x2e4>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d041      	beq.n	8009e6c <I2C_Slave_ISR_DMA+0x258>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a43      	ldr	r2, [pc, #268]	; (8009efc <I2C_Slave_ISR_DMA+0x2e8>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d03b      	beq.n	8009e6c <I2C_Slave_ISR_DMA+0x258>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a41      	ldr	r2, [pc, #260]	; (8009f00 <I2C_Slave_ISR_DMA+0x2ec>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d035      	beq.n	8009e6c <I2C_Slave_ISR_DMA+0x258>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a3f      	ldr	r2, [pc, #252]	; (8009f04 <I2C_Slave_ISR_DMA+0x2f0>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d02f      	beq.n	8009e6c <I2C_Slave_ISR_DMA+0x258>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a3d      	ldr	r2, [pc, #244]	; (8009f08 <I2C_Slave_ISR_DMA+0x2f4>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d029      	beq.n	8009e6c <I2C_Slave_ISR_DMA+0x258>
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a3b      	ldr	r2, [pc, #236]	; (8009f0c <I2C_Slave_ISR_DMA+0x2f8>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d023      	beq.n	8009e6c <I2C_Slave_ISR_DMA+0x258>
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a39      	ldr	r2, [pc, #228]	; (8009f10 <I2C_Slave_ISR_DMA+0x2fc>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d01d      	beq.n	8009e6c <I2C_Slave_ISR_DMA+0x258>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a37      	ldr	r2, [pc, #220]	; (8009f14 <I2C_Slave_ISR_DMA+0x300>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d017      	beq.n	8009e6c <I2C_Slave_ISR_DMA+0x258>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a35      	ldr	r2, [pc, #212]	; (8009f18 <I2C_Slave_ISR_DMA+0x304>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d011      	beq.n	8009e6c <I2C_Slave_ISR_DMA+0x258>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a33      	ldr	r2, [pc, #204]	; (8009f1c <I2C_Slave_ISR_DMA+0x308>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d00b      	beq.n	8009e6c <I2C_Slave_ISR_DMA+0x258>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a31      	ldr	r2, [pc, #196]	; (8009f20 <I2C_Slave_ISR_DMA+0x30c>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d005      	beq.n	8009e6c <I2C_Slave_ISR_DMA+0x258>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a2f      	ldr	r2, [pc, #188]	; (8009f24 <I2C_Slave_ISR_DMA+0x310>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d109      	bne.n	8009e80 <I2C_Slave_ISR_DMA+0x26c>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	bf0c      	ite	eq
 8009e78:	2301      	moveq	r3, #1
 8009e7a:	2300      	movne	r3, #0
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	e008      	b.n	8009e92 <I2C_Slave_ISR_DMA+0x27e>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	bf0c      	ite	eq
 8009e8c:	2301      	moveq	r3, #1
 8009e8e:	2300      	movne	r3, #0
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 8009e96:	2301      	movs	r3, #1
 8009e98:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d148      	bne.n	8009f32 <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	2b28      	cmp	r3, #40	; 0x28
 8009eaa:	d108      	bne.n	8009ebe <I2C_Slave_ISR_DMA+0x2aa>
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009eb2:	d104      	bne.n	8009ebe <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009eb4:	68b9      	ldr	r1, [r7, #8]
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f000 fd16 	bl	800a8e8 <I2C_ITListenCplt>
 8009ebc:	e068      	b.n	8009f90 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	2b29      	cmp	r3, #41	; 0x29
 8009ec8:	d12e      	bne.n	8009f28 <I2C_Slave_ISR_DMA+0x314>
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009ed0:	d02a      	beq.n	8009f28 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2210      	movs	r2, #16
 8009ed8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f000 fe51 	bl	800ab82 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 f9e0 	bl	800a2a6 <I2C_ITSlaveSeqCplt>
 8009ee6:	e053      	b.n	8009f90 <I2C_Slave_ISR_DMA+0x37c>
 8009ee8:	40020010 	.word	0x40020010
 8009eec:	40020028 	.word	0x40020028
 8009ef0:	40020040 	.word	0x40020040
 8009ef4:	40020058 	.word	0x40020058
 8009ef8:	40020070 	.word	0x40020070
 8009efc:	40020088 	.word	0x40020088
 8009f00:	400200a0 	.word	0x400200a0
 8009f04:	400200b8 	.word	0x400200b8
 8009f08:	40020410 	.word	0x40020410
 8009f0c:	40020428 	.word	0x40020428
 8009f10:	40020440 	.word	0x40020440
 8009f14:	40020458 	.word	0x40020458
 8009f18:	40020470 	.word	0x40020470
 8009f1c:	40020488 	.word	0x40020488
 8009f20:	400204a0 	.word	0x400204a0
 8009f24:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2210      	movs	r2, #16
 8009f2e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009f30:	e034      	b.n	8009f9c <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2210      	movs	r2, #16
 8009f38:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f3e:	f043 0204 	orr.w	r2, r3, #4
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f4c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d003      	beq.n	8009f5c <I2C_Slave_ISR_DMA+0x348>
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f5a:	d11f      	bne.n	8009f9c <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009f5c:	7dfb      	ldrb	r3, [r7, #23]
 8009f5e:	2b21      	cmp	r3, #33	; 0x21
 8009f60:	d002      	beq.n	8009f68 <I2C_Slave_ISR_DMA+0x354>
 8009f62:	7dfb      	ldrb	r3, [r7, #23]
 8009f64:	2b29      	cmp	r3, #41	; 0x29
 8009f66:	d103      	bne.n	8009f70 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2221      	movs	r2, #33	; 0x21
 8009f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8009f6e:	e008      	b.n	8009f82 <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
 8009f72:	2b22      	cmp	r3, #34	; 0x22
 8009f74:	d002      	beq.n	8009f7c <I2C_Slave_ISR_DMA+0x368>
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
 8009f78:	2b2a      	cmp	r3, #42	; 0x2a
 8009f7a:	d102      	bne.n	8009f82 <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2222      	movs	r2, #34	; 0x22
 8009f80:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f86:	4619      	mov	r1, r3
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 fd03 	bl	800a994 <I2C_ITError>
      if (treatdmanack == 1U)
 8009f8e:	e005      	b.n	8009f9c <I2C_Slave_ISR_DMA+0x388>
 8009f90:	e004      	b.n	8009f9c <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2210      	movs	r2, #16
 8009f98:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009f9a:	e011      	b.n	8009fc0 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8009f9c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009f9e:	e00f      	b.n	8009fc0 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	08db      	lsrs	r3, r3, #3
 8009fa4:	f003 0301 	and.w	r3, r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d009      	beq.n	8009fc0 <I2C_Slave_ISR_DMA+0x3ac>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	08db      	lsrs	r3, r3, #3
 8009fb0:	f003 0301 	and.w	r3, r3, #1
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d003      	beq.n	8009fc0 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009fb8:	68b9      	ldr	r1, [r7, #8]
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f000 f8b2 	bl	800a124 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3720      	adds	r7, #32
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop

08009fd4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af02      	add	r7, sp, #8
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	4608      	mov	r0, r1
 8009fde:	4611      	mov	r1, r2
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	817b      	strh	r3, [r7, #10]
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	813b      	strh	r3, [r7, #8]
 8009fea:	4613      	mov	r3, r2
 8009fec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009fee:	88fb      	ldrh	r3, [r7, #6]
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	8979      	ldrh	r1, [r7, #10]
 8009ff4:	4b20      	ldr	r3, [pc, #128]	; (800a078 <I2C_RequestMemoryWrite+0xa4>)
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f001 f8a7 	bl	800b150 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a002:	69fa      	ldr	r2, [r7, #28]
 800a004:	69b9      	ldr	r1, [r7, #24]
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 ffc0 	bl	800af8c <I2C_WaitOnTXISFlagUntilTimeout>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e02c      	b.n	800a070 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a016:	88fb      	ldrh	r3, [r7, #6]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d105      	bne.n	800a028 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a01c:	893b      	ldrh	r3, [r7, #8]
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	629a      	str	r2, [r3, #40]	; 0x28
 800a026:	e015      	b.n	800a054 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a028:	893b      	ldrh	r3, [r7, #8]
 800a02a:	0a1b      	lsrs	r3, r3, #8
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a036:	69fa      	ldr	r2, [r7, #28]
 800a038:	69b9      	ldr	r1, [r7, #24]
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f000 ffa6 	bl	800af8c <I2C_WaitOnTXISFlagUntilTimeout>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e012      	b.n	800a070 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a04a:	893b      	ldrh	r3, [r7, #8]
 800a04c:	b2da      	uxtb	r2, r3
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	2200      	movs	r2, #0
 800a05c:	2180      	movs	r1, #128	; 0x80
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f000 ff54 	bl	800af0c <I2C_WaitOnFlagUntilTimeout>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d001      	beq.n	800a06e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e000      	b.n	800a070 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	80002000 	.word	0x80002000

0800a07c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af02      	add	r7, sp, #8
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	4608      	mov	r0, r1
 800a086:	4611      	mov	r1, r2
 800a088:	461a      	mov	r2, r3
 800a08a:	4603      	mov	r3, r0
 800a08c:	817b      	strh	r3, [r7, #10]
 800a08e:	460b      	mov	r3, r1
 800a090:	813b      	strh	r3, [r7, #8]
 800a092:	4613      	mov	r3, r2
 800a094:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a096:	88fb      	ldrh	r3, [r7, #6]
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	8979      	ldrh	r1, [r7, #10]
 800a09c:	4b20      	ldr	r3, [pc, #128]	; (800a120 <I2C_RequestMemoryRead+0xa4>)
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f001 f854 	bl	800b150 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0a8:	69fa      	ldr	r2, [r7, #28]
 800a0aa:	69b9      	ldr	r1, [r7, #24]
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f000 ff6d 	bl	800af8c <I2C_WaitOnTXISFlagUntilTimeout>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e02c      	b.n	800a116 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a0bc:	88fb      	ldrh	r3, [r7, #6]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d105      	bne.n	800a0ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a0c2:	893b      	ldrh	r3, [r7, #8]
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	629a      	str	r2, [r3, #40]	; 0x28
 800a0cc:	e015      	b.n	800a0fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a0ce:	893b      	ldrh	r3, [r7, #8]
 800a0d0:	0a1b      	lsrs	r3, r3, #8
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	b2da      	uxtb	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0dc:	69fa      	ldr	r2, [r7, #28]
 800a0de:	69b9      	ldr	r1, [r7, #24]
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f000 ff53 	bl	800af8c <I2C_WaitOnTXISFlagUntilTimeout>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d001      	beq.n	800a0f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e012      	b.n	800a116 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a0f0:	893b      	ldrh	r3, [r7, #8]
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	2200      	movs	r2, #0
 800a102:	2140      	movs	r1, #64	; 0x40
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f000 ff01 	bl	800af0c <I2C_WaitOnFlagUntilTimeout>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e000      	b.n	800a116 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	80002000 	.word	0x80002000

0800a124 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a134:	b2db      	uxtb	r3, r3
 800a136:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a13a:	2b28      	cmp	r3, #40	; 0x28
 800a13c:	d16a      	bne.n	800a214 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	0c1b      	lsrs	r3, r3, #16
 800a146:	b2db      	uxtb	r3, r3
 800a148:	f003 0301 	and.w	r3, r3, #1
 800a14c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	0c1b      	lsrs	r3, r3, #16
 800a156:	b29b      	uxth	r3, r3
 800a158:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a15c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	b29b      	uxth	r3, r3
 800a166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a16a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	b29b      	uxth	r3, r3
 800a174:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a178:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d138      	bne.n	800a1f4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800a182:	897b      	ldrh	r3, [r7, #10]
 800a184:	09db      	lsrs	r3, r3, #7
 800a186:	b29a      	uxth	r2, r3
 800a188:	89bb      	ldrh	r3, [r7, #12]
 800a18a:	4053      	eors	r3, r2
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	f003 0306 	and.w	r3, r3, #6
 800a192:	2b00      	cmp	r3, #0
 800a194:	d11c      	bne.n	800a1d0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a196:	897b      	ldrh	r3, [r7, #10]
 800a198:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d13b      	bne.n	800a224 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2208      	movs	r2, #8
 800a1b8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a1c2:	89ba      	ldrh	r2, [r7, #12]
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7ff faed 	bl	80097a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a1ce:	e029      	b.n	800a224 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800a1d0:	893b      	ldrh	r3, [r7, #8]
 800a1d2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a1d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f001 f84b 	bl	800b274 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a1e6:	89ba      	ldrh	r2, [r7, #12]
 800a1e8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7ff fadb 	bl	80097a8 <HAL_I2C_AddrCallback>
}
 800a1f2:	e017      	b.n	800a224 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a1f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f001 f83b 	bl	800b274 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a206:	89ba      	ldrh	r2, [r7, #12]
 800a208:	7bfb      	ldrb	r3, [r7, #15]
 800a20a:	4619      	mov	r1, r3
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f7ff facb 	bl	80097a8 <HAL_I2C_AddrCallback>
}
 800a212:	e007      	b.n	800a224 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2208      	movs	r2, #8
 800a21a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800a224:	bf00      	nop
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a242:	b2db      	uxtb	r3, r3
 800a244:	2b21      	cmp	r3, #33	; 0x21
 800a246:	d115      	bne.n	800a274 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2220      	movs	r2, #32
 800a24c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2211      	movs	r2, #17
 800a254:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a25c:	2101      	movs	r1, #1
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f001 f808 	bl	800b274 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7ff fa73 	bl	8009758 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a272:	e014      	b.n	800a29e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2220      	movs	r2, #32
 800a278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2212      	movs	r2, #18
 800a280:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a288:	2102      	movs	r1, #2
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fff2 	bl	800b274 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f7ff fa67 	bl	800976c <HAL_I2C_MasterRxCpltCallback>
}
 800a29e:	bf00      	nop
 800a2a0:	3708      	adds	r7, #8
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	0b9b      	lsrs	r3, r3, #14
 800a2c2:	f003 0301 	and.w	r3, r3, #1
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d008      	beq.n	800a2dc <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a2d8:	601a      	str	r2, [r3, #0]
 800a2da:	e00d      	b.n	800a2f8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	0bdb      	lsrs	r3, r3, #15
 800a2e0:	f003 0301 	and.w	r3, r3, #1
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d007      	beq.n	800a2f8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a2f6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	2b29      	cmp	r3, #41	; 0x29
 800a302:	d112      	bne.n	800a32a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2228      	movs	r2, #40	; 0x28
 800a308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2221      	movs	r2, #33	; 0x21
 800a310:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a312:	2101      	movs	r1, #1
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 ffad 	bl	800b274 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7ff fa2c 	bl	8009780 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a328:	e017      	b.n	800a35a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a330:	b2db      	uxtb	r3, r3
 800a332:	2b2a      	cmp	r3, #42	; 0x2a
 800a334:	d111      	bne.n	800a35a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2228      	movs	r2, #40	; 0x28
 800a33a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2222      	movs	r2, #34	; 0x22
 800a342:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a344:	2102      	movs	r1, #2
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 ff94 	bl	800b274 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7ff fa1d 	bl	8009794 <HAL_I2C_SlaveRxCpltCallback>
}
 800a35a:	bf00      	nop
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
	...

0800a364 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b086      	sub	sp, #24
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2220      	movs	r2, #32
 800a378:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a380:	b2db      	uxtb	r3, r3
 800a382:	2b21      	cmp	r3, #33	; 0x21
 800a384:	d107      	bne.n	800a396 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a386:	2101      	movs	r1, #1
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 ff73 	bl	800b274 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2211      	movs	r2, #17
 800a392:	631a      	str	r2, [r3, #48]	; 0x30
 800a394:	e00c      	b.n	800a3b0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b22      	cmp	r3, #34	; 0x22
 800a3a0:	d106      	bne.n	800a3b0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a3a2:	2102      	movs	r1, #2
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 ff65 	bl	800b274 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2212      	movs	r2, #18
 800a3ae:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6859      	ldr	r1, [r3, #4]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	4b4d      	ldr	r3, [pc, #308]	; (800a4f0 <I2C_ITMasterCplt+0x18c>)
 800a3bc:	400b      	ands	r3, r1
 800a3be:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a4a      	ldr	r2, [pc, #296]	; (800a4f4 <I2C_ITMasterCplt+0x190>)
 800a3ca:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	091b      	lsrs	r3, r3, #4
 800a3d0:	f003 0301 	and.w	r3, r3, #1
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d009      	beq.n	800a3ec <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2210      	movs	r2, #16
 800a3de:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3e4:	f043 0204 	orr.w	r2, r3, #4
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	2b60      	cmp	r3, #96	; 0x60
 800a3f6:	d10b      	bne.n	800a410 <I2C_ITMasterCplt+0xac>
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	089b      	lsrs	r3, r3, #2
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	2b00      	cmp	r3, #0
 800a402:	d005      	beq.n	800a410 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800a40e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 fbb6 	bl	800ab82 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a41a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a422:	b2db      	uxtb	r3, r3
 800a424:	2b60      	cmp	r3, #96	; 0x60
 800a426:	d002      	beq.n	800a42e <I2C_ITMasterCplt+0xca>
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d006      	beq.n	800a43c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 faad 	bl	800a994 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a43a:	e054      	b.n	800a4e6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b21      	cmp	r3, #33	; 0x21
 800a446:	d124      	bne.n	800a492 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2220      	movs	r2, #32
 800a44c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b40      	cmp	r3, #64	; 0x40
 800a460:	d10b      	bne.n	800a47a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f7ff f9b0 	bl	80097d8 <HAL_I2C_MemTxCpltCallback>
}
 800a478:	e035      	b.n	800a4e6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7ff f964 	bl	8009758 <HAL_I2C_MasterTxCpltCallback>
}
 800a490:	e029      	b.n	800a4e6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	2b22      	cmp	r3, #34	; 0x22
 800a49c:	d123      	bne.n	800a4e6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2220      	movs	r2, #32
 800a4a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b40      	cmp	r3, #64	; 0x40
 800a4b6:	d10b      	bne.n	800a4d0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7ff f98f 	bl	80097ec <HAL_I2C_MemRxCpltCallback>
}
 800a4ce:	e00a      	b.n	800a4e6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f7ff f943 	bl	800976c <HAL_I2C_MasterRxCpltCallback>
}
 800a4e6:	bf00      	nop
 800a4e8:	3718      	adds	r7, #24
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	fe00e800 	.word	0xfe00e800
 800a4f4:	ffff0000 	.word	0xffff0000

0800a4f8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a514:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2220      	movs	r2, #32
 800a51c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a51e:	7bfb      	ldrb	r3, [r7, #15]
 800a520:	2b21      	cmp	r3, #33	; 0x21
 800a522:	d002      	beq.n	800a52a <I2C_ITSlaveCplt+0x32>
 800a524:	7bfb      	ldrb	r3, [r7, #15]
 800a526:	2b29      	cmp	r3, #41	; 0x29
 800a528:	d108      	bne.n	800a53c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a52a:	f248 0101 	movw	r1, #32769	; 0x8001
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fea0 	bl	800b274 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2221      	movs	r2, #33	; 0x21
 800a538:	631a      	str	r2, [r3, #48]	; 0x30
 800a53a:	e00d      	b.n	800a558 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
 800a53e:	2b22      	cmp	r3, #34	; 0x22
 800a540:	d002      	beq.n	800a548 <I2C_ITSlaveCplt+0x50>
 800a542:	7bfb      	ldrb	r3, [r7, #15]
 800a544:	2b2a      	cmp	r3, #42	; 0x2a
 800a546:	d107      	bne.n	800a558 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a548:	f248 0102 	movw	r1, #32770	; 0x8002
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fe91 	bl	800b274 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2222      	movs	r2, #34	; 0x22
 800a556:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	685a      	ldr	r2, [r3, #4]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a566:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6859      	ldr	r1, [r3, #4]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	4b80      	ldr	r3, [pc, #512]	; (800a774 <I2C_ITSlaveCplt+0x27c>)
 800a574:	400b      	ands	r3, r1
 800a576:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 fb02 	bl	800ab82 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	0b9b      	lsrs	r3, r3, #14
 800a582:	f003 0301 	and.w	r3, r3, #1
 800a586:	2b00      	cmp	r3, #0
 800a588:	d07a      	beq.n	800a680 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a598:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 8111 	beq.w	800a7c6 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a73      	ldr	r2, [pc, #460]	; (800a778 <I2C_ITSlaveCplt+0x280>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d059      	beq.n	800a664 <I2C_ITSlaveCplt+0x16c>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a71      	ldr	r2, [pc, #452]	; (800a77c <I2C_ITSlaveCplt+0x284>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d053      	beq.n	800a664 <I2C_ITSlaveCplt+0x16c>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a6f      	ldr	r2, [pc, #444]	; (800a780 <I2C_ITSlaveCplt+0x288>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d04d      	beq.n	800a664 <I2C_ITSlaveCplt+0x16c>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a6d      	ldr	r2, [pc, #436]	; (800a784 <I2C_ITSlaveCplt+0x28c>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d047      	beq.n	800a664 <I2C_ITSlaveCplt+0x16c>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a6b      	ldr	r2, [pc, #428]	; (800a788 <I2C_ITSlaveCplt+0x290>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d041      	beq.n	800a664 <I2C_ITSlaveCplt+0x16c>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a69      	ldr	r2, [pc, #420]	; (800a78c <I2C_ITSlaveCplt+0x294>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d03b      	beq.n	800a664 <I2C_ITSlaveCplt+0x16c>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a67      	ldr	r2, [pc, #412]	; (800a790 <I2C_ITSlaveCplt+0x298>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d035      	beq.n	800a664 <I2C_ITSlaveCplt+0x16c>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a65      	ldr	r2, [pc, #404]	; (800a794 <I2C_ITSlaveCplt+0x29c>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d02f      	beq.n	800a664 <I2C_ITSlaveCplt+0x16c>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a63      	ldr	r2, [pc, #396]	; (800a798 <I2C_ITSlaveCplt+0x2a0>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d029      	beq.n	800a664 <I2C_ITSlaveCplt+0x16c>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a61      	ldr	r2, [pc, #388]	; (800a79c <I2C_ITSlaveCplt+0x2a4>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d023      	beq.n	800a664 <I2C_ITSlaveCplt+0x16c>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a5f      	ldr	r2, [pc, #380]	; (800a7a0 <I2C_ITSlaveCplt+0x2a8>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d01d      	beq.n	800a664 <I2C_ITSlaveCplt+0x16c>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a5d      	ldr	r2, [pc, #372]	; (800a7a4 <I2C_ITSlaveCplt+0x2ac>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d017      	beq.n	800a664 <I2C_ITSlaveCplt+0x16c>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a5b      	ldr	r2, [pc, #364]	; (800a7a8 <I2C_ITSlaveCplt+0x2b0>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d011      	beq.n	800a664 <I2C_ITSlaveCplt+0x16c>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a59      	ldr	r2, [pc, #356]	; (800a7ac <I2C_ITSlaveCplt+0x2b4>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d00b      	beq.n	800a664 <I2C_ITSlaveCplt+0x16c>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a57      	ldr	r2, [pc, #348]	; (800a7b0 <I2C_ITSlaveCplt+0x2b8>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d005      	beq.n	800a664 <I2C_ITSlaveCplt+0x16c>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a55      	ldr	r2, [pc, #340]	; (800a7b4 <I2C_ITSlaveCplt+0x2bc>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d105      	bne.n	800a670 <I2C_ITSlaveCplt+0x178>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	e004      	b.n	800a67a <I2C_ITSlaveCplt+0x182>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	b29b      	uxth	r3, r3
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	8553      	strh	r3, [r2, #42]	; 0x2a
 800a67e:	e0a2      	b.n	800a7c6 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	0bdb      	lsrs	r3, r3, #15
 800a684:	f003 0301 	and.w	r3, r3, #1
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 809c 	beq.w	800a7c6 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a69c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 808f 	beq.w	800a7c6 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a32      	ldr	r2, [pc, #200]	; (800a778 <I2C_ITSlaveCplt+0x280>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d059      	beq.n	800a768 <I2C_ITSlaveCplt+0x270>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a30      	ldr	r2, [pc, #192]	; (800a77c <I2C_ITSlaveCplt+0x284>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d053      	beq.n	800a768 <I2C_ITSlaveCplt+0x270>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a2e      	ldr	r2, [pc, #184]	; (800a780 <I2C_ITSlaveCplt+0x288>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d04d      	beq.n	800a768 <I2C_ITSlaveCplt+0x270>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a2c      	ldr	r2, [pc, #176]	; (800a784 <I2C_ITSlaveCplt+0x28c>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d047      	beq.n	800a768 <I2C_ITSlaveCplt+0x270>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a2a      	ldr	r2, [pc, #168]	; (800a788 <I2C_ITSlaveCplt+0x290>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d041      	beq.n	800a768 <I2C_ITSlaveCplt+0x270>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a28      	ldr	r2, [pc, #160]	; (800a78c <I2C_ITSlaveCplt+0x294>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d03b      	beq.n	800a768 <I2C_ITSlaveCplt+0x270>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a26      	ldr	r2, [pc, #152]	; (800a790 <I2C_ITSlaveCplt+0x298>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d035      	beq.n	800a768 <I2C_ITSlaveCplt+0x270>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a24      	ldr	r2, [pc, #144]	; (800a794 <I2C_ITSlaveCplt+0x29c>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d02f      	beq.n	800a768 <I2C_ITSlaveCplt+0x270>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a22      	ldr	r2, [pc, #136]	; (800a798 <I2C_ITSlaveCplt+0x2a0>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d029      	beq.n	800a768 <I2C_ITSlaveCplt+0x270>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a20      	ldr	r2, [pc, #128]	; (800a79c <I2C_ITSlaveCplt+0x2a4>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d023      	beq.n	800a768 <I2C_ITSlaveCplt+0x270>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a1e      	ldr	r2, [pc, #120]	; (800a7a0 <I2C_ITSlaveCplt+0x2a8>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d01d      	beq.n	800a768 <I2C_ITSlaveCplt+0x270>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a1c      	ldr	r2, [pc, #112]	; (800a7a4 <I2C_ITSlaveCplt+0x2ac>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d017      	beq.n	800a768 <I2C_ITSlaveCplt+0x270>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a1a      	ldr	r2, [pc, #104]	; (800a7a8 <I2C_ITSlaveCplt+0x2b0>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d011      	beq.n	800a768 <I2C_ITSlaveCplt+0x270>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a18      	ldr	r2, [pc, #96]	; (800a7ac <I2C_ITSlaveCplt+0x2b4>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d00b      	beq.n	800a768 <I2C_ITSlaveCplt+0x270>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a16      	ldr	r2, [pc, #88]	; (800a7b0 <I2C_ITSlaveCplt+0x2b8>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d005      	beq.n	800a768 <I2C_ITSlaveCplt+0x270>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a14      	ldr	r2, [pc, #80]	; (800a7b4 <I2C_ITSlaveCplt+0x2bc>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d127      	bne.n	800a7b8 <I2C_ITSlaveCplt+0x2c0>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	b29b      	uxth	r3, r3
 800a772:	e026      	b.n	800a7c2 <I2C_ITSlaveCplt+0x2ca>
 800a774:	fe00e800 	.word	0xfe00e800
 800a778:	40020010 	.word	0x40020010
 800a77c:	40020028 	.word	0x40020028
 800a780:	40020040 	.word	0x40020040
 800a784:	40020058 	.word	0x40020058
 800a788:	40020070 	.word	0x40020070
 800a78c:	40020088 	.word	0x40020088
 800a790:	400200a0 	.word	0x400200a0
 800a794:	400200b8 	.word	0x400200b8
 800a798:	40020410 	.word	0x40020410
 800a79c:	40020428 	.word	0x40020428
 800a7a0:	40020440 	.word	0x40020440
 800a7a4:	40020458 	.word	0x40020458
 800a7a8:	40020470 	.word	0x40020470
 800a7ac:	40020488 	.word	0x40020488
 800a7b0:	400204a0 	.word	0x400204a0
 800a7b4:	400204b8 	.word	0x400204b8
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	089b      	lsrs	r3, r3, #2
 800a7ca:	f003 0301 	and.w	r3, r3, #1
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d020      	beq.n	800a814 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	f023 0304 	bic.w	r3, r3, #4
 800a7d8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	b2d2      	uxtb	r2, r2
 800a7e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ec:	1c5a      	adds	r2, r3, #1
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00c      	beq.n	800a814 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7fe:	3b01      	subs	r3, #1
 800a800:	b29a      	uxth	r2, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	3b01      	subs	r3, #1
 800a80e:	b29a      	uxth	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a818:	b29b      	uxth	r3, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d005      	beq.n	800a82a <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a822:	f043 0204 	orr.w	r2, r3, #4
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d010      	beq.n	800a862 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a844:	4619      	mov	r1, r3
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f8a4 	bl	800a994 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a852:	b2db      	uxtb	r3, r3
 800a854:	2b28      	cmp	r3, #40	; 0x28
 800a856:	d141      	bne.n	800a8dc <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a858:	6979      	ldr	r1, [r7, #20]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f844 	bl	800a8e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a860:	e03c      	b.n	800a8dc <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a866:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a86a:	d014      	beq.n	800a896 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7ff fd1a 	bl	800a2a6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a1b      	ldr	r2, [pc, #108]	; (800a8e4 <I2C_ITSlaveCplt+0x3ec>)
 800a876:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2220      	movs	r2, #32
 800a87c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f7fe ff98 	bl	80097c4 <HAL_I2C_ListenCpltCallback>
}
 800a894:	e022      	b.n	800a8dc <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b22      	cmp	r3, #34	; 0x22
 800a8a0:	d10e      	bne.n	800a8c0 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2220      	movs	r2, #32
 800a8a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f7fe ff6b 	bl	8009794 <HAL_I2C_SlaveRxCpltCallback>
}
 800a8be:	e00d      	b.n	800a8dc <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2220      	movs	r2, #32
 800a8c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f7fe ff52 	bl	8009780 <HAL_I2C_SlaveTxCpltCallback>
}
 800a8dc:	bf00      	nop
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	ffff0000 	.word	0xffff0000

0800a8e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a26      	ldr	r2, [pc, #152]	; (800a990 <I2C_ITListenCplt+0xa8>)
 800a8f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2220      	movs	r2, #32
 800a902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	089b      	lsrs	r3, r3, #2
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d022      	beq.n	800a966 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92a:	b2d2      	uxtb	r2, r2
 800a92c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d012      	beq.n	800a966 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a944:	3b01      	subs	r3, #1
 800a946:	b29a      	uxth	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a950:	b29b      	uxth	r3, r3
 800a952:	3b01      	subs	r3, #1
 800a954:	b29a      	uxth	r2, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a95e:	f043 0204 	orr.w	r2, r3, #4
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a966:	f248 0103 	movw	r1, #32771	; 0x8003
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fc82 	bl	800b274 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2210      	movs	r2, #16
 800a976:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f7fe ff1f 	bl	80097c4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a986:	bf00      	nop
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	ffff0000 	.word	0xffff0000

0800a994 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a5d      	ldr	r2, [pc, #372]	; (800ab28 <I2C_ITError+0x194>)
 800a9b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	431a      	orrs	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a9c6:	7bfb      	ldrb	r3, [r7, #15]
 800a9c8:	2b28      	cmp	r3, #40	; 0x28
 800a9ca:	d005      	beq.n	800a9d8 <I2C_ITError+0x44>
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
 800a9ce:	2b29      	cmp	r3, #41	; 0x29
 800a9d0:	d002      	beq.n	800a9d8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a9d2:	7bfb      	ldrb	r3, [r7, #15]
 800a9d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a9d6:	d10b      	bne.n	800a9f0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a9d8:	2103      	movs	r1, #3
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fc4a 	bl	800b274 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2228      	movs	r2, #40	; 0x28
 800a9e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a50      	ldr	r2, [pc, #320]	; (800ab2c <I2C_ITError+0x198>)
 800a9ec:	635a      	str	r2, [r3, #52]	; 0x34
 800a9ee:	e011      	b.n	800aa14 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a9f0:	f248 0103 	movw	r1, #32771	; 0x8003
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fc3d 	bl	800b274 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b60      	cmp	r3, #96	; 0x60
 800aa04:	d003      	beq.n	800aa0e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2220      	movs	r2, #32
 800aa0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa18:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d039      	beq.n	800aa96 <I2C_ITError+0x102>
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2b11      	cmp	r3, #17
 800aa26:	d002      	beq.n	800aa2e <I2C_ITError+0x9a>
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	2b21      	cmp	r3, #33	; 0x21
 800aa2c:	d133      	bne.n	800aa96 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa3c:	d107      	bne.n	800aa4e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800aa4c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fd fce4 	bl	8008420 <HAL_DMA_GetState>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d017      	beq.n	800aa8e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa62:	4a33      	ldr	r2, [pc, #204]	; (800ab30 <I2C_ITError+0x19c>)
 800aa64:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fc fb66 	bl	8007144 <HAL_DMA_Abort_IT>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d04d      	beq.n	800ab1a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aa88:	4610      	mov	r0, r2
 800aa8a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800aa8c:	e045      	b.n	800ab1a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f850 	bl	800ab34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800aa94:	e041      	b.n	800ab1a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d039      	beq.n	800ab12 <I2C_ITError+0x17e>
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	2b12      	cmp	r3, #18
 800aaa2:	d002      	beq.n	800aaaa <I2C_ITError+0x116>
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	2b22      	cmp	r3, #34	; 0x22
 800aaa8:	d133      	bne.n	800ab12 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aab8:	d107      	bne.n	800aaca <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aac8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aace:	4618      	mov	r0, r3
 800aad0:	f7fd fca6 	bl	8008420 <HAL_DMA_GetState>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d017      	beq.n	800ab0a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aade:	4a14      	ldr	r2, [pc, #80]	; (800ab30 <I2C_ITError+0x19c>)
 800aae0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fc fb28 	bl	8007144 <HAL_DMA_Abort_IT>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d011      	beq.n	800ab1e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aafe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ab04:	4610      	mov	r0, r2
 800ab06:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ab08:	e009      	b.n	800ab1e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f812 	bl	800ab34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ab10:	e005      	b.n	800ab1e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 f80e 	bl	800ab34 <I2C_TreatErrorCallback>
  }
}
 800ab18:	e002      	b.n	800ab20 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ab1a:	bf00      	nop
 800ab1c:	e000      	b.n	800ab20 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ab1e:	bf00      	nop
}
 800ab20:	bf00      	nop
 800ab22:	3710      	adds	r7, #16
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	ffff0000 	.word	0xffff0000
 800ab2c:	08009829 	.word	0x08009829
 800ab30:	0800aed1 	.word	0x0800aed1

0800ab34 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	2b60      	cmp	r3, #96	; 0x60
 800ab46:	d10e      	bne.n	800ab66 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2220      	movs	r2, #32
 800ab4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7fe fe58 	bl	8009814 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ab64:	e009      	b.n	800ab7a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f7fe fe43 	bl	8009800 <HAL_I2C_ErrorCallback>
}
 800ab7a:	bf00      	nop
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ab82:	b480      	push	{r7}
 800ab84:	b083      	sub	sp, #12
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	699b      	ldr	r3, [r3, #24]
 800ab90:	f003 0302 	and.w	r3, r3, #2
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d103      	bne.n	800aba0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d007      	beq.n	800abbe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	699a      	ldr	r2, [r3, #24]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f042 0201 	orr.w	r2, r2, #1
 800abbc:	619a      	str	r2, [r3, #24]
  }
}
 800abbe:	bf00      	nop
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b084      	sub	sp, #16
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800abe6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abec:	b29b      	uxth	r3, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d104      	bne.n	800abfc <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800abf2:	2120      	movs	r1, #32
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f000 fad9 	bl	800b1ac <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800abfa:	e02d      	b.n	800ac58 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ac04:	441a      	add	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	2bff      	cmp	r3, #255	; 0xff
 800ac12:	d903      	bls.n	800ac1c <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	22ff      	movs	r2, #255	; 0xff
 800ac18:	851a      	strh	r2, [r3, #40]	; 0x28
 800ac1a:	e004      	b.n	800ac26 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3324      	adds	r3, #36	; 0x24
 800ac30:	4619      	mov	r1, r3
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac36:	461a      	mov	r2, r3
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac3c:	f7fb fcfa 	bl	8006634 <HAL_DMA_Start_IT>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d004      	beq.n	800ac50 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ac46:	2110      	movs	r1, #16
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f7ff fea3 	bl	800a994 <I2C_ITError>
}
 800ac4e:	e003      	b.n	800ac58 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800ac50:	2140      	movs	r1, #64	; 0x40
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f000 faaa 	bl	800b1ac <I2C_Enable_IRQ>
}
 800ac58:	bf00      	nop
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac70:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d076      	beq.n	800ad68 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a83      	ldr	r2, [pc, #524]	; (800ae90 <I2C_DMAError+0x230>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d059      	beq.n	800ad3a <I2C_DMAError+0xda>
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a81      	ldr	r2, [pc, #516]	; (800ae94 <I2C_DMAError+0x234>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d053      	beq.n	800ad3a <I2C_DMAError+0xda>
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a7f      	ldr	r2, [pc, #508]	; (800ae98 <I2C_DMAError+0x238>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d04d      	beq.n	800ad3a <I2C_DMAError+0xda>
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a7d      	ldr	r2, [pc, #500]	; (800ae9c <I2C_DMAError+0x23c>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d047      	beq.n	800ad3a <I2C_DMAError+0xda>
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a7b      	ldr	r2, [pc, #492]	; (800aea0 <I2C_DMAError+0x240>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d041      	beq.n	800ad3a <I2C_DMAError+0xda>
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a79      	ldr	r2, [pc, #484]	; (800aea4 <I2C_DMAError+0x244>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d03b      	beq.n	800ad3a <I2C_DMAError+0xda>
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a77      	ldr	r2, [pc, #476]	; (800aea8 <I2C_DMAError+0x248>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d035      	beq.n	800ad3a <I2C_DMAError+0xda>
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a75      	ldr	r2, [pc, #468]	; (800aeac <I2C_DMAError+0x24c>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d02f      	beq.n	800ad3a <I2C_DMAError+0xda>
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a73      	ldr	r2, [pc, #460]	; (800aeb0 <I2C_DMAError+0x250>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d029      	beq.n	800ad3a <I2C_DMAError+0xda>
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a71      	ldr	r2, [pc, #452]	; (800aeb4 <I2C_DMAError+0x254>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d023      	beq.n	800ad3a <I2C_DMAError+0xda>
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a6f      	ldr	r2, [pc, #444]	; (800aeb8 <I2C_DMAError+0x258>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d01d      	beq.n	800ad3a <I2C_DMAError+0xda>
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a6d      	ldr	r2, [pc, #436]	; (800aebc <I2C_DMAError+0x25c>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d017      	beq.n	800ad3a <I2C_DMAError+0xda>
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a6b      	ldr	r2, [pc, #428]	; (800aec0 <I2C_DMAError+0x260>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d011      	beq.n	800ad3a <I2C_DMAError+0xda>
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a69      	ldr	r2, [pc, #420]	; (800aec4 <I2C_DMAError+0x264>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d00b      	beq.n	800ad3a <I2C_DMAError+0xda>
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a67      	ldr	r2, [pc, #412]	; (800aec8 <I2C_DMAError+0x268>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d005      	beq.n	800ad3a <I2C_DMAError+0xda>
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a65      	ldr	r2, [pc, #404]	; (800aecc <I2C_DMAError+0x26c>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d109      	bne.n	800ad4e <I2C_DMAError+0xee>
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	bf0c      	ite	eq
 800ad46:	2301      	moveq	r3, #1
 800ad48:	2300      	movne	r3, #0
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	e008      	b.n	800ad60 <I2C_DMAError+0x100>
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	bf0c      	ite	eq
 800ad5a:	2301      	moveq	r3, #1
 800ad5c:	2300      	movne	r3, #0
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d001      	beq.n	800ad68 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800ad64:	2301      	movs	r3, #1
 800ad66:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d076      	beq.n	800ae5e <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a46      	ldr	r2, [pc, #280]	; (800ae90 <I2C_DMAError+0x230>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d059      	beq.n	800ae30 <I2C_DMAError+0x1d0>
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a44      	ldr	r2, [pc, #272]	; (800ae94 <I2C_DMAError+0x234>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d053      	beq.n	800ae30 <I2C_DMAError+0x1d0>
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a42      	ldr	r2, [pc, #264]	; (800ae98 <I2C_DMAError+0x238>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d04d      	beq.n	800ae30 <I2C_DMAError+0x1d0>
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a40      	ldr	r2, [pc, #256]	; (800ae9c <I2C_DMAError+0x23c>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d047      	beq.n	800ae30 <I2C_DMAError+0x1d0>
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a3e      	ldr	r2, [pc, #248]	; (800aea0 <I2C_DMAError+0x240>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d041      	beq.n	800ae30 <I2C_DMAError+0x1d0>
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a3c      	ldr	r2, [pc, #240]	; (800aea4 <I2C_DMAError+0x244>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d03b      	beq.n	800ae30 <I2C_DMAError+0x1d0>
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a3a      	ldr	r2, [pc, #232]	; (800aea8 <I2C_DMAError+0x248>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d035      	beq.n	800ae30 <I2C_DMAError+0x1d0>
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a38      	ldr	r2, [pc, #224]	; (800aeac <I2C_DMAError+0x24c>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d02f      	beq.n	800ae30 <I2C_DMAError+0x1d0>
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a36      	ldr	r2, [pc, #216]	; (800aeb0 <I2C_DMAError+0x250>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d029      	beq.n	800ae30 <I2C_DMAError+0x1d0>
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a34      	ldr	r2, [pc, #208]	; (800aeb4 <I2C_DMAError+0x254>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d023      	beq.n	800ae30 <I2C_DMAError+0x1d0>
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a32      	ldr	r2, [pc, #200]	; (800aeb8 <I2C_DMAError+0x258>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d01d      	beq.n	800ae30 <I2C_DMAError+0x1d0>
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a30      	ldr	r2, [pc, #192]	; (800aebc <I2C_DMAError+0x25c>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d017      	beq.n	800ae30 <I2C_DMAError+0x1d0>
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a2e      	ldr	r2, [pc, #184]	; (800aec0 <I2C_DMAError+0x260>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d011      	beq.n	800ae30 <I2C_DMAError+0x1d0>
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a2c      	ldr	r2, [pc, #176]	; (800aec4 <I2C_DMAError+0x264>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d00b      	beq.n	800ae30 <I2C_DMAError+0x1d0>
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a2a      	ldr	r2, [pc, #168]	; (800aec8 <I2C_DMAError+0x268>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d005      	beq.n	800ae30 <I2C_DMAError+0x1d0>
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a28      	ldr	r2, [pc, #160]	; (800aecc <I2C_DMAError+0x26c>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d109      	bne.n	800ae44 <I2C_DMAError+0x1e4>
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	bf0c      	ite	eq
 800ae3c:	2301      	moveq	r3, #1
 800ae3e:	2300      	movne	r3, #0
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	e008      	b.n	800ae56 <I2C_DMAError+0x1f6>
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	bf0c      	ite	eq
 800ae50:	2301      	moveq	r3, #1
 800ae52:	2300      	movne	r3, #0
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d001      	beq.n	800ae5e <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7fd faec 	bl	800843c <HAL_DMA_GetError>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	d00e      	beq.n	800ae88 <I2C_DMAError+0x228>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00b      	beq.n	800ae88 <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	685a      	ldr	r2, [r3, #4]
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae7e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ae80:	2110      	movs	r1, #16
 800ae82:	68b8      	ldr	r0, [r7, #8]
 800ae84:	f7ff fd86 	bl	800a994 <I2C_ITError>
  }
}
 800ae88:	bf00      	nop
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	40020010 	.word	0x40020010
 800ae94:	40020028 	.word	0x40020028
 800ae98:	40020040 	.word	0x40020040
 800ae9c:	40020058 	.word	0x40020058
 800aea0:	40020070 	.word	0x40020070
 800aea4:	40020088 	.word	0x40020088
 800aea8:	400200a0 	.word	0x400200a0
 800aeac:	400200b8 	.word	0x400200b8
 800aeb0:	40020410 	.word	0x40020410
 800aeb4:	40020428 	.word	0x40020428
 800aeb8:	40020440 	.word	0x40020440
 800aebc:	40020458 	.word	0x40020458
 800aec0:	40020470 	.word	0x40020470
 800aec4:	40020488 	.word	0x40020488
 800aec8:	400204a0 	.word	0x400204a0
 800aecc:	400204b8 	.word	0x400204b8

0800aed0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aedc:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d003      	beq.n	800aeee <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeea:	2200      	movs	r2, #0
 800aeec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aefa:	2200      	movs	r2, #0
 800aefc:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f7ff fe18 	bl	800ab34 <I2C_TreatErrorCallback>
}
 800af04:	bf00      	nop
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	603b      	str	r3, [r7, #0]
 800af18:	4613      	mov	r3, r2
 800af1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af1c:	e022      	b.n	800af64 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af24:	d01e      	beq.n	800af64 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af26:	f7fa fedd 	bl	8005ce4 <HAL_GetTick>
 800af2a:	4602      	mov	r2, r0
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	1ad3      	subs	r3, r2, r3
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	429a      	cmp	r2, r3
 800af34:	d302      	bcc.n	800af3c <I2C_WaitOnFlagUntilTimeout+0x30>
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d113      	bne.n	800af64 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af40:	f043 0220 	orr.w	r2, r3, #32
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2220      	movs	r2, #32
 800af4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	e00f      	b.n	800af84 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	699a      	ldr	r2, [r3, #24]
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	4013      	ands	r3, r2
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	429a      	cmp	r2, r3
 800af72:	bf0c      	ite	eq
 800af74:	2301      	moveq	r3, #1
 800af76:	2300      	movne	r3, #0
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	461a      	mov	r2, r3
 800af7c:	79fb      	ldrb	r3, [r7, #7]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d0cd      	beq.n	800af1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800af98:	e02c      	b.n	800aff4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	68b9      	ldr	r1, [r7, #8]
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f000 f870 	bl	800b084 <I2C_IsAcknowledgeFailed>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	e02a      	b.n	800b004 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb4:	d01e      	beq.n	800aff4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afb6:	f7fa fe95 	bl	8005ce4 <HAL_GetTick>
 800afba:	4602      	mov	r2, r0
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	1ad3      	subs	r3, r2, r3
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d302      	bcc.n	800afcc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d113      	bne.n	800aff4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afd0:	f043 0220 	orr.w	r2, r3, #32
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2220      	movs	r2, #32
 800afdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	e007      	b.n	800b004 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	699b      	ldr	r3, [r3, #24]
 800affa:	f003 0302 	and.w	r3, r3, #2
 800affe:	2b02      	cmp	r3, #2
 800b000:	d1cb      	bne.n	800af9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b018:	e028      	b.n	800b06c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	68b9      	ldr	r1, [r7, #8]
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f000 f830 	bl	800b084 <I2C_IsAcknowledgeFailed>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	e026      	b.n	800b07c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b02e:	f7fa fe59 	bl	8005ce4 <HAL_GetTick>
 800b032:	4602      	mov	r2, r0
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	1ad3      	subs	r3, r2, r3
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d302      	bcc.n	800b044 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d113      	bne.n	800b06c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b048:	f043 0220 	orr.w	r2, r3, #32
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2220      	movs	r2, #32
 800b054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	e007      	b.n	800b07c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	699b      	ldr	r3, [r3, #24]
 800b072:	f003 0320 	and.w	r3, r3, #32
 800b076:	2b20      	cmp	r3, #32
 800b078:	d1cf      	bne.n	800b01a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	699b      	ldr	r3, [r3, #24]
 800b096:	f003 0310 	and.w	r3, r3, #16
 800b09a:	2b10      	cmp	r3, #16
 800b09c:	d151      	bne.n	800b142 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b09e:	e022      	b.n	800b0e6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a6:	d01e      	beq.n	800b0e6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0a8:	f7fa fe1c 	bl	8005ce4 <HAL_GetTick>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	1ad3      	subs	r3, r2, r3
 800b0b2:	68ba      	ldr	r2, [r7, #8]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d302      	bcc.n	800b0be <I2C_IsAcknowledgeFailed+0x3a>
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d113      	bne.n	800b0e6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0c2:	f043 0220 	orr.w	r2, r3, #32
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2220      	movs	r2, #32
 800b0ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e02e      	b.n	800b144 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	699b      	ldr	r3, [r3, #24]
 800b0ec:	f003 0320 	and.w	r3, r3, #32
 800b0f0:	2b20      	cmp	r3, #32
 800b0f2:	d1d5      	bne.n	800b0a0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2210      	movs	r2, #16
 800b0fa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2220      	movs	r2, #32
 800b102:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f7ff fd3c 	bl	800ab82 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	6859      	ldr	r1, [r3, #4]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	4b0d      	ldr	r3, [pc, #52]	; (800b14c <I2C_IsAcknowledgeFailed+0xc8>)
 800b116:	400b      	ands	r3, r1
 800b118:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b11e:	f043 0204 	orr.w	r2, r3, #4
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2220      	movs	r2, #32
 800b12a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e000      	b.n	800b144 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b142:	2300      	movs	r3, #0
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	fe00e800 	.word	0xfe00e800

0800b150 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	607b      	str	r3, [r7, #4]
 800b15a:	460b      	mov	r3, r1
 800b15c:	817b      	strh	r3, [r7, #10]
 800b15e:	4613      	mov	r3, r2
 800b160:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	685a      	ldr	r2, [r3, #4]
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	0d5b      	lsrs	r3, r3, #21
 800b16c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b170:	4b0d      	ldr	r3, [pc, #52]	; (800b1a8 <I2C_TransferConfig+0x58>)
 800b172:	430b      	orrs	r3, r1
 800b174:	43db      	mvns	r3, r3
 800b176:	ea02 0103 	and.w	r1, r2, r3
 800b17a:	897b      	ldrh	r3, [r7, #10]
 800b17c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b180:	7a7b      	ldrb	r3, [r7, #9]
 800b182:	041b      	lsls	r3, r3, #16
 800b184:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b188:	431a      	orrs	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	431a      	orrs	r2, r3
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	431a      	orrs	r2, r3
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	430a      	orrs	r2, r1
 800b198:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b19a:	bf00      	nop
 800b19c:	3714      	adds	r7, #20
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	03ff63ff 	.word	0x03ff63ff

0800b1ac <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1c0:	4a2a      	ldr	r2, [pc, #168]	; (800b26c <I2C_Enable_IRQ+0xc0>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d004      	beq.n	800b1d0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b1ca:	4a29      	ldr	r2, [pc, #164]	; (800b270 <I2C_Enable_IRQ+0xc4>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d11d      	bne.n	800b20c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b1d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	da03      	bge.n	800b1e0 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b1de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b1e0:	887b      	ldrh	r3, [r7, #2]
 800b1e2:	2b10      	cmp	r3, #16
 800b1e4:	d103      	bne.n	800b1ee <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b1ec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b1ee:	887b      	ldrh	r3, [r7, #2]
 800b1f0:	2b20      	cmp	r3, #32
 800b1f2:	d103      	bne.n	800b1fc <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b1fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b1fc:	887b      	ldrh	r3, [r7, #2]
 800b1fe:	2b40      	cmp	r3, #64	; 0x40
 800b200:	d125      	bne.n	800b24e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b208:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b20a:	e020      	b.n	800b24e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b20c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b210:	2b00      	cmp	r3, #0
 800b212:	da03      	bge.n	800b21c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b21a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b21c:	887b      	ldrh	r3, [r7, #2]
 800b21e:	f003 0301 	and.w	r3, r3, #1
 800b222:	2b00      	cmp	r3, #0
 800b224:	d003      	beq.n	800b22e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800b22c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b22e:	887b      	ldrh	r3, [r7, #2]
 800b230:	f003 0302 	and.w	r3, r3, #2
 800b234:	2b00      	cmp	r3, #0
 800b236:	d003      	beq.n	800b240 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800b23e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b240:	887b      	ldrh	r3, [r7, #2]
 800b242:	2b20      	cmp	r3, #32
 800b244:	d103      	bne.n	800b24e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f043 0320 	orr.w	r3, r3, #32
 800b24c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	6819      	ldr	r1, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	430a      	orrs	r2, r1
 800b25c:	601a      	str	r2, [r3, #0]
}
 800b25e:	bf00      	nop
 800b260:	3714      	adds	r7, #20
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	08009a2f 	.word	0x08009a2f
 800b270:	08009c15 	.word	0x08009c15

0800b274 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	460b      	mov	r3, r1
 800b27e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b280:	2300      	movs	r3, #0
 800b282:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b284:	887b      	ldrh	r3, [r7, #2]
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00f      	beq.n	800b2ae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800b294:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b2a2:	2b28      	cmp	r3, #40	; 0x28
 800b2a4:	d003      	beq.n	800b2ae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b2ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b2ae:	887b      	ldrh	r3, [r7, #2]
 800b2b0:	f003 0302 	and.w	r3, r3, #2
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00f      	beq.n	800b2d8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800b2be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b2cc:	2b28      	cmp	r3, #40	; 0x28
 800b2ce:	d003      	beq.n	800b2d8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b2d6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b2d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	da03      	bge.n	800b2e8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b2e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b2e8:	887b      	ldrh	r3, [r7, #2]
 800b2ea:	2b10      	cmp	r3, #16
 800b2ec:	d103      	bne.n	800b2f6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b2f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b2f6:	887b      	ldrh	r3, [r7, #2]
 800b2f8:	2b20      	cmp	r3, #32
 800b2fa:	d103      	bne.n	800b304 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f043 0320 	orr.w	r3, r3, #32
 800b302:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b304:	887b      	ldrh	r3, [r7, #2]
 800b306:	2b40      	cmp	r3, #64	; 0x40
 800b308:	d103      	bne.n	800b312 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b310:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	6819      	ldr	r1, [r3, #0]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	43da      	mvns	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	400a      	ands	r2, r1
 800b322:	601a      	str	r2, [r3, #0]
}
 800b324:	bf00      	nop
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b340:	b2db      	uxtb	r3, r3
 800b342:	2b20      	cmp	r3, #32
 800b344:	d138      	bne.n	800b3b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d101      	bne.n	800b354 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b350:	2302      	movs	r3, #2
 800b352:	e032      	b.n	800b3ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2224      	movs	r2, #36	; 0x24
 800b360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f022 0201 	bic.w	r2, r2, #1
 800b372:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b382:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	6819      	ldr	r1, [r3, #0]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	430a      	orrs	r2, r1
 800b392:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f042 0201 	orr.w	r2, r2, #1
 800b3a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2220      	movs	r2, #32
 800b3a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	e000      	b.n	800b3ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b3b8:	2302      	movs	r3, #2
  }
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	370c      	adds	r7, #12
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	b085      	sub	sp, #20
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	2b20      	cmp	r3, #32
 800b3da:	d139      	bne.n	800b450 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d101      	bne.n	800b3ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b3e6:	2302      	movs	r3, #2
 800b3e8:	e033      	b.n	800b452 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2224      	movs	r2, #36	; 0x24
 800b3f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f022 0201 	bic.w	r2, r2, #1
 800b408:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b418:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	021b      	lsls	r3, r3, #8
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	4313      	orrs	r3, r2
 800b422:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f042 0201 	orr.w	r2, r2, #1
 800b43a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2220      	movs	r2, #32
 800b440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b44c:	2300      	movs	r3, #0
 800b44e:	e000      	b.n	800b452 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b450:	2302      	movs	r3, #2
  }
}
 800b452:	4618      	mov	r0, r3
 800b454:	3714      	adds	r7, #20
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
	...

0800b460 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b468:	4b19      	ldr	r3, [pc, #100]	; (800b4d0 <HAL_PWREx_ConfigSupply+0x70>)
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	f003 0304 	and.w	r3, r3, #4
 800b470:	2b04      	cmp	r3, #4
 800b472:	d00a      	beq.n	800b48a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b474:	4b16      	ldr	r3, [pc, #88]	; (800b4d0 <HAL_PWREx_ConfigSupply+0x70>)
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	f003 0307 	and.w	r3, r3, #7
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d001      	beq.n	800b486 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	e01f      	b.n	800b4c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b486:	2300      	movs	r3, #0
 800b488:	e01d      	b.n	800b4c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b48a:	4b11      	ldr	r3, [pc, #68]	; (800b4d0 <HAL_PWREx_ConfigSupply+0x70>)
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	f023 0207 	bic.w	r2, r3, #7
 800b492:	490f      	ldr	r1, [pc, #60]	; (800b4d0 <HAL_PWREx_ConfigSupply+0x70>)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4313      	orrs	r3, r2
 800b498:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b49a:	f7fa fc23 	bl	8005ce4 <HAL_GetTick>
 800b49e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b4a0:	e009      	b.n	800b4b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b4a2:	f7fa fc1f 	bl	8005ce4 <HAL_GetTick>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b4b0:	d901      	bls.n	800b4b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e007      	b.n	800b4c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b4b6:	4b06      	ldr	r3, [pc, #24]	; (800b4d0 <HAL_PWREx_ConfigSupply+0x70>)
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b4be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4c2:	d1ee      	bne.n	800b4a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	58024800 	.word	0x58024800

0800b4d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b08c      	sub	sp, #48	; 0x30
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d101      	bne.n	800b4e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e3ff      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 0301 	and.w	r3, r3, #1
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f000 8087 	beq.w	800b602 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b4f4:	4b99      	ldr	r3, [pc, #612]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b4fe:	4b97      	ldr	r3, [pc, #604]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b502:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b506:	2b10      	cmp	r3, #16
 800b508:	d007      	beq.n	800b51a <HAL_RCC_OscConfig+0x46>
 800b50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50c:	2b18      	cmp	r3, #24
 800b50e:	d110      	bne.n	800b532 <HAL_RCC_OscConfig+0x5e>
 800b510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b512:	f003 0303 	and.w	r3, r3, #3
 800b516:	2b02      	cmp	r3, #2
 800b518:	d10b      	bne.n	800b532 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b51a:	4b90      	ldr	r3, [pc, #576]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b522:	2b00      	cmp	r3, #0
 800b524:	d06c      	beq.n	800b600 <HAL_RCC_OscConfig+0x12c>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d168      	bne.n	800b600 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b52e:	2301      	movs	r3, #1
 800b530:	e3d9      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b53a:	d106      	bne.n	800b54a <HAL_RCC_OscConfig+0x76>
 800b53c:	4b87      	ldr	r3, [pc, #540]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a86      	ldr	r2, [pc, #536]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b546:	6013      	str	r3, [r2, #0]
 800b548:	e02e      	b.n	800b5a8 <HAL_RCC_OscConfig+0xd4>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d10c      	bne.n	800b56c <HAL_RCC_OscConfig+0x98>
 800b552:	4b82      	ldr	r3, [pc, #520]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a81      	ldr	r2, [pc, #516]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b55c:	6013      	str	r3, [r2, #0]
 800b55e:	4b7f      	ldr	r3, [pc, #508]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a7e      	ldr	r2, [pc, #504]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b568:	6013      	str	r3, [r2, #0]
 800b56a:	e01d      	b.n	800b5a8 <HAL_RCC_OscConfig+0xd4>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b574:	d10c      	bne.n	800b590 <HAL_RCC_OscConfig+0xbc>
 800b576:	4b79      	ldr	r3, [pc, #484]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a78      	ldr	r2, [pc, #480]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b57c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b580:	6013      	str	r3, [r2, #0]
 800b582:	4b76      	ldr	r3, [pc, #472]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a75      	ldr	r2, [pc, #468]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b58c:	6013      	str	r3, [r2, #0]
 800b58e:	e00b      	b.n	800b5a8 <HAL_RCC_OscConfig+0xd4>
 800b590:	4b72      	ldr	r3, [pc, #456]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a71      	ldr	r2, [pc, #452]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b59a:	6013      	str	r3, [r2, #0]
 800b59c:	4b6f      	ldr	r3, [pc, #444]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a6e      	ldr	r2, [pc, #440]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b5a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b5a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d013      	beq.n	800b5d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5b0:	f7fa fb98 	bl	8005ce4 <HAL_GetTick>
 800b5b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b5b6:	e008      	b.n	800b5ca <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b5b8:	f7fa fb94 	bl	8005ce4 <HAL_GetTick>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	2b64      	cmp	r3, #100	; 0x64
 800b5c4:	d901      	bls.n	800b5ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	e38d      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b5ca:	4b64      	ldr	r3, [pc, #400]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d0f0      	beq.n	800b5b8 <HAL_RCC_OscConfig+0xe4>
 800b5d6:	e014      	b.n	800b602 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5d8:	f7fa fb84 	bl	8005ce4 <HAL_GetTick>
 800b5dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b5de:	e008      	b.n	800b5f2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b5e0:	f7fa fb80 	bl	8005ce4 <HAL_GetTick>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e8:	1ad3      	subs	r3, r2, r3
 800b5ea:	2b64      	cmp	r3, #100	; 0x64
 800b5ec:	d901      	bls.n	800b5f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b5ee:	2303      	movs	r3, #3
 800b5f0:	e379      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b5f2:	4b5a      	ldr	r3, [pc, #360]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1f0      	bne.n	800b5e0 <HAL_RCC_OscConfig+0x10c>
 800b5fe:	e000      	b.n	800b602 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f003 0302 	and.w	r3, r3, #2
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	f000 80ae 	beq.w	800b76c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b610:	4b52      	ldr	r3, [pc, #328]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b618:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b61a:	4b50      	ldr	r3, [pc, #320]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b620:	6a3b      	ldr	r3, [r7, #32]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d007      	beq.n	800b636 <HAL_RCC_OscConfig+0x162>
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	2b18      	cmp	r3, #24
 800b62a:	d13a      	bne.n	800b6a2 <HAL_RCC_OscConfig+0x1ce>
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	f003 0303 	and.w	r3, r3, #3
 800b632:	2b00      	cmp	r3, #0
 800b634:	d135      	bne.n	800b6a2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b636:	4b49      	ldr	r3, [pc, #292]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f003 0304 	and.w	r3, r3, #4
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d005      	beq.n	800b64e <HAL_RCC_OscConfig+0x17a>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d101      	bne.n	800b64e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e34b      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b64e:	f7fa fb79 	bl	8005d44 <HAL_GetREVID>
 800b652:	4603      	mov	r3, r0
 800b654:	f241 0203 	movw	r2, #4099	; 0x1003
 800b658:	4293      	cmp	r3, r2
 800b65a:	d817      	bhi.n	800b68c <HAL_RCC_OscConfig+0x1b8>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	2b40      	cmp	r3, #64	; 0x40
 800b662:	d108      	bne.n	800b676 <HAL_RCC_OscConfig+0x1a2>
 800b664:	4b3d      	ldr	r3, [pc, #244]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b66c:	4a3b      	ldr	r2, [pc, #236]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b66e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b672:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b674:	e07a      	b.n	800b76c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b676:	4b39      	ldr	r3, [pc, #228]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	031b      	lsls	r3, r3, #12
 800b684:	4935      	ldr	r1, [pc, #212]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b686:	4313      	orrs	r3, r2
 800b688:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b68a:	e06f      	b.n	800b76c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b68c:	4b33      	ldr	r3, [pc, #204]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	691b      	ldr	r3, [r3, #16]
 800b698:	061b      	lsls	r3, r3, #24
 800b69a:	4930      	ldr	r1, [pc, #192]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b69c:	4313      	orrs	r3, r2
 800b69e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b6a0:	e064      	b.n	800b76c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d045      	beq.n	800b736 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b6aa:	4b2c      	ldr	r3, [pc, #176]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f023 0219 	bic.w	r2, r3, #25
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	4929      	ldr	r1, [pc, #164]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6bc:	f7fa fb12 	bl	8005ce4 <HAL_GetTick>
 800b6c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b6c2:	e008      	b.n	800b6d6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b6c4:	f7fa fb0e 	bl	8005ce4 <HAL_GetTick>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6cc:	1ad3      	subs	r3, r2, r3
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	d901      	bls.n	800b6d6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	e307      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b6d6:	4b21      	ldr	r3, [pc, #132]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f003 0304 	and.w	r3, r3, #4
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d0f0      	beq.n	800b6c4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6e2:	f7fa fb2f 	bl	8005d44 <HAL_GetREVID>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	f241 0203 	movw	r2, #4099	; 0x1003
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d817      	bhi.n	800b720 <HAL_RCC_OscConfig+0x24c>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	691b      	ldr	r3, [r3, #16]
 800b6f4:	2b40      	cmp	r3, #64	; 0x40
 800b6f6:	d108      	bne.n	800b70a <HAL_RCC_OscConfig+0x236>
 800b6f8:	4b18      	ldr	r3, [pc, #96]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b700:	4a16      	ldr	r2, [pc, #88]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b706:	6053      	str	r3, [r2, #4]
 800b708:	e030      	b.n	800b76c <HAL_RCC_OscConfig+0x298>
 800b70a:	4b14      	ldr	r3, [pc, #80]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	031b      	lsls	r3, r3, #12
 800b718:	4910      	ldr	r1, [pc, #64]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b71a:	4313      	orrs	r3, r2
 800b71c:	604b      	str	r3, [r1, #4]
 800b71e:	e025      	b.n	800b76c <HAL_RCC_OscConfig+0x298>
 800b720:	4b0e      	ldr	r3, [pc, #56]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	691b      	ldr	r3, [r3, #16]
 800b72c:	061b      	lsls	r3, r3, #24
 800b72e:	490b      	ldr	r1, [pc, #44]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b730:	4313      	orrs	r3, r2
 800b732:	604b      	str	r3, [r1, #4]
 800b734:	e01a      	b.n	800b76c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b736:	4b09      	ldr	r3, [pc, #36]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a08      	ldr	r2, [pc, #32]	; (800b75c <HAL_RCC_OscConfig+0x288>)
 800b73c:	f023 0301 	bic.w	r3, r3, #1
 800b740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b742:	f7fa facf 	bl	8005ce4 <HAL_GetTick>
 800b746:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b748:	e00a      	b.n	800b760 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b74a:	f7fa facb 	bl	8005ce4 <HAL_GetTick>
 800b74e:	4602      	mov	r2, r0
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	1ad3      	subs	r3, r2, r3
 800b754:	2b02      	cmp	r3, #2
 800b756:	d903      	bls.n	800b760 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800b758:	2303      	movs	r3, #3
 800b75a:	e2c4      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
 800b75c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b760:	4ba4      	ldr	r3, [pc, #656]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f003 0304 	and.w	r3, r3, #4
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1ee      	bne.n	800b74a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f003 0310 	and.w	r3, r3, #16
 800b774:	2b00      	cmp	r3, #0
 800b776:	f000 80a9 	beq.w	800b8cc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b77a:	4b9e      	ldr	r3, [pc, #632]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b77c:	691b      	ldr	r3, [r3, #16]
 800b77e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b782:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b784:	4b9b      	ldr	r3, [pc, #620]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b788:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	2b08      	cmp	r3, #8
 800b78e:	d007      	beq.n	800b7a0 <HAL_RCC_OscConfig+0x2cc>
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	2b18      	cmp	r3, #24
 800b794:	d13a      	bne.n	800b80c <HAL_RCC_OscConfig+0x338>
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	f003 0303 	and.w	r3, r3, #3
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d135      	bne.n	800b80c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b7a0:	4b94      	ldr	r3, [pc, #592]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d005      	beq.n	800b7b8 <HAL_RCC_OscConfig+0x2e4>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	69db      	ldr	r3, [r3, #28]
 800b7b0:	2b80      	cmp	r3, #128	; 0x80
 800b7b2:	d001      	beq.n	800b7b8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e296      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b7b8:	f7fa fac4 	bl	8005d44 <HAL_GetREVID>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	f241 0203 	movw	r2, #4099	; 0x1003
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d817      	bhi.n	800b7f6 <HAL_RCC_OscConfig+0x322>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a1b      	ldr	r3, [r3, #32]
 800b7ca:	2b20      	cmp	r3, #32
 800b7cc:	d108      	bne.n	800b7e0 <HAL_RCC_OscConfig+0x30c>
 800b7ce:	4b89      	ldr	r3, [pc, #548]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b7d6:	4a87      	ldr	r2, [pc, #540]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b7d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7dc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b7de:	e075      	b.n	800b8cc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b7e0:	4b84      	ldr	r3, [pc, #528]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	069b      	lsls	r3, r3, #26
 800b7ee:	4981      	ldr	r1, [pc, #516]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b7f4:	e06a      	b.n	800b8cc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b7f6:	4b7f      	ldr	r3, [pc, #508]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a1b      	ldr	r3, [r3, #32]
 800b802:	061b      	lsls	r3, r3, #24
 800b804:	497b      	ldr	r1, [pc, #492]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b806:	4313      	orrs	r3, r2
 800b808:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b80a:	e05f      	b.n	800b8cc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	69db      	ldr	r3, [r3, #28]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d042      	beq.n	800b89a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b814:	4b77      	ldr	r3, [pc, #476]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a76      	ldr	r2, [pc, #472]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b81a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b81e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b820:	f7fa fa60 	bl	8005ce4 <HAL_GetTick>
 800b824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b826:	e008      	b.n	800b83a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b828:	f7fa fa5c 	bl	8005ce4 <HAL_GetTick>
 800b82c:	4602      	mov	r2, r0
 800b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	2b02      	cmp	r3, #2
 800b834:	d901      	bls.n	800b83a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800b836:	2303      	movs	r3, #3
 800b838:	e255      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b83a:	4b6e      	ldr	r3, [pc, #440]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b842:	2b00      	cmp	r3, #0
 800b844:	d0f0      	beq.n	800b828 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b846:	f7fa fa7d 	bl	8005d44 <HAL_GetREVID>
 800b84a:	4603      	mov	r3, r0
 800b84c:	f241 0203 	movw	r2, #4099	; 0x1003
 800b850:	4293      	cmp	r3, r2
 800b852:	d817      	bhi.n	800b884 <HAL_RCC_OscConfig+0x3b0>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a1b      	ldr	r3, [r3, #32]
 800b858:	2b20      	cmp	r3, #32
 800b85a:	d108      	bne.n	800b86e <HAL_RCC_OscConfig+0x39a>
 800b85c:	4b65      	ldr	r3, [pc, #404]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b864:	4a63      	ldr	r2, [pc, #396]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b866:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b86a:	6053      	str	r3, [r2, #4]
 800b86c:	e02e      	b.n	800b8cc <HAL_RCC_OscConfig+0x3f8>
 800b86e:	4b61      	ldr	r3, [pc, #388]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a1b      	ldr	r3, [r3, #32]
 800b87a:	069b      	lsls	r3, r3, #26
 800b87c:	495d      	ldr	r1, [pc, #372]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b87e:	4313      	orrs	r3, r2
 800b880:	604b      	str	r3, [r1, #4]
 800b882:	e023      	b.n	800b8cc <HAL_RCC_OscConfig+0x3f8>
 800b884:	4b5b      	ldr	r3, [pc, #364]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6a1b      	ldr	r3, [r3, #32]
 800b890:	061b      	lsls	r3, r3, #24
 800b892:	4958      	ldr	r1, [pc, #352]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b894:	4313      	orrs	r3, r2
 800b896:	60cb      	str	r3, [r1, #12]
 800b898:	e018      	b.n	800b8cc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b89a:	4b56      	ldr	r3, [pc, #344]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a55      	ldr	r2, [pc, #340]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b8a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8a6:	f7fa fa1d 	bl	8005ce4 <HAL_GetTick>
 800b8aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b8ac:	e008      	b.n	800b8c0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b8ae:	f7fa fa19 	bl	8005ce4 <HAL_GetTick>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b6:	1ad3      	subs	r3, r2, r3
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	d901      	bls.n	800b8c0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	e212      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b8c0:	4b4c      	ldr	r3, [pc, #304]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1f0      	bne.n	800b8ae <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f003 0308 	and.w	r3, r3, #8
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d036      	beq.n	800b946 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	695b      	ldr	r3, [r3, #20]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d019      	beq.n	800b914 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b8e0:	4b44      	ldr	r3, [pc, #272]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b8e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8e4:	4a43      	ldr	r2, [pc, #268]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b8e6:	f043 0301 	orr.w	r3, r3, #1
 800b8ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8ec:	f7fa f9fa 	bl	8005ce4 <HAL_GetTick>
 800b8f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b8f2:	e008      	b.n	800b906 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b8f4:	f7fa f9f6 	bl	8005ce4 <HAL_GetTick>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	1ad3      	subs	r3, r2, r3
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	d901      	bls.n	800b906 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800b902:	2303      	movs	r3, #3
 800b904:	e1ef      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b906:	4b3b      	ldr	r3, [pc, #236]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b90a:	f003 0302 	and.w	r3, r3, #2
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d0f0      	beq.n	800b8f4 <HAL_RCC_OscConfig+0x420>
 800b912:	e018      	b.n	800b946 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b914:	4b37      	ldr	r3, [pc, #220]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b918:	4a36      	ldr	r2, [pc, #216]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b91a:	f023 0301 	bic.w	r3, r3, #1
 800b91e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b920:	f7fa f9e0 	bl	8005ce4 <HAL_GetTick>
 800b924:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b926:	e008      	b.n	800b93a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b928:	f7fa f9dc 	bl	8005ce4 <HAL_GetTick>
 800b92c:	4602      	mov	r2, r0
 800b92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b930:	1ad3      	subs	r3, r2, r3
 800b932:	2b02      	cmp	r3, #2
 800b934:	d901      	bls.n	800b93a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800b936:	2303      	movs	r3, #3
 800b938:	e1d5      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b93a:	4b2e      	ldr	r3, [pc, #184]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b93c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b93e:	f003 0302 	and.w	r3, r3, #2
 800b942:	2b00      	cmp	r3, #0
 800b944:	d1f0      	bne.n	800b928 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f003 0320 	and.w	r3, r3, #32
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d036      	beq.n	800b9c0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	699b      	ldr	r3, [r3, #24]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d019      	beq.n	800b98e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b95a:	4b26      	ldr	r3, [pc, #152]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4a25      	ldr	r2, [pc, #148]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b964:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b966:	f7fa f9bd 	bl	8005ce4 <HAL_GetTick>
 800b96a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b96c:	e008      	b.n	800b980 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b96e:	f7fa f9b9 	bl	8005ce4 <HAL_GetTick>
 800b972:	4602      	mov	r2, r0
 800b974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	2b02      	cmp	r3, #2
 800b97a:	d901      	bls.n	800b980 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800b97c:	2303      	movs	r3, #3
 800b97e:	e1b2      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b980:	4b1c      	ldr	r3, [pc, #112]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d0f0      	beq.n	800b96e <HAL_RCC_OscConfig+0x49a>
 800b98c:	e018      	b.n	800b9c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b98e:	4b19      	ldr	r3, [pc, #100]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a18      	ldr	r2, [pc, #96]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b998:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b99a:	f7fa f9a3 	bl	8005ce4 <HAL_GetTick>
 800b99e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b9a0:	e008      	b.n	800b9b4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b9a2:	f7fa f99f 	bl	8005ce4 <HAL_GetTick>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	1ad3      	subs	r3, r2, r3
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	d901      	bls.n	800b9b4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	e198      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b9b4:	4b0f      	ldr	r3, [pc, #60]	; (800b9f4 <HAL_RCC_OscConfig+0x520>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1f0      	bne.n	800b9a2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 0304 	and.w	r3, r3, #4
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f000 8085 	beq.w	800bad8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b9ce:	4b0a      	ldr	r3, [pc, #40]	; (800b9f8 <HAL_RCC_OscConfig+0x524>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a09      	ldr	r2, [pc, #36]	; (800b9f8 <HAL_RCC_OscConfig+0x524>)
 800b9d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b9da:	f7fa f983 	bl	8005ce4 <HAL_GetTick>
 800b9de:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b9e0:	e00c      	b.n	800b9fc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b9e2:	f7fa f97f 	bl	8005ce4 <HAL_GetTick>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ea:	1ad3      	subs	r3, r2, r3
 800b9ec:	2b64      	cmp	r3, #100	; 0x64
 800b9ee:	d905      	bls.n	800b9fc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800b9f0:	2303      	movs	r3, #3
 800b9f2:	e178      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
 800b9f4:	58024400 	.word	0x58024400
 800b9f8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b9fc:	4b96      	ldr	r3, [pc, #600]	; (800bc58 <HAL_RCC_OscConfig+0x784>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d0ec      	beq.n	800b9e2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d106      	bne.n	800ba1e <HAL_RCC_OscConfig+0x54a>
 800ba10:	4b92      	ldr	r3, [pc, #584]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800ba12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba14:	4a91      	ldr	r2, [pc, #580]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800ba16:	f043 0301 	orr.w	r3, r3, #1
 800ba1a:	6713      	str	r3, [r2, #112]	; 0x70
 800ba1c:	e02d      	b.n	800ba7a <HAL_RCC_OscConfig+0x5a6>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10c      	bne.n	800ba40 <HAL_RCC_OscConfig+0x56c>
 800ba26:	4b8d      	ldr	r3, [pc, #564]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800ba28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba2a:	4a8c      	ldr	r2, [pc, #560]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800ba2c:	f023 0301 	bic.w	r3, r3, #1
 800ba30:	6713      	str	r3, [r2, #112]	; 0x70
 800ba32:	4b8a      	ldr	r3, [pc, #552]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800ba34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba36:	4a89      	ldr	r2, [pc, #548]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800ba38:	f023 0304 	bic.w	r3, r3, #4
 800ba3c:	6713      	str	r3, [r2, #112]	; 0x70
 800ba3e:	e01c      	b.n	800ba7a <HAL_RCC_OscConfig+0x5a6>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	689b      	ldr	r3, [r3, #8]
 800ba44:	2b05      	cmp	r3, #5
 800ba46:	d10c      	bne.n	800ba62 <HAL_RCC_OscConfig+0x58e>
 800ba48:	4b84      	ldr	r3, [pc, #528]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800ba4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba4c:	4a83      	ldr	r2, [pc, #524]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800ba4e:	f043 0304 	orr.w	r3, r3, #4
 800ba52:	6713      	str	r3, [r2, #112]	; 0x70
 800ba54:	4b81      	ldr	r3, [pc, #516]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800ba56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba58:	4a80      	ldr	r2, [pc, #512]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800ba5a:	f043 0301 	orr.w	r3, r3, #1
 800ba5e:	6713      	str	r3, [r2, #112]	; 0x70
 800ba60:	e00b      	b.n	800ba7a <HAL_RCC_OscConfig+0x5a6>
 800ba62:	4b7e      	ldr	r3, [pc, #504]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800ba64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba66:	4a7d      	ldr	r2, [pc, #500]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800ba68:	f023 0301 	bic.w	r3, r3, #1
 800ba6c:	6713      	str	r3, [r2, #112]	; 0x70
 800ba6e:	4b7b      	ldr	r3, [pc, #492]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800ba70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba72:	4a7a      	ldr	r2, [pc, #488]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800ba74:	f023 0304 	bic.w	r3, r3, #4
 800ba78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d015      	beq.n	800baae <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba82:	f7fa f92f 	bl	8005ce4 <HAL_GetTick>
 800ba86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba88:	e00a      	b.n	800baa0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba8a:	f7fa f92b 	bl	8005ce4 <HAL_GetTick>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba92:	1ad3      	subs	r3, r2, r3
 800ba94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d901      	bls.n	800baa0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	e122      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800baa0:	4b6e      	ldr	r3, [pc, #440]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800baa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baa4:	f003 0302 	and.w	r3, r3, #2
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d0ee      	beq.n	800ba8a <HAL_RCC_OscConfig+0x5b6>
 800baac:	e014      	b.n	800bad8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800baae:	f7fa f919 	bl	8005ce4 <HAL_GetTick>
 800bab2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bab4:	e00a      	b.n	800bacc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bab6:	f7fa f915 	bl	8005ce4 <HAL_GetTick>
 800baba:	4602      	mov	r2, r0
 800babc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d901      	bls.n	800bacc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800bac8:	2303      	movs	r3, #3
 800baca:	e10c      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bacc:	4b63      	ldr	r3, [pc, #396]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bad0:	f003 0302 	and.w	r3, r3, #2
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1ee      	bne.n	800bab6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800badc:	2b00      	cmp	r3, #0
 800bade:	f000 8101 	beq.w	800bce4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bae2:	4b5e      	ldr	r3, [pc, #376]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800baea:	2b18      	cmp	r3, #24
 800baec:	f000 80bc 	beq.w	800bc68 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf4:	2b02      	cmp	r3, #2
 800baf6:	f040 8095 	bne.w	800bc24 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bafa:	4b58      	ldr	r3, [pc, #352]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a57      	ldr	r2, [pc, #348]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bb00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bb04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb06:	f7fa f8ed 	bl	8005ce4 <HAL_GetTick>
 800bb0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bb0c:	e008      	b.n	800bb20 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb0e:	f7fa f8e9 	bl	8005ce4 <HAL_GetTick>
 800bb12:	4602      	mov	r2, r0
 800bb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d901      	bls.n	800bb20 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	e0e2      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bb20:	4b4e      	ldr	r3, [pc, #312]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1f0      	bne.n	800bb0e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bb2c:	4b4b      	ldr	r3, [pc, #300]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bb2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb30:	4b4b      	ldr	r3, [pc, #300]	; (800bc60 <HAL_RCC_OscConfig+0x78c>)
 800bb32:	4013      	ands	r3, r2
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bb3c:	0112      	lsls	r2, r2, #4
 800bb3e:	430a      	orrs	r2, r1
 800bb40:	4946      	ldr	r1, [pc, #280]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bb42:	4313      	orrs	r3, r2
 800bb44:	628b      	str	r3, [r1, #40]	; 0x28
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb54:	3b01      	subs	r3, #1
 800bb56:	025b      	lsls	r3, r3, #9
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	431a      	orrs	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb60:	3b01      	subs	r3, #1
 800bb62:	041b      	lsls	r3, r3, #16
 800bb64:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bb68:	431a      	orrs	r2, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	061b      	lsls	r3, r3, #24
 800bb72:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bb76:	4939      	ldr	r1, [pc, #228]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800bb7c:	4b37      	ldr	r3, [pc, #220]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb80:	4a36      	ldr	r2, [pc, #216]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bb82:	f023 0301 	bic.w	r3, r3, #1
 800bb86:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bb88:	4b34      	ldr	r3, [pc, #208]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bb8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb8c:	4b35      	ldr	r3, [pc, #212]	; (800bc64 <HAL_RCC_OscConfig+0x790>)
 800bb8e:	4013      	ands	r3, r2
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bb94:	00d2      	lsls	r2, r2, #3
 800bb96:	4931      	ldr	r1, [pc, #196]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bb9c:	4b2f      	ldr	r3, [pc, #188]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba0:	f023 020c 	bic.w	r2, r3, #12
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba8:	492c      	ldr	r1, [pc, #176]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bbae:	4b2b      	ldr	r3, [pc, #172]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb2:	f023 0202 	bic.w	r2, r3, #2
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbba:	4928      	ldr	r1, [pc, #160]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bbc0:	4b26      	ldr	r3, [pc, #152]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc4:	4a25      	ldr	r2, [pc, #148]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bbc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbcc:	4b23      	ldr	r3, [pc, #140]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd0:	4a22      	ldr	r2, [pc, #136]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bbd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bbd8:	4b20      	ldr	r3, [pc, #128]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbdc:	4a1f      	ldr	r2, [pc, #124]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bbde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bbe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800bbe4:	4b1d      	ldr	r3, [pc, #116]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe8:	4a1c      	ldr	r2, [pc, #112]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bbea:	f043 0301 	orr.w	r3, r3, #1
 800bbee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bbf0:	4b1a      	ldr	r3, [pc, #104]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a19      	ldr	r2, [pc, #100]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bbf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bbfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbfc:	f7fa f872 	bl	8005ce4 <HAL_GetTick>
 800bc00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bc02:	e008      	b.n	800bc16 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bc04:	f7fa f86e 	bl	8005ce4 <HAL_GetTick>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0c:	1ad3      	subs	r3, r2, r3
 800bc0e:	2b02      	cmp	r3, #2
 800bc10:	d901      	bls.n	800bc16 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800bc12:	2303      	movs	r3, #3
 800bc14:	e067      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bc16:	4b11      	ldr	r3, [pc, #68]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d0f0      	beq.n	800bc04 <HAL_RCC_OscConfig+0x730>
 800bc22:	e05f      	b.n	800bce4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc24:	4b0d      	ldr	r3, [pc, #52]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a0c      	ldr	r2, [pc, #48]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bc2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc30:	f7fa f858 	bl	8005ce4 <HAL_GetTick>
 800bc34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bc36:	e008      	b.n	800bc4a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bc38:	f7fa f854 	bl	8005ce4 <HAL_GetTick>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	2b02      	cmp	r3, #2
 800bc44:	d901      	bls.n	800bc4a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800bc46:	2303      	movs	r3, #3
 800bc48:	e04d      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bc4a:	4b04      	ldr	r3, [pc, #16]	; (800bc5c <HAL_RCC_OscConfig+0x788>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1f0      	bne.n	800bc38 <HAL_RCC_OscConfig+0x764>
 800bc56:	e045      	b.n	800bce4 <HAL_RCC_OscConfig+0x810>
 800bc58:	58024800 	.word	0x58024800
 800bc5c:	58024400 	.word	0x58024400
 800bc60:	fffffc0c 	.word	0xfffffc0c
 800bc64:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bc68:	4b21      	ldr	r3, [pc, #132]	; (800bcf0 <HAL_RCC_OscConfig+0x81c>)
 800bc6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bc6e:	4b20      	ldr	r3, [pc, #128]	; (800bcf0 <HAL_RCC_OscConfig+0x81c>)
 800bc70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc72:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d031      	beq.n	800bce0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	f003 0203 	and.w	r2, r3, #3
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d12a      	bne.n	800bce0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	091b      	lsrs	r3, r3, #4
 800bc8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d122      	bne.n	800bce0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d11a      	bne.n	800bce0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	0a5b      	lsrs	r3, r3, #9
 800bcae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d111      	bne.n	800bce0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	0c1b      	lsrs	r3, r3, #16
 800bcc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d108      	bne.n	800bce0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	0e1b      	lsrs	r3, r3, #24
 800bcd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcda:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d001      	beq.n	800bce4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	e000      	b.n	800bce6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3730      	adds	r7, #48	; 0x30
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	58024400 	.word	0x58024400

0800bcf4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d101      	bne.n	800bd08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	e19c      	b.n	800c042 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bd08:	4b8a      	ldr	r3, [pc, #552]	; (800bf34 <HAL_RCC_ClockConfig+0x240>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f003 030f 	and.w	r3, r3, #15
 800bd10:	683a      	ldr	r2, [r7, #0]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d910      	bls.n	800bd38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd16:	4b87      	ldr	r3, [pc, #540]	; (800bf34 <HAL_RCC_ClockConfig+0x240>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f023 020f 	bic.w	r2, r3, #15
 800bd1e:	4985      	ldr	r1, [pc, #532]	; (800bf34 <HAL_RCC_ClockConfig+0x240>)
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	4313      	orrs	r3, r2
 800bd24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd26:	4b83      	ldr	r3, [pc, #524]	; (800bf34 <HAL_RCC_ClockConfig+0x240>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f003 030f 	and.w	r3, r3, #15
 800bd2e:	683a      	ldr	r2, [r7, #0]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d001      	beq.n	800bd38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e184      	b.n	800c042 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f003 0304 	and.w	r3, r3, #4
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d010      	beq.n	800bd66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	691a      	ldr	r2, [r3, #16]
 800bd48:	4b7b      	ldr	r3, [pc, #492]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bd4a:	699b      	ldr	r3, [r3, #24]
 800bd4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d908      	bls.n	800bd66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bd54:	4b78      	ldr	r3, [pc, #480]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bd56:	699b      	ldr	r3, [r3, #24]
 800bd58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	4975      	ldr	r1, [pc, #468]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bd62:	4313      	orrs	r3, r2
 800bd64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f003 0308 	and.w	r3, r3, #8
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d010      	beq.n	800bd94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	695a      	ldr	r2, [r3, #20]
 800bd76:	4b70      	ldr	r3, [pc, #448]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bd78:	69db      	ldr	r3, [r3, #28]
 800bd7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d908      	bls.n	800bd94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bd82:	4b6d      	ldr	r3, [pc, #436]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bd84:	69db      	ldr	r3, [r3, #28]
 800bd86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	695b      	ldr	r3, [r3, #20]
 800bd8e:	496a      	ldr	r1, [pc, #424]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bd90:	4313      	orrs	r3, r2
 800bd92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f003 0310 	and.w	r3, r3, #16
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d010      	beq.n	800bdc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	699a      	ldr	r2, [r3, #24]
 800bda4:	4b64      	ldr	r3, [pc, #400]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bda6:	69db      	ldr	r3, [r3, #28]
 800bda8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d908      	bls.n	800bdc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bdb0:	4b61      	ldr	r3, [pc, #388]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bdb2:	69db      	ldr	r3, [r3, #28]
 800bdb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	699b      	ldr	r3, [r3, #24]
 800bdbc:	495e      	ldr	r1, [pc, #376]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f003 0320 	and.w	r3, r3, #32
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d010      	beq.n	800bdf0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	69da      	ldr	r2, [r3, #28]
 800bdd2:	4b59      	ldr	r3, [pc, #356]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bdd4:	6a1b      	ldr	r3, [r3, #32]
 800bdd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d908      	bls.n	800bdf0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bdde:	4b56      	ldr	r3, [pc, #344]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bde0:	6a1b      	ldr	r3, [r3, #32]
 800bde2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	69db      	ldr	r3, [r3, #28]
 800bdea:	4953      	ldr	r1, [pc, #332]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bdec:	4313      	orrs	r3, r2
 800bdee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f003 0302 	and.w	r3, r3, #2
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d010      	beq.n	800be1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	68da      	ldr	r2, [r3, #12]
 800be00:	4b4d      	ldr	r3, [pc, #308]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	f003 030f 	and.w	r3, r3, #15
 800be08:	429a      	cmp	r2, r3
 800be0a:	d908      	bls.n	800be1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800be0c:	4b4a      	ldr	r3, [pc, #296]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	f023 020f 	bic.w	r2, r3, #15
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	4947      	ldr	r1, [pc, #284]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800be1a:	4313      	orrs	r3, r2
 800be1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f003 0301 	and.w	r3, r3, #1
 800be26:	2b00      	cmp	r3, #0
 800be28:	d055      	beq.n	800bed6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800be2a:	4b43      	ldr	r3, [pc, #268]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800be2c:	699b      	ldr	r3, [r3, #24]
 800be2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	4940      	ldr	r1, [pc, #256]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800be38:	4313      	orrs	r3, r2
 800be3a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	2b02      	cmp	r3, #2
 800be42:	d107      	bne.n	800be54 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800be44:	4b3c      	ldr	r3, [pc, #240]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d121      	bne.n	800be94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800be50:	2301      	movs	r3, #1
 800be52:	e0f6      	b.n	800c042 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	2b03      	cmp	r3, #3
 800be5a:	d107      	bne.n	800be6c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800be5c:	4b36      	ldr	r3, [pc, #216]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be64:	2b00      	cmp	r3, #0
 800be66:	d115      	bne.n	800be94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	e0ea      	b.n	800c042 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	2b01      	cmp	r3, #1
 800be72:	d107      	bne.n	800be84 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800be74:	4b30      	ldr	r3, [pc, #192]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d109      	bne.n	800be94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	e0de      	b.n	800c042 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be84:	4b2c      	ldr	r3, [pc, #176]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f003 0304 	and.w	r3, r3, #4
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d101      	bne.n	800be94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800be90:	2301      	movs	r3, #1
 800be92:	e0d6      	b.n	800c042 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800be94:	4b28      	ldr	r3, [pc, #160]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	f023 0207 	bic.w	r2, r3, #7
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	4925      	ldr	r1, [pc, #148]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bea2:	4313      	orrs	r3, r2
 800bea4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bea6:	f7f9 ff1d 	bl	8005ce4 <HAL_GetTick>
 800beaa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800beac:	e00a      	b.n	800bec4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800beae:	f7f9 ff19 	bl	8005ce4 <HAL_GetTick>
 800beb2:	4602      	mov	r2, r0
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	1ad3      	subs	r3, r2, r3
 800beb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d901      	bls.n	800bec4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800bec0:	2303      	movs	r3, #3
 800bec2:	e0be      	b.n	800c042 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bec4:	4b1c      	ldr	r3, [pc, #112]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	00db      	lsls	r3, r3, #3
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d1eb      	bne.n	800beae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f003 0302 	and.w	r3, r3, #2
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d010      	beq.n	800bf04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	68da      	ldr	r2, [r3, #12]
 800bee6:	4b14      	ldr	r3, [pc, #80]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	f003 030f 	and.w	r3, r3, #15
 800beee:	429a      	cmp	r2, r3
 800bef0:	d208      	bcs.n	800bf04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bef2:	4b11      	ldr	r3, [pc, #68]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bef4:	699b      	ldr	r3, [r3, #24]
 800bef6:	f023 020f 	bic.w	r2, r3, #15
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	490e      	ldr	r1, [pc, #56]	; (800bf38 <HAL_RCC_ClockConfig+0x244>)
 800bf00:	4313      	orrs	r3, r2
 800bf02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bf04:	4b0b      	ldr	r3, [pc, #44]	; (800bf34 <HAL_RCC_ClockConfig+0x240>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 030f 	and.w	r3, r3, #15
 800bf0c:	683a      	ldr	r2, [r7, #0]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d214      	bcs.n	800bf3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf12:	4b08      	ldr	r3, [pc, #32]	; (800bf34 <HAL_RCC_ClockConfig+0x240>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f023 020f 	bic.w	r2, r3, #15
 800bf1a:	4906      	ldr	r1, [pc, #24]	; (800bf34 <HAL_RCC_ClockConfig+0x240>)
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf22:	4b04      	ldr	r3, [pc, #16]	; (800bf34 <HAL_RCC_ClockConfig+0x240>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f003 030f 	and.w	r3, r3, #15
 800bf2a:	683a      	ldr	r2, [r7, #0]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d005      	beq.n	800bf3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e086      	b.n	800c042 <HAL_RCC_ClockConfig+0x34e>
 800bf34:	52002000 	.word	0x52002000
 800bf38:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f003 0304 	and.w	r3, r3, #4
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d010      	beq.n	800bf6a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	691a      	ldr	r2, [r3, #16]
 800bf4c:	4b3f      	ldr	r3, [pc, #252]	; (800c04c <HAL_RCC_ClockConfig+0x358>)
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d208      	bcs.n	800bf6a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bf58:	4b3c      	ldr	r3, [pc, #240]	; (800c04c <HAL_RCC_ClockConfig+0x358>)
 800bf5a:	699b      	ldr	r3, [r3, #24]
 800bf5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	4939      	ldr	r1, [pc, #228]	; (800c04c <HAL_RCC_ClockConfig+0x358>)
 800bf66:	4313      	orrs	r3, r2
 800bf68:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f003 0308 	and.w	r3, r3, #8
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d010      	beq.n	800bf98 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	695a      	ldr	r2, [r3, #20]
 800bf7a:	4b34      	ldr	r3, [pc, #208]	; (800c04c <HAL_RCC_ClockConfig+0x358>)
 800bf7c:	69db      	ldr	r3, [r3, #28]
 800bf7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d208      	bcs.n	800bf98 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bf86:	4b31      	ldr	r3, [pc, #196]	; (800c04c <HAL_RCC_ClockConfig+0x358>)
 800bf88:	69db      	ldr	r3, [r3, #28]
 800bf8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	695b      	ldr	r3, [r3, #20]
 800bf92:	492e      	ldr	r1, [pc, #184]	; (800c04c <HAL_RCC_ClockConfig+0x358>)
 800bf94:	4313      	orrs	r3, r2
 800bf96:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f003 0310 	and.w	r3, r3, #16
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d010      	beq.n	800bfc6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	699a      	ldr	r2, [r3, #24]
 800bfa8:	4b28      	ldr	r3, [pc, #160]	; (800c04c <HAL_RCC_ClockConfig+0x358>)
 800bfaa:	69db      	ldr	r3, [r3, #28]
 800bfac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d208      	bcs.n	800bfc6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bfb4:	4b25      	ldr	r3, [pc, #148]	; (800c04c <HAL_RCC_ClockConfig+0x358>)
 800bfb6:	69db      	ldr	r3, [r3, #28]
 800bfb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	699b      	ldr	r3, [r3, #24]
 800bfc0:	4922      	ldr	r1, [pc, #136]	; (800c04c <HAL_RCC_ClockConfig+0x358>)
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f003 0320 	and.w	r3, r3, #32
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d010      	beq.n	800bff4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	69da      	ldr	r2, [r3, #28]
 800bfd6:	4b1d      	ldr	r3, [pc, #116]	; (800c04c <HAL_RCC_ClockConfig+0x358>)
 800bfd8:	6a1b      	ldr	r3, [r3, #32]
 800bfda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d208      	bcs.n	800bff4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bfe2:	4b1a      	ldr	r3, [pc, #104]	; (800c04c <HAL_RCC_ClockConfig+0x358>)
 800bfe4:	6a1b      	ldr	r3, [r3, #32]
 800bfe6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	69db      	ldr	r3, [r3, #28]
 800bfee:	4917      	ldr	r1, [pc, #92]	; (800c04c <HAL_RCC_ClockConfig+0x358>)
 800bff0:	4313      	orrs	r3, r2
 800bff2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bff4:	f000 f834 	bl	800c060 <HAL_RCC_GetSysClockFreq>
 800bff8:	4602      	mov	r2, r0
 800bffa:	4b14      	ldr	r3, [pc, #80]	; (800c04c <HAL_RCC_ClockConfig+0x358>)
 800bffc:	699b      	ldr	r3, [r3, #24]
 800bffe:	0a1b      	lsrs	r3, r3, #8
 800c000:	f003 030f 	and.w	r3, r3, #15
 800c004:	4912      	ldr	r1, [pc, #72]	; (800c050 <HAL_RCC_ClockConfig+0x35c>)
 800c006:	5ccb      	ldrb	r3, [r1, r3]
 800c008:	f003 031f 	and.w	r3, r3, #31
 800c00c:	fa22 f303 	lsr.w	r3, r2, r3
 800c010:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c012:	4b0e      	ldr	r3, [pc, #56]	; (800c04c <HAL_RCC_ClockConfig+0x358>)
 800c014:	699b      	ldr	r3, [r3, #24]
 800c016:	f003 030f 	and.w	r3, r3, #15
 800c01a:	4a0d      	ldr	r2, [pc, #52]	; (800c050 <HAL_RCC_ClockConfig+0x35c>)
 800c01c:	5cd3      	ldrb	r3, [r2, r3]
 800c01e:	f003 031f 	and.w	r3, r3, #31
 800c022:	693a      	ldr	r2, [r7, #16]
 800c024:	fa22 f303 	lsr.w	r3, r2, r3
 800c028:	4a0a      	ldr	r2, [pc, #40]	; (800c054 <HAL_RCC_ClockConfig+0x360>)
 800c02a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c02c:	4a0a      	ldr	r2, [pc, #40]	; (800c058 <HAL_RCC_ClockConfig+0x364>)
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800c032:	4b0a      	ldr	r3, [pc, #40]	; (800c05c <HAL_RCC_ClockConfig+0x368>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4618      	mov	r0, r3
 800c038:	f7f9 fe0a 	bl	8005c50 <HAL_InitTick>
 800c03c:	4603      	mov	r3, r0
 800c03e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c040:	7bfb      	ldrb	r3, [r7, #15]
}
 800c042:	4618      	mov	r0, r3
 800c044:	3718      	adds	r7, #24
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	58024400 	.word	0x58024400
 800c050:	080150ec 	.word	0x080150ec
 800c054:	24000018 	.word	0x24000018
 800c058:	24000014 	.word	0x24000014
 800c05c:	2400001c 	.word	0x2400001c

0800c060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c060:	b480      	push	{r7}
 800c062:	b089      	sub	sp, #36	; 0x24
 800c064:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c066:	4bb3      	ldr	r3, [pc, #716]	; (800c334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c06e:	2b18      	cmp	r3, #24
 800c070:	f200 8155 	bhi.w	800c31e <HAL_RCC_GetSysClockFreq+0x2be>
 800c074:	a201      	add	r2, pc, #4	; (adr r2, 800c07c <HAL_RCC_GetSysClockFreq+0x1c>)
 800c076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c07a:	bf00      	nop
 800c07c:	0800c0e1 	.word	0x0800c0e1
 800c080:	0800c31f 	.word	0x0800c31f
 800c084:	0800c31f 	.word	0x0800c31f
 800c088:	0800c31f 	.word	0x0800c31f
 800c08c:	0800c31f 	.word	0x0800c31f
 800c090:	0800c31f 	.word	0x0800c31f
 800c094:	0800c31f 	.word	0x0800c31f
 800c098:	0800c31f 	.word	0x0800c31f
 800c09c:	0800c107 	.word	0x0800c107
 800c0a0:	0800c31f 	.word	0x0800c31f
 800c0a4:	0800c31f 	.word	0x0800c31f
 800c0a8:	0800c31f 	.word	0x0800c31f
 800c0ac:	0800c31f 	.word	0x0800c31f
 800c0b0:	0800c31f 	.word	0x0800c31f
 800c0b4:	0800c31f 	.word	0x0800c31f
 800c0b8:	0800c31f 	.word	0x0800c31f
 800c0bc:	0800c10d 	.word	0x0800c10d
 800c0c0:	0800c31f 	.word	0x0800c31f
 800c0c4:	0800c31f 	.word	0x0800c31f
 800c0c8:	0800c31f 	.word	0x0800c31f
 800c0cc:	0800c31f 	.word	0x0800c31f
 800c0d0:	0800c31f 	.word	0x0800c31f
 800c0d4:	0800c31f 	.word	0x0800c31f
 800c0d8:	0800c31f 	.word	0x0800c31f
 800c0dc:	0800c113 	.word	0x0800c113
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0e0:	4b94      	ldr	r3, [pc, #592]	; (800c334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f003 0320 	and.w	r3, r3, #32
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d009      	beq.n	800c100 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c0ec:	4b91      	ldr	r3, [pc, #580]	; (800c334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	08db      	lsrs	r3, r3, #3
 800c0f2:	f003 0303 	and.w	r3, r3, #3
 800c0f6:	4a90      	ldr	r2, [pc, #576]	; (800c338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c0f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c0fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800c0fe:	e111      	b.n	800c324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c100:	4b8d      	ldr	r3, [pc, #564]	; (800c338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c102:	61bb      	str	r3, [r7, #24]
    break;
 800c104:	e10e      	b.n	800c324 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800c106:	4b8d      	ldr	r3, [pc, #564]	; (800c33c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c108:	61bb      	str	r3, [r7, #24]
    break;
 800c10a:	e10b      	b.n	800c324 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800c10c:	4b8c      	ldr	r3, [pc, #560]	; (800c340 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c10e:	61bb      	str	r3, [r7, #24]
    break;
 800c110:	e108      	b.n	800c324 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c112:	4b88      	ldr	r3, [pc, #544]	; (800c334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c116:	f003 0303 	and.w	r3, r3, #3
 800c11a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800c11c:	4b85      	ldr	r3, [pc, #532]	; (800c334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c120:	091b      	lsrs	r3, r3, #4
 800c122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c126:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c128:	4b82      	ldr	r3, [pc, #520]	; (800c334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12c:	f003 0301 	and.w	r3, r3, #1
 800c130:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c132:	4b80      	ldr	r3, [pc, #512]	; (800c334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c136:	08db      	lsrs	r3, r3, #3
 800c138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	fb02 f303 	mul.w	r3, r2, r3
 800c142:	ee07 3a90 	vmov	s15, r3
 800c146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c14a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	2b00      	cmp	r3, #0
 800c152:	f000 80e1 	beq.w	800c318 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	2b02      	cmp	r3, #2
 800c15a:	f000 8083 	beq.w	800c264 <HAL_RCC_GetSysClockFreq+0x204>
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	2b02      	cmp	r3, #2
 800c162:	f200 80a1 	bhi.w	800c2a8 <HAL_RCC_GetSysClockFreq+0x248>
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d003      	beq.n	800c174 <HAL_RCC_GetSysClockFreq+0x114>
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d056      	beq.n	800c220 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c172:	e099      	b.n	800c2a8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c174:	4b6f      	ldr	r3, [pc, #444]	; (800c334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f003 0320 	and.w	r3, r3, #32
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d02d      	beq.n	800c1dc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c180:	4b6c      	ldr	r3, [pc, #432]	; (800c334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	08db      	lsrs	r3, r3, #3
 800c186:	f003 0303 	and.w	r3, r3, #3
 800c18a:	4a6b      	ldr	r2, [pc, #428]	; (800c338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c18c:	fa22 f303 	lsr.w	r3, r2, r3
 800c190:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	ee07 3a90 	vmov	s15, r3
 800c198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	ee07 3a90 	vmov	s15, r3
 800c1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1aa:	4b62      	ldr	r3, [pc, #392]	; (800c334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b2:	ee07 3a90 	vmov	s15, r3
 800c1b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800c1be:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c1c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800c1da:	e087      	b.n	800c2ec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	ee07 3a90 	vmov	s15, r3
 800c1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c348 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c1ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ee:	4b51      	ldr	r3, [pc, #324]	; (800c334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1f6:	ee07 3a90 	vmov	s15, r3
 800c1fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800c202:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c20a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c20e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c21a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c21e:	e065      	b.n	800c2ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	ee07 3a90 	vmov	s15, r3
 800c226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c22a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c34c <HAL_RCC_GetSysClockFreq+0x2ec>
 800c22e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c232:	4b40      	ldr	r3, [pc, #256]	; (800c334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c23a:	ee07 3a90 	vmov	s15, r3
 800c23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c242:	ed97 6a02 	vldr	s12, [r7, #8]
 800c246:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c24a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c24e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c25a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c25e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c262:	e043      	b.n	800c2ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	ee07 3a90 	vmov	s15, r3
 800c26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c26e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c350 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c276:	4b2f      	ldr	r3, [pc, #188]	; (800c334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c27e:	ee07 3a90 	vmov	s15, r3
 800c282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c286:	ed97 6a02 	vldr	s12, [r7, #8]
 800c28a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2a6:	e021      	b.n	800c2ec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	ee07 3a90 	vmov	s15, r3
 800c2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c34c <HAL_RCC_GetSysClockFreq+0x2ec>
 800c2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2ba:	4b1e      	ldr	r3, [pc, #120]	; (800c334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2c2:	ee07 3a90 	vmov	s15, r3
 800c2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800c2ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2ea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800c2ec:	4b11      	ldr	r3, [pc, #68]	; (800c334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2f0:	0a5b      	lsrs	r3, r3, #9
 800c2f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	ee07 3a90 	vmov	s15, r3
 800c300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c304:	edd7 6a07 	vldr	s13, [r7, #28]
 800c308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c30c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c310:	ee17 3a90 	vmov	r3, s15
 800c314:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800c316:	e005      	b.n	800c324 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800c318:	2300      	movs	r3, #0
 800c31a:	61bb      	str	r3, [r7, #24]
    break;
 800c31c:	e002      	b.n	800c324 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800c31e:	4b07      	ldr	r3, [pc, #28]	; (800c33c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c320:	61bb      	str	r3, [r7, #24]
    break;
 800c322:	bf00      	nop
  }

  return sysclockfreq;
 800c324:	69bb      	ldr	r3, [r7, #24]
}
 800c326:	4618      	mov	r0, r3
 800c328:	3724      	adds	r7, #36	; 0x24
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr
 800c332:	bf00      	nop
 800c334:	58024400 	.word	0x58024400
 800c338:	03d09000 	.word	0x03d09000
 800c33c:	003d0900 	.word	0x003d0900
 800c340:	017d7840 	.word	0x017d7840
 800c344:	46000000 	.word	0x46000000
 800c348:	4c742400 	.word	0x4c742400
 800c34c:	4a742400 	.word	0x4a742400
 800c350:	4bbebc20 	.word	0x4bbebc20

0800c354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c35a:	f7ff fe81 	bl	800c060 <HAL_RCC_GetSysClockFreq>
 800c35e:	4602      	mov	r2, r0
 800c360:	4b10      	ldr	r3, [pc, #64]	; (800c3a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800c362:	699b      	ldr	r3, [r3, #24]
 800c364:	0a1b      	lsrs	r3, r3, #8
 800c366:	f003 030f 	and.w	r3, r3, #15
 800c36a:	490f      	ldr	r1, [pc, #60]	; (800c3a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800c36c:	5ccb      	ldrb	r3, [r1, r3]
 800c36e:	f003 031f 	and.w	r3, r3, #31
 800c372:	fa22 f303 	lsr.w	r3, r2, r3
 800c376:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c378:	4b0a      	ldr	r3, [pc, #40]	; (800c3a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800c37a:	699b      	ldr	r3, [r3, #24]
 800c37c:	f003 030f 	and.w	r3, r3, #15
 800c380:	4a09      	ldr	r2, [pc, #36]	; (800c3a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800c382:	5cd3      	ldrb	r3, [r2, r3]
 800c384:	f003 031f 	and.w	r3, r3, #31
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	fa22 f303 	lsr.w	r3, r2, r3
 800c38e:	4a07      	ldr	r2, [pc, #28]	; (800c3ac <HAL_RCC_GetHCLKFreq+0x58>)
 800c390:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c392:	4a07      	ldr	r2, [pc, #28]	; (800c3b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c398:	4b04      	ldr	r3, [pc, #16]	; (800c3ac <HAL_RCC_GetHCLKFreq+0x58>)
 800c39a:	681b      	ldr	r3, [r3, #0]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	58024400 	.word	0x58024400
 800c3a8:	080150ec 	.word	0x080150ec
 800c3ac:	24000018 	.word	0x24000018
 800c3b0:	24000014 	.word	0x24000014

0800c3b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c3b8:	f7ff ffcc 	bl	800c354 <HAL_RCC_GetHCLKFreq>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	4b06      	ldr	r3, [pc, #24]	; (800c3d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c3c0:	69db      	ldr	r3, [r3, #28]
 800c3c2:	091b      	lsrs	r3, r3, #4
 800c3c4:	f003 0307 	and.w	r3, r3, #7
 800c3c8:	4904      	ldr	r1, [pc, #16]	; (800c3dc <HAL_RCC_GetPCLK1Freq+0x28>)
 800c3ca:	5ccb      	ldrb	r3, [r1, r3]
 800c3cc:	f003 031f 	and.w	r3, r3, #31
 800c3d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	58024400 	.word	0x58024400
 800c3dc:	080150ec 	.word	0x080150ec

0800c3e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c3e4:	f7ff ffb6 	bl	800c354 <HAL_RCC_GetHCLKFreq>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	4b06      	ldr	r3, [pc, #24]	; (800c404 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c3ec:	69db      	ldr	r3, [r3, #28]
 800c3ee:	0a1b      	lsrs	r3, r3, #8
 800c3f0:	f003 0307 	and.w	r3, r3, #7
 800c3f4:	4904      	ldr	r1, [pc, #16]	; (800c408 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c3f6:	5ccb      	ldrb	r3, [r1, r3]
 800c3f8:	f003 031f 	and.w	r3, r3, #31
 800c3fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c400:	4618      	mov	r0, r3
 800c402:	bd80      	pop	{r7, pc}
 800c404:	58024400 	.word	0x58024400
 800c408:	080150ec 	.word	0x080150ec

0800c40c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b086      	sub	sp, #24
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c414:	2300      	movs	r3, #0
 800c416:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c418:	2300      	movs	r3, #0
 800c41a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c424:	2b00      	cmp	r3, #0
 800c426:	d03f      	beq.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c42c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c430:	d02a      	beq.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c432:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c436:	d824      	bhi.n	800c482 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c438:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c43c:	d018      	beq.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c43e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c442:	d81e      	bhi.n	800c482 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c444:	2b00      	cmp	r3, #0
 800c446:	d003      	beq.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c44c:	d007      	beq.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c44e:	e018      	b.n	800c482 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c450:	4bab      	ldr	r3, [pc, #684]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c454:	4aaa      	ldr	r2, [pc, #680]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c45a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c45c:	e015      	b.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	3304      	adds	r3, #4
 800c462:	2102      	movs	r1, #2
 800c464:	4618      	mov	r0, r3
 800c466:	f001 f9cf 	bl	800d808 <RCCEx_PLL2_Config>
 800c46a:	4603      	mov	r3, r0
 800c46c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c46e:	e00c      	b.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	3324      	adds	r3, #36	; 0x24
 800c474:	2102      	movs	r1, #2
 800c476:	4618      	mov	r0, r3
 800c478:	f001 fa78 	bl	800d96c <RCCEx_PLL3_Config>
 800c47c:	4603      	mov	r3, r0
 800c47e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c480:	e003      	b.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c482:	2301      	movs	r3, #1
 800c484:	75fb      	strb	r3, [r7, #23]
      break;
 800c486:	e000      	b.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c48a:	7dfb      	ldrb	r3, [r7, #23]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d109      	bne.n	800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c490:	4b9b      	ldr	r3, [pc, #620]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c494:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c49c:	4998      	ldr	r1, [pc, #608]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	650b      	str	r3, [r1, #80]	; 0x50
 800c4a2:	e001      	b.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4a4:	7dfb      	ldrb	r3, [r7, #23]
 800c4a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d03d      	beq.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4b8:	2b04      	cmp	r3, #4
 800c4ba:	d826      	bhi.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c4bc:	a201      	add	r2, pc, #4	; (adr r2, 800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800c4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c2:	bf00      	nop
 800c4c4:	0800c4d9 	.word	0x0800c4d9
 800c4c8:	0800c4e7 	.word	0x0800c4e7
 800c4cc:	0800c4f9 	.word	0x0800c4f9
 800c4d0:	0800c511 	.word	0x0800c511
 800c4d4:	0800c511 	.word	0x0800c511
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4d8:	4b89      	ldr	r3, [pc, #548]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4dc:	4a88      	ldr	r2, [pc, #544]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c4de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c4e4:	e015      	b.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	2100      	movs	r1, #0
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f001 f98b 	bl	800d808 <RCCEx_PLL2_Config>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c4f6:	e00c      	b.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	3324      	adds	r3, #36	; 0x24
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	4618      	mov	r0, r3
 800c500:	f001 fa34 	bl	800d96c <RCCEx_PLL3_Config>
 800c504:	4603      	mov	r3, r0
 800c506:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c508:	e003      	b.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	75fb      	strb	r3, [r7, #23]
      break;
 800c50e:	e000      	b.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c510:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c512:	7dfb      	ldrb	r3, [r7, #23]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d109      	bne.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c518:	4b79      	ldr	r3, [pc, #484]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c51a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c51c:	f023 0207 	bic.w	r2, r3, #7
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c524:	4976      	ldr	r1, [pc, #472]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c526:	4313      	orrs	r3, r2
 800c528:	650b      	str	r3, [r1, #80]	; 0x50
 800c52a:	e001      	b.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c52c:	7dfb      	ldrb	r3, [r7, #23]
 800c52e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d042      	beq.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c544:	d02b      	beq.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800c546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c54a:	d825      	bhi.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c54c:	2bc0      	cmp	r3, #192	; 0xc0
 800c54e:	d028      	beq.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c550:	2bc0      	cmp	r3, #192	; 0xc0
 800c552:	d821      	bhi.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c554:	2b80      	cmp	r3, #128	; 0x80
 800c556:	d016      	beq.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800c558:	2b80      	cmp	r3, #128	; 0x80
 800c55a:	d81d      	bhi.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d002      	beq.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800c560:	2b40      	cmp	r3, #64	; 0x40
 800c562:	d007      	beq.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800c564:	e018      	b.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c566:	4b66      	ldr	r3, [pc, #408]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56a:	4a65      	ldr	r2, [pc, #404]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c56c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c570:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c572:	e017      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	3304      	adds	r3, #4
 800c578:	2100      	movs	r1, #0
 800c57a:	4618      	mov	r0, r3
 800c57c:	f001 f944 	bl	800d808 <RCCEx_PLL2_Config>
 800c580:	4603      	mov	r3, r0
 800c582:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c584:	e00e      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	3324      	adds	r3, #36	; 0x24
 800c58a:	2100      	movs	r1, #0
 800c58c:	4618      	mov	r0, r3
 800c58e:	f001 f9ed 	bl	800d96c <RCCEx_PLL3_Config>
 800c592:	4603      	mov	r3, r0
 800c594:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c596:	e005      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	75fb      	strb	r3, [r7, #23]
      break;
 800c59c:	e002      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c59e:	bf00      	nop
 800c5a0:	e000      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c5a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5a4:	7dfb      	ldrb	r3, [r7, #23]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d109      	bne.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c5aa:	4b55      	ldr	r3, [pc, #340]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c5ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5b6:	4952      	ldr	r1, [pc, #328]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	650b      	str	r3, [r1, #80]	; 0x50
 800c5bc:	e001      	b.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5be:	7dfb      	ldrb	r3, [r7, #23]
 800c5c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d049      	beq.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c5d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5d8:	d030      	beq.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800c5da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5de:	d82a      	bhi.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c5e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c5e4:	d02c      	beq.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800c5e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c5ea:	d824      	bhi.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c5ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5f0:	d018      	beq.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800c5f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5f6:	d81e      	bhi.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d003      	beq.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800c5fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c600:	d007      	beq.n	800c612 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c602:	e018      	b.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c604:	4b3e      	ldr	r3, [pc, #248]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c608:	4a3d      	ldr	r2, [pc, #244]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c60a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c60e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c610:	e017      	b.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	3304      	adds	r3, #4
 800c616:	2100      	movs	r1, #0
 800c618:	4618      	mov	r0, r3
 800c61a:	f001 f8f5 	bl	800d808 <RCCEx_PLL2_Config>
 800c61e:	4603      	mov	r3, r0
 800c620:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c622:	e00e      	b.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	3324      	adds	r3, #36	; 0x24
 800c628:	2100      	movs	r1, #0
 800c62a:	4618      	mov	r0, r3
 800c62c:	f001 f99e 	bl	800d96c <RCCEx_PLL3_Config>
 800c630:	4603      	mov	r3, r0
 800c632:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c634:	e005      	b.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c636:	2301      	movs	r3, #1
 800c638:	75fb      	strb	r3, [r7, #23]
      break;
 800c63a:	e002      	b.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c63c:	bf00      	nop
 800c63e:	e000      	b.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c640:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c642:	7dfb      	ldrb	r3, [r7, #23]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10a      	bne.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c648:	4b2d      	ldr	r3, [pc, #180]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c64a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c64c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c656:	492a      	ldr	r1, [pc, #168]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c658:	4313      	orrs	r3, r2
 800c65a:	658b      	str	r3, [r1, #88]	; 0x58
 800c65c:	e001      	b.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c65e:	7dfb      	ldrb	r3, [r7, #23]
 800c660:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d04c      	beq.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c674:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c678:	d030      	beq.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800c67a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c67e:	d82a      	bhi.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c680:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c684:	d02c      	beq.n	800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800c686:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c68a:	d824      	bhi.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c68c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c690:	d018      	beq.n	800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800c692:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c696:	d81e      	bhi.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d003      	beq.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c69c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c6a0:	d007      	beq.n	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c6a2:	e018      	b.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6a4:	4b16      	ldr	r3, [pc, #88]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a8:	4a15      	ldr	r2, [pc, #84]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c6aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c6b0:	e017      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	3304      	adds	r3, #4
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f001 f8a5 	bl	800d808 <RCCEx_PLL2_Config>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c6c2:	e00e      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	3324      	adds	r3, #36	; 0x24
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f001 f94e 	bl	800d96c <RCCEx_PLL3_Config>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c6d4:	e005      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	75fb      	strb	r3, [r7, #23]
      break;
 800c6da:	e002      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800c6dc:	bf00      	nop
 800c6de:	e000      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800c6e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6e2:	7dfb      	ldrb	r3, [r7, #23]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10d      	bne.n	800c704 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c6e8:	4b05      	ldr	r3, [pc, #20]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c6ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c6f6:	4902      	ldr	r1, [pc, #8]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	658b      	str	r3, [r1, #88]	; 0x58
 800c6fc:	e004      	b.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800c6fe:	bf00      	nop
 800c700:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c704:	7dfb      	ldrb	r3, [r7, #23]
 800c706:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c710:	2b00      	cmp	r3, #0
 800c712:	d032      	beq.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c718:	2b30      	cmp	r3, #48	; 0x30
 800c71a:	d01c      	beq.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c71c:	2b30      	cmp	r3, #48	; 0x30
 800c71e:	d817      	bhi.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800c720:	2b20      	cmp	r3, #32
 800c722:	d00c      	beq.n	800c73e <HAL_RCCEx_PeriphCLKConfig+0x332>
 800c724:	2b20      	cmp	r3, #32
 800c726:	d813      	bhi.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d016      	beq.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800c72c:	2b10      	cmp	r3, #16
 800c72e:	d10f      	bne.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c730:	4baf      	ldr	r3, [pc, #700]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c734:	4aae      	ldr	r2, [pc, #696]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c73a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c73c:	e00e      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	3304      	adds	r3, #4
 800c742:	2102      	movs	r1, #2
 800c744:	4618      	mov	r0, r3
 800c746:	f001 f85f 	bl	800d808 <RCCEx_PLL2_Config>
 800c74a:	4603      	mov	r3, r0
 800c74c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c74e:	e005      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c750:	2301      	movs	r3, #1
 800c752:	75fb      	strb	r3, [r7, #23]
      break;
 800c754:	e002      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800c756:	bf00      	nop
 800c758:	e000      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800c75a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c75c:	7dfb      	ldrb	r3, [r7, #23]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d109      	bne.n	800c776 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c762:	4ba3      	ldr	r3, [pc, #652]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c766:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c76e:	49a0      	ldr	r1, [pc, #640]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c770:	4313      	orrs	r3, r2
 800c772:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c774:	e001      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c776:	7dfb      	ldrb	r3, [r7, #23]
 800c778:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c782:	2b00      	cmp	r3, #0
 800c784:	d047      	beq.n	800c816 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c78a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c78e:	d030      	beq.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800c790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c794:	d82a      	bhi.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800c796:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c79a:	d02c      	beq.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800c79c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c7a0:	d824      	bhi.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800c7a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7a6:	d018      	beq.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800c7a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7ac:	d81e      	bhi.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d003      	beq.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800c7b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7b6:	d007      	beq.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800c7b8:	e018      	b.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7ba:	4b8d      	ldr	r3, [pc, #564]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7be:	4a8c      	ldr	r2, [pc, #560]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c7c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c7c6:	e017      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	3304      	adds	r3, #4
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f001 f81a 	bl	800d808 <RCCEx_PLL2_Config>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c7d8:	e00e      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	3324      	adds	r3, #36	; 0x24
 800c7de:	2100      	movs	r1, #0
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f001 f8c3 	bl	800d96c <RCCEx_PLL3_Config>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c7ea:	e005      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	75fb      	strb	r3, [r7, #23]
      break;
 800c7f0:	e002      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800c7f2:	bf00      	nop
 800c7f4:	e000      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800c7f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7f8:	7dfb      	ldrb	r3, [r7, #23]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d109      	bne.n	800c812 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c7fe:	4b7c      	ldr	r3, [pc, #496]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c802:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c80a:	4979      	ldr	r1, [pc, #484]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c80c:	4313      	orrs	r3, r2
 800c80e:	650b      	str	r3, [r1, #80]	; 0x50
 800c810:	e001      	b.n	800c816 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c812:	7dfb      	ldrb	r3, [r7, #23]
 800c814:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d049      	beq.n	800c8b6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c826:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c82a:	d02e      	beq.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800c82c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c830:	d828      	bhi.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c832:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c836:	d02a      	beq.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x482>
 800c838:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c83c:	d822      	bhi.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c83e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c842:	d026      	beq.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800c844:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c848:	d81c      	bhi.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c84a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c84e:	d010      	beq.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800c850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c854:	d816      	bhi.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c856:	2b00      	cmp	r3, #0
 800c858:	d01d      	beq.n	800c896 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800c85a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c85e:	d111      	bne.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	3304      	adds	r3, #4
 800c864:	2101      	movs	r1, #1
 800c866:	4618      	mov	r0, r3
 800c868:	f000 ffce 	bl	800d808 <RCCEx_PLL2_Config>
 800c86c:	4603      	mov	r3, r0
 800c86e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c870:	e012      	b.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	3324      	adds	r3, #36	; 0x24
 800c876:	2101      	movs	r1, #1
 800c878:	4618      	mov	r0, r3
 800c87a:	f001 f877 	bl	800d96c <RCCEx_PLL3_Config>
 800c87e:	4603      	mov	r3, r0
 800c880:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c882:	e009      	b.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c884:	2301      	movs	r3, #1
 800c886:	75fb      	strb	r3, [r7, #23]
      break;
 800c888:	e006      	b.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c88a:	bf00      	nop
 800c88c:	e004      	b.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c88e:	bf00      	nop
 800c890:	e002      	b.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c892:	bf00      	nop
 800c894:	e000      	b.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c896:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c898:	7dfb      	ldrb	r3, [r7, #23]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d109      	bne.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c89e:	4b54      	ldr	r3, [pc, #336]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c8a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8a2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8aa:	4951      	ldr	r1, [pc, #324]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	650b      	str	r3, [r1, #80]	; 0x50
 800c8b0:	e001      	b.n	800c8b6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8b2:	7dfb      	ldrb	r3, [r7, #23]
 800c8b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d04b      	beq.n	800c95a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c8c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c8cc:	d02e      	beq.n	800c92c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800c8ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c8d2:	d828      	bhi.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c8d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8d8:	d02a      	beq.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800c8da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8de:	d822      	bhi.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c8e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c8e4:	d026      	beq.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800c8e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c8ea:	d81c      	bhi.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c8ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8f0:	d010      	beq.n	800c914 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800c8f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8f6:	d816      	bhi.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d01d      	beq.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800c8fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c900:	d111      	bne.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	3304      	adds	r3, #4
 800c906:	2101      	movs	r1, #1
 800c908:	4618      	mov	r0, r3
 800c90a:	f000 ff7d 	bl	800d808 <RCCEx_PLL2_Config>
 800c90e:	4603      	mov	r3, r0
 800c910:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c912:	e012      	b.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	3324      	adds	r3, #36	; 0x24
 800c918:	2101      	movs	r1, #1
 800c91a:	4618      	mov	r0, r3
 800c91c:	f001 f826 	bl	800d96c <RCCEx_PLL3_Config>
 800c920:	4603      	mov	r3, r0
 800c922:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c924:	e009      	b.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c926:	2301      	movs	r3, #1
 800c928:	75fb      	strb	r3, [r7, #23]
      break;
 800c92a:	e006      	b.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800c92c:	bf00      	nop
 800c92e:	e004      	b.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800c930:	bf00      	nop
 800c932:	e002      	b.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800c934:	bf00      	nop
 800c936:	e000      	b.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800c938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c93a:	7dfb      	ldrb	r3, [r7, #23]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d10a      	bne.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c940:	4b2b      	ldr	r3, [pc, #172]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c944:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c94e:	4928      	ldr	r1, [pc, #160]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c950:	4313      	orrs	r3, r2
 800c952:	658b      	str	r3, [r1, #88]	; 0x58
 800c954:	e001      	b.n	800c95a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c956:	7dfb      	ldrb	r3, [r7, #23]
 800c958:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c962:	2b00      	cmp	r3, #0
 800c964:	d02f      	beq.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c96a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c96e:	d00e      	beq.n	800c98e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800c970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c974:	d814      	bhi.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800c976:	2b00      	cmp	r3, #0
 800c978:	d015      	beq.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800c97a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c97e:	d10f      	bne.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c980:	4b1b      	ldr	r3, [pc, #108]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c984:	4a1a      	ldr	r2, [pc, #104]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c98a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c98c:	e00c      	b.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	3304      	adds	r3, #4
 800c992:	2101      	movs	r1, #1
 800c994:	4618      	mov	r0, r3
 800c996:	f000 ff37 	bl	800d808 <RCCEx_PLL2_Config>
 800c99a:	4603      	mov	r3, r0
 800c99c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c99e:	e003      	b.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	75fb      	strb	r3, [r7, #23]
      break;
 800c9a4:	e000      	b.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800c9a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d109      	bne.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c9ae:	4b10      	ldr	r3, [pc, #64]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c9b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9ba:	490d      	ldr	r1, [pc, #52]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	650b      	str	r3, [r1, #80]	; 0x50
 800c9c0:	e001      	b.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9c2:	7dfb      	ldrb	r3, [r7, #23]
 800c9c4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d033      	beq.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9d6:	2b03      	cmp	r3, #3
 800c9d8:	d81c      	bhi.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800c9da:	a201      	add	r2, pc, #4	; (adr r2, 800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800c9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e0:	0800ca1b 	.word	0x0800ca1b
 800c9e4:	0800c9f5 	.word	0x0800c9f5
 800c9e8:	0800ca03 	.word	0x0800ca03
 800c9ec:	0800ca1b 	.word	0x0800ca1b
 800c9f0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9f4:	4bb8      	ldr	r3, [pc, #736]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f8:	4ab7      	ldr	r2, [pc, #732]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c9fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ca00:	e00c      	b.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	3304      	adds	r3, #4
 800ca06:	2102      	movs	r1, #2
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f000 fefd 	bl	800d808 <RCCEx_PLL2_Config>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ca12:	e003      	b.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	75fb      	strb	r3, [r7, #23]
      break;
 800ca18:	e000      	b.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800ca1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca1c:	7dfb      	ldrb	r3, [r7, #23]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d109      	bne.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ca22:	4bad      	ldr	r3, [pc, #692]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ca24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca26:	f023 0203 	bic.w	r2, r3, #3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca2e:	49aa      	ldr	r1, [pc, #680]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ca30:	4313      	orrs	r3, r2
 800ca32:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ca34:	e001      	b.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca36:	7dfb      	ldrb	r3, [r7, #23]
 800ca38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f000 8086 	beq.w	800cb54 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ca48:	4ba4      	ldr	r3, [pc, #656]	; (800ccdc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4aa3      	ldr	r2, [pc, #652]	; (800ccdc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800ca4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ca54:	f7f9 f946 	bl	8005ce4 <HAL_GetTick>
 800ca58:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ca5a:	e009      	b.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca5c:	f7f9 f942 	bl	8005ce4 <HAL_GetTick>
 800ca60:	4602      	mov	r2, r0
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	2b64      	cmp	r3, #100	; 0x64
 800ca68:	d902      	bls.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800ca6a:	2303      	movs	r3, #3
 800ca6c:	75fb      	strb	r3, [r7, #23]
        break;
 800ca6e:	e005      	b.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ca70:	4b9a      	ldr	r3, [pc, #616]	; (800ccdc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d0ef      	beq.n	800ca5c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800ca7c:	7dfb      	ldrb	r3, [r7, #23]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d166      	bne.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ca82:	4b95      	ldr	r3, [pc, #596]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ca84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ca8c:	4053      	eors	r3, r2
 800ca8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d013      	beq.n	800cabe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ca96:	4b90      	ldr	r3, [pc, #576]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ca98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca9e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800caa0:	4b8d      	ldr	r3, [pc, #564]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800caa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caa4:	4a8c      	ldr	r2, [pc, #560]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800caa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800caaa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800caac:	4b8a      	ldr	r3, [pc, #552]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800caae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab0:	4a89      	ldr	r2, [pc, #548]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cab6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cab8:	4a87      	ldr	r2, [pc, #540]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cac8:	d115      	bne.n	800caf6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800caca:	f7f9 f90b 	bl	8005ce4 <HAL_GetTick>
 800cace:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cad0:	e00b      	b.n	800caea <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cad2:	f7f9 f907 	bl	8005ce4 <HAL_GetTick>
 800cad6:	4602      	mov	r2, r0
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	1ad3      	subs	r3, r2, r3
 800cadc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d902      	bls.n	800caea <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800cae4:	2303      	movs	r3, #3
 800cae6:	75fb      	strb	r3, [r7, #23]
            break;
 800cae8:	e005      	b.n	800caf6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800caea:	4b7b      	ldr	r3, [pc, #492]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800caec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caee:	f003 0302 	and.w	r3, r3, #2
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d0ed      	beq.n	800cad2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800caf6:	7dfb      	ldrb	r3, [r7, #23]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d126      	bne.n	800cb4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cb02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb0a:	d10d      	bne.n	800cb28 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800cb0c:	4b72      	ldr	r3, [pc, #456]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cb0e:	691b      	ldr	r3, [r3, #16]
 800cb10:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cb1a:	0919      	lsrs	r1, r3, #4
 800cb1c:	4b70      	ldr	r3, [pc, #448]	; (800cce0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800cb1e:	400b      	ands	r3, r1
 800cb20:	496d      	ldr	r1, [pc, #436]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cb22:	4313      	orrs	r3, r2
 800cb24:	610b      	str	r3, [r1, #16]
 800cb26:	e005      	b.n	800cb34 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800cb28:	4b6b      	ldr	r3, [pc, #428]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	4a6a      	ldr	r2, [pc, #424]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cb2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cb32:	6113      	str	r3, [r2, #16]
 800cb34:	4b68      	ldr	r3, [pc, #416]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cb36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cb3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb42:	4965      	ldr	r1, [pc, #404]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cb44:	4313      	orrs	r3, r2
 800cb46:	670b      	str	r3, [r1, #112]	; 0x70
 800cb48:	e004      	b.n	800cb54 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cb4a:	7dfb      	ldrb	r3, [r7, #23]
 800cb4c:	75bb      	strb	r3, [r7, #22]
 800cb4e:	e001      	b.n	800cb54 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb50:	7dfb      	ldrb	r3, [r7, #23]
 800cb52:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f003 0301 	and.w	r3, r3, #1
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d07e      	beq.n	800cc5e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb64:	2b28      	cmp	r3, #40	; 0x28
 800cb66:	d867      	bhi.n	800cc38 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800cb68:	a201      	add	r2, pc, #4	; (adr r2, 800cb70 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800cb6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb6e:	bf00      	nop
 800cb70:	0800cc3f 	.word	0x0800cc3f
 800cb74:	0800cc39 	.word	0x0800cc39
 800cb78:	0800cc39 	.word	0x0800cc39
 800cb7c:	0800cc39 	.word	0x0800cc39
 800cb80:	0800cc39 	.word	0x0800cc39
 800cb84:	0800cc39 	.word	0x0800cc39
 800cb88:	0800cc39 	.word	0x0800cc39
 800cb8c:	0800cc39 	.word	0x0800cc39
 800cb90:	0800cc15 	.word	0x0800cc15
 800cb94:	0800cc39 	.word	0x0800cc39
 800cb98:	0800cc39 	.word	0x0800cc39
 800cb9c:	0800cc39 	.word	0x0800cc39
 800cba0:	0800cc39 	.word	0x0800cc39
 800cba4:	0800cc39 	.word	0x0800cc39
 800cba8:	0800cc39 	.word	0x0800cc39
 800cbac:	0800cc39 	.word	0x0800cc39
 800cbb0:	0800cc27 	.word	0x0800cc27
 800cbb4:	0800cc39 	.word	0x0800cc39
 800cbb8:	0800cc39 	.word	0x0800cc39
 800cbbc:	0800cc39 	.word	0x0800cc39
 800cbc0:	0800cc39 	.word	0x0800cc39
 800cbc4:	0800cc39 	.word	0x0800cc39
 800cbc8:	0800cc39 	.word	0x0800cc39
 800cbcc:	0800cc39 	.word	0x0800cc39
 800cbd0:	0800cc3f 	.word	0x0800cc3f
 800cbd4:	0800cc39 	.word	0x0800cc39
 800cbd8:	0800cc39 	.word	0x0800cc39
 800cbdc:	0800cc39 	.word	0x0800cc39
 800cbe0:	0800cc39 	.word	0x0800cc39
 800cbe4:	0800cc39 	.word	0x0800cc39
 800cbe8:	0800cc39 	.word	0x0800cc39
 800cbec:	0800cc39 	.word	0x0800cc39
 800cbf0:	0800cc3f 	.word	0x0800cc3f
 800cbf4:	0800cc39 	.word	0x0800cc39
 800cbf8:	0800cc39 	.word	0x0800cc39
 800cbfc:	0800cc39 	.word	0x0800cc39
 800cc00:	0800cc39 	.word	0x0800cc39
 800cc04:	0800cc39 	.word	0x0800cc39
 800cc08:	0800cc39 	.word	0x0800cc39
 800cc0c:	0800cc39 	.word	0x0800cc39
 800cc10:	0800cc3f 	.word	0x0800cc3f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	3304      	adds	r3, #4
 800cc18:	2101      	movs	r1, #1
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f000 fdf4 	bl	800d808 <RCCEx_PLL2_Config>
 800cc20:	4603      	mov	r3, r0
 800cc22:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800cc24:	e00c      	b.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	3324      	adds	r3, #36	; 0x24
 800cc2a:	2101      	movs	r1, #1
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f000 fe9d 	bl	800d96c <RCCEx_PLL3_Config>
 800cc32:	4603      	mov	r3, r0
 800cc34:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800cc36:	e003      	b.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	75fb      	strb	r3, [r7, #23]
      break;
 800cc3c:	e000      	b.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800cc3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc40:	7dfb      	ldrb	r3, [r7, #23]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d109      	bne.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cc46:	4b24      	ldr	r3, [pc, #144]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cc48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc4a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc52:	4921      	ldr	r1, [pc, #132]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cc54:	4313      	orrs	r3, r2
 800cc56:	654b      	str	r3, [r1, #84]	; 0x54
 800cc58:	e001      	b.n	800cc5e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc5a:	7dfb      	ldrb	r3, [r7, #23]
 800cc5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f003 0302 	and.w	r3, r3, #2
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d03e      	beq.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc6e:	2b05      	cmp	r3, #5
 800cc70:	d820      	bhi.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800cc72:	a201      	add	r2, pc, #4	; (adr r2, 800cc78 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800cc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc78:	0800ccbb 	.word	0x0800ccbb
 800cc7c:	0800cc91 	.word	0x0800cc91
 800cc80:	0800cca3 	.word	0x0800cca3
 800cc84:	0800ccbb 	.word	0x0800ccbb
 800cc88:	0800ccbb 	.word	0x0800ccbb
 800cc8c:	0800ccbb 	.word	0x0800ccbb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	3304      	adds	r3, #4
 800cc94:	2101      	movs	r1, #1
 800cc96:	4618      	mov	r0, r3
 800cc98:	f000 fdb6 	bl	800d808 <RCCEx_PLL2_Config>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800cca0:	e00c      	b.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	3324      	adds	r3, #36	; 0x24
 800cca6:	2101      	movs	r1, #1
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f000 fe5f 	bl	800d96c <RCCEx_PLL3_Config>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ccb2:	e003      	b.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	75fb      	strb	r3, [r7, #23]
      break;
 800ccb8:	e000      	b.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800ccba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ccbc:	7dfb      	ldrb	r3, [r7, #23]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d110      	bne.n	800cce4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ccc2:	4b05      	ldr	r3, [pc, #20]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ccc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccc6:	f023 0207 	bic.w	r2, r3, #7
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccce:	4902      	ldr	r1, [pc, #8]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	654b      	str	r3, [r1, #84]	; 0x54
 800ccd4:	e008      	b.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800ccd6:	bf00      	nop
 800ccd8:	58024400 	.word	0x58024400
 800ccdc:	58024800 	.word	0x58024800
 800cce0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cce4:	7dfb      	ldrb	r3, [r7, #23]
 800cce6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f003 0304 	and.w	r3, r3, #4
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d039      	beq.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccfa:	2b05      	cmp	r3, #5
 800ccfc:	d820      	bhi.n	800cd40 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800ccfe:	a201      	add	r2, pc, #4	; (adr r2, 800cd04 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800cd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd04:	0800cd47 	.word	0x0800cd47
 800cd08:	0800cd1d 	.word	0x0800cd1d
 800cd0c:	0800cd2f 	.word	0x0800cd2f
 800cd10:	0800cd47 	.word	0x0800cd47
 800cd14:	0800cd47 	.word	0x0800cd47
 800cd18:	0800cd47 	.word	0x0800cd47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	3304      	adds	r3, #4
 800cd20:	2101      	movs	r1, #1
 800cd22:	4618      	mov	r0, r3
 800cd24:	f000 fd70 	bl	800d808 <RCCEx_PLL2_Config>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cd2c:	e00c      	b.n	800cd48 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	3324      	adds	r3, #36	; 0x24
 800cd32:	2101      	movs	r1, #1
 800cd34:	4618      	mov	r0, r3
 800cd36:	f000 fe19 	bl	800d96c <RCCEx_PLL3_Config>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cd3e:	e003      	b.n	800cd48 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cd40:	2301      	movs	r3, #1
 800cd42:	75fb      	strb	r3, [r7, #23]
      break;
 800cd44:	e000      	b.n	800cd48 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800cd46:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd48:	7dfb      	ldrb	r3, [r7, #23]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d10a      	bne.n	800cd64 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cd4e:	4bb7      	ldr	r3, [pc, #732]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cd50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd52:	f023 0207 	bic.w	r2, r3, #7
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd5c:	49b3      	ldr	r1, [pc, #716]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	658b      	str	r3, [r1, #88]	; 0x58
 800cd62:	e001      	b.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd64:	7dfb      	ldrb	r3, [r7, #23]
 800cd66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f003 0320 	and.w	r3, r3, #32
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d04b      	beq.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd7e:	d02e      	beq.n	800cdde <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800cd80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd84:	d828      	bhi.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800cd86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd8a:	d02a      	beq.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800cd8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd90:	d822      	bhi.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800cd92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd96:	d026      	beq.n	800cde6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800cd98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd9c:	d81c      	bhi.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800cd9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cda2:	d010      	beq.n	800cdc6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800cda4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cda8:	d816      	bhi.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d01d      	beq.n	800cdea <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800cdae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdb2:	d111      	bne.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	3304      	adds	r3, #4
 800cdb8:	2100      	movs	r1, #0
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f000 fd24 	bl	800d808 <RCCEx_PLL2_Config>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cdc4:	e012      	b.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	3324      	adds	r3, #36	; 0x24
 800cdca:	2102      	movs	r1, #2
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f000 fdcd 	bl	800d96c <RCCEx_PLL3_Config>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cdd6:	e009      	b.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	75fb      	strb	r3, [r7, #23]
      break;
 800cddc:	e006      	b.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800cdde:	bf00      	nop
 800cde0:	e004      	b.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800cde2:	bf00      	nop
 800cde4:	e002      	b.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800cde6:	bf00      	nop
 800cde8:	e000      	b.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800cdea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cdec:	7dfb      	ldrb	r3, [r7, #23]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d10a      	bne.n	800ce08 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cdf2:	4b8e      	ldr	r3, [pc, #568]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cdf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdf6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce00:	498a      	ldr	r1, [pc, #552]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ce02:	4313      	orrs	r3, r2
 800ce04:	654b      	str	r3, [r1, #84]	; 0x54
 800ce06:	e001      	b.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce08:	7dfb      	ldrb	r3, [r7, #23]
 800ce0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d04b      	beq.n	800ceb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ce1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ce22:	d02e      	beq.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800ce24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ce28:	d828      	bhi.n	800ce7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ce2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce2e:	d02a      	beq.n	800ce86 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800ce30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce34:	d822      	bhi.n	800ce7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ce36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ce3a:	d026      	beq.n	800ce8a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800ce3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ce40:	d81c      	bhi.n	800ce7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ce42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce46:	d010      	beq.n	800ce6a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800ce48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce4c:	d816      	bhi.n	800ce7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d01d      	beq.n	800ce8e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800ce52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce56:	d111      	bne.n	800ce7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	3304      	adds	r3, #4
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f000 fcd2 	bl	800d808 <RCCEx_PLL2_Config>
 800ce64:	4603      	mov	r3, r0
 800ce66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ce68:	e012      	b.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	3324      	adds	r3, #36	; 0x24
 800ce6e:	2102      	movs	r1, #2
 800ce70:	4618      	mov	r0, r3
 800ce72:	f000 fd7b 	bl	800d96c <RCCEx_PLL3_Config>
 800ce76:	4603      	mov	r3, r0
 800ce78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ce7a:	e009      	b.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	75fb      	strb	r3, [r7, #23]
      break;
 800ce80:	e006      	b.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ce82:	bf00      	nop
 800ce84:	e004      	b.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ce86:	bf00      	nop
 800ce88:	e002      	b.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ce8a:	bf00      	nop
 800ce8c:	e000      	b.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ce8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ce90:	7dfb      	ldrb	r3, [r7, #23]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d10a      	bne.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ce96:	4b65      	ldr	r3, [pc, #404]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ce98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cea4:	4961      	ldr	r1, [pc, #388]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cea6:	4313      	orrs	r3, r2
 800cea8:	658b      	str	r3, [r1, #88]	; 0x58
 800ceaa:	e001      	b.n	800ceb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ceac:	7dfb      	ldrb	r3, [r7, #23]
 800ceae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d04b      	beq.n	800cf54 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cec2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cec6:	d02e      	beq.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800cec8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cecc:	d828      	bhi.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800cece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ced2:	d02a      	beq.n	800cf2a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800ced4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ced8:	d822      	bhi.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ceda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cede:	d026      	beq.n	800cf2e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800cee0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cee4:	d81c      	bhi.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800cee6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ceea:	d010      	beq.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800ceec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cef0:	d816      	bhi.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d01d      	beq.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800cef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cefa:	d111      	bne.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	3304      	adds	r3, #4
 800cf00:	2100      	movs	r1, #0
 800cf02:	4618      	mov	r0, r3
 800cf04:	f000 fc80 	bl	800d808 <RCCEx_PLL2_Config>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800cf0c:	e012      	b.n	800cf34 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	3324      	adds	r3, #36	; 0x24
 800cf12:	2102      	movs	r1, #2
 800cf14:	4618      	mov	r0, r3
 800cf16:	f000 fd29 	bl	800d96c <RCCEx_PLL3_Config>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800cf1e:	e009      	b.n	800cf34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cf20:	2301      	movs	r3, #1
 800cf22:	75fb      	strb	r3, [r7, #23]
      break;
 800cf24:	e006      	b.n	800cf34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800cf26:	bf00      	nop
 800cf28:	e004      	b.n	800cf34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800cf2a:	bf00      	nop
 800cf2c:	e002      	b.n	800cf34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800cf2e:	bf00      	nop
 800cf30:	e000      	b.n	800cf34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800cf32:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cf34:	7dfb      	ldrb	r3, [r7, #23]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d10a      	bne.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800cf3a:	4b3c      	ldr	r3, [pc, #240]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cf3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cf48:	4938      	ldr	r1, [pc, #224]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	658b      	str	r3, [r1, #88]	; 0x58
 800cf4e:	e001      	b.n	800cf54 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf50:	7dfb      	ldrb	r3, [r7, #23]
 800cf52:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f003 0308 	and.w	r3, r3, #8
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d01a      	beq.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf6a:	d10a      	bne.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	3324      	adds	r3, #36	; 0x24
 800cf70:	2102      	movs	r1, #2
 800cf72:	4618      	mov	r0, r3
 800cf74:	f000 fcfa 	bl	800d96c <RCCEx_PLL3_Config>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d001      	beq.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800cf82:	4b2a      	ldr	r3, [pc, #168]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cf84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf90:	4926      	ldr	r1, [pc, #152]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cf92:	4313      	orrs	r3, r2
 800cf94:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f003 0310 	and.w	r3, r3, #16
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d01a      	beq.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfac:	d10a      	bne.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	3324      	adds	r3, #36	; 0x24
 800cfb2:	2102      	movs	r1, #2
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f000 fcd9 	bl	800d96c <RCCEx_PLL3_Config>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d001      	beq.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cfc4:	4b19      	ldr	r3, [pc, #100]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cfc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfd2:	4916      	ldr	r1, [pc, #88]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d036      	beq.n	800d052 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cfea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfee:	d01f      	beq.n	800d030 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800cff0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cff4:	d817      	bhi.n	800d026 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d003      	beq.n	800d002 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800cffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cffe:	d009      	beq.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800d000:	e011      	b.n	800d026 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	3304      	adds	r3, #4
 800d006:	2100      	movs	r1, #0
 800d008:	4618      	mov	r0, r3
 800d00a:	f000 fbfd 	bl	800d808 <RCCEx_PLL2_Config>
 800d00e:	4603      	mov	r3, r0
 800d010:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800d012:	e00e      	b.n	800d032 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	3324      	adds	r3, #36	; 0x24
 800d018:	2102      	movs	r1, #2
 800d01a:	4618      	mov	r0, r3
 800d01c:	f000 fca6 	bl	800d96c <RCCEx_PLL3_Config>
 800d020:	4603      	mov	r3, r0
 800d022:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800d024:	e005      	b.n	800d032 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d026:	2301      	movs	r3, #1
 800d028:	75fb      	strb	r3, [r7, #23]
      break;
 800d02a:	e002      	b.n	800d032 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800d02c:	58024400 	.word	0x58024400
      break;
 800d030:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d032:	7dfb      	ldrb	r3, [r7, #23]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d10a      	bne.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d038:	4b93      	ldr	r3, [pc, #588]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d03a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d03c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d046:	4990      	ldr	r1, [pc, #576]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d048:	4313      	orrs	r3, r2
 800d04a:	658b      	str	r3, [r1, #88]	; 0x58
 800d04c:	e001      	b.n	800d052 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d04e:	7dfb      	ldrb	r3, [r7, #23]
 800d050:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d033      	beq.n	800d0c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d064:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d068:	d01c      	beq.n	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800d06a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d06e:	d816      	bhi.n	800d09e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800d070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d074:	d003      	beq.n	800d07e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800d076:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d07a:	d007      	beq.n	800d08c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800d07c:	e00f      	b.n	800d09e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d07e:	4b82      	ldr	r3, [pc, #520]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d082:	4a81      	ldr	r2, [pc, #516]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d088:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800d08a:	e00c      	b.n	800d0a6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	3324      	adds	r3, #36	; 0x24
 800d090:	2101      	movs	r1, #1
 800d092:	4618      	mov	r0, r3
 800d094:	f000 fc6a 	bl	800d96c <RCCEx_PLL3_Config>
 800d098:	4603      	mov	r3, r0
 800d09a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800d09c:	e003      	b.n	800d0a6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	75fb      	strb	r3, [r7, #23]
      break;
 800d0a2:	e000      	b.n	800d0a6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800d0a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d0a6:	7dfb      	ldrb	r3, [r7, #23]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d10a      	bne.n	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d0ac:	4b76      	ldr	r3, [pc, #472]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d0ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0ba:	4973      	ldr	r1, [pc, #460]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	654b      	str	r3, [r1, #84]	; 0x54
 800d0c0:	e001      	b.n	800d0c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0c2:	7dfb      	ldrb	r3, [r7, #23]
 800d0c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d029      	beq.n	800d126 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d003      	beq.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800d0da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0de:	d007      	beq.n	800d0f0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800d0e0:	e00f      	b.n	800d102 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0e2:	4b69      	ldr	r3, [pc, #420]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e6:	4a68      	ldr	r2, [pc, #416]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d0e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d0ee:	e00b      	b.n	800d108 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	2102      	movs	r1, #2
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f000 fb86 	bl	800d808 <RCCEx_PLL2_Config>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d100:	e002      	b.n	800d108 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800d102:	2301      	movs	r3, #1
 800d104:	75fb      	strb	r3, [r7, #23]
      break;
 800d106:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d108:	7dfb      	ldrb	r3, [r7, #23]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d109      	bne.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d10e:	4b5e      	ldr	r3, [pc, #376]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d112:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d11a:	495b      	ldr	r1, [pc, #364]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d11c:	4313      	orrs	r3, r2
 800d11e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d120:	e001      	b.n	800d126 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d122:	7dfb      	ldrb	r3, [r7, #23]
 800d124:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d00a      	beq.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	3324      	adds	r3, #36	; 0x24
 800d136:	2102      	movs	r1, #2
 800d138:	4618      	mov	r0, r3
 800d13a:	f000 fc17 	bl	800d96c <RCCEx_PLL3_Config>
 800d13e:	4603      	mov	r3, r0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d001      	beq.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800d144:	2301      	movs	r3, #1
 800d146:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d150:	2b00      	cmp	r3, #0
 800d152:	d030      	beq.n	800d1b6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d158:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d15c:	d017      	beq.n	800d18e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800d15e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d162:	d811      	bhi.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800d164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d168:	d013      	beq.n	800d192 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800d16a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d16e:	d80b      	bhi.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800d170:	2b00      	cmp	r3, #0
 800d172:	d010      	beq.n	800d196 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800d174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d178:	d106      	bne.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d17a:	4b43      	ldr	r3, [pc, #268]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17e:	4a42      	ldr	r2, [pc, #264]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d184:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800d186:	e007      	b.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d188:	2301      	movs	r3, #1
 800d18a:	75fb      	strb	r3, [r7, #23]
      break;
 800d18c:	e004      	b.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800d18e:	bf00      	nop
 800d190:	e002      	b.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800d192:	bf00      	nop
 800d194:	e000      	b.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800d196:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d198:	7dfb      	ldrb	r3, [r7, #23]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d109      	bne.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d19e:	4b3a      	ldr	r3, [pc, #232]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1aa:	4937      	ldr	r1, [pc, #220]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	654b      	str	r3, [r1, #84]	; 0x54
 800d1b0:	e001      	b.n	800d1b6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1b2:	7dfb      	ldrb	r3, [r7, #23]
 800d1b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d008      	beq.n	800d1d4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d1c2:	4b31      	ldr	r3, [pc, #196]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1ce:	492e      	ldr	r1, [pc, #184]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d009      	beq.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d1e0:	4b29      	ldr	r3, [pc, #164]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1e2:	691b      	ldr	r3, [r3, #16]
 800d1e4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d1ee:	4926      	ldr	r1, [pc, #152]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d008      	beq.n	800d212 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d200:	4b21      	ldr	r3, [pc, #132]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d204:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d20c:	491e      	ldr	r1, [pc, #120]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d20e:	4313      	orrs	r3, r2
 800d210:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00d      	beq.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d21e:	4b1a      	ldr	r3, [pc, #104]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d220:	691b      	ldr	r3, [r3, #16]
 800d222:	4a19      	ldr	r2, [pc, #100]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d224:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d228:	6113      	str	r3, [r2, #16]
 800d22a:	4b17      	ldr	r3, [pc, #92]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d22c:	691a      	ldr	r2, [r3, #16]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d234:	4914      	ldr	r1, [pc, #80]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d236:	4313      	orrs	r3, r2
 800d238:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	da08      	bge.n	800d254 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d242:	4b11      	ldr	r3, [pc, #68]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d246:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d24e:	490e      	ldr	r1, [pc, #56]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d250:	4313      	orrs	r3, r2
 800d252:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d009      	beq.n	800d274 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d260:	4b09      	ldr	r3, [pc, #36]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d264:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d26e:	4906      	ldr	r1, [pc, #24]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d270:	4313      	orrs	r3, r2
 800d272:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800d274:	7dbb      	ldrb	r3, [r7, #22]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d101      	bne.n	800d27e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	e000      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800d27e:	2301      	movs	r3, #1
}
 800d280:	4618      	mov	r0, r3
 800d282:	3718      	adds	r7, #24
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	58024400 	.word	0x58024400

0800d28c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d290:	f7ff f860 	bl	800c354 <HAL_RCC_GetHCLKFreq>
 800d294:	4602      	mov	r2, r0
 800d296:	4b06      	ldr	r3, [pc, #24]	; (800d2b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d298:	6a1b      	ldr	r3, [r3, #32]
 800d29a:	091b      	lsrs	r3, r3, #4
 800d29c:	f003 0307 	and.w	r3, r3, #7
 800d2a0:	4904      	ldr	r1, [pc, #16]	; (800d2b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d2a2:	5ccb      	ldrb	r3, [r1, r3]
 800d2a4:	f003 031f 	and.w	r3, r3, #31
 800d2a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	58024400 	.word	0x58024400
 800d2b4:	080150ec 	.word	0x080150ec

0800d2b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b089      	sub	sp, #36	; 0x24
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d2c0:	4ba1      	ldr	r3, [pc, #644]	; (800d548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c4:	f003 0303 	and.w	r3, r3, #3
 800d2c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d2ca:	4b9f      	ldr	r3, [pc, #636]	; (800d548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ce:	0b1b      	lsrs	r3, r3, #12
 800d2d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d2d6:	4b9c      	ldr	r3, [pc, #624]	; (800d548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2da:	091b      	lsrs	r3, r3, #4
 800d2dc:	f003 0301 	and.w	r3, r3, #1
 800d2e0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d2e2:	4b99      	ldr	r3, [pc, #612]	; (800d548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2e6:	08db      	lsrs	r3, r3, #3
 800d2e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2ec:	693a      	ldr	r2, [r7, #16]
 800d2ee:	fb02 f303 	mul.w	r3, r2, r3
 800d2f2:	ee07 3a90 	vmov	s15, r3
 800d2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	2b00      	cmp	r3, #0
 800d302:	f000 8111 	beq.w	800d528 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	2b02      	cmp	r3, #2
 800d30a:	f000 8083 	beq.w	800d414 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d30e:	69bb      	ldr	r3, [r7, #24]
 800d310:	2b02      	cmp	r3, #2
 800d312:	f200 80a1 	bhi.w	800d458 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d316:	69bb      	ldr	r3, [r7, #24]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d003      	beq.n	800d324 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d31c:	69bb      	ldr	r3, [r7, #24]
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d056      	beq.n	800d3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d322:	e099      	b.n	800d458 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d324:	4b88      	ldr	r3, [pc, #544]	; (800d548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f003 0320 	and.w	r3, r3, #32
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d02d      	beq.n	800d38c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d330:	4b85      	ldr	r3, [pc, #532]	; (800d548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	08db      	lsrs	r3, r3, #3
 800d336:	f003 0303 	and.w	r3, r3, #3
 800d33a:	4a84      	ldr	r2, [pc, #528]	; (800d54c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d33c:	fa22 f303 	lsr.w	r3, r2, r3
 800d340:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	ee07 3a90 	vmov	s15, r3
 800d348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	ee07 3a90 	vmov	s15, r3
 800d352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d35a:	4b7b      	ldr	r3, [pc, #492]	; (800d548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d35e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d362:	ee07 3a90 	vmov	s15, r3
 800d366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d36a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d36e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d550 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d37a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d37e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d382:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d386:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d38a:	e087      	b.n	800d49c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	ee07 3a90 	vmov	s15, r3
 800d392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d396:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d554 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d39a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d39e:	4b6a      	ldr	r3, [pc, #424]	; (800d548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3a6:	ee07 3a90 	vmov	s15, r3
 800d3aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d550 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d3ce:	e065      	b.n	800d49c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	ee07 3a90 	vmov	s15, r3
 800d3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d558 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d3de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3e2:	4b59      	ldr	r3, [pc, #356]	; (800d548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3ea:	ee07 3a90 	vmov	s15, r3
 800d3ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d550 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d40a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d40e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d412:	e043      	b.n	800d49c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	ee07 3a90 	vmov	s15, r3
 800d41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d41e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d55c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d426:	4b48      	ldr	r3, [pc, #288]	; (800d548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d42a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d42e:	ee07 3a90 	vmov	s15, r3
 800d432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d436:	ed97 6a03 	vldr	s12, [r7, #12]
 800d43a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d550 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d43e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d44a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d44e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d452:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d456:	e021      	b.n	800d49c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	ee07 3a90 	vmov	s15, r3
 800d45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d462:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d558 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d46a:	4b37      	ldr	r3, [pc, #220]	; (800d548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d46e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d472:	ee07 3a90 	vmov	s15, r3
 800d476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d47a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d47e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d550 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d48a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d48e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d492:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d496:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d49a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800d49c:	4b2a      	ldr	r3, [pc, #168]	; (800d548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a0:	0a5b      	lsrs	r3, r3, #9
 800d4a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4a6:	ee07 3a90 	vmov	s15, r3
 800d4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4c2:	ee17 2a90 	vmov	r2, s15
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800d4ca:	4b1f      	ldr	r3, [pc, #124]	; (800d548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ce:	0c1b      	lsrs	r3, r3, #16
 800d4d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4d4:	ee07 3a90 	vmov	s15, r3
 800d4d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4f0:	ee17 2a90 	vmov	r2, s15
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800d4f8:	4b13      	ldr	r3, [pc, #76]	; (800d548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4fc:	0e1b      	lsrs	r3, r3, #24
 800d4fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d502:	ee07 3a90 	vmov	s15, r3
 800d506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d50a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d50e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d512:	edd7 6a07 	vldr	s13, [r7, #28]
 800d516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d51a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d51e:	ee17 2a90 	vmov	r2, s15
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d526:	e008      	b.n	800d53a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2200      	movs	r2, #0
 800d532:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	609a      	str	r2, [r3, #8]
}
 800d53a:	bf00      	nop
 800d53c:	3724      	adds	r7, #36	; 0x24
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr
 800d546:	bf00      	nop
 800d548:	58024400 	.word	0x58024400
 800d54c:	03d09000 	.word	0x03d09000
 800d550:	46000000 	.word	0x46000000
 800d554:	4c742400 	.word	0x4c742400
 800d558:	4a742400 	.word	0x4a742400
 800d55c:	4bbebc20 	.word	0x4bbebc20

0800d560 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800d560:	b480      	push	{r7}
 800d562:	b089      	sub	sp, #36	; 0x24
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d568:	4ba1      	ldr	r3, [pc, #644]	; (800d7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d56c:	f003 0303 	and.w	r3, r3, #3
 800d570:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800d572:	4b9f      	ldr	r3, [pc, #636]	; (800d7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d576:	0d1b      	lsrs	r3, r3, #20
 800d578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d57c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d57e:	4b9c      	ldr	r3, [pc, #624]	; (800d7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d582:	0a1b      	lsrs	r3, r3, #8
 800d584:	f003 0301 	and.w	r3, r3, #1
 800d588:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800d58a:	4b99      	ldr	r3, [pc, #612]	; (800d7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d58c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d58e:	08db      	lsrs	r3, r3, #3
 800d590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d594:	693a      	ldr	r2, [r7, #16]
 800d596:	fb02 f303 	mul.w	r3, r2, r3
 800d59a:	ee07 3a90 	vmov	s15, r3
 800d59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	f000 8111 	beq.w	800d7d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	2b02      	cmp	r3, #2
 800d5b2:	f000 8083 	beq.w	800d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	2b02      	cmp	r3, #2
 800d5ba:	f200 80a1 	bhi.w	800d700 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d003      	beq.n	800d5cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	2b01      	cmp	r3, #1
 800d5c8:	d056      	beq.n	800d678 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d5ca:	e099      	b.n	800d700 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5cc:	4b88      	ldr	r3, [pc, #544]	; (800d7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f003 0320 	and.w	r3, r3, #32
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d02d      	beq.n	800d634 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d5d8:	4b85      	ldr	r3, [pc, #532]	; (800d7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	08db      	lsrs	r3, r3, #3
 800d5de:	f003 0303 	and.w	r3, r3, #3
 800d5e2:	4a84      	ldr	r2, [pc, #528]	; (800d7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d5e4:	fa22 f303 	lsr.w	r3, r2, r3
 800d5e8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	ee07 3a90 	vmov	s15, r3
 800d5f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	ee07 3a90 	vmov	s15, r3
 800d5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d602:	4b7b      	ldr	r3, [pc, #492]	; (800d7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d60a:	ee07 3a90 	vmov	s15, r3
 800d60e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d612:	ed97 6a03 	vldr	s12, [r7, #12]
 800d616:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d61a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d61e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d62e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d632:	e087      	b.n	800d744 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	ee07 3a90 	vmov	s15, r3
 800d63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d63e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d7fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d646:	4b6a      	ldr	r3, [pc, #424]	; (800d7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d64e:	ee07 3a90 	vmov	s15, r3
 800d652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d656:	ed97 6a03 	vldr	s12, [r7, #12]
 800d65a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d65e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d66a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d66e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d672:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d676:	e065      	b.n	800d744 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	ee07 3a90 	vmov	s15, r3
 800d67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d682:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d68a:	4b59      	ldr	r3, [pc, #356]	; (800d7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d692:	ee07 3a90 	vmov	s15, r3
 800d696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d69a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d69e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d6ba:	e043      	b.n	800d744 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	ee07 3a90 	vmov	s15, r3
 800d6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d804 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d6ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6ce:	4b48      	ldr	r3, [pc, #288]	; (800d7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6d6:	ee07 3a90 	vmov	s15, r3
 800d6da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6de:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d6fe:	e021      	b.n	800d744 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	ee07 3a90 	vmov	s15, r3
 800d706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d70a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d70e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d712:	4b37      	ldr	r3, [pc, #220]	; (800d7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d71a:	ee07 3a90 	vmov	s15, r3
 800d71e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d722:	ed97 6a03 	vldr	s12, [r7, #12]
 800d726:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d72a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d72e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d73a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d73e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d742:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d744:	4b2a      	ldr	r3, [pc, #168]	; (800d7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d748:	0a5b      	lsrs	r3, r3, #9
 800d74a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d74e:	ee07 3a90 	vmov	s15, r3
 800d752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d75a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d75e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d76a:	ee17 2a90 	vmov	r2, s15
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d772:	4b1f      	ldr	r3, [pc, #124]	; (800d7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d776:	0c1b      	lsrs	r3, r3, #16
 800d778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d77c:	ee07 3a90 	vmov	s15, r3
 800d780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d788:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d78c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d798:	ee17 2a90 	vmov	r2, s15
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d7a0:	4b13      	ldr	r3, [pc, #76]	; (800d7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7a4:	0e1b      	lsrs	r3, r3, #24
 800d7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7aa:	ee07 3a90 	vmov	s15, r3
 800d7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7c6:	ee17 2a90 	vmov	r2, s15
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d7ce:	e008      	b.n	800d7e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	609a      	str	r2, [r3, #8]
}
 800d7e2:	bf00      	nop
 800d7e4:	3724      	adds	r7, #36	; 0x24
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	58024400 	.word	0x58024400
 800d7f4:	03d09000 	.word	0x03d09000
 800d7f8:	46000000 	.word	0x46000000
 800d7fc:	4c742400 	.word	0x4c742400
 800d800:	4a742400 	.word	0x4a742400
 800d804:	4bbebc20 	.word	0x4bbebc20

0800d808 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d812:	2300      	movs	r3, #0
 800d814:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d816:	4b53      	ldr	r3, [pc, #332]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d81a:	f003 0303 	and.w	r3, r3, #3
 800d81e:	2b03      	cmp	r3, #3
 800d820:	d101      	bne.n	800d826 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d822:	2301      	movs	r3, #1
 800d824:	e099      	b.n	800d95a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d826:	4b4f      	ldr	r3, [pc, #316]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4a4e      	ldr	r2, [pc, #312]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d82c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d830:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d832:	f7f8 fa57 	bl	8005ce4 <HAL_GetTick>
 800d836:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d838:	e008      	b.n	800d84c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d83a:	f7f8 fa53 	bl	8005ce4 <HAL_GetTick>
 800d83e:	4602      	mov	r2, r0
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	1ad3      	subs	r3, r2, r3
 800d844:	2b02      	cmp	r3, #2
 800d846:	d901      	bls.n	800d84c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d848:	2303      	movs	r3, #3
 800d84a:	e086      	b.n	800d95a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d84c:	4b45      	ldr	r3, [pc, #276]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d854:	2b00      	cmp	r3, #0
 800d856:	d1f0      	bne.n	800d83a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d858:	4b42      	ldr	r3, [pc, #264]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d85c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	031b      	lsls	r3, r3, #12
 800d866:	493f      	ldr	r1, [pc, #252]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d868:	4313      	orrs	r3, r2
 800d86a:	628b      	str	r3, [r1, #40]	; 0x28
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	3b01      	subs	r3, #1
 800d872:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	689b      	ldr	r3, [r3, #8]
 800d87a:	3b01      	subs	r3, #1
 800d87c:	025b      	lsls	r3, r3, #9
 800d87e:	b29b      	uxth	r3, r3
 800d880:	431a      	orrs	r2, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	68db      	ldr	r3, [r3, #12]
 800d886:	3b01      	subs	r3, #1
 800d888:	041b      	lsls	r3, r3, #16
 800d88a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d88e:	431a      	orrs	r2, r3
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	691b      	ldr	r3, [r3, #16]
 800d894:	3b01      	subs	r3, #1
 800d896:	061b      	lsls	r3, r3, #24
 800d898:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d89c:	4931      	ldr	r1, [pc, #196]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d8a2:	4b30      	ldr	r3, [pc, #192]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	695b      	ldr	r3, [r3, #20]
 800d8ae:	492d      	ldr	r1, [pc, #180]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d8b4:	4b2b      	ldr	r3, [pc, #172]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b8:	f023 0220 	bic.w	r2, r3, #32
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	699b      	ldr	r3, [r3, #24]
 800d8c0:	4928      	ldr	r1, [pc, #160]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d8c6:	4b27      	ldr	r3, [pc, #156]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ca:	4a26      	ldr	r2, [pc, #152]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d8cc:	f023 0310 	bic.w	r3, r3, #16
 800d8d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d8d2:	4b24      	ldr	r3, [pc, #144]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d8d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8d6:	4b24      	ldr	r3, [pc, #144]	; (800d968 <RCCEx_PLL2_Config+0x160>)
 800d8d8:	4013      	ands	r3, r2
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	69d2      	ldr	r2, [r2, #28]
 800d8de:	00d2      	lsls	r2, r2, #3
 800d8e0:	4920      	ldr	r1, [pc, #128]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d8e6:	4b1f      	ldr	r3, [pc, #124]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ea:	4a1e      	ldr	r2, [pc, #120]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d8ec:	f043 0310 	orr.w	r3, r3, #16
 800d8f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d106      	bne.n	800d906 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d8f8:	4b1a      	ldr	r3, [pc, #104]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8fc:	4a19      	ldr	r2, [pc, #100]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d8fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d902:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d904:	e00f      	b.n	800d926 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d106      	bne.n	800d91a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d90c:	4b15      	ldr	r3, [pc, #84]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d910:	4a14      	ldr	r2, [pc, #80]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d916:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d918:	e005      	b.n	800d926 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d91a:	4b12      	ldr	r3, [pc, #72]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d91e:	4a11      	ldr	r2, [pc, #68]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d920:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d924:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d926:	4b0f      	ldr	r3, [pc, #60]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4a0e      	ldr	r2, [pc, #56]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d92c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d932:	f7f8 f9d7 	bl	8005ce4 <HAL_GetTick>
 800d936:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d938:	e008      	b.n	800d94c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d93a:	f7f8 f9d3 	bl	8005ce4 <HAL_GetTick>
 800d93e:	4602      	mov	r2, r0
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	1ad3      	subs	r3, r2, r3
 800d944:	2b02      	cmp	r3, #2
 800d946:	d901      	bls.n	800d94c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d948:	2303      	movs	r3, #3
 800d94a:	e006      	b.n	800d95a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d94c:	4b05      	ldr	r3, [pc, #20]	; (800d964 <RCCEx_PLL2_Config+0x15c>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d954:	2b00      	cmp	r3, #0
 800d956:	d0f0      	beq.n	800d93a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d958:	7bfb      	ldrb	r3, [r7, #15]
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3710      	adds	r7, #16
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	58024400 	.word	0x58024400
 800d968:	ffff0007 	.word	0xffff0007

0800d96c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d976:	2300      	movs	r3, #0
 800d978:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d97a:	4b53      	ldr	r3, [pc, #332]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800d97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d97e:	f003 0303 	and.w	r3, r3, #3
 800d982:	2b03      	cmp	r3, #3
 800d984:	d101      	bne.n	800d98a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d986:	2301      	movs	r3, #1
 800d988:	e099      	b.n	800dabe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d98a:	4b4f      	ldr	r3, [pc, #316]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	4a4e      	ldr	r2, [pc, #312]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800d990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d994:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d996:	f7f8 f9a5 	bl	8005ce4 <HAL_GetTick>
 800d99a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d99c:	e008      	b.n	800d9b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d99e:	f7f8 f9a1 	bl	8005ce4 <HAL_GetTick>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	1ad3      	subs	r3, r2, r3
 800d9a8:	2b02      	cmp	r3, #2
 800d9aa:	d901      	bls.n	800d9b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d9ac:	2303      	movs	r3, #3
 800d9ae:	e086      	b.n	800dabe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d9b0:	4b45      	ldr	r3, [pc, #276]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d1f0      	bne.n	800d99e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d9bc:	4b42      	ldr	r3, [pc, #264]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800d9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	051b      	lsls	r3, r3, #20
 800d9ca:	493f      	ldr	r1, [pc, #252]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800d9cc:	4313      	orrs	r3, r2
 800d9ce:	628b      	str	r3, [r1, #40]	; 0x28
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	3b01      	subs	r3, #1
 800d9d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	3b01      	subs	r3, #1
 800d9e0:	025b      	lsls	r3, r3, #9
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	431a      	orrs	r2, r3
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	3b01      	subs	r3, #1
 800d9ec:	041b      	lsls	r3, r3, #16
 800d9ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d9f2:	431a      	orrs	r2, r3
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	691b      	ldr	r3, [r3, #16]
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	061b      	lsls	r3, r3, #24
 800d9fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800da00:	4931      	ldr	r1, [pc, #196]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da02:	4313      	orrs	r3, r2
 800da04:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800da06:	4b30      	ldr	r3, [pc, #192]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	695b      	ldr	r3, [r3, #20]
 800da12:	492d      	ldr	r1, [pc, #180]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da14:	4313      	orrs	r3, r2
 800da16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800da18:	4b2b      	ldr	r3, [pc, #172]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	699b      	ldr	r3, [r3, #24]
 800da24:	4928      	ldr	r1, [pc, #160]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da26:	4313      	orrs	r3, r2
 800da28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800da2a:	4b27      	ldr	r3, [pc, #156]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da2e:	4a26      	ldr	r2, [pc, #152]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800da36:	4b24      	ldr	r3, [pc, #144]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da3a:	4b24      	ldr	r3, [pc, #144]	; (800dacc <RCCEx_PLL3_Config+0x160>)
 800da3c:	4013      	ands	r3, r2
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	69d2      	ldr	r2, [r2, #28]
 800da42:	00d2      	lsls	r2, r2, #3
 800da44:	4920      	ldr	r1, [pc, #128]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da46:	4313      	orrs	r3, r2
 800da48:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800da4a:	4b1f      	ldr	r3, [pc, #124]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4e:	4a1e      	ldr	r2, [pc, #120]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d106      	bne.n	800da6a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800da5c:	4b1a      	ldr	r3, [pc, #104]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da60:	4a19      	ldr	r2, [pc, #100]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800da66:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da68:	e00f      	b.n	800da8a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d106      	bne.n	800da7e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800da70:	4b15      	ldr	r3, [pc, #84]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da74:	4a14      	ldr	r2, [pc, #80]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800da7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da7c:	e005      	b.n	800da8a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800da7e:	4b12      	ldr	r3, [pc, #72]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da82:	4a11      	ldr	r2, [pc, #68]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800da88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800da8a:	4b0f      	ldr	r3, [pc, #60]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a0e      	ldr	r2, [pc, #56]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800da90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da96:	f7f8 f925 	bl	8005ce4 <HAL_GetTick>
 800da9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da9c:	e008      	b.n	800dab0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800da9e:	f7f8 f921 	bl	8005ce4 <HAL_GetTick>
 800daa2:	4602      	mov	r2, r0
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	1ad3      	subs	r3, r2, r3
 800daa8:	2b02      	cmp	r3, #2
 800daaa:	d901      	bls.n	800dab0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800daac:	2303      	movs	r3, #3
 800daae:	e006      	b.n	800dabe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dab0:	4b05      	ldr	r3, [pc, #20]	; (800dac8 <RCCEx_PLL3_Config+0x15c>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d0f0      	beq.n	800da9e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dabc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	58024400 	.word	0x58024400
 800dacc:	ffff0007 	.word	0xffff0007

0800dad0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800dad8:	2300      	movs	r3, #0
 800dada:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d101      	bne.n	800dae6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800dae2:	2301      	movs	r3, #1
 800dae4:	e0eb      	b.n	800dcbe <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a75      	ldr	r2, [pc, #468]	; (800dcc8 <HAL_SPI_Init+0x1f8>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d00f      	beq.n	800db16 <HAL_SPI_Init+0x46>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	4a74      	ldr	r2, [pc, #464]	; (800dccc <HAL_SPI_Init+0x1fc>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d00a      	beq.n	800db16 <HAL_SPI_Init+0x46>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	4a72      	ldr	r2, [pc, #456]	; (800dcd0 <HAL_SPI_Init+0x200>)
 800db06:	4293      	cmp	r3, r2
 800db08:	d005      	beq.n	800db16 <HAL_SPI_Init+0x46>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	2b0f      	cmp	r3, #15
 800db10:	d901      	bls.n	800db16 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800db12:	2301      	movs	r3, #1
 800db14:	e0d3      	b.n	800dcbe <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f001 f87a 	bl	800ec10 <SPI_GetPacketSize>
 800db1c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4a69      	ldr	r2, [pc, #420]	; (800dcc8 <HAL_SPI_Init+0x1f8>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d00c      	beq.n	800db42 <HAL_SPI_Init+0x72>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4a67      	ldr	r2, [pc, #412]	; (800dccc <HAL_SPI_Init+0x1fc>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d007      	beq.n	800db42 <HAL_SPI_Init+0x72>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4a66      	ldr	r2, [pc, #408]	; (800dcd0 <HAL_SPI_Init+0x200>)
 800db38:	4293      	cmp	r3, r2
 800db3a:	d002      	beq.n	800db42 <HAL_SPI_Init+0x72>
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	2b08      	cmp	r3, #8
 800db40:	d811      	bhi.n	800db66 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800db46:	4a60      	ldr	r2, [pc, #384]	; (800dcc8 <HAL_SPI_Init+0x1f8>)
 800db48:	4293      	cmp	r3, r2
 800db4a:	d009      	beq.n	800db60 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4a5e      	ldr	r2, [pc, #376]	; (800dccc <HAL_SPI_Init+0x1fc>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d004      	beq.n	800db60 <HAL_SPI_Init+0x90>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a5d      	ldr	r2, [pc, #372]	; (800dcd0 <HAL_SPI_Init+0x200>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d104      	bne.n	800db6a <HAL_SPI_Init+0x9a>
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	2b10      	cmp	r3, #16
 800db64:	d901      	bls.n	800db6a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800db66:	2301      	movs	r3, #1
 800db68:	e0a9      	b.n	800dcbe <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db70:	b2db      	uxtb	r3, r3
 800db72:	2b00      	cmp	r3, #0
 800db74:	d106      	bne.n	800db84 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2200      	movs	r2, #0
 800db7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f7f6 fd84 	bl	800468c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2202      	movs	r2, #2
 800db88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f022 0201 	bic.w	r2, r2, #1
 800db9a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	699b      	ldr	r3, [r3, #24]
 800dba0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dba4:	d119      	bne.n	800dbda <HAL_SPI_Init+0x10a>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dbae:	d103      	bne.n	800dbb8 <HAL_SPI_Init+0xe8>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d008      	beq.n	800dbca <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d10c      	bne.n	800dbda <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dbc8:	d107      	bne.n	800dbda <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dbd8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	69da      	ldr	r2, [r3, #28]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbe2:	431a      	orrs	r2, r3
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	431a      	orrs	r2, r3
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbec:	ea42 0103 	orr.w	r1, r2, r3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	68da      	ldr	r2, [r3, #12]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	430a      	orrs	r2, r1
 800dbfa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc04:	431a      	orrs	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc0a:	431a      	orrs	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	699b      	ldr	r3, [r3, #24]
 800dc10:	431a      	orrs	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	691b      	ldr	r3, [r3, #16]
 800dc16:	431a      	orrs	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	695b      	ldr	r3, [r3, #20]
 800dc1c:	431a      	orrs	r2, r3
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6a1b      	ldr	r3, [r3, #32]
 800dc22:	431a      	orrs	r2, r3
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	431a      	orrs	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc2e:	431a      	orrs	r2, r3
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	689b      	ldr	r3, [r3, #8]
 800dc34:	431a      	orrs	r2, r3
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc3a:	ea42 0103 	orr.w	r1, r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	430a      	orrs	r2, r1
 800dc48:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d113      	bne.n	800dc7a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc64:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc78:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f022 0201 	bic.w	r2, r2, #1
 800dc88:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d00a      	beq.n	800dcac <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	430a      	orrs	r2, r1
 800dcaa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	40013000 	.word	0x40013000
 800dccc:	40003800 	.word	0x40003800
 800dcd0:	40003c00 	.word	0x40003c00

0800dcd4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b08a      	sub	sp, #40	; 0x28
 800dcd8:	af02      	add	r7, sp, #8
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	603b      	str	r3, [r7, #0]
 800dce0:	4613      	mov	r3, r2
 800dce2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	3320      	adds	r3, #32
 800dcea:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dcec:	2300      	movs	r3, #0
 800dcee:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d101      	bne.n	800dcfe <HAL_SPI_Transmit+0x2a>
 800dcfa:	2302      	movs	r3, #2
 800dcfc:	e1d7      	b.n	800e0ae <HAL_SPI_Transmit+0x3da>
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2201      	movs	r2, #1
 800dd02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dd06:	f7f7 ffed 	bl	8005ce4 <HAL_GetTick>
 800dd0a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d007      	beq.n	800dd28 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800dd18:	2302      	movs	r3, #2
 800dd1a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dd24:	7efb      	ldrb	r3, [r7, #27]
 800dd26:	e1c2      	b.n	800e0ae <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d002      	beq.n	800dd34 <HAL_SPI_Transmit+0x60>
 800dd2e:	88fb      	ldrh	r3, [r7, #6]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d107      	bne.n	800dd44 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800dd34:	2301      	movs	r3, #1
 800dd36:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dd40:	7efb      	ldrb	r3, [r7, #27]
 800dd42:	e1b4      	b.n	800e0ae <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2203      	movs	r2, #3
 800dd48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	68ba      	ldr	r2, [r7, #8]
 800dd58:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	88fa      	ldrh	r2, [r7, #6]
 800dd5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	88fa      	ldrh	r2, [r7, #6]
 800dd66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2200      	movs	r2, #0
 800dd84:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dd94:	d107      	bne.n	800dda6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dda4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	685a      	ldr	r2, [r3, #4]
 800ddac:	4b96      	ldr	r3, [pc, #600]	; (800e008 <HAL_SPI_Transmit+0x334>)
 800ddae:	4013      	ands	r3, r2
 800ddb0:	88f9      	ldrh	r1, [r7, #6]
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	6812      	ldr	r2, [r2, #0]
 800ddb6:	430b      	orrs	r3, r1
 800ddb8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f042 0201 	orr.w	r2, r2, #1
 800ddc8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ddd2:	d107      	bne.n	800dde4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dde2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	68db      	ldr	r3, [r3, #12]
 800dde8:	2b0f      	cmp	r3, #15
 800ddea:	d947      	bls.n	800de7c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ddec:	e03f      	b.n	800de6e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	695b      	ldr	r3, [r3, #20]
 800ddf4:	f003 0302 	and.w	r3, r3, #2
 800ddf8:	2b02      	cmp	r3, #2
 800ddfa:	d114      	bne.n	800de26 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	6812      	ldr	r2, [r2, #0]
 800de06:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de0c:	1d1a      	adds	r2, r3, #4
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de18:	b29b      	uxth	r3, r3
 800de1a:	3b01      	subs	r3, #1
 800de1c:	b29a      	uxth	r2, r3
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de24:	e023      	b.n	800de6e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de26:	f7f7 ff5d 	bl	8005ce4 <HAL_GetTick>
 800de2a:	4602      	mov	r2, r0
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	1ad3      	subs	r3, r2, r3
 800de30:	683a      	ldr	r2, [r7, #0]
 800de32:	429a      	cmp	r2, r3
 800de34:	d803      	bhi.n	800de3e <HAL_SPI_Transmit+0x16a>
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de3c:	d102      	bne.n	800de44 <HAL_SPI_Transmit+0x170>
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d114      	bne.n	800de6e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800de44:	68f8      	ldr	r0, [r7, #12]
 800de46:	f000 fe15 	bl	800ea74 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2200      	movs	r2, #0
 800de4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2201      	movs	r2, #1
 800de66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800de6a:	2301      	movs	r3, #1
 800de6c:	e11f      	b.n	800e0ae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de74:	b29b      	uxth	r3, r3
 800de76:	2b00      	cmp	r3, #0
 800de78:	d1b9      	bne.n	800ddee <HAL_SPI_Transmit+0x11a>
 800de7a:	e0f2      	b.n	800e062 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	68db      	ldr	r3, [r3, #12]
 800de80:	2b07      	cmp	r3, #7
 800de82:	f240 80e7 	bls.w	800e054 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800de86:	e05d      	b.n	800df44 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	695b      	ldr	r3, [r3, #20]
 800de8e:	f003 0302 	and.w	r3, r3, #2
 800de92:	2b02      	cmp	r3, #2
 800de94:	d132      	bne.n	800defc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d918      	bls.n	800ded4 <HAL_SPI_Transmit+0x200>
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d014      	beq.n	800ded4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	6812      	ldr	r2, [r2, #0]
 800deb4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800deba:	1d1a      	adds	r2, r3, #4
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	3b02      	subs	r3, #2
 800deca:	b29a      	uxth	r2, r3
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ded2:	e037      	b.n	800df44 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ded8:	881a      	ldrh	r2, [r3, #0]
 800deda:	69fb      	ldr	r3, [r7, #28]
 800dedc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dee2:	1c9a      	adds	r2, r3, #2
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800deee:	b29b      	uxth	r3, r3
 800def0:	3b01      	subs	r3, #1
 800def2:	b29a      	uxth	r2, r3
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800defa:	e023      	b.n	800df44 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800defc:	f7f7 fef2 	bl	8005ce4 <HAL_GetTick>
 800df00:	4602      	mov	r2, r0
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	1ad3      	subs	r3, r2, r3
 800df06:	683a      	ldr	r2, [r7, #0]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d803      	bhi.n	800df14 <HAL_SPI_Transmit+0x240>
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df12:	d102      	bne.n	800df1a <HAL_SPI_Transmit+0x246>
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d114      	bne.n	800df44 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800df1a:	68f8      	ldr	r0, [r7, #12]
 800df1c:	f000 fdaa 	bl	800ea74 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2200      	movs	r2, #0
 800df24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2201      	movs	r2, #1
 800df3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800df40:	2301      	movs	r3, #1
 800df42:	e0b4      	b.n	800e0ae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d19b      	bne.n	800de88 <HAL_SPI_Transmit+0x1b4>
 800df50:	e087      	b.n	800e062 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	695b      	ldr	r3, [r3, #20]
 800df58:	f003 0302 	and.w	r3, r3, #2
 800df5c:	2b02      	cmp	r3, #2
 800df5e:	d155      	bne.n	800e00c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df66:	b29b      	uxth	r3, r3
 800df68:	2b03      	cmp	r3, #3
 800df6a:	d918      	bls.n	800df9e <HAL_SPI_Transmit+0x2ca>
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df70:	2b40      	cmp	r3, #64	; 0x40
 800df72:	d914      	bls.n	800df9e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	6812      	ldr	r2, [r2, #0]
 800df7e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df84:	1d1a      	adds	r2, r3, #4
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df90:	b29b      	uxth	r3, r3
 800df92:	3b04      	subs	r3, #4
 800df94:	b29a      	uxth	r2, r3
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800df9c:	e05a      	b.n	800e054 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d917      	bls.n	800dfda <HAL_SPI_Transmit+0x306>
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d013      	beq.n	800dfda <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfb6:	881a      	ldrh	r2, [r3, #0]
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfc0:	1c9a      	adds	r2, r3, #2
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	3b02      	subs	r3, #2
 800dfd0:	b29a      	uxth	r2, r3
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dfd8:	e03c      	b.n	800e054 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	3320      	adds	r3, #32
 800dfe4:	7812      	ldrb	r2, [r2, #0]
 800dfe6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfec:	1c5a      	adds	r2, r3, #1
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	3b01      	subs	r3, #1
 800dffc:	b29a      	uxth	r2, r3
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e004:	e026      	b.n	800e054 <HAL_SPI_Transmit+0x380>
 800e006:	bf00      	nop
 800e008:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e00c:	f7f7 fe6a 	bl	8005ce4 <HAL_GetTick>
 800e010:	4602      	mov	r2, r0
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	1ad3      	subs	r3, r2, r3
 800e016:	683a      	ldr	r2, [r7, #0]
 800e018:	429a      	cmp	r2, r3
 800e01a:	d803      	bhi.n	800e024 <HAL_SPI_Transmit+0x350>
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e022:	d102      	bne.n	800e02a <HAL_SPI_Transmit+0x356>
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d114      	bne.n	800e054 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e02a:	68f8      	ldr	r0, [r7, #12]
 800e02c:	f000 fd22 	bl	800ea74 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2200      	movs	r2, #0
 800e034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e03e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2201      	movs	r2, #1
 800e04c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e050:	2301      	movs	r3, #1
 800e052:	e02c      	b.n	800e0ae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	f47f af78 	bne.w	800df52 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	2200      	movs	r2, #0
 800e06a:	2108      	movs	r1, #8
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	f000 fda1 	bl	800ebb4 <SPI_WaitOnFlagUntilTimeout>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d007      	beq.n	800e088 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e07e:	f043 0220 	orr.w	r2, r3, #32
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e088:	68f8      	ldr	r0, [r7, #12]
 800e08a:	f000 fcf3 	bl	800ea74 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2200      	movs	r2, #0
 800e092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2201      	movs	r2, #1
 800e09a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d001      	beq.n	800e0ac <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	e000      	b.n	800e0ae <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800e0ac:	7efb      	ldrb	r3, [r7, #27]
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3720      	adds	r7, #32
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop

0800e0b8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b08a      	sub	sp, #40	; 0x28
 800e0bc:	af02      	add	r7, sp, #8
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	603b      	str	r3, [r7, #0]
 800e0c4:	4613      	mov	r3, r2
 800e0c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	3330      	adds	r3, #48	; 0x30
 800e0d2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e0dc:	d112      	bne.n	800e104 <HAL_SPI_Receive+0x4c>
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	689b      	ldr	r3, [r3, #8]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d10e      	bne.n	800e104 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2204      	movs	r2, #4
 800e0ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e0ee:	88fa      	ldrh	r2, [r7, #6]
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	9300      	str	r3, [sp, #0]
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	68ba      	ldr	r2, [r7, #8]
 800e0f8:	68b9      	ldr	r1, [r7, #8]
 800e0fa:	68f8      	ldr	r0, [r7, #12]
 800e0fc:	f000 f9ce 	bl	800e49c <HAL_SPI_TransmitReceive>
 800e100:	4603      	mov	r3, r0
 800e102:	e1c7      	b.n	800e494 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	d101      	bne.n	800e112 <HAL_SPI_Receive+0x5a>
 800e10e:	2302      	movs	r3, #2
 800e110:	e1c0      	b.n	800e494 <HAL_SPI_Receive+0x3dc>
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	2201      	movs	r2, #1
 800e116:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e11a:	f7f7 fde3 	bl	8005ce4 <HAL_GetTick>
 800e11e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e126:	b2db      	uxtb	r3, r3
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d007      	beq.n	800e13c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800e12c:	2302      	movs	r3, #2
 800e12e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2200      	movs	r2, #0
 800e134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e138:	7ffb      	ldrb	r3, [r7, #31]
 800e13a:	e1ab      	b.n	800e494 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d002      	beq.n	800e148 <HAL_SPI_Receive+0x90>
 800e142:	88fb      	ldrh	r3, [r7, #6]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d107      	bne.n	800e158 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800e148:	2301      	movs	r3, #1
 800e14a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2200      	movs	r2, #0
 800e150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e154:	7ffb      	ldrb	r3, [r7, #31]
 800e156:	e19d      	b.n	800e494 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	2204      	movs	r2, #4
 800e15c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2200      	movs	r2, #0
 800e164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	68ba      	ldr	r2, [r7, #8]
 800e16c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	88fa      	ldrh	r2, [r7, #6]
 800e172:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	88fa      	ldrh	r2, [r7, #6]
 800e17a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2200      	movs	r2, #0
 800e182:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2200      	movs	r2, #0
 800e188:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2200      	movs	r2, #0
 800e190:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2200      	movs	r2, #0
 800e198:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2200      	movs	r2, #0
 800e19e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	689b      	ldr	r3, [r3, #8]
 800e1a4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e1a8:	d107      	bne.n	800e1ba <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e1b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	685a      	ldr	r2, [r3, #4]
 800e1c0:	4b94      	ldr	r3, [pc, #592]	; (800e414 <HAL_SPI_Receive+0x35c>)
 800e1c2:	4013      	ands	r3, r2
 800e1c4:	88f9      	ldrh	r1, [r7, #6]
 800e1c6:	68fa      	ldr	r2, [r7, #12]
 800e1c8:	6812      	ldr	r2, [r2, #0]
 800e1ca:	430b      	orrs	r3, r1
 800e1cc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f042 0201 	orr.w	r2, r2, #1
 800e1dc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1e6:	d107      	bne.n	800e1f8 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	2b0f      	cmp	r3, #15
 800e1fe:	d948      	bls.n	800e292 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e200:	e040      	b.n	800e284 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	695a      	ldr	r2, [r3, #20]
 800e208:	f248 0308 	movw	r3, #32776	; 0x8008
 800e20c:	4013      	ands	r3, r2
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d014      	beq.n	800e23c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e21a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e21c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e222:	1d1a      	adds	r2, r3, #4
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e22e:	b29b      	uxth	r3, r3
 800e230:	3b01      	subs	r3, #1
 800e232:	b29a      	uxth	r2, r3
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e23a:	e023      	b.n	800e284 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e23c:	f7f7 fd52 	bl	8005ce4 <HAL_GetTick>
 800e240:	4602      	mov	r2, r0
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	1ad3      	subs	r3, r2, r3
 800e246:	683a      	ldr	r2, [r7, #0]
 800e248:	429a      	cmp	r2, r3
 800e24a:	d803      	bhi.n	800e254 <HAL_SPI_Receive+0x19c>
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e252:	d102      	bne.n	800e25a <HAL_SPI_Receive+0x1a2>
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d114      	bne.n	800e284 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e25a:	68f8      	ldr	r0, [r7, #12]
 800e25c:	f000 fc0a 	bl	800ea74 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2200      	movs	r2, #0
 800e264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e26e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2201      	movs	r2, #1
 800e27c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e280:	2301      	movs	r3, #1
 800e282:	e107      	b.n	800e494 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d1b8      	bne.n	800e202 <HAL_SPI_Receive+0x14a>
 800e290:	e0ed      	b.n	800e46e <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	68db      	ldr	r3, [r3, #12]
 800e296:	2b07      	cmp	r3, #7
 800e298:	f240 80e2 	bls.w	800e460 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e29c:	e05b      	b.n	800e356 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	695b      	ldr	r3, [r3, #20]
 800e2a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d030      	beq.n	800e30e <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	695b      	ldr	r3, [r3, #20]
 800e2b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d014      	beq.n	800e2e4 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e2c4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2ca:	1d1a      	adds	r2, r3, #4
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	3b02      	subs	r3, #2
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2e2:	e038      	b.n	800e356 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2e8:	69ba      	ldr	r2, [r7, #24]
 800e2ea:	8812      	ldrh	r2, [r2, #0]
 800e2ec:	b292      	uxth	r2, r2
 800e2ee:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2f4:	1c9a      	adds	r2, r3, #2
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e300:	b29b      	uxth	r3, r3
 800e302:	3b01      	subs	r3, #1
 800e304:	b29a      	uxth	r2, r3
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e30c:	e023      	b.n	800e356 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e30e:	f7f7 fce9 	bl	8005ce4 <HAL_GetTick>
 800e312:	4602      	mov	r2, r0
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	1ad3      	subs	r3, r2, r3
 800e318:	683a      	ldr	r2, [r7, #0]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d803      	bhi.n	800e326 <HAL_SPI_Receive+0x26e>
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e324:	d102      	bne.n	800e32c <HAL_SPI_Receive+0x274>
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d114      	bne.n	800e356 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e32c:	68f8      	ldr	r0, [r7, #12]
 800e32e:	f000 fba1 	bl	800ea74 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2200      	movs	r2, #0
 800e336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e340:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2201      	movs	r2, #1
 800e34e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e352:	2301      	movs	r3, #1
 800e354:	e09e      	b.n	800e494 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d19d      	bne.n	800e29e <HAL_SPI_Receive+0x1e6>
 800e362:	e084      	b.n	800e46e <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	695b      	ldr	r3, [r3, #20]
 800e36a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d052      	beq.n	800e418 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	695b      	ldr	r3, [r3, #20]
 800e378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d014      	beq.n	800e3aa <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e388:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e38a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e390:	1d1a      	adds	r2, r3, #4
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	3b04      	subs	r3, #4
 800e3a0:	b29a      	uxth	r2, r3
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3a8:	e05a      	b.n	800e460 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	695b      	ldr	r3, [r3, #20]
 800e3b0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e3b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3b8:	d914      	bls.n	800e3e4 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3be:	69ba      	ldr	r2, [r7, #24]
 800e3c0:	8812      	ldrh	r2, [r2, #0]
 800e3c2:	b292      	uxth	r2, r2
 800e3c4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3ca:	1c9a      	adds	r2, r3, #2
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	3b02      	subs	r3, #2
 800e3da:	b29a      	uxth	r2, r3
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3e2:	e03d      	b.n	800e460 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3f0:	7812      	ldrb	r2, [r2, #0]
 800e3f2:	b2d2      	uxtb	r2, r2
 800e3f4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3fa:	1c5a      	adds	r2, r3, #1
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e406:	b29b      	uxth	r3, r3
 800e408:	3b01      	subs	r3, #1
 800e40a:	b29a      	uxth	r2, r3
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e412:	e025      	b.n	800e460 <HAL_SPI_Receive+0x3a8>
 800e414:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e418:	f7f7 fc64 	bl	8005ce4 <HAL_GetTick>
 800e41c:	4602      	mov	r2, r0
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	1ad3      	subs	r3, r2, r3
 800e422:	683a      	ldr	r2, [r7, #0]
 800e424:	429a      	cmp	r2, r3
 800e426:	d803      	bhi.n	800e430 <HAL_SPI_Receive+0x378>
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e42e:	d102      	bne.n	800e436 <HAL_SPI_Receive+0x37e>
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d114      	bne.n	800e460 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e436:	68f8      	ldr	r0, [r7, #12]
 800e438:	f000 fb1c 	bl	800ea74 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2200      	movs	r2, #0
 800e440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e44a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2201      	movs	r2, #1
 800e458:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e45c:	2301      	movs	r3, #1
 800e45e:	e019      	b.n	800e494 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e466:	b29b      	uxth	r3, r3
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f47f af7b 	bne.w	800e364 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e46e:	68f8      	ldr	r0, [r7, #12]
 800e470:	f000 fb00 	bl	800ea74 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2200      	movs	r2, #0
 800e478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2201      	movs	r2, #1
 800e480:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d001      	beq.n	800e492 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800e48e:	2301      	movs	r3, #1
 800e490:	e000      	b.n	800e494 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800e492:	7ffb      	ldrb	r3, [r7, #31]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3720      	adds	r7, #32
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b08e      	sub	sp, #56	; 0x38
 800e4a0:	af02      	add	r7, sp, #8
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	607a      	str	r2, [r7, #4]
 800e4a8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	3320      	adds	r3, #32
 800e4b6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	3330      	adds	r3, #48	; 0x30
 800e4be:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e4c6:	2b01      	cmp	r3, #1
 800e4c8:	d101      	bne.n	800e4ce <HAL_SPI_TransmitReceive+0x32>
 800e4ca:	2302      	movs	r3, #2
 800e4cc:	e2ce      	b.n	800ea6c <HAL_SPI_TransmitReceive+0x5d0>
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4d6:	f7f7 fc05 	bl	8005ce4 <HAL_GetTick>
 800e4da:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800e4dc:	887b      	ldrh	r3, [r7, #2]
 800e4de:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800e4e0:	887b      	ldrh	r3, [r7, #2]
 800e4e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e4ea:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e4f2:	7efb      	ldrb	r3, [r7, #27]
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d014      	beq.n	800e522 <HAL_SPI_TransmitReceive+0x86>
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e4fe:	d106      	bne.n	800e50e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d102      	bne.n	800e50e <HAL_SPI_TransmitReceive+0x72>
 800e508:	7efb      	ldrb	r3, [r7, #27]
 800e50a:	2b04      	cmp	r3, #4
 800e50c:	d009      	beq.n	800e522 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800e50e:	2302      	movs	r3, #2
 800e510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2200      	movs	r2, #0
 800e518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e51c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e520:	e2a4      	b.n	800ea6c <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d005      	beq.n	800e534 <HAL_SPI_TransmitReceive+0x98>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d002      	beq.n	800e534 <HAL_SPI_TransmitReceive+0x98>
 800e52e:	887b      	ldrh	r3, [r7, #2]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d109      	bne.n	800e548 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800e534:	2301      	movs	r3, #1
 800e536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2200      	movs	r2, #0
 800e53e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e542:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e546:	e291      	b.n	800ea6c <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e54e:	b2db      	uxtb	r3, r3
 800e550:	2b04      	cmp	r3, #4
 800e552:	d003      	beq.n	800e55c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2205      	movs	r2, #5
 800e558:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2200      	movs	r2, #0
 800e560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	887a      	ldrh	r2, [r7, #2]
 800e56e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	887a      	ldrh	r2, [r7, #2]
 800e576:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	68ba      	ldr	r2, [r7, #8]
 800e57e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	887a      	ldrh	r2, [r7, #2]
 800e584:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	887a      	ldrh	r2, [r7, #2]
 800e58c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2200      	movs	r2, #0
 800e594:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2200      	movs	r2, #0
 800e59a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	685a      	ldr	r2, [r3, #4]
 800e5a2:	4b9f      	ldr	r3, [pc, #636]	; (800e820 <HAL_SPI_TransmitReceive+0x384>)
 800e5a4:	4013      	ands	r3, r2
 800e5a6:	8879      	ldrh	r1, [r7, #2]
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	6812      	ldr	r2, [r2, #0]
 800e5ac:	430b      	orrs	r3, r1
 800e5ae:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f042 0201 	orr.w	r2, r2, #1
 800e5be:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e5c8:	d107      	bne.n	800e5da <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	2b0f      	cmp	r3, #15
 800e5e0:	d970      	bls.n	800e6c4 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e5e2:	e068      	b.n	800e6b6 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	695b      	ldr	r3, [r3, #20]
 800e5ea:	f003 0302 	and.w	r3, r3, #2
 800e5ee:	2b02      	cmp	r3, #2
 800e5f0:	d11a      	bne.n	800e628 <HAL_SPI_TransmitReceive+0x18c>
 800e5f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d017      	beq.n	800e628 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	6812      	ldr	r2, [r2, #0]
 800e602:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e608:	1d1a      	adds	r2, r3, #4
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e614:	b29b      	uxth	r3, r3
 800e616:	3b01      	subs	r3, #1
 800e618:	b29a      	uxth	r2, r3
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e626:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	695a      	ldr	r2, [r3, #20]
 800e62e:	f248 0308 	movw	r3, #32776	; 0x8008
 800e632:	4013      	ands	r3, r2
 800e634:	2b00      	cmp	r3, #0
 800e636:	d01a      	beq.n	800e66e <HAL_SPI_TransmitReceive+0x1d2>
 800e638:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d017      	beq.n	800e66e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681a      	ldr	r2, [r3, #0]
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e646:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e648:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e64e:	1d1a      	adds	r2, r3, #4
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	3b01      	subs	r3, #1
 800e65e:	b29a      	uxth	r2, r3
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e66c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e66e:	f7f7 fb39 	bl	8005ce4 <HAL_GetTick>
 800e672:	4602      	mov	r2, r0
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	1ad3      	subs	r3, r2, r3
 800e678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d803      	bhi.n	800e686 <HAL_SPI_TransmitReceive+0x1ea>
 800e67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e684:	d102      	bne.n	800e68c <HAL_SPI_TransmitReceive+0x1f0>
 800e686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d114      	bne.n	800e6b6 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e68c:	68f8      	ldr	r0, [r7, #12]
 800e68e:	f000 f9f1 	bl	800ea74 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2200      	movs	r2, #0
 800e696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e1da      	b.n	800ea6c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e6b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d193      	bne.n	800e5e4 <HAL_SPI_TransmitReceive+0x148>
 800e6bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d190      	bne.n	800e5e4 <HAL_SPI_TransmitReceive+0x148>
 800e6c2:	e1ac      	b.n	800ea1e <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	2b07      	cmp	r3, #7
 800e6ca:	f240 81a0 	bls.w	800ea0e <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e6ce:	e0a9      	b.n	800e824 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	695b      	ldr	r3, [r3, #20]
 800e6d6:	f003 0302 	and.w	r3, r3, #2
 800e6da:	2b02      	cmp	r3, #2
 800e6dc:	d139      	bne.n	800e752 <HAL_SPI_TransmitReceive+0x2b6>
 800e6de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d036      	beq.n	800e752 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e6e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d91c      	bls.n	800e724 <HAL_SPI_TransmitReceive+0x288>
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d018      	beq.n	800e724 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	6812      	ldr	r2, [r2, #0]
 800e6fc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e702:	1d1a      	adds	r2, r3, #4
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e70e:	b29b      	uxth	r3, r3
 800e710:	3b02      	subs	r3, #2
 800e712:	b29a      	uxth	r2, r3
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e720:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e722:	e016      	b.n	800e752 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e728:	881a      	ldrh	r2, [r3, #0]
 800e72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e732:	1c9a      	adds	r2, r3, #2
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e73e:	b29b      	uxth	r3, r3
 800e740:	3b01      	subs	r3, #1
 800e742:	b29a      	uxth	r2, r3
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e750:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	695b      	ldr	r3, [r3, #20]
 800e758:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d03a      	beq.n	800e7d6 <HAL_SPI_TransmitReceive+0x33a>
 800e760:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e762:	2b00      	cmp	r3, #0
 800e764:	d037      	beq.n	800e7d6 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	695b      	ldr	r3, [r3, #20]
 800e76c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e770:	2b00      	cmp	r3, #0
 800e772:	d018      	beq.n	800e7a6 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e77c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e77e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e784:	1d1a      	adds	r2, r3, #4
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e790:	b29b      	uxth	r3, r3
 800e792:	3b02      	subs	r3, #2
 800e794:	b29a      	uxth	r2, r3
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e7a4:	e017      	b.n	800e7d6 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7aa:	6a3a      	ldr	r2, [r7, #32]
 800e7ac:	8812      	ldrh	r2, [r2, #0]
 800e7ae:	b292      	uxth	r2, r2
 800e7b0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7b6:	1c9a      	adds	r2, r3, #2
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7c2:	b29b      	uxth	r3, r3
 800e7c4:	3b01      	subs	r3, #1
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7d6:	f7f7 fa85 	bl	8005ce4 <HAL_GetTick>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	1ad3      	subs	r3, r2, r3
 800e7e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d803      	bhi.n	800e7ee <HAL_SPI_TransmitReceive+0x352>
 800e7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ec:	d102      	bne.n	800e7f4 <HAL_SPI_TransmitReceive+0x358>
 800e7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d117      	bne.n	800e824 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f000 f93d 	bl	800ea74 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e808:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2201      	movs	r2, #1
 800e816:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e81a:	2301      	movs	r3, #1
 800e81c:	e126      	b.n	800ea6c <HAL_SPI_TransmitReceive+0x5d0>
 800e81e:	bf00      	nop
 800e820:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e824:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e826:	2b00      	cmp	r3, #0
 800e828:	f47f af52 	bne.w	800e6d0 <HAL_SPI_TransmitReceive+0x234>
 800e82c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e82e:	2b00      	cmp	r3, #0
 800e830:	f47f af4e 	bne.w	800e6d0 <HAL_SPI_TransmitReceive+0x234>
 800e834:	e0f3      	b.n	800ea1e <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	695b      	ldr	r3, [r3, #20]
 800e83c:	f003 0302 	and.w	r3, r3, #2
 800e840:	2b02      	cmp	r3, #2
 800e842:	d15a      	bne.n	800e8fa <HAL_SPI_TransmitReceive+0x45e>
 800e844:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e846:	2b00      	cmp	r3, #0
 800e848:	d057      	beq.n	800e8fa <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e84a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e84c:	2b03      	cmp	r3, #3
 800e84e:	d91c      	bls.n	800e88a <HAL_SPI_TransmitReceive+0x3ee>
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e854:	2b40      	cmp	r3, #64	; 0x40
 800e856:	d918      	bls.n	800e88a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	6812      	ldr	r2, [r2, #0]
 800e862:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e868:	1d1a      	adds	r2, r3, #4
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e874:	b29b      	uxth	r3, r3
 800e876:	3b04      	subs	r3, #4
 800e878:	b29a      	uxth	r2, r3
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e886:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e888:	e037      	b.n	800e8fa <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e88a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d91b      	bls.n	800e8c8 <HAL_SPI_TransmitReceive+0x42c>
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e894:	2b00      	cmp	r3, #0
 800e896:	d017      	beq.n	800e8c8 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e89c:	881a      	ldrh	r2, [r3, #0]
 800e89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8a6:	1c9a      	adds	r2, r3, #2
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8b2:	b29b      	uxth	r3, r3
 800e8b4:	3b02      	subs	r3, #2
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e8c6:	e018      	b.n	800e8fa <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	3320      	adds	r3, #32
 800e8d2:	7812      	ldrb	r2, [r2, #0]
 800e8d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8da:	1c5a      	adds	r2, r3, #1
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	b29a      	uxth	r2, r3
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	695b      	ldr	r3, [r3, #20]
 800e900:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e904:	2b00      	cmp	r3, #0
 800e906:	d05e      	beq.n	800e9c6 <HAL_SPI_TransmitReceive+0x52a>
 800e908:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d05b      	beq.n	800e9c6 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	695b      	ldr	r3, [r3, #20]
 800e914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d018      	beq.n	800e94e <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e924:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e926:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e92c:	1d1a      	adds	r2, r3, #4
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e938:	b29b      	uxth	r3, r3
 800e93a:	3b04      	subs	r3, #4
 800e93c:	b29a      	uxth	r2, r3
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e94a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e94c:	e03b      	b.n	800e9c6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	695b      	ldr	r3, [r3, #20]
 800e954:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e95c:	d918      	bls.n	800e990 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e962:	6a3a      	ldr	r2, [r7, #32]
 800e964:	8812      	ldrh	r2, [r2, #0]
 800e966:	b292      	uxth	r2, r2
 800e968:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e96e:	1c9a      	adds	r2, r3, #2
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	3b02      	subs	r3, #2
 800e97e:	b29a      	uxth	r2, r3
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e98c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e98e:	e01a      	b.n	800e9c6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e99c:	7812      	ldrb	r2, [r2, #0]
 800e99e:	b2d2      	uxtb	r2, r2
 800e9a0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9a6:	1c5a      	adds	r2, r3, #1
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e9b2:	b29b      	uxth	r3, r3
 800e9b4:	3b01      	subs	r3, #1
 800e9b6:	b29a      	uxth	r2, r3
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e9c4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9c6:	f7f7 f98d 	bl	8005ce4 <HAL_GetTick>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	1ad3      	subs	r3, r2, r3
 800e9d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d803      	bhi.n	800e9de <HAL_SPI_TransmitReceive+0x542>
 800e9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9dc:	d102      	bne.n	800e9e4 <HAL_SPI_TransmitReceive+0x548>
 800e9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d114      	bne.n	800ea0e <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e9e4:	68f8      	ldr	r0, [r7, #12]
 800e9e6:	f000 f845 	bl	800ea74 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2201      	movs	r2, #1
 800ea06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	e02e      	b.n	800ea6c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ea0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f47f af10 	bne.w	800e836 <HAL_SPI_TransmitReceive+0x39a>
 800ea16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	f47f af0c 	bne.w	800e836 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ea1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea20:	9300      	str	r3, [sp, #0]
 800ea22:	69fb      	ldr	r3, [r7, #28]
 800ea24:	2200      	movs	r2, #0
 800ea26:	2108      	movs	r1, #8
 800ea28:	68f8      	ldr	r0, [r7, #12]
 800ea2a:	f000 f8c3 	bl	800ebb4 <SPI_WaitOnFlagUntilTimeout>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d007      	beq.n	800ea44 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea3a:	f043 0220 	orr.w	r2, r3, #32
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ea44:	68f8      	ldr	r0, [r7, #12]
 800ea46:	f000 f815 	bl	800ea74 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2201      	movs	r2, #1
 800ea56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d001      	beq.n	800ea68 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800ea64:	2301      	movs	r3, #1
 800ea66:	e001      	b.n	800ea6c <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800ea68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3730      	adds	r7, #48	; 0x30
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b085      	sub	sp, #20
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	695b      	ldr	r3, [r3, #20]
 800ea82:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	699a      	ldr	r2, [r3, #24]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f042 0208 	orr.w	r2, r2, #8
 800ea92:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	699a      	ldr	r2, [r3, #24]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f042 0210 	orr.w	r2, r2, #16
 800eaa2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	681a      	ldr	r2, [r3, #0]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f022 0201 	bic.w	r2, r2, #1
 800eab2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	6919      	ldr	r1, [r3, #16]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681a      	ldr	r2, [r3, #0]
 800eabe:	4b3c      	ldr	r3, [pc, #240]	; (800ebb0 <SPI_CloseTransfer+0x13c>)
 800eac0:	400b      	ands	r3, r1
 800eac2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	689a      	ldr	r2, [r3, #8]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ead2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eada:	b2db      	uxtb	r3, r3
 800eadc:	2b04      	cmp	r3, #4
 800eade:	d014      	beq.n	800eb0a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f003 0320 	and.w	r3, r3, #32
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d00f      	beq.n	800eb0a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eaf0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	699a      	ldr	r2, [r3, #24]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f042 0220 	orr.w	r2, r2, #32
 800eb08:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eb10:	b2db      	uxtb	r3, r3
 800eb12:	2b03      	cmp	r3, #3
 800eb14:	d014      	beq.n	800eb40 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d00f      	beq.n	800eb40 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb26:	f043 0204 	orr.w	r2, r3, #4
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	699a      	ldr	r2, [r3, #24]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb3e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d00f      	beq.n	800eb6a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb50:	f043 0201 	orr.w	r2, r3, #1
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	699a      	ldr	r2, [r3, #24]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb68:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d00f      	beq.n	800eb94 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb7a:	f043 0208 	orr.w	r2, r3, #8
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	699a      	ldr	r2, [r3, #24]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eb92:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2200      	movs	r2, #0
 800eb98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800eba4:	bf00      	nop
 800eba6:	3714      	adds	r7, #20
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr
 800ebb0:	fffffc90 	.word	0xfffffc90

0800ebb4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b084      	sub	sp, #16
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	603b      	str	r3, [r7, #0]
 800ebc0:	4613      	mov	r3, r2
 800ebc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ebc4:	e010      	b.n	800ebe8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ebc6:	f7f7 f88d 	bl	8005ce4 <HAL_GetTick>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	1ad3      	subs	r3, r2, r3
 800ebd0:	69ba      	ldr	r2, [r7, #24]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d803      	bhi.n	800ebde <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ebd6:	69bb      	ldr	r3, [r7, #24]
 800ebd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebdc:	d102      	bne.n	800ebe4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ebde:	69bb      	ldr	r3, [r7, #24]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d101      	bne.n	800ebe8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ebe4:	2303      	movs	r3, #3
 800ebe6:	e00f      	b.n	800ec08 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	695a      	ldr	r2, [r3, #20]
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	4013      	ands	r3, r2
 800ebf2:	68ba      	ldr	r2, [r7, #8]
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	bf0c      	ite	eq
 800ebf8:	2301      	moveq	r3, #1
 800ebfa:	2300      	movne	r3, #0
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	461a      	mov	r2, r3
 800ec00:	79fb      	ldrb	r3, [r7, #7]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d0df      	beq.n	800ebc6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ec06:	2300      	movs	r3, #0
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3710      	adds	r7, #16
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b085      	sub	sp, #20
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec1c:	095b      	lsrs	r3, r3, #5
 800ec1e:	3301      	adds	r3, #1
 800ec20:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	68db      	ldr	r3, [r3, #12]
 800ec26:	3301      	adds	r3, #1
 800ec28:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	3307      	adds	r3, #7
 800ec2e:	08db      	lsrs	r3, r3, #3
 800ec30:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	fb02 f303 	mul.w	r3, r2, r3
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3714      	adds	r7, #20
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr

0800ec46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b082      	sub	sp, #8
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d101      	bne.n	800ec58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ec54:	2301      	movs	r3, #1
 800ec56:	e049      	b.n	800ecec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d106      	bne.n	800ec72 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2200      	movs	r2, #0
 800ec68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f7f5 fd73 	bl	8004758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2202      	movs	r2, #2
 800ec76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681a      	ldr	r2, [r3, #0]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	3304      	adds	r3, #4
 800ec82:	4619      	mov	r1, r3
 800ec84:	4610      	mov	r0, r2
 800ec86:	f000 fda1 	bl	800f7cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2201      	movs	r2, #1
 800ec96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2201      	movs	r2, #1
 800eca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2201      	movs	r2, #1
 800ecae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2201      	movs	r2, #1
 800ecce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2201      	movs	r2, #1
 800ecde:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2201      	movs	r2, #1
 800ece6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ecea:	2300      	movs	r3, #0
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3708      	adds	r7, #8
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b085      	sub	sp, #20
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d001      	beq.n	800ed0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ed08:	2301      	movs	r3, #1
 800ed0a:	e04f      	b.n	800edac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2202      	movs	r2, #2
 800ed10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	68da      	ldr	r2, [r3, #12]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f042 0201 	orr.w	r2, r2, #1
 800ed22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4a23      	ldr	r2, [pc, #140]	; (800edb8 <HAL_TIM_Base_Start_IT+0xc4>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d01d      	beq.n	800ed6a <HAL_TIM_Base_Start_IT+0x76>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed36:	d018      	beq.n	800ed6a <HAL_TIM_Base_Start_IT+0x76>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4a1f      	ldr	r2, [pc, #124]	; (800edbc <HAL_TIM_Base_Start_IT+0xc8>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d013      	beq.n	800ed6a <HAL_TIM_Base_Start_IT+0x76>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	4a1e      	ldr	r2, [pc, #120]	; (800edc0 <HAL_TIM_Base_Start_IT+0xcc>)
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	d00e      	beq.n	800ed6a <HAL_TIM_Base_Start_IT+0x76>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4a1c      	ldr	r2, [pc, #112]	; (800edc4 <HAL_TIM_Base_Start_IT+0xd0>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d009      	beq.n	800ed6a <HAL_TIM_Base_Start_IT+0x76>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	4a1b      	ldr	r2, [pc, #108]	; (800edc8 <HAL_TIM_Base_Start_IT+0xd4>)
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d004      	beq.n	800ed6a <HAL_TIM_Base_Start_IT+0x76>
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4a19      	ldr	r2, [pc, #100]	; (800edcc <HAL_TIM_Base_Start_IT+0xd8>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d115      	bne.n	800ed96 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	689a      	ldr	r2, [r3, #8]
 800ed70:	4b17      	ldr	r3, [pc, #92]	; (800edd0 <HAL_TIM_Base_Start_IT+0xdc>)
 800ed72:	4013      	ands	r3, r2
 800ed74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2b06      	cmp	r3, #6
 800ed7a:	d015      	beq.n	800eda8 <HAL_TIM_Base_Start_IT+0xb4>
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed82:	d011      	beq.n	800eda8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f042 0201 	orr.w	r2, r2, #1
 800ed92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed94:	e008      	b.n	800eda8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	681a      	ldr	r2, [r3, #0]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f042 0201 	orr.w	r2, r2, #1
 800eda4:	601a      	str	r2, [r3, #0]
 800eda6:	e000      	b.n	800edaa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eda8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800edaa:	2300      	movs	r3, #0
}
 800edac:	4618      	mov	r0, r3
 800edae:	3714      	adds	r7, #20
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr
 800edb8:	40010000 	.word	0x40010000
 800edbc:	40000400 	.word	0x40000400
 800edc0:	40000800 	.word	0x40000800
 800edc4:	40000c00 	.word	0x40000c00
 800edc8:	40010400 	.word	0x40010400
 800edcc:	40001800 	.word	0x40001800
 800edd0:	00010007 	.word	0x00010007

0800edd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b082      	sub	sp, #8
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d101      	bne.n	800ede6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ede2:	2301      	movs	r3, #1
 800ede4:	e049      	b.n	800ee7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edec:	b2db      	uxtb	r3, r3
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d106      	bne.n	800ee00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f000 f841 	bl	800ee82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2202      	movs	r2, #2
 800ee04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681a      	ldr	r2, [r3, #0]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	3304      	adds	r3, #4
 800ee10:	4619      	mov	r1, r3
 800ee12:	4610      	mov	r0, r2
 800ee14:	f000 fcda 	bl	800f7cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2201      	movs	r2, #1
 800ee24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2201      	movs	r2, #1
 800ee34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2201      	movs	r2, #1
 800ee44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2201      	movs	r2, #1
 800ee54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2201      	movs	r2, #1
 800ee64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2201      	movs	r2, #1
 800ee74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ee78:	2300      	movs	r3, #0
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3708      	adds	r7, #8
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ee82:	b480      	push	{r7}
 800ee84:	b083      	sub	sp, #12
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ee8a:	bf00      	nop
 800ee8c:	370c      	adds	r7, #12
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee94:	4770      	bx	lr
	...

0800ee98 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d109      	bne.n	800eebc <HAL_TIM_PWM_Start_IT+0x24>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eeae:	b2db      	uxtb	r3, r3
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	bf14      	ite	ne
 800eeb4:	2301      	movne	r3, #1
 800eeb6:	2300      	moveq	r3, #0
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	e03c      	b.n	800ef36 <HAL_TIM_PWM_Start_IT+0x9e>
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	2b04      	cmp	r3, #4
 800eec0:	d109      	bne.n	800eed6 <HAL_TIM_PWM_Start_IT+0x3e>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eec8:	b2db      	uxtb	r3, r3
 800eeca:	2b01      	cmp	r3, #1
 800eecc:	bf14      	ite	ne
 800eece:	2301      	movne	r3, #1
 800eed0:	2300      	moveq	r3, #0
 800eed2:	b2db      	uxtb	r3, r3
 800eed4:	e02f      	b.n	800ef36 <HAL_TIM_PWM_Start_IT+0x9e>
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	2b08      	cmp	r3, #8
 800eeda:	d109      	bne.n	800eef0 <HAL_TIM_PWM_Start_IT+0x58>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eee2:	b2db      	uxtb	r3, r3
 800eee4:	2b01      	cmp	r3, #1
 800eee6:	bf14      	ite	ne
 800eee8:	2301      	movne	r3, #1
 800eeea:	2300      	moveq	r3, #0
 800eeec:	b2db      	uxtb	r3, r3
 800eeee:	e022      	b.n	800ef36 <HAL_TIM_PWM_Start_IT+0x9e>
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	2b0c      	cmp	r3, #12
 800eef4:	d109      	bne.n	800ef0a <HAL_TIM_PWM_Start_IT+0x72>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	bf14      	ite	ne
 800ef02:	2301      	movne	r3, #1
 800ef04:	2300      	moveq	r3, #0
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	e015      	b.n	800ef36 <HAL_TIM_PWM_Start_IT+0x9e>
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	2b10      	cmp	r3, #16
 800ef0e:	d109      	bne.n	800ef24 <HAL_TIM_PWM_Start_IT+0x8c>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	2b01      	cmp	r3, #1
 800ef1a:	bf14      	ite	ne
 800ef1c:	2301      	movne	r3, #1
 800ef1e:	2300      	moveq	r3, #0
 800ef20:	b2db      	uxtb	r3, r3
 800ef22:	e008      	b.n	800ef36 <HAL_TIM_PWM_Start_IT+0x9e>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	bf14      	ite	ne
 800ef30:	2301      	movne	r3, #1
 800ef32:	2300      	moveq	r3, #0
 800ef34:	b2db      	uxtb	r3, r3
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d001      	beq.n	800ef3e <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e0e2      	b.n	800f104 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d104      	bne.n	800ef4e <HAL_TIM_PWM_Start_IT+0xb6>
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2202      	movs	r2, #2
 800ef48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef4c:	e023      	b.n	800ef96 <HAL_TIM_PWM_Start_IT+0xfe>
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	2b04      	cmp	r3, #4
 800ef52:	d104      	bne.n	800ef5e <HAL_TIM_PWM_Start_IT+0xc6>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2202      	movs	r2, #2
 800ef58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef5c:	e01b      	b.n	800ef96 <HAL_TIM_PWM_Start_IT+0xfe>
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	2b08      	cmp	r3, #8
 800ef62:	d104      	bne.n	800ef6e <HAL_TIM_PWM_Start_IT+0xd6>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2202      	movs	r2, #2
 800ef68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef6c:	e013      	b.n	800ef96 <HAL_TIM_PWM_Start_IT+0xfe>
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	2b0c      	cmp	r3, #12
 800ef72:	d104      	bne.n	800ef7e <HAL_TIM_PWM_Start_IT+0xe6>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2202      	movs	r2, #2
 800ef78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef7c:	e00b      	b.n	800ef96 <HAL_TIM_PWM_Start_IT+0xfe>
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	2b10      	cmp	r3, #16
 800ef82:	d104      	bne.n	800ef8e <HAL_TIM_PWM_Start_IT+0xf6>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2202      	movs	r2, #2
 800ef88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef8c:	e003      	b.n	800ef96 <HAL_TIM_PWM_Start_IT+0xfe>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2202      	movs	r2, #2
 800ef92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	2b0c      	cmp	r3, #12
 800ef9a:	d841      	bhi.n	800f020 <HAL_TIM_PWM_Start_IT+0x188>
 800ef9c:	a201      	add	r2, pc, #4	; (adr r2, 800efa4 <HAL_TIM_PWM_Start_IT+0x10c>)
 800ef9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa2:	bf00      	nop
 800efa4:	0800efd9 	.word	0x0800efd9
 800efa8:	0800f021 	.word	0x0800f021
 800efac:	0800f021 	.word	0x0800f021
 800efb0:	0800f021 	.word	0x0800f021
 800efb4:	0800efeb 	.word	0x0800efeb
 800efb8:	0800f021 	.word	0x0800f021
 800efbc:	0800f021 	.word	0x0800f021
 800efc0:	0800f021 	.word	0x0800f021
 800efc4:	0800effd 	.word	0x0800effd
 800efc8:	0800f021 	.word	0x0800f021
 800efcc:	0800f021 	.word	0x0800f021
 800efd0:	0800f021 	.word	0x0800f021
 800efd4:	0800f00f 	.word	0x0800f00f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	68da      	ldr	r2, [r3, #12]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f042 0202 	orr.w	r2, r2, #2
 800efe6:	60da      	str	r2, [r3, #12]
      break;
 800efe8:	e01b      	b.n	800f022 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	68da      	ldr	r2, [r3, #12]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f042 0204 	orr.w	r2, r2, #4
 800eff8:	60da      	str	r2, [r3, #12]
      break;
 800effa:	e012      	b.n	800f022 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	68da      	ldr	r2, [r3, #12]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f042 0208 	orr.w	r2, r2, #8
 800f00a:	60da      	str	r2, [r3, #12]
      break;
 800f00c:	e009      	b.n	800f022 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	68da      	ldr	r2, [r3, #12]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	f042 0210 	orr.w	r2, r2, #16
 800f01c:	60da      	str	r2, [r3, #12]
      break;
 800f01e:	e000      	b.n	800f022 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 800f020:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	2201      	movs	r2, #1
 800f028:	6839      	ldr	r1, [r7, #0]
 800f02a:	4618      	mov	r0, r3
 800f02c:	f000 ffd4 	bl	800ffd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4a35      	ldr	r2, [pc, #212]	; (800f10c <HAL_TIM_PWM_Start_IT+0x274>)
 800f036:	4293      	cmp	r3, r2
 800f038:	d013      	beq.n	800f062 <HAL_TIM_PWM_Start_IT+0x1ca>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	4a34      	ldr	r2, [pc, #208]	; (800f110 <HAL_TIM_PWM_Start_IT+0x278>)
 800f040:	4293      	cmp	r3, r2
 800f042:	d00e      	beq.n	800f062 <HAL_TIM_PWM_Start_IT+0x1ca>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4a32      	ldr	r2, [pc, #200]	; (800f114 <HAL_TIM_PWM_Start_IT+0x27c>)
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d009      	beq.n	800f062 <HAL_TIM_PWM_Start_IT+0x1ca>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	4a31      	ldr	r2, [pc, #196]	; (800f118 <HAL_TIM_PWM_Start_IT+0x280>)
 800f054:	4293      	cmp	r3, r2
 800f056:	d004      	beq.n	800f062 <HAL_TIM_PWM_Start_IT+0x1ca>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4a2f      	ldr	r2, [pc, #188]	; (800f11c <HAL_TIM_PWM_Start_IT+0x284>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d101      	bne.n	800f066 <HAL_TIM_PWM_Start_IT+0x1ce>
 800f062:	2301      	movs	r3, #1
 800f064:	e000      	b.n	800f068 <HAL_TIM_PWM_Start_IT+0x1d0>
 800f066:	2300      	movs	r3, #0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d007      	beq.n	800f07c <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f07a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	4a22      	ldr	r2, [pc, #136]	; (800f10c <HAL_TIM_PWM_Start_IT+0x274>)
 800f082:	4293      	cmp	r3, r2
 800f084:	d01d      	beq.n	800f0c2 <HAL_TIM_PWM_Start_IT+0x22a>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f08e:	d018      	beq.n	800f0c2 <HAL_TIM_PWM_Start_IT+0x22a>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a22      	ldr	r2, [pc, #136]	; (800f120 <HAL_TIM_PWM_Start_IT+0x288>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d013      	beq.n	800f0c2 <HAL_TIM_PWM_Start_IT+0x22a>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	4a21      	ldr	r2, [pc, #132]	; (800f124 <HAL_TIM_PWM_Start_IT+0x28c>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d00e      	beq.n	800f0c2 <HAL_TIM_PWM_Start_IT+0x22a>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	4a1f      	ldr	r2, [pc, #124]	; (800f128 <HAL_TIM_PWM_Start_IT+0x290>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d009      	beq.n	800f0c2 <HAL_TIM_PWM_Start_IT+0x22a>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	4a17      	ldr	r2, [pc, #92]	; (800f110 <HAL_TIM_PWM_Start_IT+0x278>)
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d004      	beq.n	800f0c2 <HAL_TIM_PWM_Start_IT+0x22a>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	4a1b      	ldr	r2, [pc, #108]	; (800f12c <HAL_TIM_PWM_Start_IT+0x294>)
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d115      	bne.n	800f0ee <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	689a      	ldr	r2, [r3, #8]
 800f0c8:	4b19      	ldr	r3, [pc, #100]	; (800f130 <HAL_TIM_PWM_Start_IT+0x298>)
 800f0ca:	4013      	ands	r3, r2
 800f0cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	2b06      	cmp	r3, #6
 800f0d2:	d015      	beq.n	800f100 <HAL_TIM_PWM_Start_IT+0x268>
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0da:	d011      	beq.n	800f100 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f042 0201 	orr.w	r2, r2, #1
 800f0ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0ec:	e008      	b.n	800f100 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f042 0201 	orr.w	r2, r2, #1
 800f0fc:	601a      	str	r2, [r3, #0]
 800f0fe:	e000      	b.n	800f102 <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f100:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f102:	2300      	movs	r3, #0
}
 800f104:	4618      	mov	r0, r3
 800f106:	3710      	adds	r7, #16
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	40010000 	.word	0x40010000
 800f110:	40010400 	.word	0x40010400
 800f114:	40014000 	.word	0x40014000
 800f118:	40014400 	.word	0x40014400
 800f11c:	40014800 	.word	0x40014800
 800f120:	40000400 	.word	0x40000400
 800f124:	40000800 	.word	0x40000800
 800f128:	40000c00 	.word	0x40000c00
 800f12c:	40001800 	.word	0x40001800
 800f130:	00010007 	.word	0x00010007

0800f134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	691b      	ldr	r3, [r3, #16]
 800f142:	f003 0302 	and.w	r3, r3, #2
 800f146:	2b02      	cmp	r3, #2
 800f148:	d122      	bne.n	800f190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	f003 0302 	and.w	r3, r3, #2
 800f154:	2b02      	cmp	r3, #2
 800f156:	d11b      	bne.n	800f190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f06f 0202 	mvn.w	r2, #2
 800f160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2201      	movs	r2, #1
 800f166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	699b      	ldr	r3, [r3, #24]
 800f16e:	f003 0303 	and.w	r3, r3, #3
 800f172:	2b00      	cmp	r3, #0
 800f174:	d003      	beq.n	800f17e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f000 fb0a 	bl	800f790 <HAL_TIM_IC_CaptureCallback>
 800f17c:	e005      	b.n	800f18a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f000 fafc 	bl	800f77c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f000 fb0d 	bl	800f7a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2200      	movs	r2, #0
 800f18e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	691b      	ldr	r3, [r3, #16]
 800f196:	f003 0304 	and.w	r3, r3, #4
 800f19a:	2b04      	cmp	r3, #4
 800f19c:	d122      	bne.n	800f1e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	f003 0304 	and.w	r3, r3, #4
 800f1a8:	2b04      	cmp	r3, #4
 800f1aa:	d11b      	bne.n	800f1e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	f06f 0204 	mvn.w	r2, #4
 800f1b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2202      	movs	r2, #2
 800f1ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	699b      	ldr	r3, [r3, #24]
 800f1c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d003      	beq.n	800f1d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f000 fae0 	bl	800f790 <HAL_TIM_IC_CaptureCallback>
 800f1d0:	e005      	b.n	800f1de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f000 fad2 	bl	800f77c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f000 fae3 	bl	800f7a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	691b      	ldr	r3, [r3, #16]
 800f1ea:	f003 0308 	and.w	r3, r3, #8
 800f1ee:	2b08      	cmp	r3, #8
 800f1f0:	d122      	bne.n	800f238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	f003 0308 	and.w	r3, r3, #8
 800f1fc:	2b08      	cmp	r3, #8
 800f1fe:	d11b      	bne.n	800f238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	f06f 0208 	mvn.w	r2, #8
 800f208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2204      	movs	r2, #4
 800f20e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	69db      	ldr	r3, [r3, #28]
 800f216:	f003 0303 	and.w	r3, r3, #3
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d003      	beq.n	800f226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f000 fab6 	bl	800f790 <HAL_TIM_IC_CaptureCallback>
 800f224:	e005      	b.n	800f232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 faa8 	bl	800f77c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f000 fab9 	bl	800f7a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2200      	movs	r2, #0
 800f236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	691b      	ldr	r3, [r3, #16]
 800f23e:	f003 0310 	and.w	r3, r3, #16
 800f242:	2b10      	cmp	r3, #16
 800f244:	d122      	bne.n	800f28c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	68db      	ldr	r3, [r3, #12]
 800f24c:	f003 0310 	and.w	r3, r3, #16
 800f250:	2b10      	cmp	r3, #16
 800f252:	d11b      	bne.n	800f28c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f06f 0210 	mvn.w	r2, #16
 800f25c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2208      	movs	r2, #8
 800f262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	69db      	ldr	r3, [r3, #28]
 800f26a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d003      	beq.n	800f27a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f000 fa8c 	bl	800f790 <HAL_TIM_IC_CaptureCallback>
 800f278:	e005      	b.n	800f286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f000 fa7e 	bl	800f77c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f000 fa8f 	bl	800f7a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2200      	movs	r2, #0
 800f28a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	691b      	ldr	r3, [r3, #16]
 800f292:	f003 0301 	and.w	r3, r3, #1
 800f296:	2b01      	cmp	r3, #1
 800f298:	d10e      	bne.n	800f2b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	68db      	ldr	r3, [r3, #12]
 800f2a0:	f003 0301 	and.w	r3, r3, #1
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	d107      	bne.n	800f2b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f06f 0201 	mvn.w	r2, #1
 800f2b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7f5 fd6e 	bl	8004d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	691b      	ldr	r3, [r3, #16]
 800f2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2c2:	2b80      	cmp	r3, #128	; 0x80
 800f2c4:	d10e      	bne.n	800f2e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	68db      	ldr	r3, [r3, #12]
 800f2cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2d0:	2b80      	cmp	r3, #128	; 0x80
 800f2d2:	d107      	bne.n	800f2e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f2dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f000 ff32 	bl	8010148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	691b      	ldr	r3, [r3, #16]
 800f2ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f2f2:	d10e      	bne.n	800f312 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2fe:	2b80      	cmp	r3, #128	; 0x80
 800f300:	d107      	bne.n	800f312 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f30a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f000 ff25 	bl	801015c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	691b      	ldr	r3, [r3, #16]
 800f318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f31c:	2b40      	cmp	r3, #64	; 0x40
 800f31e:	d10e      	bne.n	800f33e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f32a:	2b40      	cmp	r3, #64	; 0x40
 800f32c:	d107      	bne.n	800f33e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f000 fa3d 	bl	800f7b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	691b      	ldr	r3, [r3, #16]
 800f344:	f003 0320 	and.w	r3, r3, #32
 800f348:	2b20      	cmp	r3, #32
 800f34a:	d10e      	bne.n	800f36a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	f003 0320 	and.w	r3, r3, #32
 800f356:	2b20      	cmp	r3, #32
 800f358:	d107      	bne.n	800f36a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	f06f 0220 	mvn.w	r2, #32
 800f362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f000 fee5 	bl	8010134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f36a:	bf00      	nop
 800f36c:	3708      	adds	r7, #8
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}
	...

0800f374 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	60b9      	str	r1, [r7, #8]
 800f37e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f386:	2b01      	cmp	r3, #1
 800f388:	d101      	bne.n	800f38e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f38a:	2302      	movs	r3, #2
 800f38c:	e0fd      	b.n	800f58a <HAL_TIM_PWM_ConfigChannel+0x216>
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2201      	movs	r2, #1
 800f392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2b14      	cmp	r3, #20
 800f39a:	f200 80f0 	bhi.w	800f57e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f39e:	a201      	add	r2, pc, #4	; (adr r2, 800f3a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a4:	0800f3f9 	.word	0x0800f3f9
 800f3a8:	0800f57f 	.word	0x0800f57f
 800f3ac:	0800f57f 	.word	0x0800f57f
 800f3b0:	0800f57f 	.word	0x0800f57f
 800f3b4:	0800f439 	.word	0x0800f439
 800f3b8:	0800f57f 	.word	0x0800f57f
 800f3bc:	0800f57f 	.word	0x0800f57f
 800f3c0:	0800f57f 	.word	0x0800f57f
 800f3c4:	0800f47b 	.word	0x0800f47b
 800f3c8:	0800f57f 	.word	0x0800f57f
 800f3cc:	0800f57f 	.word	0x0800f57f
 800f3d0:	0800f57f 	.word	0x0800f57f
 800f3d4:	0800f4bb 	.word	0x0800f4bb
 800f3d8:	0800f57f 	.word	0x0800f57f
 800f3dc:	0800f57f 	.word	0x0800f57f
 800f3e0:	0800f57f 	.word	0x0800f57f
 800f3e4:	0800f4fd 	.word	0x0800f4fd
 800f3e8:	0800f57f 	.word	0x0800f57f
 800f3ec:	0800f57f 	.word	0x0800f57f
 800f3f0:	0800f57f 	.word	0x0800f57f
 800f3f4:	0800f53d 	.word	0x0800f53d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	68b9      	ldr	r1, [r7, #8]
 800f3fe:	4618      	mov	r0, r3
 800f400:	f000 fa7e 	bl	800f900 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	699a      	ldr	r2, [r3, #24]
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	f042 0208 	orr.w	r2, r2, #8
 800f412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	699a      	ldr	r2, [r3, #24]
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f022 0204 	bic.w	r2, r2, #4
 800f422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	6999      	ldr	r1, [r3, #24]
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	691a      	ldr	r2, [r3, #16]
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	430a      	orrs	r2, r1
 800f434:	619a      	str	r2, [r3, #24]
      break;
 800f436:	e0a3      	b.n	800f580 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	68b9      	ldr	r1, [r7, #8]
 800f43e:	4618      	mov	r0, r3
 800f440:	f000 faee 	bl	800fa20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	699a      	ldr	r2, [r3, #24]
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	699a      	ldr	r2, [r3, #24]
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	6999      	ldr	r1, [r3, #24]
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	691b      	ldr	r3, [r3, #16]
 800f46e:	021a      	lsls	r2, r3, #8
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	430a      	orrs	r2, r1
 800f476:	619a      	str	r2, [r3, #24]
      break;
 800f478:	e082      	b.n	800f580 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	68b9      	ldr	r1, [r7, #8]
 800f480:	4618      	mov	r0, r3
 800f482:	f000 fb57 	bl	800fb34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	69da      	ldr	r2, [r3, #28]
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f042 0208 	orr.w	r2, r2, #8
 800f494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	69da      	ldr	r2, [r3, #28]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f022 0204 	bic.w	r2, r2, #4
 800f4a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	69d9      	ldr	r1, [r3, #28]
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	691a      	ldr	r2, [r3, #16]
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	430a      	orrs	r2, r1
 800f4b6:	61da      	str	r2, [r3, #28]
      break;
 800f4b8:	e062      	b.n	800f580 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	68b9      	ldr	r1, [r7, #8]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f000 fbbd 	bl	800fc40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	69da      	ldr	r2, [r3, #28]
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f4d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	69da      	ldr	r2, [r3, #28]
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f4e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	69d9      	ldr	r1, [r3, #28]
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	691b      	ldr	r3, [r3, #16]
 800f4f0:	021a      	lsls	r2, r3, #8
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	430a      	orrs	r2, r1
 800f4f8:	61da      	str	r2, [r3, #28]
      break;
 800f4fa:	e041      	b.n	800f580 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	68b9      	ldr	r1, [r7, #8]
 800f502:	4618      	mov	r0, r3
 800f504:	f000 fc04 	bl	800fd10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f042 0208 	orr.w	r2, r2, #8
 800f516:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f022 0204 	bic.w	r2, r2, #4
 800f526:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	691a      	ldr	r2, [r3, #16]
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	430a      	orrs	r2, r1
 800f538:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f53a:	e021      	b.n	800f580 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	68b9      	ldr	r1, [r7, #8]
 800f542:	4618      	mov	r0, r3
 800f544:	f000 fc46 	bl	800fdd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f556:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f566:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	691b      	ldr	r3, [r3, #16]
 800f572:	021a      	lsls	r2, r3, #8
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	430a      	orrs	r2, r1
 800f57a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f57c:	e000      	b.n	800f580 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800f57e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2200      	movs	r2, #0
 800f584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f588:	2300      	movs	r3, #0
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	bf00      	nop

0800f594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d101      	bne.n	800f5ac <HAL_TIM_ConfigClockSource+0x18>
 800f5a8:	2302      	movs	r3, #2
 800f5aa:	e0db      	b.n	800f764 <HAL_TIM_ConfigClockSource+0x1d0>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2202      	movs	r2, #2
 800f5b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	689b      	ldr	r3, [r3, #8]
 800f5c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f5c4:	68fa      	ldr	r2, [r7, #12]
 800f5c6:	4b69      	ldr	r3, [pc, #420]	; (800f76c <HAL_TIM_ConfigClockSource+0x1d8>)
 800f5c8:	4013      	ands	r3, r2
 800f5ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f5d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	68fa      	ldr	r2, [r7, #12]
 800f5da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	4a63      	ldr	r2, [pc, #396]	; (800f770 <HAL_TIM_ConfigClockSource+0x1dc>)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	f000 80a9 	beq.w	800f73a <HAL_TIM_ConfigClockSource+0x1a6>
 800f5e8:	4a61      	ldr	r2, [pc, #388]	; (800f770 <HAL_TIM_ConfigClockSource+0x1dc>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	f200 80ae 	bhi.w	800f74c <HAL_TIM_ConfigClockSource+0x1b8>
 800f5f0:	4a60      	ldr	r2, [pc, #384]	; (800f774 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	f000 80a1 	beq.w	800f73a <HAL_TIM_ConfigClockSource+0x1a6>
 800f5f8:	4a5e      	ldr	r2, [pc, #376]	; (800f774 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	f200 80a6 	bhi.w	800f74c <HAL_TIM_ConfigClockSource+0x1b8>
 800f600:	4a5d      	ldr	r2, [pc, #372]	; (800f778 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f602:	4293      	cmp	r3, r2
 800f604:	f000 8099 	beq.w	800f73a <HAL_TIM_ConfigClockSource+0x1a6>
 800f608:	4a5b      	ldr	r2, [pc, #364]	; (800f778 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	f200 809e 	bhi.w	800f74c <HAL_TIM_ConfigClockSource+0x1b8>
 800f610:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f614:	f000 8091 	beq.w	800f73a <HAL_TIM_ConfigClockSource+0x1a6>
 800f618:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f61c:	f200 8096 	bhi.w	800f74c <HAL_TIM_ConfigClockSource+0x1b8>
 800f620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f624:	f000 8089 	beq.w	800f73a <HAL_TIM_ConfigClockSource+0x1a6>
 800f628:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f62c:	f200 808e 	bhi.w	800f74c <HAL_TIM_ConfigClockSource+0x1b8>
 800f630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f634:	d03e      	beq.n	800f6b4 <HAL_TIM_ConfigClockSource+0x120>
 800f636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f63a:	f200 8087 	bhi.w	800f74c <HAL_TIM_ConfigClockSource+0x1b8>
 800f63e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f642:	f000 8085 	beq.w	800f750 <HAL_TIM_ConfigClockSource+0x1bc>
 800f646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f64a:	d87f      	bhi.n	800f74c <HAL_TIM_ConfigClockSource+0x1b8>
 800f64c:	2b70      	cmp	r3, #112	; 0x70
 800f64e:	d01a      	beq.n	800f686 <HAL_TIM_ConfigClockSource+0xf2>
 800f650:	2b70      	cmp	r3, #112	; 0x70
 800f652:	d87b      	bhi.n	800f74c <HAL_TIM_ConfigClockSource+0x1b8>
 800f654:	2b60      	cmp	r3, #96	; 0x60
 800f656:	d050      	beq.n	800f6fa <HAL_TIM_ConfigClockSource+0x166>
 800f658:	2b60      	cmp	r3, #96	; 0x60
 800f65a:	d877      	bhi.n	800f74c <HAL_TIM_ConfigClockSource+0x1b8>
 800f65c:	2b50      	cmp	r3, #80	; 0x50
 800f65e:	d03c      	beq.n	800f6da <HAL_TIM_ConfigClockSource+0x146>
 800f660:	2b50      	cmp	r3, #80	; 0x50
 800f662:	d873      	bhi.n	800f74c <HAL_TIM_ConfigClockSource+0x1b8>
 800f664:	2b40      	cmp	r3, #64	; 0x40
 800f666:	d058      	beq.n	800f71a <HAL_TIM_ConfigClockSource+0x186>
 800f668:	2b40      	cmp	r3, #64	; 0x40
 800f66a:	d86f      	bhi.n	800f74c <HAL_TIM_ConfigClockSource+0x1b8>
 800f66c:	2b30      	cmp	r3, #48	; 0x30
 800f66e:	d064      	beq.n	800f73a <HAL_TIM_ConfigClockSource+0x1a6>
 800f670:	2b30      	cmp	r3, #48	; 0x30
 800f672:	d86b      	bhi.n	800f74c <HAL_TIM_ConfigClockSource+0x1b8>
 800f674:	2b20      	cmp	r3, #32
 800f676:	d060      	beq.n	800f73a <HAL_TIM_ConfigClockSource+0x1a6>
 800f678:	2b20      	cmp	r3, #32
 800f67a:	d867      	bhi.n	800f74c <HAL_TIM_ConfigClockSource+0x1b8>
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d05c      	beq.n	800f73a <HAL_TIM_ConfigClockSource+0x1a6>
 800f680:	2b10      	cmp	r3, #16
 800f682:	d05a      	beq.n	800f73a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800f684:	e062      	b.n	800f74c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6818      	ldr	r0, [r3, #0]
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	6899      	ldr	r1, [r3, #8]
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	685a      	ldr	r2, [r3, #4]
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	68db      	ldr	r3, [r3, #12]
 800f696:	f000 fc7f 	bl	800ff98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	689b      	ldr	r3, [r3, #8]
 800f6a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f6a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	68fa      	ldr	r2, [r7, #12]
 800f6b0:	609a      	str	r2, [r3, #8]
      break;
 800f6b2:	e04e      	b.n	800f752 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6818      	ldr	r0, [r3, #0]
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	6899      	ldr	r1, [r3, #8]
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	685a      	ldr	r2, [r3, #4]
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	f000 fc68 	bl	800ff98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	689a      	ldr	r2, [r3, #8]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f6d6:	609a      	str	r2, [r3, #8]
      break;
 800f6d8:	e03b      	b.n	800f752 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6818      	ldr	r0, [r3, #0]
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	6859      	ldr	r1, [r3, #4]
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	68db      	ldr	r3, [r3, #12]
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	f000 fbd8 	bl	800fe9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	2150      	movs	r1, #80	; 0x50
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f000 fc32 	bl	800ff5c <TIM_ITRx_SetConfig>
      break;
 800f6f8:	e02b      	b.n	800f752 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6818      	ldr	r0, [r3, #0]
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	6859      	ldr	r1, [r3, #4]
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	68db      	ldr	r3, [r3, #12]
 800f706:	461a      	mov	r2, r3
 800f708:	f000 fbf7 	bl	800fefa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	2160      	movs	r1, #96	; 0x60
 800f712:	4618      	mov	r0, r3
 800f714:	f000 fc22 	bl	800ff5c <TIM_ITRx_SetConfig>
      break;
 800f718:	e01b      	b.n	800f752 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6818      	ldr	r0, [r3, #0]
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	6859      	ldr	r1, [r3, #4]
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	68db      	ldr	r3, [r3, #12]
 800f726:	461a      	mov	r2, r3
 800f728:	f000 fbb8 	bl	800fe9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	2140      	movs	r1, #64	; 0x40
 800f732:	4618      	mov	r0, r3
 800f734:	f000 fc12 	bl	800ff5c <TIM_ITRx_SetConfig>
      break;
 800f738:	e00b      	b.n	800f752 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681a      	ldr	r2, [r3, #0]
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	4619      	mov	r1, r3
 800f744:	4610      	mov	r0, r2
 800f746:	f000 fc09 	bl	800ff5c <TIM_ITRx_SetConfig>
        break;
 800f74a:	e002      	b.n	800f752 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800f74c:	bf00      	nop
 800f74e:	e000      	b.n	800f752 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800f750:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2201      	movs	r2, #1
 800f756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2200      	movs	r2, #0
 800f75e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f762:	2300      	movs	r3, #0
}
 800f764:	4618      	mov	r0, r3
 800f766:	3710      	adds	r7, #16
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	ffceff88 	.word	0xffceff88
 800f770:	00100040 	.word	0x00100040
 800f774:	00100030 	.word	0x00100030
 800f778:	00100020 	.word	0x00100020

0800f77c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b083      	sub	sp, #12
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f784:	bf00      	nop
 800f786:	370c      	adds	r7, #12
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr

0800f790 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f790:	b480      	push	{r7}
 800f792:	b083      	sub	sp, #12
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f798:	bf00      	nop
 800f79a:	370c      	adds	r7, #12
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr

0800f7a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b083      	sub	sp, #12
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f7ac:	bf00      	nop
 800f7ae:	370c      	adds	r7, #12
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr

0800f7b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b083      	sub	sp, #12
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f7c0:	bf00      	nop
 800f7c2:	370c      	adds	r7, #12
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ca:	4770      	bx	lr

0800f7cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b085      	sub	sp, #20
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
 800f7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	4a40      	ldr	r2, [pc, #256]	; (800f8e0 <TIM_Base_SetConfig+0x114>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d013      	beq.n	800f80c <TIM_Base_SetConfig+0x40>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7ea:	d00f      	beq.n	800f80c <TIM_Base_SetConfig+0x40>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	4a3d      	ldr	r2, [pc, #244]	; (800f8e4 <TIM_Base_SetConfig+0x118>)
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d00b      	beq.n	800f80c <TIM_Base_SetConfig+0x40>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	4a3c      	ldr	r2, [pc, #240]	; (800f8e8 <TIM_Base_SetConfig+0x11c>)
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d007      	beq.n	800f80c <TIM_Base_SetConfig+0x40>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	4a3b      	ldr	r2, [pc, #236]	; (800f8ec <TIM_Base_SetConfig+0x120>)
 800f800:	4293      	cmp	r3, r2
 800f802:	d003      	beq.n	800f80c <TIM_Base_SetConfig+0x40>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	4a3a      	ldr	r2, [pc, #232]	; (800f8f0 <TIM_Base_SetConfig+0x124>)
 800f808:	4293      	cmp	r3, r2
 800f80a:	d108      	bne.n	800f81e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	68fa      	ldr	r2, [r7, #12]
 800f81a:	4313      	orrs	r3, r2
 800f81c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	4a2f      	ldr	r2, [pc, #188]	; (800f8e0 <TIM_Base_SetConfig+0x114>)
 800f822:	4293      	cmp	r3, r2
 800f824:	d01f      	beq.n	800f866 <TIM_Base_SetConfig+0x9a>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f82c:	d01b      	beq.n	800f866 <TIM_Base_SetConfig+0x9a>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4a2c      	ldr	r2, [pc, #176]	; (800f8e4 <TIM_Base_SetConfig+0x118>)
 800f832:	4293      	cmp	r3, r2
 800f834:	d017      	beq.n	800f866 <TIM_Base_SetConfig+0x9a>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4a2b      	ldr	r2, [pc, #172]	; (800f8e8 <TIM_Base_SetConfig+0x11c>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d013      	beq.n	800f866 <TIM_Base_SetConfig+0x9a>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4a2a      	ldr	r2, [pc, #168]	; (800f8ec <TIM_Base_SetConfig+0x120>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d00f      	beq.n	800f866 <TIM_Base_SetConfig+0x9a>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4a29      	ldr	r2, [pc, #164]	; (800f8f0 <TIM_Base_SetConfig+0x124>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d00b      	beq.n	800f866 <TIM_Base_SetConfig+0x9a>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	4a28      	ldr	r2, [pc, #160]	; (800f8f4 <TIM_Base_SetConfig+0x128>)
 800f852:	4293      	cmp	r3, r2
 800f854:	d007      	beq.n	800f866 <TIM_Base_SetConfig+0x9a>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	4a27      	ldr	r2, [pc, #156]	; (800f8f8 <TIM_Base_SetConfig+0x12c>)
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d003      	beq.n	800f866 <TIM_Base_SetConfig+0x9a>
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	4a26      	ldr	r2, [pc, #152]	; (800f8fc <TIM_Base_SetConfig+0x130>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d108      	bne.n	800f878 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f86c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	68fa      	ldr	r2, [r7, #12]
 800f874:	4313      	orrs	r3, r2
 800f876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	695b      	ldr	r3, [r3, #20]
 800f882:	4313      	orrs	r3, r2
 800f884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	689a      	ldr	r2, [r3, #8]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	4a10      	ldr	r2, [pc, #64]	; (800f8e0 <TIM_Base_SetConfig+0x114>)
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d00f      	beq.n	800f8c4 <TIM_Base_SetConfig+0xf8>
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	4a12      	ldr	r2, [pc, #72]	; (800f8f0 <TIM_Base_SetConfig+0x124>)
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d00b      	beq.n	800f8c4 <TIM_Base_SetConfig+0xf8>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a11      	ldr	r2, [pc, #68]	; (800f8f4 <TIM_Base_SetConfig+0x128>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d007      	beq.n	800f8c4 <TIM_Base_SetConfig+0xf8>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	4a10      	ldr	r2, [pc, #64]	; (800f8f8 <TIM_Base_SetConfig+0x12c>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d003      	beq.n	800f8c4 <TIM_Base_SetConfig+0xf8>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4a0f      	ldr	r2, [pc, #60]	; (800f8fc <TIM_Base_SetConfig+0x130>)
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d103      	bne.n	800f8cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	691a      	ldr	r2, [r3, #16]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	615a      	str	r2, [r3, #20]
}
 800f8d2:	bf00      	nop
 800f8d4:	3714      	adds	r7, #20
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8dc:	4770      	bx	lr
 800f8de:	bf00      	nop
 800f8e0:	40010000 	.word	0x40010000
 800f8e4:	40000400 	.word	0x40000400
 800f8e8:	40000800 	.word	0x40000800
 800f8ec:	40000c00 	.word	0x40000c00
 800f8f0:	40010400 	.word	0x40010400
 800f8f4:	40014000 	.word	0x40014000
 800f8f8:	40014400 	.word	0x40014400
 800f8fc:	40014800 	.word	0x40014800

0800f900 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f900:	b480      	push	{r7}
 800f902:	b087      	sub	sp, #28
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6a1b      	ldr	r3, [r3, #32]
 800f90e:	f023 0201 	bic.w	r2, r3, #1
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6a1b      	ldr	r3, [r3, #32]
 800f91a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	699b      	ldr	r3, [r3, #24]
 800f926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f928:	68fa      	ldr	r2, [r7, #12]
 800f92a:	4b37      	ldr	r3, [pc, #220]	; (800fa08 <TIM_OC1_SetConfig+0x108>)
 800f92c:	4013      	ands	r3, r2
 800f92e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	f023 0303 	bic.w	r3, r3, #3
 800f936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	68fa      	ldr	r2, [r7, #12]
 800f93e:	4313      	orrs	r3, r2
 800f940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	f023 0302 	bic.w	r3, r3, #2
 800f948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	689b      	ldr	r3, [r3, #8]
 800f94e:	697a      	ldr	r2, [r7, #20]
 800f950:	4313      	orrs	r3, r2
 800f952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4a2d      	ldr	r2, [pc, #180]	; (800fa0c <TIM_OC1_SetConfig+0x10c>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	d00f      	beq.n	800f97c <TIM_OC1_SetConfig+0x7c>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4a2c      	ldr	r2, [pc, #176]	; (800fa10 <TIM_OC1_SetConfig+0x110>)
 800f960:	4293      	cmp	r3, r2
 800f962:	d00b      	beq.n	800f97c <TIM_OC1_SetConfig+0x7c>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4a2b      	ldr	r2, [pc, #172]	; (800fa14 <TIM_OC1_SetConfig+0x114>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d007      	beq.n	800f97c <TIM_OC1_SetConfig+0x7c>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	4a2a      	ldr	r2, [pc, #168]	; (800fa18 <TIM_OC1_SetConfig+0x118>)
 800f970:	4293      	cmp	r3, r2
 800f972:	d003      	beq.n	800f97c <TIM_OC1_SetConfig+0x7c>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	4a29      	ldr	r2, [pc, #164]	; (800fa1c <TIM_OC1_SetConfig+0x11c>)
 800f978:	4293      	cmp	r3, r2
 800f97a:	d10c      	bne.n	800f996 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	f023 0308 	bic.w	r3, r3, #8
 800f982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	68db      	ldr	r3, [r3, #12]
 800f988:	697a      	ldr	r2, [r7, #20]
 800f98a:	4313      	orrs	r3, r2
 800f98c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	f023 0304 	bic.w	r3, r3, #4
 800f994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	4a1c      	ldr	r2, [pc, #112]	; (800fa0c <TIM_OC1_SetConfig+0x10c>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d00f      	beq.n	800f9be <TIM_OC1_SetConfig+0xbe>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	4a1b      	ldr	r2, [pc, #108]	; (800fa10 <TIM_OC1_SetConfig+0x110>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d00b      	beq.n	800f9be <TIM_OC1_SetConfig+0xbe>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4a1a      	ldr	r2, [pc, #104]	; (800fa14 <TIM_OC1_SetConfig+0x114>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d007      	beq.n	800f9be <TIM_OC1_SetConfig+0xbe>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	4a19      	ldr	r2, [pc, #100]	; (800fa18 <TIM_OC1_SetConfig+0x118>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d003      	beq.n	800f9be <TIM_OC1_SetConfig+0xbe>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	4a18      	ldr	r2, [pc, #96]	; (800fa1c <TIM_OC1_SetConfig+0x11c>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d111      	bne.n	800f9e2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f9cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	695b      	ldr	r3, [r3, #20]
 800f9d2:	693a      	ldr	r2, [r7, #16]
 800f9d4:	4313      	orrs	r3, r2
 800f9d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	699b      	ldr	r3, [r3, #24]
 800f9dc:	693a      	ldr	r2, [r7, #16]
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	693a      	ldr	r2, [r7, #16]
 800f9e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	68fa      	ldr	r2, [r7, #12]
 800f9ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	685a      	ldr	r2, [r3, #4]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	697a      	ldr	r2, [r7, #20]
 800f9fa:	621a      	str	r2, [r3, #32]
}
 800f9fc:	bf00      	nop
 800f9fe:	371c      	adds	r7, #28
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr
 800fa08:	fffeff8f 	.word	0xfffeff8f
 800fa0c:	40010000 	.word	0x40010000
 800fa10:	40010400 	.word	0x40010400
 800fa14:	40014000 	.word	0x40014000
 800fa18:	40014400 	.word	0x40014400
 800fa1c:	40014800 	.word	0x40014800

0800fa20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b087      	sub	sp, #28
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6a1b      	ldr	r3, [r3, #32]
 800fa2e:	f023 0210 	bic.w	r2, r3, #16
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6a1b      	ldr	r3, [r3, #32]
 800fa3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	699b      	ldr	r3, [r3, #24]
 800fa46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fa48:	68fa      	ldr	r2, [r7, #12]
 800fa4a:	4b34      	ldr	r3, [pc, #208]	; (800fb1c <TIM_OC2_SetConfig+0xfc>)
 800fa4c:	4013      	ands	r3, r2
 800fa4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	021b      	lsls	r3, r3, #8
 800fa5e:	68fa      	ldr	r2, [r7, #12]
 800fa60:	4313      	orrs	r3, r2
 800fa62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	f023 0320 	bic.w	r3, r3, #32
 800fa6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	689b      	ldr	r3, [r3, #8]
 800fa70:	011b      	lsls	r3, r3, #4
 800fa72:	697a      	ldr	r2, [r7, #20]
 800fa74:	4313      	orrs	r3, r2
 800fa76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	4a29      	ldr	r2, [pc, #164]	; (800fb20 <TIM_OC2_SetConfig+0x100>)
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d003      	beq.n	800fa88 <TIM_OC2_SetConfig+0x68>
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	4a28      	ldr	r2, [pc, #160]	; (800fb24 <TIM_OC2_SetConfig+0x104>)
 800fa84:	4293      	cmp	r3, r2
 800fa86:	d10d      	bne.n	800faa4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	68db      	ldr	r3, [r3, #12]
 800fa94:	011b      	lsls	r3, r3, #4
 800fa96:	697a      	ldr	r2, [r7, #20]
 800fa98:	4313      	orrs	r3, r2
 800fa9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800faa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	4a1e      	ldr	r2, [pc, #120]	; (800fb20 <TIM_OC2_SetConfig+0x100>)
 800faa8:	4293      	cmp	r3, r2
 800faaa:	d00f      	beq.n	800facc <TIM_OC2_SetConfig+0xac>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	4a1d      	ldr	r2, [pc, #116]	; (800fb24 <TIM_OC2_SetConfig+0x104>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d00b      	beq.n	800facc <TIM_OC2_SetConfig+0xac>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	4a1c      	ldr	r2, [pc, #112]	; (800fb28 <TIM_OC2_SetConfig+0x108>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	d007      	beq.n	800facc <TIM_OC2_SetConfig+0xac>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	4a1b      	ldr	r2, [pc, #108]	; (800fb2c <TIM_OC2_SetConfig+0x10c>)
 800fac0:	4293      	cmp	r3, r2
 800fac2:	d003      	beq.n	800facc <TIM_OC2_SetConfig+0xac>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	4a1a      	ldr	r2, [pc, #104]	; (800fb30 <TIM_OC2_SetConfig+0x110>)
 800fac8:	4293      	cmp	r3, r2
 800faca:	d113      	bne.n	800faf4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fad2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fada:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	695b      	ldr	r3, [r3, #20]
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	693a      	ldr	r2, [r7, #16]
 800fae4:	4313      	orrs	r3, r2
 800fae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	699b      	ldr	r3, [r3, #24]
 800faec:	009b      	lsls	r3, r3, #2
 800faee:	693a      	ldr	r2, [r7, #16]
 800faf0:	4313      	orrs	r3, r2
 800faf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	693a      	ldr	r2, [r7, #16]
 800faf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	685a      	ldr	r2, [r3, #4]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	697a      	ldr	r2, [r7, #20]
 800fb0c:	621a      	str	r2, [r3, #32]
}
 800fb0e:	bf00      	nop
 800fb10:	371c      	adds	r7, #28
 800fb12:	46bd      	mov	sp, r7
 800fb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb18:	4770      	bx	lr
 800fb1a:	bf00      	nop
 800fb1c:	feff8fff 	.word	0xfeff8fff
 800fb20:	40010000 	.word	0x40010000
 800fb24:	40010400 	.word	0x40010400
 800fb28:	40014000 	.word	0x40014000
 800fb2c:	40014400 	.word	0x40014400
 800fb30:	40014800 	.word	0x40014800

0800fb34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb34:	b480      	push	{r7}
 800fb36:	b087      	sub	sp, #28
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6a1b      	ldr	r3, [r3, #32]
 800fb42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6a1b      	ldr	r3, [r3, #32]
 800fb4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	69db      	ldr	r3, [r3, #28]
 800fb5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f023 0303 	bic.w	r3, r3, #3
 800fb6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	68fa      	ldr	r2, [r7, #12]
 800fb72:	4313      	orrs	r3, r2
 800fb74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fb7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	689b      	ldr	r3, [r3, #8]
 800fb82:	021b      	lsls	r3, r3, #8
 800fb84:	697a      	ldr	r2, [r7, #20]
 800fb86:	4313      	orrs	r3, r2
 800fb88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	4a27      	ldr	r2, [pc, #156]	; (800fc2c <TIM_OC3_SetConfig+0xf8>)
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d003      	beq.n	800fb9a <TIM_OC3_SetConfig+0x66>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	4a26      	ldr	r2, [pc, #152]	; (800fc30 <TIM_OC3_SetConfig+0xfc>)
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d10d      	bne.n	800fbb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	68db      	ldr	r3, [r3, #12]
 800fba6:	021b      	lsls	r3, r3, #8
 800fba8:	697a      	ldr	r2, [r7, #20]
 800fbaa:	4313      	orrs	r3, r2
 800fbac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fbb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	4a1c      	ldr	r2, [pc, #112]	; (800fc2c <TIM_OC3_SetConfig+0xf8>)
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d00f      	beq.n	800fbde <TIM_OC3_SetConfig+0xaa>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	4a1b      	ldr	r2, [pc, #108]	; (800fc30 <TIM_OC3_SetConfig+0xfc>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d00b      	beq.n	800fbde <TIM_OC3_SetConfig+0xaa>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	4a1a      	ldr	r2, [pc, #104]	; (800fc34 <TIM_OC3_SetConfig+0x100>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d007      	beq.n	800fbde <TIM_OC3_SetConfig+0xaa>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	4a19      	ldr	r2, [pc, #100]	; (800fc38 <TIM_OC3_SetConfig+0x104>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d003      	beq.n	800fbde <TIM_OC3_SetConfig+0xaa>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	4a18      	ldr	r2, [pc, #96]	; (800fc3c <TIM_OC3_SetConfig+0x108>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d113      	bne.n	800fc06 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fbe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fbec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	695b      	ldr	r3, [r3, #20]
 800fbf2:	011b      	lsls	r3, r3, #4
 800fbf4:	693a      	ldr	r2, [r7, #16]
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	699b      	ldr	r3, [r3, #24]
 800fbfe:	011b      	lsls	r3, r3, #4
 800fc00:	693a      	ldr	r2, [r7, #16]
 800fc02:	4313      	orrs	r3, r2
 800fc04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	693a      	ldr	r2, [r7, #16]
 800fc0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	68fa      	ldr	r2, [r7, #12]
 800fc10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	685a      	ldr	r2, [r3, #4]
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	697a      	ldr	r2, [r7, #20]
 800fc1e:	621a      	str	r2, [r3, #32]
}
 800fc20:	bf00      	nop
 800fc22:	371c      	adds	r7, #28
 800fc24:	46bd      	mov	sp, r7
 800fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2a:	4770      	bx	lr
 800fc2c:	40010000 	.word	0x40010000
 800fc30:	40010400 	.word	0x40010400
 800fc34:	40014000 	.word	0x40014000
 800fc38:	40014400 	.word	0x40014400
 800fc3c:	40014800 	.word	0x40014800

0800fc40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b087      	sub	sp, #28
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6a1b      	ldr	r3, [r3, #32]
 800fc4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6a1b      	ldr	r3, [r3, #32]
 800fc5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	69db      	ldr	r3, [r3, #28]
 800fc66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	021b      	lsls	r3, r3, #8
 800fc7e:	68fa      	ldr	r2, [r7, #12]
 800fc80:	4313      	orrs	r3, r2
 800fc82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	689b      	ldr	r3, [r3, #8]
 800fc90:	031b      	lsls	r3, r3, #12
 800fc92:	693a      	ldr	r2, [r7, #16]
 800fc94:	4313      	orrs	r3, r2
 800fc96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	4a18      	ldr	r2, [pc, #96]	; (800fcfc <TIM_OC4_SetConfig+0xbc>)
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d00f      	beq.n	800fcc0 <TIM_OC4_SetConfig+0x80>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	4a17      	ldr	r2, [pc, #92]	; (800fd00 <TIM_OC4_SetConfig+0xc0>)
 800fca4:	4293      	cmp	r3, r2
 800fca6:	d00b      	beq.n	800fcc0 <TIM_OC4_SetConfig+0x80>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	4a16      	ldr	r2, [pc, #88]	; (800fd04 <TIM_OC4_SetConfig+0xc4>)
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d007      	beq.n	800fcc0 <TIM_OC4_SetConfig+0x80>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	4a15      	ldr	r2, [pc, #84]	; (800fd08 <TIM_OC4_SetConfig+0xc8>)
 800fcb4:	4293      	cmp	r3, r2
 800fcb6:	d003      	beq.n	800fcc0 <TIM_OC4_SetConfig+0x80>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	4a14      	ldr	r2, [pc, #80]	; (800fd0c <TIM_OC4_SetConfig+0xcc>)
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	d109      	bne.n	800fcd4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fcc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	695b      	ldr	r3, [r3, #20]
 800fccc:	019b      	lsls	r3, r3, #6
 800fcce:	697a      	ldr	r2, [r7, #20]
 800fcd0:	4313      	orrs	r3, r2
 800fcd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	697a      	ldr	r2, [r7, #20]
 800fcd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	68fa      	ldr	r2, [r7, #12]
 800fcde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	685a      	ldr	r2, [r3, #4]
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	693a      	ldr	r2, [r7, #16]
 800fcec:	621a      	str	r2, [r3, #32]
}
 800fcee:	bf00      	nop
 800fcf0:	371c      	adds	r7, #28
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf8:	4770      	bx	lr
 800fcfa:	bf00      	nop
 800fcfc:	40010000 	.word	0x40010000
 800fd00:	40010400 	.word	0x40010400
 800fd04:	40014000 	.word	0x40014000
 800fd08:	40014400 	.word	0x40014400
 800fd0c:	40014800 	.word	0x40014800

0800fd10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fd10:	b480      	push	{r7}
 800fd12:	b087      	sub	sp, #28
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6a1b      	ldr	r3, [r3, #32]
 800fd1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6a1b      	ldr	r3, [r3, #32]
 800fd2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	685b      	ldr	r3, [r3, #4]
 800fd30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	68fa      	ldr	r2, [r7, #12]
 800fd46:	4313      	orrs	r3, r2
 800fd48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fd50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	689b      	ldr	r3, [r3, #8]
 800fd56:	041b      	lsls	r3, r3, #16
 800fd58:	693a      	ldr	r2, [r7, #16]
 800fd5a:	4313      	orrs	r3, r2
 800fd5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	4a17      	ldr	r2, [pc, #92]	; (800fdc0 <TIM_OC5_SetConfig+0xb0>)
 800fd62:	4293      	cmp	r3, r2
 800fd64:	d00f      	beq.n	800fd86 <TIM_OC5_SetConfig+0x76>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	4a16      	ldr	r2, [pc, #88]	; (800fdc4 <TIM_OC5_SetConfig+0xb4>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d00b      	beq.n	800fd86 <TIM_OC5_SetConfig+0x76>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4a15      	ldr	r2, [pc, #84]	; (800fdc8 <TIM_OC5_SetConfig+0xb8>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d007      	beq.n	800fd86 <TIM_OC5_SetConfig+0x76>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	4a14      	ldr	r2, [pc, #80]	; (800fdcc <TIM_OC5_SetConfig+0xbc>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d003      	beq.n	800fd86 <TIM_OC5_SetConfig+0x76>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	4a13      	ldr	r2, [pc, #76]	; (800fdd0 <TIM_OC5_SetConfig+0xc0>)
 800fd82:	4293      	cmp	r3, r2
 800fd84:	d109      	bne.n	800fd9a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fd8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	695b      	ldr	r3, [r3, #20]
 800fd92:	021b      	lsls	r3, r3, #8
 800fd94:	697a      	ldr	r2, [r7, #20]
 800fd96:	4313      	orrs	r3, r2
 800fd98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	697a      	ldr	r2, [r7, #20]
 800fd9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	68fa      	ldr	r2, [r7, #12]
 800fda4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	685a      	ldr	r2, [r3, #4]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	693a      	ldr	r2, [r7, #16]
 800fdb2:	621a      	str	r2, [r3, #32]
}
 800fdb4:	bf00      	nop
 800fdb6:	371c      	adds	r7, #28
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbe:	4770      	bx	lr
 800fdc0:	40010000 	.word	0x40010000
 800fdc4:	40010400 	.word	0x40010400
 800fdc8:	40014000 	.word	0x40014000
 800fdcc:	40014400 	.word	0x40014400
 800fdd0:	40014800 	.word	0x40014800

0800fdd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b087      	sub	sp, #28
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6a1b      	ldr	r3, [r3, #32]
 800fde2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6a1b      	ldr	r3, [r3, #32]
 800fdee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	021b      	lsls	r3, r3, #8
 800fe0a:	68fa      	ldr	r2, [r7, #12]
 800fe0c:	4313      	orrs	r3, r2
 800fe0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fe16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	689b      	ldr	r3, [r3, #8]
 800fe1c:	051b      	lsls	r3, r3, #20
 800fe1e:	693a      	ldr	r2, [r7, #16]
 800fe20:	4313      	orrs	r3, r2
 800fe22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	4a18      	ldr	r2, [pc, #96]	; (800fe88 <TIM_OC6_SetConfig+0xb4>)
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	d00f      	beq.n	800fe4c <TIM_OC6_SetConfig+0x78>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	4a17      	ldr	r2, [pc, #92]	; (800fe8c <TIM_OC6_SetConfig+0xb8>)
 800fe30:	4293      	cmp	r3, r2
 800fe32:	d00b      	beq.n	800fe4c <TIM_OC6_SetConfig+0x78>
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	4a16      	ldr	r2, [pc, #88]	; (800fe90 <TIM_OC6_SetConfig+0xbc>)
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	d007      	beq.n	800fe4c <TIM_OC6_SetConfig+0x78>
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	4a15      	ldr	r2, [pc, #84]	; (800fe94 <TIM_OC6_SetConfig+0xc0>)
 800fe40:	4293      	cmp	r3, r2
 800fe42:	d003      	beq.n	800fe4c <TIM_OC6_SetConfig+0x78>
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	4a14      	ldr	r2, [pc, #80]	; (800fe98 <TIM_OC6_SetConfig+0xc4>)
 800fe48:	4293      	cmp	r3, r2
 800fe4a:	d109      	bne.n	800fe60 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fe52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	695b      	ldr	r3, [r3, #20]
 800fe58:	029b      	lsls	r3, r3, #10
 800fe5a:	697a      	ldr	r2, [r7, #20]
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	697a      	ldr	r2, [r7, #20]
 800fe64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	68fa      	ldr	r2, [r7, #12]
 800fe6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	685a      	ldr	r2, [r3, #4]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	693a      	ldr	r2, [r7, #16]
 800fe78:	621a      	str	r2, [r3, #32]
}
 800fe7a:	bf00      	nop
 800fe7c:	371c      	adds	r7, #28
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe84:	4770      	bx	lr
 800fe86:	bf00      	nop
 800fe88:	40010000 	.word	0x40010000
 800fe8c:	40010400 	.word	0x40010400
 800fe90:	40014000 	.word	0x40014000
 800fe94:	40014400 	.word	0x40014400
 800fe98:	40014800 	.word	0x40014800

0800fe9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b087      	sub	sp, #28
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	6a1b      	ldr	r3, [r3, #32]
 800feac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	6a1b      	ldr	r3, [r3, #32]
 800feb2:	f023 0201 	bic.w	r2, r3, #1
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	699b      	ldr	r3, [r3, #24]
 800febe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	011b      	lsls	r3, r3, #4
 800fecc:	693a      	ldr	r2, [r7, #16]
 800fece:	4313      	orrs	r3, r2
 800fed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	f023 030a 	bic.w	r3, r3, #10
 800fed8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800feda:	697a      	ldr	r2, [r7, #20]
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	4313      	orrs	r3, r2
 800fee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	693a      	ldr	r2, [r7, #16]
 800fee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	697a      	ldr	r2, [r7, #20]
 800feec:	621a      	str	r2, [r3, #32]
}
 800feee:	bf00      	nop
 800fef0:	371c      	adds	r7, #28
 800fef2:	46bd      	mov	sp, r7
 800fef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef8:	4770      	bx	lr

0800fefa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fefa:	b480      	push	{r7}
 800fefc:	b087      	sub	sp, #28
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	60f8      	str	r0, [r7, #12]
 800ff02:	60b9      	str	r1, [r7, #8]
 800ff04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	6a1b      	ldr	r3, [r3, #32]
 800ff0a:	f023 0210 	bic.w	r2, r3, #16
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	699b      	ldr	r3, [r3, #24]
 800ff16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	6a1b      	ldr	r3, [r3, #32]
 800ff1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ff24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	031b      	lsls	r3, r3, #12
 800ff2a:	697a      	ldr	r2, [r7, #20]
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ff30:	693b      	ldr	r3, [r7, #16]
 800ff32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ff36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	011b      	lsls	r3, r3, #4
 800ff3c:	693a      	ldr	r2, [r7, #16]
 800ff3e:	4313      	orrs	r3, r2
 800ff40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	697a      	ldr	r2, [r7, #20]
 800ff46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	693a      	ldr	r2, [r7, #16]
 800ff4c:	621a      	str	r2, [r3, #32]
}
 800ff4e:	bf00      	nop
 800ff50:	371c      	adds	r7, #28
 800ff52:	46bd      	mov	sp, r7
 800ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff58:	4770      	bx	lr
	...

0800ff5c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b085      	sub	sp, #20
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	689b      	ldr	r3, [r3, #8]
 800ff6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ff6c:	68fa      	ldr	r2, [r7, #12]
 800ff6e:	4b09      	ldr	r3, [pc, #36]	; (800ff94 <TIM_ITRx_SetConfig+0x38>)
 800ff70:	4013      	ands	r3, r2
 800ff72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ff74:	683a      	ldr	r2, [r7, #0]
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	4313      	orrs	r3, r2
 800ff7a:	f043 0307 	orr.w	r3, r3, #7
 800ff7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	68fa      	ldr	r2, [r7, #12]
 800ff84:	609a      	str	r2, [r3, #8]
}
 800ff86:	bf00      	nop
 800ff88:	3714      	adds	r7, #20
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr
 800ff92:	bf00      	nop
 800ff94:	ffcfff8f 	.word	0xffcfff8f

0800ff98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b087      	sub	sp, #28
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	60f8      	str	r0, [r7, #12]
 800ffa0:	60b9      	str	r1, [r7, #8]
 800ffa2:	607a      	str	r2, [r7, #4]
 800ffa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	689b      	ldr	r3, [r3, #8]
 800ffaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ffb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	021a      	lsls	r2, r3, #8
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	431a      	orrs	r2, r3
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	4313      	orrs	r3, r2
 800ffc0:	697a      	ldr	r2, [r7, #20]
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	697a      	ldr	r2, [r7, #20]
 800ffca:	609a      	str	r2, [r3, #8]
}
 800ffcc:	bf00      	nop
 800ffce:	371c      	adds	r7, #28
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr

0800ffd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b087      	sub	sp, #28
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	f003 031f 	and.w	r3, r3, #31
 800ffea:	2201      	movs	r2, #1
 800ffec:	fa02 f303 	lsl.w	r3, r2, r3
 800fff0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	6a1a      	ldr	r2, [r3, #32]
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	43db      	mvns	r3, r3
 800fffa:	401a      	ands	r2, r3
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	6a1a      	ldr	r2, [r3, #32]
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	f003 031f 	and.w	r3, r3, #31
 801000a:	6879      	ldr	r1, [r7, #4]
 801000c:	fa01 f303 	lsl.w	r3, r1, r3
 8010010:	431a      	orrs	r2, r3
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	621a      	str	r2, [r3, #32]
}
 8010016:	bf00      	nop
 8010018:	371c      	adds	r7, #28
 801001a:	46bd      	mov	sp, r7
 801001c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010020:	4770      	bx	lr
	...

08010024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010024:	b480      	push	{r7}
 8010026:	b085      	sub	sp, #20
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010034:	2b01      	cmp	r3, #1
 8010036:	d101      	bne.n	801003c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010038:	2302      	movs	r3, #2
 801003a:	e068      	b.n	801010e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2201      	movs	r2, #1
 8010040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2202      	movs	r2, #2
 8010048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	689b      	ldr	r3, [r3, #8]
 801005a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a2e      	ldr	r2, [pc, #184]	; (801011c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d004      	beq.n	8010070 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	4a2d      	ldr	r2, [pc, #180]	; (8010120 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801006c:	4293      	cmp	r3, r2
 801006e:	d108      	bne.n	8010082 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010076:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	68fa      	ldr	r2, [r7, #12]
 801007e:	4313      	orrs	r3, r2
 8010080:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010088:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	68fa      	ldr	r2, [r7, #12]
 8010090:	4313      	orrs	r3, r2
 8010092:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	68fa      	ldr	r2, [r7, #12]
 801009a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	4a1e      	ldr	r2, [pc, #120]	; (801011c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80100a2:	4293      	cmp	r3, r2
 80100a4:	d01d      	beq.n	80100e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100ae:	d018      	beq.n	80100e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	4a1b      	ldr	r2, [pc, #108]	; (8010124 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d013      	beq.n	80100e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	4a1a      	ldr	r2, [pc, #104]	; (8010128 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80100c0:	4293      	cmp	r3, r2
 80100c2:	d00e      	beq.n	80100e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4a18      	ldr	r2, [pc, #96]	; (801012c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d009      	beq.n	80100e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	4a13      	ldr	r2, [pc, #76]	; (8010120 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80100d4:	4293      	cmp	r3, r2
 80100d6:	d004      	beq.n	80100e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4a14      	ldr	r2, [pc, #80]	; (8010130 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d10c      	bne.n	80100fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80100e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	689b      	ldr	r3, [r3, #8]
 80100ee:	68ba      	ldr	r2, [r7, #8]
 80100f0:	4313      	orrs	r3, r2
 80100f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	68ba      	ldr	r2, [r7, #8]
 80100fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2201      	movs	r2, #1
 8010100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801010c:	2300      	movs	r3, #0
}
 801010e:	4618      	mov	r0, r3
 8010110:	3714      	adds	r7, #20
 8010112:	46bd      	mov	sp, r7
 8010114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010118:	4770      	bx	lr
 801011a:	bf00      	nop
 801011c:	40010000 	.word	0x40010000
 8010120:	40010400 	.word	0x40010400
 8010124:	40000400 	.word	0x40000400
 8010128:	40000800 	.word	0x40000800
 801012c:	40000c00 	.word	0x40000c00
 8010130:	40001800 	.word	0x40001800

08010134 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010134:	b480      	push	{r7}
 8010136:	b083      	sub	sp, #12
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801013c:	bf00      	nop
 801013e:	370c      	adds	r7, #12
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr

08010148 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010150:	bf00      	nop
 8010152:	370c      	adds	r7, #12
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr

0801015c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801015c:	b480      	push	{r7}
 801015e:	b083      	sub	sp, #12
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010164:	bf00      	nop
 8010166:	370c      	adds	r7, #12
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr

08010170 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d101      	bne.n	8010182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801017e:	2301      	movs	r3, #1
 8010180:	e042      	b.n	8010208 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010188:	2b00      	cmp	r3, #0
 801018a:	d106      	bne.n	801019a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2200      	movs	r2, #0
 8010190:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f7f4 fb83 	bl	80048a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2224      	movs	r2, #36	; 0x24
 801019e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	681a      	ldr	r2, [r3, #0]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f022 0201 	bic.w	r2, r2, #1
 80101b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f000 fbe0 	bl	8010978 <UART_SetConfig>
 80101b8:	4603      	mov	r3, r0
 80101ba:	2b01      	cmp	r3, #1
 80101bc:	d101      	bne.n	80101c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80101be:	2301      	movs	r3, #1
 80101c0:	e022      	b.n	8010208 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d002      	beq.n	80101d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f001 f934 	bl	8011438 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	685a      	ldr	r2, [r3, #4]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80101de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	689a      	ldr	r2, [r3, #8]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80101ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	681a      	ldr	r2, [r3, #0]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	f042 0201 	orr.w	r2, r2, #1
 80101fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f001 f9bb 	bl	801157c <UART_CheckIdleState>
 8010206:	4603      	mov	r3, r0
}
 8010208:	4618      	mov	r0, r3
 801020a:	3708      	adds	r7, #8
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}

08010210 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b084      	sub	sp, #16
 8010214:	af00      	add	r7, sp, #0
 8010216:	60f8      	str	r0, [r7, #12]
 8010218:	60b9      	str	r1, [r7, #8]
 801021a:	4613      	mov	r3, r2
 801021c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010224:	2b20      	cmp	r3, #32
 8010226:	d168      	bne.n	80102fa <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d002      	beq.n	8010234 <HAL_UART_Transmit_DMA+0x24>
 801022e:	88fb      	ldrh	r3, [r7, #6]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d101      	bne.n	8010238 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010234:	2301      	movs	r3, #1
 8010236:	e061      	b.n	80102fc <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801023e:	2b01      	cmp	r3, #1
 8010240:	d101      	bne.n	8010246 <HAL_UART_Transmit_DMA+0x36>
 8010242:	2302      	movs	r3, #2
 8010244:	e05a      	b.n	80102fc <HAL_UART_Transmit_DMA+0xec>
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2201      	movs	r2, #1
 801024a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	68ba      	ldr	r2, [r7, #8]
 8010252:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	88fa      	ldrh	r2, [r7, #6]
 8010258:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	88fa      	ldrh	r2, [r7, #6]
 8010260:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2200      	movs	r2, #0
 8010268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	2221      	movs	r2, #33	; 0x21
 8010270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010278:	2b00      	cmp	r3, #0
 801027a:	d02c      	beq.n	80102d6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010280:	4a20      	ldr	r2, [pc, #128]	; (8010304 <HAL_UART_Transmit_DMA+0xf4>)
 8010282:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010288:	4a1f      	ldr	r2, [pc, #124]	; (8010308 <HAL_UART_Transmit_DMA+0xf8>)
 801028a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010290:	4a1e      	ldr	r2, [pc, #120]	; (801030c <HAL_UART_Transmit_DMA+0xfc>)
 8010292:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010298:	2200      	movs	r2, #0
 801029a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102a4:	4619      	mov	r1, r3
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	3328      	adds	r3, #40	; 0x28
 80102ac:	461a      	mov	r2, r3
 80102ae:	88fb      	ldrh	r3, [r7, #6]
 80102b0:	f7f6 f9c0 	bl	8006634 <HAL_DMA_Start_IT>
 80102b4:	4603      	mov	r3, r0
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d00d      	beq.n	80102d6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	2210      	movs	r2, #16
 80102be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	2200      	movs	r2, #0
 80102c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	2220      	movs	r2, #32
 80102ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80102d2:	2301      	movs	r3, #1
 80102d4:	e012      	b.n	80102fc <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	2240      	movs	r2, #64	; 0x40
 80102dc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	2200      	movs	r2, #0
 80102e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	689a      	ldr	r2, [r3, #8]
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80102f4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80102f6:	2300      	movs	r3, #0
 80102f8:	e000      	b.n	80102fc <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80102fa:	2302      	movs	r3, #2
  }
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3710      	adds	r7, #16
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}
 8010304:	08011891 	.word	0x08011891
 8010308:	080118e1 	.word	0x080118e1
 801030c:	080119cb 	.word	0x080119cb

08010310 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b084      	sub	sp, #16
 8010314:	af00      	add	r7, sp, #0
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	60b9      	str	r1, [r7, #8]
 801031a:	4613      	mov	r3, r2
 801031c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010324:	2b20      	cmp	r3, #32
 8010326:	d131      	bne.n	801038c <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d002      	beq.n	8010334 <HAL_UART_Receive_DMA+0x24>
 801032e:	88fb      	ldrh	r3, [r7, #6]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d101      	bne.n	8010338 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010334:	2301      	movs	r3, #1
 8010336:	e02a      	b.n	801038e <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801033e:	2b01      	cmp	r3, #1
 8010340:	d101      	bne.n	8010346 <HAL_UART_Receive_DMA+0x36>
 8010342:	2302      	movs	r3, #2
 8010344:	e023      	b.n	801038e <HAL_UART_Receive_DMA+0x7e>
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2201      	movs	r2, #1
 801034a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2200      	movs	r2, #0
 8010352:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	4a0f      	ldr	r2, [pc, #60]	; (8010398 <HAL_UART_Receive_DMA+0x88>)
 801035a:	4293      	cmp	r3, r2
 801035c:	d00e      	beq.n	801037c <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010368:	2b00      	cmp	r3, #0
 801036a:	d007      	beq.n	801037c <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	681a      	ldr	r2, [r3, #0]
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801037a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801037c:	88fb      	ldrh	r3, [r7, #6]
 801037e:	461a      	mov	r2, r3
 8010380:	68b9      	ldr	r1, [r7, #8]
 8010382:	68f8      	ldr	r0, [r7, #12]
 8010384:	f001 f9c6 	bl	8011714 <UART_Start_Receive_DMA>
 8010388:	4603      	mov	r3, r0
 801038a:	e000      	b.n	801038e <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 801038c:	2302      	movs	r3, #2
  }
}
 801038e:	4618      	mov	r0, r3
 8010390:	3710      	adds	r7, #16
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}
 8010396:	bf00      	nop
 8010398:	58000c00 	.word	0x58000c00

0801039c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b088      	sub	sp, #32
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	69db      	ldr	r3, [r3, #28]
 80103aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	689b      	ldr	r3, [r3, #8]
 80103ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80103bc:	69fa      	ldr	r2, [r7, #28]
 80103be:	f640 030f 	movw	r3, #2063	; 0x80f
 80103c2:	4013      	ands	r3, r2
 80103c4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d118      	bne.n	80103fe <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80103cc:	69fb      	ldr	r3, [r7, #28]
 80103ce:	f003 0320 	and.w	r3, r3, #32
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d013      	beq.n	80103fe <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80103d6:	69bb      	ldr	r3, [r7, #24]
 80103d8:	f003 0320 	and.w	r3, r3, #32
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d104      	bne.n	80103ea <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d009      	beq.n	80103fe <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	f000 8282 	beq.w	80108f8 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	4798      	blx	r3
      }
      return;
 80103fc:	e27c      	b.n	80108f8 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	2b00      	cmp	r3, #0
 8010402:	f000 80ef 	beq.w	80105e4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010406:	697a      	ldr	r2, [r7, #20]
 8010408:	4b73      	ldr	r3, [pc, #460]	; (80105d8 <HAL_UART_IRQHandler+0x23c>)
 801040a:	4013      	ands	r3, r2
 801040c:	2b00      	cmp	r3, #0
 801040e:	d105      	bne.n	801041c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010410:	69ba      	ldr	r2, [r7, #24]
 8010412:	4b72      	ldr	r3, [pc, #456]	; (80105dc <HAL_UART_IRQHandler+0x240>)
 8010414:	4013      	ands	r3, r2
 8010416:	2b00      	cmp	r3, #0
 8010418:	f000 80e4 	beq.w	80105e4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	f003 0301 	and.w	r3, r3, #1
 8010422:	2b00      	cmp	r3, #0
 8010424:	d010      	beq.n	8010448 <HAL_UART_IRQHandler+0xac>
 8010426:	69bb      	ldr	r3, [r7, #24]
 8010428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801042c:	2b00      	cmp	r3, #0
 801042e:	d00b      	beq.n	8010448 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	2201      	movs	r2, #1
 8010436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801043e:	f043 0201 	orr.w	r2, r3, #1
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	f003 0302 	and.w	r3, r3, #2
 801044e:	2b00      	cmp	r3, #0
 8010450:	d010      	beq.n	8010474 <HAL_UART_IRQHandler+0xd8>
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	f003 0301 	and.w	r3, r3, #1
 8010458:	2b00      	cmp	r3, #0
 801045a:	d00b      	beq.n	8010474 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	2202      	movs	r2, #2
 8010462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801046a:	f043 0204 	orr.w	r2, r3, #4
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	f003 0304 	and.w	r3, r3, #4
 801047a:	2b00      	cmp	r3, #0
 801047c:	d010      	beq.n	80104a0 <HAL_UART_IRQHandler+0x104>
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	f003 0301 	and.w	r3, r3, #1
 8010484:	2b00      	cmp	r3, #0
 8010486:	d00b      	beq.n	80104a0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	2204      	movs	r2, #4
 801048e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010496:	f043 0202 	orr.w	r2, r3, #2
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	f003 0308 	and.w	r3, r3, #8
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d015      	beq.n	80104d6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80104aa:	69bb      	ldr	r3, [r7, #24]
 80104ac:	f003 0320 	and.w	r3, r3, #32
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d104      	bne.n	80104be <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80104b4:	697a      	ldr	r2, [r7, #20]
 80104b6:	4b48      	ldr	r3, [pc, #288]	; (80105d8 <HAL_UART_IRQHandler+0x23c>)
 80104b8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d00b      	beq.n	80104d6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	2208      	movs	r2, #8
 80104c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80104cc:	f043 0208 	orr.w	r2, r3, #8
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80104d6:	69fb      	ldr	r3, [r7, #28]
 80104d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d011      	beq.n	8010504 <HAL_UART_IRQHandler+0x168>
 80104e0:	69bb      	ldr	r3, [r7, #24]
 80104e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d00c      	beq.n	8010504 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80104f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80104fa:	f043 0220 	orr.w	r2, r3, #32
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801050a:	2b00      	cmp	r3, #0
 801050c:	f000 81f6 	beq.w	80108fc <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	f003 0320 	and.w	r3, r3, #32
 8010516:	2b00      	cmp	r3, #0
 8010518:	d011      	beq.n	801053e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801051a:	69bb      	ldr	r3, [r7, #24]
 801051c:	f003 0320 	and.w	r3, r3, #32
 8010520:	2b00      	cmp	r3, #0
 8010522:	d104      	bne.n	801052e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801052a:	2b00      	cmp	r3, #0
 801052c:	d007      	beq.n	801053e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010532:	2b00      	cmp	r3, #0
 8010534:	d003      	beq.n	801053e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010544:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	689b      	ldr	r3, [r3, #8]
 801054c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010550:	2b40      	cmp	r3, #64	; 0x40
 8010552:	d004      	beq.n	801055e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801055a:	2b00      	cmp	r3, #0
 801055c:	d031      	beq.n	80105c2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f001 f964 	bl	801182c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	689b      	ldr	r3, [r3, #8]
 801056a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801056e:	2b40      	cmp	r3, #64	; 0x40
 8010570:	d123      	bne.n	80105ba <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	689a      	ldr	r2, [r3, #8]
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010580:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010586:	2b00      	cmp	r3, #0
 8010588:	d013      	beq.n	80105b2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801058e:	4a14      	ldr	r2, [pc, #80]	; (80105e0 <HAL_UART_IRQHandler+0x244>)
 8010590:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010596:	4618      	mov	r0, r3
 8010598:	f7f6 fdd4 	bl	8007144 <HAL_DMA_Abort_IT>
 801059c:	4603      	mov	r3, r0
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d017      	beq.n	80105d2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105a8:	687a      	ldr	r2, [r7, #4]
 80105aa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80105ac:	4610      	mov	r0, r2
 80105ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105b0:	e00f      	b.n	80105d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f000 f9ca 	bl	801094c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105b8:	e00b      	b.n	80105d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f000 f9c6 	bl	801094c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105c0:	e007      	b.n	80105d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f000 f9c2 	bl	801094c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2200      	movs	r2, #0
 80105cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80105d0:	e194      	b.n	80108fc <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105d2:	bf00      	nop
    return;
 80105d4:	e192      	b.n	80108fc <HAL_UART_IRQHandler+0x560>
 80105d6:	bf00      	nop
 80105d8:	10000001 	.word	0x10000001
 80105dc:	04000120 	.word	0x04000120
 80105e0:	08011a4b 	.word	0x08011a4b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	f040 810f 	bne.w	801080c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80105ee:	69fb      	ldr	r3, [r7, #28]
 80105f0:	f003 0310 	and.w	r3, r3, #16
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	f000 8109 	beq.w	801080c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80105fa:	69bb      	ldr	r3, [r7, #24]
 80105fc:	f003 0310 	and.w	r3, r3, #16
 8010600:	2b00      	cmp	r3, #0
 8010602:	f000 8103 	beq.w	801080c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	2210      	movs	r2, #16
 801060c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	689b      	ldr	r3, [r3, #8]
 8010614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010618:	2b40      	cmp	r3, #64	; 0x40
 801061a:	f040 80bb 	bne.w	8010794 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4a96      	ldr	r2, [pc, #600]	; (8010880 <HAL_UART_IRQHandler+0x4e4>)
 8010626:	4293      	cmp	r3, r2
 8010628:	d059      	beq.n	80106de <HAL_UART_IRQHandler+0x342>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	4a94      	ldr	r2, [pc, #592]	; (8010884 <HAL_UART_IRQHandler+0x4e8>)
 8010632:	4293      	cmp	r3, r2
 8010634:	d053      	beq.n	80106de <HAL_UART_IRQHandler+0x342>
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	4a92      	ldr	r2, [pc, #584]	; (8010888 <HAL_UART_IRQHandler+0x4ec>)
 801063e:	4293      	cmp	r3, r2
 8010640:	d04d      	beq.n	80106de <HAL_UART_IRQHandler+0x342>
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	4a90      	ldr	r2, [pc, #576]	; (801088c <HAL_UART_IRQHandler+0x4f0>)
 801064a:	4293      	cmp	r3, r2
 801064c:	d047      	beq.n	80106de <HAL_UART_IRQHandler+0x342>
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	4a8e      	ldr	r2, [pc, #568]	; (8010890 <HAL_UART_IRQHandler+0x4f4>)
 8010656:	4293      	cmp	r3, r2
 8010658:	d041      	beq.n	80106de <HAL_UART_IRQHandler+0x342>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4a8c      	ldr	r2, [pc, #560]	; (8010894 <HAL_UART_IRQHandler+0x4f8>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d03b      	beq.n	80106de <HAL_UART_IRQHandler+0x342>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	4a8a      	ldr	r2, [pc, #552]	; (8010898 <HAL_UART_IRQHandler+0x4fc>)
 801066e:	4293      	cmp	r3, r2
 8010670:	d035      	beq.n	80106de <HAL_UART_IRQHandler+0x342>
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	4a88      	ldr	r2, [pc, #544]	; (801089c <HAL_UART_IRQHandler+0x500>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d02f      	beq.n	80106de <HAL_UART_IRQHandler+0x342>
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4a86      	ldr	r2, [pc, #536]	; (80108a0 <HAL_UART_IRQHandler+0x504>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d029      	beq.n	80106de <HAL_UART_IRQHandler+0x342>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	4a84      	ldr	r2, [pc, #528]	; (80108a4 <HAL_UART_IRQHandler+0x508>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d023      	beq.n	80106de <HAL_UART_IRQHandler+0x342>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4a82      	ldr	r2, [pc, #520]	; (80108a8 <HAL_UART_IRQHandler+0x50c>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d01d      	beq.n	80106de <HAL_UART_IRQHandler+0x342>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	4a80      	ldr	r2, [pc, #512]	; (80108ac <HAL_UART_IRQHandler+0x510>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d017      	beq.n	80106de <HAL_UART_IRQHandler+0x342>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	4a7e      	ldr	r2, [pc, #504]	; (80108b0 <HAL_UART_IRQHandler+0x514>)
 80106b6:	4293      	cmp	r3, r2
 80106b8:	d011      	beq.n	80106de <HAL_UART_IRQHandler+0x342>
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	4a7c      	ldr	r2, [pc, #496]	; (80108b4 <HAL_UART_IRQHandler+0x518>)
 80106c2:	4293      	cmp	r3, r2
 80106c4:	d00b      	beq.n	80106de <HAL_UART_IRQHandler+0x342>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	4a7a      	ldr	r2, [pc, #488]	; (80108b8 <HAL_UART_IRQHandler+0x51c>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d005      	beq.n	80106de <HAL_UART_IRQHandler+0x342>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	4a78      	ldr	r2, [pc, #480]	; (80108bc <HAL_UART_IRQHandler+0x520>)
 80106da:	4293      	cmp	r3, r2
 80106dc:	d105      	bne.n	80106ea <HAL_UART_IRQHandler+0x34e>
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	685b      	ldr	r3, [r3, #4]
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	e004      	b.n	80106f4 <HAL_UART_IRQHandler+0x358>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	685b      	ldr	r3, [r3, #4]
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80106f6:	893b      	ldrh	r3, [r7, #8]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f000 8101 	beq.w	8010900 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010704:	893a      	ldrh	r2, [r7, #8]
 8010706:	429a      	cmp	r2, r3
 8010708:	f080 80fa 	bcs.w	8010900 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	893a      	ldrh	r2, [r7, #8]
 8010710:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010718:	69db      	ldr	r3, [r3, #28]
 801071a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801071e:	d02b      	beq.n	8010778 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	681a      	ldr	r2, [r3, #0]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801072e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	689a      	ldr	r2, [r3, #8]
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	f022 0201 	bic.w	r2, r2, #1
 801073e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	689a      	ldr	r2, [r3, #8]
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801074e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2220      	movs	r2, #32
 8010754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2200      	movs	r2, #0
 801075c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	681a      	ldr	r2, [r3, #0]
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	f022 0210 	bic.w	r2, r2, #16
 801076c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010772:	4618      	mov	r0, r3
 8010774:	f7f6 f9c8 	bl	8006b08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010784:	b29b      	uxth	r3, r3
 8010786:	1ad3      	subs	r3, r2, r3
 8010788:	b29b      	uxth	r3, r3
 801078a:	4619      	mov	r1, r3
 801078c:	6878      	ldr	r0, [r7, #4]
 801078e:	f000 f8e7 	bl	8010960 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010792:	e0b5      	b.n	8010900 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	1ad3      	subs	r3, r2, r3
 80107a4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80107ac:	b29b      	uxth	r3, r3
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	f000 80a8 	beq.w	8010904 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80107b4:	897b      	ldrh	r3, [r7, #10]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	f000 80a4 	beq.w	8010904 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	681a      	ldr	r2, [r3, #0]
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80107ca:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	6899      	ldr	r1, [r3, #8]
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681a      	ldr	r2, [r3, #0]
 80107d6:	4b3a      	ldr	r3, [pc, #232]	; (80108c0 <HAL_UART_IRQHandler+0x524>)
 80107d8:	400b      	ands	r3, r1
 80107da:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2220      	movs	r2, #32
 80107e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2200      	movs	r2, #0
 80107e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2200      	movs	r2, #0
 80107ee:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	681a      	ldr	r2, [r3, #0]
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	f022 0210 	bic.w	r2, r2, #16
 80107fe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010800:	897b      	ldrh	r3, [r7, #10]
 8010802:	4619      	mov	r1, r3
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f000 f8ab 	bl	8010960 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801080a:	e07b      	b.n	8010904 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801080c:	69fb      	ldr	r3, [r7, #28]
 801080e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010812:	2b00      	cmp	r3, #0
 8010814:	d00d      	beq.n	8010832 <HAL_UART_IRQHandler+0x496>
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801081c:	2b00      	cmp	r3, #0
 801081e:	d008      	beq.n	8010832 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010828:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f001 f93d 	bl	8011aaa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010830:	e06b      	b.n	801090a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010832:	69fb      	ldr	r3, [r7, #28]
 8010834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010838:	2b00      	cmp	r3, #0
 801083a:	d012      	beq.n	8010862 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801083c:	69bb      	ldr	r3, [r7, #24]
 801083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010842:	2b00      	cmp	r3, #0
 8010844:	d104      	bne.n	8010850 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801084c:	2b00      	cmp	r3, #0
 801084e:	d008      	beq.n	8010862 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010854:	2b00      	cmp	r3, #0
 8010856:	d057      	beq.n	8010908 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	4798      	blx	r3
    }
    return;
 8010860:	e052      	b.n	8010908 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010862:	69fb      	ldr	r3, [r7, #28]
 8010864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010868:	2b00      	cmp	r3, #0
 801086a:	d02b      	beq.n	80108c4 <HAL_UART_IRQHandler+0x528>
 801086c:	69bb      	ldr	r3, [r7, #24]
 801086e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010872:	2b00      	cmp	r3, #0
 8010874:	d026      	beq.n	80108c4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	f001 f8fd 	bl	8011a76 <UART_EndTransmit_IT>
    return;
 801087c:	e045      	b.n	801090a <HAL_UART_IRQHandler+0x56e>
 801087e:	bf00      	nop
 8010880:	40020010 	.word	0x40020010
 8010884:	40020028 	.word	0x40020028
 8010888:	40020040 	.word	0x40020040
 801088c:	40020058 	.word	0x40020058
 8010890:	40020070 	.word	0x40020070
 8010894:	40020088 	.word	0x40020088
 8010898:	400200a0 	.word	0x400200a0
 801089c:	400200b8 	.word	0x400200b8
 80108a0:	40020410 	.word	0x40020410
 80108a4:	40020428 	.word	0x40020428
 80108a8:	40020440 	.word	0x40020440
 80108ac:	40020458 	.word	0x40020458
 80108b0:	40020470 	.word	0x40020470
 80108b4:	40020488 	.word	0x40020488
 80108b8:	400204a0 	.word	0x400204a0
 80108bc:	400204b8 	.word	0x400204b8
 80108c0:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80108c4:	69fb      	ldr	r3, [r7, #28]
 80108c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d008      	beq.n	80108e0 <HAL_UART_IRQHandler+0x544>
 80108ce:	69bb      	ldr	r3, [r7, #24]
 80108d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d003      	beq.n	80108e0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f001 f8fa 	bl	8011ad2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80108de:	e014      	b.n	801090a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80108e0:	69fb      	ldr	r3, [r7, #28]
 80108e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d00f      	beq.n	801090a <HAL_UART_IRQHandler+0x56e>
 80108ea:	69bb      	ldr	r3, [r7, #24]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	da0c      	bge.n	801090a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f001 f8e4 	bl	8011abe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80108f6:	e008      	b.n	801090a <HAL_UART_IRQHandler+0x56e>
      return;
 80108f8:	bf00      	nop
 80108fa:	e006      	b.n	801090a <HAL_UART_IRQHandler+0x56e>
    return;
 80108fc:	bf00      	nop
 80108fe:	e004      	b.n	801090a <HAL_UART_IRQHandler+0x56e>
      return;
 8010900:	bf00      	nop
 8010902:	e002      	b.n	801090a <HAL_UART_IRQHandler+0x56e>
      return;
 8010904:	bf00      	nop
 8010906:	e000      	b.n	801090a <HAL_UART_IRQHandler+0x56e>
    return;
 8010908:	bf00      	nop
  }
}
 801090a:	3720      	adds	r7, #32
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}

08010910 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010910:	b480      	push	{r7}
 8010912:	b083      	sub	sp, #12
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010918:	bf00      	nop
 801091a:	370c      	adds	r7, #12
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010924:	b480      	push	{r7}
 8010926:	b083      	sub	sp, #12
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801092c:	bf00      	nop
 801092e:	370c      	adds	r7, #12
 8010930:	46bd      	mov	sp, r7
 8010932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010936:	4770      	bx	lr

08010938 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010938:	b480      	push	{r7}
 801093a:	b083      	sub	sp, #12
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010940:	bf00      	nop
 8010942:	370c      	adds	r7, #12
 8010944:	46bd      	mov	sp, r7
 8010946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094a:	4770      	bx	lr

0801094c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801094c:	b480      	push	{r7}
 801094e:	b083      	sub	sp, #12
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010954:	bf00      	nop
 8010956:	370c      	adds	r7, #12
 8010958:	46bd      	mov	sp, r7
 801095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095e:	4770      	bx	lr

08010960 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010960:	b480      	push	{r7}
 8010962:	b083      	sub	sp, #12
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	460b      	mov	r3, r1
 801096a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801096c:	bf00      	nop
 801096e:	370c      	adds	r7, #12
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr

08010978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010978:	b5b0      	push	{r4, r5, r7, lr}
 801097a:	b08e      	sub	sp, #56	; 0x38
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010980:	2300      	movs	r3, #0
 8010982:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	689a      	ldr	r2, [r3, #8]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	691b      	ldr	r3, [r3, #16]
 801098e:	431a      	orrs	r2, r3
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	695b      	ldr	r3, [r3, #20]
 8010994:	431a      	orrs	r2, r3
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	69db      	ldr	r3, [r3, #28]
 801099a:	4313      	orrs	r3, r2
 801099c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	681a      	ldr	r2, [r3, #0]
 80109a4:	4bbf      	ldr	r3, [pc, #764]	; (8010ca4 <UART_SetConfig+0x32c>)
 80109a6:	4013      	ands	r3, r2
 80109a8:	687a      	ldr	r2, [r7, #4]
 80109aa:	6812      	ldr	r2, [r2, #0]
 80109ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80109ae:	430b      	orrs	r3, r1
 80109b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	685b      	ldr	r3, [r3, #4]
 80109b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	68da      	ldr	r2, [r3, #12]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	430a      	orrs	r2, r1
 80109c6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	699b      	ldr	r3, [r3, #24]
 80109cc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	4ab5      	ldr	r2, [pc, #724]	; (8010ca8 <UART_SetConfig+0x330>)
 80109d4:	4293      	cmp	r3, r2
 80109d6:	d004      	beq.n	80109e2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6a1b      	ldr	r3, [r3, #32]
 80109dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109de:	4313      	orrs	r3, r2
 80109e0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	689a      	ldr	r2, [r3, #8]
 80109e8:	4bb0      	ldr	r3, [pc, #704]	; (8010cac <UART_SetConfig+0x334>)
 80109ea:	4013      	ands	r3, r2
 80109ec:	687a      	ldr	r2, [r7, #4]
 80109ee:	6812      	ldr	r2, [r2, #0]
 80109f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80109f2:	430b      	orrs	r3, r1
 80109f4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109fc:	f023 010f 	bic.w	r1, r3, #15
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	430a      	orrs	r2, r1
 8010a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	4aa7      	ldr	r2, [pc, #668]	; (8010cb0 <UART_SetConfig+0x338>)
 8010a12:	4293      	cmp	r3, r2
 8010a14:	d176      	bne.n	8010b04 <UART_SetConfig+0x18c>
 8010a16:	4ba7      	ldr	r3, [pc, #668]	; (8010cb4 <UART_SetConfig+0x33c>)
 8010a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010a1e:	2b28      	cmp	r3, #40	; 0x28
 8010a20:	d86c      	bhi.n	8010afc <UART_SetConfig+0x184>
 8010a22:	a201      	add	r2, pc, #4	; (adr r2, 8010a28 <UART_SetConfig+0xb0>)
 8010a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a28:	08010acd 	.word	0x08010acd
 8010a2c:	08010afd 	.word	0x08010afd
 8010a30:	08010afd 	.word	0x08010afd
 8010a34:	08010afd 	.word	0x08010afd
 8010a38:	08010afd 	.word	0x08010afd
 8010a3c:	08010afd 	.word	0x08010afd
 8010a40:	08010afd 	.word	0x08010afd
 8010a44:	08010afd 	.word	0x08010afd
 8010a48:	08010ad5 	.word	0x08010ad5
 8010a4c:	08010afd 	.word	0x08010afd
 8010a50:	08010afd 	.word	0x08010afd
 8010a54:	08010afd 	.word	0x08010afd
 8010a58:	08010afd 	.word	0x08010afd
 8010a5c:	08010afd 	.word	0x08010afd
 8010a60:	08010afd 	.word	0x08010afd
 8010a64:	08010afd 	.word	0x08010afd
 8010a68:	08010add 	.word	0x08010add
 8010a6c:	08010afd 	.word	0x08010afd
 8010a70:	08010afd 	.word	0x08010afd
 8010a74:	08010afd 	.word	0x08010afd
 8010a78:	08010afd 	.word	0x08010afd
 8010a7c:	08010afd 	.word	0x08010afd
 8010a80:	08010afd 	.word	0x08010afd
 8010a84:	08010afd 	.word	0x08010afd
 8010a88:	08010ae5 	.word	0x08010ae5
 8010a8c:	08010afd 	.word	0x08010afd
 8010a90:	08010afd 	.word	0x08010afd
 8010a94:	08010afd 	.word	0x08010afd
 8010a98:	08010afd 	.word	0x08010afd
 8010a9c:	08010afd 	.word	0x08010afd
 8010aa0:	08010afd 	.word	0x08010afd
 8010aa4:	08010afd 	.word	0x08010afd
 8010aa8:	08010aed 	.word	0x08010aed
 8010aac:	08010afd 	.word	0x08010afd
 8010ab0:	08010afd 	.word	0x08010afd
 8010ab4:	08010afd 	.word	0x08010afd
 8010ab8:	08010afd 	.word	0x08010afd
 8010abc:	08010afd 	.word	0x08010afd
 8010ac0:	08010afd 	.word	0x08010afd
 8010ac4:	08010afd 	.word	0x08010afd
 8010ac8:	08010af5 	.word	0x08010af5
 8010acc:	2301      	movs	r3, #1
 8010ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ad2:	e222      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010ad4:	2304      	movs	r3, #4
 8010ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ada:	e21e      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010adc:	2308      	movs	r3, #8
 8010ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ae2:	e21a      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010ae4:	2310      	movs	r3, #16
 8010ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010aea:	e216      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010aec:	2320      	movs	r3, #32
 8010aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010af2:	e212      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010af4:	2340      	movs	r3, #64	; 0x40
 8010af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010afa:	e20e      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010afc:	2380      	movs	r3, #128	; 0x80
 8010afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b02:	e20a      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	4a6b      	ldr	r2, [pc, #428]	; (8010cb8 <UART_SetConfig+0x340>)
 8010b0a:	4293      	cmp	r3, r2
 8010b0c:	d130      	bne.n	8010b70 <UART_SetConfig+0x1f8>
 8010b0e:	4b69      	ldr	r3, [pc, #420]	; (8010cb4 <UART_SetConfig+0x33c>)
 8010b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b12:	f003 0307 	and.w	r3, r3, #7
 8010b16:	2b05      	cmp	r3, #5
 8010b18:	d826      	bhi.n	8010b68 <UART_SetConfig+0x1f0>
 8010b1a:	a201      	add	r2, pc, #4	; (adr r2, 8010b20 <UART_SetConfig+0x1a8>)
 8010b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b20:	08010b39 	.word	0x08010b39
 8010b24:	08010b41 	.word	0x08010b41
 8010b28:	08010b49 	.word	0x08010b49
 8010b2c:	08010b51 	.word	0x08010b51
 8010b30:	08010b59 	.word	0x08010b59
 8010b34:	08010b61 	.word	0x08010b61
 8010b38:	2300      	movs	r3, #0
 8010b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b3e:	e1ec      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010b40:	2304      	movs	r3, #4
 8010b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b46:	e1e8      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010b48:	2308      	movs	r3, #8
 8010b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b4e:	e1e4      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010b50:	2310      	movs	r3, #16
 8010b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b56:	e1e0      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010b58:	2320      	movs	r3, #32
 8010b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b5e:	e1dc      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010b60:	2340      	movs	r3, #64	; 0x40
 8010b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b66:	e1d8      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010b68:	2380      	movs	r3, #128	; 0x80
 8010b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b6e:	e1d4      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	4a51      	ldr	r2, [pc, #324]	; (8010cbc <UART_SetConfig+0x344>)
 8010b76:	4293      	cmp	r3, r2
 8010b78:	d130      	bne.n	8010bdc <UART_SetConfig+0x264>
 8010b7a:	4b4e      	ldr	r3, [pc, #312]	; (8010cb4 <UART_SetConfig+0x33c>)
 8010b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b7e:	f003 0307 	and.w	r3, r3, #7
 8010b82:	2b05      	cmp	r3, #5
 8010b84:	d826      	bhi.n	8010bd4 <UART_SetConfig+0x25c>
 8010b86:	a201      	add	r2, pc, #4	; (adr r2, 8010b8c <UART_SetConfig+0x214>)
 8010b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b8c:	08010ba5 	.word	0x08010ba5
 8010b90:	08010bad 	.word	0x08010bad
 8010b94:	08010bb5 	.word	0x08010bb5
 8010b98:	08010bbd 	.word	0x08010bbd
 8010b9c:	08010bc5 	.word	0x08010bc5
 8010ba0:	08010bcd 	.word	0x08010bcd
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010baa:	e1b6      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010bac:	2304      	movs	r3, #4
 8010bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bb2:	e1b2      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010bb4:	2308      	movs	r3, #8
 8010bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bba:	e1ae      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010bbc:	2310      	movs	r3, #16
 8010bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bc2:	e1aa      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010bc4:	2320      	movs	r3, #32
 8010bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bca:	e1a6      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010bcc:	2340      	movs	r3, #64	; 0x40
 8010bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bd2:	e1a2      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010bd4:	2380      	movs	r3, #128	; 0x80
 8010bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bda:	e19e      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	4a37      	ldr	r2, [pc, #220]	; (8010cc0 <UART_SetConfig+0x348>)
 8010be2:	4293      	cmp	r3, r2
 8010be4:	d130      	bne.n	8010c48 <UART_SetConfig+0x2d0>
 8010be6:	4b33      	ldr	r3, [pc, #204]	; (8010cb4 <UART_SetConfig+0x33c>)
 8010be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bea:	f003 0307 	and.w	r3, r3, #7
 8010bee:	2b05      	cmp	r3, #5
 8010bf0:	d826      	bhi.n	8010c40 <UART_SetConfig+0x2c8>
 8010bf2:	a201      	add	r2, pc, #4	; (adr r2, 8010bf8 <UART_SetConfig+0x280>)
 8010bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bf8:	08010c11 	.word	0x08010c11
 8010bfc:	08010c19 	.word	0x08010c19
 8010c00:	08010c21 	.word	0x08010c21
 8010c04:	08010c29 	.word	0x08010c29
 8010c08:	08010c31 	.word	0x08010c31
 8010c0c:	08010c39 	.word	0x08010c39
 8010c10:	2300      	movs	r3, #0
 8010c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c16:	e180      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010c18:	2304      	movs	r3, #4
 8010c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c1e:	e17c      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010c20:	2308      	movs	r3, #8
 8010c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c26:	e178      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010c28:	2310      	movs	r3, #16
 8010c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c2e:	e174      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010c30:	2320      	movs	r3, #32
 8010c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c36:	e170      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010c38:	2340      	movs	r3, #64	; 0x40
 8010c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c3e:	e16c      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010c40:	2380      	movs	r3, #128	; 0x80
 8010c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c46:	e168      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	4a1d      	ldr	r2, [pc, #116]	; (8010cc4 <UART_SetConfig+0x34c>)
 8010c4e:	4293      	cmp	r3, r2
 8010c50:	d142      	bne.n	8010cd8 <UART_SetConfig+0x360>
 8010c52:	4b18      	ldr	r3, [pc, #96]	; (8010cb4 <UART_SetConfig+0x33c>)
 8010c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c56:	f003 0307 	and.w	r3, r3, #7
 8010c5a:	2b05      	cmp	r3, #5
 8010c5c:	d838      	bhi.n	8010cd0 <UART_SetConfig+0x358>
 8010c5e:	a201      	add	r2, pc, #4	; (adr r2, 8010c64 <UART_SetConfig+0x2ec>)
 8010c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c64:	08010c7d 	.word	0x08010c7d
 8010c68:	08010c85 	.word	0x08010c85
 8010c6c:	08010c8d 	.word	0x08010c8d
 8010c70:	08010c95 	.word	0x08010c95
 8010c74:	08010c9d 	.word	0x08010c9d
 8010c78:	08010cc9 	.word	0x08010cc9
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c82:	e14a      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010c84:	2304      	movs	r3, #4
 8010c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c8a:	e146      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010c8c:	2308      	movs	r3, #8
 8010c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c92:	e142      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010c94:	2310      	movs	r3, #16
 8010c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c9a:	e13e      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010c9c:	2320      	movs	r3, #32
 8010c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ca2:	e13a      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010ca4:	cfff69f3 	.word	0xcfff69f3
 8010ca8:	58000c00 	.word	0x58000c00
 8010cac:	11fff4ff 	.word	0x11fff4ff
 8010cb0:	40011000 	.word	0x40011000
 8010cb4:	58024400 	.word	0x58024400
 8010cb8:	40004400 	.word	0x40004400
 8010cbc:	40004800 	.word	0x40004800
 8010cc0:	40004c00 	.word	0x40004c00
 8010cc4:	40005000 	.word	0x40005000
 8010cc8:	2340      	movs	r3, #64	; 0x40
 8010cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010cce:	e124      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010cd0:	2380      	movs	r3, #128	; 0x80
 8010cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010cd6:	e120      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	4acc      	ldr	r2, [pc, #816]	; (8011010 <UART_SetConfig+0x698>)
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d176      	bne.n	8010dd0 <UART_SetConfig+0x458>
 8010ce2:	4bcc      	ldr	r3, [pc, #816]	; (8011014 <UART_SetConfig+0x69c>)
 8010ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010cea:	2b28      	cmp	r3, #40	; 0x28
 8010cec:	d86c      	bhi.n	8010dc8 <UART_SetConfig+0x450>
 8010cee:	a201      	add	r2, pc, #4	; (adr r2, 8010cf4 <UART_SetConfig+0x37c>)
 8010cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cf4:	08010d99 	.word	0x08010d99
 8010cf8:	08010dc9 	.word	0x08010dc9
 8010cfc:	08010dc9 	.word	0x08010dc9
 8010d00:	08010dc9 	.word	0x08010dc9
 8010d04:	08010dc9 	.word	0x08010dc9
 8010d08:	08010dc9 	.word	0x08010dc9
 8010d0c:	08010dc9 	.word	0x08010dc9
 8010d10:	08010dc9 	.word	0x08010dc9
 8010d14:	08010da1 	.word	0x08010da1
 8010d18:	08010dc9 	.word	0x08010dc9
 8010d1c:	08010dc9 	.word	0x08010dc9
 8010d20:	08010dc9 	.word	0x08010dc9
 8010d24:	08010dc9 	.word	0x08010dc9
 8010d28:	08010dc9 	.word	0x08010dc9
 8010d2c:	08010dc9 	.word	0x08010dc9
 8010d30:	08010dc9 	.word	0x08010dc9
 8010d34:	08010da9 	.word	0x08010da9
 8010d38:	08010dc9 	.word	0x08010dc9
 8010d3c:	08010dc9 	.word	0x08010dc9
 8010d40:	08010dc9 	.word	0x08010dc9
 8010d44:	08010dc9 	.word	0x08010dc9
 8010d48:	08010dc9 	.word	0x08010dc9
 8010d4c:	08010dc9 	.word	0x08010dc9
 8010d50:	08010dc9 	.word	0x08010dc9
 8010d54:	08010db1 	.word	0x08010db1
 8010d58:	08010dc9 	.word	0x08010dc9
 8010d5c:	08010dc9 	.word	0x08010dc9
 8010d60:	08010dc9 	.word	0x08010dc9
 8010d64:	08010dc9 	.word	0x08010dc9
 8010d68:	08010dc9 	.word	0x08010dc9
 8010d6c:	08010dc9 	.word	0x08010dc9
 8010d70:	08010dc9 	.word	0x08010dc9
 8010d74:	08010db9 	.word	0x08010db9
 8010d78:	08010dc9 	.word	0x08010dc9
 8010d7c:	08010dc9 	.word	0x08010dc9
 8010d80:	08010dc9 	.word	0x08010dc9
 8010d84:	08010dc9 	.word	0x08010dc9
 8010d88:	08010dc9 	.word	0x08010dc9
 8010d8c:	08010dc9 	.word	0x08010dc9
 8010d90:	08010dc9 	.word	0x08010dc9
 8010d94:	08010dc1 	.word	0x08010dc1
 8010d98:	2301      	movs	r3, #1
 8010d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d9e:	e0bc      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010da0:	2304      	movs	r3, #4
 8010da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010da6:	e0b8      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010da8:	2308      	movs	r3, #8
 8010daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010dae:	e0b4      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010db0:	2310      	movs	r3, #16
 8010db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010db6:	e0b0      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010db8:	2320      	movs	r3, #32
 8010dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010dbe:	e0ac      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010dc0:	2340      	movs	r3, #64	; 0x40
 8010dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010dc6:	e0a8      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010dc8:	2380      	movs	r3, #128	; 0x80
 8010dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010dce:	e0a4      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	4a90      	ldr	r2, [pc, #576]	; (8011018 <UART_SetConfig+0x6a0>)
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d130      	bne.n	8010e3c <UART_SetConfig+0x4c4>
 8010dda:	4b8e      	ldr	r3, [pc, #568]	; (8011014 <UART_SetConfig+0x69c>)
 8010ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dde:	f003 0307 	and.w	r3, r3, #7
 8010de2:	2b05      	cmp	r3, #5
 8010de4:	d826      	bhi.n	8010e34 <UART_SetConfig+0x4bc>
 8010de6:	a201      	add	r2, pc, #4	; (adr r2, 8010dec <UART_SetConfig+0x474>)
 8010de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dec:	08010e05 	.word	0x08010e05
 8010df0:	08010e0d 	.word	0x08010e0d
 8010df4:	08010e15 	.word	0x08010e15
 8010df8:	08010e1d 	.word	0x08010e1d
 8010dfc:	08010e25 	.word	0x08010e25
 8010e00:	08010e2d 	.word	0x08010e2d
 8010e04:	2300      	movs	r3, #0
 8010e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e0a:	e086      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010e0c:	2304      	movs	r3, #4
 8010e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e12:	e082      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010e14:	2308      	movs	r3, #8
 8010e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e1a:	e07e      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010e1c:	2310      	movs	r3, #16
 8010e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e22:	e07a      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010e24:	2320      	movs	r3, #32
 8010e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e2a:	e076      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010e2c:	2340      	movs	r3, #64	; 0x40
 8010e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e32:	e072      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010e34:	2380      	movs	r3, #128	; 0x80
 8010e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e3a:	e06e      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	4a76      	ldr	r2, [pc, #472]	; (801101c <UART_SetConfig+0x6a4>)
 8010e42:	4293      	cmp	r3, r2
 8010e44:	d130      	bne.n	8010ea8 <UART_SetConfig+0x530>
 8010e46:	4b73      	ldr	r3, [pc, #460]	; (8011014 <UART_SetConfig+0x69c>)
 8010e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e4a:	f003 0307 	and.w	r3, r3, #7
 8010e4e:	2b05      	cmp	r3, #5
 8010e50:	d826      	bhi.n	8010ea0 <UART_SetConfig+0x528>
 8010e52:	a201      	add	r2, pc, #4	; (adr r2, 8010e58 <UART_SetConfig+0x4e0>)
 8010e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e58:	08010e71 	.word	0x08010e71
 8010e5c:	08010e79 	.word	0x08010e79
 8010e60:	08010e81 	.word	0x08010e81
 8010e64:	08010e89 	.word	0x08010e89
 8010e68:	08010e91 	.word	0x08010e91
 8010e6c:	08010e99 	.word	0x08010e99
 8010e70:	2300      	movs	r3, #0
 8010e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e76:	e050      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010e78:	2304      	movs	r3, #4
 8010e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e7e:	e04c      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010e80:	2308      	movs	r3, #8
 8010e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e86:	e048      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010e88:	2310      	movs	r3, #16
 8010e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e8e:	e044      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010e90:	2320      	movs	r3, #32
 8010e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e96:	e040      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010e98:	2340      	movs	r3, #64	; 0x40
 8010e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e9e:	e03c      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010ea0:	2380      	movs	r3, #128	; 0x80
 8010ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ea6:	e038      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	4a5c      	ldr	r2, [pc, #368]	; (8011020 <UART_SetConfig+0x6a8>)
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	d130      	bne.n	8010f14 <UART_SetConfig+0x59c>
 8010eb2:	4b58      	ldr	r3, [pc, #352]	; (8011014 <UART_SetConfig+0x69c>)
 8010eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010eb6:	f003 0307 	and.w	r3, r3, #7
 8010eba:	2b05      	cmp	r3, #5
 8010ebc:	d826      	bhi.n	8010f0c <UART_SetConfig+0x594>
 8010ebe:	a201      	add	r2, pc, #4	; (adr r2, 8010ec4 <UART_SetConfig+0x54c>)
 8010ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ec4:	08010edd 	.word	0x08010edd
 8010ec8:	08010ee5 	.word	0x08010ee5
 8010ecc:	08010eed 	.word	0x08010eed
 8010ed0:	08010ef5 	.word	0x08010ef5
 8010ed4:	08010efd 	.word	0x08010efd
 8010ed8:	08010f05 	.word	0x08010f05
 8010edc:	2302      	movs	r3, #2
 8010ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ee2:	e01a      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010ee4:	2304      	movs	r3, #4
 8010ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010eea:	e016      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010eec:	2308      	movs	r3, #8
 8010eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ef2:	e012      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010ef4:	2310      	movs	r3, #16
 8010ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010efa:	e00e      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010efc:	2320      	movs	r3, #32
 8010efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010f02:	e00a      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010f04:	2340      	movs	r3, #64	; 0x40
 8010f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010f0a:	e006      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010f0c:	2380      	movs	r3, #128	; 0x80
 8010f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010f12:	e002      	b.n	8010f1a <UART_SetConfig+0x5a2>
 8010f14:	2380      	movs	r3, #128	; 0x80
 8010f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	4a40      	ldr	r2, [pc, #256]	; (8011020 <UART_SetConfig+0x6a8>)
 8010f20:	4293      	cmp	r3, r2
 8010f22:	f040 80ef 	bne.w	8011104 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010f26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010f2a:	2b20      	cmp	r3, #32
 8010f2c:	dc46      	bgt.n	8010fbc <UART_SetConfig+0x644>
 8010f2e:	2b02      	cmp	r3, #2
 8010f30:	f2c0 8081 	blt.w	8011036 <UART_SetConfig+0x6be>
 8010f34:	3b02      	subs	r3, #2
 8010f36:	2b1e      	cmp	r3, #30
 8010f38:	d87d      	bhi.n	8011036 <UART_SetConfig+0x6be>
 8010f3a:	a201      	add	r2, pc, #4	; (adr r2, 8010f40 <UART_SetConfig+0x5c8>)
 8010f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f40:	08010fc3 	.word	0x08010fc3
 8010f44:	08011037 	.word	0x08011037
 8010f48:	08010fcb 	.word	0x08010fcb
 8010f4c:	08011037 	.word	0x08011037
 8010f50:	08011037 	.word	0x08011037
 8010f54:	08011037 	.word	0x08011037
 8010f58:	08010fdb 	.word	0x08010fdb
 8010f5c:	08011037 	.word	0x08011037
 8010f60:	08011037 	.word	0x08011037
 8010f64:	08011037 	.word	0x08011037
 8010f68:	08011037 	.word	0x08011037
 8010f6c:	08011037 	.word	0x08011037
 8010f70:	08011037 	.word	0x08011037
 8010f74:	08011037 	.word	0x08011037
 8010f78:	08010feb 	.word	0x08010feb
 8010f7c:	08011037 	.word	0x08011037
 8010f80:	08011037 	.word	0x08011037
 8010f84:	08011037 	.word	0x08011037
 8010f88:	08011037 	.word	0x08011037
 8010f8c:	08011037 	.word	0x08011037
 8010f90:	08011037 	.word	0x08011037
 8010f94:	08011037 	.word	0x08011037
 8010f98:	08011037 	.word	0x08011037
 8010f9c:	08011037 	.word	0x08011037
 8010fa0:	08011037 	.word	0x08011037
 8010fa4:	08011037 	.word	0x08011037
 8010fa8:	08011037 	.word	0x08011037
 8010fac:	08011037 	.word	0x08011037
 8010fb0:	08011037 	.word	0x08011037
 8010fb4:	08011037 	.word	0x08011037
 8010fb8:	08011029 	.word	0x08011029
 8010fbc:	2b40      	cmp	r3, #64	; 0x40
 8010fbe:	d036      	beq.n	801102e <UART_SetConfig+0x6b6>
 8010fc0:	e039      	b.n	8011036 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010fc2:	f7fc f963 	bl	800d28c <HAL_RCCEx_GetD3PCLK1Freq>
 8010fc6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010fc8:	e03b      	b.n	8011042 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010fca:	f107 0314 	add.w	r3, r7, #20
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f7fc f972 	bl	800d2b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010fd4:	69bb      	ldr	r3, [r7, #24]
 8010fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010fd8:	e033      	b.n	8011042 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010fda:	f107 0308 	add.w	r3, r7, #8
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f7fc fabe 	bl	800d560 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010fe8:	e02b      	b.n	8011042 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010fea:	4b0a      	ldr	r3, [pc, #40]	; (8011014 <UART_SetConfig+0x69c>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	f003 0320 	and.w	r3, r3, #32
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d009      	beq.n	801100a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010ff6:	4b07      	ldr	r3, [pc, #28]	; (8011014 <UART_SetConfig+0x69c>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	08db      	lsrs	r3, r3, #3
 8010ffc:	f003 0303 	and.w	r3, r3, #3
 8011000:	4a08      	ldr	r2, [pc, #32]	; (8011024 <UART_SetConfig+0x6ac>)
 8011002:	fa22 f303 	lsr.w	r3, r2, r3
 8011006:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011008:	e01b      	b.n	8011042 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 801100a:	4b06      	ldr	r3, [pc, #24]	; (8011024 <UART_SetConfig+0x6ac>)
 801100c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801100e:	e018      	b.n	8011042 <UART_SetConfig+0x6ca>
 8011010:	40011400 	.word	0x40011400
 8011014:	58024400 	.word	0x58024400
 8011018:	40007800 	.word	0x40007800
 801101c:	40007c00 	.word	0x40007c00
 8011020:	58000c00 	.word	0x58000c00
 8011024:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011028:	4bc4      	ldr	r3, [pc, #784]	; (801133c <UART_SetConfig+0x9c4>)
 801102a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801102c:	e009      	b.n	8011042 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801102e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011032:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011034:	e005      	b.n	8011042 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8011036:	2300      	movs	r3, #0
 8011038:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801103a:	2301      	movs	r3, #1
 801103c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8011040:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011044:	2b00      	cmp	r3, #0
 8011046:	f000 81da 	beq.w	80113fe <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801104e:	4abc      	ldr	r2, [pc, #752]	; (8011340 <UART_SetConfig+0x9c8>)
 8011050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011054:	461a      	mov	r2, r3
 8011056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011058:	fbb3 f3f2 	udiv	r3, r3, r2
 801105c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	685a      	ldr	r2, [r3, #4]
 8011062:	4613      	mov	r3, r2
 8011064:	005b      	lsls	r3, r3, #1
 8011066:	4413      	add	r3, r2
 8011068:	6a3a      	ldr	r2, [r7, #32]
 801106a:	429a      	cmp	r2, r3
 801106c:	d305      	bcc.n	801107a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	685b      	ldr	r3, [r3, #4]
 8011072:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011074:	6a3a      	ldr	r2, [r7, #32]
 8011076:	429a      	cmp	r2, r3
 8011078:	d903      	bls.n	8011082 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 801107a:	2301      	movs	r3, #1
 801107c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8011080:	e1bd      	b.n	80113fe <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011084:	4618      	mov	r0, r3
 8011086:	f04f 0100 	mov.w	r1, #0
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801108e:	4aac      	ldr	r2, [pc, #688]	; (8011340 <UART_SetConfig+0x9c8>)
 8011090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011094:	b29a      	uxth	r2, r3
 8011096:	f04f 0300 	mov.w	r3, #0
 801109a:	f7ef f979 	bl	8000390 <__aeabi_uldivmod>
 801109e:	4602      	mov	r2, r0
 80110a0:	460b      	mov	r3, r1
 80110a2:	4610      	mov	r0, r2
 80110a4:	4619      	mov	r1, r3
 80110a6:	f04f 0200 	mov.w	r2, #0
 80110aa:	f04f 0300 	mov.w	r3, #0
 80110ae:	020b      	lsls	r3, r1, #8
 80110b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80110b4:	0202      	lsls	r2, r0, #8
 80110b6:	6879      	ldr	r1, [r7, #4]
 80110b8:	6849      	ldr	r1, [r1, #4]
 80110ba:	0849      	lsrs	r1, r1, #1
 80110bc:	4608      	mov	r0, r1
 80110be:	f04f 0100 	mov.w	r1, #0
 80110c2:	1814      	adds	r4, r2, r0
 80110c4:	eb43 0501 	adc.w	r5, r3, r1
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	685b      	ldr	r3, [r3, #4]
 80110cc:	461a      	mov	r2, r3
 80110ce:	f04f 0300 	mov.w	r3, #0
 80110d2:	4620      	mov	r0, r4
 80110d4:	4629      	mov	r1, r5
 80110d6:	f7ef f95b 	bl	8000390 <__aeabi_uldivmod>
 80110da:	4602      	mov	r2, r0
 80110dc:	460b      	mov	r3, r1
 80110de:	4613      	mov	r3, r2
 80110e0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80110e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80110e8:	d308      	bcc.n	80110fc <UART_SetConfig+0x784>
 80110ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80110f0:	d204      	bcs.n	80110fc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110f8:	60da      	str	r2, [r3, #12]
 80110fa:	e180      	b.n	80113fe <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80110fc:	2301      	movs	r3, #1
 80110fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8011102:	e17c      	b.n	80113fe <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	69db      	ldr	r3, [r3, #28]
 8011108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801110c:	f040 80bf 	bne.w	801128e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8011110:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011114:	2b20      	cmp	r3, #32
 8011116:	dc49      	bgt.n	80111ac <UART_SetConfig+0x834>
 8011118:	2b00      	cmp	r3, #0
 801111a:	db7c      	blt.n	8011216 <UART_SetConfig+0x89e>
 801111c:	2b20      	cmp	r3, #32
 801111e:	d87a      	bhi.n	8011216 <UART_SetConfig+0x89e>
 8011120:	a201      	add	r2, pc, #4	; (adr r2, 8011128 <UART_SetConfig+0x7b0>)
 8011122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011126:	bf00      	nop
 8011128:	080111b3 	.word	0x080111b3
 801112c:	080111bb 	.word	0x080111bb
 8011130:	08011217 	.word	0x08011217
 8011134:	08011217 	.word	0x08011217
 8011138:	080111c3 	.word	0x080111c3
 801113c:	08011217 	.word	0x08011217
 8011140:	08011217 	.word	0x08011217
 8011144:	08011217 	.word	0x08011217
 8011148:	080111d3 	.word	0x080111d3
 801114c:	08011217 	.word	0x08011217
 8011150:	08011217 	.word	0x08011217
 8011154:	08011217 	.word	0x08011217
 8011158:	08011217 	.word	0x08011217
 801115c:	08011217 	.word	0x08011217
 8011160:	08011217 	.word	0x08011217
 8011164:	08011217 	.word	0x08011217
 8011168:	080111e3 	.word	0x080111e3
 801116c:	08011217 	.word	0x08011217
 8011170:	08011217 	.word	0x08011217
 8011174:	08011217 	.word	0x08011217
 8011178:	08011217 	.word	0x08011217
 801117c:	08011217 	.word	0x08011217
 8011180:	08011217 	.word	0x08011217
 8011184:	08011217 	.word	0x08011217
 8011188:	08011217 	.word	0x08011217
 801118c:	08011217 	.word	0x08011217
 8011190:	08011217 	.word	0x08011217
 8011194:	08011217 	.word	0x08011217
 8011198:	08011217 	.word	0x08011217
 801119c:	08011217 	.word	0x08011217
 80111a0:	08011217 	.word	0x08011217
 80111a4:	08011217 	.word	0x08011217
 80111a8:	08011209 	.word	0x08011209
 80111ac:	2b40      	cmp	r3, #64	; 0x40
 80111ae:	d02e      	beq.n	801120e <UART_SetConfig+0x896>
 80111b0:	e031      	b.n	8011216 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80111b2:	f7fb f8ff 	bl	800c3b4 <HAL_RCC_GetPCLK1Freq>
 80111b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80111b8:	e033      	b.n	8011222 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80111ba:	f7fb f911 	bl	800c3e0 <HAL_RCC_GetPCLK2Freq>
 80111be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80111c0:	e02f      	b.n	8011222 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80111c2:	f107 0314 	add.w	r3, r7, #20
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7fc f876 	bl	800d2b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80111cc:	69bb      	ldr	r3, [r7, #24]
 80111ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80111d0:	e027      	b.n	8011222 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80111d2:	f107 0308 	add.w	r3, r7, #8
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7fc f9c2 	bl	800d560 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80111e0:	e01f      	b.n	8011222 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80111e2:	4b58      	ldr	r3, [pc, #352]	; (8011344 <UART_SetConfig+0x9cc>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f003 0320 	and.w	r3, r3, #32
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d009      	beq.n	8011202 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80111ee:	4b55      	ldr	r3, [pc, #340]	; (8011344 <UART_SetConfig+0x9cc>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	08db      	lsrs	r3, r3, #3
 80111f4:	f003 0303 	and.w	r3, r3, #3
 80111f8:	4a53      	ldr	r2, [pc, #332]	; (8011348 <UART_SetConfig+0x9d0>)
 80111fa:	fa22 f303 	lsr.w	r3, r2, r3
 80111fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011200:	e00f      	b.n	8011222 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8011202:	4b51      	ldr	r3, [pc, #324]	; (8011348 <UART_SetConfig+0x9d0>)
 8011204:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011206:	e00c      	b.n	8011222 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011208:	4b4c      	ldr	r3, [pc, #304]	; (801133c <UART_SetConfig+0x9c4>)
 801120a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801120c:	e009      	b.n	8011222 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801120e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011212:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011214:	e005      	b.n	8011222 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8011216:	2300      	movs	r3, #0
 8011218:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801121a:	2301      	movs	r3, #1
 801121c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8011220:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011224:	2b00      	cmp	r3, #0
 8011226:	f000 80ea 	beq.w	80113fe <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801122e:	4a44      	ldr	r2, [pc, #272]	; (8011340 <UART_SetConfig+0x9c8>)
 8011230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011234:	461a      	mov	r2, r3
 8011236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011238:	fbb3 f3f2 	udiv	r3, r3, r2
 801123c:	005a      	lsls	r2, r3, #1
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	085b      	lsrs	r3, r3, #1
 8011244:	441a      	add	r2, r3
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	685b      	ldr	r3, [r3, #4]
 801124a:	fbb2 f3f3 	udiv	r3, r2, r3
 801124e:	b29b      	uxth	r3, r3
 8011250:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011254:	2b0f      	cmp	r3, #15
 8011256:	d916      	bls.n	8011286 <UART_SetConfig+0x90e>
 8011258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801125a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801125e:	d212      	bcs.n	8011286 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011262:	b29b      	uxth	r3, r3
 8011264:	f023 030f 	bic.w	r3, r3, #15
 8011268:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801126a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801126c:	085b      	lsrs	r3, r3, #1
 801126e:	b29b      	uxth	r3, r3
 8011270:	f003 0307 	and.w	r3, r3, #7
 8011274:	b29a      	uxth	r2, r3
 8011276:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011278:	4313      	orrs	r3, r2
 801127a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011282:	60da      	str	r2, [r3, #12]
 8011284:	e0bb      	b.n	80113fe <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8011286:	2301      	movs	r3, #1
 8011288:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801128c:	e0b7      	b.n	80113fe <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 801128e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011292:	2b20      	cmp	r3, #32
 8011294:	dc4a      	bgt.n	801132c <UART_SetConfig+0x9b4>
 8011296:	2b00      	cmp	r3, #0
 8011298:	f2c0 8086 	blt.w	80113a8 <UART_SetConfig+0xa30>
 801129c:	2b20      	cmp	r3, #32
 801129e:	f200 8083 	bhi.w	80113a8 <UART_SetConfig+0xa30>
 80112a2:	a201      	add	r2, pc, #4	; (adr r2, 80112a8 <UART_SetConfig+0x930>)
 80112a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a8:	08011333 	.word	0x08011333
 80112ac:	0801134d 	.word	0x0801134d
 80112b0:	080113a9 	.word	0x080113a9
 80112b4:	080113a9 	.word	0x080113a9
 80112b8:	08011355 	.word	0x08011355
 80112bc:	080113a9 	.word	0x080113a9
 80112c0:	080113a9 	.word	0x080113a9
 80112c4:	080113a9 	.word	0x080113a9
 80112c8:	08011365 	.word	0x08011365
 80112cc:	080113a9 	.word	0x080113a9
 80112d0:	080113a9 	.word	0x080113a9
 80112d4:	080113a9 	.word	0x080113a9
 80112d8:	080113a9 	.word	0x080113a9
 80112dc:	080113a9 	.word	0x080113a9
 80112e0:	080113a9 	.word	0x080113a9
 80112e4:	080113a9 	.word	0x080113a9
 80112e8:	08011375 	.word	0x08011375
 80112ec:	080113a9 	.word	0x080113a9
 80112f0:	080113a9 	.word	0x080113a9
 80112f4:	080113a9 	.word	0x080113a9
 80112f8:	080113a9 	.word	0x080113a9
 80112fc:	080113a9 	.word	0x080113a9
 8011300:	080113a9 	.word	0x080113a9
 8011304:	080113a9 	.word	0x080113a9
 8011308:	080113a9 	.word	0x080113a9
 801130c:	080113a9 	.word	0x080113a9
 8011310:	080113a9 	.word	0x080113a9
 8011314:	080113a9 	.word	0x080113a9
 8011318:	080113a9 	.word	0x080113a9
 801131c:	080113a9 	.word	0x080113a9
 8011320:	080113a9 	.word	0x080113a9
 8011324:	080113a9 	.word	0x080113a9
 8011328:	0801139b 	.word	0x0801139b
 801132c:	2b40      	cmp	r3, #64	; 0x40
 801132e:	d037      	beq.n	80113a0 <UART_SetConfig+0xa28>
 8011330:	e03a      	b.n	80113a8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011332:	f7fb f83f 	bl	800c3b4 <HAL_RCC_GetPCLK1Freq>
 8011336:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011338:	e03c      	b.n	80113b4 <UART_SetConfig+0xa3c>
 801133a:	bf00      	nop
 801133c:	003d0900 	.word	0x003d0900
 8011340:	08015104 	.word	0x08015104
 8011344:	58024400 	.word	0x58024400
 8011348:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801134c:	f7fb f848 	bl	800c3e0 <HAL_RCC_GetPCLK2Freq>
 8011350:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011352:	e02f      	b.n	80113b4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011354:	f107 0314 	add.w	r3, r7, #20
 8011358:	4618      	mov	r0, r3
 801135a:	f7fb ffad 	bl	800d2b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801135e:	69bb      	ldr	r3, [r7, #24]
 8011360:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011362:	e027      	b.n	80113b4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011364:	f107 0308 	add.w	r3, r7, #8
 8011368:	4618      	mov	r0, r3
 801136a:	f7fc f8f9 	bl	800d560 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011372:	e01f      	b.n	80113b4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011374:	4b2c      	ldr	r3, [pc, #176]	; (8011428 <UART_SetConfig+0xab0>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	f003 0320 	and.w	r3, r3, #32
 801137c:	2b00      	cmp	r3, #0
 801137e:	d009      	beq.n	8011394 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011380:	4b29      	ldr	r3, [pc, #164]	; (8011428 <UART_SetConfig+0xab0>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	08db      	lsrs	r3, r3, #3
 8011386:	f003 0303 	and.w	r3, r3, #3
 801138a:	4a28      	ldr	r2, [pc, #160]	; (801142c <UART_SetConfig+0xab4>)
 801138c:	fa22 f303 	lsr.w	r3, r2, r3
 8011390:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011392:	e00f      	b.n	80113b4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8011394:	4b25      	ldr	r3, [pc, #148]	; (801142c <UART_SetConfig+0xab4>)
 8011396:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011398:	e00c      	b.n	80113b4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801139a:	4b25      	ldr	r3, [pc, #148]	; (8011430 <UART_SetConfig+0xab8>)
 801139c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801139e:	e009      	b.n	80113b4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80113a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80113a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80113a6:	e005      	b.n	80113b4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80113a8:	2300      	movs	r3, #0
 80113aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80113ac:	2301      	movs	r3, #1
 80113ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80113b2:	bf00      	nop
    }

    if (pclk != 0U)
 80113b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d021      	beq.n	80113fe <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113be:	4a1d      	ldr	r2, [pc, #116]	; (8011434 <UART_SetConfig+0xabc>)
 80113c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113c4:	461a      	mov	r2, r3
 80113c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	685b      	ldr	r3, [r3, #4]
 80113d0:	085b      	lsrs	r3, r3, #1
 80113d2:	441a      	add	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80113dc:	b29b      	uxth	r3, r3
 80113de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80113e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e2:	2b0f      	cmp	r3, #15
 80113e4:	d908      	bls.n	80113f8 <UART_SetConfig+0xa80>
 80113e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80113ec:	d204      	bcs.n	80113f8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113f4:	60da      	str	r2, [r3, #12]
 80113f6:	e002      	b.n	80113fe <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80113f8:	2301      	movs	r3, #1
 80113fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2201      	movs	r2, #1
 8011402:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	2201      	movs	r2, #1
 801140a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2200      	movs	r2, #0
 8011412:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2200      	movs	r2, #0
 8011418:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801141a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 801141e:	4618      	mov	r0, r3
 8011420:	3738      	adds	r7, #56	; 0x38
 8011422:	46bd      	mov	sp, r7
 8011424:	bdb0      	pop	{r4, r5, r7, pc}
 8011426:	bf00      	nop
 8011428:	58024400 	.word	0x58024400
 801142c:	03d09000 	.word	0x03d09000
 8011430:	003d0900 	.word	0x003d0900
 8011434:	08015104 	.word	0x08015104

08011438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011438:	b480      	push	{r7}
 801143a:	b083      	sub	sp, #12
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011444:	f003 0301 	and.w	r3, r3, #1
 8011448:	2b00      	cmp	r3, #0
 801144a:	d00a      	beq.n	8011462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	430a      	orrs	r2, r1
 8011460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011466:	f003 0302 	and.w	r3, r3, #2
 801146a:	2b00      	cmp	r3, #0
 801146c:	d00a      	beq.n	8011484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	430a      	orrs	r2, r1
 8011482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011488:	f003 0304 	and.w	r3, r3, #4
 801148c:	2b00      	cmp	r3, #0
 801148e:	d00a      	beq.n	80114a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	430a      	orrs	r2, r1
 80114a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114aa:	f003 0308 	and.w	r3, r3, #8
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d00a      	beq.n	80114c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	430a      	orrs	r2, r1
 80114c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114cc:	f003 0310 	and.w	r3, r3, #16
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d00a      	beq.n	80114ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	689b      	ldr	r3, [r3, #8]
 80114da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	430a      	orrs	r2, r1
 80114e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114ee:	f003 0320 	and.w	r3, r3, #32
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d00a      	beq.n	801150c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	689b      	ldr	r3, [r3, #8]
 80114fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	430a      	orrs	r2, r1
 801150a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011514:	2b00      	cmp	r3, #0
 8011516:	d01a      	beq.n	801154e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	685b      	ldr	r3, [r3, #4]
 801151e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	430a      	orrs	r2, r1
 801152c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011536:	d10a      	bne.n	801154e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	430a      	orrs	r2, r1
 801154c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011556:	2b00      	cmp	r3, #0
 8011558:	d00a      	beq.n	8011570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	685b      	ldr	r3, [r3, #4]
 8011560:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	430a      	orrs	r2, r1
 801156e:	605a      	str	r2, [r3, #4]
  }
}
 8011570:	bf00      	nop
 8011572:	370c      	adds	r7, #12
 8011574:	46bd      	mov	sp, r7
 8011576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157a:	4770      	bx	lr

0801157c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b086      	sub	sp, #24
 8011580:	af02      	add	r7, sp, #8
 8011582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2200      	movs	r2, #0
 8011588:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801158c:	f7f4 fbaa 	bl	8005ce4 <HAL_GetTick>
 8011590:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	f003 0308 	and.w	r3, r3, #8
 801159c:	2b08      	cmp	r3, #8
 801159e:	d10e      	bne.n	80115be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80115a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80115a4:	9300      	str	r3, [sp, #0]
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	2200      	movs	r2, #0
 80115aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f000 f82f 	bl	8011612 <UART_WaitOnFlagUntilTimeout>
 80115b4:	4603      	mov	r3, r0
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d001      	beq.n	80115be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80115ba:	2303      	movs	r3, #3
 80115bc:	e025      	b.n	801160a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	f003 0304 	and.w	r3, r3, #4
 80115c8:	2b04      	cmp	r3, #4
 80115ca:	d10e      	bne.n	80115ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80115cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80115d0:	9300      	str	r3, [sp, #0]
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	2200      	movs	r2, #0
 80115d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f000 f819 	bl	8011612 <UART_WaitOnFlagUntilTimeout>
 80115e0:	4603      	mov	r3, r0
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d001      	beq.n	80115ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80115e6:	2303      	movs	r3, #3
 80115e8:	e00f      	b.n	801160a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2220      	movs	r2, #32
 80115ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2220      	movs	r2, #32
 80115f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2200      	movs	r2, #0
 80115fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2200      	movs	r2, #0
 8011604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011608:	2300      	movs	r3, #0
}
 801160a:	4618      	mov	r0, r3
 801160c:	3710      	adds	r7, #16
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}

08011612 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011612:	b580      	push	{r7, lr}
 8011614:	b084      	sub	sp, #16
 8011616:	af00      	add	r7, sp, #0
 8011618:	60f8      	str	r0, [r7, #12]
 801161a:	60b9      	str	r1, [r7, #8]
 801161c:	603b      	str	r3, [r7, #0]
 801161e:	4613      	mov	r3, r2
 8011620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011622:	e062      	b.n	80116ea <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011624:	69bb      	ldr	r3, [r7, #24]
 8011626:	f1b3 3fff 	cmp.w	r3, #4294967295
 801162a:	d05e      	beq.n	80116ea <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801162c:	f7f4 fb5a 	bl	8005ce4 <HAL_GetTick>
 8011630:	4602      	mov	r2, r0
 8011632:	683b      	ldr	r3, [r7, #0]
 8011634:	1ad3      	subs	r3, r2, r3
 8011636:	69ba      	ldr	r2, [r7, #24]
 8011638:	429a      	cmp	r2, r3
 801163a:	d302      	bcc.n	8011642 <UART_WaitOnFlagUntilTimeout+0x30>
 801163c:	69bb      	ldr	r3, [r7, #24]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d11d      	bne.n	801167e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011650:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	689a      	ldr	r2, [r3, #8]
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	f022 0201 	bic.w	r2, r2, #1
 8011660:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	2220      	movs	r2, #32
 8011666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	2220      	movs	r2, #32
 801166e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	2200      	movs	r2, #0
 8011676:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801167a:	2303      	movs	r3, #3
 801167c:	e045      	b.n	801170a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	f003 0304 	and.w	r3, r3, #4
 8011688:	2b00      	cmp	r3, #0
 801168a:	d02e      	beq.n	80116ea <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	69db      	ldr	r3, [r3, #28]
 8011692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801169a:	d126      	bne.n	80116ea <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80116a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	681a      	ldr	r2, [r3, #0]
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80116b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	689a      	ldr	r2, [r3, #8]
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	f022 0201 	bic.w	r2, r2, #1
 80116c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	2220      	movs	r2, #32
 80116ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	2220      	movs	r2, #32
 80116d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	2220      	movs	r2, #32
 80116da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2200      	movs	r2, #0
 80116e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80116e6:	2303      	movs	r3, #3
 80116e8:	e00f      	b.n	801170a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	69da      	ldr	r2, [r3, #28]
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	4013      	ands	r3, r2
 80116f4:	68ba      	ldr	r2, [r7, #8]
 80116f6:	429a      	cmp	r2, r3
 80116f8:	bf0c      	ite	eq
 80116fa:	2301      	moveq	r3, #1
 80116fc:	2300      	movne	r3, #0
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	461a      	mov	r2, r3
 8011702:	79fb      	ldrb	r3, [r7, #7]
 8011704:	429a      	cmp	r2, r3
 8011706:	d08d      	beq.n	8011624 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011708:	2300      	movs	r3, #0
}
 801170a:	4618      	mov	r0, r3
 801170c:	3710      	adds	r7, #16
 801170e:	46bd      	mov	sp, r7
 8011710:	bd80      	pop	{r7, pc}
	...

08011714 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b084      	sub	sp, #16
 8011718:	af00      	add	r7, sp, #0
 801171a:	60f8      	str	r0, [r7, #12]
 801171c:	60b9      	str	r1, [r7, #8]
 801171e:	4613      	mov	r3, r2
 8011720:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	68ba      	ldr	r2, [r7, #8]
 8011726:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	88fa      	ldrh	r2, [r7, #6]
 801172c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	2200      	movs	r2, #0
 8011734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2222      	movs	r2, #34	; 0x22
 801173c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011744:	2b00      	cmp	r3, #0
 8011746:	d02c      	beq.n	80117a2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801174c:	4a25      	ldr	r2, [pc, #148]	; (80117e4 <UART_Start_Receive_DMA+0xd0>)
 801174e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011754:	4a24      	ldr	r2, [pc, #144]	; (80117e8 <UART_Start_Receive_DMA+0xd4>)
 8011756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801175c:	4a23      	ldr	r2, [pc, #140]	; (80117ec <UART_Start_Receive_DMA+0xd8>)
 801175e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011764:	2200      	movs	r2, #0
 8011766:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	3324      	adds	r3, #36	; 0x24
 8011772:	4619      	mov	r1, r3
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011778:	461a      	mov	r2, r3
 801177a:	88fb      	ldrh	r3, [r7, #6]
 801177c:	f7f4 ff5a 	bl	8006634 <HAL_DMA_Start_IT>
 8011780:	4603      	mov	r3, r0
 8011782:	2b00      	cmp	r3, #0
 8011784:	d00d      	beq.n	80117a2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	2210      	movs	r2, #16
 801178a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	2200      	movs	r2, #0
 8011792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2220      	movs	r2, #32
 801179a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 801179e:	2301      	movs	r3, #1
 80117a0:	e01c      	b.n	80117dc <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	2200      	movs	r2, #0
 80117a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	681a      	ldr	r2, [r3, #0]
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80117b8:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	689a      	ldr	r2, [r3, #8]
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	f042 0201 	orr.w	r2, r2, #1
 80117c8:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	689a      	ldr	r2, [r3, #8]
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80117d8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80117da:	2300      	movs	r3, #0
}
 80117dc:	4618      	mov	r0, r3
 80117de:	3710      	adds	r7, #16
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}
 80117e4:	080118fd 	.word	0x080118fd
 80117e8:	08011993 	.word	0x08011993
 80117ec:	080119cb 	.word	0x080119cb

080117f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b083      	sub	sp, #12
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	681a      	ldr	r2, [r3, #0]
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8011806:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	689a      	ldr	r2, [r3, #8]
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8011816:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2220      	movs	r2, #32
 801181c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8011820:	bf00      	nop
 8011822:	370c      	adds	r7, #12
 8011824:	46bd      	mov	sp, r7
 8011826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182a:	4770      	bx	lr

0801182c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801182c:	b480      	push	{r7}
 801182e:	b083      	sub	sp, #12
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	681a      	ldr	r2, [r3, #0]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8011842:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	6899      	ldr	r1, [r3, #8]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681a      	ldr	r2, [r3, #0]
 801184e:	4b0f      	ldr	r3, [pc, #60]	; (801188c <UART_EndRxTransfer+0x60>)
 8011850:	400b      	ands	r3, r1
 8011852:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011858:	2b01      	cmp	r3, #1
 801185a:	d107      	bne.n	801186c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	681a      	ldr	r2, [r3, #0]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f022 0210 	bic.w	r2, r2, #16
 801186a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2220      	movs	r2, #32
 8011870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2200      	movs	r2, #0
 8011878:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2200      	movs	r2, #0
 801187e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8011880:	bf00      	nop
 8011882:	370c      	adds	r7, #12
 8011884:	46bd      	mov	sp, r7
 8011886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188a:	4770      	bx	lr
 801188c:	effffffe 	.word	0xeffffffe

08011890 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801189c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	69db      	ldr	r3, [r3, #28]
 80118a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80118a6:	d014      	beq.n	80118d2 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	2200      	movs	r2, #0
 80118ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	689a      	ldr	r2, [r3, #8]
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80118be:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	681a      	ldr	r2, [r3, #0]
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80118ce:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80118d0:	e002      	b.n	80118d8 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80118d2:	68f8      	ldr	r0, [r7, #12]
 80118d4:	f7ff f81c 	bl	8010910 <HAL_UART_TxCpltCallback>
}
 80118d8:	bf00      	nop
 80118da:	3710      	adds	r7, #16
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}

080118e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118ec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80118ee:	68f8      	ldr	r0, [r7, #12]
 80118f0:	f7ff f818 	bl	8010924 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80118f4:	bf00      	nop
 80118f6:	3710      	adds	r7, #16
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}

080118fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b084      	sub	sp, #16
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011908:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	69db      	ldr	r3, [r3, #28]
 801190e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011912:	d02b      	beq.n	801196c <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	2200      	movs	r2, #0
 8011918:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	681a      	ldr	r2, [r3, #0]
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801192a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	689a      	ldr	r2, [r3, #8]
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	f022 0201 	bic.w	r2, r2, #1
 801193a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	689a      	ldr	r2, [r3, #8]
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801194a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	2220      	movs	r2, #32
 8011950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011958:	2b01      	cmp	r3, #1
 801195a:	d107      	bne.n	801196c <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	681a      	ldr	r2, [r3, #0]
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f022 0210 	bic.w	r2, r2, #16
 801196a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011970:	2b01      	cmp	r3, #1
 8011972:	d107      	bne.n	8011984 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801197a:	4619      	mov	r1, r3
 801197c:	68f8      	ldr	r0, [r7, #12]
 801197e:	f7fe ffef 	bl	8010960 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011982:	e002      	b.n	801198a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8011984:	68f8      	ldr	r0, [r7, #12]
 8011986:	f7f3 fa67 	bl	8004e58 <HAL_UART_RxCpltCallback>
}
 801198a:	bf00      	nop
 801198c:	3710      	adds	r7, #16
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}

08011992 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011992:	b580      	push	{r7, lr}
 8011994:	b084      	sub	sp, #16
 8011996:	af00      	add	r7, sp, #0
 8011998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801199e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119a4:	2b01      	cmp	r3, #1
 80119a6:	d109      	bne.n	80119bc <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80119ae:	085b      	lsrs	r3, r3, #1
 80119b0:	b29b      	uxth	r3, r3
 80119b2:	4619      	mov	r1, r3
 80119b4:	68f8      	ldr	r0, [r7, #12]
 80119b6:	f7fe ffd3 	bl	8010960 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80119ba:	e002      	b.n	80119c2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80119bc:	68f8      	ldr	r0, [r7, #12]
 80119be:	f7fe ffbb 	bl	8010938 <HAL_UART_RxHalfCpltCallback>
}
 80119c2:	bf00      	nop
 80119c4:	3710      	adds	r7, #16
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}

080119ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80119ca:	b580      	push	{r7, lr}
 80119cc:	b086      	sub	sp, #24
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	689b      	ldr	r3, [r3, #8]
 80119ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119f2:	2b80      	cmp	r3, #128	; 0x80
 80119f4:	d109      	bne.n	8011a0a <UART_DMAError+0x40>
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	2b21      	cmp	r3, #33	; 0x21
 80119fa:	d106      	bne.n	8011a0a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	2200      	movs	r2, #0
 8011a00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011a04:	6978      	ldr	r0, [r7, #20]
 8011a06:	f7ff fef3 	bl	80117f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	689b      	ldr	r3, [r3, #8]
 8011a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a14:	2b40      	cmp	r3, #64	; 0x40
 8011a16:	d109      	bne.n	8011a2c <UART_DMAError+0x62>
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	2b22      	cmp	r3, #34	; 0x22
 8011a1c:	d106      	bne.n	8011a2c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	2200      	movs	r2, #0
 8011a22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011a26:	6978      	ldr	r0, [r7, #20]
 8011a28:	f7ff ff00 	bl	801182c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a32:	f043 0210 	orr.w	r2, r3, #16
 8011a36:	697b      	ldr	r3, [r7, #20]
 8011a38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a3c:	6978      	ldr	r0, [r7, #20]
 8011a3e:	f7fe ff85 	bl	801094c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a42:	bf00      	nop
 8011a44:	3718      	adds	r7, #24
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}

08011a4a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011a4a:	b580      	push	{r7, lr}
 8011a4c:	b084      	sub	sp, #16
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	2200      	movs	r2, #0
 8011a64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a68:	68f8      	ldr	r0, [r7, #12]
 8011a6a:	f7fe ff6f 	bl	801094c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a6e:	bf00      	nop
 8011a70:	3710      	adds	r7, #16
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}

08011a76 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011a76:	b580      	push	{r7, lr}
 8011a78:	b082      	sub	sp, #8
 8011a7a:	af00      	add	r7, sp, #0
 8011a7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	681a      	ldr	r2, [r3, #0]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011a8c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2220      	movs	r2, #32
 8011a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f7fe ff37 	bl	8010910 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011aa2:	bf00      	nop
 8011aa4:	3708      	adds	r7, #8
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}

08011aaa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011aaa:	b480      	push	{r7}
 8011aac:	b083      	sub	sp, #12
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011ab2:	bf00      	nop
 8011ab4:	370c      	adds	r7, #12
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abc:	4770      	bx	lr

08011abe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011abe:	b480      	push	{r7}
 8011ac0:	b083      	sub	sp, #12
 8011ac2:	af00      	add	r7, sp, #0
 8011ac4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011ac6:	bf00      	nop
 8011ac8:	370c      	adds	r7, #12
 8011aca:	46bd      	mov	sp, r7
 8011acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad0:	4770      	bx	lr

08011ad2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011ad2:	b480      	push	{r7}
 8011ad4:	b083      	sub	sp, #12
 8011ad6:	af00      	add	r7, sp, #0
 8011ad8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011ada:	bf00      	nop
 8011adc:	370c      	adds	r7, #12
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae4:	4770      	bx	lr

08011ae6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011ae6:	b480      	push	{r7}
 8011ae8:	b085      	sub	sp, #20
 8011aea:	af00      	add	r7, sp, #0
 8011aec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011af4:	2b01      	cmp	r3, #1
 8011af6:	d101      	bne.n	8011afc <HAL_UARTEx_DisableFifoMode+0x16>
 8011af8:	2302      	movs	r3, #2
 8011afa:	e027      	b.n	8011b4c <HAL_UARTEx_DisableFifoMode+0x66>
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2201      	movs	r2, #1
 8011b00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2224      	movs	r2, #36	; 0x24
 8011b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	681a      	ldr	r2, [r3, #0]
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	f022 0201 	bic.w	r2, r2, #1
 8011b22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011b2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	68fa      	ldr	r2, [r7, #12]
 8011b38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2220      	movs	r2, #32
 8011b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2200      	movs	r2, #0
 8011b46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011b4a:	2300      	movs	r3, #0
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3714      	adds	r7, #20
 8011b50:	46bd      	mov	sp, r7
 8011b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b56:	4770      	bx	lr

08011b58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b084      	sub	sp, #16
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011b68:	2b01      	cmp	r3, #1
 8011b6a:	d101      	bne.n	8011b70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011b6c:	2302      	movs	r3, #2
 8011b6e:	e02d      	b.n	8011bcc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2201      	movs	r2, #1
 8011b74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2224      	movs	r2, #36	; 0x24
 8011b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	681a      	ldr	r2, [r3, #0]
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f022 0201 	bic.w	r2, r2, #1
 8011b96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	689b      	ldr	r3, [r3, #8]
 8011b9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	683a      	ldr	r2, [r7, #0]
 8011ba8:	430a      	orrs	r2, r1
 8011baa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f000 f84f 	bl	8011c50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	68fa      	ldr	r2, [r7, #12]
 8011bb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2220      	movs	r2, #32
 8011bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011bca:	2300      	movs	r3, #0
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3710      	adds	r7, #16
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}

08011bd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b084      	sub	sp, #16
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011be4:	2b01      	cmp	r3, #1
 8011be6:	d101      	bne.n	8011bec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011be8:	2302      	movs	r3, #2
 8011bea:	e02d      	b.n	8011c48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2201      	movs	r2, #1
 8011bf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2224      	movs	r2, #36	; 0x24
 8011bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	681a      	ldr	r2, [r3, #0]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	f022 0201 	bic.w	r2, r2, #1
 8011c12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	689b      	ldr	r3, [r3, #8]
 8011c1a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	683a      	ldr	r2, [r7, #0]
 8011c24:	430a      	orrs	r2, r1
 8011c26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f000 f811 	bl	8011c50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	68fa      	ldr	r2, [r7, #12]
 8011c34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2220      	movs	r2, #32
 8011c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2200      	movs	r2, #0
 8011c42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011c46:	2300      	movs	r3, #0
}
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3710      	adds	r7, #16
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}

08011c50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b085      	sub	sp, #20
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d108      	bne.n	8011c72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2201      	movs	r2, #1
 8011c64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	2201      	movs	r2, #1
 8011c6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011c70:	e031      	b.n	8011cd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011c72:	2310      	movs	r3, #16
 8011c74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011c76:	2310      	movs	r3, #16
 8011c78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	689b      	ldr	r3, [r3, #8]
 8011c80:	0e5b      	lsrs	r3, r3, #25
 8011c82:	b2db      	uxtb	r3, r3
 8011c84:	f003 0307 	and.w	r3, r3, #7
 8011c88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	689b      	ldr	r3, [r3, #8]
 8011c90:	0f5b      	lsrs	r3, r3, #29
 8011c92:	b2db      	uxtb	r3, r3
 8011c94:	f003 0307 	and.w	r3, r3, #7
 8011c98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011c9a:	7bbb      	ldrb	r3, [r7, #14]
 8011c9c:	7b3a      	ldrb	r2, [r7, #12]
 8011c9e:	4911      	ldr	r1, [pc, #68]	; (8011ce4 <UARTEx_SetNbDataToProcess+0x94>)
 8011ca0:	5c8a      	ldrb	r2, [r1, r2]
 8011ca2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011ca6:	7b3a      	ldrb	r2, [r7, #12]
 8011ca8:	490f      	ldr	r1, [pc, #60]	; (8011ce8 <UARTEx_SetNbDataToProcess+0x98>)
 8011caa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011cac:	fb93 f3f2 	sdiv	r3, r3, r2
 8011cb0:	b29a      	uxth	r2, r3
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011cb8:	7bfb      	ldrb	r3, [r7, #15]
 8011cba:	7b7a      	ldrb	r2, [r7, #13]
 8011cbc:	4909      	ldr	r1, [pc, #36]	; (8011ce4 <UARTEx_SetNbDataToProcess+0x94>)
 8011cbe:	5c8a      	ldrb	r2, [r1, r2]
 8011cc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011cc4:	7b7a      	ldrb	r2, [r7, #13]
 8011cc6:	4908      	ldr	r1, [pc, #32]	; (8011ce8 <UARTEx_SetNbDataToProcess+0x98>)
 8011cc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011cca:	fb93 f3f2 	sdiv	r3, r3, r2
 8011cce:	b29a      	uxth	r2, r3
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011cd6:	bf00      	nop
 8011cd8:	3714      	adds	r7, #20
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce0:	4770      	bx	lr
 8011ce2:	bf00      	nop
 8011ce4:	0801511c 	.word	0x0801511c
 8011ce8:	08015124 	.word	0x08015124

08011cec <__errno>:
 8011cec:	4b01      	ldr	r3, [pc, #4]	; (8011cf4 <__errno+0x8>)
 8011cee:	6818      	ldr	r0, [r3, #0]
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	24000024 	.word	0x24000024

08011cf8 <__libc_init_array>:
 8011cf8:	b570      	push	{r4, r5, r6, lr}
 8011cfa:	4d0d      	ldr	r5, [pc, #52]	; (8011d30 <__libc_init_array+0x38>)
 8011cfc:	4c0d      	ldr	r4, [pc, #52]	; (8011d34 <__libc_init_array+0x3c>)
 8011cfe:	1b64      	subs	r4, r4, r5
 8011d00:	10a4      	asrs	r4, r4, #2
 8011d02:	2600      	movs	r6, #0
 8011d04:	42a6      	cmp	r6, r4
 8011d06:	d109      	bne.n	8011d1c <__libc_init_array+0x24>
 8011d08:	4d0b      	ldr	r5, [pc, #44]	; (8011d38 <__libc_init_array+0x40>)
 8011d0a:	4c0c      	ldr	r4, [pc, #48]	; (8011d3c <__libc_init_array+0x44>)
 8011d0c:	f003 f992 	bl	8015034 <_init>
 8011d10:	1b64      	subs	r4, r4, r5
 8011d12:	10a4      	asrs	r4, r4, #2
 8011d14:	2600      	movs	r6, #0
 8011d16:	42a6      	cmp	r6, r4
 8011d18:	d105      	bne.n	8011d26 <__libc_init_array+0x2e>
 8011d1a:	bd70      	pop	{r4, r5, r6, pc}
 8011d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d20:	4798      	blx	r3
 8011d22:	3601      	adds	r6, #1
 8011d24:	e7ee      	b.n	8011d04 <__libc_init_array+0xc>
 8011d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d2a:	4798      	blx	r3
 8011d2c:	3601      	adds	r6, #1
 8011d2e:	e7f2      	b.n	8011d16 <__libc_init_array+0x1e>
 8011d30:	080155c0 	.word	0x080155c0
 8011d34:	080155c0 	.word	0x080155c0
 8011d38:	080155c0 	.word	0x080155c0
 8011d3c:	080155c4 	.word	0x080155c4

08011d40 <memset>:
 8011d40:	4402      	add	r2, r0
 8011d42:	4603      	mov	r3, r0
 8011d44:	4293      	cmp	r3, r2
 8011d46:	d100      	bne.n	8011d4a <memset+0xa>
 8011d48:	4770      	bx	lr
 8011d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8011d4e:	e7f9      	b.n	8011d44 <memset+0x4>

08011d50 <__cvt>:
 8011d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d52:	ed2d 8b02 	vpush	{d8}
 8011d56:	eeb0 8b40 	vmov.f64	d8, d0
 8011d5a:	b085      	sub	sp, #20
 8011d5c:	4617      	mov	r7, r2
 8011d5e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011d60:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011d62:	ee18 2a90 	vmov	r2, s17
 8011d66:	f025 0520 	bic.w	r5, r5, #32
 8011d6a:	2a00      	cmp	r2, #0
 8011d6c:	bfb6      	itet	lt
 8011d6e:	222d      	movlt	r2, #45	; 0x2d
 8011d70:	2200      	movge	r2, #0
 8011d72:	eeb1 8b40 	vneglt.f64	d8, d0
 8011d76:	2d46      	cmp	r5, #70	; 0x46
 8011d78:	460c      	mov	r4, r1
 8011d7a:	701a      	strb	r2, [r3, #0]
 8011d7c:	d004      	beq.n	8011d88 <__cvt+0x38>
 8011d7e:	2d45      	cmp	r5, #69	; 0x45
 8011d80:	d100      	bne.n	8011d84 <__cvt+0x34>
 8011d82:	3401      	adds	r4, #1
 8011d84:	2102      	movs	r1, #2
 8011d86:	e000      	b.n	8011d8a <__cvt+0x3a>
 8011d88:	2103      	movs	r1, #3
 8011d8a:	ab03      	add	r3, sp, #12
 8011d8c:	9301      	str	r3, [sp, #4]
 8011d8e:	ab02      	add	r3, sp, #8
 8011d90:	9300      	str	r3, [sp, #0]
 8011d92:	4622      	mov	r2, r4
 8011d94:	4633      	mov	r3, r6
 8011d96:	eeb0 0b48 	vmov.f64	d0, d8
 8011d9a:	f000 fdf5 	bl	8012988 <_dtoa_r>
 8011d9e:	2d47      	cmp	r5, #71	; 0x47
 8011da0:	d109      	bne.n	8011db6 <__cvt+0x66>
 8011da2:	07fb      	lsls	r3, r7, #31
 8011da4:	d407      	bmi.n	8011db6 <__cvt+0x66>
 8011da6:	9b03      	ldr	r3, [sp, #12]
 8011da8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011daa:	1a1b      	subs	r3, r3, r0
 8011dac:	6013      	str	r3, [r2, #0]
 8011dae:	b005      	add	sp, #20
 8011db0:	ecbd 8b02 	vpop	{d8}
 8011db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011db6:	2d46      	cmp	r5, #70	; 0x46
 8011db8:	eb00 0204 	add.w	r2, r0, r4
 8011dbc:	d10c      	bne.n	8011dd8 <__cvt+0x88>
 8011dbe:	7803      	ldrb	r3, [r0, #0]
 8011dc0:	2b30      	cmp	r3, #48	; 0x30
 8011dc2:	d107      	bne.n	8011dd4 <__cvt+0x84>
 8011dc4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dcc:	bf1c      	itt	ne
 8011dce:	f1c4 0401 	rsbne	r4, r4, #1
 8011dd2:	6034      	strne	r4, [r6, #0]
 8011dd4:	6833      	ldr	r3, [r6, #0]
 8011dd6:	441a      	add	r2, r3
 8011dd8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011de0:	bf08      	it	eq
 8011de2:	9203      	streq	r2, [sp, #12]
 8011de4:	2130      	movs	r1, #48	; 0x30
 8011de6:	9b03      	ldr	r3, [sp, #12]
 8011de8:	4293      	cmp	r3, r2
 8011dea:	d2dc      	bcs.n	8011da6 <__cvt+0x56>
 8011dec:	1c5c      	adds	r4, r3, #1
 8011dee:	9403      	str	r4, [sp, #12]
 8011df0:	7019      	strb	r1, [r3, #0]
 8011df2:	e7f8      	b.n	8011de6 <__cvt+0x96>

08011df4 <__exponent>:
 8011df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011df6:	4603      	mov	r3, r0
 8011df8:	2900      	cmp	r1, #0
 8011dfa:	bfb8      	it	lt
 8011dfc:	4249      	neglt	r1, r1
 8011dfe:	f803 2b02 	strb.w	r2, [r3], #2
 8011e02:	bfb4      	ite	lt
 8011e04:	222d      	movlt	r2, #45	; 0x2d
 8011e06:	222b      	movge	r2, #43	; 0x2b
 8011e08:	2909      	cmp	r1, #9
 8011e0a:	7042      	strb	r2, [r0, #1]
 8011e0c:	dd2a      	ble.n	8011e64 <__exponent+0x70>
 8011e0e:	f10d 0407 	add.w	r4, sp, #7
 8011e12:	46a4      	mov	ip, r4
 8011e14:	270a      	movs	r7, #10
 8011e16:	46a6      	mov	lr, r4
 8011e18:	460a      	mov	r2, r1
 8011e1a:	fb91 f6f7 	sdiv	r6, r1, r7
 8011e1e:	fb07 1516 	mls	r5, r7, r6, r1
 8011e22:	3530      	adds	r5, #48	; 0x30
 8011e24:	2a63      	cmp	r2, #99	; 0x63
 8011e26:	f104 34ff 	add.w	r4, r4, #4294967295
 8011e2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011e2e:	4631      	mov	r1, r6
 8011e30:	dcf1      	bgt.n	8011e16 <__exponent+0x22>
 8011e32:	3130      	adds	r1, #48	; 0x30
 8011e34:	f1ae 0502 	sub.w	r5, lr, #2
 8011e38:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011e3c:	1c44      	adds	r4, r0, #1
 8011e3e:	4629      	mov	r1, r5
 8011e40:	4561      	cmp	r1, ip
 8011e42:	d30a      	bcc.n	8011e5a <__exponent+0x66>
 8011e44:	f10d 0209 	add.w	r2, sp, #9
 8011e48:	eba2 020e 	sub.w	r2, r2, lr
 8011e4c:	4565      	cmp	r5, ip
 8011e4e:	bf88      	it	hi
 8011e50:	2200      	movhi	r2, #0
 8011e52:	4413      	add	r3, r2
 8011e54:	1a18      	subs	r0, r3, r0
 8011e56:	b003      	add	sp, #12
 8011e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011e62:	e7ed      	b.n	8011e40 <__exponent+0x4c>
 8011e64:	2330      	movs	r3, #48	; 0x30
 8011e66:	3130      	adds	r1, #48	; 0x30
 8011e68:	7083      	strb	r3, [r0, #2]
 8011e6a:	70c1      	strb	r1, [r0, #3]
 8011e6c:	1d03      	adds	r3, r0, #4
 8011e6e:	e7f1      	b.n	8011e54 <__exponent+0x60>

08011e70 <_printf_float>:
 8011e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e74:	b08b      	sub	sp, #44	; 0x2c
 8011e76:	460c      	mov	r4, r1
 8011e78:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011e7c:	4616      	mov	r6, r2
 8011e7e:	461f      	mov	r7, r3
 8011e80:	4605      	mov	r5, r0
 8011e82:	f001 fcbb 	bl	80137fc <_localeconv_r>
 8011e86:	f8d0 b000 	ldr.w	fp, [r0]
 8011e8a:	4658      	mov	r0, fp
 8011e8c:	f7ee fa28 	bl	80002e0 <strlen>
 8011e90:	2300      	movs	r3, #0
 8011e92:	9308      	str	r3, [sp, #32]
 8011e94:	f8d8 3000 	ldr.w	r3, [r8]
 8011e98:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011e9c:	6822      	ldr	r2, [r4, #0]
 8011e9e:	3307      	adds	r3, #7
 8011ea0:	f023 0307 	bic.w	r3, r3, #7
 8011ea4:	f103 0108 	add.w	r1, r3, #8
 8011ea8:	f8c8 1000 	str.w	r1, [r8]
 8011eac:	4682      	mov	sl, r0
 8011eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011eb2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011eb6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8012118 <_printf_float+0x2a8>
 8011eba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011ebe:	eeb0 6bc0 	vabs.f64	d6, d0
 8011ec2:	eeb4 6b47 	vcmp.f64	d6, d7
 8011ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eca:	dd24      	ble.n	8011f16 <_printf_float+0xa6>
 8011ecc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ed4:	d502      	bpl.n	8011edc <_printf_float+0x6c>
 8011ed6:	232d      	movs	r3, #45	; 0x2d
 8011ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011edc:	4b90      	ldr	r3, [pc, #576]	; (8012120 <_printf_float+0x2b0>)
 8011ede:	4891      	ldr	r0, [pc, #580]	; (8012124 <_printf_float+0x2b4>)
 8011ee0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011ee4:	bf94      	ite	ls
 8011ee6:	4698      	movls	r8, r3
 8011ee8:	4680      	movhi	r8, r0
 8011eea:	2303      	movs	r3, #3
 8011eec:	6123      	str	r3, [r4, #16]
 8011eee:	f022 0204 	bic.w	r2, r2, #4
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	6022      	str	r2, [r4, #0]
 8011ef6:	9304      	str	r3, [sp, #16]
 8011ef8:	9700      	str	r7, [sp, #0]
 8011efa:	4633      	mov	r3, r6
 8011efc:	aa09      	add	r2, sp, #36	; 0x24
 8011efe:	4621      	mov	r1, r4
 8011f00:	4628      	mov	r0, r5
 8011f02:	f000 f9d3 	bl	80122ac <_printf_common>
 8011f06:	3001      	adds	r0, #1
 8011f08:	f040 808a 	bne.w	8012020 <_printf_float+0x1b0>
 8011f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f10:	b00b      	add	sp, #44	; 0x2c
 8011f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f16:	eeb4 0b40 	vcmp.f64	d0, d0
 8011f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f1e:	d709      	bvc.n	8011f34 <_printf_float+0xc4>
 8011f20:	ee10 3a90 	vmov	r3, s1
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	bfbc      	itt	lt
 8011f28:	232d      	movlt	r3, #45	; 0x2d
 8011f2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011f2e:	487e      	ldr	r0, [pc, #504]	; (8012128 <_printf_float+0x2b8>)
 8011f30:	4b7e      	ldr	r3, [pc, #504]	; (801212c <_printf_float+0x2bc>)
 8011f32:	e7d5      	b.n	8011ee0 <_printf_float+0x70>
 8011f34:	6863      	ldr	r3, [r4, #4]
 8011f36:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011f3a:	9104      	str	r1, [sp, #16]
 8011f3c:	1c59      	adds	r1, r3, #1
 8011f3e:	d13c      	bne.n	8011fba <_printf_float+0x14a>
 8011f40:	2306      	movs	r3, #6
 8011f42:	6063      	str	r3, [r4, #4]
 8011f44:	2300      	movs	r3, #0
 8011f46:	9303      	str	r3, [sp, #12]
 8011f48:	ab08      	add	r3, sp, #32
 8011f4a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011f4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011f52:	ab07      	add	r3, sp, #28
 8011f54:	6861      	ldr	r1, [r4, #4]
 8011f56:	9300      	str	r3, [sp, #0]
 8011f58:	6022      	str	r2, [r4, #0]
 8011f5a:	f10d 031b 	add.w	r3, sp, #27
 8011f5e:	4628      	mov	r0, r5
 8011f60:	f7ff fef6 	bl	8011d50 <__cvt>
 8011f64:	9b04      	ldr	r3, [sp, #16]
 8011f66:	9907      	ldr	r1, [sp, #28]
 8011f68:	2b47      	cmp	r3, #71	; 0x47
 8011f6a:	4680      	mov	r8, r0
 8011f6c:	d108      	bne.n	8011f80 <_printf_float+0x110>
 8011f6e:	1cc8      	adds	r0, r1, #3
 8011f70:	db02      	blt.n	8011f78 <_printf_float+0x108>
 8011f72:	6863      	ldr	r3, [r4, #4]
 8011f74:	4299      	cmp	r1, r3
 8011f76:	dd41      	ble.n	8011ffc <_printf_float+0x18c>
 8011f78:	f1a9 0902 	sub.w	r9, r9, #2
 8011f7c:	fa5f f989 	uxtb.w	r9, r9
 8011f80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011f84:	d820      	bhi.n	8011fc8 <_printf_float+0x158>
 8011f86:	3901      	subs	r1, #1
 8011f88:	464a      	mov	r2, r9
 8011f8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011f8e:	9107      	str	r1, [sp, #28]
 8011f90:	f7ff ff30 	bl	8011df4 <__exponent>
 8011f94:	9a08      	ldr	r2, [sp, #32]
 8011f96:	9004      	str	r0, [sp, #16]
 8011f98:	1813      	adds	r3, r2, r0
 8011f9a:	2a01      	cmp	r2, #1
 8011f9c:	6123      	str	r3, [r4, #16]
 8011f9e:	dc02      	bgt.n	8011fa6 <_printf_float+0x136>
 8011fa0:	6822      	ldr	r2, [r4, #0]
 8011fa2:	07d2      	lsls	r2, r2, #31
 8011fa4:	d501      	bpl.n	8011faa <_printf_float+0x13a>
 8011fa6:	3301      	adds	r3, #1
 8011fa8:	6123      	str	r3, [r4, #16]
 8011faa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d0a2      	beq.n	8011ef8 <_printf_float+0x88>
 8011fb2:	232d      	movs	r3, #45	; 0x2d
 8011fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fb8:	e79e      	b.n	8011ef8 <_printf_float+0x88>
 8011fba:	9904      	ldr	r1, [sp, #16]
 8011fbc:	2947      	cmp	r1, #71	; 0x47
 8011fbe:	d1c1      	bne.n	8011f44 <_printf_float+0xd4>
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d1bf      	bne.n	8011f44 <_printf_float+0xd4>
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	e7bc      	b.n	8011f42 <_printf_float+0xd2>
 8011fc8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011fcc:	d118      	bne.n	8012000 <_printf_float+0x190>
 8011fce:	2900      	cmp	r1, #0
 8011fd0:	6863      	ldr	r3, [r4, #4]
 8011fd2:	dd0b      	ble.n	8011fec <_printf_float+0x17c>
 8011fd4:	6121      	str	r1, [r4, #16]
 8011fd6:	b913      	cbnz	r3, 8011fde <_printf_float+0x16e>
 8011fd8:	6822      	ldr	r2, [r4, #0]
 8011fda:	07d0      	lsls	r0, r2, #31
 8011fdc:	d502      	bpl.n	8011fe4 <_printf_float+0x174>
 8011fde:	3301      	adds	r3, #1
 8011fe0:	440b      	add	r3, r1
 8011fe2:	6123      	str	r3, [r4, #16]
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	65a1      	str	r1, [r4, #88]	; 0x58
 8011fe8:	9304      	str	r3, [sp, #16]
 8011fea:	e7de      	b.n	8011faa <_printf_float+0x13a>
 8011fec:	b913      	cbnz	r3, 8011ff4 <_printf_float+0x184>
 8011fee:	6822      	ldr	r2, [r4, #0]
 8011ff0:	07d2      	lsls	r2, r2, #31
 8011ff2:	d501      	bpl.n	8011ff8 <_printf_float+0x188>
 8011ff4:	3302      	adds	r3, #2
 8011ff6:	e7f4      	b.n	8011fe2 <_printf_float+0x172>
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	e7f2      	b.n	8011fe2 <_printf_float+0x172>
 8011ffc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012000:	9b08      	ldr	r3, [sp, #32]
 8012002:	4299      	cmp	r1, r3
 8012004:	db05      	blt.n	8012012 <_printf_float+0x1a2>
 8012006:	6823      	ldr	r3, [r4, #0]
 8012008:	6121      	str	r1, [r4, #16]
 801200a:	07d8      	lsls	r0, r3, #31
 801200c:	d5ea      	bpl.n	8011fe4 <_printf_float+0x174>
 801200e:	1c4b      	adds	r3, r1, #1
 8012010:	e7e7      	b.n	8011fe2 <_printf_float+0x172>
 8012012:	2900      	cmp	r1, #0
 8012014:	bfd4      	ite	le
 8012016:	f1c1 0202 	rsble	r2, r1, #2
 801201a:	2201      	movgt	r2, #1
 801201c:	4413      	add	r3, r2
 801201e:	e7e0      	b.n	8011fe2 <_printf_float+0x172>
 8012020:	6823      	ldr	r3, [r4, #0]
 8012022:	055a      	lsls	r2, r3, #21
 8012024:	d407      	bmi.n	8012036 <_printf_float+0x1c6>
 8012026:	6923      	ldr	r3, [r4, #16]
 8012028:	4642      	mov	r2, r8
 801202a:	4631      	mov	r1, r6
 801202c:	4628      	mov	r0, r5
 801202e:	47b8      	blx	r7
 8012030:	3001      	adds	r0, #1
 8012032:	d12a      	bne.n	801208a <_printf_float+0x21a>
 8012034:	e76a      	b.n	8011f0c <_printf_float+0x9c>
 8012036:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801203a:	f240 80e2 	bls.w	8012202 <_printf_float+0x392>
 801203e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012042:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801204a:	d133      	bne.n	80120b4 <_printf_float+0x244>
 801204c:	4a38      	ldr	r2, [pc, #224]	; (8012130 <_printf_float+0x2c0>)
 801204e:	2301      	movs	r3, #1
 8012050:	4631      	mov	r1, r6
 8012052:	4628      	mov	r0, r5
 8012054:	47b8      	blx	r7
 8012056:	3001      	adds	r0, #1
 8012058:	f43f af58 	beq.w	8011f0c <_printf_float+0x9c>
 801205c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012060:	429a      	cmp	r2, r3
 8012062:	db02      	blt.n	801206a <_printf_float+0x1fa>
 8012064:	6823      	ldr	r3, [r4, #0]
 8012066:	07d8      	lsls	r0, r3, #31
 8012068:	d50f      	bpl.n	801208a <_printf_float+0x21a>
 801206a:	4653      	mov	r3, sl
 801206c:	465a      	mov	r2, fp
 801206e:	4631      	mov	r1, r6
 8012070:	4628      	mov	r0, r5
 8012072:	47b8      	blx	r7
 8012074:	3001      	adds	r0, #1
 8012076:	f43f af49 	beq.w	8011f0c <_printf_float+0x9c>
 801207a:	f04f 0800 	mov.w	r8, #0
 801207e:	f104 091a 	add.w	r9, r4, #26
 8012082:	9b08      	ldr	r3, [sp, #32]
 8012084:	3b01      	subs	r3, #1
 8012086:	4543      	cmp	r3, r8
 8012088:	dc09      	bgt.n	801209e <_printf_float+0x22e>
 801208a:	6823      	ldr	r3, [r4, #0]
 801208c:	079b      	lsls	r3, r3, #30
 801208e:	f100 8108 	bmi.w	80122a2 <_printf_float+0x432>
 8012092:	68e0      	ldr	r0, [r4, #12]
 8012094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012096:	4298      	cmp	r0, r3
 8012098:	bfb8      	it	lt
 801209a:	4618      	movlt	r0, r3
 801209c:	e738      	b.n	8011f10 <_printf_float+0xa0>
 801209e:	2301      	movs	r3, #1
 80120a0:	464a      	mov	r2, r9
 80120a2:	4631      	mov	r1, r6
 80120a4:	4628      	mov	r0, r5
 80120a6:	47b8      	blx	r7
 80120a8:	3001      	adds	r0, #1
 80120aa:	f43f af2f 	beq.w	8011f0c <_printf_float+0x9c>
 80120ae:	f108 0801 	add.w	r8, r8, #1
 80120b2:	e7e6      	b.n	8012082 <_printf_float+0x212>
 80120b4:	9b07      	ldr	r3, [sp, #28]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	dc3c      	bgt.n	8012134 <_printf_float+0x2c4>
 80120ba:	4a1d      	ldr	r2, [pc, #116]	; (8012130 <_printf_float+0x2c0>)
 80120bc:	2301      	movs	r3, #1
 80120be:	4631      	mov	r1, r6
 80120c0:	4628      	mov	r0, r5
 80120c2:	47b8      	blx	r7
 80120c4:	3001      	adds	r0, #1
 80120c6:	f43f af21 	beq.w	8011f0c <_printf_float+0x9c>
 80120ca:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80120ce:	4313      	orrs	r3, r2
 80120d0:	d102      	bne.n	80120d8 <_printf_float+0x268>
 80120d2:	6823      	ldr	r3, [r4, #0]
 80120d4:	07d9      	lsls	r1, r3, #31
 80120d6:	d5d8      	bpl.n	801208a <_printf_float+0x21a>
 80120d8:	4653      	mov	r3, sl
 80120da:	465a      	mov	r2, fp
 80120dc:	4631      	mov	r1, r6
 80120de:	4628      	mov	r0, r5
 80120e0:	47b8      	blx	r7
 80120e2:	3001      	adds	r0, #1
 80120e4:	f43f af12 	beq.w	8011f0c <_printf_float+0x9c>
 80120e8:	f04f 0900 	mov.w	r9, #0
 80120ec:	f104 0a1a 	add.w	sl, r4, #26
 80120f0:	9b07      	ldr	r3, [sp, #28]
 80120f2:	425b      	negs	r3, r3
 80120f4:	454b      	cmp	r3, r9
 80120f6:	dc01      	bgt.n	80120fc <_printf_float+0x28c>
 80120f8:	9b08      	ldr	r3, [sp, #32]
 80120fa:	e795      	b.n	8012028 <_printf_float+0x1b8>
 80120fc:	2301      	movs	r3, #1
 80120fe:	4652      	mov	r2, sl
 8012100:	4631      	mov	r1, r6
 8012102:	4628      	mov	r0, r5
 8012104:	47b8      	blx	r7
 8012106:	3001      	adds	r0, #1
 8012108:	f43f af00 	beq.w	8011f0c <_printf_float+0x9c>
 801210c:	f109 0901 	add.w	r9, r9, #1
 8012110:	e7ee      	b.n	80120f0 <_printf_float+0x280>
 8012112:	bf00      	nop
 8012114:	f3af 8000 	nop.w
 8012118:	ffffffff 	.word	0xffffffff
 801211c:	7fefffff 	.word	0x7fefffff
 8012120:	08015130 	.word	0x08015130
 8012124:	08015134 	.word	0x08015134
 8012128:	0801513c 	.word	0x0801513c
 801212c:	08015138 	.word	0x08015138
 8012130:	08015140 	.word	0x08015140
 8012134:	9a08      	ldr	r2, [sp, #32]
 8012136:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012138:	429a      	cmp	r2, r3
 801213a:	bfa8      	it	ge
 801213c:	461a      	movge	r2, r3
 801213e:	2a00      	cmp	r2, #0
 8012140:	4691      	mov	r9, r2
 8012142:	dc38      	bgt.n	80121b6 <_printf_float+0x346>
 8012144:	2300      	movs	r3, #0
 8012146:	9305      	str	r3, [sp, #20]
 8012148:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801214c:	f104 021a 	add.w	r2, r4, #26
 8012150:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012152:	9905      	ldr	r1, [sp, #20]
 8012154:	9304      	str	r3, [sp, #16]
 8012156:	eba3 0309 	sub.w	r3, r3, r9
 801215a:	428b      	cmp	r3, r1
 801215c:	dc33      	bgt.n	80121c6 <_printf_float+0x356>
 801215e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012162:	429a      	cmp	r2, r3
 8012164:	db3c      	blt.n	80121e0 <_printf_float+0x370>
 8012166:	6823      	ldr	r3, [r4, #0]
 8012168:	07da      	lsls	r2, r3, #31
 801216a:	d439      	bmi.n	80121e0 <_printf_float+0x370>
 801216c:	9a08      	ldr	r2, [sp, #32]
 801216e:	9b04      	ldr	r3, [sp, #16]
 8012170:	9907      	ldr	r1, [sp, #28]
 8012172:	1ad3      	subs	r3, r2, r3
 8012174:	eba2 0901 	sub.w	r9, r2, r1
 8012178:	4599      	cmp	r9, r3
 801217a:	bfa8      	it	ge
 801217c:	4699      	movge	r9, r3
 801217e:	f1b9 0f00 	cmp.w	r9, #0
 8012182:	dc35      	bgt.n	80121f0 <_printf_float+0x380>
 8012184:	f04f 0800 	mov.w	r8, #0
 8012188:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801218c:	f104 0a1a 	add.w	sl, r4, #26
 8012190:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012194:	1a9b      	subs	r3, r3, r2
 8012196:	eba3 0309 	sub.w	r3, r3, r9
 801219a:	4543      	cmp	r3, r8
 801219c:	f77f af75 	ble.w	801208a <_printf_float+0x21a>
 80121a0:	2301      	movs	r3, #1
 80121a2:	4652      	mov	r2, sl
 80121a4:	4631      	mov	r1, r6
 80121a6:	4628      	mov	r0, r5
 80121a8:	47b8      	blx	r7
 80121aa:	3001      	adds	r0, #1
 80121ac:	f43f aeae 	beq.w	8011f0c <_printf_float+0x9c>
 80121b0:	f108 0801 	add.w	r8, r8, #1
 80121b4:	e7ec      	b.n	8012190 <_printf_float+0x320>
 80121b6:	4613      	mov	r3, r2
 80121b8:	4631      	mov	r1, r6
 80121ba:	4642      	mov	r2, r8
 80121bc:	4628      	mov	r0, r5
 80121be:	47b8      	blx	r7
 80121c0:	3001      	adds	r0, #1
 80121c2:	d1bf      	bne.n	8012144 <_printf_float+0x2d4>
 80121c4:	e6a2      	b.n	8011f0c <_printf_float+0x9c>
 80121c6:	2301      	movs	r3, #1
 80121c8:	4631      	mov	r1, r6
 80121ca:	4628      	mov	r0, r5
 80121cc:	9204      	str	r2, [sp, #16]
 80121ce:	47b8      	blx	r7
 80121d0:	3001      	adds	r0, #1
 80121d2:	f43f ae9b 	beq.w	8011f0c <_printf_float+0x9c>
 80121d6:	9b05      	ldr	r3, [sp, #20]
 80121d8:	9a04      	ldr	r2, [sp, #16]
 80121da:	3301      	adds	r3, #1
 80121dc:	9305      	str	r3, [sp, #20]
 80121de:	e7b7      	b.n	8012150 <_printf_float+0x2e0>
 80121e0:	4653      	mov	r3, sl
 80121e2:	465a      	mov	r2, fp
 80121e4:	4631      	mov	r1, r6
 80121e6:	4628      	mov	r0, r5
 80121e8:	47b8      	blx	r7
 80121ea:	3001      	adds	r0, #1
 80121ec:	d1be      	bne.n	801216c <_printf_float+0x2fc>
 80121ee:	e68d      	b.n	8011f0c <_printf_float+0x9c>
 80121f0:	9a04      	ldr	r2, [sp, #16]
 80121f2:	464b      	mov	r3, r9
 80121f4:	4442      	add	r2, r8
 80121f6:	4631      	mov	r1, r6
 80121f8:	4628      	mov	r0, r5
 80121fa:	47b8      	blx	r7
 80121fc:	3001      	adds	r0, #1
 80121fe:	d1c1      	bne.n	8012184 <_printf_float+0x314>
 8012200:	e684      	b.n	8011f0c <_printf_float+0x9c>
 8012202:	9a08      	ldr	r2, [sp, #32]
 8012204:	2a01      	cmp	r2, #1
 8012206:	dc01      	bgt.n	801220c <_printf_float+0x39c>
 8012208:	07db      	lsls	r3, r3, #31
 801220a:	d537      	bpl.n	801227c <_printf_float+0x40c>
 801220c:	2301      	movs	r3, #1
 801220e:	4642      	mov	r2, r8
 8012210:	4631      	mov	r1, r6
 8012212:	4628      	mov	r0, r5
 8012214:	47b8      	blx	r7
 8012216:	3001      	adds	r0, #1
 8012218:	f43f ae78 	beq.w	8011f0c <_printf_float+0x9c>
 801221c:	4653      	mov	r3, sl
 801221e:	465a      	mov	r2, fp
 8012220:	4631      	mov	r1, r6
 8012222:	4628      	mov	r0, r5
 8012224:	47b8      	blx	r7
 8012226:	3001      	adds	r0, #1
 8012228:	f43f ae70 	beq.w	8011f0c <_printf_float+0x9c>
 801222c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012230:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012238:	d01b      	beq.n	8012272 <_printf_float+0x402>
 801223a:	9b08      	ldr	r3, [sp, #32]
 801223c:	f108 0201 	add.w	r2, r8, #1
 8012240:	3b01      	subs	r3, #1
 8012242:	4631      	mov	r1, r6
 8012244:	4628      	mov	r0, r5
 8012246:	47b8      	blx	r7
 8012248:	3001      	adds	r0, #1
 801224a:	d10e      	bne.n	801226a <_printf_float+0x3fa>
 801224c:	e65e      	b.n	8011f0c <_printf_float+0x9c>
 801224e:	2301      	movs	r3, #1
 8012250:	464a      	mov	r2, r9
 8012252:	4631      	mov	r1, r6
 8012254:	4628      	mov	r0, r5
 8012256:	47b8      	blx	r7
 8012258:	3001      	adds	r0, #1
 801225a:	f43f ae57 	beq.w	8011f0c <_printf_float+0x9c>
 801225e:	f108 0801 	add.w	r8, r8, #1
 8012262:	9b08      	ldr	r3, [sp, #32]
 8012264:	3b01      	subs	r3, #1
 8012266:	4543      	cmp	r3, r8
 8012268:	dcf1      	bgt.n	801224e <_printf_float+0x3de>
 801226a:	9b04      	ldr	r3, [sp, #16]
 801226c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012270:	e6db      	b.n	801202a <_printf_float+0x1ba>
 8012272:	f04f 0800 	mov.w	r8, #0
 8012276:	f104 091a 	add.w	r9, r4, #26
 801227a:	e7f2      	b.n	8012262 <_printf_float+0x3f2>
 801227c:	2301      	movs	r3, #1
 801227e:	4642      	mov	r2, r8
 8012280:	e7df      	b.n	8012242 <_printf_float+0x3d2>
 8012282:	2301      	movs	r3, #1
 8012284:	464a      	mov	r2, r9
 8012286:	4631      	mov	r1, r6
 8012288:	4628      	mov	r0, r5
 801228a:	47b8      	blx	r7
 801228c:	3001      	adds	r0, #1
 801228e:	f43f ae3d 	beq.w	8011f0c <_printf_float+0x9c>
 8012292:	f108 0801 	add.w	r8, r8, #1
 8012296:	68e3      	ldr	r3, [r4, #12]
 8012298:	9909      	ldr	r1, [sp, #36]	; 0x24
 801229a:	1a5b      	subs	r3, r3, r1
 801229c:	4543      	cmp	r3, r8
 801229e:	dcf0      	bgt.n	8012282 <_printf_float+0x412>
 80122a0:	e6f7      	b.n	8012092 <_printf_float+0x222>
 80122a2:	f04f 0800 	mov.w	r8, #0
 80122a6:	f104 0919 	add.w	r9, r4, #25
 80122aa:	e7f4      	b.n	8012296 <_printf_float+0x426>

080122ac <_printf_common>:
 80122ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122b0:	4616      	mov	r6, r2
 80122b2:	4699      	mov	r9, r3
 80122b4:	688a      	ldr	r2, [r1, #8]
 80122b6:	690b      	ldr	r3, [r1, #16]
 80122b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80122bc:	4293      	cmp	r3, r2
 80122be:	bfb8      	it	lt
 80122c0:	4613      	movlt	r3, r2
 80122c2:	6033      	str	r3, [r6, #0]
 80122c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80122c8:	4607      	mov	r7, r0
 80122ca:	460c      	mov	r4, r1
 80122cc:	b10a      	cbz	r2, 80122d2 <_printf_common+0x26>
 80122ce:	3301      	adds	r3, #1
 80122d0:	6033      	str	r3, [r6, #0]
 80122d2:	6823      	ldr	r3, [r4, #0]
 80122d4:	0699      	lsls	r1, r3, #26
 80122d6:	bf42      	ittt	mi
 80122d8:	6833      	ldrmi	r3, [r6, #0]
 80122da:	3302      	addmi	r3, #2
 80122dc:	6033      	strmi	r3, [r6, #0]
 80122de:	6825      	ldr	r5, [r4, #0]
 80122e0:	f015 0506 	ands.w	r5, r5, #6
 80122e4:	d106      	bne.n	80122f4 <_printf_common+0x48>
 80122e6:	f104 0a19 	add.w	sl, r4, #25
 80122ea:	68e3      	ldr	r3, [r4, #12]
 80122ec:	6832      	ldr	r2, [r6, #0]
 80122ee:	1a9b      	subs	r3, r3, r2
 80122f0:	42ab      	cmp	r3, r5
 80122f2:	dc26      	bgt.n	8012342 <_printf_common+0x96>
 80122f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80122f8:	1e13      	subs	r3, r2, #0
 80122fa:	6822      	ldr	r2, [r4, #0]
 80122fc:	bf18      	it	ne
 80122fe:	2301      	movne	r3, #1
 8012300:	0692      	lsls	r2, r2, #26
 8012302:	d42b      	bmi.n	801235c <_printf_common+0xb0>
 8012304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012308:	4649      	mov	r1, r9
 801230a:	4638      	mov	r0, r7
 801230c:	47c0      	blx	r8
 801230e:	3001      	adds	r0, #1
 8012310:	d01e      	beq.n	8012350 <_printf_common+0xa4>
 8012312:	6823      	ldr	r3, [r4, #0]
 8012314:	68e5      	ldr	r5, [r4, #12]
 8012316:	6832      	ldr	r2, [r6, #0]
 8012318:	f003 0306 	and.w	r3, r3, #6
 801231c:	2b04      	cmp	r3, #4
 801231e:	bf08      	it	eq
 8012320:	1aad      	subeq	r5, r5, r2
 8012322:	68a3      	ldr	r3, [r4, #8]
 8012324:	6922      	ldr	r2, [r4, #16]
 8012326:	bf0c      	ite	eq
 8012328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801232c:	2500      	movne	r5, #0
 801232e:	4293      	cmp	r3, r2
 8012330:	bfc4      	itt	gt
 8012332:	1a9b      	subgt	r3, r3, r2
 8012334:	18ed      	addgt	r5, r5, r3
 8012336:	2600      	movs	r6, #0
 8012338:	341a      	adds	r4, #26
 801233a:	42b5      	cmp	r5, r6
 801233c:	d11a      	bne.n	8012374 <_printf_common+0xc8>
 801233e:	2000      	movs	r0, #0
 8012340:	e008      	b.n	8012354 <_printf_common+0xa8>
 8012342:	2301      	movs	r3, #1
 8012344:	4652      	mov	r2, sl
 8012346:	4649      	mov	r1, r9
 8012348:	4638      	mov	r0, r7
 801234a:	47c0      	blx	r8
 801234c:	3001      	adds	r0, #1
 801234e:	d103      	bne.n	8012358 <_printf_common+0xac>
 8012350:	f04f 30ff 	mov.w	r0, #4294967295
 8012354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012358:	3501      	adds	r5, #1
 801235a:	e7c6      	b.n	80122ea <_printf_common+0x3e>
 801235c:	18e1      	adds	r1, r4, r3
 801235e:	1c5a      	adds	r2, r3, #1
 8012360:	2030      	movs	r0, #48	; 0x30
 8012362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012366:	4422      	add	r2, r4
 8012368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801236c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012370:	3302      	adds	r3, #2
 8012372:	e7c7      	b.n	8012304 <_printf_common+0x58>
 8012374:	2301      	movs	r3, #1
 8012376:	4622      	mov	r2, r4
 8012378:	4649      	mov	r1, r9
 801237a:	4638      	mov	r0, r7
 801237c:	47c0      	blx	r8
 801237e:	3001      	adds	r0, #1
 8012380:	d0e6      	beq.n	8012350 <_printf_common+0xa4>
 8012382:	3601      	adds	r6, #1
 8012384:	e7d9      	b.n	801233a <_printf_common+0x8e>
	...

08012388 <_printf_i>:
 8012388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801238c:	460c      	mov	r4, r1
 801238e:	4691      	mov	r9, r2
 8012390:	7e27      	ldrb	r7, [r4, #24]
 8012392:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012394:	2f78      	cmp	r7, #120	; 0x78
 8012396:	4680      	mov	r8, r0
 8012398:	469a      	mov	sl, r3
 801239a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801239e:	d807      	bhi.n	80123b0 <_printf_i+0x28>
 80123a0:	2f62      	cmp	r7, #98	; 0x62
 80123a2:	d80a      	bhi.n	80123ba <_printf_i+0x32>
 80123a4:	2f00      	cmp	r7, #0
 80123a6:	f000 80d8 	beq.w	801255a <_printf_i+0x1d2>
 80123aa:	2f58      	cmp	r7, #88	; 0x58
 80123ac:	f000 80a3 	beq.w	80124f6 <_printf_i+0x16e>
 80123b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80123b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80123b8:	e03a      	b.n	8012430 <_printf_i+0xa8>
 80123ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80123be:	2b15      	cmp	r3, #21
 80123c0:	d8f6      	bhi.n	80123b0 <_printf_i+0x28>
 80123c2:	a001      	add	r0, pc, #4	; (adr r0, 80123c8 <_printf_i+0x40>)
 80123c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80123c8:	08012421 	.word	0x08012421
 80123cc:	08012435 	.word	0x08012435
 80123d0:	080123b1 	.word	0x080123b1
 80123d4:	080123b1 	.word	0x080123b1
 80123d8:	080123b1 	.word	0x080123b1
 80123dc:	080123b1 	.word	0x080123b1
 80123e0:	08012435 	.word	0x08012435
 80123e4:	080123b1 	.word	0x080123b1
 80123e8:	080123b1 	.word	0x080123b1
 80123ec:	080123b1 	.word	0x080123b1
 80123f0:	080123b1 	.word	0x080123b1
 80123f4:	08012541 	.word	0x08012541
 80123f8:	08012465 	.word	0x08012465
 80123fc:	08012523 	.word	0x08012523
 8012400:	080123b1 	.word	0x080123b1
 8012404:	080123b1 	.word	0x080123b1
 8012408:	08012563 	.word	0x08012563
 801240c:	080123b1 	.word	0x080123b1
 8012410:	08012465 	.word	0x08012465
 8012414:	080123b1 	.word	0x080123b1
 8012418:	080123b1 	.word	0x080123b1
 801241c:	0801252b 	.word	0x0801252b
 8012420:	680b      	ldr	r3, [r1, #0]
 8012422:	1d1a      	adds	r2, r3, #4
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	600a      	str	r2, [r1, #0]
 8012428:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801242c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012430:	2301      	movs	r3, #1
 8012432:	e0a3      	b.n	801257c <_printf_i+0x1f4>
 8012434:	6825      	ldr	r5, [r4, #0]
 8012436:	6808      	ldr	r0, [r1, #0]
 8012438:	062e      	lsls	r6, r5, #24
 801243a:	f100 0304 	add.w	r3, r0, #4
 801243e:	d50a      	bpl.n	8012456 <_printf_i+0xce>
 8012440:	6805      	ldr	r5, [r0, #0]
 8012442:	600b      	str	r3, [r1, #0]
 8012444:	2d00      	cmp	r5, #0
 8012446:	da03      	bge.n	8012450 <_printf_i+0xc8>
 8012448:	232d      	movs	r3, #45	; 0x2d
 801244a:	426d      	negs	r5, r5
 801244c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012450:	485e      	ldr	r0, [pc, #376]	; (80125cc <_printf_i+0x244>)
 8012452:	230a      	movs	r3, #10
 8012454:	e019      	b.n	801248a <_printf_i+0x102>
 8012456:	f015 0f40 	tst.w	r5, #64	; 0x40
 801245a:	6805      	ldr	r5, [r0, #0]
 801245c:	600b      	str	r3, [r1, #0]
 801245e:	bf18      	it	ne
 8012460:	b22d      	sxthne	r5, r5
 8012462:	e7ef      	b.n	8012444 <_printf_i+0xbc>
 8012464:	680b      	ldr	r3, [r1, #0]
 8012466:	6825      	ldr	r5, [r4, #0]
 8012468:	1d18      	adds	r0, r3, #4
 801246a:	6008      	str	r0, [r1, #0]
 801246c:	0628      	lsls	r0, r5, #24
 801246e:	d501      	bpl.n	8012474 <_printf_i+0xec>
 8012470:	681d      	ldr	r5, [r3, #0]
 8012472:	e002      	b.n	801247a <_printf_i+0xf2>
 8012474:	0669      	lsls	r1, r5, #25
 8012476:	d5fb      	bpl.n	8012470 <_printf_i+0xe8>
 8012478:	881d      	ldrh	r5, [r3, #0]
 801247a:	4854      	ldr	r0, [pc, #336]	; (80125cc <_printf_i+0x244>)
 801247c:	2f6f      	cmp	r7, #111	; 0x6f
 801247e:	bf0c      	ite	eq
 8012480:	2308      	moveq	r3, #8
 8012482:	230a      	movne	r3, #10
 8012484:	2100      	movs	r1, #0
 8012486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801248a:	6866      	ldr	r6, [r4, #4]
 801248c:	60a6      	str	r6, [r4, #8]
 801248e:	2e00      	cmp	r6, #0
 8012490:	bfa2      	ittt	ge
 8012492:	6821      	ldrge	r1, [r4, #0]
 8012494:	f021 0104 	bicge.w	r1, r1, #4
 8012498:	6021      	strge	r1, [r4, #0]
 801249a:	b90d      	cbnz	r5, 80124a0 <_printf_i+0x118>
 801249c:	2e00      	cmp	r6, #0
 801249e:	d04d      	beq.n	801253c <_printf_i+0x1b4>
 80124a0:	4616      	mov	r6, r2
 80124a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80124a6:	fb03 5711 	mls	r7, r3, r1, r5
 80124aa:	5dc7      	ldrb	r7, [r0, r7]
 80124ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80124b0:	462f      	mov	r7, r5
 80124b2:	42bb      	cmp	r3, r7
 80124b4:	460d      	mov	r5, r1
 80124b6:	d9f4      	bls.n	80124a2 <_printf_i+0x11a>
 80124b8:	2b08      	cmp	r3, #8
 80124ba:	d10b      	bne.n	80124d4 <_printf_i+0x14c>
 80124bc:	6823      	ldr	r3, [r4, #0]
 80124be:	07df      	lsls	r7, r3, #31
 80124c0:	d508      	bpl.n	80124d4 <_printf_i+0x14c>
 80124c2:	6923      	ldr	r3, [r4, #16]
 80124c4:	6861      	ldr	r1, [r4, #4]
 80124c6:	4299      	cmp	r1, r3
 80124c8:	bfde      	ittt	le
 80124ca:	2330      	movle	r3, #48	; 0x30
 80124cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80124d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80124d4:	1b92      	subs	r2, r2, r6
 80124d6:	6122      	str	r2, [r4, #16]
 80124d8:	f8cd a000 	str.w	sl, [sp]
 80124dc:	464b      	mov	r3, r9
 80124de:	aa03      	add	r2, sp, #12
 80124e0:	4621      	mov	r1, r4
 80124e2:	4640      	mov	r0, r8
 80124e4:	f7ff fee2 	bl	80122ac <_printf_common>
 80124e8:	3001      	adds	r0, #1
 80124ea:	d14c      	bne.n	8012586 <_printf_i+0x1fe>
 80124ec:	f04f 30ff 	mov.w	r0, #4294967295
 80124f0:	b004      	add	sp, #16
 80124f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124f6:	4835      	ldr	r0, [pc, #212]	; (80125cc <_printf_i+0x244>)
 80124f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80124fc:	6823      	ldr	r3, [r4, #0]
 80124fe:	680e      	ldr	r6, [r1, #0]
 8012500:	061f      	lsls	r7, r3, #24
 8012502:	f856 5b04 	ldr.w	r5, [r6], #4
 8012506:	600e      	str	r6, [r1, #0]
 8012508:	d514      	bpl.n	8012534 <_printf_i+0x1ac>
 801250a:	07d9      	lsls	r1, r3, #31
 801250c:	bf44      	itt	mi
 801250e:	f043 0320 	orrmi.w	r3, r3, #32
 8012512:	6023      	strmi	r3, [r4, #0]
 8012514:	b91d      	cbnz	r5, 801251e <_printf_i+0x196>
 8012516:	6823      	ldr	r3, [r4, #0]
 8012518:	f023 0320 	bic.w	r3, r3, #32
 801251c:	6023      	str	r3, [r4, #0]
 801251e:	2310      	movs	r3, #16
 8012520:	e7b0      	b.n	8012484 <_printf_i+0xfc>
 8012522:	6823      	ldr	r3, [r4, #0]
 8012524:	f043 0320 	orr.w	r3, r3, #32
 8012528:	6023      	str	r3, [r4, #0]
 801252a:	2378      	movs	r3, #120	; 0x78
 801252c:	4828      	ldr	r0, [pc, #160]	; (80125d0 <_printf_i+0x248>)
 801252e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012532:	e7e3      	b.n	80124fc <_printf_i+0x174>
 8012534:	065e      	lsls	r6, r3, #25
 8012536:	bf48      	it	mi
 8012538:	b2ad      	uxthmi	r5, r5
 801253a:	e7e6      	b.n	801250a <_printf_i+0x182>
 801253c:	4616      	mov	r6, r2
 801253e:	e7bb      	b.n	80124b8 <_printf_i+0x130>
 8012540:	680b      	ldr	r3, [r1, #0]
 8012542:	6826      	ldr	r6, [r4, #0]
 8012544:	6960      	ldr	r0, [r4, #20]
 8012546:	1d1d      	adds	r5, r3, #4
 8012548:	600d      	str	r5, [r1, #0]
 801254a:	0635      	lsls	r5, r6, #24
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	d501      	bpl.n	8012554 <_printf_i+0x1cc>
 8012550:	6018      	str	r0, [r3, #0]
 8012552:	e002      	b.n	801255a <_printf_i+0x1d2>
 8012554:	0671      	lsls	r1, r6, #25
 8012556:	d5fb      	bpl.n	8012550 <_printf_i+0x1c8>
 8012558:	8018      	strh	r0, [r3, #0]
 801255a:	2300      	movs	r3, #0
 801255c:	6123      	str	r3, [r4, #16]
 801255e:	4616      	mov	r6, r2
 8012560:	e7ba      	b.n	80124d8 <_printf_i+0x150>
 8012562:	680b      	ldr	r3, [r1, #0]
 8012564:	1d1a      	adds	r2, r3, #4
 8012566:	600a      	str	r2, [r1, #0]
 8012568:	681e      	ldr	r6, [r3, #0]
 801256a:	6862      	ldr	r2, [r4, #4]
 801256c:	2100      	movs	r1, #0
 801256e:	4630      	mov	r0, r6
 8012570:	f7ed febe 	bl	80002f0 <memchr>
 8012574:	b108      	cbz	r0, 801257a <_printf_i+0x1f2>
 8012576:	1b80      	subs	r0, r0, r6
 8012578:	6060      	str	r0, [r4, #4]
 801257a:	6863      	ldr	r3, [r4, #4]
 801257c:	6123      	str	r3, [r4, #16]
 801257e:	2300      	movs	r3, #0
 8012580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012584:	e7a8      	b.n	80124d8 <_printf_i+0x150>
 8012586:	6923      	ldr	r3, [r4, #16]
 8012588:	4632      	mov	r2, r6
 801258a:	4649      	mov	r1, r9
 801258c:	4640      	mov	r0, r8
 801258e:	47d0      	blx	sl
 8012590:	3001      	adds	r0, #1
 8012592:	d0ab      	beq.n	80124ec <_printf_i+0x164>
 8012594:	6823      	ldr	r3, [r4, #0]
 8012596:	079b      	lsls	r3, r3, #30
 8012598:	d413      	bmi.n	80125c2 <_printf_i+0x23a>
 801259a:	68e0      	ldr	r0, [r4, #12]
 801259c:	9b03      	ldr	r3, [sp, #12]
 801259e:	4298      	cmp	r0, r3
 80125a0:	bfb8      	it	lt
 80125a2:	4618      	movlt	r0, r3
 80125a4:	e7a4      	b.n	80124f0 <_printf_i+0x168>
 80125a6:	2301      	movs	r3, #1
 80125a8:	4632      	mov	r2, r6
 80125aa:	4649      	mov	r1, r9
 80125ac:	4640      	mov	r0, r8
 80125ae:	47d0      	blx	sl
 80125b0:	3001      	adds	r0, #1
 80125b2:	d09b      	beq.n	80124ec <_printf_i+0x164>
 80125b4:	3501      	adds	r5, #1
 80125b6:	68e3      	ldr	r3, [r4, #12]
 80125b8:	9903      	ldr	r1, [sp, #12]
 80125ba:	1a5b      	subs	r3, r3, r1
 80125bc:	42ab      	cmp	r3, r5
 80125be:	dcf2      	bgt.n	80125a6 <_printf_i+0x21e>
 80125c0:	e7eb      	b.n	801259a <_printf_i+0x212>
 80125c2:	2500      	movs	r5, #0
 80125c4:	f104 0619 	add.w	r6, r4, #25
 80125c8:	e7f5      	b.n	80125b6 <_printf_i+0x22e>
 80125ca:	bf00      	nop
 80125cc:	08015142 	.word	0x08015142
 80125d0:	08015153 	.word	0x08015153

080125d4 <iprintf>:
 80125d4:	b40f      	push	{r0, r1, r2, r3}
 80125d6:	4b0a      	ldr	r3, [pc, #40]	; (8012600 <iprintf+0x2c>)
 80125d8:	b513      	push	{r0, r1, r4, lr}
 80125da:	681c      	ldr	r4, [r3, #0]
 80125dc:	b124      	cbz	r4, 80125e8 <iprintf+0x14>
 80125de:	69a3      	ldr	r3, [r4, #24]
 80125e0:	b913      	cbnz	r3, 80125e8 <iprintf+0x14>
 80125e2:	4620      	mov	r0, r4
 80125e4:	f001 f86c 	bl	80136c0 <__sinit>
 80125e8:	ab05      	add	r3, sp, #20
 80125ea:	9a04      	ldr	r2, [sp, #16]
 80125ec:	68a1      	ldr	r1, [r4, #8]
 80125ee:	9301      	str	r3, [sp, #4]
 80125f0:	4620      	mov	r0, r4
 80125f2:	f001 fde7 	bl	80141c4 <_vfiprintf_r>
 80125f6:	b002      	add	sp, #8
 80125f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125fc:	b004      	add	sp, #16
 80125fe:	4770      	bx	lr
 8012600:	24000024 	.word	0x24000024

08012604 <_puts_r>:
 8012604:	b570      	push	{r4, r5, r6, lr}
 8012606:	460e      	mov	r6, r1
 8012608:	4605      	mov	r5, r0
 801260a:	b118      	cbz	r0, 8012614 <_puts_r+0x10>
 801260c:	6983      	ldr	r3, [r0, #24]
 801260e:	b90b      	cbnz	r3, 8012614 <_puts_r+0x10>
 8012610:	f001 f856 	bl	80136c0 <__sinit>
 8012614:	69ab      	ldr	r3, [r5, #24]
 8012616:	68ac      	ldr	r4, [r5, #8]
 8012618:	b913      	cbnz	r3, 8012620 <_puts_r+0x1c>
 801261a:	4628      	mov	r0, r5
 801261c:	f001 f850 	bl	80136c0 <__sinit>
 8012620:	4b2c      	ldr	r3, [pc, #176]	; (80126d4 <_puts_r+0xd0>)
 8012622:	429c      	cmp	r4, r3
 8012624:	d120      	bne.n	8012668 <_puts_r+0x64>
 8012626:	686c      	ldr	r4, [r5, #4]
 8012628:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801262a:	07db      	lsls	r3, r3, #31
 801262c:	d405      	bmi.n	801263a <_puts_r+0x36>
 801262e:	89a3      	ldrh	r3, [r4, #12]
 8012630:	0598      	lsls	r0, r3, #22
 8012632:	d402      	bmi.n	801263a <_puts_r+0x36>
 8012634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012636:	f001 f8e6 	bl	8013806 <__retarget_lock_acquire_recursive>
 801263a:	89a3      	ldrh	r3, [r4, #12]
 801263c:	0719      	lsls	r1, r3, #28
 801263e:	d51d      	bpl.n	801267c <_puts_r+0x78>
 8012640:	6923      	ldr	r3, [r4, #16]
 8012642:	b1db      	cbz	r3, 801267c <_puts_r+0x78>
 8012644:	3e01      	subs	r6, #1
 8012646:	68a3      	ldr	r3, [r4, #8]
 8012648:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801264c:	3b01      	subs	r3, #1
 801264e:	60a3      	str	r3, [r4, #8]
 8012650:	bb39      	cbnz	r1, 80126a2 <_puts_r+0x9e>
 8012652:	2b00      	cmp	r3, #0
 8012654:	da38      	bge.n	80126c8 <_puts_r+0xc4>
 8012656:	4622      	mov	r2, r4
 8012658:	210a      	movs	r1, #10
 801265a:	4628      	mov	r0, r5
 801265c:	f000 f848 	bl	80126f0 <__swbuf_r>
 8012660:	3001      	adds	r0, #1
 8012662:	d011      	beq.n	8012688 <_puts_r+0x84>
 8012664:	250a      	movs	r5, #10
 8012666:	e011      	b.n	801268c <_puts_r+0x88>
 8012668:	4b1b      	ldr	r3, [pc, #108]	; (80126d8 <_puts_r+0xd4>)
 801266a:	429c      	cmp	r4, r3
 801266c:	d101      	bne.n	8012672 <_puts_r+0x6e>
 801266e:	68ac      	ldr	r4, [r5, #8]
 8012670:	e7da      	b.n	8012628 <_puts_r+0x24>
 8012672:	4b1a      	ldr	r3, [pc, #104]	; (80126dc <_puts_r+0xd8>)
 8012674:	429c      	cmp	r4, r3
 8012676:	bf08      	it	eq
 8012678:	68ec      	ldreq	r4, [r5, #12]
 801267a:	e7d5      	b.n	8012628 <_puts_r+0x24>
 801267c:	4621      	mov	r1, r4
 801267e:	4628      	mov	r0, r5
 8012680:	f000 f888 	bl	8012794 <__swsetup_r>
 8012684:	2800      	cmp	r0, #0
 8012686:	d0dd      	beq.n	8012644 <_puts_r+0x40>
 8012688:	f04f 35ff 	mov.w	r5, #4294967295
 801268c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801268e:	07da      	lsls	r2, r3, #31
 8012690:	d405      	bmi.n	801269e <_puts_r+0x9a>
 8012692:	89a3      	ldrh	r3, [r4, #12]
 8012694:	059b      	lsls	r3, r3, #22
 8012696:	d402      	bmi.n	801269e <_puts_r+0x9a>
 8012698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801269a:	f001 f8b5 	bl	8013808 <__retarget_lock_release_recursive>
 801269e:	4628      	mov	r0, r5
 80126a0:	bd70      	pop	{r4, r5, r6, pc}
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	da04      	bge.n	80126b0 <_puts_r+0xac>
 80126a6:	69a2      	ldr	r2, [r4, #24]
 80126a8:	429a      	cmp	r2, r3
 80126aa:	dc06      	bgt.n	80126ba <_puts_r+0xb6>
 80126ac:	290a      	cmp	r1, #10
 80126ae:	d004      	beq.n	80126ba <_puts_r+0xb6>
 80126b0:	6823      	ldr	r3, [r4, #0]
 80126b2:	1c5a      	adds	r2, r3, #1
 80126b4:	6022      	str	r2, [r4, #0]
 80126b6:	7019      	strb	r1, [r3, #0]
 80126b8:	e7c5      	b.n	8012646 <_puts_r+0x42>
 80126ba:	4622      	mov	r2, r4
 80126bc:	4628      	mov	r0, r5
 80126be:	f000 f817 	bl	80126f0 <__swbuf_r>
 80126c2:	3001      	adds	r0, #1
 80126c4:	d1bf      	bne.n	8012646 <_puts_r+0x42>
 80126c6:	e7df      	b.n	8012688 <_puts_r+0x84>
 80126c8:	6823      	ldr	r3, [r4, #0]
 80126ca:	250a      	movs	r5, #10
 80126cc:	1c5a      	adds	r2, r3, #1
 80126ce:	6022      	str	r2, [r4, #0]
 80126d0:	701d      	strb	r5, [r3, #0]
 80126d2:	e7db      	b.n	801268c <_puts_r+0x88>
 80126d4:	08015218 	.word	0x08015218
 80126d8:	08015238 	.word	0x08015238
 80126dc:	080151f8 	.word	0x080151f8

080126e0 <puts>:
 80126e0:	4b02      	ldr	r3, [pc, #8]	; (80126ec <puts+0xc>)
 80126e2:	4601      	mov	r1, r0
 80126e4:	6818      	ldr	r0, [r3, #0]
 80126e6:	f7ff bf8d 	b.w	8012604 <_puts_r>
 80126ea:	bf00      	nop
 80126ec:	24000024 	.word	0x24000024

080126f0 <__swbuf_r>:
 80126f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126f2:	460e      	mov	r6, r1
 80126f4:	4614      	mov	r4, r2
 80126f6:	4605      	mov	r5, r0
 80126f8:	b118      	cbz	r0, 8012702 <__swbuf_r+0x12>
 80126fa:	6983      	ldr	r3, [r0, #24]
 80126fc:	b90b      	cbnz	r3, 8012702 <__swbuf_r+0x12>
 80126fe:	f000 ffdf 	bl	80136c0 <__sinit>
 8012702:	4b21      	ldr	r3, [pc, #132]	; (8012788 <__swbuf_r+0x98>)
 8012704:	429c      	cmp	r4, r3
 8012706:	d12b      	bne.n	8012760 <__swbuf_r+0x70>
 8012708:	686c      	ldr	r4, [r5, #4]
 801270a:	69a3      	ldr	r3, [r4, #24]
 801270c:	60a3      	str	r3, [r4, #8]
 801270e:	89a3      	ldrh	r3, [r4, #12]
 8012710:	071a      	lsls	r2, r3, #28
 8012712:	d52f      	bpl.n	8012774 <__swbuf_r+0x84>
 8012714:	6923      	ldr	r3, [r4, #16]
 8012716:	b36b      	cbz	r3, 8012774 <__swbuf_r+0x84>
 8012718:	6923      	ldr	r3, [r4, #16]
 801271a:	6820      	ldr	r0, [r4, #0]
 801271c:	1ac0      	subs	r0, r0, r3
 801271e:	6963      	ldr	r3, [r4, #20]
 8012720:	b2f6      	uxtb	r6, r6
 8012722:	4283      	cmp	r3, r0
 8012724:	4637      	mov	r7, r6
 8012726:	dc04      	bgt.n	8012732 <__swbuf_r+0x42>
 8012728:	4621      	mov	r1, r4
 801272a:	4628      	mov	r0, r5
 801272c:	f000 ff34 	bl	8013598 <_fflush_r>
 8012730:	bb30      	cbnz	r0, 8012780 <__swbuf_r+0x90>
 8012732:	68a3      	ldr	r3, [r4, #8]
 8012734:	3b01      	subs	r3, #1
 8012736:	60a3      	str	r3, [r4, #8]
 8012738:	6823      	ldr	r3, [r4, #0]
 801273a:	1c5a      	adds	r2, r3, #1
 801273c:	6022      	str	r2, [r4, #0]
 801273e:	701e      	strb	r6, [r3, #0]
 8012740:	6963      	ldr	r3, [r4, #20]
 8012742:	3001      	adds	r0, #1
 8012744:	4283      	cmp	r3, r0
 8012746:	d004      	beq.n	8012752 <__swbuf_r+0x62>
 8012748:	89a3      	ldrh	r3, [r4, #12]
 801274a:	07db      	lsls	r3, r3, #31
 801274c:	d506      	bpl.n	801275c <__swbuf_r+0x6c>
 801274e:	2e0a      	cmp	r6, #10
 8012750:	d104      	bne.n	801275c <__swbuf_r+0x6c>
 8012752:	4621      	mov	r1, r4
 8012754:	4628      	mov	r0, r5
 8012756:	f000 ff1f 	bl	8013598 <_fflush_r>
 801275a:	b988      	cbnz	r0, 8012780 <__swbuf_r+0x90>
 801275c:	4638      	mov	r0, r7
 801275e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012760:	4b0a      	ldr	r3, [pc, #40]	; (801278c <__swbuf_r+0x9c>)
 8012762:	429c      	cmp	r4, r3
 8012764:	d101      	bne.n	801276a <__swbuf_r+0x7a>
 8012766:	68ac      	ldr	r4, [r5, #8]
 8012768:	e7cf      	b.n	801270a <__swbuf_r+0x1a>
 801276a:	4b09      	ldr	r3, [pc, #36]	; (8012790 <__swbuf_r+0xa0>)
 801276c:	429c      	cmp	r4, r3
 801276e:	bf08      	it	eq
 8012770:	68ec      	ldreq	r4, [r5, #12]
 8012772:	e7ca      	b.n	801270a <__swbuf_r+0x1a>
 8012774:	4621      	mov	r1, r4
 8012776:	4628      	mov	r0, r5
 8012778:	f000 f80c 	bl	8012794 <__swsetup_r>
 801277c:	2800      	cmp	r0, #0
 801277e:	d0cb      	beq.n	8012718 <__swbuf_r+0x28>
 8012780:	f04f 37ff 	mov.w	r7, #4294967295
 8012784:	e7ea      	b.n	801275c <__swbuf_r+0x6c>
 8012786:	bf00      	nop
 8012788:	08015218 	.word	0x08015218
 801278c:	08015238 	.word	0x08015238
 8012790:	080151f8 	.word	0x080151f8

08012794 <__swsetup_r>:
 8012794:	4b32      	ldr	r3, [pc, #200]	; (8012860 <__swsetup_r+0xcc>)
 8012796:	b570      	push	{r4, r5, r6, lr}
 8012798:	681d      	ldr	r5, [r3, #0]
 801279a:	4606      	mov	r6, r0
 801279c:	460c      	mov	r4, r1
 801279e:	b125      	cbz	r5, 80127aa <__swsetup_r+0x16>
 80127a0:	69ab      	ldr	r3, [r5, #24]
 80127a2:	b913      	cbnz	r3, 80127aa <__swsetup_r+0x16>
 80127a4:	4628      	mov	r0, r5
 80127a6:	f000 ff8b 	bl	80136c0 <__sinit>
 80127aa:	4b2e      	ldr	r3, [pc, #184]	; (8012864 <__swsetup_r+0xd0>)
 80127ac:	429c      	cmp	r4, r3
 80127ae:	d10f      	bne.n	80127d0 <__swsetup_r+0x3c>
 80127b0:	686c      	ldr	r4, [r5, #4]
 80127b2:	89a3      	ldrh	r3, [r4, #12]
 80127b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80127b8:	0719      	lsls	r1, r3, #28
 80127ba:	d42c      	bmi.n	8012816 <__swsetup_r+0x82>
 80127bc:	06dd      	lsls	r5, r3, #27
 80127be:	d411      	bmi.n	80127e4 <__swsetup_r+0x50>
 80127c0:	2309      	movs	r3, #9
 80127c2:	6033      	str	r3, [r6, #0]
 80127c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80127c8:	81a3      	strh	r3, [r4, #12]
 80127ca:	f04f 30ff 	mov.w	r0, #4294967295
 80127ce:	e03e      	b.n	801284e <__swsetup_r+0xba>
 80127d0:	4b25      	ldr	r3, [pc, #148]	; (8012868 <__swsetup_r+0xd4>)
 80127d2:	429c      	cmp	r4, r3
 80127d4:	d101      	bne.n	80127da <__swsetup_r+0x46>
 80127d6:	68ac      	ldr	r4, [r5, #8]
 80127d8:	e7eb      	b.n	80127b2 <__swsetup_r+0x1e>
 80127da:	4b24      	ldr	r3, [pc, #144]	; (801286c <__swsetup_r+0xd8>)
 80127dc:	429c      	cmp	r4, r3
 80127de:	bf08      	it	eq
 80127e0:	68ec      	ldreq	r4, [r5, #12]
 80127e2:	e7e6      	b.n	80127b2 <__swsetup_r+0x1e>
 80127e4:	0758      	lsls	r0, r3, #29
 80127e6:	d512      	bpl.n	801280e <__swsetup_r+0x7a>
 80127e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80127ea:	b141      	cbz	r1, 80127fe <__swsetup_r+0x6a>
 80127ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80127f0:	4299      	cmp	r1, r3
 80127f2:	d002      	beq.n	80127fa <__swsetup_r+0x66>
 80127f4:	4630      	mov	r0, r6
 80127f6:	f001 fc11 	bl	801401c <_free_r>
 80127fa:	2300      	movs	r3, #0
 80127fc:	6363      	str	r3, [r4, #52]	; 0x34
 80127fe:	89a3      	ldrh	r3, [r4, #12]
 8012800:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012804:	81a3      	strh	r3, [r4, #12]
 8012806:	2300      	movs	r3, #0
 8012808:	6063      	str	r3, [r4, #4]
 801280a:	6923      	ldr	r3, [r4, #16]
 801280c:	6023      	str	r3, [r4, #0]
 801280e:	89a3      	ldrh	r3, [r4, #12]
 8012810:	f043 0308 	orr.w	r3, r3, #8
 8012814:	81a3      	strh	r3, [r4, #12]
 8012816:	6923      	ldr	r3, [r4, #16]
 8012818:	b94b      	cbnz	r3, 801282e <__swsetup_r+0x9a>
 801281a:	89a3      	ldrh	r3, [r4, #12]
 801281c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012824:	d003      	beq.n	801282e <__swsetup_r+0x9a>
 8012826:	4621      	mov	r1, r4
 8012828:	4630      	mov	r0, r6
 801282a:	f001 f813 	bl	8013854 <__smakebuf_r>
 801282e:	89a0      	ldrh	r0, [r4, #12]
 8012830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012834:	f010 0301 	ands.w	r3, r0, #1
 8012838:	d00a      	beq.n	8012850 <__swsetup_r+0xbc>
 801283a:	2300      	movs	r3, #0
 801283c:	60a3      	str	r3, [r4, #8]
 801283e:	6963      	ldr	r3, [r4, #20]
 8012840:	425b      	negs	r3, r3
 8012842:	61a3      	str	r3, [r4, #24]
 8012844:	6923      	ldr	r3, [r4, #16]
 8012846:	b943      	cbnz	r3, 801285a <__swsetup_r+0xc6>
 8012848:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801284c:	d1ba      	bne.n	80127c4 <__swsetup_r+0x30>
 801284e:	bd70      	pop	{r4, r5, r6, pc}
 8012850:	0781      	lsls	r1, r0, #30
 8012852:	bf58      	it	pl
 8012854:	6963      	ldrpl	r3, [r4, #20]
 8012856:	60a3      	str	r3, [r4, #8]
 8012858:	e7f4      	b.n	8012844 <__swsetup_r+0xb0>
 801285a:	2000      	movs	r0, #0
 801285c:	e7f7      	b.n	801284e <__swsetup_r+0xba>
 801285e:	bf00      	nop
 8012860:	24000024 	.word	0x24000024
 8012864:	08015218 	.word	0x08015218
 8012868:	08015238 	.word	0x08015238
 801286c:	080151f8 	.word	0x080151f8

08012870 <quorem>:
 8012870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012874:	6903      	ldr	r3, [r0, #16]
 8012876:	690c      	ldr	r4, [r1, #16]
 8012878:	42a3      	cmp	r3, r4
 801287a:	4607      	mov	r7, r0
 801287c:	f2c0 8081 	blt.w	8012982 <quorem+0x112>
 8012880:	3c01      	subs	r4, #1
 8012882:	f101 0814 	add.w	r8, r1, #20
 8012886:	f100 0514 	add.w	r5, r0, #20
 801288a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801288e:	9301      	str	r3, [sp, #4]
 8012890:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012894:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012898:	3301      	adds	r3, #1
 801289a:	429a      	cmp	r2, r3
 801289c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80128a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80128a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80128a8:	d331      	bcc.n	801290e <quorem+0x9e>
 80128aa:	f04f 0e00 	mov.w	lr, #0
 80128ae:	4640      	mov	r0, r8
 80128b0:	46ac      	mov	ip, r5
 80128b2:	46f2      	mov	sl, lr
 80128b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80128b8:	b293      	uxth	r3, r2
 80128ba:	fb06 e303 	mla	r3, r6, r3, lr
 80128be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80128c2:	b29b      	uxth	r3, r3
 80128c4:	ebaa 0303 	sub.w	r3, sl, r3
 80128c8:	0c12      	lsrs	r2, r2, #16
 80128ca:	f8dc a000 	ldr.w	sl, [ip]
 80128ce:	fb06 e202 	mla	r2, r6, r2, lr
 80128d2:	fa13 f38a 	uxtah	r3, r3, sl
 80128d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80128da:	fa1f fa82 	uxth.w	sl, r2
 80128de:	f8dc 2000 	ldr.w	r2, [ip]
 80128e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80128e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80128ea:	b29b      	uxth	r3, r3
 80128ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80128f0:	4581      	cmp	r9, r0
 80128f2:	f84c 3b04 	str.w	r3, [ip], #4
 80128f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80128fa:	d2db      	bcs.n	80128b4 <quorem+0x44>
 80128fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8012900:	b92b      	cbnz	r3, 801290e <quorem+0x9e>
 8012902:	9b01      	ldr	r3, [sp, #4]
 8012904:	3b04      	subs	r3, #4
 8012906:	429d      	cmp	r5, r3
 8012908:	461a      	mov	r2, r3
 801290a:	d32e      	bcc.n	801296a <quorem+0xfa>
 801290c:	613c      	str	r4, [r7, #16]
 801290e:	4638      	mov	r0, r7
 8012910:	f001 fa74 	bl	8013dfc <__mcmp>
 8012914:	2800      	cmp	r0, #0
 8012916:	db24      	blt.n	8012962 <quorem+0xf2>
 8012918:	3601      	adds	r6, #1
 801291a:	4628      	mov	r0, r5
 801291c:	f04f 0c00 	mov.w	ip, #0
 8012920:	f858 2b04 	ldr.w	r2, [r8], #4
 8012924:	f8d0 e000 	ldr.w	lr, [r0]
 8012928:	b293      	uxth	r3, r2
 801292a:	ebac 0303 	sub.w	r3, ip, r3
 801292e:	0c12      	lsrs	r2, r2, #16
 8012930:	fa13 f38e 	uxtah	r3, r3, lr
 8012934:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012938:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801293c:	b29b      	uxth	r3, r3
 801293e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012942:	45c1      	cmp	r9, r8
 8012944:	f840 3b04 	str.w	r3, [r0], #4
 8012948:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801294c:	d2e8      	bcs.n	8012920 <quorem+0xb0>
 801294e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012956:	b922      	cbnz	r2, 8012962 <quorem+0xf2>
 8012958:	3b04      	subs	r3, #4
 801295a:	429d      	cmp	r5, r3
 801295c:	461a      	mov	r2, r3
 801295e:	d30a      	bcc.n	8012976 <quorem+0x106>
 8012960:	613c      	str	r4, [r7, #16]
 8012962:	4630      	mov	r0, r6
 8012964:	b003      	add	sp, #12
 8012966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801296a:	6812      	ldr	r2, [r2, #0]
 801296c:	3b04      	subs	r3, #4
 801296e:	2a00      	cmp	r2, #0
 8012970:	d1cc      	bne.n	801290c <quorem+0x9c>
 8012972:	3c01      	subs	r4, #1
 8012974:	e7c7      	b.n	8012906 <quorem+0x96>
 8012976:	6812      	ldr	r2, [r2, #0]
 8012978:	3b04      	subs	r3, #4
 801297a:	2a00      	cmp	r2, #0
 801297c:	d1f0      	bne.n	8012960 <quorem+0xf0>
 801297e:	3c01      	subs	r4, #1
 8012980:	e7eb      	b.n	801295a <quorem+0xea>
 8012982:	2000      	movs	r0, #0
 8012984:	e7ee      	b.n	8012964 <quorem+0xf4>
	...

08012988 <_dtoa_r>:
 8012988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801298c:	ec59 8b10 	vmov	r8, r9, d0
 8012990:	b095      	sub	sp, #84	; 0x54
 8012992:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012994:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8012996:	9107      	str	r1, [sp, #28]
 8012998:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801299c:	4606      	mov	r6, r0
 801299e:	9209      	str	r2, [sp, #36]	; 0x24
 80129a0:	9310      	str	r3, [sp, #64]	; 0x40
 80129a2:	b975      	cbnz	r5, 80129c2 <_dtoa_r+0x3a>
 80129a4:	2010      	movs	r0, #16
 80129a6:	f000 ff95 	bl	80138d4 <malloc>
 80129aa:	4602      	mov	r2, r0
 80129ac:	6270      	str	r0, [r6, #36]	; 0x24
 80129ae:	b920      	cbnz	r0, 80129ba <_dtoa_r+0x32>
 80129b0:	4bab      	ldr	r3, [pc, #684]	; (8012c60 <_dtoa_r+0x2d8>)
 80129b2:	21ea      	movs	r1, #234	; 0xea
 80129b4:	48ab      	ldr	r0, [pc, #684]	; (8012c64 <_dtoa_r+0x2dc>)
 80129b6:	f001 fd9b 	bl	80144f0 <__assert_func>
 80129ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80129be:	6005      	str	r5, [r0, #0]
 80129c0:	60c5      	str	r5, [r0, #12]
 80129c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80129c4:	6819      	ldr	r1, [r3, #0]
 80129c6:	b151      	cbz	r1, 80129de <_dtoa_r+0x56>
 80129c8:	685a      	ldr	r2, [r3, #4]
 80129ca:	604a      	str	r2, [r1, #4]
 80129cc:	2301      	movs	r3, #1
 80129ce:	4093      	lsls	r3, r2
 80129d0:	608b      	str	r3, [r1, #8]
 80129d2:	4630      	mov	r0, r6
 80129d4:	f000 ffd4 	bl	8013980 <_Bfree>
 80129d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80129da:	2200      	movs	r2, #0
 80129dc:	601a      	str	r2, [r3, #0]
 80129de:	f1b9 0300 	subs.w	r3, r9, #0
 80129e2:	bfbb      	ittet	lt
 80129e4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80129e8:	9303      	strlt	r3, [sp, #12]
 80129ea:	2300      	movge	r3, #0
 80129ec:	2201      	movlt	r2, #1
 80129ee:	bfac      	ite	ge
 80129f0:	6023      	strge	r3, [r4, #0]
 80129f2:	6022      	strlt	r2, [r4, #0]
 80129f4:	4b9c      	ldr	r3, [pc, #624]	; (8012c68 <_dtoa_r+0x2e0>)
 80129f6:	9c03      	ldr	r4, [sp, #12]
 80129f8:	43a3      	bics	r3, r4
 80129fa:	d11a      	bne.n	8012a32 <_dtoa_r+0xaa>
 80129fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80129fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8012a02:	6013      	str	r3, [r2, #0]
 8012a04:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8012a08:	ea53 0308 	orrs.w	r3, r3, r8
 8012a0c:	f000 8512 	beq.w	8013434 <_dtoa_r+0xaac>
 8012a10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012a12:	b953      	cbnz	r3, 8012a2a <_dtoa_r+0xa2>
 8012a14:	4b95      	ldr	r3, [pc, #596]	; (8012c6c <_dtoa_r+0x2e4>)
 8012a16:	e01f      	b.n	8012a58 <_dtoa_r+0xd0>
 8012a18:	4b95      	ldr	r3, [pc, #596]	; (8012c70 <_dtoa_r+0x2e8>)
 8012a1a:	9300      	str	r3, [sp, #0]
 8012a1c:	3308      	adds	r3, #8
 8012a1e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012a20:	6013      	str	r3, [r2, #0]
 8012a22:	9800      	ldr	r0, [sp, #0]
 8012a24:	b015      	add	sp, #84	; 0x54
 8012a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a2a:	4b90      	ldr	r3, [pc, #576]	; (8012c6c <_dtoa_r+0x2e4>)
 8012a2c:	9300      	str	r3, [sp, #0]
 8012a2e:	3303      	adds	r3, #3
 8012a30:	e7f5      	b.n	8012a1e <_dtoa_r+0x96>
 8012a32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a3e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012a42:	d10b      	bne.n	8012a5c <_dtoa_r+0xd4>
 8012a44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012a46:	2301      	movs	r3, #1
 8012a48:	6013      	str	r3, [r2, #0]
 8012a4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	f000 84ee 	beq.w	801342e <_dtoa_r+0xaa6>
 8012a52:	4888      	ldr	r0, [pc, #544]	; (8012c74 <_dtoa_r+0x2ec>)
 8012a54:	6018      	str	r0, [r3, #0]
 8012a56:	1e43      	subs	r3, r0, #1
 8012a58:	9300      	str	r3, [sp, #0]
 8012a5a:	e7e2      	b.n	8012a22 <_dtoa_r+0x9a>
 8012a5c:	a913      	add	r1, sp, #76	; 0x4c
 8012a5e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012a62:	aa12      	add	r2, sp, #72	; 0x48
 8012a64:	4630      	mov	r0, r6
 8012a66:	f001 fa6d 	bl	8013f44 <__d2b>
 8012a6a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8012a6e:	4605      	mov	r5, r0
 8012a70:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012a72:	2900      	cmp	r1, #0
 8012a74:	d047      	beq.n	8012b06 <_dtoa_r+0x17e>
 8012a76:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012a78:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012a7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012a80:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8012a84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012a88:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012a8c:	2400      	movs	r4, #0
 8012a8e:	ec43 2b16 	vmov	d6, r2, r3
 8012a92:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012a96:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8012c48 <_dtoa_r+0x2c0>
 8012a9a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012a9e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8012c50 <_dtoa_r+0x2c8>
 8012aa2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012aa6:	eeb0 7b46 	vmov.f64	d7, d6
 8012aaa:	ee06 1a90 	vmov	s13, r1
 8012aae:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8012ab2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8012c58 <_dtoa_r+0x2d0>
 8012ab6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012aba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012abe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ac6:	ee16 ba90 	vmov	fp, s13
 8012aca:	9411      	str	r4, [sp, #68]	; 0x44
 8012acc:	d508      	bpl.n	8012ae0 <_dtoa_r+0x158>
 8012ace:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012ad2:	eeb4 6b47 	vcmp.f64	d6, d7
 8012ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ada:	bf18      	it	ne
 8012adc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012ae0:	f1bb 0f16 	cmp.w	fp, #22
 8012ae4:	d832      	bhi.n	8012b4c <_dtoa_r+0x1c4>
 8012ae6:	4b64      	ldr	r3, [pc, #400]	; (8012c78 <_dtoa_r+0x2f0>)
 8012ae8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012aec:	ed93 7b00 	vldr	d7, [r3]
 8012af0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8012af4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012afc:	d501      	bpl.n	8012b02 <_dtoa_r+0x17a>
 8012afe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012b02:	2300      	movs	r3, #0
 8012b04:	e023      	b.n	8012b4e <_dtoa_r+0x1c6>
 8012b06:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012b08:	4401      	add	r1, r0
 8012b0a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012b0e:	2b20      	cmp	r3, #32
 8012b10:	bfc3      	ittte	gt
 8012b12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012b16:	fa04 f303 	lslgt.w	r3, r4, r3
 8012b1a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012b1e:	f1c3 0320 	rsble	r3, r3, #32
 8012b22:	bfc6      	itte	gt
 8012b24:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012b28:	ea43 0308 	orrgt.w	r3, r3, r8
 8012b2c:	fa08 f303 	lslle.w	r3, r8, r3
 8012b30:	ee07 3a90 	vmov	s15, r3
 8012b34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012b38:	3901      	subs	r1, #1
 8012b3a:	ed8d 7b00 	vstr	d7, [sp]
 8012b3e:	9c01      	ldr	r4, [sp, #4]
 8012b40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b44:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012b48:	2401      	movs	r4, #1
 8012b4a:	e7a0      	b.n	8012a8e <_dtoa_r+0x106>
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012b50:	1a43      	subs	r3, r0, r1
 8012b52:	1e5a      	subs	r2, r3, #1
 8012b54:	bf45      	ittet	mi
 8012b56:	f1c3 0301 	rsbmi	r3, r3, #1
 8012b5a:	9305      	strmi	r3, [sp, #20]
 8012b5c:	2300      	movpl	r3, #0
 8012b5e:	2300      	movmi	r3, #0
 8012b60:	9206      	str	r2, [sp, #24]
 8012b62:	bf54      	ite	pl
 8012b64:	9305      	strpl	r3, [sp, #20]
 8012b66:	9306      	strmi	r3, [sp, #24]
 8012b68:	f1bb 0f00 	cmp.w	fp, #0
 8012b6c:	db18      	blt.n	8012ba0 <_dtoa_r+0x218>
 8012b6e:	9b06      	ldr	r3, [sp, #24]
 8012b70:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8012b74:	445b      	add	r3, fp
 8012b76:	9306      	str	r3, [sp, #24]
 8012b78:	2300      	movs	r3, #0
 8012b7a:	9a07      	ldr	r2, [sp, #28]
 8012b7c:	2a09      	cmp	r2, #9
 8012b7e:	d849      	bhi.n	8012c14 <_dtoa_r+0x28c>
 8012b80:	2a05      	cmp	r2, #5
 8012b82:	bfc4      	itt	gt
 8012b84:	3a04      	subgt	r2, #4
 8012b86:	9207      	strgt	r2, [sp, #28]
 8012b88:	9a07      	ldr	r2, [sp, #28]
 8012b8a:	f1a2 0202 	sub.w	r2, r2, #2
 8012b8e:	bfcc      	ite	gt
 8012b90:	2400      	movgt	r4, #0
 8012b92:	2401      	movle	r4, #1
 8012b94:	2a03      	cmp	r2, #3
 8012b96:	d848      	bhi.n	8012c2a <_dtoa_r+0x2a2>
 8012b98:	e8df f002 	tbb	[pc, r2]
 8012b9c:	3a2c2e0b 	.word	0x3a2c2e0b
 8012ba0:	9b05      	ldr	r3, [sp, #20]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	eba3 030b 	sub.w	r3, r3, fp
 8012ba8:	9305      	str	r3, [sp, #20]
 8012baa:	920e      	str	r2, [sp, #56]	; 0x38
 8012bac:	f1cb 0300 	rsb	r3, fp, #0
 8012bb0:	e7e3      	b.n	8012b7a <_dtoa_r+0x1f2>
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	9208      	str	r2, [sp, #32]
 8012bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bb8:	2a00      	cmp	r2, #0
 8012bba:	dc39      	bgt.n	8012c30 <_dtoa_r+0x2a8>
 8012bbc:	f04f 0a01 	mov.w	sl, #1
 8012bc0:	46d1      	mov	r9, sl
 8012bc2:	4652      	mov	r2, sl
 8012bc4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012bc8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8012bca:	2100      	movs	r1, #0
 8012bcc:	6079      	str	r1, [r7, #4]
 8012bce:	2004      	movs	r0, #4
 8012bd0:	f100 0c14 	add.w	ip, r0, #20
 8012bd4:	4594      	cmp	ip, r2
 8012bd6:	6879      	ldr	r1, [r7, #4]
 8012bd8:	d92f      	bls.n	8012c3a <_dtoa_r+0x2b2>
 8012bda:	4630      	mov	r0, r6
 8012bdc:	930c      	str	r3, [sp, #48]	; 0x30
 8012bde:	f000 fe8f 	bl	8013900 <_Balloc>
 8012be2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012be4:	9000      	str	r0, [sp, #0]
 8012be6:	4602      	mov	r2, r0
 8012be8:	2800      	cmp	r0, #0
 8012bea:	d149      	bne.n	8012c80 <_dtoa_r+0x2f8>
 8012bec:	4b23      	ldr	r3, [pc, #140]	; (8012c7c <_dtoa_r+0x2f4>)
 8012bee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012bf2:	e6df      	b.n	80129b4 <_dtoa_r+0x2c>
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	e7dd      	b.n	8012bb4 <_dtoa_r+0x22c>
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	9208      	str	r2, [sp, #32]
 8012bfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bfe:	eb0b 0a02 	add.w	sl, fp, r2
 8012c02:	f10a 0901 	add.w	r9, sl, #1
 8012c06:	464a      	mov	r2, r9
 8012c08:	2a01      	cmp	r2, #1
 8012c0a:	bfb8      	it	lt
 8012c0c:	2201      	movlt	r2, #1
 8012c0e:	e7db      	b.n	8012bc8 <_dtoa_r+0x240>
 8012c10:	2201      	movs	r2, #1
 8012c12:	e7f2      	b.n	8012bfa <_dtoa_r+0x272>
 8012c14:	2401      	movs	r4, #1
 8012c16:	2200      	movs	r2, #0
 8012c18:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012c1c:	f04f 3aff 	mov.w	sl, #4294967295
 8012c20:	2100      	movs	r1, #0
 8012c22:	46d1      	mov	r9, sl
 8012c24:	2212      	movs	r2, #18
 8012c26:	9109      	str	r1, [sp, #36]	; 0x24
 8012c28:	e7ce      	b.n	8012bc8 <_dtoa_r+0x240>
 8012c2a:	2201      	movs	r2, #1
 8012c2c:	9208      	str	r2, [sp, #32]
 8012c2e:	e7f5      	b.n	8012c1c <_dtoa_r+0x294>
 8012c30:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8012c34:	46d1      	mov	r9, sl
 8012c36:	4652      	mov	r2, sl
 8012c38:	e7c6      	b.n	8012bc8 <_dtoa_r+0x240>
 8012c3a:	3101      	adds	r1, #1
 8012c3c:	6079      	str	r1, [r7, #4]
 8012c3e:	0040      	lsls	r0, r0, #1
 8012c40:	e7c6      	b.n	8012bd0 <_dtoa_r+0x248>
 8012c42:	bf00      	nop
 8012c44:	f3af 8000 	nop.w
 8012c48:	636f4361 	.word	0x636f4361
 8012c4c:	3fd287a7 	.word	0x3fd287a7
 8012c50:	8b60c8b3 	.word	0x8b60c8b3
 8012c54:	3fc68a28 	.word	0x3fc68a28
 8012c58:	509f79fb 	.word	0x509f79fb
 8012c5c:	3fd34413 	.word	0x3fd34413
 8012c60:	08015171 	.word	0x08015171
 8012c64:	08015188 	.word	0x08015188
 8012c68:	7ff00000 	.word	0x7ff00000
 8012c6c:	0801516d 	.word	0x0801516d
 8012c70:	08015164 	.word	0x08015164
 8012c74:	08015141 	.word	0x08015141
 8012c78:	080152e0 	.word	0x080152e0
 8012c7c:	080151e7 	.word	0x080151e7
 8012c80:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8012c82:	9900      	ldr	r1, [sp, #0]
 8012c84:	6011      	str	r1, [r2, #0]
 8012c86:	f1b9 0f0e 	cmp.w	r9, #14
 8012c8a:	d872      	bhi.n	8012d72 <_dtoa_r+0x3ea>
 8012c8c:	2c00      	cmp	r4, #0
 8012c8e:	d070      	beq.n	8012d72 <_dtoa_r+0x3ea>
 8012c90:	f1bb 0f00 	cmp.w	fp, #0
 8012c94:	f340 80a6 	ble.w	8012de4 <_dtoa_r+0x45c>
 8012c98:	49ca      	ldr	r1, [pc, #808]	; (8012fc4 <_dtoa_r+0x63c>)
 8012c9a:	f00b 020f 	and.w	r2, fp, #15
 8012c9e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012ca2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012ca6:	ed92 7b00 	vldr	d7, [r2]
 8012caa:	ea4f 112b 	mov.w	r1, fp, asr #4
 8012cae:	f000 808d 	beq.w	8012dcc <_dtoa_r+0x444>
 8012cb2:	4ac5      	ldr	r2, [pc, #788]	; (8012fc8 <_dtoa_r+0x640>)
 8012cb4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8012cb8:	ed92 6b08 	vldr	d6, [r2, #32]
 8012cbc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8012cc0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012cc4:	f001 010f 	and.w	r1, r1, #15
 8012cc8:	2203      	movs	r2, #3
 8012cca:	48bf      	ldr	r0, [pc, #764]	; (8012fc8 <_dtoa_r+0x640>)
 8012ccc:	2900      	cmp	r1, #0
 8012cce:	d17f      	bne.n	8012dd0 <_dtoa_r+0x448>
 8012cd0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012cd4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012cd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012cdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012cde:	2900      	cmp	r1, #0
 8012ce0:	f000 80b2 	beq.w	8012e48 <_dtoa_r+0x4c0>
 8012ce4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012ce8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012cec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf4:	f140 80a8 	bpl.w	8012e48 <_dtoa_r+0x4c0>
 8012cf8:	f1b9 0f00 	cmp.w	r9, #0
 8012cfc:	f000 80a4 	beq.w	8012e48 <_dtoa_r+0x4c0>
 8012d00:	f1ba 0f00 	cmp.w	sl, #0
 8012d04:	dd31      	ble.n	8012d6a <_dtoa_r+0x3e2>
 8012d06:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012d0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012d0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012d12:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012d16:	3201      	adds	r2, #1
 8012d18:	4650      	mov	r0, sl
 8012d1a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012d1e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012d22:	ee07 2a90 	vmov	s15, r2
 8012d26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012d2a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012d2e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8012d32:	9c03      	ldr	r4, [sp, #12]
 8012d34:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012d38:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8012d3c:	2800      	cmp	r0, #0
 8012d3e:	f040 8086 	bne.w	8012e4e <_dtoa_r+0x4c6>
 8012d42:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012d46:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012d4a:	ec42 1b17 	vmov	d7, r1, r2
 8012d4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d56:	f300 8272 	bgt.w	801323e <_dtoa_r+0x8b6>
 8012d5a:	eeb1 7b47 	vneg.f64	d7, d7
 8012d5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d66:	f100 8267 	bmi.w	8013238 <_dtoa_r+0x8b0>
 8012d6a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8012d6e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012d72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012d74:	2a00      	cmp	r2, #0
 8012d76:	f2c0 8129 	blt.w	8012fcc <_dtoa_r+0x644>
 8012d7a:	f1bb 0f0e 	cmp.w	fp, #14
 8012d7e:	f300 8125 	bgt.w	8012fcc <_dtoa_r+0x644>
 8012d82:	4b90      	ldr	r3, [pc, #576]	; (8012fc4 <_dtoa_r+0x63c>)
 8012d84:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012d88:	ed93 6b00 	vldr	d6, [r3]
 8012d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	f280 80c3 	bge.w	8012f1a <_dtoa_r+0x592>
 8012d94:	f1b9 0f00 	cmp.w	r9, #0
 8012d98:	f300 80bf 	bgt.w	8012f1a <_dtoa_r+0x592>
 8012d9c:	f040 824c 	bne.w	8013238 <_dtoa_r+0x8b0>
 8012da0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012da4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012da8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012dac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012db4:	464c      	mov	r4, r9
 8012db6:	464f      	mov	r7, r9
 8012db8:	f280 8222 	bge.w	8013200 <_dtoa_r+0x878>
 8012dbc:	f8dd 8000 	ldr.w	r8, [sp]
 8012dc0:	2331      	movs	r3, #49	; 0x31
 8012dc2:	f808 3b01 	strb.w	r3, [r8], #1
 8012dc6:	f10b 0b01 	add.w	fp, fp, #1
 8012dca:	e21e      	b.n	801320a <_dtoa_r+0x882>
 8012dcc:	2202      	movs	r2, #2
 8012dce:	e77c      	b.n	8012cca <_dtoa_r+0x342>
 8012dd0:	07cc      	lsls	r4, r1, #31
 8012dd2:	d504      	bpl.n	8012dde <_dtoa_r+0x456>
 8012dd4:	ed90 6b00 	vldr	d6, [r0]
 8012dd8:	3201      	adds	r2, #1
 8012dda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012dde:	1049      	asrs	r1, r1, #1
 8012de0:	3008      	adds	r0, #8
 8012de2:	e773      	b.n	8012ccc <_dtoa_r+0x344>
 8012de4:	d02e      	beq.n	8012e44 <_dtoa_r+0x4bc>
 8012de6:	f1cb 0100 	rsb	r1, fp, #0
 8012dea:	4a76      	ldr	r2, [pc, #472]	; (8012fc4 <_dtoa_r+0x63c>)
 8012dec:	f001 000f 	and.w	r0, r1, #15
 8012df0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012df4:	ed92 7b00 	vldr	d7, [r2]
 8012df8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8012dfc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012e00:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012e04:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8012e08:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8012e0c:	486e      	ldr	r0, [pc, #440]	; (8012fc8 <_dtoa_r+0x640>)
 8012e0e:	1109      	asrs	r1, r1, #4
 8012e10:	2400      	movs	r4, #0
 8012e12:	2202      	movs	r2, #2
 8012e14:	b939      	cbnz	r1, 8012e26 <_dtoa_r+0x49e>
 8012e16:	2c00      	cmp	r4, #0
 8012e18:	f43f af60 	beq.w	8012cdc <_dtoa_r+0x354>
 8012e1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012e20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e24:	e75a      	b.n	8012cdc <_dtoa_r+0x354>
 8012e26:	07cf      	lsls	r7, r1, #31
 8012e28:	d509      	bpl.n	8012e3e <_dtoa_r+0x4b6>
 8012e2a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8012e2e:	ed90 7b00 	vldr	d7, [r0]
 8012e32:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012e36:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012e3a:	3201      	adds	r2, #1
 8012e3c:	2401      	movs	r4, #1
 8012e3e:	1049      	asrs	r1, r1, #1
 8012e40:	3008      	adds	r0, #8
 8012e42:	e7e7      	b.n	8012e14 <_dtoa_r+0x48c>
 8012e44:	2202      	movs	r2, #2
 8012e46:	e749      	b.n	8012cdc <_dtoa_r+0x354>
 8012e48:	465f      	mov	r7, fp
 8012e4a:	4648      	mov	r0, r9
 8012e4c:	e765      	b.n	8012d1a <_dtoa_r+0x392>
 8012e4e:	ec42 1b17 	vmov	d7, r1, r2
 8012e52:	4a5c      	ldr	r2, [pc, #368]	; (8012fc4 <_dtoa_r+0x63c>)
 8012e54:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012e58:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012e5c:	9a00      	ldr	r2, [sp, #0]
 8012e5e:	1814      	adds	r4, r2, r0
 8012e60:	9a08      	ldr	r2, [sp, #32]
 8012e62:	b352      	cbz	r2, 8012eba <_dtoa_r+0x532>
 8012e64:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012e68:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012e6c:	f8dd 8000 	ldr.w	r8, [sp]
 8012e70:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012e74:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012e78:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012e7c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012e80:	ee14 2a90 	vmov	r2, s9
 8012e84:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012e88:	3230      	adds	r2, #48	; 0x30
 8012e8a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012e8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e96:	f808 2b01 	strb.w	r2, [r8], #1
 8012e9a:	d439      	bmi.n	8012f10 <_dtoa_r+0x588>
 8012e9c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012ea0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea8:	d472      	bmi.n	8012f90 <_dtoa_r+0x608>
 8012eaa:	45a0      	cmp	r8, r4
 8012eac:	f43f af5d 	beq.w	8012d6a <_dtoa_r+0x3e2>
 8012eb0:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012eb4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012eb8:	e7e0      	b.n	8012e7c <_dtoa_r+0x4f4>
 8012eba:	f8dd 8000 	ldr.w	r8, [sp]
 8012ebe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012ec2:	4621      	mov	r1, r4
 8012ec4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012ec8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012ecc:	ee14 2a90 	vmov	r2, s9
 8012ed0:	3230      	adds	r2, #48	; 0x30
 8012ed2:	f808 2b01 	strb.w	r2, [r8], #1
 8012ed6:	45a0      	cmp	r8, r4
 8012ed8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012edc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012ee0:	d118      	bne.n	8012f14 <_dtoa_r+0x58c>
 8012ee2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012ee6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012eea:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ef2:	dc4d      	bgt.n	8012f90 <_dtoa_r+0x608>
 8012ef4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012ef8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f00:	f57f af33 	bpl.w	8012d6a <_dtoa_r+0x3e2>
 8012f04:	4688      	mov	r8, r1
 8012f06:	3901      	subs	r1, #1
 8012f08:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012f0c:	2b30      	cmp	r3, #48	; 0x30
 8012f0e:	d0f9      	beq.n	8012f04 <_dtoa_r+0x57c>
 8012f10:	46bb      	mov	fp, r7
 8012f12:	e02a      	b.n	8012f6a <_dtoa_r+0x5e2>
 8012f14:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012f18:	e7d6      	b.n	8012ec8 <_dtoa_r+0x540>
 8012f1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012f1e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012f22:	f8dd 8000 	ldr.w	r8, [sp]
 8012f26:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012f2a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012f2e:	ee15 3a10 	vmov	r3, s10
 8012f32:	3330      	adds	r3, #48	; 0x30
 8012f34:	f808 3b01 	strb.w	r3, [r8], #1
 8012f38:	9b00      	ldr	r3, [sp, #0]
 8012f3a:	eba8 0303 	sub.w	r3, r8, r3
 8012f3e:	4599      	cmp	r9, r3
 8012f40:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012f44:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012f48:	d133      	bne.n	8012fb2 <_dtoa_r+0x62a>
 8012f4a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012f4e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f56:	dc1a      	bgt.n	8012f8e <_dtoa_r+0x606>
 8012f58:	eeb4 7b46 	vcmp.f64	d7, d6
 8012f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f60:	d103      	bne.n	8012f6a <_dtoa_r+0x5e2>
 8012f62:	ee15 3a10 	vmov	r3, s10
 8012f66:	07d9      	lsls	r1, r3, #31
 8012f68:	d411      	bmi.n	8012f8e <_dtoa_r+0x606>
 8012f6a:	4629      	mov	r1, r5
 8012f6c:	4630      	mov	r0, r6
 8012f6e:	f000 fd07 	bl	8013980 <_Bfree>
 8012f72:	2300      	movs	r3, #0
 8012f74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012f76:	f888 3000 	strb.w	r3, [r8]
 8012f7a:	f10b 0301 	add.w	r3, fp, #1
 8012f7e:	6013      	str	r3, [r2, #0]
 8012f80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	f43f ad4d 	beq.w	8012a22 <_dtoa_r+0x9a>
 8012f88:	f8c3 8000 	str.w	r8, [r3]
 8012f8c:	e549      	b.n	8012a22 <_dtoa_r+0x9a>
 8012f8e:	465f      	mov	r7, fp
 8012f90:	4643      	mov	r3, r8
 8012f92:	4698      	mov	r8, r3
 8012f94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012f98:	2a39      	cmp	r2, #57	; 0x39
 8012f9a:	d106      	bne.n	8012faa <_dtoa_r+0x622>
 8012f9c:	9a00      	ldr	r2, [sp, #0]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d1f7      	bne.n	8012f92 <_dtoa_r+0x60a>
 8012fa2:	9900      	ldr	r1, [sp, #0]
 8012fa4:	2230      	movs	r2, #48	; 0x30
 8012fa6:	3701      	adds	r7, #1
 8012fa8:	700a      	strb	r2, [r1, #0]
 8012faa:	781a      	ldrb	r2, [r3, #0]
 8012fac:	3201      	adds	r2, #1
 8012fae:	701a      	strb	r2, [r3, #0]
 8012fb0:	e7ae      	b.n	8012f10 <_dtoa_r+0x588>
 8012fb2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012fb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fbe:	d1b2      	bne.n	8012f26 <_dtoa_r+0x59e>
 8012fc0:	e7d3      	b.n	8012f6a <_dtoa_r+0x5e2>
 8012fc2:	bf00      	nop
 8012fc4:	080152e0 	.word	0x080152e0
 8012fc8:	080152b8 	.word	0x080152b8
 8012fcc:	9908      	ldr	r1, [sp, #32]
 8012fce:	2900      	cmp	r1, #0
 8012fd0:	f000 80d1 	beq.w	8013176 <_dtoa_r+0x7ee>
 8012fd4:	9907      	ldr	r1, [sp, #28]
 8012fd6:	2901      	cmp	r1, #1
 8012fd8:	f300 80b4 	bgt.w	8013144 <_dtoa_r+0x7bc>
 8012fdc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012fde:	2900      	cmp	r1, #0
 8012fe0:	f000 80ac 	beq.w	801313c <_dtoa_r+0x7b4>
 8012fe4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012fe8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012fec:	461c      	mov	r4, r3
 8012fee:	930a      	str	r3, [sp, #40]	; 0x28
 8012ff0:	9b05      	ldr	r3, [sp, #20]
 8012ff2:	4413      	add	r3, r2
 8012ff4:	9305      	str	r3, [sp, #20]
 8012ff6:	9b06      	ldr	r3, [sp, #24]
 8012ff8:	2101      	movs	r1, #1
 8012ffa:	4413      	add	r3, r2
 8012ffc:	4630      	mov	r0, r6
 8012ffe:	9306      	str	r3, [sp, #24]
 8013000:	f000 fd7a 	bl	8013af8 <__i2b>
 8013004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013006:	4607      	mov	r7, r0
 8013008:	f1b8 0f00 	cmp.w	r8, #0
 801300c:	dd0d      	ble.n	801302a <_dtoa_r+0x6a2>
 801300e:	9a06      	ldr	r2, [sp, #24]
 8013010:	2a00      	cmp	r2, #0
 8013012:	dd0a      	ble.n	801302a <_dtoa_r+0x6a2>
 8013014:	4542      	cmp	r2, r8
 8013016:	9905      	ldr	r1, [sp, #20]
 8013018:	bfa8      	it	ge
 801301a:	4642      	movge	r2, r8
 801301c:	1a89      	subs	r1, r1, r2
 801301e:	9105      	str	r1, [sp, #20]
 8013020:	9906      	ldr	r1, [sp, #24]
 8013022:	eba8 0802 	sub.w	r8, r8, r2
 8013026:	1a8a      	subs	r2, r1, r2
 8013028:	9206      	str	r2, [sp, #24]
 801302a:	b303      	cbz	r3, 801306e <_dtoa_r+0x6e6>
 801302c:	9a08      	ldr	r2, [sp, #32]
 801302e:	2a00      	cmp	r2, #0
 8013030:	f000 80a6 	beq.w	8013180 <_dtoa_r+0x7f8>
 8013034:	2c00      	cmp	r4, #0
 8013036:	dd13      	ble.n	8013060 <_dtoa_r+0x6d8>
 8013038:	4639      	mov	r1, r7
 801303a:	4622      	mov	r2, r4
 801303c:	4630      	mov	r0, r6
 801303e:	930c      	str	r3, [sp, #48]	; 0x30
 8013040:	f000 fe16 	bl	8013c70 <__pow5mult>
 8013044:	462a      	mov	r2, r5
 8013046:	4601      	mov	r1, r0
 8013048:	4607      	mov	r7, r0
 801304a:	4630      	mov	r0, r6
 801304c:	f000 fd6a 	bl	8013b24 <__multiply>
 8013050:	4629      	mov	r1, r5
 8013052:	900a      	str	r0, [sp, #40]	; 0x28
 8013054:	4630      	mov	r0, r6
 8013056:	f000 fc93 	bl	8013980 <_Bfree>
 801305a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801305c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801305e:	4615      	mov	r5, r2
 8013060:	1b1a      	subs	r2, r3, r4
 8013062:	d004      	beq.n	801306e <_dtoa_r+0x6e6>
 8013064:	4629      	mov	r1, r5
 8013066:	4630      	mov	r0, r6
 8013068:	f000 fe02 	bl	8013c70 <__pow5mult>
 801306c:	4605      	mov	r5, r0
 801306e:	2101      	movs	r1, #1
 8013070:	4630      	mov	r0, r6
 8013072:	f000 fd41 	bl	8013af8 <__i2b>
 8013076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013078:	2b00      	cmp	r3, #0
 801307a:	4604      	mov	r4, r0
 801307c:	f340 8082 	ble.w	8013184 <_dtoa_r+0x7fc>
 8013080:	461a      	mov	r2, r3
 8013082:	4601      	mov	r1, r0
 8013084:	4630      	mov	r0, r6
 8013086:	f000 fdf3 	bl	8013c70 <__pow5mult>
 801308a:	9b07      	ldr	r3, [sp, #28]
 801308c:	2b01      	cmp	r3, #1
 801308e:	4604      	mov	r4, r0
 8013090:	dd7b      	ble.n	801318a <_dtoa_r+0x802>
 8013092:	2300      	movs	r3, #0
 8013094:	930a      	str	r3, [sp, #40]	; 0x28
 8013096:	6922      	ldr	r2, [r4, #16]
 8013098:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801309c:	6910      	ldr	r0, [r2, #16]
 801309e:	f000 fcdb 	bl	8013a58 <__hi0bits>
 80130a2:	f1c0 0020 	rsb	r0, r0, #32
 80130a6:	9b06      	ldr	r3, [sp, #24]
 80130a8:	4418      	add	r0, r3
 80130aa:	f010 001f 	ands.w	r0, r0, #31
 80130ae:	f000 808d 	beq.w	80131cc <_dtoa_r+0x844>
 80130b2:	f1c0 0220 	rsb	r2, r0, #32
 80130b6:	2a04      	cmp	r2, #4
 80130b8:	f340 8086 	ble.w	80131c8 <_dtoa_r+0x840>
 80130bc:	f1c0 001c 	rsb	r0, r0, #28
 80130c0:	9b05      	ldr	r3, [sp, #20]
 80130c2:	4403      	add	r3, r0
 80130c4:	9305      	str	r3, [sp, #20]
 80130c6:	9b06      	ldr	r3, [sp, #24]
 80130c8:	4403      	add	r3, r0
 80130ca:	4480      	add	r8, r0
 80130cc:	9306      	str	r3, [sp, #24]
 80130ce:	9b05      	ldr	r3, [sp, #20]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	dd05      	ble.n	80130e0 <_dtoa_r+0x758>
 80130d4:	4629      	mov	r1, r5
 80130d6:	461a      	mov	r2, r3
 80130d8:	4630      	mov	r0, r6
 80130da:	f000 fe23 	bl	8013d24 <__lshift>
 80130de:	4605      	mov	r5, r0
 80130e0:	9b06      	ldr	r3, [sp, #24]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	dd05      	ble.n	80130f2 <_dtoa_r+0x76a>
 80130e6:	4621      	mov	r1, r4
 80130e8:	461a      	mov	r2, r3
 80130ea:	4630      	mov	r0, r6
 80130ec:	f000 fe1a 	bl	8013d24 <__lshift>
 80130f0:	4604      	mov	r4, r0
 80130f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d06b      	beq.n	80131d0 <_dtoa_r+0x848>
 80130f8:	4621      	mov	r1, r4
 80130fa:	4628      	mov	r0, r5
 80130fc:	f000 fe7e 	bl	8013dfc <__mcmp>
 8013100:	2800      	cmp	r0, #0
 8013102:	da65      	bge.n	80131d0 <_dtoa_r+0x848>
 8013104:	2300      	movs	r3, #0
 8013106:	4629      	mov	r1, r5
 8013108:	220a      	movs	r2, #10
 801310a:	4630      	mov	r0, r6
 801310c:	f000 fc5a 	bl	80139c4 <__multadd>
 8013110:	9b08      	ldr	r3, [sp, #32]
 8013112:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013116:	4605      	mov	r5, r0
 8013118:	2b00      	cmp	r3, #0
 801311a:	f000 8192 	beq.w	8013442 <_dtoa_r+0xaba>
 801311e:	4639      	mov	r1, r7
 8013120:	2300      	movs	r3, #0
 8013122:	220a      	movs	r2, #10
 8013124:	4630      	mov	r0, r6
 8013126:	f000 fc4d 	bl	80139c4 <__multadd>
 801312a:	f1ba 0f00 	cmp.w	sl, #0
 801312e:	4607      	mov	r7, r0
 8013130:	f300 808e 	bgt.w	8013250 <_dtoa_r+0x8c8>
 8013134:	9b07      	ldr	r3, [sp, #28]
 8013136:	2b02      	cmp	r3, #2
 8013138:	dc51      	bgt.n	80131de <_dtoa_r+0x856>
 801313a:	e089      	b.n	8013250 <_dtoa_r+0x8c8>
 801313c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801313e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013142:	e751      	b.n	8012fe8 <_dtoa_r+0x660>
 8013144:	f109 34ff 	add.w	r4, r9, #4294967295
 8013148:	42a3      	cmp	r3, r4
 801314a:	bfbf      	itttt	lt
 801314c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801314e:	1ae3      	sublt	r3, r4, r3
 8013150:	18d2      	addlt	r2, r2, r3
 8013152:	4613      	movlt	r3, r2
 8013154:	bfb7      	itett	lt
 8013156:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013158:	1b1c      	subge	r4, r3, r4
 801315a:	4623      	movlt	r3, r4
 801315c:	2400      	movlt	r4, #0
 801315e:	f1b9 0f00 	cmp.w	r9, #0
 8013162:	bfb5      	itete	lt
 8013164:	9a05      	ldrlt	r2, [sp, #20]
 8013166:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801316a:	eba2 0809 	sublt.w	r8, r2, r9
 801316e:	464a      	movge	r2, r9
 8013170:	bfb8      	it	lt
 8013172:	2200      	movlt	r2, #0
 8013174:	e73b      	b.n	8012fee <_dtoa_r+0x666>
 8013176:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801317a:	9f08      	ldr	r7, [sp, #32]
 801317c:	461c      	mov	r4, r3
 801317e:	e743      	b.n	8013008 <_dtoa_r+0x680>
 8013180:	461a      	mov	r2, r3
 8013182:	e76f      	b.n	8013064 <_dtoa_r+0x6dc>
 8013184:	9b07      	ldr	r3, [sp, #28]
 8013186:	2b01      	cmp	r3, #1
 8013188:	dc18      	bgt.n	80131bc <_dtoa_r+0x834>
 801318a:	9b02      	ldr	r3, [sp, #8]
 801318c:	b9b3      	cbnz	r3, 80131bc <_dtoa_r+0x834>
 801318e:	9b03      	ldr	r3, [sp, #12]
 8013190:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013194:	b9a2      	cbnz	r2, 80131c0 <_dtoa_r+0x838>
 8013196:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801319a:	0d12      	lsrs	r2, r2, #20
 801319c:	0512      	lsls	r2, r2, #20
 801319e:	b18a      	cbz	r2, 80131c4 <_dtoa_r+0x83c>
 80131a0:	9b05      	ldr	r3, [sp, #20]
 80131a2:	3301      	adds	r3, #1
 80131a4:	9305      	str	r3, [sp, #20]
 80131a6:	9b06      	ldr	r3, [sp, #24]
 80131a8:	3301      	adds	r3, #1
 80131aa:	9306      	str	r3, [sp, #24]
 80131ac:	2301      	movs	r3, #1
 80131ae:	930a      	str	r3, [sp, #40]	; 0x28
 80131b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	f47f af6f 	bne.w	8013096 <_dtoa_r+0x70e>
 80131b8:	2001      	movs	r0, #1
 80131ba:	e774      	b.n	80130a6 <_dtoa_r+0x71e>
 80131bc:	2300      	movs	r3, #0
 80131be:	e7f6      	b.n	80131ae <_dtoa_r+0x826>
 80131c0:	9b02      	ldr	r3, [sp, #8]
 80131c2:	e7f4      	b.n	80131ae <_dtoa_r+0x826>
 80131c4:	920a      	str	r2, [sp, #40]	; 0x28
 80131c6:	e7f3      	b.n	80131b0 <_dtoa_r+0x828>
 80131c8:	d081      	beq.n	80130ce <_dtoa_r+0x746>
 80131ca:	4610      	mov	r0, r2
 80131cc:	301c      	adds	r0, #28
 80131ce:	e777      	b.n	80130c0 <_dtoa_r+0x738>
 80131d0:	f1b9 0f00 	cmp.w	r9, #0
 80131d4:	dc37      	bgt.n	8013246 <_dtoa_r+0x8be>
 80131d6:	9b07      	ldr	r3, [sp, #28]
 80131d8:	2b02      	cmp	r3, #2
 80131da:	dd34      	ble.n	8013246 <_dtoa_r+0x8be>
 80131dc:	46ca      	mov	sl, r9
 80131de:	f1ba 0f00 	cmp.w	sl, #0
 80131e2:	d10d      	bne.n	8013200 <_dtoa_r+0x878>
 80131e4:	4621      	mov	r1, r4
 80131e6:	4653      	mov	r3, sl
 80131e8:	2205      	movs	r2, #5
 80131ea:	4630      	mov	r0, r6
 80131ec:	f000 fbea 	bl	80139c4 <__multadd>
 80131f0:	4601      	mov	r1, r0
 80131f2:	4604      	mov	r4, r0
 80131f4:	4628      	mov	r0, r5
 80131f6:	f000 fe01 	bl	8013dfc <__mcmp>
 80131fa:	2800      	cmp	r0, #0
 80131fc:	f73f adde 	bgt.w	8012dbc <_dtoa_r+0x434>
 8013200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013202:	f8dd 8000 	ldr.w	r8, [sp]
 8013206:	ea6f 0b03 	mvn.w	fp, r3
 801320a:	f04f 0900 	mov.w	r9, #0
 801320e:	4621      	mov	r1, r4
 8013210:	4630      	mov	r0, r6
 8013212:	f000 fbb5 	bl	8013980 <_Bfree>
 8013216:	2f00      	cmp	r7, #0
 8013218:	f43f aea7 	beq.w	8012f6a <_dtoa_r+0x5e2>
 801321c:	f1b9 0f00 	cmp.w	r9, #0
 8013220:	d005      	beq.n	801322e <_dtoa_r+0x8a6>
 8013222:	45b9      	cmp	r9, r7
 8013224:	d003      	beq.n	801322e <_dtoa_r+0x8a6>
 8013226:	4649      	mov	r1, r9
 8013228:	4630      	mov	r0, r6
 801322a:	f000 fba9 	bl	8013980 <_Bfree>
 801322e:	4639      	mov	r1, r7
 8013230:	4630      	mov	r0, r6
 8013232:	f000 fba5 	bl	8013980 <_Bfree>
 8013236:	e698      	b.n	8012f6a <_dtoa_r+0x5e2>
 8013238:	2400      	movs	r4, #0
 801323a:	4627      	mov	r7, r4
 801323c:	e7e0      	b.n	8013200 <_dtoa_r+0x878>
 801323e:	46bb      	mov	fp, r7
 8013240:	4604      	mov	r4, r0
 8013242:	4607      	mov	r7, r0
 8013244:	e5ba      	b.n	8012dbc <_dtoa_r+0x434>
 8013246:	9b08      	ldr	r3, [sp, #32]
 8013248:	46ca      	mov	sl, r9
 801324a:	2b00      	cmp	r3, #0
 801324c:	f000 8100 	beq.w	8013450 <_dtoa_r+0xac8>
 8013250:	f1b8 0f00 	cmp.w	r8, #0
 8013254:	dd05      	ble.n	8013262 <_dtoa_r+0x8da>
 8013256:	4639      	mov	r1, r7
 8013258:	4642      	mov	r2, r8
 801325a:	4630      	mov	r0, r6
 801325c:	f000 fd62 	bl	8013d24 <__lshift>
 8013260:	4607      	mov	r7, r0
 8013262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013264:	2b00      	cmp	r3, #0
 8013266:	d05d      	beq.n	8013324 <_dtoa_r+0x99c>
 8013268:	6879      	ldr	r1, [r7, #4]
 801326a:	4630      	mov	r0, r6
 801326c:	f000 fb48 	bl	8013900 <_Balloc>
 8013270:	4680      	mov	r8, r0
 8013272:	b928      	cbnz	r0, 8013280 <_dtoa_r+0x8f8>
 8013274:	4b82      	ldr	r3, [pc, #520]	; (8013480 <_dtoa_r+0xaf8>)
 8013276:	4602      	mov	r2, r0
 8013278:	f240 21ea 	movw	r1, #746	; 0x2ea
 801327c:	f7ff bb9a 	b.w	80129b4 <_dtoa_r+0x2c>
 8013280:	693a      	ldr	r2, [r7, #16]
 8013282:	3202      	adds	r2, #2
 8013284:	0092      	lsls	r2, r2, #2
 8013286:	f107 010c 	add.w	r1, r7, #12
 801328a:	300c      	adds	r0, #12
 801328c:	f000 fb2a 	bl	80138e4 <memcpy>
 8013290:	2201      	movs	r2, #1
 8013292:	4641      	mov	r1, r8
 8013294:	4630      	mov	r0, r6
 8013296:	f000 fd45 	bl	8013d24 <__lshift>
 801329a:	9b00      	ldr	r3, [sp, #0]
 801329c:	3301      	adds	r3, #1
 801329e:	9305      	str	r3, [sp, #20]
 80132a0:	9b00      	ldr	r3, [sp, #0]
 80132a2:	4453      	add	r3, sl
 80132a4:	9309      	str	r3, [sp, #36]	; 0x24
 80132a6:	9b02      	ldr	r3, [sp, #8]
 80132a8:	f003 0301 	and.w	r3, r3, #1
 80132ac:	46b9      	mov	r9, r7
 80132ae:	9308      	str	r3, [sp, #32]
 80132b0:	4607      	mov	r7, r0
 80132b2:	9b05      	ldr	r3, [sp, #20]
 80132b4:	4621      	mov	r1, r4
 80132b6:	3b01      	subs	r3, #1
 80132b8:	4628      	mov	r0, r5
 80132ba:	9302      	str	r3, [sp, #8]
 80132bc:	f7ff fad8 	bl	8012870 <quorem>
 80132c0:	4603      	mov	r3, r0
 80132c2:	3330      	adds	r3, #48	; 0x30
 80132c4:	9006      	str	r0, [sp, #24]
 80132c6:	4649      	mov	r1, r9
 80132c8:	4628      	mov	r0, r5
 80132ca:	930a      	str	r3, [sp, #40]	; 0x28
 80132cc:	f000 fd96 	bl	8013dfc <__mcmp>
 80132d0:	463a      	mov	r2, r7
 80132d2:	4682      	mov	sl, r0
 80132d4:	4621      	mov	r1, r4
 80132d6:	4630      	mov	r0, r6
 80132d8:	f000 fdac 	bl	8013e34 <__mdiff>
 80132dc:	68c2      	ldr	r2, [r0, #12]
 80132de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132e0:	4680      	mov	r8, r0
 80132e2:	bb0a      	cbnz	r2, 8013328 <_dtoa_r+0x9a0>
 80132e4:	4601      	mov	r1, r0
 80132e6:	4628      	mov	r0, r5
 80132e8:	f000 fd88 	bl	8013dfc <__mcmp>
 80132ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132ee:	4602      	mov	r2, r0
 80132f0:	4641      	mov	r1, r8
 80132f2:	4630      	mov	r0, r6
 80132f4:	920e      	str	r2, [sp, #56]	; 0x38
 80132f6:	930a      	str	r3, [sp, #40]	; 0x28
 80132f8:	f000 fb42 	bl	8013980 <_Bfree>
 80132fc:	9b07      	ldr	r3, [sp, #28]
 80132fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013300:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013304:	ea43 0102 	orr.w	r1, r3, r2
 8013308:	9b08      	ldr	r3, [sp, #32]
 801330a:	430b      	orrs	r3, r1
 801330c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801330e:	d10d      	bne.n	801332c <_dtoa_r+0x9a4>
 8013310:	2b39      	cmp	r3, #57	; 0x39
 8013312:	d029      	beq.n	8013368 <_dtoa_r+0x9e0>
 8013314:	f1ba 0f00 	cmp.w	sl, #0
 8013318:	dd01      	ble.n	801331e <_dtoa_r+0x996>
 801331a:	9b06      	ldr	r3, [sp, #24]
 801331c:	3331      	adds	r3, #49	; 0x31
 801331e:	9a02      	ldr	r2, [sp, #8]
 8013320:	7013      	strb	r3, [r2, #0]
 8013322:	e774      	b.n	801320e <_dtoa_r+0x886>
 8013324:	4638      	mov	r0, r7
 8013326:	e7b8      	b.n	801329a <_dtoa_r+0x912>
 8013328:	2201      	movs	r2, #1
 801332a:	e7e1      	b.n	80132f0 <_dtoa_r+0x968>
 801332c:	f1ba 0f00 	cmp.w	sl, #0
 8013330:	db06      	blt.n	8013340 <_dtoa_r+0x9b8>
 8013332:	9907      	ldr	r1, [sp, #28]
 8013334:	ea41 0a0a 	orr.w	sl, r1, sl
 8013338:	9908      	ldr	r1, [sp, #32]
 801333a:	ea5a 0101 	orrs.w	r1, sl, r1
 801333e:	d120      	bne.n	8013382 <_dtoa_r+0x9fa>
 8013340:	2a00      	cmp	r2, #0
 8013342:	ddec      	ble.n	801331e <_dtoa_r+0x996>
 8013344:	4629      	mov	r1, r5
 8013346:	2201      	movs	r2, #1
 8013348:	4630      	mov	r0, r6
 801334a:	9305      	str	r3, [sp, #20]
 801334c:	f000 fcea 	bl	8013d24 <__lshift>
 8013350:	4621      	mov	r1, r4
 8013352:	4605      	mov	r5, r0
 8013354:	f000 fd52 	bl	8013dfc <__mcmp>
 8013358:	2800      	cmp	r0, #0
 801335a:	9b05      	ldr	r3, [sp, #20]
 801335c:	dc02      	bgt.n	8013364 <_dtoa_r+0x9dc>
 801335e:	d1de      	bne.n	801331e <_dtoa_r+0x996>
 8013360:	07da      	lsls	r2, r3, #31
 8013362:	d5dc      	bpl.n	801331e <_dtoa_r+0x996>
 8013364:	2b39      	cmp	r3, #57	; 0x39
 8013366:	d1d8      	bne.n	801331a <_dtoa_r+0x992>
 8013368:	9a02      	ldr	r2, [sp, #8]
 801336a:	2339      	movs	r3, #57	; 0x39
 801336c:	7013      	strb	r3, [r2, #0]
 801336e:	4643      	mov	r3, r8
 8013370:	4698      	mov	r8, r3
 8013372:	3b01      	subs	r3, #1
 8013374:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013378:	2a39      	cmp	r2, #57	; 0x39
 801337a:	d051      	beq.n	8013420 <_dtoa_r+0xa98>
 801337c:	3201      	adds	r2, #1
 801337e:	701a      	strb	r2, [r3, #0]
 8013380:	e745      	b.n	801320e <_dtoa_r+0x886>
 8013382:	2a00      	cmp	r2, #0
 8013384:	dd03      	ble.n	801338e <_dtoa_r+0xa06>
 8013386:	2b39      	cmp	r3, #57	; 0x39
 8013388:	d0ee      	beq.n	8013368 <_dtoa_r+0x9e0>
 801338a:	3301      	adds	r3, #1
 801338c:	e7c7      	b.n	801331e <_dtoa_r+0x996>
 801338e:	9a05      	ldr	r2, [sp, #20]
 8013390:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013392:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013396:	428a      	cmp	r2, r1
 8013398:	d02b      	beq.n	80133f2 <_dtoa_r+0xa6a>
 801339a:	4629      	mov	r1, r5
 801339c:	2300      	movs	r3, #0
 801339e:	220a      	movs	r2, #10
 80133a0:	4630      	mov	r0, r6
 80133a2:	f000 fb0f 	bl	80139c4 <__multadd>
 80133a6:	45b9      	cmp	r9, r7
 80133a8:	4605      	mov	r5, r0
 80133aa:	f04f 0300 	mov.w	r3, #0
 80133ae:	f04f 020a 	mov.w	r2, #10
 80133b2:	4649      	mov	r1, r9
 80133b4:	4630      	mov	r0, r6
 80133b6:	d107      	bne.n	80133c8 <_dtoa_r+0xa40>
 80133b8:	f000 fb04 	bl	80139c4 <__multadd>
 80133bc:	4681      	mov	r9, r0
 80133be:	4607      	mov	r7, r0
 80133c0:	9b05      	ldr	r3, [sp, #20]
 80133c2:	3301      	adds	r3, #1
 80133c4:	9305      	str	r3, [sp, #20]
 80133c6:	e774      	b.n	80132b2 <_dtoa_r+0x92a>
 80133c8:	f000 fafc 	bl	80139c4 <__multadd>
 80133cc:	4639      	mov	r1, r7
 80133ce:	4681      	mov	r9, r0
 80133d0:	2300      	movs	r3, #0
 80133d2:	220a      	movs	r2, #10
 80133d4:	4630      	mov	r0, r6
 80133d6:	f000 faf5 	bl	80139c4 <__multadd>
 80133da:	4607      	mov	r7, r0
 80133dc:	e7f0      	b.n	80133c0 <_dtoa_r+0xa38>
 80133de:	f1ba 0f00 	cmp.w	sl, #0
 80133e2:	9a00      	ldr	r2, [sp, #0]
 80133e4:	bfcc      	ite	gt
 80133e6:	46d0      	movgt	r8, sl
 80133e8:	f04f 0801 	movle.w	r8, #1
 80133ec:	4490      	add	r8, r2
 80133ee:	f04f 0900 	mov.w	r9, #0
 80133f2:	4629      	mov	r1, r5
 80133f4:	2201      	movs	r2, #1
 80133f6:	4630      	mov	r0, r6
 80133f8:	9302      	str	r3, [sp, #8]
 80133fa:	f000 fc93 	bl	8013d24 <__lshift>
 80133fe:	4621      	mov	r1, r4
 8013400:	4605      	mov	r5, r0
 8013402:	f000 fcfb 	bl	8013dfc <__mcmp>
 8013406:	2800      	cmp	r0, #0
 8013408:	dcb1      	bgt.n	801336e <_dtoa_r+0x9e6>
 801340a:	d102      	bne.n	8013412 <_dtoa_r+0xa8a>
 801340c:	9b02      	ldr	r3, [sp, #8]
 801340e:	07db      	lsls	r3, r3, #31
 8013410:	d4ad      	bmi.n	801336e <_dtoa_r+0x9e6>
 8013412:	4643      	mov	r3, r8
 8013414:	4698      	mov	r8, r3
 8013416:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801341a:	2a30      	cmp	r2, #48	; 0x30
 801341c:	d0fa      	beq.n	8013414 <_dtoa_r+0xa8c>
 801341e:	e6f6      	b.n	801320e <_dtoa_r+0x886>
 8013420:	9a00      	ldr	r2, [sp, #0]
 8013422:	429a      	cmp	r2, r3
 8013424:	d1a4      	bne.n	8013370 <_dtoa_r+0x9e8>
 8013426:	f10b 0b01 	add.w	fp, fp, #1
 801342a:	2331      	movs	r3, #49	; 0x31
 801342c:	e778      	b.n	8013320 <_dtoa_r+0x998>
 801342e:	4b15      	ldr	r3, [pc, #84]	; (8013484 <_dtoa_r+0xafc>)
 8013430:	f7ff bb12 	b.w	8012a58 <_dtoa_r+0xd0>
 8013434:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013436:	2b00      	cmp	r3, #0
 8013438:	f47f aaee 	bne.w	8012a18 <_dtoa_r+0x90>
 801343c:	4b12      	ldr	r3, [pc, #72]	; (8013488 <_dtoa_r+0xb00>)
 801343e:	f7ff bb0b 	b.w	8012a58 <_dtoa_r+0xd0>
 8013442:	f1ba 0f00 	cmp.w	sl, #0
 8013446:	dc03      	bgt.n	8013450 <_dtoa_r+0xac8>
 8013448:	9b07      	ldr	r3, [sp, #28]
 801344a:	2b02      	cmp	r3, #2
 801344c:	f73f aec7 	bgt.w	80131de <_dtoa_r+0x856>
 8013450:	f8dd 8000 	ldr.w	r8, [sp]
 8013454:	4621      	mov	r1, r4
 8013456:	4628      	mov	r0, r5
 8013458:	f7ff fa0a 	bl	8012870 <quorem>
 801345c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013460:	f808 3b01 	strb.w	r3, [r8], #1
 8013464:	9a00      	ldr	r2, [sp, #0]
 8013466:	eba8 0202 	sub.w	r2, r8, r2
 801346a:	4592      	cmp	sl, r2
 801346c:	ddb7      	ble.n	80133de <_dtoa_r+0xa56>
 801346e:	4629      	mov	r1, r5
 8013470:	2300      	movs	r3, #0
 8013472:	220a      	movs	r2, #10
 8013474:	4630      	mov	r0, r6
 8013476:	f000 faa5 	bl	80139c4 <__multadd>
 801347a:	4605      	mov	r5, r0
 801347c:	e7ea      	b.n	8013454 <_dtoa_r+0xacc>
 801347e:	bf00      	nop
 8013480:	080151e7 	.word	0x080151e7
 8013484:	08015140 	.word	0x08015140
 8013488:	08015164 	.word	0x08015164

0801348c <__sflush_r>:
 801348c:	898a      	ldrh	r2, [r1, #12]
 801348e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013492:	4605      	mov	r5, r0
 8013494:	0710      	lsls	r0, r2, #28
 8013496:	460c      	mov	r4, r1
 8013498:	d458      	bmi.n	801354c <__sflush_r+0xc0>
 801349a:	684b      	ldr	r3, [r1, #4]
 801349c:	2b00      	cmp	r3, #0
 801349e:	dc05      	bgt.n	80134ac <__sflush_r+0x20>
 80134a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	dc02      	bgt.n	80134ac <__sflush_r+0x20>
 80134a6:	2000      	movs	r0, #0
 80134a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80134ae:	2e00      	cmp	r6, #0
 80134b0:	d0f9      	beq.n	80134a6 <__sflush_r+0x1a>
 80134b2:	2300      	movs	r3, #0
 80134b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80134b8:	682f      	ldr	r7, [r5, #0]
 80134ba:	602b      	str	r3, [r5, #0]
 80134bc:	d032      	beq.n	8013524 <__sflush_r+0x98>
 80134be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80134c0:	89a3      	ldrh	r3, [r4, #12]
 80134c2:	075a      	lsls	r2, r3, #29
 80134c4:	d505      	bpl.n	80134d2 <__sflush_r+0x46>
 80134c6:	6863      	ldr	r3, [r4, #4]
 80134c8:	1ac0      	subs	r0, r0, r3
 80134ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80134cc:	b10b      	cbz	r3, 80134d2 <__sflush_r+0x46>
 80134ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80134d0:	1ac0      	subs	r0, r0, r3
 80134d2:	2300      	movs	r3, #0
 80134d4:	4602      	mov	r2, r0
 80134d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80134d8:	6a21      	ldr	r1, [r4, #32]
 80134da:	4628      	mov	r0, r5
 80134dc:	47b0      	blx	r6
 80134de:	1c43      	adds	r3, r0, #1
 80134e0:	89a3      	ldrh	r3, [r4, #12]
 80134e2:	d106      	bne.n	80134f2 <__sflush_r+0x66>
 80134e4:	6829      	ldr	r1, [r5, #0]
 80134e6:	291d      	cmp	r1, #29
 80134e8:	d82c      	bhi.n	8013544 <__sflush_r+0xb8>
 80134ea:	4a2a      	ldr	r2, [pc, #168]	; (8013594 <__sflush_r+0x108>)
 80134ec:	40ca      	lsrs	r2, r1
 80134ee:	07d6      	lsls	r6, r2, #31
 80134f0:	d528      	bpl.n	8013544 <__sflush_r+0xb8>
 80134f2:	2200      	movs	r2, #0
 80134f4:	6062      	str	r2, [r4, #4]
 80134f6:	04d9      	lsls	r1, r3, #19
 80134f8:	6922      	ldr	r2, [r4, #16]
 80134fa:	6022      	str	r2, [r4, #0]
 80134fc:	d504      	bpl.n	8013508 <__sflush_r+0x7c>
 80134fe:	1c42      	adds	r2, r0, #1
 8013500:	d101      	bne.n	8013506 <__sflush_r+0x7a>
 8013502:	682b      	ldr	r3, [r5, #0]
 8013504:	b903      	cbnz	r3, 8013508 <__sflush_r+0x7c>
 8013506:	6560      	str	r0, [r4, #84]	; 0x54
 8013508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801350a:	602f      	str	r7, [r5, #0]
 801350c:	2900      	cmp	r1, #0
 801350e:	d0ca      	beq.n	80134a6 <__sflush_r+0x1a>
 8013510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013514:	4299      	cmp	r1, r3
 8013516:	d002      	beq.n	801351e <__sflush_r+0x92>
 8013518:	4628      	mov	r0, r5
 801351a:	f000 fd7f 	bl	801401c <_free_r>
 801351e:	2000      	movs	r0, #0
 8013520:	6360      	str	r0, [r4, #52]	; 0x34
 8013522:	e7c1      	b.n	80134a8 <__sflush_r+0x1c>
 8013524:	6a21      	ldr	r1, [r4, #32]
 8013526:	2301      	movs	r3, #1
 8013528:	4628      	mov	r0, r5
 801352a:	47b0      	blx	r6
 801352c:	1c41      	adds	r1, r0, #1
 801352e:	d1c7      	bne.n	80134c0 <__sflush_r+0x34>
 8013530:	682b      	ldr	r3, [r5, #0]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d0c4      	beq.n	80134c0 <__sflush_r+0x34>
 8013536:	2b1d      	cmp	r3, #29
 8013538:	d001      	beq.n	801353e <__sflush_r+0xb2>
 801353a:	2b16      	cmp	r3, #22
 801353c:	d101      	bne.n	8013542 <__sflush_r+0xb6>
 801353e:	602f      	str	r7, [r5, #0]
 8013540:	e7b1      	b.n	80134a6 <__sflush_r+0x1a>
 8013542:	89a3      	ldrh	r3, [r4, #12]
 8013544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013548:	81a3      	strh	r3, [r4, #12]
 801354a:	e7ad      	b.n	80134a8 <__sflush_r+0x1c>
 801354c:	690f      	ldr	r7, [r1, #16]
 801354e:	2f00      	cmp	r7, #0
 8013550:	d0a9      	beq.n	80134a6 <__sflush_r+0x1a>
 8013552:	0793      	lsls	r3, r2, #30
 8013554:	680e      	ldr	r6, [r1, #0]
 8013556:	bf08      	it	eq
 8013558:	694b      	ldreq	r3, [r1, #20]
 801355a:	600f      	str	r7, [r1, #0]
 801355c:	bf18      	it	ne
 801355e:	2300      	movne	r3, #0
 8013560:	eba6 0807 	sub.w	r8, r6, r7
 8013564:	608b      	str	r3, [r1, #8]
 8013566:	f1b8 0f00 	cmp.w	r8, #0
 801356a:	dd9c      	ble.n	80134a6 <__sflush_r+0x1a>
 801356c:	6a21      	ldr	r1, [r4, #32]
 801356e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013570:	4643      	mov	r3, r8
 8013572:	463a      	mov	r2, r7
 8013574:	4628      	mov	r0, r5
 8013576:	47b0      	blx	r6
 8013578:	2800      	cmp	r0, #0
 801357a:	dc06      	bgt.n	801358a <__sflush_r+0xfe>
 801357c:	89a3      	ldrh	r3, [r4, #12]
 801357e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013582:	81a3      	strh	r3, [r4, #12]
 8013584:	f04f 30ff 	mov.w	r0, #4294967295
 8013588:	e78e      	b.n	80134a8 <__sflush_r+0x1c>
 801358a:	4407      	add	r7, r0
 801358c:	eba8 0800 	sub.w	r8, r8, r0
 8013590:	e7e9      	b.n	8013566 <__sflush_r+0xda>
 8013592:	bf00      	nop
 8013594:	20400001 	.word	0x20400001

08013598 <_fflush_r>:
 8013598:	b538      	push	{r3, r4, r5, lr}
 801359a:	690b      	ldr	r3, [r1, #16]
 801359c:	4605      	mov	r5, r0
 801359e:	460c      	mov	r4, r1
 80135a0:	b913      	cbnz	r3, 80135a8 <_fflush_r+0x10>
 80135a2:	2500      	movs	r5, #0
 80135a4:	4628      	mov	r0, r5
 80135a6:	bd38      	pop	{r3, r4, r5, pc}
 80135a8:	b118      	cbz	r0, 80135b2 <_fflush_r+0x1a>
 80135aa:	6983      	ldr	r3, [r0, #24]
 80135ac:	b90b      	cbnz	r3, 80135b2 <_fflush_r+0x1a>
 80135ae:	f000 f887 	bl	80136c0 <__sinit>
 80135b2:	4b14      	ldr	r3, [pc, #80]	; (8013604 <_fflush_r+0x6c>)
 80135b4:	429c      	cmp	r4, r3
 80135b6:	d11b      	bne.n	80135f0 <_fflush_r+0x58>
 80135b8:	686c      	ldr	r4, [r5, #4]
 80135ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d0ef      	beq.n	80135a2 <_fflush_r+0xa>
 80135c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80135c4:	07d0      	lsls	r0, r2, #31
 80135c6:	d404      	bmi.n	80135d2 <_fflush_r+0x3a>
 80135c8:	0599      	lsls	r1, r3, #22
 80135ca:	d402      	bmi.n	80135d2 <_fflush_r+0x3a>
 80135cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135ce:	f000 f91a 	bl	8013806 <__retarget_lock_acquire_recursive>
 80135d2:	4628      	mov	r0, r5
 80135d4:	4621      	mov	r1, r4
 80135d6:	f7ff ff59 	bl	801348c <__sflush_r>
 80135da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80135dc:	07da      	lsls	r2, r3, #31
 80135de:	4605      	mov	r5, r0
 80135e0:	d4e0      	bmi.n	80135a4 <_fflush_r+0xc>
 80135e2:	89a3      	ldrh	r3, [r4, #12]
 80135e4:	059b      	lsls	r3, r3, #22
 80135e6:	d4dd      	bmi.n	80135a4 <_fflush_r+0xc>
 80135e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135ea:	f000 f90d 	bl	8013808 <__retarget_lock_release_recursive>
 80135ee:	e7d9      	b.n	80135a4 <_fflush_r+0xc>
 80135f0:	4b05      	ldr	r3, [pc, #20]	; (8013608 <_fflush_r+0x70>)
 80135f2:	429c      	cmp	r4, r3
 80135f4:	d101      	bne.n	80135fa <_fflush_r+0x62>
 80135f6:	68ac      	ldr	r4, [r5, #8]
 80135f8:	e7df      	b.n	80135ba <_fflush_r+0x22>
 80135fa:	4b04      	ldr	r3, [pc, #16]	; (801360c <_fflush_r+0x74>)
 80135fc:	429c      	cmp	r4, r3
 80135fe:	bf08      	it	eq
 8013600:	68ec      	ldreq	r4, [r5, #12]
 8013602:	e7da      	b.n	80135ba <_fflush_r+0x22>
 8013604:	08015218 	.word	0x08015218
 8013608:	08015238 	.word	0x08015238
 801360c:	080151f8 	.word	0x080151f8

08013610 <std>:
 8013610:	2300      	movs	r3, #0
 8013612:	b510      	push	{r4, lr}
 8013614:	4604      	mov	r4, r0
 8013616:	e9c0 3300 	strd	r3, r3, [r0]
 801361a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801361e:	6083      	str	r3, [r0, #8]
 8013620:	8181      	strh	r1, [r0, #12]
 8013622:	6643      	str	r3, [r0, #100]	; 0x64
 8013624:	81c2      	strh	r2, [r0, #14]
 8013626:	6183      	str	r3, [r0, #24]
 8013628:	4619      	mov	r1, r3
 801362a:	2208      	movs	r2, #8
 801362c:	305c      	adds	r0, #92	; 0x5c
 801362e:	f7fe fb87 	bl	8011d40 <memset>
 8013632:	4b05      	ldr	r3, [pc, #20]	; (8013648 <std+0x38>)
 8013634:	6263      	str	r3, [r4, #36]	; 0x24
 8013636:	4b05      	ldr	r3, [pc, #20]	; (801364c <std+0x3c>)
 8013638:	62a3      	str	r3, [r4, #40]	; 0x28
 801363a:	4b05      	ldr	r3, [pc, #20]	; (8013650 <std+0x40>)
 801363c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801363e:	4b05      	ldr	r3, [pc, #20]	; (8013654 <std+0x44>)
 8013640:	6224      	str	r4, [r4, #32]
 8013642:	6323      	str	r3, [r4, #48]	; 0x30
 8013644:	bd10      	pop	{r4, pc}
 8013646:	bf00      	nop
 8013648:	08014445 	.word	0x08014445
 801364c:	08014467 	.word	0x08014467
 8013650:	0801449f 	.word	0x0801449f
 8013654:	080144c3 	.word	0x080144c3

08013658 <_cleanup_r>:
 8013658:	4901      	ldr	r1, [pc, #4]	; (8013660 <_cleanup_r+0x8>)
 801365a:	f000 b8af 	b.w	80137bc <_fwalk_reent>
 801365e:	bf00      	nop
 8013660:	08013599 	.word	0x08013599

08013664 <__sfmoreglue>:
 8013664:	b570      	push	{r4, r5, r6, lr}
 8013666:	1e4a      	subs	r2, r1, #1
 8013668:	2568      	movs	r5, #104	; 0x68
 801366a:	4355      	muls	r5, r2
 801366c:	460e      	mov	r6, r1
 801366e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013672:	f000 fd23 	bl	80140bc <_malloc_r>
 8013676:	4604      	mov	r4, r0
 8013678:	b140      	cbz	r0, 801368c <__sfmoreglue+0x28>
 801367a:	2100      	movs	r1, #0
 801367c:	e9c0 1600 	strd	r1, r6, [r0]
 8013680:	300c      	adds	r0, #12
 8013682:	60a0      	str	r0, [r4, #8]
 8013684:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013688:	f7fe fb5a 	bl	8011d40 <memset>
 801368c:	4620      	mov	r0, r4
 801368e:	bd70      	pop	{r4, r5, r6, pc}

08013690 <__sfp_lock_acquire>:
 8013690:	4801      	ldr	r0, [pc, #4]	; (8013698 <__sfp_lock_acquire+0x8>)
 8013692:	f000 b8b8 	b.w	8013806 <__retarget_lock_acquire_recursive>
 8013696:	bf00      	nop
 8013698:	24000eb0 	.word	0x24000eb0

0801369c <__sfp_lock_release>:
 801369c:	4801      	ldr	r0, [pc, #4]	; (80136a4 <__sfp_lock_release+0x8>)
 801369e:	f000 b8b3 	b.w	8013808 <__retarget_lock_release_recursive>
 80136a2:	bf00      	nop
 80136a4:	24000eb0 	.word	0x24000eb0

080136a8 <__sinit_lock_acquire>:
 80136a8:	4801      	ldr	r0, [pc, #4]	; (80136b0 <__sinit_lock_acquire+0x8>)
 80136aa:	f000 b8ac 	b.w	8013806 <__retarget_lock_acquire_recursive>
 80136ae:	bf00      	nop
 80136b0:	24000eab 	.word	0x24000eab

080136b4 <__sinit_lock_release>:
 80136b4:	4801      	ldr	r0, [pc, #4]	; (80136bc <__sinit_lock_release+0x8>)
 80136b6:	f000 b8a7 	b.w	8013808 <__retarget_lock_release_recursive>
 80136ba:	bf00      	nop
 80136bc:	24000eab 	.word	0x24000eab

080136c0 <__sinit>:
 80136c0:	b510      	push	{r4, lr}
 80136c2:	4604      	mov	r4, r0
 80136c4:	f7ff fff0 	bl	80136a8 <__sinit_lock_acquire>
 80136c8:	69a3      	ldr	r3, [r4, #24]
 80136ca:	b11b      	cbz	r3, 80136d4 <__sinit+0x14>
 80136cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136d0:	f7ff bff0 	b.w	80136b4 <__sinit_lock_release>
 80136d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80136d8:	6523      	str	r3, [r4, #80]	; 0x50
 80136da:	4b13      	ldr	r3, [pc, #76]	; (8013728 <__sinit+0x68>)
 80136dc:	4a13      	ldr	r2, [pc, #76]	; (801372c <__sinit+0x6c>)
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80136e2:	42a3      	cmp	r3, r4
 80136e4:	bf04      	itt	eq
 80136e6:	2301      	moveq	r3, #1
 80136e8:	61a3      	streq	r3, [r4, #24]
 80136ea:	4620      	mov	r0, r4
 80136ec:	f000 f820 	bl	8013730 <__sfp>
 80136f0:	6060      	str	r0, [r4, #4]
 80136f2:	4620      	mov	r0, r4
 80136f4:	f000 f81c 	bl	8013730 <__sfp>
 80136f8:	60a0      	str	r0, [r4, #8]
 80136fa:	4620      	mov	r0, r4
 80136fc:	f000 f818 	bl	8013730 <__sfp>
 8013700:	2200      	movs	r2, #0
 8013702:	60e0      	str	r0, [r4, #12]
 8013704:	2104      	movs	r1, #4
 8013706:	6860      	ldr	r0, [r4, #4]
 8013708:	f7ff ff82 	bl	8013610 <std>
 801370c:	68a0      	ldr	r0, [r4, #8]
 801370e:	2201      	movs	r2, #1
 8013710:	2109      	movs	r1, #9
 8013712:	f7ff ff7d 	bl	8013610 <std>
 8013716:	68e0      	ldr	r0, [r4, #12]
 8013718:	2202      	movs	r2, #2
 801371a:	2112      	movs	r1, #18
 801371c:	f7ff ff78 	bl	8013610 <std>
 8013720:	2301      	movs	r3, #1
 8013722:	61a3      	str	r3, [r4, #24]
 8013724:	e7d2      	b.n	80136cc <__sinit+0xc>
 8013726:	bf00      	nop
 8013728:	0801512c 	.word	0x0801512c
 801372c:	08013659 	.word	0x08013659

08013730 <__sfp>:
 8013730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013732:	4607      	mov	r7, r0
 8013734:	f7ff ffac 	bl	8013690 <__sfp_lock_acquire>
 8013738:	4b1e      	ldr	r3, [pc, #120]	; (80137b4 <__sfp+0x84>)
 801373a:	681e      	ldr	r6, [r3, #0]
 801373c:	69b3      	ldr	r3, [r6, #24]
 801373e:	b913      	cbnz	r3, 8013746 <__sfp+0x16>
 8013740:	4630      	mov	r0, r6
 8013742:	f7ff ffbd 	bl	80136c0 <__sinit>
 8013746:	3648      	adds	r6, #72	; 0x48
 8013748:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801374c:	3b01      	subs	r3, #1
 801374e:	d503      	bpl.n	8013758 <__sfp+0x28>
 8013750:	6833      	ldr	r3, [r6, #0]
 8013752:	b30b      	cbz	r3, 8013798 <__sfp+0x68>
 8013754:	6836      	ldr	r6, [r6, #0]
 8013756:	e7f7      	b.n	8013748 <__sfp+0x18>
 8013758:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801375c:	b9d5      	cbnz	r5, 8013794 <__sfp+0x64>
 801375e:	4b16      	ldr	r3, [pc, #88]	; (80137b8 <__sfp+0x88>)
 8013760:	60e3      	str	r3, [r4, #12]
 8013762:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013766:	6665      	str	r5, [r4, #100]	; 0x64
 8013768:	f000 f84c 	bl	8013804 <__retarget_lock_init_recursive>
 801376c:	f7ff ff96 	bl	801369c <__sfp_lock_release>
 8013770:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013774:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013778:	6025      	str	r5, [r4, #0]
 801377a:	61a5      	str	r5, [r4, #24]
 801377c:	2208      	movs	r2, #8
 801377e:	4629      	mov	r1, r5
 8013780:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013784:	f7fe fadc 	bl	8011d40 <memset>
 8013788:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801378c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013790:	4620      	mov	r0, r4
 8013792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013794:	3468      	adds	r4, #104	; 0x68
 8013796:	e7d9      	b.n	801374c <__sfp+0x1c>
 8013798:	2104      	movs	r1, #4
 801379a:	4638      	mov	r0, r7
 801379c:	f7ff ff62 	bl	8013664 <__sfmoreglue>
 80137a0:	4604      	mov	r4, r0
 80137a2:	6030      	str	r0, [r6, #0]
 80137a4:	2800      	cmp	r0, #0
 80137a6:	d1d5      	bne.n	8013754 <__sfp+0x24>
 80137a8:	f7ff ff78 	bl	801369c <__sfp_lock_release>
 80137ac:	230c      	movs	r3, #12
 80137ae:	603b      	str	r3, [r7, #0]
 80137b0:	e7ee      	b.n	8013790 <__sfp+0x60>
 80137b2:	bf00      	nop
 80137b4:	0801512c 	.word	0x0801512c
 80137b8:	ffff0001 	.word	0xffff0001

080137bc <_fwalk_reent>:
 80137bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137c0:	4606      	mov	r6, r0
 80137c2:	4688      	mov	r8, r1
 80137c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80137c8:	2700      	movs	r7, #0
 80137ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80137ce:	f1b9 0901 	subs.w	r9, r9, #1
 80137d2:	d505      	bpl.n	80137e0 <_fwalk_reent+0x24>
 80137d4:	6824      	ldr	r4, [r4, #0]
 80137d6:	2c00      	cmp	r4, #0
 80137d8:	d1f7      	bne.n	80137ca <_fwalk_reent+0xe>
 80137da:	4638      	mov	r0, r7
 80137dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137e0:	89ab      	ldrh	r3, [r5, #12]
 80137e2:	2b01      	cmp	r3, #1
 80137e4:	d907      	bls.n	80137f6 <_fwalk_reent+0x3a>
 80137e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80137ea:	3301      	adds	r3, #1
 80137ec:	d003      	beq.n	80137f6 <_fwalk_reent+0x3a>
 80137ee:	4629      	mov	r1, r5
 80137f0:	4630      	mov	r0, r6
 80137f2:	47c0      	blx	r8
 80137f4:	4307      	orrs	r7, r0
 80137f6:	3568      	adds	r5, #104	; 0x68
 80137f8:	e7e9      	b.n	80137ce <_fwalk_reent+0x12>
	...

080137fc <_localeconv_r>:
 80137fc:	4800      	ldr	r0, [pc, #0]	; (8013800 <_localeconv_r+0x4>)
 80137fe:	4770      	bx	lr
 8013800:	24000178 	.word	0x24000178

08013804 <__retarget_lock_init_recursive>:
 8013804:	4770      	bx	lr

08013806 <__retarget_lock_acquire_recursive>:
 8013806:	4770      	bx	lr

08013808 <__retarget_lock_release_recursive>:
 8013808:	4770      	bx	lr

0801380a <__swhatbuf_r>:
 801380a:	b570      	push	{r4, r5, r6, lr}
 801380c:	460e      	mov	r6, r1
 801380e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013812:	2900      	cmp	r1, #0
 8013814:	b096      	sub	sp, #88	; 0x58
 8013816:	4614      	mov	r4, r2
 8013818:	461d      	mov	r5, r3
 801381a:	da07      	bge.n	801382c <__swhatbuf_r+0x22>
 801381c:	2300      	movs	r3, #0
 801381e:	602b      	str	r3, [r5, #0]
 8013820:	89b3      	ldrh	r3, [r6, #12]
 8013822:	061a      	lsls	r2, r3, #24
 8013824:	d410      	bmi.n	8013848 <__swhatbuf_r+0x3e>
 8013826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801382a:	e00e      	b.n	801384a <__swhatbuf_r+0x40>
 801382c:	466a      	mov	r2, sp
 801382e:	f000 fe9f 	bl	8014570 <_fstat_r>
 8013832:	2800      	cmp	r0, #0
 8013834:	dbf2      	blt.n	801381c <__swhatbuf_r+0x12>
 8013836:	9a01      	ldr	r2, [sp, #4]
 8013838:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801383c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013840:	425a      	negs	r2, r3
 8013842:	415a      	adcs	r2, r3
 8013844:	602a      	str	r2, [r5, #0]
 8013846:	e7ee      	b.n	8013826 <__swhatbuf_r+0x1c>
 8013848:	2340      	movs	r3, #64	; 0x40
 801384a:	2000      	movs	r0, #0
 801384c:	6023      	str	r3, [r4, #0]
 801384e:	b016      	add	sp, #88	; 0x58
 8013850:	bd70      	pop	{r4, r5, r6, pc}
	...

08013854 <__smakebuf_r>:
 8013854:	898b      	ldrh	r3, [r1, #12]
 8013856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013858:	079d      	lsls	r5, r3, #30
 801385a:	4606      	mov	r6, r0
 801385c:	460c      	mov	r4, r1
 801385e:	d507      	bpl.n	8013870 <__smakebuf_r+0x1c>
 8013860:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013864:	6023      	str	r3, [r4, #0]
 8013866:	6123      	str	r3, [r4, #16]
 8013868:	2301      	movs	r3, #1
 801386a:	6163      	str	r3, [r4, #20]
 801386c:	b002      	add	sp, #8
 801386e:	bd70      	pop	{r4, r5, r6, pc}
 8013870:	ab01      	add	r3, sp, #4
 8013872:	466a      	mov	r2, sp
 8013874:	f7ff ffc9 	bl	801380a <__swhatbuf_r>
 8013878:	9900      	ldr	r1, [sp, #0]
 801387a:	4605      	mov	r5, r0
 801387c:	4630      	mov	r0, r6
 801387e:	f000 fc1d 	bl	80140bc <_malloc_r>
 8013882:	b948      	cbnz	r0, 8013898 <__smakebuf_r+0x44>
 8013884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013888:	059a      	lsls	r2, r3, #22
 801388a:	d4ef      	bmi.n	801386c <__smakebuf_r+0x18>
 801388c:	f023 0303 	bic.w	r3, r3, #3
 8013890:	f043 0302 	orr.w	r3, r3, #2
 8013894:	81a3      	strh	r3, [r4, #12]
 8013896:	e7e3      	b.n	8013860 <__smakebuf_r+0xc>
 8013898:	4b0d      	ldr	r3, [pc, #52]	; (80138d0 <__smakebuf_r+0x7c>)
 801389a:	62b3      	str	r3, [r6, #40]	; 0x28
 801389c:	89a3      	ldrh	r3, [r4, #12]
 801389e:	6020      	str	r0, [r4, #0]
 80138a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138a4:	81a3      	strh	r3, [r4, #12]
 80138a6:	9b00      	ldr	r3, [sp, #0]
 80138a8:	6163      	str	r3, [r4, #20]
 80138aa:	9b01      	ldr	r3, [sp, #4]
 80138ac:	6120      	str	r0, [r4, #16]
 80138ae:	b15b      	cbz	r3, 80138c8 <__smakebuf_r+0x74>
 80138b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80138b4:	4630      	mov	r0, r6
 80138b6:	f000 fe6d 	bl	8014594 <_isatty_r>
 80138ba:	b128      	cbz	r0, 80138c8 <__smakebuf_r+0x74>
 80138bc:	89a3      	ldrh	r3, [r4, #12]
 80138be:	f023 0303 	bic.w	r3, r3, #3
 80138c2:	f043 0301 	orr.w	r3, r3, #1
 80138c6:	81a3      	strh	r3, [r4, #12]
 80138c8:	89a0      	ldrh	r0, [r4, #12]
 80138ca:	4305      	orrs	r5, r0
 80138cc:	81a5      	strh	r5, [r4, #12]
 80138ce:	e7cd      	b.n	801386c <__smakebuf_r+0x18>
 80138d0:	08013659 	.word	0x08013659

080138d4 <malloc>:
 80138d4:	4b02      	ldr	r3, [pc, #8]	; (80138e0 <malloc+0xc>)
 80138d6:	4601      	mov	r1, r0
 80138d8:	6818      	ldr	r0, [r3, #0]
 80138da:	f000 bbef 	b.w	80140bc <_malloc_r>
 80138de:	bf00      	nop
 80138e0:	24000024 	.word	0x24000024

080138e4 <memcpy>:
 80138e4:	440a      	add	r2, r1
 80138e6:	4291      	cmp	r1, r2
 80138e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80138ec:	d100      	bne.n	80138f0 <memcpy+0xc>
 80138ee:	4770      	bx	lr
 80138f0:	b510      	push	{r4, lr}
 80138f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80138fa:	4291      	cmp	r1, r2
 80138fc:	d1f9      	bne.n	80138f2 <memcpy+0xe>
 80138fe:	bd10      	pop	{r4, pc}

08013900 <_Balloc>:
 8013900:	b570      	push	{r4, r5, r6, lr}
 8013902:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013904:	4604      	mov	r4, r0
 8013906:	460d      	mov	r5, r1
 8013908:	b976      	cbnz	r6, 8013928 <_Balloc+0x28>
 801390a:	2010      	movs	r0, #16
 801390c:	f7ff ffe2 	bl	80138d4 <malloc>
 8013910:	4602      	mov	r2, r0
 8013912:	6260      	str	r0, [r4, #36]	; 0x24
 8013914:	b920      	cbnz	r0, 8013920 <_Balloc+0x20>
 8013916:	4b18      	ldr	r3, [pc, #96]	; (8013978 <_Balloc+0x78>)
 8013918:	4818      	ldr	r0, [pc, #96]	; (801397c <_Balloc+0x7c>)
 801391a:	2166      	movs	r1, #102	; 0x66
 801391c:	f000 fde8 	bl	80144f0 <__assert_func>
 8013920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013924:	6006      	str	r6, [r0, #0]
 8013926:	60c6      	str	r6, [r0, #12]
 8013928:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801392a:	68f3      	ldr	r3, [r6, #12]
 801392c:	b183      	cbz	r3, 8013950 <_Balloc+0x50>
 801392e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013930:	68db      	ldr	r3, [r3, #12]
 8013932:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013936:	b9b8      	cbnz	r0, 8013968 <_Balloc+0x68>
 8013938:	2101      	movs	r1, #1
 801393a:	fa01 f605 	lsl.w	r6, r1, r5
 801393e:	1d72      	adds	r2, r6, #5
 8013940:	0092      	lsls	r2, r2, #2
 8013942:	4620      	mov	r0, r4
 8013944:	f000 fb5a 	bl	8013ffc <_calloc_r>
 8013948:	b160      	cbz	r0, 8013964 <_Balloc+0x64>
 801394a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801394e:	e00e      	b.n	801396e <_Balloc+0x6e>
 8013950:	2221      	movs	r2, #33	; 0x21
 8013952:	2104      	movs	r1, #4
 8013954:	4620      	mov	r0, r4
 8013956:	f000 fb51 	bl	8013ffc <_calloc_r>
 801395a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801395c:	60f0      	str	r0, [r6, #12]
 801395e:	68db      	ldr	r3, [r3, #12]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d1e4      	bne.n	801392e <_Balloc+0x2e>
 8013964:	2000      	movs	r0, #0
 8013966:	bd70      	pop	{r4, r5, r6, pc}
 8013968:	6802      	ldr	r2, [r0, #0]
 801396a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801396e:	2300      	movs	r3, #0
 8013970:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013974:	e7f7      	b.n	8013966 <_Balloc+0x66>
 8013976:	bf00      	nop
 8013978:	08015171 	.word	0x08015171
 801397c:	08015258 	.word	0x08015258

08013980 <_Bfree>:
 8013980:	b570      	push	{r4, r5, r6, lr}
 8013982:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013984:	4605      	mov	r5, r0
 8013986:	460c      	mov	r4, r1
 8013988:	b976      	cbnz	r6, 80139a8 <_Bfree+0x28>
 801398a:	2010      	movs	r0, #16
 801398c:	f7ff ffa2 	bl	80138d4 <malloc>
 8013990:	4602      	mov	r2, r0
 8013992:	6268      	str	r0, [r5, #36]	; 0x24
 8013994:	b920      	cbnz	r0, 80139a0 <_Bfree+0x20>
 8013996:	4b09      	ldr	r3, [pc, #36]	; (80139bc <_Bfree+0x3c>)
 8013998:	4809      	ldr	r0, [pc, #36]	; (80139c0 <_Bfree+0x40>)
 801399a:	218a      	movs	r1, #138	; 0x8a
 801399c:	f000 fda8 	bl	80144f0 <__assert_func>
 80139a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80139a4:	6006      	str	r6, [r0, #0]
 80139a6:	60c6      	str	r6, [r0, #12]
 80139a8:	b13c      	cbz	r4, 80139ba <_Bfree+0x3a>
 80139aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80139ac:	6862      	ldr	r2, [r4, #4]
 80139ae:	68db      	ldr	r3, [r3, #12]
 80139b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80139b4:	6021      	str	r1, [r4, #0]
 80139b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80139ba:	bd70      	pop	{r4, r5, r6, pc}
 80139bc:	08015171 	.word	0x08015171
 80139c0:	08015258 	.word	0x08015258

080139c4 <__multadd>:
 80139c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139c8:	690e      	ldr	r6, [r1, #16]
 80139ca:	4607      	mov	r7, r0
 80139cc:	4698      	mov	r8, r3
 80139ce:	460c      	mov	r4, r1
 80139d0:	f101 0014 	add.w	r0, r1, #20
 80139d4:	2300      	movs	r3, #0
 80139d6:	6805      	ldr	r5, [r0, #0]
 80139d8:	b2a9      	uxth	r1, r5
 80139da:	fb02 8101 	mla	r1, r2, r1, r8
 80139de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80139e2:	0c2d      	lsrs	r5, r5, #16
 80139e4:	fb02 c505 	mla	r5, r2, r5, ip
 80139e8:	b289      	uxth	r1, r1
 80139ea:	3301      	adds	r3, #1
 80139ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80139f0:	429e      	cmp	r6, r3
 80139f2:	f840 1b04 	str.w	r1, [r0], #4
 80139f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80139fa:	dcec      	bgt.n	80139d6 <__multadd+0x12>
 80139fc:	f1b8 0f00 	cmp.w	r8, #0
 8013a00:	d022      	beq.n	8013a48 <__multadd+0x84>
 8013a02:	68a3      	ldr	r3, [r4, #8]
 8013a04:	42b3      	cmp	r3, r6
 8013a06:	dc19      	bgt.n	8013a3c <__multadd+0x78>
 8013a08:	6861      	ldr	r1, [r4, #4]
 8013a0a:	4638      	mov	r0, r7
 8013a0c:	3101      	adds	r1, #1
 8013a0e:	f7ff ff77 	bl	8013900 <_Balloc>
 8013a12:	4605      	mov	r5, r0
 8013a14:	b928      	cbnz	r0, 8013a22 <__multadd+0x5e>
 8013a16:	4602      	mov	r2, r0
 8013a18:	4b0d      	ldr	r3, [pc, #52]	; (8013a50 <__multadd+0x8c>)
 8013a1a:	480e      	ldr	r0, [pc, #56]	; (8013a54 <__multadd+0x90>)
 8013a1c:	21b5      	movs	r1, #181	; 0xb5
 8013a1e:	f000 fd67 	bl	80144f0 <__assert_func>
 8013a22:	6922      	ldr	r2, [r4, #16]
 8013a24:	3202      	adds	r2, #2
 8013a26:	f104 010c 	add.w	r1, r4, #12
 8013a2a:	0092      	lsls	r2, r2, #2
 8013a2c:	300c      	adds	r0, #12
 8013a2e:	f7ff ff59 	bl	80138e4 <memcpy>
 8013a32:	4621      	mov	r1, r4
 8013a34:	4638      	mov	r0, r7
 8013a36:	f7ff ffa3 	bl	8013980 <_Bfree>
 8013a3a:	462c      	mov	r4, r5
 8013a3c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013a40:	3601      	adds	r6, #1
 8013a42:	f8c3 8014 	str.w	r8, [r3, #20]
 8013a46:	6126      	str	r6, [r4, #16]
 8013a48:	4620      	mov	r0, r4
 8013a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a4e:	bf00      	nop
 8013a50:	080151e7 	.word	0x080151e7
 8013a54:	08015258 	.word	0x08015258

08013a58 <__hi0bits>:
 8013a58:	0c03      	lsrs	r3, r0, #16
 8013a5a:	041b      	lsls	r3, r3, #16
 8013a5c:	b9d3      	cbnz	r3, 8013a94 <__hi0bits+0x3c>
 8013a5e:	0400      	lsls	r0, r0, #16
 8013a60:	2310      	movs	r3, #16
 8013a62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013a66:	bf04      	itt	eq
 8013a68:	0200      	lsleq	r0, r0, #8
 8013a6a:	3308      	addeq	r3, #8
 8013a6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013a70:	bf04      	itt	eq
 8013a72:	0100      	lsleq	r0, r0, #4
 8013a74:	3304      	addeq	r3, #4
 8013a76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013a7a:	bf04      	itt	eq
 8013a7c:	0080      	lsleq	r0, r0, #2
 8013a7e:	3302      	addeq	r3, #2
 8013a80:	2800      	cmp	r0, #0
 8013a82:	db05      	blt.n	8013a90 <__hi0bits+0x38>
 8013a84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013a88:	f103 0301 	add.w	r3, r3, #1
 8013a8c:	bf08      	it	eq
 8013a8e:	2320      	moveq	r3, #32
 8013a90:	4618      	mov	r0, r3
 8013a92:	4770      	bx	lr
 8013a94:	2300      	movs	r3, #0
 8013a96:	e7e4      	b.n	8013a62 <__hi0bits+0xa>

08013a98 <__lo0bits>:
 8013a98:	6803      	ldr	r3, [r0, #0]
 8013a9a:	f013 0207 	ands.w	r2, r3, #7
 8013a9e:	4601      	mov	r1, r0
 8013aa0:	d00b      	beq.n	8013aba <__lo0bits+0x22>
 8013aa2:	07da      	lsls	r2, r3, #31
 8013aa4:	d424      	bmi.n	8013af0 <__lo0bits+0x58>
 8013aa6:	0798      	lsls	r0, r3, #30
 8013aa8:	bf49      	itett	mi
 8013aaa:	085b      	lsrmi	r3, r3, #1
 8013aac:	089b      	lsrpl	r3, r3, #2
 8013aae:	2001      	movmi	r0, #1
 8013ab0:	600b      	strmi	r3, [r1, #0]
 8013ab2:	bf5c      	itt	pl
 8013ab4:	600b      	strpl	r3, [r1, #0]
 8013ab6:	2002      	movpl	r0, #2
 8013ab8:	4770      	bx	lr
 8013aba:	b298      	uxth	r0, r3
 8013abc:	b9b0      	cbnz	r0, 8013aec <__lo0bits+0x54>
 8013abe:	0c1b      	lsrs	r3, r3, #16
 8013ac0:	2010      	movs	r0, #16
 8013ac2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013ac6:	bf04      	itt	eq
 8013ac8:	0a1b      	lsreq	r3, r3, #8
 8013aca:	3008      	addeq	r0, #8
 8013acc:	071a      	lsls	r2, r3, #28
 8013ace:	bf04      	itt	eq
 8013ad0:	091b      	lsreq	r3, r3, #4
 8013ad2:	3004      	addeq	r0, #4
 8013ad4:	079a      	lsls	r2, r3, #30
 8013ad6:	bf04      	itt	eq
 8013ad8:	089b      	lsreq	r3, r3, #2
 8013ada:	3002      	addeq	r0, #2
 8013adc:	07da      	lsls	r2, r3, #31
 8013ade:	d403      	bmi.n	8013ae8 <__lo0bits+0x50>
 8013ae0:	085b      	lsrs	r3, r3, #1
 8013ae2:	f100 0001 	add.w	r0, r0, #1
 8013ae6:	d005      	beq.n	8013af4 <__lo0bits+0x5c>
 8013ae8:	600b      	str	r3, [r1, #0]
 8013aea:	4770      	bx	lr
 8013aec:	4610      	mov	r0, r2
 8013aee:	e7e8      	b.n	8013ac2 <__lo0bits+0x2a>
 8013af0:	2000      	movs	r0, #0
 8013af2:	4770      	bx	lr
 8013af4:	2020      	movs	r0, #32
 8013af6:	4770      	bx	lr

08013af8 <__i2b>:
 8013af8:	b510      	push	{r4, lr}
 8013afa:	460c      	mov	r4, r1
 8013afc:	2101      	movs	r1, #1
 8013afe:	f7ff feff 	bl	8013900 <_Balloc>
 8013b02:	4602      	mov	r2, r0
 8013b04:	b928      	cbnz	r0, 8013b12 <__i2b+0x1a>
 8013b06:	4b05      	ldr	r3, [pc, #20]	; (8013b1c <__i2b+0x24>)
 8013b08:	4805      	ldr	r0, [pc, #20]	; (8013b20 <__i2b+0x28>)
 8013b0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013b0e:	f000 fcef 	bl	80144f0 <__assert_func>
 8013b12:	2301      	movs	r3, #1
 8013b14:	6144      	str	r4, [r0, #20]
 8013b16:	6103      	str	r3, [r0, #16]
 8013b18:	bd10      	pop	{r4, pc}
 8013b1a:	bf00      	nop
 8013b1c:	080151e7 	.word	0x080151e7
 8013b20:	08015258 	.word	0x08015258

08013b24 <__multiply>:
 8013b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b28:	4614      	mov	r4, r2
 8013b2a:	690a      	ldr	r2, [r1, #16]
 8013b2c:	6923      	ldr	r3, [r4, #16]
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	bfb8      	it	lt
 8013b32:	460b      	movlt	r3, r1
 8013b34:	460d      	mov	r5, r1
 8013b36:	bfbc      	itt	lt
 8013b38:	4625      	movlt	r5, r4
 8013b3a:	461c      	movlt	r4, r3
 8013b3c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013b40:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013b44:	68ab      	ldr	r3, [r5, #8]
 8013b46:	6869      	ldr	r1, [r5, #4]
 8013b48:	eb0a 0709 	add.w	r7, sl, r9
 8013b4c:	42bb      	cmp	r3, r7
 8013b4e:	b085      	sub	sp, #20
 8013b50:	bfb8      	it	lt
 8013b52:	3101      	addlt	r1, #1
 8013b54:	f7ff fed4 	bl	8013900 <_Balloc>
 8013b58:	b930      	cbnz	r0, 8013b68 <__multiply+0x44>
 8013b5a:	4602      	mov	r2, r0
 8013b5c:	4b42      	ldr	r3, [pc, #264]	; (8013c68 <__multiply+0x144>)
 8013b5e:	4843      	ldr	r0, [pc, #268]	; (8013c6c <__multiply+0x148>)
 8013b60:	f240 115d 	movw	r1, #349	; 0x15d
 8013b64:	f000 fcc4 	bl	80144f0 <__assert_func>
 8013b68:	f100 0614 	add.w	r6, r0, #20
 8013b6c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013b70:	4633      	mov	r3, r6
 8013b72:	2200      	movs	r2, #0
 8013b74:	4543      	cmp	r3, r8
 8013b76:	d31e      	bcc.n	8013bb6 <__multiply+0x92>
 8013b78:	f105 0c14 	add.w	ip, r5, #20
 8013b7c:	f104 0314 	add.w	r3, r4, #20
 8013b80:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013b84:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013b88:	9202      	str	r2, [sp, #8]
 8013b8a:	ebac 0205 	sub.w	r2, ip, r5
 8013b8e:	3a15      	subs	r2, #21
 8013b90:	f022 0203 	bic.w	r2, r2, #3
 8013b94:	3204      	adds	r2, #4
 8013b96:	f105 0115 	add.w	r1, r5, #21
 8013b9a:	458c      	cmp	ip, r1
 8013b9c:	bf38      	it	cc
 8013b9e:	2204      	movcc	r2, #4
 8013ba0:	9201      	str	r2, [sp, #4]
 8013ba2:	9a02      	ldr	r2, [sp, #8]
 8013ba4:	9303      	str	r3, [sp, #12]
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d808      	bhi.n	8013bbc <__multiply+0x98>
 8013baa:	2f00      	cmp	r7, #0
 8013bac:	dc55      	bgt.n	8013c5a <__multiply+0x136>
 8013bae:	6107      	str	r7, [r0, #16]
 8013bb0:	b005      	add	sp, #20
 8013bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bb6:	f843 2b04 	str.w	r2, [r3], #4
 8013bba:	e7db      	b.n	8013b74 <__multiply+0x50>
 8013bbc:	f8b3 a000 	ldrh.w	sl, [r3]
 8013bc0:	f1ba 0f00 	cmp.w	sl, #0
 8013bc4:	d020      	beq.n	8013c08 <__multiply+0xe4>
 8013bc6:	f105 0e14 	add.w	lr, r5, #20
 8013bca:	46b1      	mov	r9, r6
 8013bcc:	2200      	movs	r2, #0
 8013bce:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013bd2:	f8d9 b000 	ldr.w	fp, [r9]
 8013bd6:	b2a1      	uxth	r1, r4
 8013bd8:	fa1f fb8b 	uxth.w	fp, fp
 8013bdc:	fb0a b101 	mla	r1, sl, r1, fp
 8013be0:	4411      	add	r1, r2
 8013be2:	f8d9 2000 	ldr.w	r2, [r9]
 8013be6:	0c24      	lsrs	r4, r4, #16
 8013be8:	0c12      	lsrs	r2, r2, #16
 8013bea:	fb0a 2404 	mla	r4, sl, r4, r2
 8013bee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013bf2:	b289      	uxth	r1, r1
 8013bf4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013bf8:	45f4      	cmp	ip, lr
 8013bfa:	f849 1b04 	str.w	r1, [r9], #4
 8013bfe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013c02:	d8e4      	bhi.n	8013bce <__multiply+0xaa>
 8013c04:	9901      	ldr	r1, [sp, #4]
 8013c06:	5072      	str	r2, [r6, r1]
 8013c08:	9a03      	ldr	r2, [sp, #12]
 8013c0a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013c0e:	3304      	adds	r3, #4
 8013c10:	f1b9 0f00 	cmp.w	r9, #0
 8013c14:	d01f      	beq.n	8013c56 <__multiply+0x132>
 8013c16:	6834      	ldr	r4, [r6, #0]
 8013c18:	f105 0114 	add.w	r1, r5, #20
 8013c1c:	46b6      	mov	lr, r6
 8013c1e:	f04f 0a00 	mov.w	sl, #0
 8013c22:	880a      	ldrh	r2, [r1, #0]
 8013c24:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013c28:	fb09 b202 	mla	r2, r9, r2, fp
 8013c2c:	4492      	add	sl, r2
 8013c2e:	b2a4      	uxth	r4, r4
 8013c30:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013c34:	f84e 4b04 	str.w	r4, [lr], #4
 8013c38:	f851 4b04 	ldr.w	r4, [r1], #4
 8013c3c:	f8be 2000 	ldrh.w	r2, [lr]
 8013c40:	0c24      	lsrs	r4, r4, #16
 8013c42:	fb09 2404 	mla	r4, r9, r4, r2
 8013c46:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013c4a:	458c      	cmp	ip, r1
 8013c4c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013c50:	d8e7      	bhi.n	8013c22 <__multiply+0xfe>
 8013c52:	9a01      	ldr	r2, [sp, #4]
 8013c54:	50b4      	str	r4, [r6, r2]
 8013c56:	3604      	adds	r6, #4
 8013c58:	e7a3      	b.n	8013ba2 <__multiply+0x7e>
 8013c5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d1a5      	bne.n	8013bae <__multiply+0x8a>
 8013c62:	3f01      	subs	r7, #1
 8013c64:	e7a1      	b.n	8013baa <__multiply+0x86>
 8013c66:	bf00      	nop
 8013c68:	080151e7 	.word	0x080151e7
 8013c6c:	08015258 	.word	0x08015258

08013c70 <__pow5mult>:
 8013c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c74:	4615      	mov	r5, r2
 8013c76:	f012 0203 	ands.w	r2, r2, #3
 8013c7a:	4606      	mov	r6, r0
 8013c7c:	460f      	mov	r7, r1
 8013c7e:	d007      	beq.n	8013c90 <__pow5mult+0x20>
 8013c80:	4c25      	ldr	r4, [pc, #148]	; (8013d18 <__pow5mult+0xa8>)
 8013c82:	3a01      	subs	r2, #1
 8013c84:	2300      	movs	r3, #0
 8013c86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013c8a:	f7ff fe9b 	bl	80139c4 <__multadd>
 8013c8e:	4607      	mov	r7, r0
 8013c90:	10ad      	asrs	r5, r5, #2
 8013c92:	d03d      	beq.n	8013d10 <__pow5mult+0xa0>
 8013c94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013c96:	b97c      	cbnz	r4, 8013cb8 <__pow5mult+0x48>
 8013c98:	2010      	movs	r0, #16
 8013c9a:	f7ff fe1b 	bl	80138d4 <malloc>
 8013c9e:	4602      	mov	r2, r0
 8013ca0:	6270      	str	r0, [r6, #36]	; 0x24
 8013ca2:	b928      	cbnz	r0, 8013cb0 <__pow5mult+0x40>
 8013ca4:	4b1d      	ldr	r3, [pc, #116]	; (8013d1c <__pow5mult+0xac>)
 8013ca6:	481e      	ldr	r0, [pc, #120]	; (8013d20 <__pow5mult+0xb0>)
 8013ca8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013cac:	f000 fc20 	bl	80144f0 <__assert_func>
 8013cb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013cb4:	6004      	str	r4, [r0, #0]
 8013cb6:	60c4      	str	r4, [r0, #12]
 8013cb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013cbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013cc0:	b94c      	cbnz	r4, 8013cd6 <__pow5mult+0x66>
 8013cc2:	f240 2171 	movw	r1, #625	; 0x271
 8013cc6:	4630      	mov	r0, r6
 8013cc8:	f7ff ff16 	bl	8013af8 <__i2b>
 8013ccc:	2300      	movs	r3, #0
 8013cce:	f8c8 0008 	str.w	r0, [r8, #8]
 8013cd2:	4604      	mov	r4, r0
 8013cd4:	6003      	str	r3, [r0, #0]
 8013cd6:	f04f 0900 	mov.w	r9, #0
 8013cda:	07eb      	lsls	r3, r5, #31
 8013cdc:	d50a      	bpl.n	8013cf4 <__pow5mult+0x84>
 8013cde:	4639      	mov	r1, r7
 8013ce0:	4622      	mov	r2, r4
 8013ce2:	4630      	mov	r0, r6
 8013ce4:	f7ff ff1e 	bl	8013b24 <__multiply>
 8013ce8:	4639      	mov	r1, r7
 8013cea:	4680      	mov	r8, r0
 8013cec:	4630      	mov	r0, r6
 8013cee:	f7ff fe47 	bl	8013980 <_Bfree>
 8013cf2:	4647      	mov	r7, r8
 8013cf4:	106d      	asrs	r5, r5, #1
 8013cf6:	d00b      	beq.n	8013d10 <__pow5mult+0xa0>
 8013cf8:	6820      	ldr	r0, [r4, #0]
 8013cfa:	b938      	cbnz	r0, 8013d0c <__pow5mult+0x9c>
 8013cfc:	4622      	mov	r2, r4
 8013cfe:	4621      	mov	r1, r4
 8013d00:	4630      	mov	r0, r6
 8013d02:	f7ff ff0f 	bl	8013b24 <__multiply>
 8013d06:	6020      	str	r0, [r4, #0]
 8013d08:	f8c0 9000 	str.w	r9, [r0]
 8013d0c:	4604      	mov	r4, r0
 8013d0e:	e7e4      	b.n	8013cda <__pow5mult+0x6a>
 8013d10:	4638      	mov	r0, r7
 8013d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d16:	bf00      	nop
 8013d18:	080153a8 	.word	0x080153a8
 8013d1c:	08015171 	.word	0x08015171
 8013d20:	08015258 	.word	0x08015258

08013d24 <__lshift>:
 8013d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d28:	460c      	mov	r4, r1
 8013d2a:	6849      	ldr	r1, [r1, #4]
 8013d2c:	6923      	ldr	r3, [r4, #16]
 8013d2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013d32:	68a3      	ldr	r3, [r4, #8]
 8013d34:	4607      	mov	r7, r0
 8013d36:	4691      	mov	r9, r2
 8013d38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d3c:	f108 0601 	add.w	r6, r8, #1
 8013d40:	42b3      	cmp	r3, r6
 8013d42:	db0b      	blt.n	8013d5c <__lshift+0x38>
 8013d44:	4638      	mov	r0, r7
 8013d46:	f7ff fddb 	bl	8013900 <_Balloc>
 8013d4a:	4605      	mov	r5, r0
 8013d4c:	b948      	cbnz	r0, 8013d62 <__lshift+0x3e>
 8013d4e:	4602      	mov	r2, r0
 8013d50:	4b28      	ldr	r3, [pc, #160]	; (8013df4 <__lshift+0xd0>)
 8013d52:	4829      	ldr	r0, [pc, #164]	; (8013df8 <__lshift+0xd4>)
 8013d54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013d58:	f000 fbca 	bl	80144f0 <__assert_func>
 8013d5c:	3101      	adds	r1, #1
 8013d5e:	005b      	lsls	r3, r3, #1
 8013d60:	e7ee      	b.n	8013d40 <__lshift+0x1c>
 8013d62:	2300      	movs	r3, #0
 8013d64:	f100 0114 	add.w	r1, r0, #20
 8013d68:	f100 0210 	add.w	r2, r0, #16
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	4553      	cmp	r3, sl
 8013d70:	db33      	blt.n	8013dda <__lshift+0xb6>
 8013d72:	6920      	ldr	r0, [r4, #16]
 8013d74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d78:	f104 0314 	add.w	r3, r4, #20
 8013d7c:	f019 091f 	ands.w	r9, r9, #31
 8013d80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013d84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013d88:	d02b      	beq.n	8013de2 <__lshift+0xbe>
 8013d8a:	f1c9 0e20 	rsb	lr, r9, #32
 8013d8e:	468a      	mov	sl, r1
 8013d90:	2200      	movs	r2, #0
 8013d92:	6818      	ldr	r0, [r3, #0]
 8013d94:	fa00 f009 	lsl.w	r0, r0, r9
 8013d98:	4302      	orrs	r2, r0
 8013d9a:	f84a 2b04 	str.w	r2, [sl], #4
 8013d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013da2:	459c      	cmp	ip, r3
 8013da4:	fa22 f20e 	lsr.w	r2, r2, lr
 8013da8:	d8f3      	bhi.n	8013d92 <__lshift+0x6e>
 8013daa:	ebac 0304 	sub.w	r3, ip, r4
 8013dae:	3b15      	subs	r3, #21
 8013db0:	f023 0303 	bic.w	r3, r3, #3
 8013db4:	3304      	adds	r3, #4
 8013db6:	f104 0015 	add.w	r0, r4, #21
 8013dba:	4584      	cmp	ip, r0
 8013dbc:	bf38      	it	cc
 8013dbe:	2304      	movcc	r3, #4
 8013dc0:	50ca      	str	r2, [r1, r3]
 8013dc2:	b10a      	cbz	r2, 8013dc8 <__lshift+0xa4>
 8013dc4:	f108 0602 	add.w	r6, r8, #2
 8013dc8:	3e01      	subs	r6, #1
 8013dca:	4638      	mov	r0, r7
 8013dcc:	612e      	str	r6, [r5, #16]
 8013dce:	4621      	mov	r1, r4
 8013dd0:	f7ff fdd6 	bl	8013980 <_Bfree>
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dda:	f842 0f04 	str.w	r0, [r2, #4]!
 8013dde:	3301      	adds	r3, #1
 8013de0:	e7c5      	b.n	8013d6e <__lshift+0x4a>
 8013de2:	3904      	subs	r1, #4
 8013de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8013de8:	f841 2f04 	str.w	r2, [r1, #4]!
 8013dec:	459c      	cmp	ip, r3
 8013dee:	d8f9      	bhi.n	8013de4 <__lshift+0xc0>
 8013df0:	e7ea      	b.n	8013dc8 <__lshift+0xa4>
 8013df2:	bf00      	nop
 8013df4:	080151e7 	.word	0x080151e7
 8013df8:	08015258 	.word	0x08015258

08013dfc <__mcmp>:
 8013dfc:	b530      	push	{r4, r5, lr}
 8013dfe:	6902      	ldr	r2, [r0, #16]
 8013e00:	690c      	ldr	r4, [r1, #16]
 8013e02:	1b12      	subs	r2, r2, r4
 8013e04:	d10e      	bne.n	8013e24 <__mcmp+0x28>
 8013e06:	f100 0314 	add.w	r3, r0, #20
 8013e0a:	3114      	adds	r1, #20
 8013e0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013e10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013e14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013e18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013e1c:	42a5      	cmp	r5, r4
 8013e1e:	d003      	beq.n	8013e28 <__mcmp+0x2c>
 8013e20:	d305      	bcc.n	8013e2e <__mcmp+0x32>
 8013e22:	2201      	movs	r2, #1
 8013e24:	4610      	mov	r0, r2
 8013e26:	bd30      	pop	{r4, r5, pc}
 8013e28:	4283      	cmp	r3, r0
 8013e2a:	d3f3      	bcc.n	8013e14 <__mcmp+0x18>
 8013e2c:	e7fa      	b.n	8013e24 <__mcmp+0x28>
 8013e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8013e32:	e7f7      	b.n	8013e24 <__mcmp+0x28>

08013e34 <__mdiff>:
 8013e34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e38:	460c      	mov	r4, r1
 8013e3a:	4606      	mov	r6, r0
 8013e3c:	4611      	mov	r1, r2
 8013e3e:	4620      	mov	r0, r4
 8013e40:	4617      	mov	r7, r2
 8013e42:	f7ff ffdb 	bl	8013dfc <__mcmp>
 8013e46:	1e05      	subs	r5, r0, #0
 8013e48:	d110      	bne.n	8013e6c <__mdiff+0x38>
 8013e4a:	4629      	mov	r1, r5
 8013e4c:	4630      	mov	r0, r6
 8013e4e:	f7ff fd57 	bl	8013900 <_Balloc>
 8013e52:	b930      	cbnz	r0, 8013e62 <__mdiff+0x2e>
 8013e54:	4b39      	ldr	r3, [pc, #228]	; (8013f3c <__mdiff+0x108>)
 8013e56:	4602      	mov	r2, r0
 8013e58:	f240 2132 	movw	r1, #562	; 0x232
 8013e5c:	4838      	ldr	r0, [pc, #224]	; (8013f40 <__mdiff+0x10c>)
 8013e5e:	f000 fb47 	bl	80144f0 <__assert_func>
 8013e62:	2301      	movs	r3, #1
 8013e64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e6c:	bfa4      	itt	ge
 8013e6e:	463b      	movge	r3, r7
 8013e70:	4627      	movge	r7, r4
 8013e72:	4630      	mov	r0, r6
 8013e74:	6879      	ldr	r1, [r7, #4]
 8013e76:	bfa6      	itte	ge
 8013e78:	461c      	movge	r4, r3
 8013e7a:	2500      	movge	r5, #0
 8013e7c:	2501      	movlt	r5, #1
 8013e7e:	f7ff fd3f 	bl	8013900 <_Balloc>
 8013e82:	b920      	cbnz	r0, 8013e8e <__mdiff+0x5a>
 8013e84:	4b2d      	ldr	r3, [pc, #180]	; (8013f3c <__mdiff+0x108>)
 8013e86:	4602      	mov	r2, r0
 8013e88:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013e8c:	e7e6      	b.n	8013e5c <__mdiff+0x28>
 8013e8e:	693e      	ldr	r6, [r7, #16]
 8013e90:	60c5      	str	r5, [r0, #12]
 8013e92:	6925      	ldr	r5, [r4, #16]
 8013e94:	f107 0114 	add.w	r1, r7, #20
 8013e98:	f104 0914 	add.w	r9, r4, #20
 8013e9c:	f100 0e14 	add.w	lr, r0, #20
 8013ea0:	f107 0210 	add.w	r2, r7, #16
 8013ea4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013ea8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013eac:	46f2      	mov	sl, lr
 8013eae:	2700      	movs	r7, #0
 8013eb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8013eb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013eb8:	fa1f f883 	uxth.w	r8, r3
 8013ebc:	fa17 f78b 	uxtah	r7, r7, fp
 8013ec0:	0c1b      	lsrs	r3, r3, #16
 8013ec2:	eba7 0808 	sub.w	r8, r7, r8
 8013ec6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013eca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013ece:	fa1f f888 	uxth.w	r8, r8
 8013ed2:	141f      	asrs	r7, r3, #16
 8013ed4:	454d      	cmp	r5, r9
 8013ed6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013eda:	f84a 3b04 	str.w	r3, [sl], #4
 8013ede:	d8e7      	bhi.n	8013eb0 <__mdiff+0x7c>
 8013ee0:	1b2b      	subs	r3, r5, r4
 8013ee2:	3b15      	subs	r3, #21
 8013ee4:	f023 0303 	bic.w	r3, r3, #3
 8013ee8:	3304      	adds	r3, #4
 8013eea:	3415      	adds	r4, #21
 8013eec:	42a5      	cmp	r5, r4
 8013eee:	bf38      	it	cc
 8013ef0:	2304      	movcc	r3, #4
 8013ef2:	4419      	add	r1, r3
 8013ef4:	4473      	add	r3, lr
 8013ef6:	469e      	mov	lr, r3
 8013ef8:	460d      	mov	r5, r1
 8013efa:	4565      	cmp	r5, ip
 8013efc:	d30e      	bcc.n	8013f1c <__mdiff+0xe8>
 8013efe:	f10c 0203 	add.w	r2, ip, #3
 8013f02:	1a52      	subs	r2, r2, r1
 8013f04:	f022 0203 	bic.w	r2, r2, #3
 8013f08:	3903      	subs	r1, #3
 8013f0a:	458c      	cmp	ip, r1
 8013f0c:	bf38      	it	cc
 8013f0e:	2200      	movcc	r2, #0
 8013f10:	441a      	add	r2, r3
 8013f12:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013f16:	b17b      	cbz	r3, 8013f38 <__mdiff+0x104>
 8013f18:	6106      	str	r6, [r0, #16]
 8013f1a:	e7a5      	b.n	8013e68 <__mdiff+0x34>
 8013f1c:	f855 8b04 	ldr.w	r8, [r5], #4
 8013f20:	fa17 f488 	uxtah	r4, r7, r8
 8013f24:	1422      	asrs	r2, r4, #16
 8013f26:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013f2a:	b2a4      	uxth	r4, r4
 8013f2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013f30:	f84e 4b04 	str.w	r4, [lr], #4
 8013f34:	1417      	asrs	r7, r2, #16
 8013f36:	e7e0      	b.n	8013efa <__mdiff+0xc6>
 8013f38:	3e01      	subs	r6, #1
 8013f3a:	e7ea      	b.n	8013f12 <__mdiff+0xde>
 8013f3c:	080151e7 	.word	0x080151e7
 8013f40:	08015258 	.word	0x08015258

08013f44 <__d2b>:
 8013f44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013f48:	4689      	mov	r9, r1
 8013f4a:	2101      	movs	r1, #1
 8013f4c:	ec57 6b10 	vmov	r6, r7, d0
 8013f50:	4690      	mov	r8, r2
 8013f52:	f7ff fcd5 	bl	8013900 <_Balloc>
 8013f56:	4604      	mov	r4, r0
 8013f58:	b930      	cbnz	r0, 8013f68 <__d2b+0x24>
 8013f5a:	4602      	mov	r2, r0
 8013f5c:	4b25      	ldr	r3, [pc, #148]	; (8013ff4 <__d2b+0xb0>)
 8013f5e:	4826      	ldr	r0, [pc, #152]	; (8013ff8 <__d2b+0xb4>)
 8013f60:	f240 310a 	movw	r1, #778	; 0x30a
 8013f64:	f000 fac4 	bl	80144f0 <__assert_func>
 8013f68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013f6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013f70:	bb35      	cbnz	r5, 8013fc0 <__d2b+0x7c>
 8013f72:	2e00      	cmp	r6, #0
 8013f74:	9301      	str	r3, [sp, #4]
 8013f76:	d028      	beq.n	8013fca <__d2b+0x86>
 8013f78:	4668      	mov	r0, sp
 8013f7a:	9600      	str	r6, [sp, #0]
 8013f7c:	f7ff fd8c 	bl	8013a98 <__lo0bits>
 8013f80:	9900      	ldr	r1, [sp, #0]
 8013f82:	b300      	cbz	r0, 8013fc6 <__d2b+0x82>
 8013f84:	9a01      	ldr	r2, [sp, #4]
 8013f86:	f1c0 0320 	rsb	r3, r0, #32
 8013f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8013f8e:	430b      	orrs	r3, r1
 8013f90:	40c2      	lsrs	r2, r0
 8013f92:	6163      	str	r3, [r4, #20]
 8013f94:	9201      	str	r2, [sp, #4]
 8013f96:	9b01      	ldr	r3, [sp, #4]
 8013f98:	61a3      	str	r3, [r4, #24]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	bf14      	ite	ne
 8013f9e:	2202      	movne	r2, #2
 8013fa0:	2201      	moveq	r2, #1
 8013fa2:	6122      	str	r2, [r4, #16]
 8013fa4:	b1d5      	cbz	r5, 8013fdc <__d2b+0x98>
 8013fa6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013faa:	4405      	add	r5, r0
 8013fac:	f8c9 5000 	str.w	r5, [r9]
 8013fb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013fb4:	f8c8 0000 	str.w	r0, [r8]
 8013fb8:	4620      	mov	r0, r4
 8013fba:	b003      	add	sp, #12
 8013fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013fc4:	e7d5      	b.n	8013f72 <__d2b+0x2e>
 8013fc6:	6161      	str	r1, [r4, #20]
 8013fc8:	e7e5      	b.n	8013f96 <__d2b+0x52>
 8013fca:	a801      	add	r0, sp, #4
 8013fcc:	f7ff fd64 	bl	8013a98 <__lo0bits>
 8013fd0:	9b01      	ldr	r3, [sp, #4]
 8013fd2:	6163      	str	r3, [r4, #20]
 8013fd4:	2201      	movs	r2, #1
 8013fd6:	6122      	str	r2, [r4, #16]
 8013fd8:	3020      	adds	r0, #32
 8013fda:	e7e3      	b.n	8013fa4 <__d2b+0x60>
 8013fdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013fe0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013fe4:	f8c9 0000 	str.w	r0, [r9]
 8013fe8:	6918      	ldr	r0, [r3, #16]
 8013fea:	f7ff fd35 	bl	8013a58 <__hi0bits>
 8013fee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013ff2:	e7df      	b.n	8013fb4 <__d2b+0x70>
 8013ff4:	080151e7 	.word	0x080151e7
 8013ff8:	08015258 	.word	0x08015258

08013ffc <_calloc_r>:
 8013ffc:	b513      	push	{r0, r1, r4, lr}
 8013ffe:	434a      	muls	r2, r1
 8014000:	4611      	mov	r1, r2
 8014002:	9201      	str	r2, [sp, #4]
 8014004:	f000 f85a 	bl	80140bc <_malloc_r>
 8014008:	4604      	mov	r4, r0
 801400a:	b118      	cbz	r0, 8014014 <_calloc_r+0x18>
 801400c:	9a01      	ldr	r2, [sp, #4]
 801400e:	2100      	movs	r1, #0
 8014010:	f7fd fe96 	bl	8011d40 <memset>
 8014014:	4620      	mov	r0, r4
 8014016:	b002      	add	sp, #8
 8014018:	bd10      	pop	{r4, pc}
	...

0801401c <_free_r>:
 801401c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801401e:	2900      	cmp	r1, #0
 8014020:	d048      	beq.n	80140b4 <_free_r+0x98>
 8014022:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014026:	9001      	str	r0, [sp, #4]
 8014028:	2b00      	cmp	r3, #0
 801402a:	f1a1 0404 	sub.w	r4, r1, #4
 801402e:	bfb8      	it	lt
 8014030:	18e4      	addlt	r4, r4, r3
 8014032:	f000 fae3 	bl	80145fc <__malloc_lock>
 8014036:	4a20      	ldr	r2, [pc, #128]	; (80140b8 <_free_r+0x9c>)
 8014038:	9801      	ldr	r0, [sp, #4]
 801403a:	6813      	ldr	r3, [r2, #0]
 801403c:	4615      	mov	r5, r2
 801403e:	b933      	cbnz	r3, 801404e <_free_r+0x32>
 8014040:	6063      	str	r3, [r4, #4]
 8014042:	6014      	str	r4, [r2, #0]
 8014044:	b003      	add	sp, #12
 8014046:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801404a:	f000 badd 	b.w	8014608 <__malloc_unlock>
 801404e:	42a3      	cmp	r3, r4
 8014050:	d90b      	bls.n	801406a <_free_r+0x4e>
 8014052:	6821      	ldr	r1, [r4, #0]
 8014054:	1862      	adds	r2, r4, r1
 8014056:	4293      	cmp	r3, r2
 8014058:	bf04      	itt	eq
 801405a:	681a      	ldreq	r2, [r3, #0]
 801405c:	685b      	ldreq	r3, [r3, #4]
 801405e:	6063      	str	r3, [r4, #4]
 8014060:	bf04      	itt	eq
 8014062:	1852      	addeq	r2, r2, r1
 8014064:	6022      	streq	r2, [r4, #0]
 8014066:	602c      	str	r4, [r5, #0]
 8014068:	e7ec      	b.n	8014044 <_free_r+0x28>
 801406a:	461a      	mov	r2, r3
 801406c:	685b      	ldr	r3, [r3, #4]
 801406e:	b10b      	cbz	r3, 8014074 <_free_r+0x58>
 8014070:	42a3      	cmp	r3, r4
 8014072:	d9fa      	bls.n	801406a <_free_r+0x4e>
 8014074:	6811      	ldr	r1, [r2, #0]
 8014076:	1855      	adds	r5, r2, r1
 8014078:	42a5      	cmp	r5, r4
 801407a:	d10b      	bne.n	8014094 <_free_r+0x78>
 801407c:	6824      	ldr	r4, [r4, #0]
 801407e:	4421      	add	r1, r4
 8014080:	1854      	adds	r4, r2, r1
 8014082:	42a3      	cmp	r3, r4
 8014084:	6011      	str	r1, [r2, #0]
 8014086:	d1dd      	bne.n	8014044 <_free_r+0x28>
 8014088:	681c      	ldr	r4, [r3, #0]
 801408a:	685b      	ldr	r3, [r3, #4]
 801408c:	6053      	str	r3, [r2, #4]
 801408e:	4421      	add	r1, r4
 8014090:	6011      	str	r1, [r2, #0]
 8014092:	e7d7      	b.n	8014044 <_free_r+0x28>
 8014094:	d902      	bls.n	801409c <_free_r+0x80>
 8014096:	230c      	movs	r3, #12
 8014098:	6003      	str	r3, [r0, #0]
 801409a:	e7d3      	b.n	8014044 <_free_r+0x28>
 801409c:	6825      	ldr	r5, [r4, #0]
 801409e:	1961      	adds	r1, r4, r5
 80140a0:	428b      	cmp	r3, r1
 80140a2:	bf04      	itt	eq
 80140a4:	6819      	ldreq	r1, [r3, #0]
 80140a6:	685b      	ldreq	r3, [r3, #4]
 80140a8:	6063      	str	r3, [r4, #4]
 80140aa:	bf04      	itt	eq
 80140ac:	1949      	addeq	r1, r1, r5
 80140ae:	6021      	streq	r1, [r4, #0]
 80140b0:	6054      	str	r4, [r2, #4]
 80140b2:	e7c7      	b.n	8014044 <_free_r+0x28>
 80140b4:	b003      	add	sp, #12
 80140b6:	bd30      	pop	{r4, r5, pc}
 80140b8:	24000250 	.word	0x24000250

080140bc <_malloc_r>:
 80140bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140be:	1ccd      	adds	r5, r1, #3
 80140c0:	f025 0503 	bic.w	r5, r5, #3
 80140c4:	3508      	adds	r5, #8
 80140c6:	2d0c      	cmp	r5, #12
 80140c8:	bf38      	it	cc
 80140ca:	250c      	movcc	r5, #12
 80140cc:	2d00      	cmp	r5, #0
 80140ce:	4606      	mov	r6, r0
 80140d0:	db01      	blt.n	80140d6 <_malloc_r+0x1a>
 80140d2:	42a9      	cmp	r1, r5
 80140d4:	d903      	bls.n	80140de <_malloc_r+0x22>
 80140d6:	230c      	movs	r3, #12
 80140d8:	6033      	str	r3, [r6, #0]
 80140da:	2000      	movs	r0, #0
 80140dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140de:	f000 fa8d 	bl	80145fc <__malloc_lock>
 80140e2:	4921      	ldr	r1, [pc, #132]	; (8014168 <_malloc_r+0xac>)
 80140e4:	680a      	ldr	r2, [r1, #0]
 80140e6:	4614      	mov	r4, r2
 80140e8:	b99c      	cbnz	r4, 8014112 <_malloc_r+0x56>
 80140ea:	4f20      	ldr	r7, [pc, #128]	; (801416c <_malloc_r+0xb0>)
 80140ec:	683b      	ldr	r3, [r7, #0]
 80140ee:	b923      	cbnz	r3, 80140fa <_malloc_r+0x3e>
 80140f0:	4621      	mov	r1, r4
 80140f2:	4630      	mov	r0, r6
 80140f4:	f000 f996 	bl	8014424 <_sbrk_r>
 80140f8:	6038      	str	r0, [r7, #0]
 80140fa:	4629      	mov	r1, r5
 80140fc:	4630      	mov	r0, r6
 80140fe:	f000 f991 	bl	8014424 <_sbrk_r>
 8014102:	1c43      	adds	r3, r0, #1
 8014104:	d123      	bne.n	801414e <_malloc_r+0x92>
 8014106:	230c      	movs	r3, #12
 8014108:	6033      	str	r3, [r6, #0]
 801410a:	4630      	mov	r0, r6
 801410c:	f000 fa7c 	bl	8014608 <__malloc_unlock>
 8014110:	e7e3      	b.n	80140da <_malloc_r+0x1e>
 8014112:	6823      	ldr	r3, [r4, #0]
 8014114:	1b5b      	subs	r3, r3, r5
 8014116:	d417      	bmi.n	8014148 <_malloc_r+0x8c>
 8014118:	2b0b      	cmp	r3, #11
 801411a:	d903      	bls.n	8014124 <_malloc_r+0x68>
 801411c:	6023      	str	r3, [r4, #0]
 801411e:	441c      	add	r4, r3
 8014120:	6025      	str	r5, [r4, #0]
 8014122:	e004      	b.n	801412e <_malloc_r+0x72>
 8014124:	6863      	ldr	r3, [r4, #4]
 8014126:	42a2      	cmp	r2, r4
 8014128:	bf0c      	ite	eq
 801412a:	600b      	streq	r3, [r1, #0]
 801412c:	6053      	strne	r3, [r2, #4]
 801412e:	4630      	mov	r0, r6
 8014130:	f000 fa6a 	bl	8014608 <__malloc_unlock>
 8014134:	f104 000b 	add.w	r0, r4, #11
 8014138:	1d23      	adds	r3, r4, #4
 801413a:	f020 0007 	bic.w	r0, r0, #7
 801413e:	1ac2      	subs	r2, r0, r3
 8014140:	d0cc      	beq.n	80140dc <_malloc_r+0x20>
 8014142:	1a1b      	subs	r3, r3, r0
 8014144:	50a3      	str	r3, [r4, r2]
 8014146:	e7c9      	b.n	80140dc <_malloc_r+0x20>
 8014148:	4622      	mov	r2, r4
 801414a:	6864      	ldr	r4, [r4, #4]
 801414c:	e7cc      	b.n	80140e8 <_malloc_r+0x2c>
 801414e:	1cc4      	adds	r4, r0, #3
 8014150:	f024 0403 	bic.w	r4, r4, #3
 8014154:	42a0      	cmp	r0, r4
 8014156:	d0e3      	beq.n	8014120 <_malloc_r+0x64>
 8014158:	1a21      	subs	r1, r4, r0
 801415a:	4630      	mov	r0, r6
 801415c:	f000 f962 	bl	8014424 <_sbrk_r>
 8014160:	3001      	adds	r0, #1
 8014162:	d1dd      	bne.n	8014120 <_malloc_r+0x64>
 8014164:	e7cf      	b.n	8014106 <_malloc_r+0x4a>
 8014166:	bf00      	nop
 8014168:	24000250 	.word	0x24000250
 801416c:	24000254 	.word	0x24000254

08014170 <__sfputc_r>:
 8014170:	6893      	ldr	r3, [r2, #8]
 8014172:	3b01      	subs	r3, #1
 8014174:	2b00      	cmp	r3, #0
 8014176:	b410      	push	{r4}
 8014178:	6093      	str	r3, [r2, #8]
 801417a:	da08      	bge.n	801418e <__sfputc_r+0x1e>
 801417c:	6994      	ldr	r4, [r2, #24]
 801417e:	42a3      	cmp	r3, r4
 8014180:	db01      	blt.n	8014186 <__sfputc_r+0x16>
 8014182:	290a      	cmp	r1, #10
 8014184:	d103      	bne.n	801418e <__sfputc_r+0x1e>
 8014186:	f85d 4b04 	ldr.w	r4, [sp], #4
 801418a:	f7fe bab1 	b.w	80126f0 <__swbuf_r>
 801418e:	6813      	ldr	r3, [r2, #0]
 8014190:	1c58      	adds	r0, r3, #1
 8014192:	6010      	str	r0, [r2, #0]
 8014194:	7019      	strb	r1, [r3, #0]
 8014196:	4608      	mov	r0, r1
 8014198:	f85d 4b04 	ldr.w	r4, [sp], #4
 801419c:	4770      	bx	lr

0801419e <__sfputs_r>:
 801419e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141a0:	4606      	mov	r6, r0
 80141a2:	460f      	mov	r7, r1
 80141a4:	4614      	mov	r4, r2
 80141a6:	18d5      	adds	r5, r2, r3
 80141a8:	42ac      	cmp	r4, r5
 80141aa:	d101      	bne.n	80141b0 <__sfputs_r+0x12>
 80141ac:	2000      	movs	r0, #0
 80141ae:	e007      	b.n	80141c0 <__sfputs_r+0x22>
 80141b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141b4:	463a      	mov	r2, r7
 80141b6:	4630      	mov	r0, r6
 80141b8:	f7ff ffda 	bl	8014170 <__sfputc_r>
 80141bc:	1c43      	adds	r3, r0, #1
 80141be:	d1f3      	bne.n	80141a8 <__sfputs_r+0xa>
 80141c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080141c4 <_vfiprintf_r>:
 80141c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141c8:	460d      	mov	r5, r1
 80141ca:	b09d      	sub	sp, #116	; 0x74
 80141cc:	4614      	mov	r4, r2
 80141ce:	4698      	mov	r8, r3
 80141d0:	4606      	mov	r6, r0
 80141d2:	b118      	cbz	r0, 80141dc <_vfiprintf_r+0x18>
 80141d4:	6983      	ldr	r3, [r0, #24]
 80141d6:	b90b      	cbnz	r3, 80141dc <_vfiprintf_r+0x18>
 80141d8:	f7ff fa72 	bl	80136c0 <__sinit>
 80141dc:	4b89      	ldr	r3, [pc, #548]	; (8014404 <_vfiprintf_r+0x240>)
 80141de:	429d      	cmp	r5, r3
 80141e0:	d11b      	bne.n	801421a <_vfiprintf_r+0x56>
 80141e2:	6875      	ldr	r5, [r6, #4]
 80141e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80141e6:	07d9      	lsls	r1, r3, #31
 80141e8:	d405      	bmi.n	80141f6 <_vfiprintf_r+0x32>
 80141ea:	89ab      	ldrh	r3, [r5, #12]
 80141ec:	059a      	lsls	r2, r3, #22
 80141ee:	d402      	bmi.n	80141f6 <_vfiprintf_r+0x32>
 80141f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141f2:	f7ff fb08 	bl	8013806 <__retarget_lock_acquire_recursive>
 80141f6:	89ab      	ldrh	r3, [r5, #12]
 80141f8:	071b      	lsls	r3, r3, #28
 80141fa:	d501      	bpl.n	8014200 <_vfiprintf_r+0x3c>
 80141fc:	692b      	ldr	r3, [r5, #16]
 80141fe:	b9eb      	cbnz	r3, 801423c <_vfiprintf_r+0x78>
 8014200:	4629      	mov	r1, r5
 8014202:	4630      	mov	r0, r6
 8014204:	f7fe fac6 	bl	8012794 <__swsetup_r>
 8014208:	b1c0      	cbz	r0, 801423c <_vfiprintf_r+0x78>
 801420a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801420c:	07dc      	lsls	r4, r3, #31
 801420e:	d50e      	bpl.n	801422e <_vfiprintf_r+0x6a>
 8014210:	f04f 30ff 	mov.w	r0, #4294967295
 8014214:	b01d      	add	sp, #116	; 0x74
 8014216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801421a:	4b7b      	ldr	r3, [pc, #492]	; (8014408 <_vfiprintf_r+0x244>)
 801421c:	429d      	cmp	r5, r3
 801421e:	d101      	bne.n	8014224 <_vfiprintf_r+0x60>
 8014220:	68b5      	ldr	r5, [r6, #8]
 8014222:	e7df      	b.n	80141e4 <_vfiprintf_r+0x20>
 8014224:	4b79      	ldr	r3, [pc, #484]	; (801440c <_vfiprintf_r+0x248>)
 8014226:	429d      	cmp	r5, r3
 8014228:	bf08      	it	eq
 801422a:	68f5      	ldreq	r5, [r6, #12]
 801422c:	e7da      	b.n	80141e4 <_vfiprintf_r+0x20>
 801422e:	89ab      	ldrh	r3, [r5, #12]
 8014230:	0598      	lsls	r0, r3, #22
 8014232:	d4ed      	bmi.n	8014210 <_vfiprintf_r+0x4c>
 8014234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014236:	f7ff fae7 	bl	8013808 <__retarget_lock_release_recursive>
 801423a:	e7e9      	b.n	8014210 <_vfiprintf_r+0x4c>
 801423c:	2300      	movs	r3, #0
 801423e:	9309      	str	r3, [sp, #36]	; 0x24
 8014240:	2320      	movs	r3, #32
 8014242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014246:	f8cd 800c 	str.w	r8, [sp, #12]
 801424a:	2330      	movs	r3, #48	; 0x30
 801424c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014410 <_vfiprintf_r+0x24c>
 8014250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014254:	f04f 0901 	mov.w	r9, #1
 8014258:	4623      	mov	r3, r4
 801425a:	469a      	mov	sl, r3
 801425c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014260:	b10a      	cbz	r2, 8014266 <_vfiprintf_r+0xa2>
 8014262:	2a25      	cmp	r2, #37	; 0x25
 8014264:	d1f9      	bne.n	801425a <_vfiprintf_r+0x96>
 8014266:	ebba 0b04 	subs.w	fp, sl, r4
 801426a:	d00b      	beq.n	8014284 <_vfiprintf_r+0xc0>
 801426c:	465b      	mov	r3, fp
 801426e:	4622      	mov	r2, r4
 8014270:	4629      	mov	r1, r5
 8014272:	4630      	mov	r0, r6
 8014274:	f7ff ff93 	bl	801419e <__sfputs_r>
 8014278:	3001      	adds	r0, #1
 801427a:	f000 80aa 	beq.w	80143d2 <_vfiprintf_r+0x20e>
 801427e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014280:	445a      	add	r2, fp
 8014282:	9209      	str	r2, [sp, #36]	; 0x24
 8014284:	f89a 3000 	ldrb.w	r3, [sl]
 8014288:	2b00      	cmp	r3, #0
 801428a:	f000 80a2 	beq.w	80143d2 <_vfiprintf_r+0x20e>
 801428e:	2300      	movs	r3, #0
 8014290:	f04f 32ff 	mov.w	r2, #4294967295
 8014294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014298:	f10a 0a01 	add.w	sl, sl, #1
 801429c:	9304      	str	r3, [sp, #16]
 801429e:	9307      	str	r3, [sp, #28]
 80142a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80142a4:	931a      	str	r3, [sp, #104]	; 0x68
 80142a6:	4654      	mov	r4, sl
 80142a8:	2205      	movs	r2, #5
 80142aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142ae:	4858      	ldr	r0, [pc, #352]	; (8014410 <_vfiprintf_r+0x24c>)
 80142b0:	f7ec f81e 	bl	80002f0 <memchr>
 80142b4:	9a04      	ldr	r2, [sp, #16]
 80142b6:	b9d8      	cbnz	r0, 80142f0 <_vfiprintf_r+0x12c>
 80142b8:	06d1      	lsls	r1, r2, #27
 80142ba:	bf44      	itt	mi
 80142bc:	2320      	movmi	r3, #32
 80142be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80142c2:	0713      	lsls	r3, r2, #28
 80142c4:	bf44      	itt	mi
 80142c6:	232b      	movmi	r3, #43	; 0x2b
 80142c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80142cc:	f89a 3000 	ldrb.w	r3, [sl]
 80142d0:	2b2a      	cmp	r3, #42	; 0x2a
 80142d2:	d015      	beq.n	8014300 <_vfiprintf_r+0x13c>
 80142d4:	9a07      	ldr	r2, [sp, #28]
 80142d6:	4654      	mov	r4, sl
 80142d8:	2000      	movs	r0, #0
 80142da:	f04f 0c0a 	mov.w	ip, #10
 80142de:	4621      	mov	r1, r4
 80142e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142e4:	3b30      	subs	r3, #48	; 0x30
 80142e6:	2b09      	cmp	r3, #9
 80142e8:	d94e      	bls.n	8014388 <_vfiprintf_r+0x1c4>
 80142ea:	b1b0      	cbz	r0, 801431a <_vfiprintf_r+0x156>
 80142ec:	9207      	str	r2, [sp, #28]
 80142ee:	e014      	b.n	801431a <_vfiprintf_r+0x156>
 80142f0:	eba0 0308 	sub.w	r3, r0, r8
 80142f4:	fa09 f303 	lsl.w	r3, r9, r3
 80142f8:	4313      	orrs	r3, r2
 80142fa:	9304      	str	r3, [sp, #16]
 80142fc:	46a2      	mov	sl, r4
 80142fe:	e7d2      	b.n	80142a6 <_vfiprintf_r+0xe2>
 8014300:	9b03      	ldr	r3, [sp, #12]
 8014302:	1d19      	adds	r1, r3, #4
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	9103      	str	r1, [sp, #12]
 8014308:	2b00      	cmp	r3, #0
 801430a:	bfbb      	ittet	lt
 801430c:	425b      	neglt	r3, r3
 801430e:	f042 0202 	orrlt.w	r2, r2, #2
 8014312:	9307      	strge	r3, [sp, #28]
 8014314:	9307      	strlt	r3, [sp, #28]
 8014316:	bfb8      	it	lt
 8014318:	9204      	strlt	r2, [sp, #16]
 801431a:	7823      	ldrb	r3, [r4, #0]
 801431c:	2b2e      	cmp	r3, #46	; 0x2e
 801431e:	d10c      	bne.n	801433a <_vfiprintf_r+0x176>
 8014320:	7863      	ldrb	r3, [r4, #1]
 8014322:	2b2a      	cmp	r3, #42	; 0x2a
 8014324:	d135      	bne.n	8014392 <_vfiprintf_r+0x1ce>
 8014326:	9b03      	ldr	r3, [sp, #12]
 8014328:	1d1a      	adds	r2, r3, #4
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	9203      	str	r2, [sp, #12]
 801432e:	2b00      	cmp	r3, #0
 8014330:	bfb8      	it	lt
 8014332:	f04f 33ff 	movlt.w	r3, #4294967295
 8014336:	3402      	adds	r4, #2
 8014338:	9305      	str	r3, [sp, #20]
 801433a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014420 <_vfiprintf_r+0x25c>
 801433e:	7821      	ldrb	r1, [r4, #0]
 8014340:	2203      	movs	r2, #3
 8014342:	4650      	mov	r0, sl
 8014344:	f7eb ffd4 	bl	80002f0 <memchr>
 8014348:	b140      	cbz	r0, 801435c <_vfiprintf_r+0x198>
 801434a:	2340      	movs	r3, #64	; 0x40
 801434c:	eba0 000a 	sub.w	r0, r0, sl
 8014350:	fa03 f000 	lsl.w	r0, r3, r0
 8014354:	9b04      	ldr	r3, [sp, #16]
 8014356:	4303      	orrs	r3, r0
 8014358:	3401      	adds	r4, #1
 801435a:	9304      	str	r3, [sp, #16]
 801435c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014360:	482c      	ldr	r0, [pc, #176]	; (8014414 <_vfiprintf_r+0x250>)
 8014362:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014366:	2206      	movs	r2, #6
 8014368:	f7eb ffc2 	bl	80002f0 <memchr>
 801436c:	2800      	cmp	r0, #0
 801436e:	d03f      	beq.n	80143f0 <_vfiprintf_r+0x22c>
 8014370:	4b29      	ldr	r3, [pc, #164]	; (8014418 <_vfiprintf_r+0x254>)
 8014372:	bb1b      	cbnz	r3, 80143bc <_vfiprintf_r+0x1f8>
 8014374:	9b03      	ldr	r3, [sp, #12]
 8014376:	3307      	adds	r3, #7
 8014378:	f023 0307 	bic.w	r3, r3, #7
 801437c:	3308      	adds	r3, #8
 801437e:	9303      	str	r3, [sp, #12]
 8014380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014382:	443b      	add	r3, r7
 8014384:	9309      	str	r3, [sp, #36]	; 0x24
 8014386:	e767      	b.n	8014258 <_vfiprintf_r+0x94>
 8014388:	fb0c 3202 	mla	r2, ip, r2, r3
 801438c:	460c      	mov	r4, r1
 801438e:	2001      	movs	r0, #1
 8014390:	e7a5      	b.n	80142de <_vfiprintf_r+0x11a>
 8014392:	2300      	movs	r3, #0
 8014394:	3401      	adds	r4, #1
 8014396:	9305      	str	r3, [sp, #20]
 8014398:	4619      	mov	r1, r3
 801439a:	f04f 0c0a 	mov.w	ip, #10
 801439e:	4620      	mov	r0, r4
 80143a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143a4:	3a30      	subs	r2, #48	; 0x30
 80143a6:	2a09      	cmp	r2, #9
 80143a8:	d903      	bls.n	80143b2 <_vfiprintf_r+0x1ee>
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d0c5      	beq.n	801433a <_vfiprintf_r+0x176>
 80143ae:	9105      	str	r1, [sp, #20]
 80143b0:	e7c3      	b.n	801433a <_vfiprintf_r+0x176>
 80143b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80143b6:	4604      	mov	r4, r0
 80143b8:	2301      	movs	r3, #1
 80143ba:	e7f0      	b.n	801439e <_vfiprintf_r+0x1da>
 80143bc:	ab03      	add	r3, sp, #12
 80143be:	9300      	str	r3, [sp, #0]
 80143c0:	462a      	mov	r2, r5
 80143c2:	4b16      	ldr	r3, [pc, #88]	; (801441c <_vfiprintf_r+0x258>)
 80143c4:	a904      	add	r1, sp, #16
 80143c6:	4630      	mov	r0, r6
 80143c8:	f7fd fd52 	bl	8011e70 <_printf_float>
 80143cc:	4607      	mov	r7, r0
 80143ce:	1c78      	adds	r0, r7, #1
 80143d0:	d1d6      	bne.n	8014380 <_vfiprintf_r+0x1bc>
 80143d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80143d4:	07d9      	lsls	r1, r3, #31
 80143d6:	d405      	bmi.n	80143e4 <_vfiprintf_r+0x220>
 80143d8:	89ab      	ldrh	r3, [r5, #12]
 80143da:	059a      	lsls	r2, r3, #22
 80143dc:	d402      	bmi.n	80143e4 <_vfiprintf_r+0x220>
 80143de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80143e0:	f7ff fa12 	bl	8013808 <__retarget_lock_release_recursive>
 80143e4:	89ab      	ldrh	r3, [r5, #12]
 80143e6:	065b      	lsls	r3, r3, #25
 80143e8:	f53f af12 	bmi.w	8014210 <_vfiprintf_r+0x4c>
 80143ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80143ee:	e711      	b.n	8014214 <_vfiprintf_r+0x50>
 80143f0:	ab03      	add	r3, sp, #12
 80143f2:	9300      	str	r3, [sp, #0]
 80143f4:	462a      	mov	r2, r5
 80143f6:	4b09      	ldr	r3, [pc, #36]	; (801441c <_vfiprintf_r+0x258>)
 80143f8:	a904      	add	r1, sp, #16
 80143fa:	4630      	mov	r0, r6
 80143fc:	f7fd ffc4 	bl	8012388 <_printf_i>
 8014400:	e7e4      	b.n	80143cc <_vfiprintf_r+0x208>
 8014402:	bf00      	nop
 8014404:	08015218 	.word	0x08015218
 8014408:	08015238 	.word	0x08015238
 801440c:	080151f8 	.word	0x080151f8
 8014410:	080153b4 	.word	0x080153b4
 8014414:	080153be 	.word	0x080153be
 8014418:	08011e71 	.word	0x08011e71
 801441c:	0801419f 	.word	0x0801419f
 8014420:	080153ba 	.word	0x080153ba

08014424 <_sbrk_r>:
 8014424:	b538      	push	{r3, r4, r5, lr}
 8014426:	4d06      	ldr	r5, [pc, #24]	; (8014440 <_sbrk_r+0x1c>)
 8014428:	2300      	movs	r3, #0
 801442a:	4604      	mov	r4, r0
 801442c:	4608      	mov	r0, r1
 801442e:	602b      	str	r3, [r5, #0]
 8014430:	f7f0 fed8 	bl	80051e4 <_sbrk>
 8014434:	1c43      	adds	r3, r0, #1
 8014436:	d102      	bne.n	801443e <_sbrk_r+0x1a>
 8014438:	682b      	ldr	r3, [r5, #0]
 801443a:	b103      	cbz	r3, 801443e <_sbrk_r+0x1a>
 801443c:	6023      	str	r3, [r4, #0]
 801443e:	bd38      	pop	{r3, r4, r5, pc}
 8014440:	24000eb4 	.word	0x24000eb4

08014444 <__sread>:
 8014444:	b510      	push	{r4, lr}
 8014446:	460c      	mov	r4, r1
 8014448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801444c:	f000 f8e2 	bl	8014614 <_read_r>
 8014450:	2800      	cmp	r0, #0
 8014452:	bfab      	itete	ge
 8014454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014456:	89a3      	ldrhlt	r3, [r4, #12]
 8014458:	181b      	addge	r3, r3, r0
 801445a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801445e:	bfac      	ite	ge
 8014460:	6563      	strge	r3, [r4, #84]	; 0x54
 8014462:	81a3      	strhlt	r3, [r4, #12]
 8014464:	bd10      	pop	{r4, pc}

08014466 <__swrite>:
 8014466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801446a:	461f      	mov	r7, r3
 801446c:	898b      	ldrh	r3, [r1, #12]
 801446e:	05db      	lsls	r3, r3, #23
 8014470:	4605      	mov	r5, r0
 8014472:	460c      	mov	r4, r1
 8014474:	4616      	mov	r6, r2
 8014476:	d505      	bpl.n	8014484 <__swrite+0x1e>
 8014478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801447c:	2302      	movs	r3, #2
 801447e:	2200      	movs	r2, #0
 8014480:	f000 f898 	bl	80145b4 <_lseek_r>
 8014484:	89a3      	ldrh	r3, [r4, #12]
 8014486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801448a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801448e:	81a3      	strh	r3, [r4, #12]
 8014490:	4632      	mov	r2, r6
 8014492:	463b      	mov	r3, r7
 8014494:	4628      	mov	r0, r5
 8014496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801449a:	f000 b817 	b.w	80144cc <_write_r>

0801449e <__sseek>:
 801449e:	b510      	push	{r4, lr}
 80144a0:	460c      	mov	r4, r1
 80144a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144a6:	f000 f885 	bl	80145b4 <_lseek_r>
 80144aa:	1c43      	adds	r3, r0, #1
 80144ac:	89a3      	ldrh	r3, [r4, #12]
 80144ae:	bf15      	itete	ne
 80144b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80144b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80144b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80144ba:	81a3      	strheq	r3, [r4, #12]
 80144bc:	bf18      	it	ne
 80144be:	81a3      	strhne	r3, [r4, #12]
 80144c0:	bd10      	pop	{r4, pc}

080144c2 <__sclose>:
 80144c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144c6:	f000 b831 	b.w	801452c <_close_r>
	...

080144cc <_write_r>:
 80144cc:	b538      	push	{r3, r4, r5, lr}
 80144ce:	4d07      	ldr	r5, [pc, #28]	; (80144ec <_write_r+0x20>)
 80144d0:	4604      	mov	r4, r0
 80144d2:	4608      	mov	r0, r1
 80144d4:	4611      	mov	r1, r2
 80144d6:	2200      	movs	r2, #0
 80144d8:	602a      	str	r2, [r5, #0]
 80144da:	461a      	mov	r2, r3
 80144dc:	f7ee fdd0 	bl	8003080 <_write>
 80144e0:	1c43      	adds	r3, r0, #1
 80144e2:	d102      	bne.n	80144ea <_write_r+0x1e>
 80144e4:	682b      	ldr	r3, [r5, #0]
 80144e6:	b103      	cbz	r3, 80144ea <_write_r+0x1e>
 80144e8:	6023      	str	r3, [r4, #0]
 80144ea:	bd38      	pop	{r3, r4, r5, pc}
 80144ec:	24000eb4 	.word	0x24000eb4

080144f0 <__assert_func>:
 80144f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80144f2:	4614      	mov	r4, r2
 80144f4:	461a      	mov	r2, r3
 80144f6:	4b09      	ldr	r3, [pc, #36]	; (801451c <__assert_func+0x2c>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	4605      	mov	r5, r0
 80144fc:	68d8      	ldr	r0, [r3, #12]
 80144fe:	b14c      	cbz	r4, 8014514 <__assert_func+0x24>
 8014500:	4b07      	ldr	r3, [pc, #28]	; (8014520 <__assert_func+0x30>)
 8014502:	9100      	str	r1, [sp, #0]
 8014504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014508:	4906      	ldr	r1, [pc, #24]	; (8014524 <__assert_func+0x34>)
 801450a:	462b      	mov	r3, r5
 801450c:	f000 f81e 	bl	801454c <fiprintf>
 8014510:	f000 f89f 	bl	8014652 <abort>
 8014514:	4b04      	ldr	r3, [pc, #16]	; (8014528 <__assert_func+0x38>)
 8014516:	461c      	mov	r4, r3
 8014518:	e7f3      	b.n	8014502 <__assert_func+0x12>
 801451a:	bf00      	nop
 801451c:	24000024 	.word	0x24000024
 8014520:	080153c5 	.word	0x080153c5
 8014524:	080153d2 	.word	0x080153d2
 8014528:	08015400 	.word	0x08015400

0801452c <_close_r>:
 801452c:	b538      	push	{r3, r4, r5, lr}
 801452e:	4d06      	ldr	r5, [pc, #24]	; (8014548 <_close_r+0x1c>)
 8014530:	2300      	movs	r3, #0
 8014532:	4604      	mov	r4, r0
 8014534:	4608      	mov	r0, r1
 8014536:	602b      	str	r3, [r5, #0]
 8014538:	f7f0 fe1f 	bl	800517a <_close>
 801453c:	1c43      	adds	r3, r0, #1
 801453e:	d102      	bne.n	8014546 <_close_r+0x1a>
 8014540:	682b      	ldr	r3, [r5, #0]
 8014542:	b103      	cbz	r3, 8014546 <_close_r+0x1a>
 8014544:	6023      	str	r3, [r4, #0]
 8014546:	bd38      	pop	{r3, r4, r5, pc}
 8014548:	24000eb4 	.word	0x24000eb4

0801454c <fiprintf>:
 801454c:	b40e      	push	{r1, r2, r3}
 801454e:	b503      	push	{r0, r1, lr}
 8014550:	4601      	mov	r1, r0
 8014552:	ab03      	add	r3, sp, #12
 8014554:	4805      	ldr	r0, [pc, #20]	; (801456c <fiprintf+0x20>)
 8014556:	f853 2b04 	ldr.w	r2, [r3], #4
 801455a:	6800      	ldr	r0, [r0, #0]
 801455c:	9301      	str	r3, [sp, #4]
 801455e:	f7ff fe31 	bl	80141c4 <_vfiprintf_r>
 8014562:	b002      	add	sp, #8
 8014564:	f85d eb04 	ldr.w	lr, [sp], #4
 8014568:	b003      	add	sp, #12
 801456a:	4770      	bx	lr
 801456c:	24000024 	.word	0x24000024

08014570 <_fstat_r>:
 8014570:	b538      	push	{r3, r4, r5, lr}
 8014572:	4d07      	ldr	r5, [pc, #28]	; (8014590 <_fstat_r+0x20>)
 8014574:	2300      	movs	r3, #0
 8014576:	4604      	mov	r4, r0
 8014578:	4608      	mov	r0, r1
 801457a:	4611      	mov	r1, r2
 801457c:	602b      	str	r3, [r5, #0]
 801457e:	f7f0 fe08 	bl	8005192 <_fstat>
 8014582:	1c43      	adds	r3, r0, #1
 8014584:	d102      	bne.n	801458c <_fstat_r+0x1c>
 8014586:	682b      	ldr	r3, [r5, #0]
 8014588:	b103      	cbz	r3, 801458c <_fstat_r+0x1c>
 801458a:	6023      	str	r3, [r4, #0]
 801458c:	bd38      	pop	{r3, r4, r5, pc}
 801458e:	bf00      	nop
 8014590:	24000eb4 	.word	0x24000eb4

08014594 <_isatty_r>:
 8014594:	b538      	push	{r3, r4, r5, lr}
 8014596:	4d06      	ldr	r5, [pc, #24]	; (80145b0 <_isatty_r+0x1c>)
 8014598:	2300      	movs	r3, #0
 801459a:	4604      	mov	r4, r0
 801459c:	4608      	mov	r0, r1
 801459e:	602b      	str	r3, [r5, #0]
 80145a0:	f7f0 fe07 	bl	80051b2 <_isatty>
 80145a4:	1c43      	adds	r3, r0, #1
 80145a6:	d102      	bne.n	80145ae <_isatty_r+0x1a>
 80145a8:	682b      	ldr	r3, [r5, #0]
 80145aa:	b103      	cbz	r3, 80145ae <_isatty_r+0x1a>
 80145ac:	6023      	str	r3, [r4, #0]
 80145ae:	bd38      	pop	{r3, r4, r5, pc}
 80145b0:	24000eb4 	.word	0x24000eb4

080145b4 <_lseek_r>:
 80145b4:	b538      	push	{r3, r4, r5, lr}
 80145b6:	4d07      	ldr	r5, [pc, #28]	; (80145d4 <_lseek_r+0x20>)
 80145b8:	4604      	mov	r4, r0
 80145ba:	4608      	mov	r0, r1
 80145bc:	4611      	mov	r1, r2
 80145be:	2200      	movs	r2, #0
 80145c0:	602a      	str	r2, [r5, #0]
 80145c2:	461a      	mov	r2, r3
 80145c4:	f7f0 fe00 	bl	80051c8 <_lseek>
 80145c8:	1c43      	adds	r3, r0, #1
 80145ca:	d102      	bne.n	80145d2 <_lseek_r+0x1e>
 80145cc:	682b      	ldr	r3, [r5, #0]
 80145ce:	b103      	cbz	r3, 80145d2 <_lseek_r+0x1e>
 80145d0:	6023      	str	r3, [r4, #0]
 80145d2:	bd38      	pop	{r3, r4, r5, pc}
 80145d4:	24000eb4 	.word	0x24000eb4

080145d8 <__ascii_mbtowc>:
 80145d8:	b082      	sub	sp, #8
 80145da:	b901      	cbnz	r1, 80145de <__ascii_mbtowc+0x6>
 80145dc:	a901      	add	r1, sp, #4
 80145de:	b142      	cbz	r2, 80145f2 <__ascii_mbtowc+0x1a>
 80145e0:	b14b      	cbz	r3, 80145f6 <__ascii_mbtowc+0x1e>
 80145e2:	7813      	ldrb	r3, [r2, #0]
 80145e4:	600b      	str	r3, [r1, #0]
 80145e6:	7812      	ldrb	r2, [r2, #0]
 80145e8:	1e10      	subs	r0, r2, #0
 80145ea:	bf18      	it	ne
 80145ec:	2001      	movne	r0, #1
 80145ee:	b002      	add	sp, #8
 80145f0:	4770      	bx	lr
 80145f2:	4610      	mov	r0, r2
 80145f4:	e7fb      	b.n	80145ee <__ascii_mbtowc+0x16>
 80145f6:	f06f 0001 	mvn.w	r0, #1
 80145fa:	e7f8      	b.n	80145ee <__ascii_mbtowc+0x16>

080145fc <__malloc_lock>:
 80145fc:	4801      	ldr	r0, [pc, #4]	; (8014604 <__malloc_lock+0x8>)
 80145fe:	f7ff b902 	b.w	8013806 <__retarget_lock_acquire_recursive>
 8014602:	bf00      	nop
 8014604:	24000eac 	.word	0x24000eac

08014608 <__malloc_unlock>:
 8014608:	4801      	ldr	r0, [pc, #4]	; (8014610 <__malloc_unlock+0x8>)
 801460a:	f7ff b8fd 	b.w	8013808 <__retarget_lock_release_recursive>
 801460e:	bf00      	nop
 8014610:	24000eac 	.word	0x24000eac

08014614 <_read_r>:
 8014614:	b538      	push	{r3, r4, r5, lr}
 8014616:	4d07      	ldr	r5, [pc, #28]	; (8014634 <_read_r+0x20>)
 8014618:	4604      	mov	r4, r0
 801461a:	4608      	mov	r0, r1
 801461c:	4611      	mov	r1, r2
 801461e:	2200      	movs	r2, #0
 8014620:	602a      	str	r2, [r5, #0]
 8014622:	461a      	mov	r2, r3
 8014624:	f7f0 fd8c 	bl	8005140 <_read>
 8014628:	1c43      	adds	r3, r0, #1
 801462a:	d102      	bne.n	8014632 <_read_r+0x1e>
 801462c:	682b      	ldr	r3, [r5, #0]
 801462e:	b103      	cbz	r3, 8014632 <_read_r+0x1e>
 8014630:	6023      	str	r3, [r4, #0]
 8014632:	bd38      	pop	{r3, r4, r5, pc}
 8014634:	24000eb4 	.word	0x24000eb4

08014638 <__ascii_wctomb>:
 8014638:	b149      	cbz	r1, 801464e <__ascii_wctomb+0x16>
 801463a:	2aff      	cmp	r2, #255	; 0xff
 801463c:	bf85      	ittet	hi
 801463e:	238a      	movhi	r3, #138	; 0x8a
 8014640:	6003      	strhi	r3, [r0, #0]
 8014642:	700a      	strbls	r2, [r1, #0]
 8014644:	f04f 30ff 	movhi.w	r0, #4294967295
 8014648:	bf98      	it	ls
 801464a:	2001      	movls	r0, #1
 801464c:	4770      	bx	lr
 801464e:	4608      	mov	r0, r1
 8014650:	4770      	bx	lr

08014652 <abort>:
 8014652:	b508      	push	{r3, lr}
 8014654:	2006      	movs	r0, #6
 8014656:	f000 f82b 	bl	80146b0 <raise>
 801465a:	2001      	movs	r0, #1
 801465c:	f7f0 fd66 	bl	800512c <_exit>

08014660 <_raise_r>:
 8014660:	291f      	cmp	r1, #31
 8014662:	b538      	push	{r3, r4, r5, lr}
 8014664:	4604      	mov	r4, r0
 8014666:	460d      	mov	r5, r1
 8014668:	d904      	bls.n	8014674 <_raise_r+0x14>
 801466a:	2316      	movs	r3, #22
 801466c:	6003      	str	r3, [r0, #0]
 801466e:	f04f 30ff 	mov.w	r0, #4294967295
 8014672:	bd38      	pop	{r3, r4, r5, pc}
 8014674:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014676:	b112      	cbz	r2, 801467e <_raise_r+0x1e>
 8014678:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801467c:	b94b      	cbnz	r3, 8014692 <_raise_r+0x32>
 801467e:	4620      	mov	r0, r4
 8014680:	f000 f830 	bl	80146e4 <_getpid_r>
 8014684:	462a      	mov	r2, r5
 8014686:	4601      	mov	r1, r0
 8014688:	4620      	mov	r0, r4
 801468a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801468e:	f000 b817 	b.w	80146c0 <_kill_r>
 8014692:	2b01      	cmp	r3, #1
 8014694:	d00a      	beq.n	80146ac <_raise_r+0x4c>
 8014696:	1c59      	adds	r1, r3, #1
 8014698:	d103      	bne.n	80146a2 <_raise_r+0x42>
 801469a:	2316      	movs	r3, #22
 801469c:	6003      	str	r3, [r0, #0]
 801469e:	2001      	movs	r0, #1
 80146a0:	e7e7      	b.n	8014672 <_raise_r+0x12>
 80146a2:	2400      	movs	r4, #0
 80146a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80146a8:	4628      	mov	r0, r5
 80146aa:	4798      	blx	r3
 80146ac:	2000      	movs	r0, #0
 80146ae:	e7e0      	b.n	8014672 <_raise_r+0x12>

080146b0 <raise>:
 80146b0:	4b02      	ldr	r3, [pc, #8]	; (80146bc <raise+0xc>)
 80146b2:	4601      	mov	r1, r0
 80146b4:	6818      	ldr	r0, [r3, #0]
 80146b6:	f7ff bfd3 	b.w	8014660 <_raise_r>
 80146ba:	bf00      	nop
 80146bc:	24000024 	.word	0x24000024

080146c0 <_kill_r>:
 80146c0:	b538      	push	{r3, r4, r5, lr}
 80146c2:	4d07      	ldr	r5, [pc, #28]	; (80146e0 <_kill_r+0x20>)
 80146c4:	2300      	movs	r3, #0
 80146c6:	4604      	mov	r4, r0
 80146c8:	4608      	mov	r0, r1
 80146ca:	4611      	mov	r1, r2
 80146cc:	602b      	str	r3, [r5, #0]
 80146ce:	f7f0 fd1d 	bl	800510c <_kill>
 80146d2:	1c43      	adds	r3, r0, #1
 80146d4:	d102      	bne.n	80146dc <_kill_r+0x1c>
 80146d6:	682b      	ldr	r3, [r5, #0]
 80146d8:	b103      	cbz	r3, 80146dc <_kill_r+0x1c>
 80146da:	6023      	str	r3, [r4, #0]
 80146dc:	bd38      	pop	{r3, r4, r5, pc}
 80146de:	bf00      	nop
 80146e0:	24000eb4 	.word	0x24000eb4

080146e4 <_getpid_r>:
 80146e4:	f7f0 bd0a 	b.w	80050fc <_getpid>

080146e8 <atan2>:
 80146e8:	f000 b862 	b.w	80147b0 <__ieee754_atan2>
 80146ec:	0000      	movs	r0, r0
	...

080146f0 <sqrt>:
 80146f0:	b508      	push	{r3, lr}
 80146f2:	ed2d 8b04 	vpush	{d8-d9}
 80146f6:	eeb0 8b40 	vmov.f64	d8, d0
 80146fa:	f000 f927 	bl	801494c <__ieee754_sqrt>
 80146fe:	4b10      	ldr	r3, [pc, #64]	; (8014740 <sqrt+0x50>)
 8014700:	f993 3000 	ldrsb.w	r3, [r3]
 8014704:	3301      	adds	r3, #1
 8014706:	d011      	beq.n	801472c <sqrt+0x3c>
 8014708:	eeb4 8b48 	vcmp.f64	d8, d8
 801470c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014710:	d60c      	bvs.n	801472c <sqrt+0x3c>
 8014712:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8014738 <sqrt+0x48>
 8014716:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801471a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801471e:	d505      	bpl.n	801472c <sqrt+0x3c>
 8014720:	f7fd fae4 	bl	8011cec <__errno>
 8014724:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014728:	2321      	movs	r3, #33	; 0x21
 801472a:	6003      	str	r3, [r0, #0]
 801472c:	ecbd 8b04 	vpop	{d8-d9}
 8014730:	bd08      	pop	{r3, pc}
 8014732:	bf00      	nop
 8014734:	f3af 8000 	nop.w
	...
 8014740:	240001f4 	.word	0x240001f4

08014744 <asinf>:
 8014744:	b508      	push	{r3, lr}
 8014746:	ed2d 8b02 	vpush	{d8}
 801474a:	eeb0 8a40 	vmov.f32	s16, s0
 801474e:	f000 f901 	bl	8014954 <__ieee754_asinf>
 8014752:	4b13      	ldr	r3, [pc, #76]	; (80147a0 <asinf+0x5c>)
 8014754:	f993 3000 	ldrsb.w	r3, [r3]
 8014758:	3301      	adds	r3, #1
 801475a:	eef0 8a40 	vmov.f32	s17, s0
 801475e:	d01a      	beq.n	8014796 <asinf+0x52>
 8014760:	eeb4 8a48 	vcmp.f32	s16, s16
 8014764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014768:	d615      	bvs.n	8014796 <asinf+0x52>
 801476a:	eeb0 0a48 	vmov.f32	s0, s16
 801476e:	f000 fc53 	bl	8015018 <fabsf>
 8014772:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014776:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801477a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801477e:	dd0a      	ble.n	8014796 <asinf+0x52>
 8014780:	f7fd fab4 	bl	8011cec <__errno>
 8014784:	ecbd 8b02 	vpop	{d8}
 8014788:	2321      	movs	r3, #33	; 0x21
 801478a:	6003      	str	r3, [r0, #0]
 801478c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014790:	4804      	ldr	r0, [pc, #16]	; (80147a4 <asinf+0x60>)
 8014792:	f000 bc49 	b.w	8015028 <nanf>
 8014796:	eeb0 0a68 	vmov.f32	s0, s17
 801479a:	ecbd 8b02 	vpop	{d8}
 801479e:	bd08      	pop	{r3, pc}
 80147a0:	240001f4 	.word	0x240001f4
 80147a4:	08015400 	.word	0x08015400

080147a8 <atan2f>:
 80147a8:	f000 b9ba 	b.w	8014b20 <__ieee754_atan2f>
 80147ac:	0000      	movs	r0, r0
	...

080147b0 <__ieee754_atan2>:
 80147b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80147b2:	ee11 6a10 	vmov	r6, s2
 80147b6:	ee11 0a90 	vmov	r0, s3
 80147ba:	4273      	negs	r3, r6
 80147bc:	4f60      	ldr	r7, [pc, #384]	; (8014940 <__ieee754_atan2+0x190>)
 80147be:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80147c2:	4333      	orrs	r3, r6
 80147c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80147c8:	42bb      	cmp	r3, r7
 80147ca:	ed8d 0b00 	vstr	d0, [sp]
 80147ce:	d80b      	bhi.n	80147e8 <__ieee754_atan2+0x38>
 80147d0:	e9dd c500 	ldrd	ip, r5, [sp]
 80147d4:	f1cc 0100 	rsb	r1, ip, #0
 80147d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80147dc:	ea41 010c 	orr.w	r1, r1, ip
 80147e0:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 80147e4:	42b9      	cmp	r1, r7
 80147e6:	d906      	bls.n	80147f6 <__ieee754_atan2+0x46>
 80147e8:	ed9d 7b00 	vldr	d7, [sp]
 80147ec:	ee37 7b01 	vadd.f64	d7, d7, d1
 80147f0:	ed8d 7b00 	vstr	d7, [sp]
 80147f4:	e054      	b.n	80148a0 <__ieee754_atan2+0xf0>
 80147f6:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 80147fa:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80147fe:	4331      	orrs	r1, r6
 8014800:	d104      	bne.n	801480c <__ieee754_atan2+0x5c>
 8014802:	b003      	add	sp, #12
 8014804:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014808:	f000 ba2e 	b.w	8014c68 <atan>
 801480c:	1784      	asrs	r4, r0, #30
 801480e:	f004 0402 	and.w	r4, r4, #2
 8014812:	ea53 010c 	orrs.w	r1, r3, ip
 8014816:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 801481a:	d109      	bne.n	8014830 <__ieee754_atan2+0x80>
 801481c:	2c02      	cmp	r4, #2
 801481e:	d069      	beq.n	80148f4 <__ieee754_atan2+0x144>
 8014820:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8014908 <__ieee754_atan2+0x158>
 8014824:	ed9d 6b00 	vldr	d6, [sp]
 8014828:	2c03      	cmp	r4, #3
 801482a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801482e:	e7df      	b.n	80147f0 <__ieee754_atan2+0x40>
 8014830:	ea52 0106 	orrs.w	r1, r2, r6
 8014834:	d107      	bne.n	8014846 <__ieee754_atan2+0x96>
 8014836:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8014910 <__ieee754_atan2+0x160>
 801483a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8014918 <__ieee754_atan2+0x168>
 801483e:	2d00      	cmp	r5, #0
 8014840:	fe26 7b07 	vselge.f64	d7, d6, d7
 8014844:	e7d4      	b.n	80147f0 <__ieee754_atan2+0x40>
 8014846:	42ba      	cmp	r2, r7
 8014848:	d10f      	bne.n	801486a <__ieee754_atan2+0xba>
 801484a:	4293      	cmp	r3, r2
 801484c:	f104 34ff 	add.w	r4, r4, #4294967295
 8014850:	d107      	bne.n	8014862 <__ieee754_atan2+0xb2>
 8014852:	2c02      	cmp	r4, #2
 8014854:	d851      	bhi.n	80148fa <__ieee754_atan2+0x14a>
 8014856:	4b3b      	ldr	r3, [pc, #236]	; (8014944 <__ieee754_atan2+0x194>)
 8014858:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801485c:	ed94 7b00 	vldr	d7, [r4]
 8014860:	e7c6      	b.n	80147f0 <__ieee754_atan2+0x40>
 8014862:	2c02      	cmp	r4, #2
 8014864:	d84c      	bhi.n	8014900 <__ieee754_atan2+0x150>
 8014866:	4b38      	ldr	r3, [pc, #224]	; (8014948 <__ieee754_atan2+0x198>)
 8014868:	e7f6      	b.n	8014858 <__ieee754_atan2+0xa8>
 801486a:	42bb      	cmp	r3, r7
 801486c:	d0e3      	beq.n	8014836 <__ieee754_atan2+0x86>
 801486e:	1a9b      	subs	r3, r3, r2
 8014870:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8014874:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014878:	da16      	bge.n	80148a8 <__ieee754_atan2+0xf8>
 801487a:	2800      	cmp	r0, #0
 801487c:	da01      	bge.n	8014882 <__ieee754_atan2+0xd2>
 801487e:	323c      	adds	r2, #60	; 0x3c
 8014880:	db17      	blt.n	80148b2 <__ieee754_atan2+0x102>
 8014882:	ed9d 7b00 	vldr	d7, [sp]
 8014886:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801488a:	f000 fae7 	bl	8014e5c <fabs>
 801488e:	f000 f9eb 	bl	8014c68 <atan>
 8014892:	ed8d 0b00 	vstr	d0, [sp]
 8014896:	2c01      	cmp	r4, #1
 8014898:	d00e      	beq.n	80148b8 <__ieee754_atan2+0x108>
 801489a:	2c02      	cmp	r4, #2
 801489c:	d014      	beq.n	80148c8 <__ieee754_atan2+0x118>
 801489e:	b9f4      	cbnz	r4, 80148de <__ieee754_atan2+0x12e>
 80148a0:	ed9d 0b00 	vldr	d0, [sp]
 80148a4:	b003      	add	sp, #12
 80148a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148a8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8014910 <__ieee754_atan2+0x160>
 80148ac:	ed8d 7b00 	vstr	d7, [sp]
 80148b0:	e7f1      	b.n	8014896 <__ieee754_atan2+0xe6>
 80148b2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8014920 <__ieee754_atan2+0x170>
 80148b6:	e7f9      	b.n	80148ac <__ieee754_atan2+0xfc>
 80148b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80148bc:	9901      	ldr	r1, [sp, #4]
 80148be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80148c2:	e9cd 2300 	strd	r2, r3, [sp]
 80148c6:	e7eb      	b.n	80148a0 <__ieee754_atan2+0xf0>
 80148c8:	ed9d 6b00 	vldr	d6, [sp]
 80148cc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8014928 <__ieee754_atan2+0x178>
 80148d0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80148d4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8014930 <__ieee754_atan2+0x180>
 80148d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80148dc:	e788      	b.n	80147f0 <__ieee754_atan2+0x40>
 80148de:	ed9d 6b00 	vldr	d6, [sp]
 80148e2:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8014928 <__ieee754_atan2+0x178>
 80148e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80148ea:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8014930 <__ieee754_atan2+0x180>
 80148ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80148f2:	e77d      	b.n	80147f0 <__ieee754_atan2+0x40>
 80148f4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8014930 <__ieee754_atan2+0x180>
 80148f8:	e77a      	b.n	80147f0 <__ieee754_atan2+0x40>
 80148fa:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8014938 <__ieee754_atan2+0x188>
 80148fe:	e777      	b.n	80147f0 <__ieee754_atan2+0x40>
 8014900:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8014920 <__ieee754_atan2+0x170>
 8014904:	e774      	b.n	80147f0 <__ieee754_atan2+0x40>
 8014906:	bf00      	nop
 8014908:	54442d18 	.word	0x54442d18
 801490c:	c00921fb 	.word	0xc00921fb
 8014910:	54442d18 	.word	0x54442d18
 8014914:	3ff921fb 	.word	0x3ff921fb
 8014918:	54442d18 	.word	0x54442d18
 801491c:	bff921fb 	.word	0xbff921fb
	...
 8014928:	33145c07 	.word	0x33145c07
 801492c:	3ca1a626 	.word	0x3ca1a626
 8014930:	54442d18 	.word	0x54442d18
 8014934:	400921fb 	.word	0x400921fb
 8014938:	54442d18 	.word	0x54442d18
 801493c:	3fe921fb 	.word	0x3fe921fb
 8014940:	7ff00000 	.word	0x7ff00000
 8014944:	08015510 	.word	0x08015510
 8014948:	08015528 	.word	0x08015528

0801494c <__ieee754_sqrt>:
 801494c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8014950:	4770      	bx	lr
	...

08014954 <__ieee754_asinf>:
 8014954:	b538      	push	{r3, r4, r5, lr}
 8014956:	ee10 5a10 	vmov	r5, s0
 801495a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801495e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8014962:	ed2d 8b04 	vpush	{d8-d9}
 8014966:	d10c      	bne.n	8014982 <__ieee754_asinf+0x2e>
 8014968:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8014ae0 <__ieee754_asinf+0x18c>
 801496c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8014ae4 <__ieee754_asinf+0x190>
 8014970:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014974:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014978:	eeb0 0a67 	vmov.f32	s0, s15
 801497c:	ecbd 8b04 	vpop	{d8-d9}
 8014980:	bd38      	pop	{r3, r4, r5, pc}
 8014982:	dd04      	ble.n	801498e <__ieee754_asinf+0x3a>
 8014984:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014988:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801498c:	e7f6      	b.n	801497c <__ieee754_asinf+0x28>
 801498e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8014992:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014996:	da0b      	bge.n	80149b0 <__ieee754_asinf+0x5c>
 8014998:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801499c:	da52      	bge.n	8014a44 <__ieee754_asinf+0xf0>
 801499e:	eddf 7a52 	vldr	s15, [pc, #328]	; 8014ae8 <__ieee754_asinf+0x194>
 80149a2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80149a6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80149aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ae:	dce5      	bgt.n	801497c <__ieee754_asinf+0x28>
 80149b0:	f000 fb32 	bl	8015018 <fabsf>
 80149b4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80149b8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80149bc:	ee20 8a08 	vmul.f32	s16, s0, s16
 80149c0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8014aec <__ieee754_asinf+0x198>
 80149c4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8014af0 <__ieee754_asinf+0x19c>
 80149c8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8014af4 <__ieee754_asinf+0x1a0>
 80149cc:	eea8 7a27 	vfma.f32	s14, s16, s15
 80149d0:	eddf 7a49 	vldr	s15, [pc, #292]	; 8014af8 <__ieee754_asinf+0x1a4>
 80149d4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80149d8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8014afc <__ieee754_asinf+0x1a8>
 80149dc:	eea7 7a88 	vfma.f32	s14, s15, s16
 80149e0:	eddf 7a47 	vldr	s15, [pc, #284]	; 8014b00 <__ieee754_asinf+0x1ac>
 80149e4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80149e8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8014b04 <__ieee754_asinf+0x1b0>
 80149ec:	eea7 9a88 	vfma.f32	s18, s15, s16
 80149f0:	eddf 7a45 	vldr	s15, [pc, #276]	; 8014b08 <__ieee754_asinf+0x1b4>
 80149f4:	eee8 7a07 	vfma.f32	s15, s16, s14
 80149f8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8014b0c <__ieee754_asinf+0x1b8>
 80149fc:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014a00:	eddf 7a43 	vldr	s15, [pc, #268]	; 8014b10 <__ieee754_asinf+0x1bc>
 8014a04:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014a08:	eeb0 0a48 	vmov.f32	s0, s16
 8014a0c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8014a10:	f000 f924 	bl	8014c5c <__ieee754_sqrtf>
 8014a14:	4b3f      	ldr	r3, [pc, #252]	; (8014b14 <__ieee754_asinf+0x1c0>)
 8014a16:	ee29 9a08 	vmul.f32	s18, s18, s16
 8014a1a:	429c      	cmp	r4, r3
 8014a1c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8014a20:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014a24:	dd3d      	ble.n	8014aa2 <__ieee754_asinf+0x14e>
 8014a26:	eea0 0a06 	vfma.f32	s0, s0, s12
 8014a2a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8014b18 <__ieee754_asinf+0x1c4>
 8014a2e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8014a32:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8014ae4 <__ieee754_asinf+0x190>
 8014a36:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014a3a:	2d00      	cmp	r5, #0
 8014a3c:	bfd8      	it	le
 8014a3e:	eeb1 0a40 	vnegle.f32	s0, s0
 8014a42:	e79b      	b.n	801497c <__ieee754_asinf+0x28>
 8014a44:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014a48:	eddf 6a28 	vldr	s13, [pc, #160]	; 8014aec <__ieee754_asinf+0x198>
 8014a4c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8014af0 <__ieee754_asinf+0x19c>
 8014a50:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8014b04 <__ieee754_asinf+0x1b0>
 8014a54:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014a58:	eddf 6a27 	vldr	s13, [pc, #156]	; 8014af8 <__ieee754_asinf+0x1a4>
 8014a5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014a60:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8014afc <__ieee754_asinf+0x1a8>
 8014a64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014a68:	eddf 6a25 	vldr	s13, [pc, #148]	; 8014b00 <__ieee754_asinf+0x1ac>
 8014a6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014a70:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8014af4 <__ieee754_asinf+0x1a0>
 8014a74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014a78:	eddf 6a23 	vldr	s13, [pc, #140]	; 8014b08 <__ieee754_asinf+0x1b4>
 8014a7c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8014a80:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8014b0c <__ieee754_asinf+0x1b8>
 8014a84:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8014a88:	eddf 6a21 	vldr	s13, [pc, #132]	; 8014b10 <__ieee754_asinf+0x1bc>
 8014a8c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014a94:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8014a98:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8014a9c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8014aa0:	e76c      	b.n	801497c <__ieee754_asinf+0x28>
 8014aa2:	ee10 3a10 	vmov	r3, s0
 8014aa6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014aaa:	f023 030f 	bic.w	r3, r3, #15
 8014aae:	ee07 3a10 	vmov	s14, r3
 8014ab2:	eea7 8a47 	vfms.f32	s16, s14, s14
 8014ab6:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014aba:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014abe:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8014ac2:	eddf 7a07 	vldr	s15, [pc, #28]	; 8014ae0 <__ieee754_asinf+0x18c>
 8014ac6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8014aca:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8014ace:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8014b1c <__ieee754_asinf+0x1c8>
 8014ad2:	eeb0 6a40 	vmov.f32	s12, s0
 8014ad6:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014ada:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014ade:	e7aa      	b.n	8014a36 <__ieee754_asinf+0xe2>
 8014ae0:	b33bbd2e 	.word	0xb33bbd2e
 8014ae4:	3fc90fdb 	.word	0x3fc90fdb
 8014ae8:	7149f2ca 	.word	0x7149f2ca
 8014aec:	3811ef08 	.word	0x3811ef08
 8014af0:	3a4f7f04 	.word	0x3a4f7f04
 8014af4:	3e2aaaab 	.word	0x3e2aaaab
 8014af8:	bd241146 	.word	0xbd241146
 8014afc:	3e4e0aa8 	.word	0x3e4e0aa8
 8014b00:	bea6b090 	.word	0xbea6b090
 8014b04:	3d9dc62e 	.word	0x3d9dc62e
 8014b08:	bf303361 	.word	0xbf303361
 8014b0c:	4001572d 	.word	0x4001572d
 8014b10:	c019d139 	.word	0xc019d139
 8014b14:	3f799999 	.word	0x3f799999
 8014b18:	333bbd2e 	.word	0x333bbd2e
 8014b1c:	3f490fdb 	.word	0x3f490fdb

08014b20 <__ieee754_atan2f>:
 8014b20:	ee10 2a90 	vmov	r2, s1
 8014b24:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014b28:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014b2c:	b510      	push	{r4, lr}
 8014b2e:	eef0 7a40 	vmov.f32	s15, s0
 8014b32:	dc06      	bgt.n	8014b42 <__ieee754_atan2f+0x22>
 8014b34:	ee10 0a10 	vmov	r0, s0
 8014b38:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8014b3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014b40:	dd04      	ble.n	8014b4c <__ieee754_atan2f+0x2c>
 8014b42:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014b46:	eeb0 0a67 	vmov.f32	s0, s15
 8014b4a:	bd10      	pop	{r4, pc}
 8014b4c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8014b50:	d103      	bne.n	8014b5a <__ieee754_atan2f+0x3a>
 8014b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b56:	f000 b98b 	b.w	8014e70 <atanf>
 8014b5a:	1794      	asrs	r4, r2, #30
 8014b5c:	f004 0402 	and.w	r4, r4, #2
 8014b60:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8014b64:	b93b      	cbnz	r3, 8014b76 <__ieee754_atan2f+0x56>
 8014b66:	2c02      	cmp	r4, #2
 8014b68:	d05c      	beq.n	8014c24 <__ieee754_atan2f+0x104>
 8014b6a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8014c38 <__ieee754_atan2f+0x118>
 8014b6e:	2c03      	cmp	r4, #3
 8014b70:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8014b74:	e7e7      	b.n	8014b46 <__ieee754_atan2f+0x26>
 8014b76:	b939      	cbnz	r1, 8014b88 <__ieee754_atan2f+0x68>
 8014b78:	eddf 7a30 	vldr	s15, [pc, #192]	; 8014c3c <__ieee754_atan2f+0x11c>
 8014b7c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8014c40 <__ieee754_atan2f+0x120>
 8014b80:	2800      	cmp	r0, #0
 8014b82:	fe67 7a80 	vselge.f32	s15, s15, s0
 8014b86:	e7de      	b.n	8014b46 <__ieee754_atan2f+0x26>
 8014b88:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014b8c:	d110      	bne.n	8014bb0 <__ieee754_atan2f+0x90>
 8014b8e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014b92:	f104 34ff 	add.w	r4, r4, #4294967295
 8014b96:	d107      	bne.n	8014ba8 <__ieee754_atan2f+0x88>
 8014b98:	2c02      	cmp	r4, #2
 8014b9a:	d846      	bhi.n	8014c2a <__ieee754_atan2f+0x10a>
 8014b9c:	4b29      	ldr	r3, [pc, #164]	; (8014c44 <__ieee754_atan2f+0x124>)
 8014b9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014ba2:	edd4 7a00 	vldr	s15, [r4]
 8014ba6:	e7ce      	b.n	8014b46 <__ieee754_atan2f+0x26>
 8014ba8:	2c02      	cmp	r4, #2
 8014baa:	d841      	bhi.n	8014c30 <__ieee754_atan2f+0x110>
 8014bac:	4b26      	ldr	r3, [pc, #152]	; (8014c48 <__ieee754_atan2f+0x128>)
 8014bae:	e7f6      	b.n	8014b9e <__ieee754_atan2f+0x7e>
 8014bb0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014bb4:	d0e0      	beq.n	8014b78 <__ieee754_atan2f+0x58>
 8014bb6:	1a5b      	subs	r3, r3, r1
 8014bb8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8014bbc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8014bc0:	da1a      	bge.n	8014bf8 <__ieee754_atan2f+0xd8>
 8014bc2:	2a00      	cmp	r2, #0
 8014bc4:	da01      	bge.n	8014bca <__ieee754_atan2f+0xaa>
 8014bc6:	313c      	adds	r1, #60	; 0x3c
 8014bc8:	db19      	blt.n	8014bfe <__ieee754_atan2f+0xde>
 8014bca:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8014bce:	f000 fa23 	bl	8015018 <fabsf>
 8014bd2:	f000 f94d 	bl	8014e70 <atanf>
 8014bd6:	eef0 7a40 	vmov.f32	s15, s0
 8014bda:	2c01      	cmp	r4, #1
 8014bdc:	d012      	beq.n	8014c04 <__ieee754_atan2f+0xe4>
 8014bde:	2c02      	cmp	r4, #2
 8014be0:	d017      	beq.n	8014c12 <__ieee754_atan2f+0xf2>
 8014be2:	2c00      	cmp	r4, #0
 8014be4:	d0af      	beq.n	8014b46 <__ieee754_atan2f+0x26>
 8014be6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8014c4c <__ieee754_atan2f+0x12c>
 8014bea:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014bee:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8014c50 <__ieee754_atan2f+0x130>
 8014bf2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014bf6:	e7a6      	b.n	8014b46 <__ieee754_atan2f+0x26>
 8014bf8:	eddf 7a10 	vldr	s15, [pc, #64]	; 8014c3c <__ieee754_atan2f+0x11c>
 8014bfc:	e7ed      	b.n	8014bda <__ieee754_atan2f+0xba>
 8014bfe:	eddf 7a15 	vldr	s15, [pc, #84]	; 8014c54 <__ieee754_atan2f+0x134>
 8014c02:	e7ea      	b.n	8014bda <__ieee754_atan2f+0xba>
 8014c04:	ee17 3a90 	vmov	r3, s15
 8014c08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014c0c:	ee07 3a90 	vmov	s15, r3
 8014c10:	e799      	b.n	8014b46 <__ieee754_atan2f+0x26>
 8014c12:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8014c4c <__ieee754_atan2f+0x12c>
 8014c16:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014c1a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8014c50 <__ieee754_atan2f+0x130>
 8014c1e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014c22:	e790      	b.n	8014b46 <__ieee754_atan2f+0x26>
 8014c24:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014c50 <__ieee754_atan2f+0x130>
 8014c28:	e78d      	b.n	8014b46 <__ieee754_atan2f+0x26>
 8014c2a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014c58 <__ieee754_atan2f+0x138>
 8014c2e:	e78a      	b.n	8014b46 <__ieee754_atan2f+0x26>
 8014c30:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014c54 <__ieee754_atan2f+0x134>
 8014c34:	e787      	b.n	8014b46 <__ieee754_atan2f+0x26>
 8014c36:	bf00      	nop
 8014c38:	c0490fdb 	.word	0xc0490fdb
 8014c3c:	3fc90fdb 	.word	0x3fc90fdb
 8014c40:	bfc90fdb 	.word	0xbfc90fdb
 8014c44:	08015540 	.word	0x08015540
 8014c48:	0801554c 	.word	0x0801554c
 8014c4c:	33bbbd2e 	.word	0x33bbbd2e
 8014c50:	40490fdb 	.word	0x40490fdb
 8014c54:	00000000 	.word	0x00000000
 8014c58:	3f490fdb 	.word	0x3f490fdb

08014c5c <__ieee754_sqrtf>:
 8014c5c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014c60:	4770      	bx	lr
 8014c62:	0000      	movs	r0, r0
 8014c64:	0000      	movs	r0, r0
	...

08014c68 <atan>:
 8014c68:	b538      	push	{r3, r4, r5, lr}
 8014c6a:	eeb0 7b40 	vmov.f64	d7, d0
 8014c6e:	ee17 5a90 	vmov	r5, s15
 8014c72:	4b73      	ldr	r3, [pc, #460]	; (8014e40 <atan+0x1d8>)
 8014c74:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014c78:	429c      	cmp	r4, r3
 8014c7a:	dd13      	ble.n	8014ca4 <atan+0x3c>
 8014c7c:	4b71      	ldr	r3, [pc, #452]	; (8014e44 <atan+0x1dc>)
 8014c7e:	429c      	cmp	r4, r3
 8014c80:	dc03      	bgt.n	8014c8a <atan+0x22>
 8014c82:	d107      	bne.n	8014c94 <atan+0x2c>
 8014c84:	ee10 3a10 	vmov	r3, s0
 8014c88:	b123      	cbz	r3, 8014c94 <atan+0x2c>
 8014c8a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014c8e:	eeb0 0b47 	vmov.f64	d0, d7
 8014c92:	bd38      	pop	{r3, r4, r5, pc}
 8014c94:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8014dd0 <atan+0x168>
 8014c98:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8014dd8 <atan+0x170>
 8014c9c:	2d00      	cmp	r5, #0
 8014c9e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8014ca2:	e7f4      	b.n	8014c8e <atan+0x26>
 8014ca4:	4b68      	ldr	r3, [pc, #416]	; (8014e48 <atan+0x1e0>)
 8014ca6:	429c      	cmp	r4, r3
 8014ca8:	dc11      	bgt.n	8014cce <atan+0x66>
 8014caa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8014cae:	429c      	cmp	r4, r3
 8014cb0:	dc0a      	bgt.n	8014cc8 <atan+0x60>
 8014cb2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8014cb6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8014de0 <atan+0x178>
 8014cba:	ee30 6b06 	vadd.f64	d6, d0, d6
 8014cbe:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8014cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cc6:	dce2      	bgt.n	8014c8e <atan+0x26>
 8014cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8014ccc:	e013      	b.n	8014cf6 <atan+0x8e>
 8014cce:	f000 f8c5 	bl	8014e5c <fabs>
 8014cd2:	4b5e      	ldr	r3, [pc, #376]	; (8014e4c <atan+0x1e4>)
 8014cd4:	429c      	cmp	r4, r3
 8014cd6:	dc4f      	bgt.n	8014d78 <atan+0x110>
 8014cd8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8014cdc:	429c      	cmp	r4, r3
 8014cde:	dc41      	bgt.n	8014d64 <atan+0xfc>
 8014ce0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8014ce4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8014ce8:	2300      	movs	r3, #0
 8014cea:	eea0 6b07 	vfma.f64	d6, d0, d7
 8014cee:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014cf2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014cf6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014de8 <atan+0x180>
 8014cfa:	ee27 4b07 	vmul.f64	d4, d7, d7
 8014cfe:	ee24 5b04 	vmul.f64	d5, d4, d4
 8014d02:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014df0 <atan+0x188>
 8014d06:	eea5 3b06 	vfma.f64	d3, d5, d6
 8014d0a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8014df8 <atan+0x190>
 8014d0e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014d12:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014e00 <atan+0x198>
 8014d16:	eea6 3b05 	vfma.f64	d3, d6, d5
 8014d1a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8014e08 <atan+0x1a0>
 8014d1e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014d22:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014e10 <atan+0x1a8>
 8014d26:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8014e18 <atan+0x1b0>
 8014d2a:	eea6 3b05 	vfma.f64	d3, d6, d5
 8014d2e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014e20 <atan+0x1b8>
 8014d32:	eea5 2b06 	vfma.f64	d2, d5, d6
 8014d36:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014e28 <atan+0x1c0>
 8014d3a:	eea2 6b05 	vfma.f64	d6, d2, d5
 8014d3e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8014e30 <atan+0x1c8>
 8014d42:	eea6 2b05 	vfma.f64	d2, d6, d5
 8014d46:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014e38 <atan+0x1d0>
 8014d4a:	1c5a      	adds	r2, r3, #1
 8014d4c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8014d50:	ee26 6b05 	vmul.f64	d6, d6, d5
 8014d54:	eea3 6b04 	vfma.f64	d6, d3, d4
 8014d58:	ee27 6b06 	vmul.f64	d6, d7, d6
 8014d5c:	d121      	bne.n	8014da2 <atan+0x13a>
 8014d5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014d62:	e794      	b.n	8014c8e <atan+0x26>
 8014d64:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014d68:	2301      	movs	r3, #1
 8014d6a:	ee30 6b47 	vsub.f64	d6, d0, d7
 8014d6e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014d72:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014d76:	e7be      	b.n	8014cf6 <atan+0x8e>
 8014d78:	4b35      	ldr	r3, [pc, #212]	; (8014e50 <atan+0x1e8>)
 8014d7a:	429c      	cmp	r4, r3
 8014d7c:	da0b      	bge.n	8014d96 <atan+0x12e>
 8014d7e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8014d82:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014d86:	ee30 5b47 	vsub.f64	d5, d0, d7
 8014d8a:	eea0 6b07 	vfma.f64	d6, d0, d7
 8014d8e:	2302      	movs	r3, #2
 8014d90:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8014d94:	e7af      	b.n	8014cf6 <atan+0x8e>
 8014d96:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8014d9a:	2303      	movs	r3, #3
 8014d9c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014da0:	e7a9      	b.n	8014cf6 <atan+0x8e>
 8014da2:	4a2c      	ldr	r2, [pc, #176]	; (8014e54 <atan+0x1ec>)
 8014da4:	492c      	ldr	r1, [pc, #176]	; (8014e58 <atan+0x1f0>)
 8014da6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014daa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8014dae:	ed93 5b00 	vldr	d5, [r3]
 8014db2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014db6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014dba:	ed92 6b00 	vldr	d6, [r2]
 8014dbe:	2d00      	cmp	r5, #0
 8014dc0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014dc4:	bfb8      	it	lt
 8014dc6:	eeb1 7b47 	vneglt.f64	d7, d7
 8014dca:	e760      	b.n	8014c8e <atan+0x26>
 8014dcc:	f3af 8000 	nop.w
 8014dd0:	54442d18 	.word	0x54442d18
 8014dd4:	3ff921fb 	.word	0x3ff921fb
 8014dd8:	54442d18 	.word	0x54442d18
 8014ddc:	bff921fb 	.word	0xbff921fb
 8014de0:	8800759c 	.word	0x8800759c
 8014de4:	7e37e43c 	.word	0x7e37e43c
 8014de8:	e322da11 	.word	0xe322da11
 8014dec:	3f90ad3a 	.word	0x3f90ad3a
 8014df0:	24760deb 	.word	0x24760deb
 8014df4:	3fa97b4b 	.word	0x3fa97b4b
 8014df8:	a0d03d51 	.word	0xa0d03d51
 8014dfc:	3fb10d66 	.word	0x3fb10d66
 8014e00:	c54c206e 	.word	0xc54c206e
 8014e04:	3fb745cd 	.word	0x3fb745cd
 8014e08:	920083ff 	.word	0x920083ff
 8014e0c:	3fc24924 	.word	0x3fc24924
 8014e10:	5555550d 	.word	0x5555550d
 8014e14:	3fd55555 	.word	0x3fd55555
 8014e18:	52defd9a 	.word	0x52defd9a
 8014e1c:	bfadde2d 	.word	0xbfadde2d
 8014e20:	2c6a6c2f 	.word	0x2c6a6c2f
 8014e24:	bfa2b444 	.word	0xbfa2b444
 8014e28:	af749a6d 	.word	0xaf749a6d
 8014e2c:	bfb3b0f2 	.word	0xbfb3b0f2
 8014e30:	fe231671 	.word	0xfe231671
 8014e34:	bfbc71c6 	.word	0xbfbc71c6
 8014e38:	9998ebc4 	.word	0x9998ebc4
 8014e3c:	bfc99999 	.word	0xbfc99999
 8014e40:	440fffff 	.word	0x440fffff
 8014e44:	7ff00000 	.word	0x7ff00000
 8014e48:	3fdbffff 	.word	0x3fdbffff
 8014e4c:	3ff2ffff 	.word	0x3ff2ffff
 8014e50:	40038000 	.word	0x40038000
 8014e54:	08015558 	.word	0x08015558
 8014e58:	08015578 	.word	0x08015578

08014e5c <fabs>:
 8014e5c:	ec51 0b10 	vmov	r0, r1, d0
 8014e60:	ee10 2a10 	vmov	r2, s0
 8014e64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014e68:	ec43 2b10 	vmov	d0, r2, r3
 8014e6c:	4770      	bx	lr
	...

08014e70 <atanf>:
 8014e70:	b538      	push	{r3, r4, r5, lr}
 8014e72:	ee10 5a10 	vmov	r5, s0
 8014e76:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014e7a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8014e7e:	eef0 7a40 	vmov.f32	s15, s0
 8014e82:	db0f      	blt.n	8014ea4 <atanf+0x34>
 8014e84:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014e88:	dd04      	ble.n	8014e94 <atanf+0x24>
 8014e8a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8014e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8014e92:	bd38      	pop	{r3, r4, r5, pc}
 8014e94:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014fcc <atanf+0x15c>
 8014e98:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8014fd0 <atanf+0x160>
 8014e9c:	2d00      	cmp	r5, #0
 8014e9e:	fe77 7a80 	vselgt.f32	s15, s15, s0
 8014ea2:	e7f4      	b.n	8014e8e <atanf+0x1e>
 8014ea4:	4b4b      	ldr	r3, [pc, #300]	; (8014fd4 <atanf+0x164>)
 8014ea6:	429c      	cmp	r4, r3
 8014ea8:	dc10      	bgt.n	8014ecc <atanf+0x5c>
 8014eaa:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8014eae:	da0a      	bge.n	8014ec6 <atanf+0x56>
 8014eb0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014fd8 <atanf+0x168>
 8014eb4:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014eb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014ebc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ec4:	dce3      	bgt.n	8014e8e <atanf+0x1e>
 8014ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8014eca:	e013      	b.n	8014ef4 <atanf+0x84>
 8014ecc:	f000 f8a4 	bl	8015018 <fabsf>
 8014ed0:	4b42      	ldr	r3, [pc, #264]	; (8014fdc <atanf+0x16c>)
 8014ed2:	429c      	cmp	r4, r3
 8014ed4:	dc4f      	bgt.n	8014f76 <atanf+0x106>
 8014ed6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014eda:	429c      	cmp	r4, r3
 8014edc:	dc41      	bgt.n	8014f62 <atanf+0xf2>
 8014ede:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014ee2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014ee6:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014eea:	2300      	movs	r3, #0
 8014eec:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014ef0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014ef4:	1c5a      	adds	r2, r3, #1
 8014ef6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014efa:	eddf 5a39 	vldr	s11, [pc, #228]	; 8014fe0 <atanf+0x170>
 8014efe:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8014fe4 <atanf+0x174>
 8014f02:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8014fe8 <atanf+0x178>
 8014f06:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8014fec <atanf+0x17c>
 8014f0a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014f0e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8014f12:	eddf 5a37 	vldr	s11, [pc, #220]	; 8014ff0 <atanf+0x180>
 8014f16:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014f1a:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8014ff4 <atanf+0x184>
 8014f1e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014f22:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014ff8 <atanf+0x188>
 8014f26:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014f2a:	ed9f 6a34 	vldr	s12, [pc, #208]	; 8014ffc <atanf+0x18c>
 8014f2e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014f32:	eddf 5a33 	vldr	s11, [pc, #204]	; 8015000 <atanf+0x190>
 8014f36:	eee7 5a05 	vfma.f32	s11, s14, s10
 8014f3a:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8015004 <atanf+0x194>
 8014f3e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8014f42:	eddf 5a31 	vldr	s11, [pc, #196]	; 8015008 <atanf+0x198>
 8014f46:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014f4a:	eea5 0a87 	vfma.f32	s0, s11, s14
 8014f4e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014f52:	eea6 0a26 	vfma.f32	s0, s12, s13
 8014f56:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014f5a:	d121      	bne.n	8014fa0 <atanf+0x130>
 8014f5c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014f60:	e795      	b.n	8014e8e <atanf+0x1e>
 8014f62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014f66:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014f6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014f6e:	2301      	movs	r3, #1
 8014f70:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014f74:	e7be      	b.n	8014ef4 <atanf+0x84>
 8014f76:	4b25      	ldr	r3, [pc, #148]	; (801500c <atanf+0x19c>)
 8014f78:	429c      	cmp	r4, r3
 8014f7a:	dc0b      	bgt.n	8014f94 <atanf+0x124>
 8014f7c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014f80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014f84:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014f88:	2302      	movs	r3, #2
 8014f8a:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014f92:	e7af      	b.n	8014ef4 <atanf+0x84>
 8014f94:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014f98:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014f9c:	2303      	movs	r3, #3
 8014f9e:	e7a9      	b.n	8014ef4 <atanf+0x84>
 8014fa0:	4a1b      	ldr	r2, [pc, #108]	; (8015010 <atanf+0x1a0>)
 8014fa2:	491c      	ldr	r1, [pc, #112]	; (8015014 <atanf+0x1a4>)
 8014fa4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014fa8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014fac:	ed93 7a00 	vldr	s14, [r3]
 8014fb0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014fb4:	2d00      	cmp	r5, #0
 8014fb6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014fba:	ed92 0a00 	vldr	s0, [r2]
 8014fbe:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014fc2:	bfb8      	it	lt
 8014fc4:	eef1 7a67 	vneglt.f32	s15, s15
 8014fc8:	e761      	b.n	8014e8e <atanf+0x1e>
 8014fca:	bf00      	nop
 8014fcc:	3fc90fdb 	.word	0x3fc90fdb
 8014fd0:	bfc90fdb 	.word	0xbfc90fdb
 8014fd4:	3edfffff 	.word	0x3edfffff
 8014fd8:	7149f2ca 	.word	0x7149f2ca
 8014fdc:	3f97ffff 	.word	0x3f97ffff
 8014fe0:	3c8569d7 	.word	0x3c8569d7
 8014fe4:	3d4bda59 	.word	0x3d4bda59
 8014fe8:	bd15a221 	.word	0xbd15a221
 8014fec:	be4ccccd 	.word	0xbe4ccccd
 8014ff0:	3d886b35 	.word	0x3d886b35
 8014ff4:	3dba2e6e 	.word	0x3dba2e6e
 8014ff8:	3e124925 	.word	0x3e124925
 8014ffc:	3eaaaaab 	.word	0x3eaaaaab
 8015000:	bd6ef16b 	.word	0xbd6ef16b
 8015004:	bd9d8795 	.word	0xbd9d8795
 8015008:	bde38e38 	.word	0xbde38e38
 801500c:	401bffff 	.word	0x401bffff
 8015010:	08015598 	.word	0x08015598
 8015014:	080155a8 	.word	0x080155a8

08015018 <fabsf>:
 8015018:	ee10 3a10 	vmov	r3, s0
 801501c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015020:	ee00 3a10 	vmov	s0, r3
 8015024:	4770      	bx	lr
	...

08015028 <nanf>:
 8015028:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015030 <nanf+0x8>
 801502c:	4770      	bx	lr
 801502e:	bf00      	nop
 8015030:	7fc00000 	.word	0x7fc00000

08015034 <_init>:
 8015034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015036:	bf00      	nop
 8015038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801503a:	bc08      	pop	{r3}
 801503c:	469e      	mov	lr, r3
 801503e:	4770      	bx	lr

08015040 <_fini>:
 8015040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015042:	bf00      	nop
 8015044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015046:	bc08      	pop	{r3}
 8015048:	469e      	mov	lr, r3
 801504a:	4770      	bx	lr
