
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013464  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08013708  08013708  00023708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013c48  08013c48  00023c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013c50  08013c50  00023c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013c54  08013c54  00023c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  24000000  08013c58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000518  240001fc  08013e54  000301fc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000714  08013e54  00030714  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b792  00000000  00000000  0003022a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004516  00000000  00000000  0005b9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017b8  00000000  00000000  0005fed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016c0  00000000  00000000  00061690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000394d5  00000000  00000000  00062d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f386  00000000  00000000  0009c225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016848e  00000000  00000000  000bb5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00223a39  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007628  00000000  00000000  00223a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001fc 	.word	0x240001fc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080136ec 	.word	0x080136ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000200 	.word	0x24000200
 80002dc:	080136ec 	.word	0x080136ec

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000698:	81fb      	strh	r3, [r7, #14]

	for(int i=0; i<len-2;i++)
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	e00a      	b.n	80006b6 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	89fa      	ldrh	r2, [r7, #14]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2;i++)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	3301      	adds	r3, #1
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	3b02      	subs	r3, #2
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbef      	blt.n	80006a0 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8) && data[31]);
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	321e      	adds	r2, #30
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d10b      	bne.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d006      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	331f      	adds	r3, #31
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <iBus_Check_CHKSUM+0x60>
 80006e6:	2300      	movs	r3, #0
 80006e8:	b2db      	uxtb	r3, r3

}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0FFF;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3302      	adds	r3, #2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b21a      	sxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3303      	adds	r3, #3
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21b      	sxth	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b21b      	sxth	r3, r3
 8000716:	b29b      	uxth	r3, r3
 8000718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0FFF;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3304      	adds	r3, #4
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b21a      	sxth	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3305      	adds	r3, #5
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29b      	uxth	r3, r3
 800073a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800073e:	b29a      	uxth	r2, r3
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0FFF;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3306      	adds	r3, #6
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b21a      	sxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3307      	adds	r3, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	b21b      	sxth	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b21b      	sxth	r3, r3
 800075a:	b29b      	uxth	r3, r3
 800075c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000760:	b29a      	uxth	r2, r3
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0FFF;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3308      	adds	r3, #8
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b21a      	sxth	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3309      	adds	r3, #9
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21b      	sxth	r3, r3
 800077c:	b29b      	uxth	r3, r3
 800077e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000782:	b29a      	uxth	r2, r3
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0FFF;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	330a      	adds	r3, #10
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b21a      	sxth	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	330b      	adds	r3, #11
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21b      	sxth	r3, r3
 800079a:	4313      	orrs	r3, r2
 800079c:	b21b      	sxth	r3, r3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	811a      	strh	r2, [r3, #8]
	iBus->SwB = (data[12] | data[13]<<8) & 0x0FFF;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	330c      	adds	r3, #12
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	330d      	adds	r3, #13
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	815a      	strh	r2, [r3, #10]
	iBus->VrA = (data[14] | data[15]<<8) & 0x0FFF;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	330e      	adds	r3, #14
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	330f      	adds	r3, #15
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	821a      	strh	r2, [r3, #16]
	iBus->VrB = (data[16] | data[17]<<8) & 0x0FFF;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3310      	adds	r3, #16
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3311      	adds	r3, #17
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	b21b      	sxth	r3, r3
 8000804:	b29b      	uxth	r3, r3
 8000806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800080a:	b29a      	uxth	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	825a      	strh	r2, [r3, #18]
	iBus->SwC = (data[18] | data[19]<<8) & 0x0FFF;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3312      	adds	r3, #18
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b21a      	sxth	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3313      	adds	r3, #19
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	b29b      	uxth	r3, r3
 8000828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800082c:	b29a      	uxth	r2, r3
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	819a      	strh	r2, [r3, #12]
	iBus->SwD = (data[20] | data[21]<<8) & 0x0FFF;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3314      	adds	r3, #20
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b21a      	sxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3315      	adds	r3, #21
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21b      	sxth	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	b21b      	sxth	r3, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800084e:	b29a      	uxth	r2, r3
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	81da      	strh	r2, [r3, #14]

//	iBus->FailSafe = (iBus->SwB == 1500) && (iBus->SwD == 1500);
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af04      	add	r7, sp, #16
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	4608      	mov	r0, r1
 800086a:	4611      	mov	r1, r2
 800086c:	461a      	mov	r2, r3
 800086e:	4603      	mov	r3, r0
 8000870:	70fb      	strb	r3, [r7, #3]
 8000872:	460b      	mov	r3, r1
 8000874:	70bb      	strb	r3, [r7, #2]
 8000876:	4613      	mov	r3, r2
 8000878:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	2b03      	cmp	r3, #3
 800087e:	d81b      	bhi.n	80008b8 <MPU9250_Init+0x58>
 8000880:	a201      	add	r2, pc, #4	; (adr r2, 8000888 <MPU9250_Init+0x28>)
 8000882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000886:	bf00      	nop
 8000888:	08000899 	.word	0x08000899
 800088c:	080008a1 	.word	0x080008a1
 8000890:	080008a9 	.word	0x080008a9
 8000894:	080008b1 	.word	0x080008b1
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 8000898:	4b5d      	ldr	r3, [pc, #372]	; (8000a10 <MPU9250_Init+0x1b0>)
 800089a:	4a5e      	ldr	r2, [pc, #376]	; (8000a14 <MPU9250_Init+0x1b4>)
 800089c:	601a      	str	r2, [r3, #0]
		break;
 800089e:	e00c      	b.n	80008ba <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80008a0:	4b5b      	ldr	r3, [pc, #364]	; (8000a10 <MPU9250_Init+0x1b0>)
 80008a2:	4a5d      	ldr	r2, [pc, #372]	; (8000a18 <MPU9250_Init+0x1b8>)
 80008a4:	601a      	str	r2, [r3, #0]
		break;
 80008a6:	e008      	b.n	80008ba <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80008a8:	4b59      	ldr	r3, [pc, #356]	; (8000a10 <MPU9250_Init+0x1b0>)
 80008aa:	4a5c      	ldr	r2, [pc, #368]	; (8000a1c <MPU9250_Init+0x1bc>)
 80008ac:	601a      	str	r2, [r3, #0]
		break;
 80008ae:	e004      	b.n	80008ba <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80008b0:	4b57      	ldr	r3, [pc, #348]	; (8000a10 <MPU9250_Init+0x1b0>)
 80008b2:	4a5b      	ldr	r2, [pc, #364]	; (8000a20 <MPU9250_Init+0x1c0>)
 80008b4:	601a      	str	r2, [r3, #0]
		break;
 80008b6:	e000      	b.n	80008ba <MPU9250_Init+0x5a>
	default:
		break;
 80008b8:	bf00      	nop
	}

	switch(Acc_FS)
 80008ba:	78bb      	ldrb	r3, [r7, #2]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d81f      	bhi.n	8000900 <MPU9250_Init+0xa0>
 80008c0:	a201      	add	r2, pc, #4	; (adr r2, 80008c8 <MPU9250_Init+0x68>)
 80008c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c6:	bf00      	nop
 80008c8:	080008d9 	.word	0x080008d9
 80008cc:	080008e3 	.word	0x080008e3
 80008d0:	080008ed 	.word	0x080008ed
 80008d4:	080008f7 	.word	0x080008f7
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 80008d8:	4b52      	ldr	r3, [pc, #328]	; (8000a24 <MPU9250_Init+0x1c4>)
 80008da:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80008de:	601a      	str	r2, [r3, #0]
		break;
 80008e0:	e00f      	b.n	8000902 <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 80008e2:	4b50      	ldr	r3, [pc, #320]	; (8000a24 <MPU9250_Init+0x1c4>)
 80008e4:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80008e8:	601a      	str	r2, [r3, #0]
		break;
 80008ea:	e00a      	b.n	8000902 <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 80008ec:	4b4d      	ldr	r3, [pc, #308]	; (8000a24 <MPU9250_Init+0x1c4>)
 80008ee:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80008f2:	601a      	str	r2, [r3, #0]
		break;
 80008f4:	e005      	b.n	8000902 <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 80008f6:	4b4b      	ldr	r3, [pc, #300]	; (8000a24 <MPU9250_Init+0x1c4>)
 80008f8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80008fc:	601a      	str	r2, [r3, #0]
		break;
 80008fe:	e000      	b.n	8000902 <MPU9250_Init+0xa2>
	default:
		break;
 8000900:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 8000902:	2364      	movs	r3, #100	; 0x64
 8000904:	9302      	str	r3, [sp, #8]
 8000906:	2301      	movs	r3, #1
 8000908:	9301      	str	r3, [sp, #4]
 800090a:	4b47      	ldr	r3, [pc, #284]	; (8000a28 <MPU9250_Init+0x1c8>)
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	2301      	movs	r3, #1
 8000910:	2275      	movs	r2, #117	; 0x75
 8000912:	21d0      	movs	r1, #208	; 0xd0
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f007 fbb3 	bl	8008080 <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 800091a:	4b43      	ldr	r3, [pc, #268]	; (8000a28 <MPU9250_Init+0x1c8>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b71      	cmp	r3, #113	; 0x71
 8000920:	d171      	bne.n	8000a06 <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 8000922:	4b42      	ldr	r3, [pc, #264]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000924:	2201      	movs	r2, #1
 8000926:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	9302      	str	r3, [sp, #8]
 800092c:	2301      	movs	r3, #1
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	4b3e      	ldr	r3, [pc, #248]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2301      	movs	r3, #1
 8000936:	2219      	movs	r2, #25
 8000938:	21d0      	movs	r1, #208	; 0xd0
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f007 fa8c 	bl	8007e58 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000940:	200a      	movs	r0, #10
 8000942:	f004 f881 	bl	8004a48 <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 8000946:	4a39      	ldr	r2, [pc, #228]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000948:	787b      	ldrb	r3, [r7, #1]
 800094a:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	9302      	str	r3, [sp, #8]
 8000950:	2301      	movs	r3, #1
 8000952:	9301      	str	r3, [sp, #4]
 8000954:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	221a      	movs	r2, #26
 800095c:	21d0      	movs	r1, #208	; 0xd0
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f007 fa7a 	bl	8007e58 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000964:	200a      	movs	r0, #10
 8000966:	f004 f86f 	bl	8004a48 <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000972:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 8000974:	2364      	movs	r3, #100	; 0x64
 8000976:	9302      	str	r3, [sp, #8]
 8000978:	2301      	movs	r3, #1
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <MPU9250_Init+0x1cc>)
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2301      	movs	r3, #1
 8000982:	221b      	movs	r2, #27
 8000984:	21d0      	movs	r1, #208	; 0xd0
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f007 fa66 	bl	8007e58 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 800098c:	200a      	movs	r0, #10
 800098e:	f004 f85b 	bl	8004a48 <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 8000992:	78bb      	ldrb	r3, [r7, #2]
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <MPU9250_Init+0x1cc>)
 800099a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 800099c:	2364      	movs	r3, #100	; 0x64
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	2301      	movs	r3, #1
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2301      	movs	r3, #1
 80009aa:	221c      	movs	r2, #28
 80009ac:	21d0      	movs	r1, #208	; 0xd0
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f007 fa52 	bl	8007e58 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009b4:	200a      	movs	r0, #10
 80009b6:	f004 f847 	bl	8004a48 <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80009ba:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009bc:	7c3b      	ldrb	r3, [r7, #16]
 80009be:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80009c0:	2364      	movs	r3, #100	; 0x64
 80009c2:	9302      	str	r3, [sp, #8]
 80009c4:	2301      	movs	r3, #1
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2301      	movs	r3, #1
 80009ce:	221d      	movs	r2, #29
 80009d0:	21d0      	movs	r1, #208	; 0xd0
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f007 fa40 	bl	8007e58 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009d8:	200a      	movs	r0, #10
 80009da:	f004 f835 	bl	8004a48 <HAL_Delay>

		MPU9250_tx = 0x00;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 80009e4:	2364      	movs	r3, #100	; 0x64
 80009e6:	9302      	str	r3, [sp, #8]
 80009e8:	2301      	movs	r3, #1
 80009ea:	9301      	str	r3, [sp, #4]
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	2301      	movs	r3, #1
 80009f2:	226b      	movs	r2, #107	; 0x6b
 80009f4:	21d0      	movs	r1, #208	; 0xd0
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f007 fa2e 	bl	8007e58 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009fc:	200a      	movs	r0, #10
 80009fe:	f004 f823 	bl	8004a48 <HAL_Delay>

		return 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e000      	b.n	8000a08 <MPU9250_Init+0x1a8>
	}
	return 0;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	24000004 	.word	0x24000004
 8000a14:	43030000 	.word	0x43030000
 8000a18:	42830000 	.word	0x42830000
 8000a1c:	42033333 	.word	0x42033333
 8000a20:	41833333 	.word	0x41833333
 8000a24:	24000008 	.word	0x24000008
 8000a28:	240002dd 	.word	0x240002dd
 8000a2c:	24000265 	.word	0x24000265

08000a30 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af04      	add	r7, sp, #16
 8000a36:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MPU9250_Bypass+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000a3e:	2364      	movs	r3, #100	; 0x64
 8000a40:	9302      	str	r3, [sp, #8]
 8000a42:	2301      	movs	r3, #1
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MPU9250_Bypass+0x58>)
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	226a      	movs	r2, #106	; 0x6a
 8000a4e:	21d0      	movs	r1, #208	; 0xd0
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f007 fa01 	bl	8007e58 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a56:	200a      	movs	r0, #10
 8000a58:	f003 fff6 	bl	8004a48 <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MPU9250_Bypass+0x58>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	9302      	str	r3, [sp, #8]
 8000a66:	2301      	movs	r3, #1
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MPU9250_Bypass+0x58>)
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	2237      	movs	r2, #55	; 0x37
 8000a72:	21d0      	movs	r1, #208	; 0xd0
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f007 f9ef 	bl	8007e58 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f003 ffe4 	bl	8004a48 <HAL_Delay>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	24000265 	.word	0x24000265

08000a8c <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af04      	add	r7, sp, #16
 8000a92:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MPU9250_Master+0xa0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 8000a9a:	2364      	movs	r3, #100	; 0x64
 8000a9c:	9302      	str	r3, [sp, #8]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MPU9250_Master+0xa0>)
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	2237      	movs	r2, #55	; 0x37
 8000aaa:	21d0      	movs	r1, #208	; 0xd0
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f007 f9d3 	bl	8007e58 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ab2:	200a      	movs	r0, #10
 8000ab4:	f003 ffc8 	bl	8004a48 <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MPU9250_Master+0xa0>)
 8000aba:	2220      	movs	r2, #32
 8000abc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 8000abe:	2364      	movs	r3, #100	; 0x64
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MPU9250_Master+0xa0>)
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2301      	movs	r3, #1
 8000acc:	226a      	movs	r2, #106	; 0x6a
 8000ace:	21d0      	movs	r1, #208	; 0xd0
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f007 f9c1 	bl	8007e58 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f003 ffb6 	bl	8004a48 <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MPU9250_Master+0xa0>)
 8000ade:	220d      	movs	r2, #13
 8000ae0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 8000ae2:	2364      	movs	r3, #100	; 0x64
 8000ae4:	9302      	str	r3, [sp, #8]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	9301      	str	r3, [sp, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MPU9250_Master+0xa0>)
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2301      	movs	r3, #1
 8000af0:	2224      	movs	r2, #36	; 0x24
 8000af2:	21d0      	movs	r1, #208	; 0xd0
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f007 f9af 	bl	8007e58 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000afa:	200a      	movs	r0, #10
 8000afc:	f003 ffa4 	bl	8004a48 <HAL_Delay>

	MPU9250_tx = 0x00;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MPU9250_Master+0xa0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000b06:	2364      	movs	r3, #100	; 0x64
 8000b08:	9302      	str	r3, [sp, #8]
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	9301      	str	r3, [sp, #4]
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MPU9250_Master+0xa0>)
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2301      	movs	r3, #1
 8000b14:	226b      	movs	r2, #107	; 0x6b
 8000b16:	21d0      	movs	r1, #208	; 0xd0
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f007 f99d 	bl	8007e58 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f003 ff92 	bl	8004a48 <HAL_Delay>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	24000265 	.word	0x24000265

08000b30 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *DataStruct)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af04      	add	r7, sp, #16
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000b3a:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <MPU9250_AK8963_Setup+0xbc>)
 8000b3c:	2216      	movs	r2, #22
 8000b3e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000b40:	2364      	movs	r3, #100	; 0x64
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	2301      	movs	r3, #1
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	4b28      	ldr	r3, [pc, #160]	; (8000bec <MPU9250_AK8963_Setup+0xbc>)
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	220a      	movs	r2, #10
 8000b50:	2118      	movs	r1, #24
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f007 f980 	bl	8007e58 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b58:	200a      	movs	r0, #10
 8000b5a:	f003 ff75 	bl	8004a48 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_MPU9250_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000b5e:	2364      	movs	r3, #100	; 0x64
 8000b60:	9302      	str	r3, [sp, #8]
 8000b62:	2303      	movs	r3, #3
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <MPU9250_AK8963_Setup+0xc0>)
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	2118      	movs	r1, #24
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f007 fa85 	bl	8008080 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000b76:	200a      	movs	r0, #10
 8000b78:	f003 ff66 	bl	8004a48 <HAL_Delay>

	DataStruct->ASAX = MPU9250_rx_buf[0];
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MPU9250_AK8963_Setup+0xc0>)
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	DataStruct->ASAY = MPU9250_rx_buf[1];
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MPU9250_AK8963_Setup+0xc0>)
 8000b88:	785a      	ldrb	r2, [r3, #1]
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	DataStruct->ASAZ = MPU9250_rx_buf[2];
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MPU9250_AK8963_Setup+0xc0>)
 8000b92:	789a      	ldrb	r2, [r3, #2]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	MPU9250_ASAX = DataStruct->ASAX;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MPU9250_AK8963_Setup+0xc4>)
 8000ba2:	701a      	strb	r2, [r3, #0]
	MPU9250_ASAY = DataStruct->ASAY;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MPU9250_AK8963_Setup+0xc8>)
 8000bac:	701a      	strb	r2, [r3, #0]
	MPU9250_ASAZ = DataStruct->ASAZ;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MPU9250_AK8963_Setup+0xcc>)
 8000bb6:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MPU9250_AK8963_Setup+0xd0>)
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2118      	movs	r1, #24
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f007 fa58 	bl	8008080 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000bd0:	200a      	movs	r0, #10
 8000bd2:	f003 ff39 	bl	8004a48 <HAL_Delay>

	if(AK8963_WAI == 0b01001000) return 1;
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <MPU9250_AK8963_Setup+0xd0>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b48      	cmp	r3, #72	; 0x48
 8000bdc:	d101      	bne.n	8000be2 <MPU9250_AK8963_Setup+0xb2>
 8000bde:	2301      	movs	r3, #1
 8000be0:	e000      	b.n	8000be4 <MPU9250_AK8963_Setup+0xb4>
	return 0;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	24000265 	.word	0x24000265
 8000bf0:	240002e0 	.word	0x240002e0
 8000bf4:	24000000 	.word	0x24000000
 8000bf8:	24000001 	.word	0x24000001
 8000bfc:	24000002 	.word	0x24000002
 8000c00:	240002dc 	.word	0x240002dc

08000c04 <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af04      	add	r7, sp, #16
 8000c0a:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <MPU9250_Slave0_Enable+0x7c>)
 8000c0e:	228c      	movs	r2, #140	; 0x8c
 8000c10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000c12:	2364      	movs	r3, #100	; 0x64
 8000c14:	9302      	str	r3, [sp, #8]
 8000c16:	2301      	movs	r3, #1
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <MPU9250_Slave0_Enable+0x7c>)
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	2225      	movs	r2, #37	; 0x25
 8000c22:	21d0      	movs	r1, #208	; 0xd0
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f007 f917 	bl	8007e58 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c2a:	200a      	movs	r0, #10
 8000c2c:	f003 ff0c 	bl	8004a48 <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <MPU9250_Slave0_Enable+0x7c>)
 8000c32:	2203      	movs	r2, #3
 8000c34:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000c36:	2364      	movs	r3, #100	; 0x64
 8000c38:	9302      	str	r3, [sp, #8]
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <MPU9250_Slave0_Enable+0x7c>)
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2301      	movs	r3, #1
 8000c44:	2226      	movs	r2, #38	; 0x26
 8000c46:	21d0      	movs	r1, #208	; 0xd0
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f007 f905 	bl	8007e58 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f003 fefa 	bl	8004a48 <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <MPU9250_Slave0_Enable+0x7c>)
 8000c56:	2287      	movs	r2, #135	; 0x87
 8000c58:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000c5a:	2364      	movs	r3, #100	; 0x64
 8000c5c:	9302      	str	r3, [sp, #8]
 8000c5e:	2301      	movs	r3, #1
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <MPU9250_Slave0_Enable+0x7c>)
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2301      	movs	r3, #1
 8000c68:	2227      	movs	r2, #39	; 0x27
 8000c6a:	21d0      	movs	r1, #208	; 0xd0
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f007 f8f3 	bl	8007e58 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c72:	200a      	movs	r0, #10
 8000c74:	f003 fee8 	bl	8004a48 <HAL_Delay>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	24000265 	.word	0x24000265

08000c84 <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000c8c:	2314      	movs	r3, #20
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <MPU9250_Read_All+0x24>)
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2301      	movs	r3, #1
 8000c96:	223b      	movs	r2, #59	; 0x3b
 8000c98:	21d0      	movs	r1, #208	; 0xd0
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f007 fb0a 	bl	80082b4 <HAL_I2C_Mem_Read_DMA>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	240002e0 	.word	0x240002e0
 8000cac:	00000000 	.word	0x00000000

08000cb0 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000cb8:	4bb9      	ldr	r3, [pc, #740]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	021b      	lsls	r3, r3, #8
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	4bb7      	ldr	r3, [pc, #732]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000cc2:	785b      	ldrb	r3, [r3, #1]
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	425b      	negs	r3, r3
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	b21a      	sxth	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000cd6:	4bb2      	ldr	r3, [pc, #712]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000cd8:	789b      	ldrb	r3, [r3, #2]
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	b21a      	sxth	r2, r3
 8000cde:	4bb0      	ldr	r3, [pc, #704]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000ce0:	78db      	ldrb	r3, [r3, #3]
 8000ce2:	b21b      	sxth	r3, r3
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000cec:	4bac      	ldr	r3, [pc, #688]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000cee:	791b      	ldrb	r3, [r3, #4]
 8000cf0:	021b      	lsls	r3, r3, #8
 8000cf2:	b21a      	sxth	r2, r3
 8000cf4:	4baa      	ldr	r3, [pc, #680]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000cf6:	795b      	ldrb	r3, [r3, #5]
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b21a      	sxth	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000d02:	4ba7      	ldr	r3, [pc, #668]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d04:	7a1b      	ldrb	r3, [r3, #8]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	4ba5      	ldr	r3, [pc, #660]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d0c:	7a5b      	ldrb	r3, [r3, #9]
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	4313      	orrs	r3, r2
 8000d12:	b21a      	sxth	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000d18:	4ba1      	ldr	r3, [pc, #644]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d1a:	7a9b      	ldrb	r3, [r3, #10]
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	b21a      	sxth	r2, r3
 8000d20:	4b9f      	ldr	r3, [pc, #636]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d22:	7adb      	ldrb	r3, [r3, #11]
 8000d24:	b21b      	sxth	r3, r3
 8000d26:	4313      	orrs	r3, r2
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	425b      	negs	r3, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000d36:	4b9a      	ldr	r3, [pc, #616]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d38:	7b1b      	ldrb	r3, [r3, #12]
 8000d3a:	021b      	lsls	r3, r3, #8
 8000d3c:	b21a      	sxth	r2, r3
 8000d3e:	4b98      	ldr	r3, [pc, #608]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d40:	7b5b      	ldrb	r3, [r3, #13]
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	425b      	negs	r3, r3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	b21a      	sxth	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000d54:	4b92      	ldr	r3, [pc, #584]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d56:	7bdb      	ldrb	r3, [r3, #15]
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	4b90      	ldr	r3, [pc, #576]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d5e:	7b9b      	ldrb	r3, [r3, #14]
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	425b      	negs	r3, r3
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	b21a      	sxth	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	875a      	strh	r2, [r3, #58]	; 0x3a
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000d72:	4b8b      	ldr	r3, [pc, #556]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d74:	7c5b      	ldrb	r3, [r3, #17]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	4b89      	ldr	r3, [pc, #548]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d7c:	7c1b      	ldrb	r3, [r3, #16]
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	871a      	strh	r2, [r3, #56]	; 0x38
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000d88:	4b85      	ldr	r3, [pc, #532]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d8a:	7cdb      	ldrb	r3, [r3, #19]
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	b21a      	sxth	r2, r3
 8000d90:	4b83      	ldr	r3, [pc, #524]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d92:	7c9b      	ldrb	r3, [r3, #18]
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b21a      	sxth	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	879a      	strh	r2, [r3, #60]	; 0x3c

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000da4:	ee07 3a90 	vmov	s15, r3
 8000da8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dac:	4b7d      	ldr	r3, [pc, #500]	; (8000fa4 <MPU9250_Parsing+0x2f4>)
 8000dae:	ed93 7a00 	vldr	s14, [r3]
 8000db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000dc2:	ee07 3a90 	vmov	s15, r3
 8000dc6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dca:	4b76      	ldr	r3, [pc, #472]	; (8000fa4 <MPU9250_Parsing+0x2f4>)
 8000dcc:	ed93 7a00 	vldr	s14, [r3]
 8000dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000de8:	4b6e      	ldr	r3, [pc, #440]	; (8000fa4 <MPU9250_Parsing+0x2f4>)
 8000dea:	ed93 7a00 	vldr	s14, [r3]
 8000dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e06:	4b68      	ldr	r3, [pc, #416]	; (8000fa8 <MPU9250_Parsing+0x2f8>)
 8000e08:	ed93 7a00 	vldr	s14, [r3]
 8000e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e1c:	ee07 3a90 	vmov	s15, r3
 8000e20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e24:	4b60      	ldr	r3, [pc, #384]	; (8000fa8 <MPU9250_Parsing+0x2f8>)
 8000e26:	ed93 7a00 	vldr	s14, [r3]
 8000e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = ((DataStruct->Az_Raw / MPU9250_Acc_LSB)-0.15) / 1.08;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e3a:	ee07 3a90 	vmov	s15, r3
 8000e3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e42:	4b59      	ldr	r3, [pc, #356]	; (8000fa8 <MPU9250_Parsing+0x2f8>)
 8000e44:	ed93 7a00 	vldr	s14, [r3]
 8000e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e50:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8000f90 <MPU9250_Parsing+0x2e0>
 8000e54:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000e58:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8000f98 <MPU9250_Parsing+0x2e8>
 8000e5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000e70:	461a      	mov	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000e78:	3b80      	subs	r3, #128	; 0x80
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	da00      	bge.n	8000e80 <MPU9250_Parsing+0x1d0>
 8000e7e:	33ff      	adds	r3, #255	; 0xff
 8000e80:	121b      	asrs	r3, r3, #8
 8000e82:	3301      	adds	r3, #1
 8000e84:	fb03 f302 	mul.w	r3, r3, r2
 8000e88:	ee07 3a90 	vmov	s15, r3
 8000e8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e90:	4b46      	ldr	r3, [pc, #280]	; (8000fac <MPU9250_Parsing+0x2fc>)
 8000e92:	ed93 7a00 	vldr	s14, [r3]
 8000e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000eae:	3b80      	subs	r3, #128	; 0x80
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	da00      	bge.n	8000eb6 <MPU9250_Parsing+0x206>
 8000eb4:	33ff      	adds	r3, #255	; 0xff
 8000eb6:	121b      	asrs	r3, r3, #8
 8000eb8:	3301      	adds	r3, #1
 8000eba:	fb03 f302 	mul.w	r3, r3, r2
 8000ebe:	ee07 3a90 	vmov	s15, r3
 8000ec2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <MPU9250_Parsing+0x2fc>)
 8000ec8:	ed93 7a00 	vldr	s14, [r3]
 8000ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8000edc:	461a      	mov	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ee4:	3b80      	subs	r3, #128	; 0x80
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	da00      	bge.n	8000eec <MPU9250_Parsing+0x23c>
 8000eea:	33ff      	adds	r3, #255	; 0xff
 8000eec:	121b      	asrs	r3, r3, #8
 8000eee:	3301      	adds	r3, #1
 8000ef0:	fb03 f302 	mul.w	r3, r3, r2
 8000ef4:	ee07 3a90 	vmov	s15, r3
 8000ef8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000efc:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <MPU9250_Parsing+0x2fc>)
 8000efe:	ed93 7a00 	vldr	s14, [r3]
 8000f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000f18:	ee07 3a90 	vmov	s15, r3
 8000f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000f54:	ee07 3a90 	vmov	s15, r3
 8000f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	edd3 7a08 	vldr	s15, [r3, #32]
 8000f6c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000fb0 <MPU9250_Parsing+0x300>
 8000f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f80:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000fb0 <MPU9250_Parsing+0x300>
 8000f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f88:	e014      	b.n	8000fb4 <MPU9250_Parsing+0x304>
 8000f8a:	bf00      	nop
 8000f8c:	f3af 8000 	nop.w
 8000f90:	33333333 	.word	0x33333333
 8000f94:	3fc33333 	.word	0x3fc33333
 8000f98:	147ae148 	.word	0x147ae148
 8000f9c:	3ff147ae 	.word	0x3ff147ae
 8000fa0:	240002e0 	.word	0x240002e0
 8000fa4:	24000004 	.word	0x24000004
 8000fa8:	24000008 	.word	0x24000008
 8000fac:	2400000c 	.word	0x2400000c
 8000fb0:	3c8efa35 	.word	0x3c8efa35
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000fc0:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8000fb0 <MPU9250_Parsing+0x300>
 8000fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My -= DataStruct->My_Offset;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8000ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	0000      	movs	r0, r0
	...

08001020 <MPU9250_Parsing_NoOffset>:

void MPU9250_Parsing_NoOffset(MPU9250_t *DataStruct)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8001028:	4baf      	ldr	r3, [pc, #700]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b21a      	sxth	r2, r3
 8001030:	4bad      	ldr	r3, [pc, #692]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 8001032:	785b      	ldrb	r3, [r3, #1]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21b      	sxth	r3, r3
 800103a:	b29b      	uxth	r3, r3
 800103c:	425b      	negs	r3, r3
 800103e:	b29b      	uxth	r3, r3
 8001040:	b21a      	sxth	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8001046:	4ba8      	ldr	r3, [pc, #672]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 8001048:	789b      	ldrb	r3, [r3, #2]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	4ba6      	ldr	r3, [pc, #664]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 8001050:	78db      	ldrb	r3, [r3, #3]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21a      	sxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 800105c:	4ba2      	ldr	r3, [pc, #648]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	4ba0      	ldr	r3, [pc, #640]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 8001066:	795b      	ldrb	r3, [r3, #5]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8001072:	4b9d      	ldr	r3, [pc, #628]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 8001074:	7a1b      	ldrb	r3, [r3, #8]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	4b9b      	ldr	r3, [pc, #620]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 800107c:	7a5b      	ldrb	r3, [r3, #9]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b21a      	sxth	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8001088:	4b97      	ldr	r3, [pc, #604]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 800108a:	7a9b      	ldrb	r3, [r3, #10]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b21a      	sxth	r2, r3
 8001090:	4b95      	ldr	r3, [pc, #596]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 8001092:	7adb      	ldrb	r3, [r3, #11]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21b      	sxth	r3, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	425b      	negs	r3, r3
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 80010a6:	4b90      	ldr	r3, [pc, #576]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80010a8:	7b1b      	ldrb	r3, [r3, #12]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	4b8e      	ldr	r3, [pc, #568]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80010b0:	7b5b      	ldrb	r3, [r3, #13]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	425b      	negs	r3, r3
 80010bc:	b29b      	uxth	r3, r3
 80010be:	b21a      	sxth	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 80010c4:	4b88      	ldr	r3, [pc, #544]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80010c6:	7bdb      	ldrb	r3, [r3, #15]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	4b86      	ldr	r3, [pc, #536]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80010ce:	7b9b      	ldrb	r3, [r3, #14]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	425b      	negs	r3, r3
 80010da:	b29b      	uxth	r3, r3
 80010dc:	b21a      	sxth	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	875a      	strh	r2, [r3, #58]	; 0x3a
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 80010e2:	4b81      	ldr	r3, [pc, #516]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80010e4:	7c5b      	ldrb	r3, [r3, #17]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	4b7f      	ldr	r3, [pc, #508]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80010ec:	7c1b      	ldrb	r3, [r3, #16]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	871a      	strh	r2, [r3, #56]	; 0x38
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 80010f8:	4b7b      	ldr	r3, [pc, #492]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80010fa:	7cdb      	ldrb	r3, [r3, #19]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b21a      	sxth	r2, r3
 8001100:	4b79      	ldr	r3, [pc, #484]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 8001102:	7c9b      	ldrb	r3, [r3, #18]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21a      	sxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	879a      	strh	r2, [r3, #60]	; 0x3c

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB* D2R;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800111c:	4b73      	ldr	r3, [pc, #460]	; (80012ec <MPU9250_Parsing_NoOffset+0x2cc>)
 800111e:	ed93 7a00 	vldr	s14, [r3]
 8001122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001126:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80012f0 <MPU9250_Parsing_NoOffset+0x2d0>
 800112a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB* D2R;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001142:	4b6a      	ldr	r3, [pc, #424]	; (80012ec <MPU9250_Parsing_NoOffset+0x2cc>)
 8001144:	ed93 7a00 	vldr	s14, [r3]
 8001148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800114c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80012f0 <MPU9250_Parsing_NoOffset+0x2d0>
 8001150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB* D2R;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001168:	4b60      	ldr	r3, [pc, #384]	; (80012ec <MPU9250_Parsing_NoOffset+0x2cc>)
 800116a:	ed93 7a00 	vldr	s14, [r3]
 800116e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001172:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80012f0 <MPU9250_Parsing_NoOffset+0x2d0>
 8001176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	edd3 7a08 	vldr	s15, [r3, #32]
 8001186:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80012f0 <MPU9250_Parsing_NoOffset+0x2d0>
 800118a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800119a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80012f0 <MPU9250_Parsing_NoOffset+0x2d0>
 800119e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80011ae:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80012f0 <MPU9250_Parsing_NoOffset+0x2d0>
 80011b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011ca:	4b4a      	ldr	r3, [pc, #296]	; (80012f4 <MPU9250_Parsing_NoOffset+0x2d4>)
 80011cc:	ed93 7a00 	vldr	s14, [r3]
 80011d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011e8:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <MPU9250_Parsing_NoOffset+0x2d4>)
 80011ea:	ed93 7a00 	vldr	s14, [r3]
 80011ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = ((DataStruct->Az_Raw / MPU9250_Acc_LSB)-0.15) / 1.08;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <MPU9250_Parsing_NoOffset+0x2d4>)
 8001208:	ed93 7a00 	vldr	s14, [r3]
 800120c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001210:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001214:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80012d8 <MPU9250_Parsing_NoOffset+0x2b8>
 8001218:	ee37 6b46 	vsub.f64	d6, d7, d6
 800121c:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80012e0 <MPU9250_Parsing_NoOffset+0x2c0>
 8001220:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001224:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((MPU9250_ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8001234:	461a      	mov	r2, r3
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <MPU9250_Parsing_NoOffset+0x2d8>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	3b80      	subs	r3, #128	; 0x80
 800123c:	2b00      	cmp	r3, #0
 800123e:	da00      	bge.n	8001242 <MPU9250_Parsing_NoOffset+0x222>
 8001240:	33ff      	adds	r3, #255	; 0xff
 8001242:	121b      	asrs	r3, r3, #8
 8001244:	3301      	adds	r3, #1
 8001246:	fb03 f302 	mul.w	r3, r3, r2
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <MPU9250_Parsing_NoOffset+0x2dc>)
 8001254:	ed93 7a00 	vldr	s14, [r3]
 8001258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My = (DataStruct->My_Raw * ((MPU9250_ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8001268:	461a      	mov	r2, r3
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <MPU9250_Parsing_NoOffset+0x2e0>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	3b80      	subs	r3, #128	; 0x80
 8001270:	2b00      	cmp	r3, #0
 8001272:	da00      	bge.n	8001276 <MPU9250_Parsing_NoOffset+0x256>
 8001274:	33ff      	adds	r3, #255	; 0xff
 8001276:	121b      	asrs	r3, r3, #8
 8001278:	3301      	adds	r3, #1
 800127a:	fb03 f302 	mul.w	r3, r3, r2
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MPU9250_Parsing_NoOffset+0x2dc>)
 8001288:	ed93 7a00 	vldr	s14, [r3]
 800128c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz = (DataStruct->Mz_Raw * ((MPU9250_ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800129c:	461a      	mov	r2, r3
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MPU9250_Parsing_NoOffset+0x2e4>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	3b80      	subs	r3, #128	; 0x80
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	da00      	bge.n	80012aa <MPU9250_Parsing_NoOffset+0x28a>
 80012a8:	33ff      	adds	r3, #255	; 0xff
 80012aa:	121b      	asrs	r3, r3, #8
 80012ac:	3301      	adds	r3, #1
 80012ae:	fb03 f302 	mul.w	r3, r3, r2
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MPU9250_Parsing_NoOffset+0x2dc>)
 80012bc:	ed93 7a00 	vldr	s14, [r3]
 80012c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	33333333 	.word	0x33333333
 80012dc:	3fc33333 	.word	0x3fc33333
 80012e0:	147ae148 	.word	0x147ae148
 80012e4:	3ff147ae 	.word	0x3ff147ae
 80012e8:	240002e0 	.word	0x240002e0
 80012ec:	24000004 	.word	0x24000004
 80012f0:	3c8efa35 	.word	0x3c8efa35
 80012f4:	24000008 	.word	0x24000008
 80012f8:	24000000 	.word	0x24000000
 80012fc:	2400000c 	.word	0x2400000c
 8001300:	24000001 	.word	0x24000001
 8001304:	24000002 	.word	0x24000002

08001308 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b0ae      	sub	sp, #184	; 0xb8
 800130c:	af00      	add	r7, sp, #0
 800130e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001312:	edc7 0a08 	vstr	s1, [r7, #32]
 8001316:	ed87 1a07 	vstr	s2, [r7, #28]
 800131a:	edc7 1a06 	vstr	s3, [r7, #24]
 800131e:	ed87 2a05 	vstr	s4, [r7, #20]
 8001322:	edc7 2a04 	vstr	s5, [r7, #16]
 8001326:	ed87 3a03 	vstr	s6, [r7, #12]
 800132a:	edc7 3a02 	vstr	s7, [r7, #8]
 800132e:	ed87 4a01 	vstr	s8, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001332:	edd7 7a03 	vldr	s15, [r7, #12]
 8001336:	eef5 7a40 	vcmp.f32	s15, #0.0
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	d11d      	bne.n	800137c <MadgwickAHRSupdate+0x74>
 8001340:	edd7 7a02 	vldr	s15, [r7, #8]
 8001344:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134c:	d116      	bne.n	800137c <MadgwickAHRSupdate+0x74>
 800134e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001352:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	d10f      	bne.n	800137c <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 800135c:	edd7 2a04 	vldr	s5, [r7, #16]
 8001360:	ed97 2a05 	vldr	s4, [r7, #20]
 8001364:	edd7 1a06 	vldr	s3, [r7, #24]
 8001368:	ed97 1a07 	vldr	s2, [r7, #28]
 800136c:	edd7 0a08 	vldr	s1, [r7, #32]
 8001370:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001374:	f000 ffd6 	bl	8002324 <MadgwickAHRSupdateIMU>
		return;
 8001378:	f000 bfb4 	b.w	80022e4 <MadgwickAHRSupdate+0xfdc>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800137c:	4be6      	ldr	r3, [pc, #920]	; (8001718 <MadgwickAHRSupdate+0x410>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	eeb1 7a67 	vneg.f32	s14, s15
 8001386:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800138a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138e:	4be3      	ldr	r3, [pc, #908]	; (800171c <MadgwickAHRSupdate+0x414>)
 8001390:	edd3 6a00 	vldr	s13, [r3]
 8001394:	edd7 7a08 	vldr	s15, [r7, #32]
 8001398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013a0:	4bdf      	ldr	r3, [pc, #892]	; (8001720 <MadgwickAHRSupdate+0x418>)
 80013a2:	edd3 6a00 	vldr	s13, [r3]
 80013a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80013aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ba:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80013be:	4bd9      	ldr	r3, [pc, #868]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 80013c0:	ed93 7a00 	vldr	s14, [r3]
 80013c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013cc:	4bd3      	ldr	r3, [pc, #844]	; (800171c <MadgwickAHRSupdate+0x414>)
 80013ce:	edd3 6a00 	vldr	s13, [r3]
 80013d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80013d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013de:	4bd0      	ldr	r3, [pc, #832]	; (8001720 <MadgwickAHRSupdate+0x418>)
 80013e0:	edd3 6a00 	vldr	s13, [r3]
 80013e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80013e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80013fc:	4bc9      	ldr	r3, [pc, #804]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 80013fe:	ed93 7a00 	vldr	s14, [r3]
 8001402:	edd7 7a08 	vldr	s15, [r7, #32]
 8001406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140a:	4bc3      	ldr	r3, [pc, #780]	; (8001718 <MadgwickAHRSupdate+0x410>)
 800140c:	edd3 6a00 	vldr	s13, [r3]
 8001410:	edd7 7a07 	vldr	s15, [r7, #28]
 8001414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001418:	ee37 7a67 	vsub.f32	s14, s14, s15
 800141c:	4bc0      	ldr	r3, [pc, #768]	; (8001720 <MadgwickAHRSupdate+0x418>)
 800141e:	edd3 6a00 	vldr	s13, [r3]
 8001422:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001436:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800143a:	4bba      	ldr	r3, [pc, #744]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 800143c:	ed93 7a00 	vldr	s14, [r3]
 8001440:	edd7 7a07 	vldr	s15, [r7, #28]
 8001444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001448:	4bb3      	ldr	r3, [pc, #716]	; (8001718 <MadgwickAHRSupdate+0x410>)
 800144a:	edd3 6a00 	vldr	s13, [r3]
 800144e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001456:	ee37 7a27 	vadd.f32	s14, s14, s15
 800145a:	4bb0      	ldr	r3, [pc, #704]	; (800171c <MadgwickAHRSupdate+0x414>)
 800145c:	edd3 6a00 	vldr	s13, [r3]
 8001460:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800146c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001474:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001478:	edd7 7a06 	vldr	s15, [r7, #24]
 800147c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	d10e      	bne.n	80014a4 <MadgwickAHRSupdate+0x19c>
 8001486:	edd7 7a05 	vldr	s15, [r7, #20]
 800148a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001492:	d107      	bne.n	80014a4 <MadgwickAHRSupdate+0x19c>
 8001494:	edd7 7a04 	vldr	s15, [r7, #16]
 8001498:	eef5 7a40 	vcmp.f32	s15, #0.0
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	f000 85a6 	beq.w	8001ff0 <MadgwickAHRSupdate+0xce8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80014a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80014a8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80014ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80014b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80014bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c4:	eeb0 0a67 	vmov.f32	s0, s15
 80014c8:	f001 fb5a 	bl	8002b80 <invSqrt>
 80014cc:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 80014d0:	ed97 7a06 	vldr	s14, [r7, #24]
 80014d4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014dc:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 80014e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80014e4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ec:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 80014f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80014f4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014fc:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001500:	edd7 7a03 	vldr	s15, [r7, #12]
 8001504:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001508:	edd7 7a02 	vldr	s15, [r7, #8]
 800150c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001510:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001514:	edd7 7a01 	vldr	s15, [r7, #4]
 8001518:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800151c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001520:	eeb0 0a67 	vmov.f32	s0, s15
 8001524:	f001 fb2c 	bl	8002b80 <invSqrt>
 8001528:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 800152c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001530:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001538:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 800153c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001540:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001548:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 800154c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001550:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001558:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 800155c:	4b71      	ldr	r3, [pc, #452]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001566:	ed97 7a03 	vldr	s14, [r7, #12]
 800156a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 8001572:	4b6c      	ldr	r3, [pc, #432]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800157c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001584:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8001588:	4b66      	ldr	r3, [pc, #408]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001592:	ed97 7a01 	vldr	s14, [r7, #4]
 8001596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800159a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 800159e:	4b5e      	ldr	r3, [pc, #376]	; (8001718 <MadgwickAHRSupdate+0x410>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80015ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 80015b4:	4b5b      	ldr	r3, [pc, #364]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015be:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 80015c2:	4b55      	ldr	r3, [pc, #340]	; (8001718 <MadgwickAHRSupdate+0x410>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015cc:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 80015d0:	4b52      	ldr	r3, [pc, #328]	; (800171c <MadgwickAHRSupdate+0x414>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015da:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 80015de:	4b50      	ldr	r3, [pc, #320]	; (8001720 <MadgwickAHRSupdate+0x418>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015e8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 80015ec:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 80015ee:	edd3 7a00 	vldr	s15, [r3]
 80015f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015f6:	4b49      	ldr	r3, [pc, #292]	; (800171c <MadgwickAHRSupdate+0x414>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001600:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 8001604:	4b45      	ldr	r3, [pc, #276]	; (800171c <MadgwickAHRSupdate+0x414>)
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800160e:	4b44      	ldr	r3, [pc, #272]	; (8001720 <MadgwickAHRSupdate+0x418>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001618:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 800161c:	4b41      	ldr	r3, [pc, #260]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 800161e:	ed93 7a00 	vldr	s14, [r3]
 8001622:	4b40      	ldr	r3, [pc, #256]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 8001630:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 8001632:	ed93 7a00 	vldr	s14, [r3]
 8001636:	4b38      	ldr	r3, [pc, #224]	; (8001718 <MadgwickAHRSupdate+0x410>)
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001640:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 8001644:	4b37      	ldr	r3, [pc, #220]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 8001646:	ed93 7a00 	vldr	s14, [r3]
 800164a:	4b34      	ldr	r3, [pc, #208]	; (800171c <MadgwickAHRSupdate+0x414>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001654:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 8001658:	4b32      	ldr	r3, [pc, #200]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	4b30      	ldr	r3, [pc, #192]	; (8001720 <MadgwickAHRSupdate+0x418>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001668:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 800166c:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <MadgwickAHRSupdate+0x410>)
 800166e:	ed93 7a00 	vldr	s14, [r3]
 8001672:	4b29      	ldr	r3, [pc, #164]	; (8001718 <MadgwickAHRSupdate+0x410>)
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <MadgwickAHRSupdate+0x410>)
 8001682:	ed93 7a00 	vldr	s14, [r3]
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <MadgwickAHRSupdate+0x414>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001690:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 8001694:	4b20      	ldr	r3, [pc, #128]	; (8001718 <MadgwickAHRSupdate+0x410>)
 8001696:	ed93 7a00 	vldr	s14, [r3]
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <MadgwickAHRSupdate+0x418>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <MadgwickAHRSupdate+0x414>)
 80016aa:	ed93 7a00 	vldr	s14, [r3]
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <MadgwickAHRSupdate+0x414>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <MadgwickAHRSupdate+0x414>)
 80016be:	ed93 7a00 	vldr	s14, [r3]
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MadgwickAHRSupdate+0x418>)
 80016c4:	edd3 7a00 	vldr	s15, [r3]
 80016c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016cc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <MadgwickAHRSupdate+0x418>)
 80016d2:	ed93 7a00 	vldr	s14, [r3]
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MadgwickAHRSupdate+0x418>)
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80016e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80016e8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80016ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MadgwickAHRSupdate+0x418>)
 80016f2:	edd3 6a00 	vldr	s13, [r3]
 80016f6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80016fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <MadgwickAHRSupdate+0x414>)
 8001704:	edd3 6a00 	vldr	s13, [r3]
 8001708:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800170c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001710:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001714:	e008      	b.n	8001728 <MadgwickAHRSupdate+0x420>
 8001716:	bf00      	nop
 8001718:	24000218 	.word	0x24000218
 800171c:	2400021c 	.word	0x2400021c
 8001720:	24000220 	.word	0x24000220
 8001724:	24000014 	.word	0x24000014
 8001728:	edd7 6a03 	vldr	s13, [r7, #12]
 800172c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001734:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001738:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800173c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001740:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001744:	4bf5      	ldr	r3, [pc, #980]	; (8001b1c <MadgwickAHRSupdate+0x814>)
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001752:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001756:	edd7 7a01 	vldr	s15, [r7, #4]
 800175a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800175e:	4bf0      	ldr	r3, [pc, #960]	; (8001b20 <MadgwickAHRSupdate+0x818>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001768:	ee37 7a27 	vadd.f32	s14, s14, s15
 800176c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001770:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001778:	ee37 7a67 	vsub.f32	s14, s14, s15
 800177c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001780:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001790:	4be3      	ldr	r3, [pc, #908]	; (8001b20 <MadgwickAHRSupdate+0x818>)
 8001792:	ed93 7a00 	vldr	s14, [r3]
 8001796:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800179a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800179e:	edd7 6a02 	vldr	s13, [r7, #8]
 80017a2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80017a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ae:	4bdd      	ldr	r3, [pc, #884]	; (8001b24 <MadgwickAHRSupdate+0x81c>)
 80017b0:	edd3 6a00 	vldr	s13, [r3]
 80017b4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80017b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017c0:	4bd6      	ldr	r3, [pc, #856]	; (8001b1c <MadgwickAHRSupdate+0x814>)
 80017c2:	edd3 6a00 	vldr	s13, [r3]
 80017c6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80017ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d2:	edd7 6a02 	vldr	s13, [r7, #8]
 80017d6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017e2:	edd7 6a02 	vldr	s13, [r7, #8]
 80017e6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f2:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80017f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017fe:	4bc8      	ldr	r3, [pc, #800]	; (8001b20 <MadgwickAHRSupdate+0x818>)
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001808:	ee37 7a27 	vadd.f32	s14, s14, s15
 800180c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001810:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 8001820:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001824:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001828:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800182c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001834:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001838:	eeb0 0b47 	vmov.f64	d0, d7
 800183c:	f011 fab4 	bl	8012da8 <sqrt>
 8001840:	eeb0 7b40 	vmov.f64	d7, d0
 8001844:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001848:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 800184c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001850:	eeb1 7a67 	vneg.f32	s14, s15
 8001854:	4bb1      	ldr	r3, [pc, #708]	; (8001b1c <MadgwickAHRSupdate+0x814>)
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800185e:	4bb1      	ldr	r3, [pc, #708]	; (8001b24 <MadgwickAHRSupdate+0x81c>)
 8001860:	edd3 6a00 	vldr	s13, [r3]
 8001864:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800186c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001870:	edd7 6a01 	vldr	s13, [r7, #4]
 8001874:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001880:	4ba7      	ldr	r3, [pc, #668]	; (8001b20 <MadgwickAHRSupdate+0x818>)
 8001882:	edd3 6a00 	vldr	s13, [r3]
 8001886:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800188a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001892:	edd7 6a01 	vldr	s13, [r7, #4]
 8001896:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800189a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800189e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018a2:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80018a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80018aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018ae:	4b9c      	ldr	r3, [pc, #624]	; (8001b20 <MadgwickAHRSupdate+0x818>)
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018bc:	edd7 6a01 	vldr	s13, [r7, #4]
 80018c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018cc:	edd7 6a01 	vldr	s13, [r7, #4]
 80018d0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018dc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 80018e0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018e8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 80018ec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018f4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80018f8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80018fc:	eeb1 7a67 	vneg.f32	s14, s15
 8001900:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001904:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001908:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800190c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001910:	edd7 7a06 	vldr	s15, [r7, #24]
 8001914:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800191c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001920:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001924:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001928:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800192c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001930:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001934:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800193c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001940:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <MadgwickAHRSupdate+0x814>)
 8001942:	edd3 6a00 	vldr	s13, [r3]
 8001946:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800194a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800194e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001952:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001956:	ee36 6a67 	vsub.f32	s12, s12, s15
 800195a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800195e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001962:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001966:	ee26 6a27 	vmul.f32	s12, s12, s15
 800196a:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800196e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001972:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001976:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800197a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800197e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001982:	edd7 7a03 	vldr	s15, [r7, #12]
 8001986:	ee76 7a67 	vsub.f32	s15, s12, s15
 800198a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001992:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001996:	eef1 6a67 	vneg.f32	s13, s15
 800199a:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <MadgwickAHRSupdate+0x818>)
 800199c:	edd3 7a00 	vldr	s15, [r3]
 80019a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019a4:	4b5f      	ldr	r3, [pc, #380]	; (8001b24 <MadgwickAHRSupdate+0x81c>)
 80019a6:	ed93 6a00 	vldr	s12, [r3]
 80019aa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019b6:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80019ba:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80019be:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019c2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019ca:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80019ce:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80019d2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80019d6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019da:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019de:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019f2:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <MadgwickAHRSupdate+0x814>)
 80019f4:	edd3 6a00 	vldr	s13, [r3]
 80019f8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a00:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001a04:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a08:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a0c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a10:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a14:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001a18:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a1c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a20:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a24:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a28:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a2c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a30:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a38:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a44:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001a48:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a4c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a50:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a60:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001a64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a68:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001a6c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a70:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001a74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a78:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a7c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a80:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001a84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a8c:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <MadgwickAHRSupdate+0x81c>)
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001a96:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a9a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001aa2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001aa6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001aaa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001aae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ab2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aba:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <MadgwickAHRSupdate+0x818>)
 8001ac8:	edd3 6a00 	vldr	s13, [r3]
 8001acc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ad0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ad4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001ad8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001adc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ae0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ae4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ae8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001aec:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001af0:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001af4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001af8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001afc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b00:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b04:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b0c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b18:	e006      	b.n	8001b28 <MadgwickAHRSupdate+0x820>
 8001b1a:	bf00      	nop
 8001b1c:	2400021c 	.word	0x2400021c
 8001b20:	24000220 	.word	0x24000220
 8001b24:	24000218 	.word	0x24000218
 8001b28:	4bf6      	ldr	r3, [pc, #984]	; (8001f04 <MadgwickAHRSupdate+0xbfc>)
 8001b2a:	edd3 6a00 	vldr	s13, [r3]
 8001b2e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b32:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b36:	4bf4      	ldr	r3, [pc, #976]	; (8001f08 <MadgwickAHRSupdate+0xc00>)
 8001b38:	ed93 6a00 	vldr	s12, [r3]
 8001b3c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b40:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b44:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b48:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001b4c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001b50:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001b54:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b58:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b5c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001b60:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001b64:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001b68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b6c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b70:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b74:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b78:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b84:	4be1      	ldr	r3, [pc, #900]	; (8001f0c <MadgwickAHRSupdate+0xc04>)
 8001b86:	edd3 6a00 	vldr	s13, [r3]
 8001b8a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b92:	4bdf      	ldr	r3, [pc, #892]	; (8001f10 <MadgwickAHRSupdate+0xc08>)
 8001b94:	ed93 6a00 	vldr	s12, [r3]
 8001b98:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b9c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ba0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ba4:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001ba8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001bac:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001bb0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001bb4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001bb8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001bbc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001bc0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001bc4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bc8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001bcc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bd0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001bd4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001bd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bdc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001bec:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001bf0:	eeb1 7a67 	vneg.f32	s14, s15
 8001bf4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001bf8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001bfc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001c00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c08:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c10:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001c14:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001c18:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001c1c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c20:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c28:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c34:	4bb3      	ldr	r3, [pc, #716]	; (8001f04 <MadgwickAHRSupdate+0xbfc>)
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001c3e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c42:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001c46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c4a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001c4e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c52:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c56:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c5a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c62:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c6e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c72:	eef1 6a67 	vneg.f32	s13, s15
 8001c76:	4ba3      	ldr	r3, [pc, #652]	; (8001f04 <MadgwickAHRSupdate+0xbfc>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c80:	4ba1      	ldr	r3, [pc, #644]	; (8001f08 <MadgwickAHRSupdate+0xc00>)
 8001c82:	ed93 6a00 	vldr	s12, [r3]
 8001c86:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c92:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001c96:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c9a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c9e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ca2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ca6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001caa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cae:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001cb2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001cb6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cbe:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cc2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cca:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd6:	4b8e      	ldr	r3, [pc, #568]	; (8001f10 <MadgwickAHRSupdate+0xc08>)
 8001cd8:	edd3 6a00 	vldr	s13, [r3]
 8001cdc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ce0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ce4:	4b89      	ldr	r3, [pc, #548]	; (8001f0c <MadgwickAHRSupdate+0xc04>)
 8001ce6:	ed93 6a00 	vldr	s12, [r3]
 8001cea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cee:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cf2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001cf6:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001cfa:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001cfe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d02:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d06:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d0a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001d0e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001d12:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001d16:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d1a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d1e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d22:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d26:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d32:	4b75      	ldr	r3, [pc, #468]	; (8001f08 <MadgwickAHRSupdate+0xc00>)
 8001d34:	edd3 6a00 	vldr	s13, [r3]
 8001d38:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d40:	4b70      	ldr	r3, [pc, #448]	; (8001f04 <MadgwickAHRSupdate+0xbfc>)
 8001d42:	ed93 6a00 	vldr	s12, [r3]
 8001d46:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d4e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d52:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001d56:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d5a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d5e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d62:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d66:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001d6a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001d6e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d72:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d76:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d7a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d7e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d82:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d8a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d96:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001d9a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d9e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001da2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001da6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001daa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001db2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001db6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dba:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001dbe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001dc2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001dc6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dca:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001dd2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001dd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dde:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001de2:	eef1 6a67 	vneg.f32	s13, s15
 8001de6:	4b49      	ldr	r3, [pc, #292]	; (8001f0c <MadgwickAHRSupdate+0xc04>)
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001df0:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <MadgwickAHRSupdate+0xc08>)
 8001df2:	ed93 6a00 	vldr	s12, [r3]
 8001df6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dfa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dfe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e02:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001e06:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e0a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001e0e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001e12:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001e16:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e1a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e1e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001e22:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001e26:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e2a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e2e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e32:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e36:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e3a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e46:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e4a:	eef1 6a67 	vneg.f32	s13, s15
 8001e4e:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <MadgwickAHRSupdate+0xc00>)
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e58:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <MadgwickAHRSupdate+0xbfc>)
 8001e5a:	ed93 6a00 	vldr	s12, [r3]
 8001e5e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e62:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e6a:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001e6e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001e72:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001e76:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e7a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e7e:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001e82:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e86:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001e8a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e8e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e92:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e96:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e9a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <MadgwickAHRSupdate+0xc08>)
 8001ea8:	edd3 6a00 	vldr	s13, [r3]
 8001eac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001eb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eb4:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001eb8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ebc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ec0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ec4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ec8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001ecc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001ed0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ed4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ed8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001edc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ee0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ee4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ee8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eec:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001efc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f00:	e008      	b.n	8001f14 <MadgwickAHRSupdate+0xc0c>
 8001f02:	bf00      	nop
 8001f04:	2400021c 	.word	0x2400021c
 8001f08:	24000014 	.word	0x24000014
 8001f0c:	24000220 	.word	0x24000220
 8001f10:	24000218 	.word	0x24000218
 8001f14:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f18:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f24:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f28:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f30:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f40:	f000 fe1e 	bl	8002b80 <invSqrt>
 8001f44:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001f48:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001f4c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f54:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001f58:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001f5c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f64:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001f68:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f6c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f74:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001f78:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001f7c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f84:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001f88:	4bd8      	ldr	r3, [pc, #864]	; (80022ec <MadgwickAHRSupdate+0xfe4>)
 8001f8a:	ed93 7a00 	vldr	s14, [r3]
 8001f8e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f96:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001fa2:	4bd2      	ldr	r3, [pc, #840]	; (80022ec <MadgwickAHRSupdate+0xfe4>)
 8001fa4:	ed93 7a00 	vldr	s14, [r3]
 8001fa8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001fbc:	4bcb      	ldr	r3, [pc, #812]	; (80022ec <MadgwickAHRSupdate+0xfe4>)
 8001fbe:	ed93 7a00 	vldr	s14, [r3]
 8001fc2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fca:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001fd6:	4bc5      	ldr	r3, [pc, #788]	; (80022ec <MadgwickAHRSupdate+0xfe4>)
 8001fd8:	ed93 7a00 	vldr	s14, [r3]
 8001fdc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe4:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fec:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001ff0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001ff4:	ed9f 7abe 	vldr	s14, [pc, #760]	; 80022f0 <MadgwickAHRSupdate+0xfe8>
 8001ff8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ffc:	4bbd      	ldr	r3, [pc, #756]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002006:	4bbb      	ldr	r3, [pc, #748]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 8002008:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 800200c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002010:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80022f0 <MadgwickAHRSupdate+0xfe8>
 8002014:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002018:	4bb7      	ldr	r3, [pc, #732]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 800201a:	edd3 7a00 	vldr	s15, [r3]
 800201e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002022:	4bb5      	ldr	r3, [pc, #724]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 8002024:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002028:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800202c:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 80022f0 <MadgwickAHRSupdate+0xfe8>
 8002030:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002034:	4bb1      	ldr	r3, [pc, #708]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203e:	4baf      	ldr	r3, [pc, #700]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 8002040:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002044:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002048:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80022f0 <MadgwickAHRSupdate+0xfe8>
 800204c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002050:	4bab      	ldr	r3, [pc, #684]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 8002052:	edd3 7a00 	vldr	s15, [r3]
 8002056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205a:	4ba9      	ldr	r3, [pc, #676]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 800205c:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002060:	4ba4      	ldr	r3, [pc, #656]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 8002062:	ed93 7a00 	vldr	s14, [r3]
 8002066:	4ba3      	ldr	r3, [pc, #652]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002070:	4ba1      	ldr	r3, [pc, #644]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 8002072:	edd3 6a00 	vldr	s13, [r3]
 8002076:	4ba0      	ldr	r3, [pc, #640]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002084:	4b9d      	ldr	r3, [pc, #628]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 8002086:	edd3 6a00 	vldr	s13, [r3]
 800208a:	4b9c      	ldr	r3, [pc, #624]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002094:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002098:	4b99      	ldr	r3, [pc, #612]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 800209a:	edd3 6a00 	vldr	s13, [r3]
 800209e:	4b98      	ldr	r3, [pc, #608]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 80020a0:	edd3 7a00 	vldr	s15, [r3]
 80020a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ac:	eeb0 0a67 	vmov.f32	s0, s15
 80020b0:	f000 fd66 	bl	8002b80 <invSqrt>
 80020b4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 80020b8:	4b8e      	ldr	r3, [pc, #568]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 80020ba:	ed93 7a00 	vldr	s14, [r3]
 80020be:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c6:	4b8b      	ldr	r3, [pc, #556]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 80020c8:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80020cc:	4b8a      	ldr	r3, [pc, #552]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 80020ce:	ed93 7a00 	vldr	s14, [r3]
 80020d2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020da:	4b87      	ldr	r3, [pc, #540]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 80020dc:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80020e0:	4b86      	ldr	r3, [pc, #536]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 80020e2:	ed93 7a00 	vldr	s14, [r3]
 80020e6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ee:	4b83      	ldr	r3, [pc, #524]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 80020f0:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80020f4:	4b82      	ldr	r3, [pc, #520]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 80020f6:	ed93 7a00 	vldr	s14, [r3]
 80020fa:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002102:	4b7f      	ldr	r3, [pc, #508]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 8002104:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8002108:	4b7a      	ldr	r3, [pc, #488]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 800210a:	ed93 7a00 	vldr	s14, [r3]
 800210e:	4b7a      	ldr	r3, [pc, #488]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002118:	4b78      	ldr	r3, [pc, #480]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 800211a:	edd3 6a00 	vldr	s13, [r3]
 800211e:	4b78      	ldr	r3, [pc, #480]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002128:	ee37 6a27 	vadd.f32	s12, s14, s15
 800212c:	4b72      	ldr	r3, [pc, #456]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 800212e:	ed93 7a00 	vldr	s14, [r3]
 8002132:	4b71      	ldr	r3, [pc, #452]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002140:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002144:	4b6d      	ldr	r3, [pc, #436]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 8002146:	edd3 6a00 	vldr	s13, [r3]
 800214a:	4b6c      	ldr	r3, [pc, #432]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002158:	eef0 0a67 	vmov.f32	s1, s15
 800215c:	eeb0 0a46 	vmov.f32	s0, s12
 8002160:	f010 fe7e 	bl	8012e60 <atan2f>
 8002164:	eef0 7a40 	vmov.f32	s15, s0
 8002168:	4b66      	ldr	r3, [pc, #408]	; (8002304 <MadgwickAHRSupdate+0xffc>)
 800216a:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 800216e:	4b62      	ldr	r3, [pc, #392]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 8002170:	ed93 7a00 	vldr	s14, [r3]
 8002174:	4b62      	ldr	r3, [pc, #392]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800217e:	4b5d      	ldr	r3, [pc, #372]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 8002180:	edd3 6a00 	vldr	s13, [r3]
 8002184:	4b5d      	ldr	r3, [pc, #372]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 8002186:	edd3 7a00 	vldr	s15, [r3]
 800218a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800218e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002192:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800219a:	eeb0 0a67 	vmov.f32	s0, s15
 800219e:	f010 fe2d 	bl	8012dfc <asinf>
 80021a2:	eef0 7a40 	vmov.f32	s15, s0
 80021a6:	4b58      	ldr	r3, [pc, #352]	; (8002308 <MadgwickAHRSupdate+0x1000>)
 80021a8:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 80021ac:	4b52      	ldr	r3, [pc, #328]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 80021ae:	ed93 7a00 	vldr	s14, [r3]
 80021b2:	4b52      	ldr	r3, [pc, #328]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 80021b4:	edd3 7a00 	vldr	s15, [r3]
 80021b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021bc:	4b4d      	ldr	r3, [pc, #308]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 80021be:	edd3 6a00 	vldr	s13, [r3]
 80021c2:	4b4f      	ldr	r3, [pc, #316]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021d8:	4b46      	ldr	r3, [pc, #280]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 80021da:	ed93 6a00 	vldr	s12, [r3]
 80021de:	4b45      	ldr	r3, [pc, #276]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 80021e0:	edd3 6a00 	vldr	s13, [r3]
 80021e4:	ee26 6a26 	vmul.f32	s12, s12, s13
 80021e8:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 80021ea:	edd3 5a00 	vldr	s11, [r3]
 80021ee:	4b42      	ldr	r3, [pc, #264]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 80021f0:	edd3 6a00 	vldr	s13, [r3]
 80021f4:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021f8:	ee36 6a26 	vadd.f32	s12, s12, s13
 80021fc:	4b3f      	ldr	r3, [pc, #252]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 80021fe:	edd3 5a00 	vldr	s11, [r3]
 8002202:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 8002204:	edd3 6a00 	vldr	s13, [r3]
 8002208:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800220c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002210:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 8002212:	edd3 5a00 	vldr	s11, [r3]
 8002216:	4b3a      	ldr	r3, [pc, #232]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 8002218:	edd3 6a00 	vldr	s13, [r3]
 800221c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002220:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002224:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002228:	eeb0 1b46 	vmov.f64	d1, d6
 800222c:	eeb0 0b47 	vmov.f64	d0, d7
 8002230:	f010 fdb6 	bl	8012da0 <atan2>
 8002234:	eeb0 7b40 	vmov.f64	d7, d0
 8002238:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800223c:	4b33      	ldr	r3, [pc, #204]	; (800230c <MadgwickAHRSupdate+0x1004>)
 800223e:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002242:	4b30      	ldr	r3, [pc, #192]	; (8002304 <MadgwickAHRSupdate+0xffc>)
 8002244:	edd3 7a00 	vldr	s15, [r3]
 8002248:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002310 <MadgwickAHRSupdate+0x1008>
 800224c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002250:	4b2c      	ldr	r3, [pc, #176]	; (8002304 <MadgwickAHRSupdate+0xffc>)
 8002252:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002256:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <MadgwickAHRSupdate+0x1000>)
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002310 <MadgwickAHRSupdate+0x1008>
 8002260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002264:	4b28      	ldr	r3, [pc, #160]	; (8002308 <MadgwickAHRSupdate+0x1000>)
 8002266:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 800226a:	4b28      	ldr	r3, [pc, #160]	; (800230c <MadgwickAHRSupdate+0x1004>)
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002310 <MadgwickAHRSupdate+0x1008>
 8002274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002278:	4b24      	ldr	r3, [pc, #144]	; (800230c <MadgwickAHRSupdate+0x1004>)
 800227a:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 800227e:	4b21      	ldr	r3, [pc, #132]	; (8002304 <MadgwickAHRSupdate+0xffc>)
 8002280:	ed93 7a00 	vldr	s14, [r3]
 8002284:	4b23      	ldr	r3, [pc, #140]	; (8002314 <MadgwickAHRSupdate+0x100c>)
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800228e:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <MadgwickAHRSupdate+0xffc>)
 8002290:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002294:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <MadgwickAHRSupdate+0x1000>)
 8002296:	ed93 7a00 	vldr	s14, [r3]
 800229a:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <MadgwickAHRSupdate+0x1010>)
 800229c:	edd3 7a00 	vldr	s15, [r3]
 80022a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a4:	4b18      	ldr	r3, [pc, #96]	; (8002308 <MadgwickAHRSupdate+0x1000>)
 80022a6:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <MadgwickAHRSupdate+0x1004>)
 80022ac:	ed93 7a00 	vldr	s14, [r3]
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <MadgwickAHRSupdate+0x1014>)
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ba:	4b14      	ldr	r3, [pc, #80]	; (800230c <MadgwickAHRSupdate+0x1004>)
 80022bc:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <MadgwickAHRSupdate+0x1004>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ce:	d509      	bpl.n	80022e4 <MadgwickAHRSupdate+0xfdc>
	{
		System_Yaw = 360.0f + System_Yaw;
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <MadgwickAHRSupdate+0x1004>)
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002320 <MadgwickAHRSupdate+0x1018>
 80022da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <MadgwickAHRSupdate+0x1004>)
 80022e0:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80022e4:	37b8      	adds	r7, #184	; 0xb8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	24000010 	.word	0x24000010
 80022f0:	3b03126f 	.word	0x3b03126f
 80022f4:	24000014 	.word	0x24000014
 80022f8:	24000218 	.word	0x24000218
 80022fc:	2400021c 	.word	0x2400021c
 8002300:	24000220 	.word	0x24000220
 8002304:	240002f8 	.word	0x240002f8
 8002308:	240002fc 	.word	0x240002fc
 800230c:	240002f4 	.word	0x240002f4
 8002310:	42652ee1 	.word	0x42652ee1
 8002314:	24000224 	.word	0x24000224
 8002318:	24000228 	.word	0x24000228
 800231c:	2400022c 	.word	0x2400022c
 8002320:	43b40000 	.word	0x43b40000

08002324 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b09c      	sub	sp, #112	; 0x70
 8002328:	af00      	add	r7, sp, #0
 800232a:	ed87 0a05 	vstr	s0, [r7, #20]
 800232e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002332:	ed87 1a03 	vstr	s2, [r7, #12]
 8002336:	edc7 1a02 	vstr	s3, [r7, #8]
 800233a:	ed87 2a01 	vstr	s4, [r7, #4]
 800233e:	edc7 2a00 	vstr	s5, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002342:	4bee      	ldr	r3, [pc, #952]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	eeb1 7a67 	vneg.f32	s14, s15
 800234c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002350:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002354:	4bea      	ldr	r3, [pc, #936]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 8002356:	edd3 6a00 	vldr	s13, [r3]
 800235a:	edd7 7a04 	vldr	s15, [r7, #16]
 800235e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002362:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002366:	4be7      	ldr	r3, [pc, #924]	; (8002704 <MadgwickAHRSupdateIMU+0x3e0>)
 8002368:	edd3 6a00 	vldr	s13, [r3]
 800236c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002370:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002378:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800237c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002380:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002384:	4be0      	ldr	r3, [pc, #896]	; (8002708 <MadgwickAHRSupdateIMU+0x3e4>)
 8002386:	ed93 7a00 	vldr	s14, [r3]
 800238a:	edd7 7a05 	vldr	s15, [r7, #20]
 800238e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002392:	4bdb      	ldr	r3, [pc, #876]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 8002394:	edd3 6a00 	vldr	s13, [r3]
 8002398:	edd7 7a03 	vldr	s15, [r7, #12]
 800239c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a4:	4bd7      	ldr	r3, [pc, #860]	; (8002704 <MadgwickAHRSupdateIMU+0x3e0>)
 80023a6:	edd3 6a00 	vldr	s13, [r3]
 80023aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023be:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80023c2:	4bd1      	ldr	r3, [pc, #836]	; (8002708 <MadgwickAHRSupdateIMU+0x3e4>)
 80023c4:	ed93 7a00 	vldr	s14, [r3]
 80023c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023d0:	4bca      	ldr	r3, [pc, #808]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 80023d2:	edd3 6a00 	vldr	s13, [r3]
 80023d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80023da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023e2:	4bc8      	ldr	r3, [pc, #800]	; (8002704 <MadgwickAHRSupdateIMU+0x3e0>)
 80023e4:	edd3 6a00 	vldr	s13, [r3]
 80023e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80023ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023fc:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002400:	4bc1      	ldr	r3, [pc, #772]	; (8002708 <MadgwickAHRSupdateIMU+0x3e4>)
 8002402:	ed93 7a00 	vldr	s14, [r3]
 8002406:	edd7 7a03 	vldr	s15, [r7, #12]
 800240a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800240e:	4bbb      	ldr	r3, [pc, #748]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 8002410:	edd3 6a00 	vldr	s13, [r3]
 8002414:	edd7 7a04 	vldr	s15, [r7, #16]
 8002418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800241c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002420:	4bb7      	ldr	r3, [pc, #732]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 8002422:	edd3 6a00 	vldr	s13, [r3]
 8002426:	edd7 7a05 	vldr	s15, [r7, #20]
 800242a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800242e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002432:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800243a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800243e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002442:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	d10e      	bne.n	800246a <MadgwickAHRSupdateIMU+0x146>
 800244c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002450:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002458:	d107      	bne.n	800246a <MadgwickAHRSupdateIMU+0x146>
 800245a:	edd7 7a00 	vldr	s15, [r7]
 800245e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002466:	f000 81e5 	beq.w	8002834 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800246a:	edd7 7a02 	vldr	s15, [r7, #8]
 800246e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002472:	edd7 7a01 	vldr	s15, [r7, #4]
 8002476:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800247a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800247e:	edd7 7a00 	vldr	s15, [r7]
 8002482:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248a:	eeb0 0a67 	vmov.f32	s0, s15
 800248e:	f000 fb77 	bl	8002b80 <invSqrt>
 8002492:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8002496:	ed97 7a02 	vldr	s14, [r7, #8]
 800249a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800249e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a2:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 80024a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80024aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 80024b6:	ed97 7a00 	vldr	s14, [r7]
 80024ba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80024be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c2:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80024c6:	4b90      	ldr	r3, [pc, #576]	; (8002708 <MadgwickAHRSupdateIMU+0x3e4>)
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024d0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 80024d4:	4b89      	ldr	r3, [pc, #548]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 80024d6:	edd3 7a00 	vldr	s15, [r3]
 80024da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024de:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 80024e2:	4b87      	ldr	r3, [pc, #540]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024ec:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 80024f0:	4b84      	ldr	r3, [pc, #528]	; (8002704 <MadgwickAHRSupdateIMU+0x3e0>)
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024fa:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 80024fe:	4b82      	ldr	r3, [pc, #520]	; (8002708 <MadgwickAHRSupdateIMU+0x3e4>)
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8002510:	4b7a      	ldr	r3, [pc, #488]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800251a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800251e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 8002522:	4b77      	ldr	r3, [pc, #476]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800252c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002530:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8002534:	4b71      	ldr	r3, [pc, #452]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800253e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002542:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 8002546:	4b6e      	ldr	r3, [pc, #440]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002554:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8002558:	4b6b      	ldr	r3, [pc, #428]	; (8002708 <MadgwickAHRSupdateIMU+0x3e4>)
 800255a:	ed93 7a00 	vldr	s14, [r3]
 800255e:	4b6a      	ldr	r3, [pc, #424]	; (8002708 <MadgwickAHRSupdateIMU+0x3e4>)
 8002560:	edd3 7a00 	vldr	s15, [r3]
 8002564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002568:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 800256c:	4b63      	ldr	r3, [pc, #396]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 800256e:	ed93 7a00 	vldr	s14, [r3]
 8002572:	4b62      	ldr	r3, [pc, #392]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8002580:	4b5f      	ldr	r3, [pc, #380]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 8002582:	ed93 7a00 	vldr	s14, [r3]
 8002586:	4b5e      	ldr	r3, [pc, #376]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002590:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8002594:	4b5b      	ldr	r3, [pc, #364]	; (8002704 <MadgwickAHRSupdateIMU+0x3e0>)
 8002596:	ed93 7a00 	vldr	s14, [r3]
 800259a:	4b5a      	ldr	r3, [pc, #360]	; (8002704 <MadgwickAHRSupdateIMU+0x3e0>)
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80025a8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80025ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025b4:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80025b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80025bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025c4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80025c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025d4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80025d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80025e8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80025ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80025f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80025fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002600:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002604:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002608:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800260c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002610:	4b3a      	ldr	r3, [pc, #232]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800261e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002622:	edd7 7a01 	vldr	s15, [r7, #4]
 8002626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800262e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002632:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002636:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800263a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800263e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002642:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002646:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800264a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800264e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002652:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002656:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800265a:	edd7 7a00 	vldr	s15, [r7]
 800265e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002666:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800266a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800266e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002672:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002676:	4b22      	ldr	r3, [pc, #136]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002680:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002684:	edd7 7a02 	vldr	s15, [r7, #8]
 8002688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800268c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002690:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002694:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800269c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026a0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80026a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80026a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026b0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80026b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026b8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80026bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80026cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d8:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80026dc:	edd7 7a00 	vldr	s15, [r7]
 80026e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026e8:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80026ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026f0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80026f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026f8:	e008      	b.n	800270c <MadgwickAHRSupdateIMU+0x3e8>
 80026fa:	bf00      	nop
 80026fc:	24000218 	.word	0x24000218
 8002700:	2400021c 	.word	0x2400021c
 8002704:	24000220 	.word	0x24000220
 8002708:	24000014 	.word	0x24000014
 800270c:	4be0      	ldr	r3, [pc, #896]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002716:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800271a:	edd7 7a02 	vldr	s15, [r7, #8]
 800271e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002722:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002726:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800272a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800272e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002732:	4bd7      	ldr	r3, [pc, #860]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800273c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002740:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002744:	edd7 7a01 	vldr	s15, [r7, #4]
 8002748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002750:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002754:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002758:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800275c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002760:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002768:	edd7 7a07 	vldr	s15, [r7, #28]
 800276c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002774:	edd7 7a06 	vldr	s15, [r7, #24]
 8002778:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800277c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002780:	eeb0 0a67 	vmov.f32	s0, s15
 8002784:	f000 f9fc 	bl	8002b80 <invSqrt>
 8002788:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 800278c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002790:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002798:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 800279c:	ed97 7a08 	vldr	s14, [r7, #32]
 80027a0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80027a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a8:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 80027ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80027b0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80027b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b8:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 80027bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80027c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80027c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c8:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 80027cc:	4bb1      	ldr	r3, [pc, #708]	; (8002a94 <MadgwickAHRSupdateIMU+0x770>)
 80027ce:	ed93 7a00 	vldr	s14, [r3]
 80027d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027da:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80027de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 80027e6:	4bab      	ldr	r3, [pc, #684]	; (8002a94 <MadgwickAHRSupdateIMU+0x770>)
 80027e8:	ed93 7a00 	vldr	s14, [r3]
 80027ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80027f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f4:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80027f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027fc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8002800:	4ba4      	ldr	r3, [pc, #656]	; (8002a94 <MadgwickAHRSupdateIMU+0x770>)
 8002802:	ed93 7a00 	vldr	s14, [r3]
 8002806:	edd7 7a07 	vldr	s15, [r7, #28]
 800280a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002816:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 800281a:	4b9e      	ldr	r3, [pc, #632]	; (8002a94 <MadgwickAHRSupdateIMU+0x770>)
 800281c:	ed93 7a00 	vldr	s14, [r3]
 8002820:	edd7 7a06 	vldr	s15, [r7, #24]
 8002824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002828:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800282c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002830:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002834:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002838:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8002a98 <MadgwickAHRSupdateIMU+0x774>
 800283c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002840:	4b96      	ldr	r3, [pc, #600]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 8002842:	edd3 7a00 	vldr	s15, [r3]
 8002846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800284a:	4b94      	ldr	r3, [pc, #592]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 800284c:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002850:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002854:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002a98 <MadgwickAHRSupdateIMU+0x774>
 8002858:	ee27 7a87 	vmul.f32	s14, s15, s14
 800285c:	4b90      	ldr	r3, [pc, #576]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002866:	4b8e      	ldr	r3, [pc, #568]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 8002868:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 800286c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002870:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002a98 <MadgwickAHRSupdateIMU+0x774>
 8002874:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002878:	4b8a      	ldr	r3, [pc, #552]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 800287a:	edd3 7a00 	vldr	s15, [r3]
 800287e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002882:	4b88      	ldr	r3, [pc, #544]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 8002884:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002888:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800288c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002a98 <MadgwickAHRSupdateIMU+0x774>
 8002890:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002894:	4b7e      	ldr	r3, [pc, #504]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 8002896:	edd3 7a00 	vldr	s15, [r3]
 800289a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289e:	4b7c      	ldr	r3, [pc, #496]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 80028a0:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80028a4:	4b7d      	ldr	r3, [pc, #500]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 80028a6:	ed93 7a00 	vldr	s14, [r3]
 80028aa:	4b7c      	ldr	r3, [pc, #496]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b4:	4b7a      	ldr	r3, [pc, #488]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 80028b6:	edd3 6a00 	vldr	s13, [r3]
 80028ba:	4b79      	ldr	r3, [pc, #484]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028c8:	4b76      	ldr	r3, [pc, #472]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 80028ca:	edd3 6a00 	vldr	s13, [r3]
 80028ce:	4b75      	ldr	r3, [pc, #468]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 80028d0:	edd3 7a00 	vldr	s15, [r3]
 80028d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028dc:	4b6c      	ldr	r3, [pc, #432]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 80028de:	edd3 6a00 	vldr	s13, [r3]
 80028e2:	4b6b      	ldr	r3, [pc, #428]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f0:	eeb0 0a67 	vmov.f32	s0, s15
 80028f4:	f000 f944 	bl	8002b80 <invSqrt>
 80028f8:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 80028fc:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 80028fe:	ed93 7a00 	vldr	s14, [r3]
 8002902:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290a:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 800290c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002910:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 8002912:	ed93 7a00 	vldr	s14, [r3]
 8002916:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800291a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800291e:	4b60      	ldr	r3, [pc, #384]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 8002920:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002924:	4b5f      	ldr	r3, [pc, #380]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 8002926:	ed93 7a00 	vldr	s14, [r3]
 800292a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800292e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002932:	4b5c      	ldr	r3, [pc, #368]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 8002934:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002938:	4b55      	ldr	r3, [pc, #340]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 800293a:	ed93 7a00 	vldr	s14, [r3]
 800293e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002946:	4b52      	ldr	r3, [pc, #328]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 8002948:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 800294c:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 800294e:	ed93 7a00 	vldr	s14, [r3]
 8002952:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	ee27 7a27 	vmul.f32	s14, s14, s15
 800295c:	4b51      	ldr	r3, [pc, #324]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 800295e:	edd3 6a00 	vldr	s13, [r3]
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002970:	4b4b      	ldr	r3, [pc, #300]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 8002972:	ed93 7a00 	vldr	s14, [r3]
 8002976:	4b4a      	ldr	r3, [pc, #296]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002980:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002988:	4b46      	ldr	r3, [pc, #280]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 800298a:	edd3 6a00 	vldr	s13, [r3]
 800298e:	4b45      	ldr	r3, [pc, #276]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299c:	eef0 0a67 	vmov.f32	s1, s15
 80029a0:	eeb0 0a46 	vmov.f32	s0, s12
 80029a4:	f010 fa5c 	bl	8012e60 <atan2f>
 80029a8:	eef0 7a40 	vmov.f32	s15, s0
 80029ac:	4b3e      	ldr	r3, [pc, #248]	; (8002aa8 <MadgwickAHRSupdateIMU+0x784>)
 80029ae:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 80029b2:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 80029b4:	ed93 7a00 	vldr	s14, [r3]
 80029b8:	4b35      	ldr	r3, [pc, #212]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c2:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 80029c4:	edd3 6a00 	vldr	s13, [r3]
 80029c8:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 80029ca:	edd3 7a00 	vldr	s15, [r3]
 80029ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d6:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80029da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029de:	eeb0 0a67 	vmov.f32	s0, s15
 80029e2:	f010 fa0b 	bl	8012dfc <asinf>
 80029e6:	eef0 7a40 	vmov.f32	s15, s0
 80029ea:	4b30      	ldr	r3, [pc, #192]	; (8002aac <MadgwickAHRSupdateIMU+0x788>)
 80029ec:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 80029f0:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 80029f2:	ed93 7a00 	vldr	s14, [r3]
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 80029f8:	edd3 7a00 	vldr	s15, [r3]
 80029fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a00:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 8002a02:	edd3 6a00 	vldr	s13, [r3]
 8002a06:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 8002a1e:	ed93 6a00 	vldr	s12, [r3]
 8002a22:	4b1e      	ldr	r3, [pc, #120]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 8002a24:	edd3 6a00 	vldr	s13, [r3]
 8002a28:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 8002a2e:	edd3 5a00 	vldr	s11, [r3]
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 8002a34:	edd3 6a00 	vldr	s13, [r3]
 8002a38:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a3c:	ee36 6a26 	vadd.f32	s12, s12, s13
 8002a40:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 8002a42:	edd3 5a00 	vldr	s11, [r3]
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 8002a48:	edd3 6a00 	vldr	s13, [r3]
 8002a4c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a50:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002a54:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 8002a56:	edd3 5a00 	vldr	s11, [r3]
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 8002a5c:	edd3 6a00 	vldr	s13, [r3]
 8002a60:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a64:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002a68:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002a6c:	eeb0 1b46 	vmov.f64	d1, d6
 8002a70:	eeb0 0b47 	vmov.f64	d0, d7
 8002a74:	f010 f994 	bl	8012da0 <atan2>
 8002a78:	eeb0 7b40 	vmov.f64	d7, d0
 8002a7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <MadgwickAHRSupdateIMU+0x78c>)
 8002a82:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <MadgwickAHRSupdateIMU+0x784>)
 8002a88:	edd3 7a00 	vldr	s15, [r3]
 8002a8c:	e014      	b.n	8002ab8 <MadgwickAHRSupdateIMU+0x794>
 8002a8e:	bf00      	nop
 8002a90:	24000220 	.word	0x24000220
 8002a94:	24000010 	.word	0x24000010
 8002a98:	3b03126f 	.word	0x3b03126f
 8002a9c:	24000014 	.word	0x24000014
 8002aa0:	24000218 	.word	0x24000218
 8002aa4:	2400021c 	.word	0x2400021c
 8002aa8:	240002f8 	.word	0x240002f8
 8002aac:	240002fc 	.word	0x240002fc
 8002ab0:	240002f4 	.word	0x240002f4
 8002ab4:	42652ee1 	.word	0x42652ee1
 8002ab8:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002ab4 <MadgwickAHRSupdateIMU+0x790>
 8002abc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <MadgwickAHRSupdateIMU+0x83c>)
 8002ac2:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002ac6:	4b27      	ldr	r3, [pc, #156]	; (8002b64 <MadgwickAHRSupdateIMU+0x840>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002b68 <MadgwickAHRSupdateIMU+0x844>
 8002ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <MadgwickAHRSupdateIMU+0x840>)
 8002ad6:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <MadgwickAHRSupdateIMU+0x848>)
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002b68 <MadgwickAHRSupdateIMU+0x844>
 8002ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae8:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <MadgwickAHRSupdateIMU+0x848>)
 8002aea:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 8002aee:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <MadgwickAHRSupdateIMU+0x83c>)
 8002af0:	ed93 7a00 	vldr	s14, [r3]
 8002af4:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <MadgwickAHRSupdateIMU+0x84c>)
 8002af6:	edd3 7a00 	vldr	s15, [r3]
 8002afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002afe:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <MadgwickAHRSupdateIMU+0x83c>)
 8002b00:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <MadgwickAHRSupdateIMU+0x840>)
 8002b06:	ed93 7a00 	vldr	s14, [r3]
 8002b0a:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <MadgwickAHRSupdateIMU+0x850>)
 8002b0c:	edd3 7a00 	vldr	s15, [r3]
 8002b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <MadgwickAHRSupdateIMU+0x840>)
 8002b16:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 8002b1a:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <MadgwickAHRSupdateIMU+0x848>)
 8002b1c:	ed93 7a00 	vldr	s14, [r3]
 8002b20:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <MadgwickAHRSupdateIMU+0x854>)
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <MadgwickAHRSupdateIMU+0x848>)
 8002b2c:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002b30:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <MadgwickAHRSupdateIMU+0x848>)
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3e:	d400      	bmi.n	8002b42 <MadgwickAHRSupdateIMU+0x81e>
	{
		System_Yaw = 360.0f + System_Yaw;
	}
}
 8002b40:	e009      	b.n	8002b56 <MadgwickAHRSupdateIMU+0x832>
		System_Yaw = 360.0f + System_Yaw;
 8002b42:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <MadgwickAHRSupdateIMU+0x848>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002b7c <MadgwickAHRSupdateIMU+0x858>
 8002b4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <MadgwickAHRSupdateIMU+0x848>)
 8002b52:	edc3 7a00 	vstr	s15, [r3]
}
 8002b56:	bf00      	nop
 8002b58:	3770      	adds	r7, #112	; 0x70
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	240002f8 	.word	0x240002f8
 8002b64:	240002fc 	.word	0x240002fc
 8002b68:	42652ee1 	.word	0x42652ee1
 8002b6c:	240002f4 	.word	0x240002f4
 8002b70:	24000224 	.word	0x24000224
 8002b74:	24000228 	.word	0x24000228
 8002b78:	2400022c 	.word	0x2400022c
 8002b7c:	43b40000 	.word	0x43b40000

08002b80 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002b8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b96:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002b9e:	f107 0310 	add.w	r3, r7, #16
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	105a      	asrs	r2, r3, #1
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <invSqrt+0x74>)
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002bb0:	f107 030c 	add.w	r3, r7, #12
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002bb8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bcc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002bd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bdc:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	ee07 3a90 	vmov	s15, r3
}
 8002be6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bea:	371c      	adds	r7, #28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	5f3759df 	.word	0x5f3759df

08002bf8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	4803      	ldr	r0, [pc, #12]	; (8002c1c <_write+0x24>)
 8002c0e:	f00b fabf 	bl	800e190 <HAL_UART_Transmit_DMA>
}
 8002c12:	bf00      	nop
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	2400043c 	.word	0x2400043c

08002c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c24:	b088      	sub	sp, #32
 8002c26:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c28:	f001 fe7c 	bl	8004924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c2c:	f000 f9b4 	bl	8002f98 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002c30:	f000 fa30 	bl	8003094 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c34:	f000 fbde 	bl	80033f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c38:	f000 fbac 	bl	8003394 <MX_DMA_Init>
  MX_TIM7_Init();
 8002c3c:	f000 fadc 	bl	80031f8 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002c40:	f000 fb10 	bl	8003264 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002c44:	f000 fa42 	bl	80030cc <MX_I2C1_Init>
  MX_SPI1_Init();
 8002c48:	f000 fa80 	bl	800314c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002c4c:	f000 fb56 	bl	80032fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim7);
 8002c50:	48b8      	ldr	r0, [pc, #736]	; (8002f34 <main+0x314>)
 8002c52:	f00a ff0f 	bl	800da74 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8002c56:	2201      	movs	r2, #1
 8002c58:	49b7      	ldr	r1, [pc, #732]	; (8002f38 <main+0x318>)
 8002c5a:	48b8      	ldr	r0, [pc, #736]	; (8002f3c <main+0x31c>)
 8002c5c:	f00b fa52 	bl	800e104 <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&huart2, &ibus_rx_buf[0], 32);
 8002c60:	2220      	movs	r2, #32
 8002c62:	49b7      	ldr	r1, [pc, #732]	; (8002f40 <main+0x320>)
 8002c64:	48b7      	ldr	r0, [pc, #732]	; (8002f44 <main+0x324>)
 8002c66:	f00b fb13 	bl	800e290 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//Receiver Check
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 8002c6a:	e007      	b.n	8002c7c <main+0x5c>
	{
		HAL_Delay(500);
 8002c6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c70:	f001 feea 	bl	8004a48 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8002c74:	2102      	movs	r1, #2
 8002c76:	48b4      	ldr	r0, [pc, #720]	; (8002f48 <main+0x328>)
 8002c78:	f005 f843 	bl	8007d02 <HAL_GPIO_TogglePin>
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 8002c7c:	4bb3      	ldr	r3, [pc, #716]	; (8002f4c <main+0x32c>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f001 f8c1 	bl	8003e08 <Is_iBus_Received>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ef      	beq.n	8002c6c <main+0x4c>
	}

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002c8c:	e009      	b.n	8002ca2 <main+0x82>
	{
		if(tim1_20ms_flag == 1)
 8002c8e:	4bb0      	ldr	r3, [pc, #704]	; (8002f50 <main+0x330>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d105      	bne.n	8002ca2 <main+0x82>
		{
			tim1_20ms_flag = 0;
 8002c96:	4bae      	ldr	r3, [pc, #696]	; (8002f50 <main+0x330>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialing \n");
 8002c9c:	48ad      	ldr	r0, [pc, #692]	; (8002f54 <main+0x334>)
 8002c9e:	f00e f87b 	bl	8010d98 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	2203      	movs	r2, #3
 8002caa:	2103      	movs	r1, #3
 8002cac:	48aa      	ldr	r0, [pc, #680]	; (8002f58 <main+0x338>)
 8002cae:	f7fd fdd7 	bl	8000860 <MPU9250_Init>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ea      	beq.n	8002c8e <main+0x6e>
		}
	}
	MPU9250_Bypass(&hi2c1);
 8002cb8:	48a7      	ldr	r0, [pc, #668]	; (8002f58 <main+0x338>)
 8002cba:	f7fd feb9 	bl	8000a30 <MPU9250_Bypass>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002cbe:	e009      	b.n	8002cd4 <main+0xb4>
	{
		if(tim1_20ms_flag == 1)
 8002cc0:	4ba3      	ldr	r3, [pc, #652]	; (8002f50 <main+0x330>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d105      	bne.n	8002cd4 <main+0xb4>
		{
			tim1_20ms_flag = 0;
 8002cc8:	4ba1      	ldr	r3, [pc, #644]	; (8002f50 <main+0x330>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialing \n");
 8002cce:	48a3      	ldr	r0, [pc, #652]	; (8002f5c <main+0x33c>)
 8002cd0:	f00e f862 	bl	8010d98 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002cd4:	49a2      	ldr	r1, [pc, #648]	; (8002f60 <main+0x340>)
 8002cd6:	48a0      	ldr	r0, [pc, #640]	; (8002f58 <main+0x338>)
 8002cd8:	f7fd ff2a 	bl	8000b30 <MPU9250_AK8963_Setup>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0ee      	beq.n	8002cc0 <main+0xa0>
		}
	}
	MPU9250_Master(&hi2c1);
 8002ce2:	489d      	ldr	r0, [pc, #628]	; (8002f58 <main+0x338>)
 8002ce4:	f7fd fed2 	bl	8000a8c <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 8002ce8:	489b      	ldr	r0, [pc, #620]	; (8002f58 <main+0x338>)
 8002cea:	f7fd ff8b 	bl	8000c04 <MPU9250_Slave0_Enable>


	//Initialize MS5611

	//EEPROM
	W25qxx_Init();
 8002cee:	f001 fae9 	bl	80042c4 <W25qxx_Init>
	W25qxx_ReadSector(Mag_Calib, 0, 0, 12);
 8002cf2:	230c      	movs	r3, #12
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	489a      	ldr	r0, [pc, #616]	; (8002f64 <main+0x344>)
 8002cfa:	f001 fd87 	bl	800480c <W25qxx_ReadSector>
	MPU9250.Mx_Offset = *(float*)&Mag_Calib[0];
 8002cfe:	4b99      	ldr	r3, [pc, #612]	; (8002f64 <main+0x344>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a97      	ldr	r2, [pc, #604]	; (8002f60 <main+0x340>)
 8002d04:	65d3      	str	r3, [r2, #92]	; 0x5c
	MPU9250.My_Offset = *(float*)&Mag_Calib[4];
 8002d06:	4b98      	ldr	r3, [pc, #608]	; (8002f68 <main+0x348>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a95      	ldr	r2, [pc, #596]	; (8002f60 <main+0x340>)
 8002d0c:	6613      	str	r3, [r2, #96]	; 0x60
	MPU9250.Mz_Offset = *(float*)&Mag_Calib[8];
 8002d0e:	4b97      	ldr	r3, [pc, #604]	; (8002f6c <main+0x34c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a93      	ldr	r2, [pc, #588]	; (8002f60 <main+0x340>)
 8002d14:	6653      	str	r3, [r2, #100]	; 0x64

	while (1)
	{
		Receive_Command();
 8002d16:	f001 f81f 	bl	8003d58 <Receive_Command>
		Compass_Calibration(mag_calibration_enable);
 8002d1a:	4b95      	ldr	r3, [pc, #596]	; (8002f70 <main+0x350>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fbd0 	bl	80034c4 <Compass_Calibration>

		Is_iBus_Received(ibus_rx_cplt_flag);
 8002d24:	4b89      	ldr	r3, [pc, #548]	; (8002f4c <main+0x32c>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f001 f86d 	bl	8003e08 <Is_iBus_Received>

		//Read MPU9250 + Motor Control
		if(tim1_2ms_flag == 1)
 8002d2e:	4b91      	ldr	r3, [pc, #580]	; (8002f74 <main+0x354>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d133      	bne.n	8002d9e <main+0x17e>
		{
			tim1_2ms_flag = 0;
 8002d36:	4b8f      	ldr	r3, [pc, #572]	; (8002f74 <main+0x354>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
			MPU9250_Read_All(&hi2c1);
 8002d3c:	4886      	ldr	r0, [pc, #536]	; (8002f58 <main+0x338>)
 8002d3e:	f7fd ffa1 	bl	8000c84 <MPU9250_Read_All>
			MPU9250_Parsing(&MPU9250);
 8002d42:	4887      	ldr	r0, [pc, #540]	; (8002f60 <main+0x340>)
 8002d44:	f7fd ffb4 	bl	8000cb0 <MPU9250_Parsing>
			MadgwickAHRSupdate(MPU9250.Gx_Rad, MPU9250.Gy_Rad, MPU9250.Gz_Rad, MPU9250.Ax, MPU9250.Ay, MPU9250.Az, MPU9250.Mx, MPU9250.My, MPU9250.Mz);
 8002d48:	4b85      	ldr	r3, [pc, #532]	; (8002f60 <main+0x340>)
 8002d4a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d4e:	4b84      	ldr	r3, [pc, #528]	; (8002f60 <main+0x340>)
 8002d50:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002d54:	4b82      	ldr	r3, [pc, #520]	; (8002f60 <main+0x340>)
 8002d56:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002d5a:	4b81      	ldr	r3, [pc, #516]	; (8002f60 <main+0x340>)
 8002d5c:	ed93 6a02 	vldr	s12, [r3, #8]
 8002d60:	4b7f      	ldr	r3, [pc, #508]	; (8002f60 <main+0x340>)
 8002d62:	edd3 5a03 	vldr	s11, [r3, #12]
 8002d66:	4b7e      	ldr	r3, [pc, #504]	; (8002f60 <main+0x340>)
 8002d68:	ed93 5a04 	vldr	s10, [r3, #16]
 8002d6c:	4b7c      	ldr	r3, [pc, #496]	; (8002f60 <main+0x340>)
 8002d6e:	edd3 4a1a 	vldr	s9, [r3, #104]	; 0x68
 8002d72:	4b7b      	ldr	r3, [pc, #492]	; (8002f60 <main+0x340>)
 8002d74:	edd3 3a1b 	vldr	s7, [r3, #108]	; 0x6c
 8002d78:	4b79      	ldr	r3, [pc, #484]	; (8002f60 <main+0x340>)
 8002d7a:	ed93 4a1c 	vldr	s8, [r3, #112]	; 0x70
 8002d7e:	eeb0 3a64 	vmov.f32	s6, s9
 8002d82:	eef0 2a45 	vmov.f32	s5, s10
 8002d86:	eeb0 2a65 	vmov.f32	s4, s11
 8002d8a:	eef0 1a46 	vmov.f32	s3, s12
 8002d8e:	eeb0 1a66 	vmov.f32	s2, s13
 8002d92:	eef0 0a47 	vmov.f32	s1, s14
 8002d96:	eeb0 0a67 	vmov.f32	s0, s15
 8002d9a:	f7fe fab5 	bl	8001308 <MadgwickAHRSupdate>
		}

		//Print According to the Input
		if(tim1_20ms_flag == 1)
 8002d9e:	4b6c      	ldr	r3, [pc, #432]	; (8002f50 <main+0x330>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	f040 80c2 	bne.w	8002f2c <main+0x30c>
		{
			tim1_20ms_flag = 0;
 8002da8:	4b69      	ldr	r3, [pc, #420]	; (8002f50 <main+0x330>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]

			switch(print_mode)
 8002dae:	4b72      	ldr	r3, [pc, #456]	; (8002f78 <main+0x358>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	2b06      	cmp	r3, #6
 8002db6:	f200 80bb 	bhi.w	8002f30 <main+0x310>
 8002dba:	a201      	add	r2, pc, #4	; (adr r2, 8002dc0 <main+0x1a0>)
 8002dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc0:	08002ddd 	.word	0x08002ddd
 8002dc4:	08002f31 	.word	0x08002f31
 8002dc8:	08002e0f 	.word	0x08002e0f
 8002dcc:	08002e41 	.word	0x08002e41
 8002dd0:	08002e73 	.word	0x08002e73
 8002dd4:	08002ea5 	.word	0x08002ea5
 8002dd8:	08002ed7 	.word	0x08002ed7
			{
			case 1: printf("%.2f \t %.2f \t %.2f \t \n", System_Roll, System_Pitch, System_Yaw); break; //Roll, Pitch, Yaw
 8002ddc:	4b67      	ldr	r3, [pc, #412]	; (8002f7c <main+0x35c>)
 8002dde:	edd3 7a00 	vldr	s15, [r3]
 8002de2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002de6:	4b66      	ldr	r3, [pc, #408]	; (8002f80 <main+0x360>)
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002df0:	4b64      	ldr	r3, [pc, #400]	; (8002f84 <main+0x364>)
 8002df2:	edd3 6a00 	vldr	s13, [r3]
 8002df6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002dfa:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002dfe:	ed8d 7b00 	vstr	d7, [sp]
 8002e02:	ec53 2b15 	vmov	r2, r3, d5
 8002e06:	4860      	ldr	r0, [pc, #384]	; (8002f88 <main+0x368>)
 8002e08:	f00d ff40 	bl	8010c8c <iprintf>
 8002e0c:	e091      	b.n	8002f32 <main+0x312>
			case 2: /* printf("%.2f \t %.2f \t \m", Alt, Alt_Filt); */ break; //Alt Raw, Alt Filt
			case 3: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Gx, MPU9250.Gy, MPU9250.Gz); break; //Gyro
 8002e0e:	4b54      	ldr	r3, [pc, #336]	; (8002f60 <main+0x340>)
 8002e10:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e14:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e18:	4b51      	ldr	r3, [pc, #324]	; (8002f60 <main+0x340>)
 8002e1a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002e1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e22:	4b4f      	ldr	r3, [pc, #316]	; (8002f60 <main+0x340>)
 8002e24:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002e28:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e2c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e30:	ed8d 7b00 	vstr	d7, [sp]
 8002e34:	ec53 2b15 	vmov	r2, r3, d5
 8002e38:	4853      	ldr	r0, [pc, #332]	; (8002f88 <main+0x368>)
 8002e3a:	f00d ff27 	bl	8010c8c <iprintf>
 8002e3e:	e078      	b.n	8002f32 <main+0x312>
			case 4: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Ax, MPU9250.Ay, MPU9250.Az); break; //Accel
 8002e40:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <main+0x340>)
 8002e42:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e46:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e4a:	4b45      	ldr	r3, [pc, #276]	; (8002f60 <main+0x340>)
 8002e4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e54:	4b42      	ldr	r3, [pc, #264]	; (8002f60 <main+0x340>)
 8002e56:	edd3 6a04 	vldr	s13, [r3, #16]
 8002e5a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e5e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e62:	ed8d 7b00 	vstr	d7, [sp]
 8002e66:	ec53 2b15 	vmov	r2, r3, d5
 8002e6a:	4847      	ldr	r0, [pc, #284]	; (8002f88 <main+0x368>)
 8002e6c:	f00d ff0e 	bl	8010c8c <iprintf>
 8002e70:	e05f      	b.n	8002f32 <main+0x312>
			case 5: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Mx, MPU9250.My, MPU9250.Mz); break; //Mag
 8002e72:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <main+0x340>)
 8002e74:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002e78:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e7c:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <main+0x340>)
 8002e7e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002e82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e86:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <main+0x340>)
 8002e88:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002e8c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e90:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e94:	ed8d 7b00 	vstr	d7, [sp]
 8002e98:	ec53 2b15 	vmov	r2, r3, d5
 8002e9c:	483a      	ldr	r0, [pc, #232]	; (8002f88 <main+0x368>)
 8002e9e:	f00d fef5 	bl	8010c8c <iprintf>
 8002ea2:	e046      	b.n	8002f32 <main+0x312>
			case 6: printf("%f \t %f \t %f \t \n", MPU9250.Mx_Offset, MPU9250.My_Offset, MPU9250.Mz_Offset); break; //Mag_Offset
 8002ea4:	4b2e      	ldr	r3, [pc, #184]	; (8002f60 <main+0x340>)
 8002ea6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002eaa:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002eae:	4b2c      	ldr	r3, [pc, #176]	; (8002f60 <main+0x340>)
 8002eb0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002eb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002eb8:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <main+0x340>)
 8002eba:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8002ebe:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002ec2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002ec6:	ed8d 7b00 	vstr	d7, [sp]
 8002eca:	ec53 2b15 	vmov	r2, r3, d5
 8002ece:	482f      	ldr	r0, [pc, #188]	; (8002f8c <main+0x36c>)
 8002ed0:	f00d fedc 	bl	8010c8c <iprintf>
 8002ed4:	e02d      	b.n	8002f32 <main+0x312>
			case 7: printf("%d %d %d %d %d %d %d %d %d %d \n", iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.VrA, iBus.VrB, iBus.SwC, iBus.SwD); break; //Mag_Offset
 8002ed6:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <main+0x370>)
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	469c      	mov	ip, r3
 8002edc:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <main+0x370>)
 8002ede:	885b      	ldrh	r3, [r3, #2]
 8002ee0:	469e      	mov	lr, r3
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <main+0x370>)
 8002ee4:	889b      	ldrh	r3, [r3, #4]
 8002ee6:	4698      	mov	r8, r3
 8002ee8:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <main+0x370>)
 8002eea:	88db      	ldrh	r3, [r3, #6]
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <main+0x370>)
 8002ef0:	891b      	ldrh	r3, [r3, #8]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4b26      	ldr	r3, [pc, #152]	; (8002f90 <main+0x370>)
 8002ef6:	895b      	ldrh	r3, [r3, #10]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <main+0x370>)
 8002efc:	8a1b      	ldrh	r3, [r3, #16]
 8002efe:	461c      	mov	r4, r3
 8002f00:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <main+0x370>)
 8002f02:	8a5b      	ldrh	r3, [r3, #18]
 8002f04:	461d      	mov	r5, r3
 8002f06:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <main+0x370>)
 8002f08:	899b      	ldrh	r3, [r3, #12]
 8002f0a:	461e      	mov	r6, r3
 8002f0c:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <main+0x370>)
 8002f0e:	89db      	ldrh	r3, [r3, #14]
 8002f10:	9306      	str	r3, [sp, #24]
 8002f12:	9605      	str	r6, [sp, #20]
 8002f14:	9504      	str	r5, [sp, #16]
 8002f16:	9403      	str	r4, [sp, #12]
 8002f18:	9002      	str	r0, [sp, #8]
 8002f1a:	9101      	str	r1, [sp, #4]
 8002f1c:	9200      	str	r2, [sp, #0]
 8002f1e:	4643      	mov	r3, r8
 8002f20:	4672      	mov	r2, lr
 8002f22:	4661      	mov	r1, ip
 8002f24:	481b      	ldr	r0, [pc, #108]	; (8002f94 <main+0x374>)
 8002f26:	f00d feb1 	bl	8010c8c <iprintf>
 8002f2a:	e002      	b.n	8002f32 <main+0x312>
			default: break;
			}
		}
 8002f2c:	bf00      	nop
 8002f2e:	e6f2      	b.n	8002d16 <main+0xf6>
			default: break;
 8002f30:	bf00      	nop
	{
 8002f32:	e6f0      	b.n	8002d16 <main+0xf6>
 8002f34:	24000668 	.word	0x24000668
 8002f38:	24000235 	.word	0x24000235
 8002f3c:	2400043c 	.word	0x2400043c
 8002f40:	240006b8 	.word	0x240006b8
 8002f44:	240005cc 	.word	0x240005cc
 8002f48:	58020000 	.word	0x58020000
 8002f4c:	24000236 	.word	0x24000236
 8002f50:	24000233 	.word	0x24000233
 8002f54:	08013708 	.word	0x08013708
 8002f58:	24000378 	.word	0x24000378
 8002f5c:	0801371c 	.word	0x0801371c
 8002f60:	24000268 	.word	0x24000268
 8002f64:	2400065c 	.word	0x2400065c
 8002f68:	24000660 	.word	0x24000660
 8002f6c:	24000664 	.word	0x24000664
 8002f70:	24000231 	.word	0x24000231
 8002f74:	24000232 	.word	0x24000232
 8002f78:	24000230 	.word	0x24000230
 8002f7c:	240002f8 	.word	0x240002f8
 8002f80:	240002fc 	.word	0x240002fc
 8002f84:	240002f4 	.word	0x240002f4
 8002f88:	08013730 	.word	0x08013730
 8002f8c:	08013748 	.word	0x08013748
 8002f90:	2400024c 	.word	0x2400024c
 8002f94:	0801375c 	.word	0x0801375c

08002f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b09c      	sub	sp, #112	; 0x70
 8002f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa2:	224c      	movs	r2, #76	; 0x4c
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f00d fa26 	bl	80103f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fac:	1d3b      	adds	r3, r7, #4
 8002fae:	2220      	movs	r2, #32
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f00d fa20 	bl	80103f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002fb8:	2002      	movs	r0, #2
 8002fba:	f007 f911 	bl	800a1e0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	4b32      	ldr	r3, [pc, #200]	; (800308c <SystemClock_Config+0xf4>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	4a31      	ldr	r2, [pc, #196]	; (800308c <SystemClock_Config+0xf4>)
 8002fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fcc:	6193      	str	r3, [r2, #24]
 8002fce:	4b2f      	ldr	r3, [pc, #188]	; (800308c <SystemClock_Config+0xf4>)
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <SystemClock_Config+0xf8>)
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	4a2c      	ldr	r2, [pc, #176]	; (8003090 <SystemClock_Config+0xf8>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002fe4:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <SystemClock_Config+0xf8>)
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002ff0:	bf00      	nop
 8002ff2:	4b26      	ldr	r3, [pc, #152]	; (800308c <SystemClock_Config+0xf4>)
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffe:	d1f8      	bne.n	8002ff2 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003000:	2303      	movs	r3, #3
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003004:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800300a:	2301      	movs	r3, #1
 800300c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800300e:	2340      	movs	r3, #64	; 0x40
 8003010:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003012:	2302      	movs	r3, #2
 8003014:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003016:	2302      	movs	r3, #2
 8003018:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800301a:	2305      	movs	r3, #5
 800301c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 800301e:	23c0      	movs	r3, #192	; 0xc0
 8003020:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003022:	2302      	movs	r3, #2
 8003024:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003026:	2302      	movs	r3, #2
 8003028:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800302a:	2302      	movs	r3, #2
 800302c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800302e:	2308      	movs	r3, #8
 8003030:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003032:	2300      	movs	r3, #0
 8003034:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800303a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800303e:	4618      	mov	r0, r3
 8003040:	f007 f908 	bl	800a254 <HAL_RCC_OscConfig>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800304a:	f000 fb29 	bl	80036a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800304e:	233f      	movs	r3, #63	; 0x3f
 8003050:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003052:	2303      	movs	r3, #3
 8003054:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800305a:	2308      	movs	r3, #8
 800305c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800305e:	2340      	movs	r3, #64	; 0x40
 8003060:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003062:	2340      	movs	r3, #64	; 0x40
 8003064:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800306a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800306c:	2340      	movs	r3, #64	; 0x40
 800306e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003070:	1d3b      	adds	r3, r7, #4
 8003072:	2104      	movs	r1, #4
 8003074:	4618      	mov	r0, r3
 8003076:	f007 fcfd 	bl	800aa74 <HAL_RCC_ClockConfig>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8003080:	f000 fb0e 	bl	80036a0 <Error_Handler>
  }
}
 8003084:	bf00      	nop
 8003086:	3770      	adds	r7, #112	; 0x70
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	58024800 	.word	0x58024800
 8003090:	58000400 	.word	0x58000400

08003094 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b0b0      	sub	sp, #192	; 0xc0
 8003098:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	22bc      	movs	r2, #188	; 0xbc
 800309e:	2100      	movs	r1, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f00d f9a9 	bl	80103f8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80030a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80030aa:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80030ac:	2300      	movs	r3, #0
 80030ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030b0:	1d3b      	adds	r3, r7, #4
 80030b2:	4618      	mov	r0, r3
 80030b4:	f008 f86a 	bl	800b18c <HAL_RCCEx_PeriphCLKConfig>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 80030be:	f000 faef 	bl	80036a0 <Error_Handler>
  }
}
 80030c2:	bf00      	nop
 80030c4:	37c0      	adds	r7, #192	; 0xc0
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030d0:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <MX_I2C1_Init+0x74>)
 80030d2:	4a1c      	ldr	r2, [pc, #112]	; (8003144 <MX_I2C1_Init+0x78>)
 80030d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80030d6:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <MX_I2C1_Init+0x74>)
 80030d8:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <MX_I2C1_Init+0x7c>)
 80030da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80030dc:	4b18      	ldr	r3, [pc, #96]	; (8003140 <MX_I2C1_Init+0x74>)
 80030de:	2200      	movs	r2, #0
 80030e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <MX_I2C1_Init+0x74>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030e8:	4b15      	ldr	r3, [pc, #84]	; (8003140 <MX_I2C1_Init+0x74>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80030ee:	4b14      	ldr	r3, [pc, #80]	; (8003140 <MX_I2C1_Init+0x74>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <MX_I2C1_Init+0x74>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <MX_I2C1_Init+0x74>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003100:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <MX_I2C1_Init+0x74>)
 8003102:	2200      	movs	r2, #0
 8003104:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003106:	480e      	ldr	r0, [pc, #56]	; (8003140 <MX_I2C1_Init+0x74>)
 8003108:	f004 fe16 	bl	8007d38 <HAL_I2C_Init>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003112:	f000 fac5 	bl	80036a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003116:	2100      	movs	r1, #0
 8003118:	4809      	ldr	r0, [pc, #36]	; (8003140 <MX_I2C1_Init+0x74>)
 800311a:	f006 ffc9 	bl	800a0b0 <HAL_I2CEx_ConfigAnalogFilter>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003124:	f000 fabc 	bl	80036a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003128:	2100      	movs	r1, #0
 800312a:	4805      	ldr	r0, [pc, #20]	; (8003140 <MX_I2C1_Init+0x74>)
 800312c:	f007 f80b 	bl	800a146 <HAL_I2CEx_ConfigDigitalFilter>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003136:	f000 fab3 	bl	80036a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	24000378 	.word	0x24000378
 8003144:	40005400 	.word	0x40005400
 8003148:	00b03fdb 	.word	0x00b03fdb

0800314c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003150:	4b27      	ldr	r3, [pc, #156]	; (80031f0 <MX_SPI1_Init+0xa4>)
 8003152:	4a28      	ldr	r2, [pc, #160]	; (80031f4 <MX_SPI1_Init+0xa8>)
 8003154:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003156:	4b26      	ldr	r3, [pc, #152]	; (80031f0 <MX_SPI1_Init+0xa4>)
 8003158:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800315c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800315e:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <MX_SPI1_Init+0xa4>)
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003164:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <MX_SPI1_Init+0xa4>)
 8003166:	2207      	movs	r2, #7
 8003168:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800316a:	4b21      	ldr	r3, [pc, #132]	; (80031f0 <MX_SPI1_Init+0xa4>)
 800316c:	2200      	movs	r2, #0
 800316e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003170:	4b1f      	ldr	r3, [pc, #124]	; (80031f0 <MX_SPI1_Init+0xa4>)
 8003172:	2200      	movs	r2, #0
 8003174:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003176:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <MX_SPI1_Init+0xa4>)
 8003178:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800317c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800317e:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <MX_SPI1_Init+0xa4>)
 8003180:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003184:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003186:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <MX_SPI1_Init+0xa4>)
 8003188:	2200      	movs	r2, #0
 800318a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800318c:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <MX_SPI1_Init+0xa4>)
 800318e:	2200      	movs	r2, #0
 8003190:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003192:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <MX_SPI1_Init+0xa4>)
 8003194:	2200      	movs	r2, #0
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003198:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <MX_SPI1_Init+0xa4>)
 800319a:	2200      	movs	r2, #0
 800319c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800319e:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <MX_SPI1_Init+0xa4>)
 80031a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031a4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80031a6:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <MX_SPI1_Init+0xa4>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80031ac:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <MX_SPI1_Init+0xa4>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80031b2:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <MX_SPI1_Init+0xa4>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80031b8:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <MX_SPI1_Init+0xa4>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <MX_SPI1_Init+0xa4>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <MX_SPI1_Init+0xa4>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <MX_SPI1_Init+0xa4>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80031d0:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <MX_SPI1_Init+0xa4>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <MX_SPI1_Init+0xa4>)
 80031d8:	2200      	movs	r2, #0
 80031da:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031dc:	4804      	ldr	r0, [pc, #16]	; (80031f0 <MX_SPI1_Init+0xa4>)
 80031de:	f009 fb37 	bl	800c850 <HAL_SPI_Init>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80031e8:	f000 fa5a 	bl	80036a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	24000544 	.word	0x24000544
 80031f4:	40013000 	.word	0x40013000

080031f8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003208:	4b14      	ldr	r3, [pc, #80]	; (800325c <MX_TIM7_Init+0x64>)
 800320a:	4a15      	ldr	r2, [pc, #84]	; (8003260 <MX_TIM7_Init+0x68>)
 800320c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 800320e:	4b13      	ldr	r3, [pc, #76]	; (800325c <MX_TIM7_Init+0x64>)
 8003210:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003214:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <MX_TIM7_Init+0x64>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 800321c:	4b0f      	ldr	r3, [pc, #60]	; (800325c <MX_TIM7_Init+0x64>)
 800321e:	2205      	movs	r2, #5
 8003220:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <MX_TIM7_Init+0x64>)
 8003224:	2280      	movs	r2, #128	; 0x80
 8003226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003228:	480c      	ldr	r0, [pc, #48]	; (800325c <MX_TIM7_Init+0x64>)
 800322a:	f00a fbcc 	bl	800d9c6 <HAL_TIM_Base_Init>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003234:	f000 fa34 	bl	80036a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003238:	2300      	movs	r3, #0
 800323a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	4619      	mov	r1, r3
 8003244:	4805      	ldr	r0, [pc, #20]	; (800325c <MX_TIM7_Init+0x64>)
 8003246:	f00a fe67 	bl	800df18 <HAL_TIMEx_MasterConfigSynchronization>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003250:	f000 fa26 	bl	80036a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	24000668 	.word	0x24000668
 8003260:	40001400 	.word	0x40001400

08003264 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003268:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <MX_USART1_UART_Init+0x90>)
 800326a:	4a23      	ldr	r2, [pc, #140]	; (80032f8 <MX_USART1_UART_Init+0x94>)
 800326c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800326e:	4b21      	ldr	r3, [pc, #132]	; (80032f4 <MX_USART1_UART_Init+0x90>)
 8003270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003276:	4b1f      	ldr	r3, [pc, #124]	; (80032f4 <MX_USART1_UART_Init+0x90>)
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <MX_USART1_UART_Init+0x90>)
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003282:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <MX_USART1_UART_Init+0x90>)
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003288:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <MX_USART1_UART_Init+0x90>)
 800328a:	220c      	movs	r2, #12
 800328c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800328e:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <MX_USART1_UART_Init+0x90>)
 8003290:	2200      	movs	r2, #0
 8003292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003294:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <MX_USART1_UART_Init+0x90>)
 8003296:	2200      	movs	r2, #0
 8003298:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800329a:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <MX_USART1_UART_Init+0x90>)
 800329c:	2200      	movs	r2, #0
 800329e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032a0:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <MX_USART1_UART_Init+0x90>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032a6:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <MX_USART1_UART_Init+0x90>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032ac:	4811      	ldr	r0, [pc, #68]	; (80032f4 <MX_USART1_UART_Init+0x90>)
 80032ae:	f00a fed9 	bl	800e064 <HAL_UART_Init>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80032b8:	f000 f9f2 	bl	80036a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032bc:	2100      	movs	r1, #0
 80032be:	480d      	ldr	r0, [pc, #52]	; (80032f4 <MX_USART1_UART_Init+0x90>)
 80032c0:	f00c ffa5 	bl	801020e <HAL_UARTEx_SetTxFifoThreshold>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80032ca:	f000 f9e9 	bl	80036a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032ce:	2100      	movs	r1, #0
 80032d0:	4808      	ldr	r0, [pc, #32]	; (80032f4 <MX_USART1_UART_Init+0x90>)
 80032d2:	f00c ffda 	bl	801028a <HAL_UARTEx_SetRxFifoThreshold>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80032dc:	f000 f9e0 	bl	80036a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80032e0:	4804      	ldr	r0, [pc, #16]	; (80032f4 <MX_USART1_UART_Init+0x90>)
 80032e2:	f00c ff5b 	bl	801019c <HAL_UARTEx_DisableFifoMode>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80032ec:	f000 f9d8 	bl	80036a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032f0:	bf00      	nop
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	2400043c 	.word	0x2400043c
 80032f8:	40011000 	.word	0x40011000

080032fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003300:	4b22      	ldr	r3, [pc, #136]	; (800338c <MX_USART2_UART_Init+0x90>)
 8003302:	4a23      	ldr	r2, [pc, #140]	; (8003390 <MX_USART2_UART_Init+0x94>)
 8003304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003306:	4b21      	ldr	r3, [pc, #132]	; (800338c <MX_USART2_UART_Init+0x90>)
 8003308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800330c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800330e:	4b1f      	ldr	r3, [pc, #124]	; (800338c <MX_USART2_UART_Init+0x90>)
 8003310:	2200      	movs	r2, #0
 8003312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <MX_USART2_UART_Init+0x90>)
 8003316:	2200      	movs	r2, #0
 8003318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800331a:	4b1c      	ldr	r3, [pc, #112]	; (800338c <MX_USART2_UART_Init+0x90>)
 800331c:	2200      	movs	r2, #0
 800331e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003320:	4b1a      	ldr	r3, [pc, #104]	; (800338c <MX_USART2_UART_Init+0x90>)
 8003322:	220c      	movs	r2, #12
 8003324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003326:	4b19      	ldr	r3, [pc, #100]	; (800338c <MX_USART2_UART_Init+0x90>)
 8003328:	2200      	movs	r2, #0
 800332a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800332c:	4b17      	ldr	r3, [pc, #92]	; (800338c <MX_USART2_UART_Init+0x90>)
 800332e:	2200      	movs	r2, #0
 8003330:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003332:	4b16      	ldr	r3, [pc, #88]	; (800338c <MX_USART2_UART_Init+0x90>)
 8003334:	2200      	movs	r2, #0
 8003336:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003338:	4b14      	ldr	r3, [pc, #80]	; (800338c <MX_USART2_UART_Init+0x90>)
 800333a:	2200      	movs	r2, #0
 800333c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800333e:	4b13      	ldr	r3, [pc, #76]	; (800338c <MX_USART2_UART_Init+0x90>)
 8003340:	2200      	movs	r2, #0
 8003342:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003344:	4811      	ldr	r0, [pc, #68]	; (800338c <MX_USART2_UART_Init+0x90>)
 8003346:	f00a fe8d 	bl	800e064 <HAL_UART_Init>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003350:	f000 f9a6 	bl	80036a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003354:	2100      	movs	r1, #0
 8003356:	480d      	ldr	r0, [pc, #52]	; (800338c <MX_USART2_UART_Init+0x90>)
 8003358:	f00c ff59 	bl	801020e <HAL_UARTEx_SetTxFifoThreshold>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003362:	f000 f99d 	bl	80036a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003366:	2100      	movs	r1, #0
 8003368:	4808      	ldr	r0, [pc, #32]	; (800338c <MX_USART2_UART_Init+0x90>)
 800336a:	f00c ff8e 	bl	801028a <HAL_UARTEx_SetRxFifoThreshold>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003374:	f000 f994 	bl	80036a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003378:	4804      	ldr	r0, [pc, #16]	; (800338c <MX_USART2_UART_Init+0x90>)
 800337a:	f00c ff0f 	bl	801019c <HAL_UARTEx_DisableFifoMode>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003384:	f000 f98c 	bl	80036a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003388:	bf00      	nop
 800338a:	bd80      	pop	{r7, pc}
 800338c:	240005cc 	.word	0x240005cc
 8003390:	40004400 	.word	0x40004400

08003394 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800339a:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <MX_DMA_Init+0x5c>)
 800339c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80033a0:	4a13      	ldr	r2, [pc, #76]	; (80033f0 <MX_DMA_Init+0x5c>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80033aa:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <MX_DMA_Init+0x5c>)
 80033ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80033b8:	2200      	movs	r2, #0
 80033ba:	2100      	movs	r1, #0
 80033bc:	200b      	movs	r0, #11
 80033be:	f001 fc4e 	bl	8004c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80033c2:	200b      	movs	r0, #11
 80033c4:	f001 fc65 	bl	8004c92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80033c8:	2200      	movs	r2, #0
 80033ca:	2100      	movs	r1, #0
 80033cc:	200c      	movs	r0, #12
 80033ce:	f001 fc46 	bl	8004c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80033d2:	200c      	movs	r0, #12
 80033d4:	f001 fc5d 	bl	8004c92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80033d8:	2200      	movs	r2, #0
 80033da:	2100      	movs	r1, #0
 80033dc:	200d      	movs	r0, #13
 80033de:	f001 fc3e 	bl	8004c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80033e2:	200d      	movs	r0, #13
 80033e4:	f001 fc55 	bl	8004c92 <HAL_NVIC_EnableIRQ>

}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	58024400 	.word	0x58024400

080033f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fa:	f107 030c 	add.w	r3, r7, #12
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	605a      	str	r2, [r3, #4]
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800340a:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <MX_GPIO_Init+0xc4>)
 800340c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003410:	4a29      	ldr	r2, [pc, #164]	; (80034b8 <MX_GPIO_Init+0xc4>)
 8003412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800341a:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <MX_GPIO_Init+0xc4>)
 800341c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003428:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <MX_GPIO_Init+0xc4>)
 800342a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800342e:	4a22      	ldr	r2, [pc, #136]	; (80034b8 <MX_GPIO_Init+0xc4>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003438:	4b1f      	ldr	r3, [pc, #124]	; (80034b8 <MX_GPIO_Init+0xc4>)
 800343a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003446:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <MX_GPIO_Init+0xc4>)
 8003448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800344c:	4a1a      	ldr	r2, [pc, #104]	; (80034b8 <MX_GPIO_Init+0xc4>)
 800344e:	f043 0302 	orr.w	r3, r3, #2
 8003452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003456:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <MX_GPIO_Init+0xc4>)
 8003458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003464:	2200      	movs	r2, #0
 8003466:	2102      	movs	r1, #2
 8003468:	4814      	ldr	r0, [pc, #80]	; (80034bc <MX_GPIO_Init+0xc8>)
 800346a:	f004 fc31 	bl	8007cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800346e:	2200      	movs	r2, #0
 8003470:	2140      	movs	r1, #64	; 0x40
 8003472:	4813      	ldr	r0, [pc, #76]	; (80034c0 <MX_GPIO_Init+0xcc>)
 8003474:	f004 fc2c 	bl	8007cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003478:	2302      	movs	r3, #2
 800347a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800347c:	2301      	movs	r3, #1
 800347e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003484:	2300      	movs	r3, #0
 8003486:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003488:	f107 030c 	add.w	r3, r7, #12
 800348c:	4619      	mov	r1, r3
 800348e:	480b      	ldr	r0, [pc, #44]	; (80034bc <MX_GPIO_Init+0xc8>)
 8003490:	f004 fa6e 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003494:	2340      	movs	r3, #64	; 0x40
 8003496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003498:	2301      	movs	r3, #1
 800349a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a4:	f107 030c 	add.w	r3, r7, #12
 80034a8:	4619      	mov	r1, r3
 80034aa:	4805      	ldr	r0, [pc, #20]	; (80034c0 <MX_GPIO_Init+0xcc>)
 80034ac:	f004 fa60 	bl	8007970 <HAL_GPIO_Init>

}
 80034b0:	bf00      	nop
 80034b2:	3720      	adds	r7, #32
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	58024400 	.word	0x58024400
 80034bc:	58020000 	.word	0x58020000
 80034c0:	58020400 	.word	0x58020400

080034c4 <Compass_Calibration>:

/* USER CODE BEGIN 4 */
void Compass_Calibration(uint8_t mag_calibration_enable)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	71fb      	strb	r3, [r7, #7]
	if(mag_calibration_enable == 1)
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	f040 80d6 	bne.w	8003682 <Compass_Calibration+0x1be>
	{
		for(int i =0;i<5;i++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	e00b      	b.n	80034f4 <Compass_Calibration+0x30>
		{
			MPU9250_Read_All(&hi2c1);
 80034dc:	486b      	ldr	r0, [pc, #428]	; (800368c <Compass_Calibration+0x1c8>)
 80034de:	f7fd fbd1 	bl	8000c84 <MPU9250_Read_All>
			HAL_Delay(1);
 80034e2:	2001      	movs	r0, #1
 80034e4:	f001 fab0 	bl	8004a48 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 80034e8:	4869      	ldr	r0, [pc, #420]	; (8003690 <Compass_Calibration+0x1cc>)
 80034ea:	f7fd fd99 	bl	8001020 <MPU9250_Parsing_NoOffset>
		for(int i =0;i<5;i++)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3301      	adds	r3, #1
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	ddf0      	ble.n	80034dc <Compass_Calibration+0x18>
		}
		MPU9250.Mx_Max = MPU9250.Mx;
 80034fa:	4b65      	ldr	r3, [pc, #404]	; (8003690 <Compass_Calibration+0x1cc>)
 80034fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034fe:	4a64      	ldr	r2, [pc, #400]	; (8003690 <Compass_Calibration+0x1cc>)
 8003500:	6513      	str	r3, [r2, #80]	; 0x50
		MPU9250.Mx_Min = MPU9250.Mx;
 8003502:	4b63      	ldr	r3, [pc, #396]	; (8003690 <Compass_Calibration+0x1cc>)
 8003504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003506:	4a62      	ldr	r2, [pc, #392]	; (8003690 <Compass_Calibration+0x1cc>)
 8003508:	6453      	str	r3, [r2, #68]	; 0x44
		MPU9250.My_Max = MPU9250.My;
 800350a:	4b61      	ldr	r3, [pc, #388]	; (8003690 <Compass_Calibration+0x1cc>)
 800350c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350e:	4a60      	ldr	r2, [pc, #384]	; (8003690 <Compass_Calibration+0x1cc>)
 8003510:	6553      	str	r3, [r2, #84]	; 0x54
		MPU9250.My_Min = MPU9250.My;
 8003512:	4b5f      	ldr	r3, [pc, #380]	; (8003690 <Compass_Calibration+0x1cc>)
 8003514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003516:	4a5e      	ldr	r2, [pc, #376]	; (8003690 <Compass_Calibration+0x1cc>)
 8003518:	6493      	str	r3, [r2, #72]	; 0x48
		MPU9250.Mz_Max = MPU9250.Mz;
 800351a:	4b5d      	ldr	r3, [pc, #372]	; (8003690 <Compass_Calibration+0x1cc>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	4a5c      	ldr	r2, [pc, #368]	; (8003690 <Compass_Calibration+0x1cc>)
 8003520:	6593      	str	r3, [r2, #88]	; 0x58
		MPU9250.Mz_Min = MPU9250.Mz;
 8003522:	4b5b      	ldr	r3, [pc, #364]	; (8003690 <Compass_Calibration+0x1cc>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	4a5a      	ldr	r2, [pc, #360]	; (8003690 <Compass_Calibration+0x1cc>)
 8003528:	64d3      	str	r3, [r2, #76]	; 0x4c

		while(mag_calibration_enable != 0)
 800352a:	e065      	b.n	80035f8 <Compass_Calibration+0x134>
		{
			Receive_Command();
 800352c:	f000 fc14 	bl	8003d58 <Receive_Command>
			MPU9250_Read_All(&hi2c1);
 8003530:	4856      	ldr	r0, [pc, #344]	; (800368c <Compass_Calibration+0x1c8>)
 8003532:	f7fd fba7 	bl	8000c84 <MPU9250_Read_All>
			HAL_Delay(1);
 8003536:	2001      	movs	r0, #1
 8003538:	f001 fa86 	bl	8004a48 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 800353c:	4854      	ldr	r0, [pc, #336]	; (8003690 <Compass_Calibration+0x1cc>)
 800353e:	f7fd fd6f 	bl	8001020 <MPU9250_Parsing_NoOffset>
			if(MPU9250.Mx > MPU9250.Mx_Max) MPU9250.Mx_Max = MPU9250.Mx;
 8003542:	4b53      	ldr	r3, [pc, #332]	; (8003690 <Compass_Calibration+0x1cc>)
 8003544:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003548:	4b51      	ldr	r3, [pc, #324]	; (8003690 <Compass_Calibration+0x1cc>)
 800354a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800354e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003556:	dd03      	ble.n	8003560 <Compass_Calibration+0x9c>
 8003558:	4b4d      	ldr	r3, [pc, #308]	; (8003690 <Compass_Calibration+0x1cc>)
 800355a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800355c:	4a4c      	ldr	r2, [pc, #304]	; (8003690 <Compass_Calibration+0x1cc>)
 800355e:	6513      	str	r3, [r2, #80]	; 0x50
			if(MPU9250.Mx < MPU9250.Mx_Min) MPU9250.Mx_Min = MPU9250.Mx;
 8003560:	4b4b      	ldr	r3, [pc, #300]	; (8003690 <Compass_Calibration+0x1cc>)
 8003562:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003566:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <Compass_Calibration+0x1cc>)
 8003568:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800356c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003574:	d503      	bpl.n	800357e <Compass_Calibration+0xba>
 8003576:	4b46      	ldr	r3, [pc, #280]	; (8003690 <Compass_Calibration+0x1cc>)
 8003578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357a:	4a45      	ldr	r2, [pc, #276]	; (8003690 <Compass_Calibration+0x1cc>)
 800357c:	6453      	str	r3, [r2, #68]	; 0x44

			if(MPU9250.My > MPU9250.My_Max) MPU9250.My_Max = MPU9250.My;
 800357e:	4b44      	ldr	r3, [pc, #272]	; (8003690 <Compass_Calibration+0x1cc>)
 8003580:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8003584:	4b42      	ldr	r3, [pc, #264]	; (8003690 <Compass_Calibration+0x1cc>)
 8003586:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800358a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800358e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003592:	dd03      	ble.n	800359c <Compass_Calibration+0xd8>
 8003594:	4b3e      	ldr	r3, [pc, #248]	; (8003690 <Compass_Calibration+0x1cc>)
 8003596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003598:	4a3d      	ldr	r2, [pc, #244]	; (8003690 <Compass_Calibration+0x1cc>)
 800359a:	6553      	str	r3, [r2, #84]	; 0x54
			if(MPU9250.My < MPU9250.My_Min) MPU9250.My_Min = MPU9250.My;
 800359c:	4b3c      	ldr	r3, [pc, #240]	; (8003690 <Compass_Calibration+0x1cc>)
 800359e:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80035a2:	4b3b      	ldr	r3, [pc, #236]	; (8003690 <Compass_Calibration+0x1cc>)
 80035a4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80035a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b0:	d503      	bpl.n	80035ba <Compass_Calibration+0xf6>
 80035b2:	4b37      	ldr	r3, [pc, #220]	; (8003690 <Compass_Calibration+0x1cc>)
 80035b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b6:	4a36      	ldr	r2, [pc, #216]	; (8003690 <Compass_Calibration+0x1cc>)
 80035b8:	6493      	str	r3, [r2, #72]	; 0x48

			if(MPU9250.Mz > MPU9250.Mz_Max) MPU9250.Mz_Max = MPU9250.Mz;
 80035ba:	4b35      	ldr	r3, [pc, #212]	; (8003690 <Compass_Calibration+0x1cc>)
 80035bc:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80035c0:	4b33      	ldr	r3, [pc, #204]	; (8003690 <Compass_Calibration+0x1cc>)
 80035c2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80035c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ce:	dd03      	ble.n	80035d8 <Compass_Calibration+0x114>
 80035d0:	4b2f      	ldr	r3, [pc, #188]	; (8003690 <Compass_Calibration+0x1cc>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a2e      	ldr	r2, [pc, #184]	; (8003690 <Compass_Calibration+0x1cc>)
 80035d6:	6593      	str	r3, [r2, #88]	; 0x58
			if(MPU9250.Mz < MPU9250.Mz_Min) MPU9250.Mz_Min = MPU9250.Mz;
 80035d8:	4b2d      	ldr	r3, [pc, #180]	; (8003690 <Compass_Calibration+0x1cc>)
 80035da:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80035de:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <Compass_Calibration+0x1cc>)
 80035e0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80035e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ec:	d400      	bmi.n	80035f0 <Compass_Calibration+0x12c>
 80035ee:	e003      	b.n	80035f8 <Compass_Calibration+0x134>
 80035f0:	4b27      	ldr	r3, [pc, #156]	; (8003690 <Compass_Calibration+0x1cc>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	4a26      	ldr	r2, [pc, #152]	; (8003690 <Compass_Calibration+0x1cc>)
 80035f6:	64d3      	str	r3, [r2, #76]	; 0x4c
		while(mag_calibration_enable != 0)
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d196      	bne.n	800352c <Compass_Calibration+0x68>
		}
		MPU9250.Mx_Offset = (MPU9250.Mx_Max + MPU9250.Mx_Min) / 2;
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <Compass_Calibration+0x1cc>)
 8003600:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8003604:	4b22      	ldr	r3, [pc, #136]	; (8003690 <Compass_Calibration+0x1cc>)
 8003606:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800360a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800360e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003612:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003616:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <Compass_Calibration+0x1cc>)
 8003618:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		MPU9250.My_Offset = (MPU9250.My_Max + MPU9250.My_Min) / 2;
 800361c:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <Compass_Calibration+0x1cc>)
 800361e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <Compass_Calibration+0x1cc>)
 8003624:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800362c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003630:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003634:	4b16      	ldr	r3, [pc, #88]	; (8003690 <Compass_Calibration+0x1cc>)
 8003636:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		MPU9250.Mz_Offset = (MPU9250.Mz_Max + MPU9250.Mz_Min) / 2;
 800363a:	4b15      	ldr	r3, [pc, #84]	; (8003690 <Compass_Calibration+0x1cc>)
 800363c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003640:	4b13      	ldr	r3, [pc, #76]	; (8003690 <Compass_Calibration+0x1cc>)
 8003642:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800364a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800364e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003652:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <Compass_Calibration+0x1cc>)
 8003654:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		*(float*)&Mag_Calib[0] = MPU9250.Mx_Offset;
 8003658:	4a0e      	ldr	r2, [pc, #56]	; (8003694 <Compass_Calibration+0x1d0>)
 800365a:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <Compass_Calibration+0x1cc>)
 800365c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365e:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[4] = MPU9250.My_Offset;
 8003660:	4a0d      	ldr	r2, [pc, #52]	; (8003698 <Compass_Calibration+0x1d4>)
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <Compass_Calibration+0x1cc>)
 8003664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003666:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[8] = MPU9250.Mz_Offset;
 8003668:	4a0c      	ldr	r2, [pc, #48]	; (800369c <Compass_Calibration+0x1d8>)
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <Compass_Calibration+0x1cc>)
 800366c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800366e:	6013      	str	r3, [r2, #0]

		W25qxx_EraseSector(0);
 8003670:	2000      	movs	r0, #0
 8003672:	f000 fef9 	bl	8004468 <W25qxx_EraseSector>
		W25qxx_WriteSector(Mag_Calib, 0, 0, 12);
 8003676:	230c      	movs	r3, #12
 8003678:	2200      	movs	r2, #0
 800367a:	2100      	movs	r1, #0
 800367c:	4805      	ldr	r0, [pc, #20]	; (8003694 <Compass_Calibration+0x1d0>)
 800367e:	f000 ffe5 	bl	800464c <W25qxx_WriteSector>
	}
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	24000378 	.word	0x24000378
 8003690:	24000268 	.word	0x24000268
 8003694:	2400065c 	.word	0x2400065c
 8003698:	24000660 	.word	0x24000660
 800369c:	24000664 	.word	0x24000664

080036a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036a4:	b672      	cpsid	i
}
 80036a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80036a8:	e7fe      	b.n	80036a8 <Error_Handler+0x8>
	...

080036ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <HAL_MspInit+0x30>)
 80036b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036b8:	4a08      	ldr	r2, [pc, #32]	; (80036dc <HAL_MspInit+0x30>)
 80036ba:	f043 0302 	orr.w	r3, r3, #2
 80036be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80036c2:	4b06      	ldr	r3, [pc, #24]	; (80036dc <HAL_MspInit+0x30>)
 80036c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	607b      	str	r3, [r7, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	58024400 	.word	0x58024400

080036e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b0b8      	sub	sp, #224	; 0xe0
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036f8:	f107 0310 	add.w	r3, r7, #16
 80036fc:	22bc      	movs	r2, #188	; 0xbc
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f00c fe79 	bl	80103f8 <memset>
  if(hi2c->Instance==I2C1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a3f      	ldr	r2, [pc, #252]	; (8003808 <HAL_I2C_MspInit+0x128>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d177      	bne.n	8003800 <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003710:	2308      	movs	r3, #8
 8003712:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003714:	2300      	movs	r3, #0
 8003716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800371a:	f107 0310 	add.w	r3, r7, #16
 800371e:	4618      	mov	r0, r3
 8003720:	f007 fd34 	bl	800b18c <HAL_RCCEx_PeriphCLKConfig>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800372a:	f7ff ffb9 	bl	80036a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800372e:	4b37      	ldr	r3, [pc, #220]	; (800380c <HAL_I2C_MspInit+0x12c>)
 8003730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003734:	4a35      	ldr	r2, [pc, #212]	; (800380c <HAL_I2C_MspInit+0x12c>)
 8003736:	f043 0302 	orr.w	r3, r3, #2
 800373a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800373e:	4b33      	ldr	r3, [pc, #204]	; (800380c <HAL_I2C_MspInit+0x12c>)
 8003740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800374c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003754:	2312      	movs	r3, #18
 8003756:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375a:	2300      	movs	r3, #0
 800375c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003760:	2300      	movs	r3, #0
 8003762:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003766:	2304      	movs	r3, #4
 8003768:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800376c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003770:	4619      	mov	r1, r3
 8003772:	4827      	ldr	r0, [pc, #156]	; (8003810 <HAL_I2C_MspInit+0x130>)
 8003774:	f004 f8fc 	bl	8007970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003778:	4b24      	ldr	r3, [pc, #144]	; (800380c <HAL_I2C_MspInit+0x12c>)
 800377a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800377e:	4a23      	ldr	r2, [pc, #140]	; (800380c <HAL_I2C_MspInit+0x12c>)
 8003780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003784:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003788:	4b20      	ldr	r3, [pc, #128]	; (800380c <HAL_I2C_MspInit+0x12c>)
 800378a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800378e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 8003796:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <HAL_I2C_MspInit+0x134>)
 8003798:	4a1f      	ldr	r2, [pc, #124]	; (8003818 <HAL_I2C_MspInit+0x138>)
 800379a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800379c:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <HAL_I2C_MspInit+0x134>)
 800379e:	2221      	movs	r2, #33	; 0x21
 80037a0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037a2:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <HAL_I2C_MspInit+0x134>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037a8:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <HAL_I2C_MspInit+0x134>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037ae:	4b19      	ldr	r3, [pc, #100]	; (8003814 <HAL_I2C_MspInit+0x134>)
 80037b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037b4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037b6:	4b17      	ldr	r3, [pc, #92]	; (8003814 <HAL_I2C_MspInit+0x134>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037bc:	4b15      	ldr	r3, [pc, #84]	; (8003814 <HAL_I2C_MspInit+0x134>)
 80037be:	2200      	movs	r2, #0
 80037c0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <HAL_I2C_MspInit+0x134>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037c8:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_I2C_MspInit+0x134>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037ce:	4b11      	ldr	r3, [pc, #68]	; (8003814 <HAL_I2C_MspInit+0x134>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80037d4:	480f      	ldr	r0, [pc, #60]	; (8003814 <HAL_I2C_MspInit+0x134>)
 80037d6:	f001 fa77 	bl	8004cc8 <HAL_DMA_Init>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 80037e0:	f7ff ff5e 	bl	80036a0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a0b      	ldr	r2, [pc, #44]	; (8003814 <HAL_I2C_MspInit+0x134>)
 80037e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80037ea:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <HAL_I2C_MspInit+0x134>)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80037f0:	2200      	movs	r2, #0
 80037f2:	2100      	movs	r1, #0
 80037f4:	201f      	movs	r0, #31
 80037f6:	f001 fa32 	bl	8004c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80037fa:	201f      	movs	r0, #31
 80037fc:	f001 fa49 	bl	8004c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003800:	bf00      	nop
 8003802:	37e0      	adds	r7, #224	; 0xe0
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40005400 	.word	0x40005400
 800380c:	58024400 	.word	0x58024400
 8003810:	58020400 	.word	0x58020400
 8003814:	240004cc 	.word	0x240004cc
 8003818:	40020028 	.word	0x40020028

0800381c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b0b8      	sub	sp, #224	; 0xe0
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003824:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003834:	f107 0310 	add.w	r3, r7, #16
 8003838:	22bc      	movs	r2, #188	; 0xbc
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f00c fddb 	bl	80103f8 <memset>
  if(hspi->Instance==SPI1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a25      	ldr	r2, [pc, #148]	; (80038dc <HAL_SPI_MspInit+0xc0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d142      	bne.n	80038d2 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800384c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003850:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003852:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003856:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003858:	f107 0310 	add.w	r3, r7, #16
 800385c:	4618      	mov	r0, r3
 800385e:	f007 fc95 	bl	800b18c <HAL_RCCEx_PeriphCLKConfig>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8003868:	f7ff ff1a 	bl	80036a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800386c:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <HAL_SPI_MspInit+0xc4>)
 800386e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003872:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <HAL_SPI_MspInit+0xc4>)
 8003874:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003878:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800387c:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <HAL_SPI_MspInit+0xc4>)
 800387e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800388a:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <HAL_SPI_MspInit+0xc4>)
 800388c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003890:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <HAL_SPI_MspInit+0xc4>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800389a:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_SPI_MspInit+0xc4>)
 800389c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80038a8:	23e0      	movs	r3, #224	; 0xe0
 80038aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ae:	2302      	movs	r3, #2
 80038b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ba:	2300      	movs	r3, #0
 80038bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038c0:	2305      	movs	r3, #5
 80038c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80038ca:	4619      	mov	r1, r3
 80038cc:	4805      	ldr	r0, [pc, #20]	; (80038e4 <HAL_SPI_MspInit+0xc8>)
 80038ce:	f004 f84f 	bl	8007970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80038d2:	bf00      	nop
 80038d4:	37e0      	adds	r7, #224	; 0xe0
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40013000 	.word	0x40013000
 80038e0:	58024400 	.word	0x58024400
 80038e4:	58020000 	.word	0x58020000

080038e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a0e      	ldr	r2, [pc, #56]	; (8003930 <HAL_TIM_Base_MspInit+0x48>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d116      	bne.n	8003928 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80038fa:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <HAL_TIM_Base_MspInit+0x4c>)
 80038fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003900:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <HAL_TIM_Base_MspInit+0x4c>)
 8003902:	f043 0320 	orr.w	r3, r3, #32
 8003906:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800390a:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <HAL_TIM_Base_MspInit+0x4c>)
 800390c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003918:	2200      	movs	r2, #0
 800391a:	2100      	movs	r1, #0
 800391c:	2037      	movs	r0, #55	; 0x37
 800391e:	f001 f99e 	bl	8004c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003922:	2037      	movs	r0, #55	; 0x37
 8003924:	f001 f9b5 	bl	8004c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40001400 	.word	0x40001400
 8003934:	58024400 	.word	0x58024400

08003938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b0ba      	sub	sp, #232	; 0xe8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003940:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	60da      	str	r2, [r3, #12]
 800394e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003950:	f107 0318 	add.w	r3, r7, #24
 8003954:	22bc      	movs	r2, #188	; 0xbc
 8003956:	2100      	movs	r1, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f00c fd4d 	bl	80103f8 <memset>
  if(huart->Instance==USART1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a7e      	ldr	r2, [pc, #504]	; (8003b5c <HAL_UART_MspInit+0x224>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d178      	bne.n	8003a5a <HAL_UART_MspInit+0x122>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003968:	2301      	movs	r3, #1
 800396a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800396c:	2300      	movs	r3, #0
 800396e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003972:	f107 0318 	add.w	r3, r7, #24
 8003976:	4618      	mov	r0, r3
 8003978:	f007 fc08 	bl	800b18c <HAL_RCCEx_PeriphCLKConfig>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003982:	f7ff fe8d 	bl	80036a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003986:	4b76      	ldr	r3, [pc, #472]	; (8003b60 <HAL_UART_MspInit+0x228>)
 8003988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800398c:	4a74      	ldr	r2, [pc, #464]	; (8003b60 <HAL_UART_MspInit+0x228>)
 800398e:	f043 0310 	orr.w	r3, r3, #16
 8003992:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003996:	4b72      	ldr	r3, [pc, #456]	; (8003b60 <HAL_UART_MspInit+0x228>)
 8003998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a4:	4b6e      	ldr	r3, [pc, #440]	; (8003b60 <HAL_UART_MspInit+0x228>)
 80039a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039aa:	4a6d      	ldr	r2, [pc, #436]	; (8003b60 <HAL_UART_MspInit+0x228>)
 80039ac:	f043 0302 	orr.w	r3, r3, #2
 80039b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039b4:	4b6a      	ldr	r3, [pc, #424]	; (8003b60 <HAL_UART_MspInit+0x228>)
 80039b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80039c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80039c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ca:	2302      	movs	r3, #2
 80039cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80039dc:	2304      	movs	r3, #4
 80039de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039e6:	4619      	mov	r1, r3
 80039e8:	485e      	ldr	r0, [pc, #376]	; (8003b64 <HAL_UART_MspInit+0x22c>)
 80039ea:	f003 ffc1 	bl	8007970 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 80039ee:	4b5e      	ldr	r3, [pc, #376]	; (8003b68 <HAL_UART_MspInit+0x230>)
 80039f0:	4a5e      	ldr	r2, [pc, #376]	; (8003b6c <HAL_UART_MspInit+0x234>)
 80039f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80039f4:	4b5c      	ldr	r3, [pc, #368]	; (8003b68 <HAL_UART_MspInit+0x230>)
 80039f6:	222a      	movs	r2, #42	; 0x2a
 80039f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039fa:	4b5b      	ldr	r3, [pc, #364]	; (8003b68 <HAL_UART_MspInit+0x230>)
 80039fc:	2240      	movs	r2, #64	; 0x40
 80039fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a00:	4b59      	ldr	r3, [pc, #356]	; (8003b68 <HAL_UART_MspInit+0x230>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a06:	4b58      	ldr	r3, [pc, #352]	; (8003b68 <HAL_UART_MspInit+0x230>)
 8003a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a0c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a0e:	4b56      	ldr	r3, [pc, #344]	; (8003b68 <HAL_UART_MspInit+0x230>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a14:	4b54      	ldr	r3, [pc, #336]	; (8003b68 <HAL_UART_MspInit+0x230>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003a1a:	4b53      	ldr	r3, [pc, #332]	; (8003b68 <HAL_UART_MspInit+0x230>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a20:	4b51      	ldr	r3, [pc, #324]	; (8003b68 <HAL_UART_MspInit+0x230>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a26:	4b50      	ldr	r3, [pc, #320]	; (8003b68 <HAL_UART_MspInit+0x230>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003a2c:	484e      	ldr	r0, [pc, #312]	; (8003b68 <HAL_UART_MspInit+0x230>)
 8003a2e:	f001 f94b 	bl	8004cc8 <HAL_DMA_Init>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8003a38:	f7ff fe32 	bl	80036a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a4a      	ldr	r2, [pc, #296]	; (8003b68 <HAL_UART_MspInit+0x230>)
 8003a40:	679a      	str	r2, [r3, #120]	; 0x78
 8003a42:	4a49      	ldr	r2, [pc, #292]	; (8003b68 <HAL_UART_MspInit+0x230>)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	2025      	movs	r0, #37	; 0x25
 8003a4e:	f001 f906 	bl	8004c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a52:	2025      	movs	r0, #37	; 0x25
 8003a54:	f001 f91d 	bl	8004c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a58:	e07c      	b.n	8003b54 <HAL_UART_MspInit+0x21c>
  else if(huart->Instance==USART2)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a44      	ldr	r2, [pc, #272]	; (8003b70 <HAL_UART_MspInit+0x238>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d177      	bne.n	8003b54 <HAL_UART_MspInit+0x21c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a64:	2302      	movs	r3, #2
 8003a66:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a6e:	f107 0318 	add.w	r3, r7, #24
 8003a72:	4618      	mov	r0, r3
 8003a74:	f007 fb8a 	bl	800b18c <HAL_RCCEx_PeriphCLKConfig>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_UART_MspInit+0x14a>
      Error_Handler();
 8003a7e:	f7ff fe0f 	bl	80036a0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a82:	4b37      	ldr	r3, [pc, #220]	; (8003b60 <HAL_UART_MspInit+0x228>)
 8003a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a88:	4a35      	ldr	r2, [pc, #212]	; (8003b60 <HAL_UART_MspInit+0x228>)
 8003a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a92:	4b33      	ldr	r3, [pc, #204]	; (8003b60 <HAL_UART_MspInit+0x228>)
 8003a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa0:	4b2f      	ldr	r3, [pc, #188]	; (8003b60 <HAL_UART_MspInit+0x228>)
 8003aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aa6:	4a2e      	ldr	r2, [pc, #184]	; (8003b60 <HAL_UART_MspInit+0x228>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ab0:	4b2b      	ldr	r3, [pc, #172]	; (8003b60 <HAL_UART_MspInit+0x228>)
 8003ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003abe:	230c      	movs	r3, #12
 8003ac0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ad6:	2307      	movs	r3, #7
 8003ad8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003adc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4824      	ldr	r0, [pc, #144]	; (8003b74 <HAL_UART_MspInit+0x23c>)
 8003ae4:	f003 ff44 	bl	8007970 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8003ae8:	4b23      	ldr	r3, [pc, #140]	; (8003b78 <HAL_UART_MspInit+0x240>)
 8003aea:	4a24      	ldr	r2, [pc, #144]	; (8003b7c <HAL_UART_MspInit+0x244>)
 8003aec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003aee:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <HAL_UART_MspInit+0x240>)
 8003af0:	222b      	movs	r2, #43	; 0x2b
 8003af2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003af4:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <HAL_UART_MspInit+0x240>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003afa:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <HAL_UART_MspInit+0x240>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b00:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <HAL_UART_MspInit+0x240>)
 8003b02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b06:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <HAL_UART_MspInit+0x240>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b0e:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <HAL_UART_MspInit+0x240>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003b14:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <HAL_UART_MspInit+0x240>)
 8003b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b1c:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <HAL_UART_MspInit+0x240>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b22:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <HAL_UART_MspInit+0x240>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003b28:	4813      	ldr	r0, [pc, #76]	; (8003b78 <HAL_UART_MspInit+0x240>)
 8003b2a:	f001 f8cd 	bl	8004cc8 <HAL_DMA_Init>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_UART_MspInit+0x200>
      Error_Handler();
 8003b34:	f7ff fdb4 	bl	80036a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a0f      	ldr	r2, [pc, #60]	; (8003b78 <HAL_UART_MspInit+0x240>)
 8003b3c:	67da      	str	r2, [r3, #124]	; 0x7c
 8003b3e:	4a0e      	ldr	r2, [pc, #56]	; (8003b78 <HAL_UART_MspInit+0x240>)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b44:	2200      	movs	r2, #0
 8003b46:	2100      	movs	r1, #0
 8003b48:	2026      	movs	r0, #38	; 0x26
 8003b4a:	f001 f888 	bl	8004c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b4e:	2026      	movs	r0, #38	; 0x26
 8003b50:	f001 f89f 	bl	8004c92 <HAL_NVIC_EnableIRQ>
}
 8003b54:	bf00      	nop
 8003b56:	37e8      	adds	r7, #232	; 0xe8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40011000 	.word	0x40011000
 8003b60:	58024400 	.word	0x58024400
 8003b64:	58020400 	.word	0x58020400
 8003b68:	240003c4 	.word	0x240003c4
 8003b6c:	40020010 	.word	0x40020010
 8003b70:	40004400 	.word	0x40004400
 8003b74:	58020000 	.word	0x58020000
 8003b78:	24000300 	.word	0x24000300
 8003b7c:	40020040 	.word	0x40020040

08003b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003b84:	e7fe      	b.n	8003b84 <NMI_Handler+0x4>

08003b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b8a:	e7fe      	b.n	8003b8a <HardFault_Handler+0x4>

08003b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b90:	e7fe      	b.n	8003b90 <MemManage_Handler+0x4>

08003b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b92:	b480      	push	{r7}
 8003b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b96:	e7fe      	b.n	8003b96 <BusFault_Handler+0x4>

08003b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b9c:	e7fe      	b.n	8003b9c <UsageFault_Handler+0x4>

08003b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ba2:	bf00      	nop
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bb0:	bf00      	nop
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bcc:	f000 ff1c 	bl	8004a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003bd8:	4802      	ldr	r0, [pc, #8]	; (8003be4 <DMA1_Stream0_IRQHandler+0x10>)
 8003bda:	f002 fb9d 	bl	8006318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	240003c4 	.word	0x240003c4

08003be8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003bec:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <DMA1_Stream1_IRQHandler+0x10>)
 8003bee:	f002 fb93 	bl	8006318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	240004cc 	.word	0x240004cc

08003bfc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003c00:	4802      	ldr	r0, [pc, #8]	; (8003c0c <DMA1_Stream2_IRQHandler+0x10>)
 8003c02:	f002 fb89 	bl	8006318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	24000300 	.word	0x24000300

08003c10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c14:	4802      	ldr	r0, [pc, #8]	; (8003c20 <I2C1_EV_IRQHandler+0x10>)
 8003c16:	f004 fc45 	bl	80084a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	24000378 	.word	0x24000378

08003c24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c28:	4802      	ldr	r0, [pc, #8]	; (8003c34 <USART1_IRQHandler+0x10>)
 8003c2a:	f00a fb77 	bl	800e31c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	2400043c 	.word	0x2400043c

08003c38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c3c:	4802      	ldr	r0, [pc, #8]	; (8003c48 <USART2_IRQHandler+0x10>)
 8003c3e:	f00a fb6d 	bl	800e31c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	240005cc 	.word	0x240005cc

08003c4c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003c50:	4802      	ldr	r0, [pc, #8]	; (8003c5c <TIM7_IRQHandler+0x10>)
 8003c52:	f009 ff7f 	bl	800db54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	24000668 	.word	0x24000668

08003c60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	static unsigned int tim1_2ms_count = 0;
	static unsigned int tim1_20ms_count = 0;

	if(htim->Instance == TIM7)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a13      	ldr	r2, [pc, #76]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d11d      	bne.n	8003cae <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		tim1_2ms_count++;
 8003c72:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3301      	adds	r3, #1
 8003c78:	4a11      	ldr	r2, [pc, #68]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003c7a:	6013      	str	r3, [r2, #0]
		if(tim1_2ms_count == 2)
 8003c7c:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d105      	bne.n	8003c90 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			tim1_2ms_count = 0;
 8003c84:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
			tim1_2ms_flag = 1;
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]
		}
		tim1_20ms_count++;
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3301      	adds	r3, #1
 8003c96:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003c98:	6013      	str	r3, [r2, #0]
		if(tim1_20ms_count == 20)
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b14      	cmp	r3, #20
 8003ca0:	d105      	bne.n	8003cae <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			tim1_20ms_count = 0;
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
			tim1_20ms_flag = 1;
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40001400 	.word	0x40001400
 8003cc0:	24000238 	.word	0x24000238
 8003cc4:	24000232 	.word	0x24000232
 8003cc8:	2400023c 	.word	0x2400023c
 8003ccc:	24000233 	.word	0x24000233

08003cd0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a17      	ldr	r2, [pc, #92]	; (8003d3c <HAL_UART_RxCpltCallback+0x6c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d108      	bne.n	8003cf4 <HAL_UART_RxCpltCallback+0x24>
	{
		uart1_rx_flag = 1;
 8003ce2:	4b17      	ldr	r3, [pc, #92]	; (8003d40 <HAL_UART_RxCpltCallback+0x70>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8003ce8:	2201      	movs	r2, #1
 8003cea:	4916      	ldr	r1, [pc, #88]	; (8003d44 <HAL_UART_RxCpltCallback+0x74>)
 8003cec:	4816      	ldr	r0, [pc, #88]	; (8003d48 <HAL_UART_RxCpltCallback+0x78>)
 8003cee:	f00a fa09 	bl	800e104 <HAL_UART_Receive_IT>
	else if(huart->Instance == USART2)
	{
		if((ibus_rx_buf[0] == 0x20) && (ibus_rx_buf[1] == 0x40)) ibus_rx_cplt_flag = 1;
		else for(int j = 0; j < 32; j++) ibus_rx_buf[j] = 0;
	}
}
 8003cf2:	e01e      	b.n	8003d32 <HAL_UART_RxCpltCallback+0x62>
	else if(huart->Instance == USART2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <HAL_UART_RxCpltCallback+0x7c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d119      	bne.n	8003d32 <HAL_UART_RxCpltCallback+0x62>
		if((ibus_rx_buf[0] == 0x20) && (ibus_rx_buf[1] == 0x40)) ibus_rx_cplt_flag = 1;
 8003cfe:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <HAL_UART_RxCpltCallback+0x80>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d107      	bne.n	8003d16 <HAL_UART_RxCpltCallback+0x46>
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <HAL_UART_RxCpltCallback+0x80>)
 8003d08:	785b      	ldrb	r3, [r3, #1]
 8003d0a:	2b40      	cmp	r3, #64	; 0x40
 8003d0c:	d103      	bne.n	8003d16 <HAL_UART_RxCpltCallback+0x46>
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <HAL_UART_RxCpltCallback+0x84>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	701a      	strb	r2, [r3, #0]
}
 8003d14:	e00d      	b.n	8003d32 <HAL_UART_RxCpltCallback+0x62>
		else for(int j = 0; j < 32; j++) ibus_rx_buf[j] = 0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	e007      	b.n	8003d2c <HAL_UART_RxCpltCallback+0x5c>
 8003d1c:	4a0c      	ldr	r2, [pc, #48]	; (8003d50 <HAL_UART_RxCpltCallback+0x80>)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4413      	add	r3, r2
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b1f      	cmp	r3, #31
 8003d30:	ddf4      	ble.n	8003d1c <HAL_UART_RxCpltCallback+0x4c>
}
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40011000 	.word	0x40011000
 8003d40:	24000234 	.word	0x24000234
 8003d44:	24000235 	.word	0x24000235
 8003d48:	2400043c 	.word	0x2400043c
 8003d4c:	40004400 	.word	0x40004400
 8003d50:	240006b8 	.word	0x240006b8
 8003d54:	24000236 	.word	0x24000236

08003d58 <Receive_Command>:

void Receive_Command(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
	if(uart1_rx_flag == 1)
 8003d5c:	4b26      	ldr	r3, [pc, #152]	; (8003df8 <Receive_Command+0xa0>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d142      	bne.n	8003dea <Receive_Command+0x92>
	{
		uart1_rx_flag = 0;
 8003d64:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <Receive_Command+0xa0>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]

		switch(uart1_rx_data)
 8003d6a:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <Receive_Command+0xa4>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	3b31      	subs	r3, #49	; 0x31
 8003d70:	2b07      	cmp	r3, #7
 8003d72:	d833      	bhi.n	8003ddc <Receive_Command+0x84>
 8003d74:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <Receive_Command+0x24>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003d9d 	.word	0x08003d9d
 8003d80:	08003da5 	.word	0x08003da5
 8003d84:	08003dad 	.word	0x08003dad
 8003d88:	08003db5 	.word	0x08003db5
 8003d8c:	08003dbd 	.word	0x08003dbd
 8003d90:	08003dc5 	.word	0x08003dc5
 8003d94:	08003dcd 	.word	0x08003dcd
 8003d98:	08003dd5 	.word	0x08003dd5
		{
		case '1': print_mode = 1; break; //Roll, Pitch, Yaw
 8003d9c:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <Receive_Command+0xa8>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
 8003da2:	e023      	b.n	8003dec <Receive_Command+0x94>
		case '2': print_mode = 2; break; //Alt Raw, Alt Filt
 8003da4:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <Receive_Command+0xa8>)
 8003da6:	2202      	movs	r2, #2
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	e01f      	b.n	8003dec <Receive_Command+0x94>
		case '3': print_mode = 3; break; //Gyro
 8003dac:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <Receive_Command+0xa8>)
 8003dae:	2203      	movs	r2, #3
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	e01b      	b.n	8003dec <Receive_Command+0x94>
		case '4': print_mode = 4; break; //Accel
 8003db4:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <Receive_Command+0xa8>)
 8003db6:	2204      	movs	r2, #4
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	e017      	b.n	8003dec <Receive_Command+0x94>
		case '5': print_mode = 5; break; //Mag
 8003dbc:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <Receive_Command+0xa8>)
 8003dbe:	2205      	movs	r2, #5
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	e013      	b.n	8003dec <Receive_Command+0x94>
		case '6': print_mode = 6; break; //Mag_Offset
 8003dc4:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <Receive_Command+0xa8>)
 8003dc6:	2206      	movs	r2, #6
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	e00f      	b.n	8003dec <Receive_Command+0x94>
		case '7': print_mode = 7; break; //Controller Channels
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <Receive_Command+0xa8>)
 8003dce:	2207      	movs	r2, #7
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e00b      	b.n	8003dec <Receive_Command+0x94>
		case '8': mag_calibration_enable = 1; break; //Mag_Raw
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <Receive_Command+0xac>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	e007      	b.n	8003dec <Receive_Command+0x94>
		default: print_mode = 0; mag_calibration_enable = 0; break; // Stop Printing
 8003ddc:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <Receive_Command+0xa8>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <Receive_Command+0xac>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	e000      	b.n	8003dec <Receive_Command+0x94>
		}
	}
 8003dea:	bf00      	nop
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	24000234 	.word	0x24000234
 8003dfc:	24000235 	.word	0x24000235
 8003e00:	24000230 	.word	0x24000230
 8003e04:	24000231 	.word	0x24000231

08003e08 <Is_iBus_Received>:

int Is_iBus_Received(uint8_t ibus_rx_cplt_flag)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
	if(ibus_rx_cplt_flag==1)
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d10e      	bne.n	8003e36 <Is_iBus_Received+0x2e>
		{
			ibus_rx_cplt_flag=0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	71fb      	strb	r3, [r7, #7]
			if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 8003e1c:	2120      	movs	r1, #32
 8003e1e:	4808      	ldr	r0, [pc, #32]	; (8003e40 <Is_iBus_Received+0x38>)
 8003e20:	f7fc fc32 	bl	8000688 <iBus_Check_CHKSUM>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d105      	bne.n	8003e36 <Is_iBus_Received+0x2e>
			{
				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003e2a:	4906      	ldr	r1, [pc, #24]	; (8003e44 <Is_iBus_Received+0x3c>)
 8003e2c:	4804      	ldr	r0, [pc, #16]	; (8003e40 <Is_iBus_Received+0x38>)
 8003e2e:	f7fc fc62 	bl	80006f6 <iBus_Parsing>
				return 1;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <Is_iBus_Received+0x30>
			}
		}
		return 0;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	240006b8 	.word	0x240006b8
 8003e44:	2400024c 	.word	0x2400024c

08003e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
	return 1;
 8003e4c:	2301      	movs	r3, #1
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <_kill>:

int _kill(int pid, int sig)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e62:	f00c fa9f 	bl	80103a4 <__errno>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2216      	movs	r2, #22
 8003e6a:	601a      	str	r2, [r3, #0]
	return -1;
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <_exit>:

void _exit (int status)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e80:	f04f 31ff 	mov.w	r1, #4294967295
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff ffe7 	bl	8003e58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e8a:	e7fe      	b.n	8003e8a <_exit+0x12>

08003e8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	e00a      	b.n	8003eb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e9e:	f3af 8000 	nop.w
 8003ea2:	4601      	mov	r1, r0
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	60ba      	str	r2, [r7, #8]
 8003eaa:	b2ca      	uxtb	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	dbf0      	blt.n	8003e9e <_read+0x12>
	}

return len;
 8003ebc:	687b      	ldr	r3, [r7, #4]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
	return -1;
 8003ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eee:	605a      	str	r2, [r3, #4]
	return 0;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <_isatty>:

int _isatty(int file)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
	return 1;
 8003f06:	2301      	movs	r3, #1
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
	return 0;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f38:	4a14      	ldr	r2, [pc, #80]	; (8003f8c <_sbrk+0x5c>)
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <_sbrk+0x60>)
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f44:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <_sbrk+0x64>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d102      	bne.n	8003f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f4c:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <_sbrk+0x64>)
 8003f4e:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <_sbrk+0x68>)
 8003f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f52:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <_sbrk+0x64>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4413      	add	r3, r2
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d207      	bcs.n	8003f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f60:	f00c fa20 	bl	80103a4 <__errno>
 8003f64:	4603      	mov	r3, r0
 8003f66:	220c      	movs	r2, #12
 8003f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6e:	e009      	b.n	8003f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f70:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <_sbrk+0x64>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f76:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <_sbrk+0x64>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	4a05      	ldr	r2, [pc, #20]	; (8003f94 <_sbrk+0x64>)
 8003f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f82:	68fb      	ldr	r3, [r7, #12]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	24080000 	.word	0x24080000
 8003f90:	00000400 	.word	0x00000400
 8003f94:	24000240 	.word	0x24000240
 8003f98:	24000718 	.word	0x24000718

08003f9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003fa0:	4b39      	ldr	r3, [pc, #228]	; (8004088 <SystemInit+0xec>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	4a38      	ldr	r2, [pc, #224]	; (8004088 <SystemInit+0xec>)
 8003fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fb0:	4b36      	ldr	r3, [pc, #216]	; (800408c <SystemInit+0xf0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	2b06      	cmp	r3, #6
 8003fba:	d807      	bhi.n	8003fcc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fbc:	4b33      	ldr	r3, [pc, #204]	; (800408c <SystemInit+0xf0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f023 030f 	bic.w	r3, r3, #15
 8003fc4:	4a31      	ldr	r2, [pc, #196]	; (800408c <SystemInit+0xf0>)
 8003fc6:	f043 0307 	orr.w	r3, r3, #7
 8003fca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003fcc:	4b30      	ldr	r3, [pc, #192]	; (8004090 <SystemInit+0xf4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a2f      	ldr	r2, [pc, #188]	; (8004090 <SystemInit+0xf4>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003fd8:	4b2d      	ldr	r3, [pc, #180]	; (8004090 <SystemInit+0xf4>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003fde:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <SystemInit+0xf4>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	492b      	ldr	r1, [pc, #172]	; (8004090 <SystemInit+0xf4>)
 8003fe4:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <SystemInit+0xf8>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fea:	4b28      	ldr	r3, [pc, #160]	; (800408c <SystemInit+0xf0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ff6:	4b25      	ldr	r3, [pc, #148]	; (800408c <SystemInit+0xf0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 030f 	bic.w	r3, r3, #15
 8003ffe:	4a23      	ldr	r2, [pc, #140]	; (800408c <SystemInit+0xf0>)
 8004000:	f043 0307 	orr.w	r3, r3, #7
 8004004:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <SystemInit+0xf4>)
 8004008:	2200      	movs	r2, #0
 800400a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800400c:	4b20      	ldr	r3, [pc, #128]	; (8004090 <SystemInit+0xf4>)
 800400e:	2200      	movs	r2, #0
 8004010:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004012:	4b1f      	ldr	r3, [pc, #124]	; (8004090 <SystemInit+0xf4>)
 8004014:	2200      	movs	r2, #0
 8004016:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004018:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <SystemInit+0xf4>)
 800401a:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <SystemInit+0xfc>)
 800401c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800401e:	4b1c      	ldr	r3, [pc, #112]	; (8004090 <SystemInit+0xf4>)
 8004020:	4a1e      	ldr	r2, [pc, #120]	; (800409c <SystemInit+0x100>)
 8004022:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004024:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <SystemInit+0xf4>)
 8004026:	4a1e      	ldr	r2, [pc, #120]	; (80040a0 <SystemInit+0x104>)
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800402a:	4b19      	ldr	r3, [pc, #100]	; (8004090 <SystemInit+0xf4>)
 800402c:	2200      	movs	r2, #0
 800402e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004030:	4b17      	ldr	r3, [pc, #92]	; (8004090 <SystemInit+0xf4>)
 8004032:	4a1b      	ldr	r2, [pc, #108]	; (80040a0 <SystemInit+0x104>)
 8004034:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004036:	4b16      	ldr	r3, [pc, #88]	; (8004090 <SystemInit+0xf4>)
 8004038:	2200      	movs	r2, #0
 800403a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800403c:	4b14      	ldr	r3, [pc, #80]	; (8004090 <SystemInit+0xf4>)
 800403e:	4a18      	ldr	r2, [pc, #96]	; (80040a0 <SystemInit+0x104>)
 8004040:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004042:	4b13      	ldr	r3, [pc, #76]	; (8004090 <SystemInit+0xf4>)
 8004044:	2200      	movs	r2, #0
 8004046:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004048:	4b11      	ldr	r3, [pc, #68]	; (8004090 <SystemInit+0xf4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a10      	ldr	r2, [pc, #64]	; (8004090 <SystemInit+0xf4>)
 800404e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004052:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004054:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <SystemInit+0xf4>)
 8004056:	2200      	movs	r2, #0
 8004058:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800405a:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <SystemInit+0x108>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <SystemInit+0x10c>)
 8004060:	4013      	ands	r3, r2
 8004062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004066:	d202      	bcs.n	800406e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004068:	4b10      	ldr	r3, [pc, #64]	; (80040ac <SystemInit+0x110>)
 800406a:	2201      	movs	r2, #1
 800406c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800406e:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <SystemInit+0x114>)
 8004070:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004074:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004076:	4b04      	ldr	r3, [pc, #16]	; (8004088 <SystemInit+0xec>)
 8004078:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800407c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	e000ed00 	.word	0xe000ed00
 800408c:	52002000 	.word	0x52002000
 8004090:	58024400 	.word	0x58024400
 8004094:	eaf6ed7f 	.word	0xeaf6ed7f
 8004098:	02020200 	.word	0x02020200
 800409c:	01ff0000 	.word	0x01ff0000
 80040a0:	01010280 	.word	0x01010280
 80040a4:	5c001000 	.word	0x5c001000
 80040a8:	ffff0000 	.word	0xffff0000
 80040ac:	51008108 	.word	0x51008108
 80040b0:	52004000 	.word	0x52004000

080040b4 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	4603      	mov	r3, r0
 80040bc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80040be:	f107 020f 	add.w	r2, r7, #15
 80040c2:	1df9      	adds	r1, r7, #7
 80040c4:	2364      	movs	r3, #100	; 0x64
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	2301      	movs	r3, #1
 80040ca:	4804      	ldr	r0, [pc, #16]	; (80040dc <W25qxx_Spi+0x28>)
 80040cc:	f009 f8a6 	bl	800d21c <HAL_SPI_TransmitReceive>
	return ret;
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	24000544 	.word	0x24000544

080040e0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	2300      	movs	r3, #0
 80040f4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80040f6:	2200      	movs	r2, #0
 80040f8:	2140      	movs	r1, #64	; 0x40
 80040fa:	4813      	ldr	r0, [pc, #76]	; (8004148 <W25qxx_ReadID+0x68>)
 80040fc:	f003 fde8 	bl	8007cd0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004100:	209f      	movs	r0, #159	; 0x9f
 8004102:	f7ff ffd7 	bl	80040b4 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004106:	20a5      	movs	r0, #165	; 0xa5
 8004108:	f7ff ffd4 	bl	80040b4 <W25qxx_Spi>
 800410c:	4603      	mov	r3, r0
 800410e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004110:	20a5      	movs	r0, #165	; 0xa5
 8004112:	f7ff ffcf 	bl	80040b4 <W25qxx_Spi>
 8004116:	4603      	mov	r3, r0
 8004118:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800411a:	20a5      	movs	r0, #165	; 0xa5
 800411c:	f7ff ffca 	bl	80040b4 <W25qxx_Spi>
 8004120:	4603      	mov	r3, r0
 8004122:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004124:	2201      	movs	r2, #1
 8004126:	2140      	movs	r1, #64	; 0x40
 8004128:	4807      	ldr	r0, [pc, #28]	; (8004148 <W25qxx_ReadID+0x68>)
 800412a:	f003 fdd1 	bl	8007cd0 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	041a      	lsls	r2, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	021b      	lsls	r3, r3, #8
 8004136:	4313      	orrs	r3, r2
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
	return Temp;
 800413e:	68fb      	ldr	r3, [r7, #12]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	58020400 	.word	0x58020400

0800414c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800414c:	b590      	push	{r4, r7, lr}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004152:	2200      	movs	r2, #0
 8004154:	2140      	movs	r1, #64	; 0x40
 8004156:	4816      	ldr	r0, [pc, #88]	; (80041b0 <W25qxx_ReadUniqID+0x64>)
 8004158:	f003 fdba 	bl	8007cd0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800415c:	204b      	movs	r0, #75	; 0x4b
 800415e:	f7ff ffa9 	bl	80040b4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004162:	2300      	movs	r3, #0
 8004164:	71fb      	strb	r3, [r7, #7]
 8004166:	e005      	b.n	8004174 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004168:	20a5      	movs	r0, #165	; 0xa5
 800416a:	f7ff ffa3 	bl	80040b4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	3301      	adds	r3, #1
 8004172:	71fb      	strb	r3, [r7, #7]
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	2b03      	cmp	r3, #3
 8004178:	d9f6      	bls.n	8004168 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 800417a:	2300      	movs	r3, #0
 800417c:	71bb      	strb	r3, [r7, #6]
 800417e:	e00b      	b.n	8004198 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004180:	79bc      	ldrb	r4, [r7, #6]
 8004182:	20a5      	movs	r0, #165	; 0xa5
 8004184:	f7ff ff96 	bl	80040b4 <W25qxx_Spi>
 8004188:	4603      	mov	r3, r0
 800418a:	461a      	mov	r2, r3
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <W25qxx_ReadUniqID+0x68>)
 800418e:	4423      	add	r3, r4
 8004190:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8004192:	79bb      	ldrb	r3, [r7, #6]
 8004194:	3301      	adds	r3, #1
 8004196:	71bb      	strb	r3, [r7, #6]
 8004198:	79bb      	ldrb	r3, [r7, #6]
 800419a:	2b07      	cmp	r3, #7
 800419c:	d9f0      	bls.n	8004180 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800419e:	2201      	movs	r2, #1
 80041a0:	2140      	movs	r1, #64	; 0x40
 80041a2:	4803      	ldr	r0, [pc, #12]	; (80041b0 <W25qxx_ReadUniqID+0x64>)
 80041a4:	f003 fd94 	bl	8007cd0 <HAL_GPIO_WritePin>
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd90      	pop	{r4, r7, pc}
 80041b0:	58020400 	.word	0x58020400
 80041b4:	240006d8 	.word	0x240006d8

080041b8 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80041bc:	2200      	movs	r2, #0
 80041be:	2140      	movs	r1, #64	; 0x40
 80041c0:	4807      	ldr	r0, [pc, #28]	; (80041e0 <W25qxx_WriteEnable+0x28>)
 80041c2:	f003 fd85 	bl	8007cd0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80041c6:	2006      	movs	r0, #6
 80041c8:	f7ff ff74 	bl	80040b4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80041cc:	2201      	movs	r2, #1
 80041ce:	2140      	movs	r1, #64	; 0x40
 80041d0:	4803      	ldr	r0, [pc, #12]	; (80041e0 <W25qxx_WriteEnable+0x28>)
 80041d2:	f003 fd7d 	bl	8007cd0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80041d6:	2001      	movs	r0, #1
 80041d8:	f000 fc36 	bl	8004a48 <HAL_Delay>
}
 80041dc:	bf00      	nop
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	58020400 	.word	0x58020400

080041e4 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80041ee:	2300      	movs	r3, #0
 80041f0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80041f2:	2200      	movs	r2, #0
 80041f4:	2140      	movs	r1, #64	; 0x40
 80041f6:	481c      	ldr	r0, [pc, #112]	; (8004268 <W25qxx_ReadStatusRegister+0x84>)
 80041f8:	f003 fd6a 	bl	8007cd0 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d10c      	bne.n	800421c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8004202:	2005      	movs	r0, #5
 8004204:	f7ff ff56 	bl	80040b4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004208:	20a5      	movs	r0, #165	; 0xa5
 800420a:	f7ff ff53 	bl	80040b4 <W25qxx_Spi>
 800420e:	4603      	mov	r3, r0
 8004210:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8004212:	4a16      	ldr	r2, [pc, #88]	; (800426c <W25qxx_ReadStatusRegister+0x88>)
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800421a:	e01b      	b.n	8004254 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d10c      	bne.n	800423c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8004222:	2035      	movs	r0, #53	; 0x35
 8004224:	f7ff ff46 	bl	80040b4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004228:	20a5      	movs	r0, #165	; 0xa5
 800422a:	f7ff ff43 	bl	80040b4 <W25qxx_Spi>
 800422e:	4603      	mov	r3, r0
 8004230:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8004232:	4a0e      	ldr	r2, [pc, #56]	; (800426c <W25qxx_ReadStatusRegister+0x88>)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800423a:	e00b      	b.n	8004254 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 800423c:	2015      	movs	r0, #21
 800423e:	f7ff ff39 	bl	80040b4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004242:	20a5      	movs	r0, #165	; 0xa5
 8004244:	f7ff ff36 	bl	80040b4 <W25qxx_Spi>
 8004248:	4603      	mov	r3, r0
 800424a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800424c:	4a07      	ldr	r2, [pc, #28]	; (800426c <W25qxx_ReadStatusRegister+0x88>)
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004254:	2201      	movs	r2, #1
 8004256:	2140      	movs	r1, #64	; 0x40
 8004258:	4803      	ldr	r0, [pc, #12]	; (8004268 <W25qxx_ReadStatusRegister+0x84>)
 800425a:	f003 fd39 	bl	8007cd0 <HAL_GPIO_WritePin>
	return status;
 800425e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	58020400 	.word	0x58020400
 800426c:	240006d8 	.word	0x240006d8

08004270 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8004274:	2001      	movs	r0, #1
 8004276:	f000 fbe7 	bl	8004a48 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800427a:	2200      	movs	r2, #0
 800427c:	2140      	movs	r1, #64	; 0x40
 800427e:	480f      	ldr	r0, [pc, #60]	; (80042bc <W25qxx_WaitForWriteEnd+0x4c>)
 8004280:	f003 fd26 	bl	8007cd0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8004284:	2005      	movs	r0, #5
 8004286:	f7ff ff15 	bl	80040b4 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800428a:	20a5      	movs	r0, #165	; 0xa5
 800428c:	f7ff ff12 	bl	80040b4 <W25qxx_Spi>
 8004290:	4603      	mov	r3, r0
 8004292:	461a      	mov	r2, r3
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <W25qxx_WaitForWriteEnd+0x50>)
 8004296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 800429a:	2001      	movs	r0, #1
 800429c:	f000 fbd4 	bl	8004a48 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <W25qxx_WaitForWriteEnd+0x50>)
 80042a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1ed      	bne.n	800428a <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042ae:	2201      	movs	r2, #1
 80042b0:	2140      	movs	r1, #64	; 0x40
 80042b2:	4802      	ldr	r0, [pc, #8]	; (80042bc <W25qxx_WaitForWriteEnd+0x4c>)
 80042b4:	f003 fd0c 	bl	8007cd0 <HAL_GPIO_WritePin>
}
 80042b8:	bf00      	nop
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	58020400 	.word	0x58020400
 80042c0:	240006d8 	.word	0x240006d8

080042c4 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80042ca:	4b65      	ldr	r3, [pc, #404]	; (8004460 <W25qxx_Init+0x19c>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80042d2:	e002      	b.n	80042da <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80042d4:	2001      	movs	r0, #1
 80042d6:	f000 fbb7 	bl	8004a48 <HAL_Delay>
	while (HAL_GetTick() < 100)
 80042da:	f000 fba9 	bl	8004a30 <HAL_GetTick>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b63      	cmp	r3, #99	; 0x63
 80042e2:	d9f7      	bls.n	80042d4 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042e4:	2201      	movs	r2, #1
 80042e6:	2140      	movs	r1, #64	; 0x40
 80042e8:	485e      	ldr	r0, [pc, #376]	; (8004464 <W25qxx_Init+0x1a0>)
 80042ea:	f003 fcf1 	bl	8007cd0 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80042ee:	2064      	movs	r0, #100	; 0x64
 80042f0:	f000 fbaa 	bl	8004a48 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80042f4:	f7ff fef4 	bl	80040e0 <W25qxx_ReadID>
 80042f8:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	3b11      	subs	r3, #17
 8004300:	2b0f      	cmp	r3, #15
 8004302:	d86c      	bhi.n	80043de <W25qxx_Init+0x11a>
 8004304:	a201      	add	r2, pc, #4	; (adr r2, 800430c <W25qxx_Init+0x48>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	080043d1 	.word	0x080043d1
 8004310:	080043c3 	.word	0x080043c3
 8004314:	080043b5 	.word	0x080043b5
 8004318:	080043a7 	.word	0x080043a7
 800431c:	08004399 	.word	0x08004399
 8004320:	0800438b 	.word	0x0800438b
 8004324:	0800437d 	.word	0x0800437d
 8004328:	0800436d 	.word	0x0800436d
 800432c:	0800435d 	.word	0x0800435d
 8004330:	080043df 	.word	0x080043df
 8004334:	080043df 	.word	0x080043df
 8004338:	080043df 	.word	0x080043df
 800433c:	080043df 	.word	0x080043df
 8004340:	080043df 	.word	0x080043df
 8004344:	080043df 	.word	0x080043df
 8004348:	0800434d 	.word	0x0800434d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 800434c:	4b44      	ldr	r3, [pc, #272]	; (8004460 <W25qxx_Init+0x19c>)
 800434e:	220a      	movs	r2, #10
 8004350:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8004352:	4b43      	ldr	r3, [pc, #268]	; (8004460 <W25qxx_Init+0x19c>)
 8004354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004358:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800435a:	e046      	b.n	80043ea <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800435c:	4b40      	ldr	r3, [pc, #256]	; (8004460 <W25qxx_Init+0x19c>)
 800435e:	2209      	movs	r2, #9
 8004360:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004362:	4b3f      	ldr	r3, [pc, #252]	; (8004460 <W25qxx_Init+0x19c>)
 8004364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004368:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800436a:	e03e      	b.n	80043ea <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 800436c:	4b3c      	ldr	r3, [pc, #240]	; (8004460 <W25qxx_Init+0x19c>)
 800436e:	2208      	movs	r2, #8
 8004370:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8004372:	4b3b      	ldr	r3, [pc, #236]	; (8004460 <W25qxx_Init+0x19c>)
 8004374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004378:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800437a:	e036      	b.n	80043ea <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800437c:	4b38      	ldr	r3, [pc, #224]	; (8004460 <W25qxx_Init+0x19c>)
 800437e:	2207      	movs	r2, #7
 8004380:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004382:	4b37      	ldr	r3, [pc, #220]	; (8004460 <W25qxx_Init+0x19c>)
 8004384:	2280      	movs	r2, #128	; 0x80
 8004386:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8004388:	e02f      	b.n	80043ea <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800438a:	4b35      	ldr	r3, [pc, #212]	; (8004460 <W25qxx_Init+0x19c>)
 800438c:	2206      	movs	r2, #6
 800438e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004390:	4b33      	ldr	r3, [pc, #204]	; (8004460 <W25qxx_Init+0x19c>)
 8004392:	2240      	movs	r2, #64	; 0x40
 8004394:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8004396:	e028      	b.n	80043ea <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004398:	4b31      	ldr	r3, [pc, #196]	; (8004460 <W25qxx_Init+0x19c>)
 800439a:	2205      	movs	r2, #5
 800439c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800439e:	4b30      	ldr	r3, [pc, #192]	; (8004460 <W25qxx_Init+0x19c>)
 80043a0:	2220      	movs	r2, #32
 80043a2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 80043a4:	e021      	b.n	80043ea <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80043a6:	4b2e      	ldr	r3, [pc, #184]	; (8004460 <W25qxx_Init+0x19c>)
 80043a8:	2204      	movs	r2, #4
 80043aa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80043ac:	4b2c      	ldr	r3, [pc, #176]	; (8004460 <W25qxx_Init+0x19c>)
 80043ae:	2210      	movs	r2, #16
 80043b0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 80043b2:	e01a      	b.n	80043ea <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80043b4:	4b2a      	ldr	r3, [pc, #168]	; (8004460 <W25qxx_Init+0x19c>)
 80043b6:	2203      	movs	r2, #3
 80043b8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80043ba:	4b29      	ldr	r3, [pc, #164]	; (8004460 <W25qxx_Init+0x19c>)
 80043bc:	2208      	movs	r2, #8
 80043be:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 80043c0:	e013      	b.n	80043ea <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80043c2:	4b27      	ldr	r3, [pc, #156]	; (8004460 <W25qxx_Init+0x19c>)
 80043c4:	2202      	movs	r2, #2
 80043c6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80043c8:	4b25      	ldr	r3, [pc, #148]	; (8004460 <W25qxx_Init+0x19c>)
 80043ca:	2204      	movs	r2, #4
 80043cc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 80043ce:	e00c      	b.n	80043ea <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80043d0:	4b23      	ldr	r3, [pc, #140]	; (8004460 <W25qxx_Init+0x19c>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80043d6:	4b22      	ldr	r3, [pc, #136]	; (8004460 <W25qxx_Init+0x19c>)
 80043d8:	2202      	movs	r2, #2
 80043da:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 80043dc:	e005      	b.n	80043ea <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 80043de:	4b20      	ldr	r3, [pc, #128]	; (8004460 <W25qxx_Init+0x19c>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80043e6:	2300      	movs	r3, #0
 80043e8:	e036      	b.n	8004458 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 80043ea:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <W25qxx_Init+0x19c>)
 80043ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043f0:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80043f2:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <W25qxx_Init+0x19c>)
 80043f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043f8:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80043fa:	4b19      	ldr	r3, [pc, #100]	; (8004460 <W25qxx_Init+0x19c>)
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	4a17      	ldr	r2, [pc, #92]	; (8004460 <W25qxx_Init+0x19c>)
 8004402:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004404:	4b16      	ldr	r3, [pc, #88]	; (8004460 <W25qxx_Init+0x19c>)
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	4a15      	ldr	r2, [pc, #84]	; (8004460 <W25qxx_Init+0x19c>)
 800440a:	6912      	ldr	r2, [r2, #16]
 800440c:	fb02 f303 	mul.w	r3, r2, r3
 8004410:	4a13      	ldr	r2, [pc, #76]	; (8004460 <W25qxx_Init+0x19c>)
 8004412:	8952      	ldrh	r2, [r2, #10]
 8004414:	fbb3 f3f2 	udiv	r3, r3, r2
 8004418:	4a11      	ldr	r2, [pc, #68]	; (8004460 <W25qxx_Init+0x19c>)
 800441a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800441c:	4b10      	ldr	r3, [pc, #64]	; (8004460 <W25qxx_Init+0x19c>)
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	4a0f      	ldr	r2, [pc, #60]	; (8004460 <W25qxx_Init+0x19c>)
 8004424:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004426:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <W25qxx_Init+0x19c>)
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	4a0d      	ldr	r2, [pc, #52]	; (8004460 <W25qxx_Init+0x19c>)
 800442c:	6912      	ldr	r2, [r2, #16]
 800442e:	fb02 f303 	mul.w	r3, r2, r3
 8004432:	0a9b      	lsrs	r3, r3, #10
 8004434:	4a0a      	ldr	r2, [pc, #40]	; (8004460 <W25qxx_Init+0x19c>)
 8004436:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8004438:	f7ff fe88 	bl	800414c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800443c:	2001      	movs	r0, #1
 800443e:	f7ff fed1 	bl	80041e4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004442:	2002      	movs	r0, #2
 8004444:	f7ff fece 	bl	80041e4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8004448:	2003      	movs	r0, #3
 800444a:	f7ff fecb 	bl	80041e4 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 800444e:	4b04      	ldr	r3, [pc, #16]	; (8004460 <W25qxx_Init+0x19c>)
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004456:	2301      	movs	r3, #1
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	240006d8 	.word	0x240006d8
 8004464:	58020400 	.word	0x58020400

08004468 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004470:	e002      	b.n	8004478 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8004472:	2001      	movs	r0, #1
 8004474:	f000 fae8 	bl	8004a48 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004478:	4b25      	ldr	r3, [pc, #148]	; (8004510 <W25qxx_EraseSector+0xa8>)
 800447a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800447e:	2b01      	cmp	r3, #1
 8004480:	d0f7      	beq.n	8004472 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8004482:	4b23      	ldr	r3, [pc, #140]	; (8004510 <W25qxx_EraseSector+0xa8>)
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 800448a:	f7ff fef1 	bl	8004270 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 800448e:	4b20      	ldr	r3, [pc, #128]	; (8004510 <W25qxx_EraseSector+0xa8>)
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 800449a:	f7ff fe8d 	bl	80041b8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800449e:	2200      	movs	r2, #0
 80044a0:	2140      	movs	r1, #64	; 0x40
 80044a2:	481c      	ldr	r0, [pc, #112]	; (8004514 <W25qxx_EraseSector+0xac>)
 80044a4:	f003 fc14 	bl	8007cd0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80044a8:	4b19      	ldr	r3, [pc, #100]	; (8004510 <W25qxx_EraseSector+0xa8>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d909      	bls.n	80044c4 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 80044b0:	2021      	movs	r0, #33	; 0x21
 80044b2:	f7ff fdff 	bl	80040b4 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	0e1b      	lsrs	r3, r3, #24
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fdf9 	bl	80040b4 <W25qxx_Spi>
 80044c2:	e002      	b.n	80044ca <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 80044c4:	2020      	movs	r0, #32
 80044c6:	f7ff fdf5 	bl	80040b4 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0c1b      	lsrs	r3, r3, #16
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fdef 	bl	80040b4 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0a1b      	lsrs	r3, r3, #8
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff fde9 	bl	80040b4 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff fde4 	bl	80040b4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80044ec:	2201      	movs	r2, #1
 80044ee:	2140      	movs	r1, #64	; 0x40
 80044f0:	4808      	ldr	r0, [pc, #32]	; (8004514 <W25qxx_EraseSector+0xac>)
 80044f2:	f003 fbed 	bl	8007cd0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80044f6:	f7ff febb 	bl	8004270 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 80044fa:	2001      	movs	r0, #1
 80044fc:	f000 faa4 	bl	8004a48 <HAL_Delay>
	w25qxx.Lock = 0;
 8004500:	4b03      	ldr	r3, [pc, #12]	; (8004510 <W25qxx_EraseSector+0xa8>)
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	240006d8 	.word	0x240006d8
 8004514:	58020400 	.word	0x58020400

08004518 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004520:	4b07      	ldr	r3, [pc, #28]	; (8004540 <W25qxx_SectorToPage+0x28>)
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	4a05      	ldr	r2, [pc, #20]	; (8004540 <W25qxx_SectorToPage+0x28>)
 800452c:	8952      	ldrh	r2, [r2, #10]
 800452e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	240006d8 	.word	0x240006d8

08004544 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004552:	e002      	b.n	800455a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004554:	2001      	movs	r0, #1
 8004556:	f000 fa77 	bl	8004a48 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800455a:	4b39      	ldr	r3, [pc, #228]	; (8004640 <W25qxx_WritePage+0xfc>)
 800455c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004560:	2b01      	cmp	r3, #1
 8004562:	d0f7      	beq.n	8004554 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8004564:	4b36      	ldr	r3, [pc, #216]	; (8004640 <W25qxx_WritePage+0xfc>)
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4413      	add	r3, r2
 8004572:	4a33      	ldr	r2, [pc, #204]	; (8004640 <W25qxx_WritePage+0xfc>)
 8004574:	8952      	ldrh	r2, [r2, #10]
 8004576:	4293      	cmp	r3, r2
 8004578:	d802      	bhi.n	8004580 <W25qxx_WritePage+0x3c>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d105      	bne.n	800458c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004580:	4b2f      	ldr	r3, [pc, #188]	; (8004640 <W25qxx_WritePage+0xfc>)
 8004582:	895b      	ldrh	r3, [r3, #10]
 8004584:	461a      	mov	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	4413      	add	r3, r2
 8004592:	4a2b      	ldr	r2, [pc, #172]	; (8004640 <W25qxx_WritePage+0xfc>)
 8004594:	8952      	ldrh	r2, [r2, #10]
 8004596:	4293      	cmp	r3, r2
 8004598:	d905      	bls.n	80045a6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800459a:	4b29      	ldr	r3, [pc, #164]	; (8004640 <W25qxx_WritePage+0xfc>)
 800459c:	895b      	ldrh	r3, [r3, #10]
 800459e:	461a      	mov	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 80045a6:	f7ff fe63 	bl	8004270 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80045aa:	f7ff fe05 	bl	80041b8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80045ae:	2200      	movs	r2, #0
 80045b0:	2140      	movs	r1, #64	; 0x40
 80045b2:	4824      	ldr	r0, [pc, #144]	; (8004644 <W25qxx_WritePage+0x100>)
 80045b4:	f003 fb8c 	bl	8007cd0 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80045b8:	4b21      	ldr	r3, [pc, #132]	; (8004640 <W25qxx_WritePage+0xfc>)
 80045ba:	895b      	ldrh	r3, [r3, #10]
 80045bc:	461a      	mov	r2, r3
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	fb03 f302 	mul.w	r3, r3, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4413      	add	r3, r2
 80045c8:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80045ca:	4b1d      	ldr	r3, [pc, #116]	; (8004640 <W25qxx_WritePage+0xfc>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d909      	bls.n	80045e6 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 80045d2:	2012      	movs	r0, #18
 80045d4:	f7ff fd6e 	bl	80040b4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	0e1b      	lsrs	r3, r3, #24
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fd68 	bl	80040b4 <W25qxx_Spi>
 80045e4:	e002      	b.n	80045ec <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 80045e6:	2002      	movs	r0, #2
 80045e8:	f7ff fd64 	bl	80040b4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	0c1b      	lsrs	r3, r3, #16
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fd5e 	bl	80040b4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	0a1b      	lsrs	r3, r3, #8
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fd58 	bl	80040b4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fd53 	bl	80040b4 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	b29a      	uxth	r2, r3
 8004612:	2364      	movs	r3, #100	; 0x64
 8004614:	68f9      	ldr	r1, [r7, #12]
 8004616:	480c      	ldr	r0, [pc, #48]	; (8004648 <W25qxx_WritePage+0x104>)
 8004618:	f008 fa1c 	bl	800ca54 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800461c:	2201      	movs	r2, #1
 800461e:	2140      	movs	r1, #64	; 0x40
 8004620:	4808      	ldr	r0, [pc, #32]	; (8004644 <W25qxx_WritePage+0x100>)
 8004622:	f003 fb55 	bl	8007cd0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004626:	f7ff fe23 	bl	8004270 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800462a:	2001      	movs	r0, #1
 800462c:	f000 fa0c 	bl	8004a48 <HAL_Delay>
	w25qxx.Lock = 0;
 8004630:	4b03      	ldr	r3, [pc, #12]	; (8004640 <W25qxx_WritePage+0xfc>)
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004638:	bf00      	nop
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	240006d8 	.word	0x240006d8
 8004644:	58020400 	.word	0x58020400
 8004648:	24000544 	.word	0x24000544

0800464c <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800465a:	4b2c      	ldr	r3, [pc, #176]	; (800470c <W25qxx_WriteSector+0xc0>)
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d802      	bhi.n	800466a <W25qxx_WriteSector+0x1e>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d102      	bne.n	8004670 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800466a:	4b28      	ldr	r3, [pc, #160]	; (800470c <W25qxx_WriteSector+0xc0>)
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004670:	4b26      	ldr	r3, [pc, #152]	; (800470c <W25qxx_WriteSector+0xc0>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	429a      	cmp	r2, r3
 8004678:	d243      	bcs.n	8004702 <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	441a      	add	r2, r3
 8004680:	4b22      	ldr	r3, [pc, #136]	; (800470c <W25qxx_WriteSector+0xc0>)
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	429a      	cmp	r2, r3
 8004686:	d905      	bls.n	8004694 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004688:	4b20      	ldr	r3, [pc, #128]	; (800470c <W25qxx_WriteSector+0xc0>)
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	61bb      	str	r3, [r7, #24]
 8004692:	e001      	b.n	8004698 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004698:	68b8      	ldr	r0, [r7, #8]
 800469a:	f7ff ff3d 	bl	8004518 <W25qxx_SectorToPage>
 800469e:	4602      	mov	r2, r0
 80046a0:	4b1a      	ldr	r3, [pc, #104]	; (800470c <W25qxx_WriteSector+0xc0>)
 80046a2:	895b      	ldrh	r3, [r3, #10]
 80046a4:	4619      	mov	r1, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80046ac:	4413      	add	r3, r2
 80046ae:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80046b0:	4b16      	ldr	r3, [pc, #88]	; (800470c <W25qxx_WriteSector+0xc0>)
 80046b2:	895b      	ldrh	r3, [r3, #10]
 80046b4:	461a      	mov	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80046bc:	fb02 f201 	mul.w	r2, r2, r1
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	69f9      	ldr	r1, [r7, #28]
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7ff ff3a 	bl	8004544 <W25qxx_WritePage>
		StartPage++;
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	3301      	adds	r3, #1
 80046d4:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80046d6:	4b0d      	ldr	r3, [pc, #52]	; (800470c <W25qxx_WriteSector+0xc0>)
 80046d8:	895b      	ldrh	r3, [r3, #10]
 80046da:	461a      	mov	r2, r3
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	1a9a      	subs	r2, r3, r2
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	4413      	add	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80046e6:	4b09      	ldr	r3, [pc, #36]	; (800470c <W25qxx_WriteSector+0xc0>)
 80046e8:	895b      	ldrh	r3, [r3, #10]
 80046ea:	461a      	mov	r2, r3
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	dce1      	bgt.n	80046c4 <W25qxx_WriteSector+0x78>
 8004700:	e000      	b.n	8004704 <W25qxx_WriteSector+0xb8>
		return;
 8004702:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8004704:	3720      	adds	r7, #32
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	240006d8 	.word	0x240006d8

08004710 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800471e:	e002      	b.n	8004726 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004720:	2001      	movs	r0, #1
 8004722:	f000 f991 	bl	8004a48 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004726:	4b36      	ldr	r3, [pc, #216]	; (8004800 <W25qxx_ReadPage+0xf0>)
 8004728:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800472c:	2b01      	cmp	r3, #1
 800472e:	d0f7      	beq.n	8004720 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004730:	4b33      	ldr	r3, [pc, #204]	; (8004800 <W25qxx_ReadPage+0xf0>)
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004738:	4b31      	ldr	r3, [pc, #196]	; (8004800 <W25qxx_ReadPage+0xf0>)
 800473a:	895b      	ldrh	r3, [r3, #10]
 800473c:	461a      	mov	r2, r3
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	4293      	cmp	r3, r2
 8004742:	d802      	bhi.n	800474a <W25qxx_ReadPage+0x3a>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800474a:	4b2d      	ldr	r3, [pc, #180]	; (8004800 <W25qxx_ReadPage+0xf0>)
 800474c:	895b      	ldrh	r3, [r3, #10]
 800474e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	4413      	add	r3, r2
 8004756:	4a2a      	ldr	r2, [pc, #168]	; (8004800 <W25qxx_ReadPage+0xf0>)
 8004758:	8952      	ldrh	r2, [r2, #10]
 800475a:	4293      	cmp	r3, r2
 800475c:	d905      	bls.n	800476a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800475e:	4b28      	ldr	r3, [pc, #160]	; (8004800 <W25qxx_ReadPage+0xf0>)
 8004760:	895b      	ldrh	r3, [r3, #10]
 8004762:	461a      	mov	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800476a:	4b25      	ldr	r3, [pc, #148]	; (8004800 <W25qxx_ReadPage+0xf0>)
 800476c:	895b      	ldrh	r3, [r3, #10]
 800476e:	461a      	mov	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	fb03 f302 	mul.w	r3, r3, r2
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800477c:	2200      	movs	r2, #0
 800477e:	2140      	movs	r1, #64	; 0x40
 8004780:	4820      	ldr	r0, [pc, #128]	; (8004804 <W25qxx_ReadPage+0xf4>)
 8004782:	f003 faa5 	bl	8007cd0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004786:	4b1e      	ldr	r3, [pc, #120]	; (8004800 <W25qxx_ReadPage+0xf0>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b08      	cmp	r3, #8
 800478c:	d909      	bls.n	80047a2 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 800478e:	200c      	movs	r0, #12
 8004790:	f7ff fc90 	bl	80040b4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	0e1b      	lsrs	r3, r3, #24
 8004798:	b2db      	uxtb	r3, r3
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff fc8a 	bl	80040b4 <W25qxx_Spi>
 80047a0:	e002      	b.n	80047a8 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80047a2:	200b      	movs	r0, #11
 80047a4:	f7ff fc86 	bl	80040b4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	0c1b      	lsrs	r3, r3, #16
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fc80 	bl	80040b4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	0a1b      	lsrs	r3, r3, #8
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fc7a 	bl	80040b4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff fc75 	bl	80040b4 <W25qxx_Spi>
	W25qxx_Spi(0);
 80047ca:	2000      	movs	r0, #0
 80047cc:	f7ff fc72 	bl	80040b4 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	2364      	movs	r3, #100	; 0x64
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	480b      	ldr	r0, [pc, #44]	; (8004808 <W25qxx_ReadPage+0xf8>)
 80047da:	f008 fb2d 	bl	800ce38 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80047de:	2201      	movs	r2, #1
 80047e0:	2140      	movs	r1, #64	; 0x40
 80047e2:	4808      	ldr	r0, [pc, #32]	; (8004804 <W25qxx_ReadPage+0xf4>)
 80047e4:	f003 fa74 	bl	8007cd0 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80047e8:	2001      	movs	r0, #1
 80047ea:	f000 f92d 	bl	8004a48 <HAL_Delay>
	w25qxx.Lock = 0;
 80047ee:	4b04      	ldr	r3, [pc, #16]	; (8004800 <W25qxx_ReadPage+0xf0>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	240006d8 	.word	0x240006d8
 8004804:	58020400 	.word	0x58020400
 8004808:	24000544 	.word	0x24000544

0800480c <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800481a:	4b2c      	ldr	r3, [pc, #176]	; (80048cc <W25qxx_ReadSector+0xc0>)
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d802      	bhi.n	800482a <W25qxx_ReadSector+0x1e>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d102      	bne.n	8004830 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 800482a:	4b28      	ldr	r3, [pc, #160]	; (80048cc <W25qxx_ReadSector+0xc0>)
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004830:	4b26      	ldr	r3, [pc, #152]	; (80048cc <W25qxx_ReadSector+0xc0>)
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	429a      	cmp	r2, r3
 8004838:	d243      	bcs.n	80048c2 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	441a      	add	r2, r3
 8004840:	4b22      	ldr	r3, [pc, #136]	; (80048cc <W25qxx_ReadSector+0xc0>)
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	429a      	cmp	r2, r3
 8004846:	d905      	bls.n	8004854 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004848:	4b20      	ldr	r3, [pc, #128]	; (80048cc <W25qxx_ReadSector+0xc0>)
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	e001      	b.n	8004858 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004858:	68b8      	ldr	r0, [r7, #8]
 800485a:	f7ff fe5d 	bl	8004518 <W25qxx_SectorToPage>
 800485e:	4602      	mov	r2, r0
 8004860:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <W25qxx_ReadSector+0xc0>)
 8004862:	895b      	ldrh	r3, [r3, #10]
 8004864:	4619      	mov	r1, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	fbb3 f3f1 	udiv	r3, r3, r1
 800486c:	4413      	add	r3, r2
 800486e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004870:	4b16      	ldr	r3, [pc, #88]	; (80048cc <W25qxx_ReadSector+0xc0>)
 8004872:	895b      	ldrh	r3, [r3, #10]
 8004874:	461a      	mov	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	fbb3 f1f2 	udiv	r1, r3, r2
 800487c:	fb02 f201 	mul.w	r2, r2, r1
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	69f9      	ldr	r1, [r7, #28]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f7ff ff40 	bl	8004710 <W25qxx_ReadPage>
		StartPage++;
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	3301      	adds	r3, #1
 8004894:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004896:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <W25qxx_ReadSector+0xc0>)
 8004898:	895b      	ldrh	r3, [r3, #10]
 800489a:	461a      	mov	r2, r3
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	1a9a      	subs	r2, r3, r2
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	4413      	add	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <W25qxx_ReadSector+0xc0>)
 80048a8:	895b      	ldrh	r3, [r3, #10]
 80048aa:	461a      	mov	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	dce1      	bgt.n	8004884 <W25qxx_ReadSector+0x78>
 80048c0:	e000      	b.n	80048c4 <W25qxx_ReadSector+0xb8>
		return;
 80048c2:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80048c4:	3720      	adds	r7, #32
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	240006d8 	.word	0x240006d8

080048d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80048d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004908 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80048d4:	f7ff fb62 	bl	8003f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80048d8:	480c      	ldr	r0, [pc, #48]	; (800490c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80048da:	490d      	ldr	r1, [pc, #52]	; (8004910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80048dc:	4a0d      	ldr	r2, [pc, #52]	; (8004914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80048de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048e0:	e002      	b.n	80048e8 <LoopCopyDataInit>

080048e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048e6:	3304      	adds	r3, #4

080048e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048ec:	d3f9      	bcc.n	80048e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048ee:	4a0a      	ldr	r2, [pc, #40]	; (8004918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80048f0:	4c0a      	ldr	r4, [pc, #40]	; (800491c <LoopFillZerobss+0x22>)
  movs r3, #0
 80048f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048f4:	e001      	b.n	80048fa <LoopFillZerobss>

080048f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048f8:	3204      	adds	r2, #4

080048fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048fc:	d3fb      	bcc.n	80048f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80048fe:	f00b fd57 	bl	80103b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004902:	f7fe f98d 	bl	8002c20 <main>
  bx  lr
 8004906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004908:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800490c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004910:	240001fc 	.word	0x240001fc
  ldr r2, =_sidata
 8004914:	08013c58 	.word	0x08013c58
  ldr r2, =_sbss
 8004918:	240001fc 	.word	0x240001fc
  ldr r4, =_ebss
 800491c:	24000714 	.word	0x24000714

08004920 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004920:	e7fe      	b.n	8004920 <ADC3_IRQHandler>
	...

08004924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800492a:	2003      	movs	r0, #3
 800492c:	f000 f98c 	bl	8004c48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004930:	f006 fa56 	bl	800ade0 <HAL_RCC_GetSysClockFreq>
 8004934:	4602      	mov	r2, r0
 8004936:	4b15      	ldr	r3, [pc, #84]	; (800498c <HAL_Init+0x68>)
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	0a1b      	lsrs	r3, r3, #8
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	4913      	ldr	r1, [pc, #76]	; (8004990 <HAL_Init+0x6c>)
 8004942:	5ccb      	ldrb	r3, [r1, r3]
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
 800494c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800494e:	4b0f      	ldr	r3, [pc, #60]	; (800498c <HAL_Init+0x68>)
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	4a0e      	ldr	r2, [pc, #56]	; (8004990 <HAL_Init+0x6c>)
 8004958:	5cd3      	ldrb	r3, [r2, r3]
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	fa22 f303 	lsr.w	r3, r2, r3
 8004964:	4a0b      	ldr	r2, [pc, #44]	; (8004994 <HAL_Init+0x70>)
 8004966:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004968:	4a0b      	ldr	r2, [pc, #44]	; (8004998 <HAL_Init+0x74>)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800496e:	200f      	movs	r0, #15
 8004970:	f000 f814 	bl	800499c <HAL_InitTick>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e002      	b.n	8004984 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800497e:	f7fe fe95 	bl	80036ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	58024400 	.word	0x58024400
 8004990:	0801377c 	.word	0x0801377c
 8004994:	2400001c 	.word	0x2400001c
 8004998:	24000018 	.word	0x24000018

0800499c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80049a4:	4b15      	ldr	r3, [pc, #84]	; (80049fc <HAL_InitTick+0x60>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e021      	b.n	80049f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80049b0:	4b13      	ldr	r3, [pc, #76]	; (8004a00 <HAL_InitTick+0x64>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4b11      	ldr	r3, [pc, #68]	; (80049fc <HAL_InitTick+0x60>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	4619      	mov	r1, r3
 80049ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049be:	fbb3 f3f1 	udiv	r3, r3, r1
 80049c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f971 	bl	8004cae <HAL_SYSTICK_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e00e      	b.n	80049f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b0f      	cmp	r3, #15
 80049da:	d80a      	bhi.n	80049f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049dc:	2200      	movs	r2, #0
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	f04f 30ff 	mov.w	r0, #4294967295
 80049e4:	f000 f93b 	bl	8004c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049e8:	4a06      	ldr	r2, [pc, #24]	; (8004a04 <HAL_InitTick+0x68>)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e000      	b.n	80049f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	24000024 	.word	0x24000024
 8004a00:	24000018 	.word	0x24000018
 8004a04:	24000020 	.word	0x24000020

08004a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <HAL_IncTick+0x20>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <HAL_IncTick+0x24>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4413      	add	r3, r2
 8004a18:	4a04      	ldr	r2, [pc, #16]	; (8004a2c <HAL_IncTick+0x24>)
 8004a1a:	6013      	str	r3, [r2, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	24000024 	.word	0x24000024
 8004a2c:	24000700 	.word	0x24000700

08004a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  return uwTick;
 8004a34:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <HAL_GetTick+0x14>)
 8004a36:	681b      	ldr	r3, [r3, #0]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	24000700 	.word	0x24000700

08004a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a50:	f7ff ffee 	bl	8004a30 <HAL_GetTick>
 8004a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d005      	beq.n	8004a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a62:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <HAL_Delay+0x44>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a6e:	bf00      	nop
 8004a70:	f7ff ffde 	bl	8004a30 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d8f7      	bhi.n	8004a70 <HAL_Delay+0x28>
  {
  }
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	24000024 	.word	0x24000024

08004a90 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004a94:	4b03      	ldr	r3, [pc, #12]	; (8004aa4 <HAL_GetREVID+0x14>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	0c1b      	lsrs	r3, r3, #16
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	5c001000 	.word	0x5c001000

08004aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <__NVIC_SetPriorityGrouping+0x40>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <__NVIC_SetPriorityGrouping+0x44>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ad6:	4a04      	ldr	r2, [pc, #16]	; (8004ae8 <__NVIC_SetPriorityGrouping+0x40>)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	60d3      	str	r3, [r2, #12]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	e000ed00 	.word	0xe000ed00
 8004aec:	05fa0000 	.word	0x05fa0000

08004af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <__NVIC_GetPriorityGrouping+0x18>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	0a1b      	lsrs	r3, r3, #8
 8004afa:	f003 0307 	and.w	r3, r3, #7
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	e000ed00 	.word	0xe000ed00

08004b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	db0b      	blt.n	8004b36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b1e:	88fb      	ldrh	r3, [r7, #6]
 8004b20:	f003 021f 	and.w	r2, r3, #31
 8004b24:	4907      	ldr	r1, [pc, #28]	; (8004b44 <__NVIC_EnableIRQ+0x38>)
 8004b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	e000e100 	.word	0xe000e100

08004b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	6039      	str	r1, [r7, #0]
 8004b52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	db0a      	blt.n	8004b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	490c      	ldr	r1, [pc, #48]	; (8004b94 <__NVIC_SetPriority+0x4c>)
 8004b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b66:	0112      	lsls	r2, r2, #4
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b70:	e00a      	b.n	8004b88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	4908      	ldr	r1, [pc, #32]	; (8004b98 <__NVIC_SetPriority+0x50>)
 8004b78:	88fb      	ldrh	r3, [r7, #6]
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	3b04      	subs	r3, #4
 8004b80:	0112      	lsls	r2, r2, #4
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	440b      	add	r3, r1
 8004b86:	761a      	strb	r2, [r3, #24]
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	e000e100 	.word	0xe000e100
 8004b98:	e000ed00 	.word	0xe000ed00

08004b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b089      	sub	sp, #36	; 0x24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	f1c3 0307 	rsb	r3, r3, #7
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	bf28      	it	cs
 8004bba:	2304      	movcs	r3, #4
 8004bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	2b06      	cmp	r3, #6
 8004bc4:	d902      	bls.n	8004bcc <NVIC_EncodePriority+0x30>
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	3b03      	subs	r3, #3
 8004bca:	e000      	b.n	8004bce <NVIC_EncodePriority+0x32>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	43da      	mvns	r2, r3
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	401a      	ands	r2, r3
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004be4:	f04f 31ff 	mov.w	r1, #4294967295
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	fa01 f303 	lsl.w	r3, r1, r3
 8004bee:	43d9      	mvns	r1, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf4:	4313      	orrs	r3, r2
         );
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3724      	adds	r7, #36	; 0x24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
	...

08004c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c14:	d301      	bcc.n	8004c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c16:	2301      	movs	r3, #1
 8004c18:	e00f      	b.n	8004c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c1a:	4a0a      	ldr	r2, [pc, #40]	; (8004c44 <SysTick_Config+0x40>)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c22:	210f      	movs	r1, #15
 8004c24:	f04f 30ff 	mov.w	r0, #4294967295
 8004c28:	f7ff ff8e 	bl	8004b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <SysTick_Config+0x40>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c32:	4b04      	ldr	r3, [pc, #16]	; (8004c44 <SysTick_Config+0x40>)
 8004c34:	2207      	movs	r2, #7
 8004c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	e000e010 	.word	0xe000e010

08004c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff ff29 	bl	8004aa8 <__NVIC_SetPriorityGrouping>
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b086      	sub	sp, #24
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	4603      	mov	r3, r0
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	607a      	str	r2, [r7, #4]
 8004c6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c6c:	f7ff ff40 	bl	8004af0 <__NVIC_GetPriorityGrouping>
 8004c70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	6978      	ldr	r0, [r7, #20]
 8004c78:	f7ff ff90 	bl	8004b9c <NVIC_EncodePriority>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c82:	4611      	mov	r1, r2
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff ff5f 	bl	8004b48 <__NVIC_SetPriority>
}
 8004c8a:	bf00      	nop
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	4603      	mov	r3, r0
 8004c9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff ff33 	bl	8004b0c <__NVIC_EnableIRQ>
}
 8004ca6:	bf00      	nop
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b082      	sub	sp, #8
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff ffa4 	bl	8004c04 <SysTick_Config>
 8004cbc:	4603      	mov	r3, r0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004cd0:	f7ff feae 	bl	8004a30 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e316      	b.n	800530e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a66      	ldr	r2, [pc, #408]	; (8004e80 <HAL_DMA_Init+0x1b8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d04a      	beq.n	8004d80 <HAL_DMA_Init+0xb8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a65      	ldr	r2, [pc, #404]	; (8004e84 <HAL_DMA_Init+0x1bc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d045      	beq.n	8004d80 <HAL_DMA_Init+0xb8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a63      	ldr	r2, [pc, #396]	; (8004e88 <HAL_DMA_Init+0x1c0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d040      	beq.n	8004d80 <HAL_DMA_Init+0xb8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a62      	ldr	r2, [pc, #392]	; (8004e8c <HAL_DMA_Init+0x1c4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d03b      	beq.n	8004d80 <HAL_DMA_Init+0xb8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a60      	ldr	r2, [pc, #384]	; (8004e90 <HAL_DMA_Init+0x1c8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d036      	beq.n	8004d80 <HAL_DMA_Init+0xb8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a5f      	ldr	r2, [pc, #380]	; (8004e94 <HAL_DMA_Init+0x1cc>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d031      	beq.n	8004d80 <HAL_DMA_Init+0xb8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a5d      	ldr	r2, [pc, #372]	; (8004e98 <HAL_DMA_Init+0x1d0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d02c      	beq.n	8004d80 <HAL_DMA_Init+0xb8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a5c      	ldr	r2, [pc, #368]	; (8004e9c <HAL_DMA_Init+0x1d4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d027      	beq.n	8004d80 <HAL_DMA_Init+0xb8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a5a      	ldr	r2, [pc, #360]	; (8004ea0 <HAL_DMA_Init+0x1d8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d022      	beq.n	8004d80 <HAL_DMA_Init+0xb8>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a59      	ldr	r2, [pc, #356]	; (8004ea4 <HAL_DMA_Init+0x1dc>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d01d      	beq.n	8004d80 <HAL_DMA_Init+0xb8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a57      	ldr	r2, [pc, #348]	; (8004ea8 <HAL_DMA_Init+0x1e0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d018      	beq.n	8004d80 <HAL_DMA_Init+0xb8>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a56      	ldr	r2, [pc, #344]	; (8004eac <HAL_DMA_Init+0x1e4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <HAL_DMA_Init+0xb8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a54      	ldr	r2, [pc, #336]	; (8004eb0 <HAL_DMA_Init+0x1e8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00e      	beq.n	8004d80 <HAL_DMA_Init+0xb8>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a53      	ldr	r2, [pc, #332]	; (8004eb4 <HAL_DMA_Init+0x1ec>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d009      	beq.n	8004d80 <HAL_DMA_Init+0xb8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a51      	ldr	r2, [pc, #324]	; (8004eb8 <HAL_DMA_Init+0x1f0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d004      	beq.n	8004d80 <HAL_DMA_Init+0xb8>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a50      	ldr	r2, [pc, #320]	; (8004ebc <HAL_DMA_Init+0x1f4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d101      	bne.n	8004d84 <HAL_DMA_Init+0xbc>
 8004d80:	2301      	movs	r3, #1
 8004d82:	e000      	b.n	8004d86 <HAL_DMA_Init+0xbe>
 8004d84:	2300      	movs	r3, #0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 813b 	beq.w	8005002 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a37      	ldr	r2, [pc, #220]	; (8004e80 <HAL_DMA_Init+0x1b8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d04a      	beq.n	8004e3c <HAL_DMA_Init+0x174>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a36      	ldr	r2, [pc, #216]	; (8004e84 <HAL_DMA_Init+0x1bc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d045      	beq.n	8004e3c <HAL_DMA_Init+0x174>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a34      	ldr	r2, [pc, #208]	; (8004e88 <HAL_DMA_Init+0x1c0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d040      	beq.n	8004e3c <HAL_DMA_Init+0x174>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a33      	ldr	r2, [pc, #204]	; (8004e8c <HAL_DMA_Init+0x1c4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d03b      	beq.n	8004e3c <HAL_DMA_Init+0x174>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a31      	ldr	r2, [pc, #196]	; (8004e90 <HAL_DMA_Init+0x1c8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d036      	beq.n	8004e3c <HAL_DMA_Init+0x174>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a30      	ldr	r2, [pc, #192]	; (8004e94 <HAL_DMA_Init+0x1cc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d031      	beq.n	8004e3c <HAL_DMA_Init+0x174>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2e      	ldr	r2, [pc, #184]	; (8004e98 <HAL_DMA_Init+0x1d0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d02c      	beq.n	8004e3c <HAL_DMA_Init+0x174>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a2d      	ldr	r2, [pc, #180]	; (8004e9c <HAL_DMA_Init+0x1d4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d027      	beq.n	8004e3c <HAL_DMA_Init+0x174>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a2b      	ldr	r2, [pc, #172]	; (8004ea0 <HAL_DMA_Init+0x1d8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d022      	beq.n	8004e3c <HAL_DMA_Init+0x174>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a2a      	ldr	r2, [pc, #168]	; (8004ea4 <HAL_DMA_Init+0x1dc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d01d      	beq.n	8004e3c <HAL_DMA_Init+0x174>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a28      	ldr	r2, [pc, #160]	; (8004ea8 <HAL_DMA_Init+0x1e0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d018      	beq.n	8004e3c <HAL_DMA_Init+0x174>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a27      	ldr	r2, [pc, #156]	; (8004eac <HAL_DMA_Init+0x1e4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d013      	beq.n	8004e3c <HAL_DMA_Init+0x174>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a25      	ldr	r2, [pc, #148]	; (8004eb0 <HAL_DMA_Init+0x1e8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00e      	beq.n	8004e3c <HAL_DMA_Init+0x174>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a24      	ldr	r2, [pc, #144]	; (8004eb4 <HAL_DMA_Init+0x1ec>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d009      	beq.n	8004e3c <HAL_DMA_Init+0x174>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a22      	ldr	r2, [pc, #136]	; (8004eb8 <HAL_DMA_Init+0x1f0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_DMA_Init+0x174>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a21      	ldr	r2, [pc, #132]	; (8004ebc <HAL_DMA_Init+0x1f4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d108      	bne.n	8004e4e <HAL_DMA_Init+0x186>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0201 	bic.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	e007      	b.n	8004e5e <HAL_DMA_Init+0x196>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e5e:	e02f      	b.n	8004ec0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e60:	f7ff fde6 	bl	8004a30 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b05      	cmp	r3, #5
 8004e6c:	d928      	bls.n	8004ec0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2220      	movs	r2, #32
 8004e72:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2203      	movs	r2, #3
 8004e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e246      	b.n	800530e <HAL_DMA_Init+0x646>
 8004e80:	40020010 	.word	0x40020010
 8004e84:	40020028 	.word	0x40020028
 8004e88:	40020040 	.word	0x40020040
 8004e8c:	40020058 	.word	0x40020058
 8004e90:	40020070 	.word	0x40020070
 8004e94:	40020088 	.word	0x40020088
 8004e98:	400200a0 	.word	0x400200a0
 8004e9c:	400200b8 	.word	0x400200b8
 8004ea0:	40020410 	.word	0x40020410
 8004ea4:	40020428 	.word	0x40020428
 8004ea8:	40020440 	.word	0x40020440
 8004eac:	40020458 	.word	0x40020458
 8004eb0:	40020470 	.word	0x40020470
 8004eb4:	40020488 	.word	0x40020488
 8004eb8:	400204a0 	.word	0x400204a0
 8004ebc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1c8      	bne.n	8004e60 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4b83      	ldr	r3, [pc, #524]	; (80050e8 <HAL_DMA_Init+0x420>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004ee6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ef2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004efe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d107      	bne.n	8004f24 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004f24:	4b71      	ldr	r3, [pc, #452]	; (80050ec <HAL_DMA_Init+0x424>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	4b71      	ldr	r3, [pc, #452]	; (80050f0 <HAL_DMA_Init+0x428>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f30:	d328      	bcc.n	8004f84 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b28      	cmp	r3, #40	; 0x28
 8004f38:	d903      	bls.n	8004f42 <HAL_DMA_Init+0x27a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f40:	d917      	bls.n	8004f72 <HAL_DMA_Init+0x2aa>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b3e      	cmp	r3, #62	; 0x3e
 8004f48:	d903      	bls.n	8004f52 <HAL_DMA_Init+0x28a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b42      	cmp	r3, #66	; 0x42
 8004f50:	d90f      	bls.n	8004f72 <HAL_DMA_Init+0x2aa>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b46      	cmp	r3, #70	; 0x46
 8004f58:	d903      	bls.n	8004f62 <HAL_DMA_Init+0x29a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b48      	cmp	r3, #72	; 0x48
 8004f60:	d907      	bls.n	8004f72 <HAL_DMA_Init+0x2aa>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b4e      	cmp	r3, #78	; 0x4e
 8004f68:	d905      	bls.n	8004f76 <HAL_DMA_Init+0x2ae>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b52      	cmp	r3, #82	; 0x52
 8004f70:	d801      	bhi.n	8004f76 <HAL_DMA_Init+0x2ae>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <HAL_DMA_Init+0x2b0>
 8004f76:	2300      	movs	r3, #0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f82:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f023 0307 	bic.w	r3, r3, #7
 8004f9a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d117      	bne.n	8004fde <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00e      	beq.n	8004fde <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f002 fb4b 	bl	800765c <DMA_CheckFifoParam>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2240      	movs	r2, #64	; 0x40
 8004fd0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e197      	b.n	800530e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f002 fa86 	bl	80074f8 <DMA_CalcBaseAndBitshift>
 8004fec:	4603      	mov	r3, r0
 8004fee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff4:	f003 031f 	and.w	r3, r3, #31
 8004ff8:	223f      	movs	r2, #63	; 0x3f
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	609a      	str	r2, [r3, #8]
 8005000:	e0cd      	b.n	800519e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a3b      	ldr	r2, [pc, #236]	; (80050f4 <HAL_DMA_Init+0x42c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d022      	beq.n	8005052 <HAL_DMA_Init+0x38a>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a39      	ldr	r2, [pc, #228]	; (80050f8 <HAL_DMA_Init+0x430>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01d      	beq.n	8005052 <HAL_DMA_Init+0x38a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a38      	ldr	r2, [pc, #224]	; (80050fc <HAL_DMA_Init+0x434>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d018      	beq.n	8005052 <HAL_DMA_Init+0x38a>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a36      	ldr	r2, [pc, #216]	; (8005100 <HAL_DMA_Init+0x438>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d013      	beq.n	8005052 <HAL_DMA_Init+0x38a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a35      	ldr	r2, [pc, #212]	; (8005104 <HAL_DMA_Init+0x43c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00e      	beq.n	8005052 <HAL_DMA_Init+0x38a>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a33      	ldr	r2, [pc, #204]	; (8005108 <HAL_DMA_Init+0x440>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d009      	beq.n	8005052 <HAL_DMA_Init+0x38a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a32      	ldr	r2, [pc, #200]	; (800510c <HAL_DMA_Init+0x444>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d004      	beq.n	8005052 <HAL_DMA_Init+0x38a>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a30      	ldr	r2, [pc, #192]	; (8005110 <HAL_DMA_Init+0x448>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d101      	bne.n	8005056 <HAL_DMA_Init+0x38e>
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <HAL_DMA_Init+0x390>
 8005056:	2300      	movs	r3, #0
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8097 	beq.w	800518c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a24      	ldr	r2, [pc, #144]	; (80050f4 <HAL_DMA_Init+0x42c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d021      	beq.n	80050ac <HAL_DMA_Init+0x3e4>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a22      	ldr	r2, [pc, #136]	; (80050f8 <HAL_DMA_Init+0x430>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01c      	beq.n	80050ac <HAL_DMA_Init+0x3e4>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a21      	ldr	r2, [pc, #132]	; (80050fc <HAL_DMA_Init+0x434>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d017      	beq.n	80050ac <HAL_DMA_Init+0x3e4>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1f      	ldr	r2, [pc, #124]	; (8005100 <HAL_DMA_Init+0x438>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d012      	beq.n	80050ac <HAL_DMA_Init+0x3e4>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1e      	ldr	r2, [pc, #120]	; (8005104 <HAL_DMA_Init+0x43c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00d      	beq.n	80050ac <HAL_DMA_Init+0x3e4>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1c      	ldr	r2, [pc, #112]	; (8005108 <HAL_DMA_Init+0x440>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d008      	beq.n	80050ac <HAL_DMA_Init+0x3e4>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1b      	ldr	r2, [pc, #108]	; (800510c <HAL_DMA_Init+0x444>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <HAL_DMA_Init+0x3e4>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a19      	ldr	r2, [pc, #100]	; (8005110 <HAL_DMA_Init+0x448>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4b12      	ldr	r3, [pc, #72]	; (8005114 <HAL_DMA_Init+0x44c>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b40      	cmp	r3, #64	; 0x40
 80050d4:	d020      	beq.n	8005118 <HAL_DMA_Init+0x450>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	2b80      	cmp	r3, #128	; 0x80
 80050dc:	d102      	bne.n	80050e4 <HAL_DMA_Init+0x41c>
 80050de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050e2:	e01a      	b.n	800511a <HAL_DMA_Init+0x452>
 80050e4:	2300      	movs	r3, #0
 80050e6:	e018      	b.n	800511a <HAL_DMA_Init+0x452>
 80050e8:	fe10803f 	.word	0xfe10803f
 80050ec:	5c001000 	.word	0x5c001000
 80050f0:	ffff0000 	.word	0xffff0000
 80050f4:	58025408 	.word	0x58025408
 80050f8:	5802541c 	.word	0x5802541c
 80050fc:	58025430 	.word	0x58025430
 8005100:	58025444 	.word	0x58025444
 8005104:	58025458 	.word	0x58025458
 8005108:	5802546c 	.word	0x5802546c
 800510c:	58025480 	.word	0x58025480
 8005110:	58025494 	.word	0x58025494
 8005114:	fffe000f 	.word	0xfffe000f
 8005118:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	68d2      	ldr	r2, [r2, #12]
 800511e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005120:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005128:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005130:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005138:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005140:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005148:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	4b6e      	ldr	r3, [pc, #440]	; (8005318 <HAL_DMA_Init+0x650>)
 8005160:	4413      	add	r3, r2
 8005162:	4a6e      	ldr	r2, [pc, #440]	; (800531c <HAL_DMA_Init+0x654>)
 8005164:	fba2 2303 	umull	r2, r3, r2, r3
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	009a      	lsls	r2, r3, #2
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f002 f9c1 	bl	80074f8 <DMA_CalcBaseAndBitshift>
 8005176:	4603      	mov	r3, r0
 8005178:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	2201      	movs	r2, #1
 8005184:	409a      	lsls	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	605a      	str	r2, [r3, #4]
 800518a:	e008      	b.n	800519e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2240      	movs	r2, #64	; 0x40
 8005190:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2203      	movs	r2, #3
 8005196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e0b7      	b.n	800530e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a5f      	ldr	r2, [pc, #380]	; (8005320 <HAL_DMA_Init+0x658>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d072      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a5d      	ldr	r2, [pc, #372]	; (8005324 <HAL_DMA_Init+0x65c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d06d      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a5c      	ldr	r2, [pc, #368]	; (8005328 <HAL_DMA_Init+0x660>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d068      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a5a      	ldr	r2, [pc, #360]	; (800532c <HAL_DMA_Init+0x664>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d063      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a59      	ldr	r2, [pc, #356]	; (8005330 <HAL_DMA_Init+0x668>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d05e      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a57      	ldr	r2, [pc, #348]	; (8005334 <HAL_DMA_Init+0x66c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d059      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a56      	ldr	r2, [pc, #344]	; (8005338 <HAL_DMA_Init+0x670>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d054      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a54      	ldr	r2, [pc, #336]	; (800533c <HAL_DMA_Init+0x674>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d04f      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a53      	ldr	r2, [pc, #332]	; (8005340 <HAL_DMA_Init+0x678>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d04a      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a51      	ldr	r2, [pc, #324]	; (8005344 <HAL_DMA_Init+0x67c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d045      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a50      	ldr	r2, [pc, #320]	; (8005348 <HAL_DMA_Init+0x680>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d040      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a4e      	ldr	r2, [pc, #312]	; (800534c <HAL_DMA_Init+0x684>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d03b      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a4d      	ldr	r2, [pc, #308]	; (8005350 <HAL_DMA_Init+0x688>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d036      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a4b      	ldr	r2, [pc, #300]	; (8005354 <HAL_DMA_Init+0x68c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d031      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a4a      	ldr	r2, [pc, #296]	; (8005358 <HAL_DMA_Init+0x690>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d02c      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a48      	ldr	r2, [pc, #288]	; (800535c <HAL_DMA_Init+0x694>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d027      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a47      	ldr	r2, [pc, #284]	; (8005360 <HAL_DMA_Init+0x698>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d022      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a45      	ldr	r2, [pc, #276]	; (8005364 <HAL_DMA_Init+0x69c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01d      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a44      	ldr	r2, [pc, #272]	; (8005368 <HAL_DMA_Init+0x6a0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d018      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a42      	ldr	r2, [pc, #264]	; (800536c <HAL_DMA_Init+0x6a4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a41      	ldr	r2, [pc, #260]	; (8005370 <HAL_DMA_Init+0x6a8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00e      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a3f      	ldr	r2, [pc, #252]	; (8005374 <HAL_DMA_Init+0x6ac>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d009      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a3e      	ldr	r2, [pc, #248]	; (8005378 <HAL_DMA_Init+0x6b0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d004      	beq.n	800528e <HAL_DMA_Init+0x5c6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a3c      	ldr	r2, [pc, #240]	; (800537c <HAL_DMA_Init+0x6b4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d101      	bne.n	8005292 <HAL_DMA_Init+0x5ca>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <HAL_DMA_Init+0x5cc>
 8005292:	2300      	movs	r3, #0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d032      	beq.n	80052fe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f002 fa5b 	bl	8007754 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	2b80      	cmp	r3, #128	; 0x80
 80052a4:	d102      	bne.n	80052ac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d010      	beq.n	80052ec <HAL_DMA_Init+0x624>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d80c      	bhi.n	80052ec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f002 fad8 	bl	8007888 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052e8:	605a      	str	r2, [r3, #4]
 80052ea:	e008      	b.n	80052fe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	a7fdabf8 	.word	0xa7fdabf8
 800531c:	cccccccd 	.word	0xcccccccd
 8005320:	40020010 	.word	0x40020010
 8005324:	40020028 	.word	0x40020028
 8005328:	40020040 	.word	0x40020040
 800532c:	40020058 	.word	0x40020058
 8005330:	40020070 	.word	0x40020070
 8005334:	40020088 	.word	0x40020088
 8005338:	400200a0 	.word	0x400200a0
 800533c:	400200b8 	.word	0x400200b8
 8005340:	40020410 	.word	0x40020410
 8005344:	40020428 	.word	0x40020428
 8005348:	40020440 	.word	0x40020440
 800534c:	40020458 	.word	0x40020458
 8005350:	40020470 	.word	0x40020470
 8005354:	40020488 	.word	0x40020488
 8005358:	400204a0 	.word	0x400204a0
 800535c:	400204b8 	.word	0x400204b8
 8005360:	58025408 	.word	0x58025408
 8005364:	5802541c 	.word	0x5802541c
 8005368:	58025430 	.word	0x58025430
 800536c:	58025444 	.word	0x58025444
 8005370:	58025458 	.word	0x58025458
 8005374:	5802546c 	.word	0x5802546c
 8005378:	58025480 	.word	0x58025480
 800537c:	58025494 	.word	0x58025494

08005380 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e226      	b.n	80057ea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_DMA_Start_IT+0x2a>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e21f      	b.n	80057ea <HAL_DMA_Start_IT+0x46a>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	f040 820a 	bne.w	80057d4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a68      	ldr	r2, [pc, #416]	; (8005574 <HAL_DMA_Start_IT+0x1f4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d04a      	beq.n	800546e <HAL_DMA_Start_IT+0xee>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a66      	ldr	r2, [pc, #408]	; (8005578 <HAL_DMA_Start_IT+0x1f8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d045      	beq.n	800546e <HAL_DMA_Start_IT+0xee>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a65      	ldr	r2, [pc, #404]	; (800557c <HAL_DMA_Start_IT+0x1fc>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d040      	beq.n	800546e <HAL_DMA_Start_IT+0xee>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a63      	ldr	r2, [pc, #396]	; (8005580 <HAL_DMA_Start_IT+0x200>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d03b      	beq.n	800546e <HAL_DMA_Start_IT+0xee>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a62      	ldr	r2, [pc, #392]	; (8005584 <HAL_DMA_Start_IT+0x204>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d036      	beq.n	800546e <HAL_DMA_Start_IT+0xee>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a60      	ldr	r2, [pc, #384]	; (8005588 <HAL_DMA_Start_IT+0x208>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d031      	beq.n	800546e <HAL_DMA_Start_IT+0xee>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a5f      	ldr	r2, [pc, #380]	; (800558c <HAL_DMA_Start_IT+0x20c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d02c      	beq.n	800546e <HAL_DMA_Start_IT+0xee>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a5d      	ldr	r2, [pc, #372]	; (8005590 <HAL_DMA_Start_IT+0x210>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d027      	beq.n	800546e <HAL_DMA_Start_IT+0xee>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a5c      	ldr	r2, [pc, #368]	; (8005594 <HAL_DMA_Start_IT+0x214>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d022      	beq.n	800546e <HAL_DMA_Start_IT+0xee>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a5a      	ldr	r2, [pc, #360]	; (8005598 <HAL_DMA_Start_IT+0x218>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d01d      	beq.n	800546e <HAL_DMA_Start_IT+0xee>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a59      	ldr	r2, [pc, #356]	; (800559c <HAL_DMA_Start_IT+0x21c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d018      	beq.n	800546e <HAL_DMA_Start_IT+0xee>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a57      	ldr	r2, [pc, #348]	; (80055a0 <HAL_DMA_Start_IT+0x220>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <HAL_DMA_Start_IT+0xee>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a56      	ldr	r2, [pc, #344]	; (80055a4 <HAL_DMA_Start_IT+0x224>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00e      	beq.n	800546e <HAL_DMA_Start_IT+0xee>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a54      	ldr	r2, [pc, #336]	; (80055a8 <HAL_DMA_Start_IT+0x228>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d009      	beq.n	800546e <HAL_DMA_Start_IT+0xee>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a53      	ldr	r2, [pc, #332]	; (80055ac <HAL_DMA_Start_IT+0x22c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d004      	beq.n	800546e <HAL_DMA_Start_IT+0xee>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a51      	ldr	r2, [pc, #324]	; (80055b0 <HAL_DMA_Start_IT+0x230>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d108      	bne.n	8005480 <HAL_DMA_Start_IT+0x100>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0201 	bic.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	e007      	b.n	8005490 <HAL_DMA_Start_IT+0x110>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0201 	bic.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	68b9      	ldr	r1, [r7, #8]
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f001 fe82 	bl	80071a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a34      	ldr	r2, [pc, #208]	; (8005574 <HAL_DMA_Start_IT+0x1f4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d04a      	beq.n	800553c <HAL_DMA_Start_IT+0x1bc>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a33      	ldr	r2, [pc, #204]	; (8005578 <HAL_DMA_Start_IT+0x1f8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d045      	beq.n	800553c <HAL_DMA_Start_IT+0x1bc>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a31      	ldr	r2, [pc, #196]	; (800557c <HAL_DMA_Start_IT+0x1fc>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d040      	beq.n	800553c <HAL_DMA_Start_IT+0x1bc>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a30      	ldr	r2, [pc, #192]	; (8005580 <HAL_DMA_Start_IT+0x200>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d03b      	beq.n	800553c <HAL_DMA_Start_IT+0x1bc>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a2e      	ldr	r2, [pc, #184]	; (8005584 <HAL_DMA_Start_IT+0x204>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d036      	beq.n	800553c <HAL_DMA_Start_IT+0x1bc>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a2d      	ldr	r2, [pc, #180]	; (8005588 <HAL_DMA_Start_IT+0x208>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d031      	beq.n	800553c <HAL_DMA_Start_IT+0x1bc>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a2b      	ldr	r2, [pc, #172]	; (800558c <HAL_DMA_Start_IT+0x20c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d02c      	beq.n	800553c <HAL_DMA_Start_IT+0x1bc>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a2a      	ldr	r2, [pc, #168]	; (8005590 <HAL_DMA_Start_IT+0x210>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d027      	beq.n	800553c <HAL_DMA_Start_IT+0x1bc>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a28      	ldr	r2, [pc, #160]	; (8005594 <HAL_DMA_Start_IT+0x214>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d022      	beq.n	800553c <HAL_DMA_Start_IT+0x1bc>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a27      	ldr	r2, [pc, #156]	; (8005598 <HAL_DMA_Start_IT+0x218>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d01d      	beq.n	800553c <HAL_DMA_Start_IT+0x1bc>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a25      	ldr	r2, [pc, #148]	; (800559c <HAL_DMA_Start_IT+0x21c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d018      	beq.n	800553c <HAL_DMA_Start_IT+0x1bc>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a24      	ldr	r2, [pc, #144]	; (80055a0 <HAL_DMA_Start_IT+0x220>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d013      	beq.n	800553c <HAL_DMA_Start_IT+0x1bc>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a22      	ldr	r2, [pc, #136]	; (80055a4 <HAL_DMA_Start_IT+0x224>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00e      	beq.n	800553c <HAL_DMA_Start_IT+0x1bc>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a21      	ldr	r2, [pc, #132]	; (80055a8 <HAL_DMA_Start_IT+0x228>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d009      	beq.n	800553c <HAL_DMA_Start_IT+0x1bc>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1f      	ldr	r2, [pc, #124]	; (80055ac <HAL_DMA_Start_IT+0x22c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <HAL_DMA_Start_IT+0x1bc>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1e      	ldr	r2, [pc, #120]	; (80055b0 <HAL_DMA_Start_IT+0x230>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d101      	bne.n	8005540 <HAL_DMA_Start_IT+0x1c0>
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <HAL_DMA_Start_IT+0x1c2>
 8005540:	2300      	movs	r3, #0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d036      	beq.n	80055b4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f023 021e 	bic.w	r2, r3, #30
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0216 	orr.w	r2, r2, #22
 8005558:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d03e      	beq.n	80055e0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0208 	orr.w	r2, r2, #8
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e035      	b.n	80055e0 <HAL_DMA_Start_IT+0x260>
 8005574:	40020010 	.word	0x40020010
 8005578:	40020028 	.word	0x40020028
 800557c:	40020040 	.word	0x40020040
 8005580:	40020058 	.word	0x40020058
 8005584:	40020070 	.word	0x40020070
 8005588:	40020088 	.word	0x40020088
 800558c:	400200a0 	.word	0x400200a0
 8005590:	400200b8 	.word	0x400200b8
 8005594:	40020410 	.word	0x40020410
 8005598:	40020428 	.word	0x40020428
 800559c:	40020440 	.word	0x40020440
 80055a0:	40020458 	.word	0x40020458
 80055a4:	40020470 	.word	0x40020470
 80055a8:	40020488 	.word	0x40020488
 80055ac:	400204a0 	.word	0x400204a0
 80055b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f023 020e 	bic.w	r2, r3, #14
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 020a 	orr.w	r2, r2, #10
 80055c6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0204 	orr.w	r2, r2, #4
 80055de:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a83      	ldr	r2, [pc, #524]	; (80057f4 <HAL_DMA_Start_IT+0x474>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d072      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a82      	ldr	r2, [pc, #520]	; (80057f8 <HAL_DMA_Start_IT+0x478>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d06d      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a80      	ldr	r2, [pc, #512]	; (80057fc <HAL_DMA_Start_IT+0x47c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d068      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a7f      	ldr	r2, [pc, #508]	; (8005800 <HAL_DMA_Start_IT+0x480>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d063      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a7d      	ldr	r2, [pc, #500]	; (8005804 <HAL_DMA_Start_IT+0x484>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d05e      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a7c      	ldr	r2, [pc, #496]	; (8005808 <HAL_DMA_Start_IT+0x488>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d059      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a7a      	ldr	r2, [pc, #488]	; (800580c <HAL_DMA_Start_IT+0x48c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d054      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a79      	ldr	r2, [pc, #484]	; (8005810 <HAL_DMA_Start_IT+0x490>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d04f      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a77      	ldr	r2, [pc, #476]	; (8005814 <HAL_DMA_Start_IT+0x494>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d04a      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a76      	ldr	r2, [pc, #472]	; (8005818 <HAL_DMA_Start_IT+0x498>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d045      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a74      	ldr	r2, [pc, #464]	; (800581c <HAL_DMA_Start_IT+0x49c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d040      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a73      	ldr	r2, [pc, #460]	; (8005820 <HAL_DMA_Start_IT+0x4a0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d03b      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a71      	ldr	r2, [pc, #452]	; (8005824 <HAL_DMA_Start_IT+0x4a4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d036      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a70      	ldr	r2, [pc, #448]	; (8005828 <HAL_DMA_Start_IT+0x4a8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d031      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a6e      	ldr	r2, [pc, #440]	; (800582c <HAL_DMA_Start_IT+0x4ac>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d02c      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a6d      	ldr	r2, [pc, #436]	; (8005830 <HAL_DMA_Start_IT+0x4b0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d027      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a6b      	ldr	r2, [pc, #428]	; (8005834 <HAL_DMA_Start_IT+0x4b4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d022      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a6a      	ldr	r2, [pc, #424]	; (8005838 <HAL_DMA_Start_IT+0x4b8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d01d      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a68      	ldr	r2, [pc, #416]	; (800583c <HAL_DMA_Start_IT+0x4bc>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d018      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a67      	ldr	r2, [pc, #412]	; (8005840 <HAL_DMA_Start_IT+0x4c0>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d013      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a65      	ldr	r2, [pc, #404]	; (8005844 <HAL_DMA_Start_IT+0x4c4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00e      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a64      	ldr	r2, [pc, #400]	; (8005848 <HAL_DMA_Start_IT+0x4c8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d009      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a62      	ldr	r2, [pc, #392]	; (800584c <HAL_DMA_Start_IT+0x4cc>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <HAL_DMA_Start_IT+0x350>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a61      	ldr	r2, [pc, #388]	; (8005850 <HAL_DMA_Start_IT+0x4d0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d101      	bne.n	80056d4 <HAL_DMA_Start_IT+0x354>
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <HAL_DMA_Start_IT+0x356>
 80056d4:	2300      	movs	r3, #0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01a      	beq.n	8005710 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056f6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d007      	beq.n	8005710 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800570a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800570e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a37      	ldr	r2, [pc, #220]	; (80057f4 <HAL_DMA_Start_IT+0x474>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d04a      	beq.n	80057b0 <HAL_DMA_Start_IT+0x430>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a36      	ldr	r2, [pc, #216]	; (80057f8 <HAL_DMA_Start_IT+0x478>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d045      	beq.n	80057b0 <HAL_DMA_Start_IT+0x430>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a34      	ldr	r2, [pc, #208]	; (80057fc <HAL_DMA_Start_IT+0x47c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d040      	beq.n	80057b0 <HAL_DMA_Start_IT+0x430>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a33      	ldr	r2, [pc, #204]	; (8005800 <HAL_DMA_Start_IT+0x480>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d03b      	beq.n	80057b0 <HAL_DMA_Start_IT+0x430>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a31      	ldr	r2, [pc, #196]	; (8005804 <HAL_DMA_Start_IT+0x484>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d036      	beq.n	80057b0 <HAL_DMA_Start_IT+0x430>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a30      	ldr	r2, [pc, #192]	; (8005808 <HAL_DMA_Start_IT+0x488>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d031      	beq.n	80057b0 <HAL_DMA_Start_IT+0x430>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a2e      	ldr	r2, [pc, #184]	; (800580c <HAL_DMA_Start_IT+0x48c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d02c      	beq.n	80057b0 <HAL_DMA_Start_IT+0x430>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a2d      	ldr	r2, [pc, #180]	; (8005810 <HAL_DMA_Start_IT+0x490>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d027      	beq.n	80057b0 <HAL_DMA_Start_IT+0x430>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a2b      	ldr	r2, [pc, #172]	; (8005814 <HAL_DMA_Start_IT+0x494>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d022      	beq.n	80057b0 <HAL_DMA_Start_IT+0x430>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a2a      	ldr	r2, [pc, #168]	; (8005818 <HAL_DMA_Start_IT+0x498>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d01d      	beq.n	80057b0 <HAL_DMA_Start_IT+0x430>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a28      	ldr	r2, [pc, #160]	; (800581c <HAL_DMA_Start_IT+0x49c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d018      	beq.n	80057b0 <HAL_DMA_Start_IT+0x430>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a27      	ldr	r2, [pc, #156]	; (8005820 <HAL_DMA_Start_IT+0x4a0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d013      	beq.n	80057b0 <HAL_DMA_Start_IT+0x430>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a25      	ldr	r2, [pc, #148]	; (8005824 <HAL_DMA_Start_IT+0x4a4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00e      	beq.n	80057b0 <HAL_DMA_Start_IT+0x430>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a24      	ldr	r2, [pc, #144]	; (8005828 <HAL_DMA_Start_IT+0x4a8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d009      	beq.n	80057b0 <HAL_DMA_Start_IT+0x430>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a22      	ldr	r2, [pc, #136]	; (800582c <HAL_DMA_Start_IT+0x4ac>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d004      	beq.n	80057b0 <HAL_DMA_Start_IT+0x430>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a21      	ldr	r2, [pc, #132]	; (8005830 <HAL_DMA_Start_IT+0x4b0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d108      	bne.n	80057c2 <HAL_DMA_Start_IT+0x442>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	e012      	b.n	80057e8 <HAL_DMA_Start_IT+0x468>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0201 	orr.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	e009      	b.n	80057e8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40020010 	.word	0x40020010
 80057f8:	40020028 	.word	0x40020028
 80057fc:	40020040 	.word	0x40020040
 8005800:	40020058 	.word	0x40020058
 8005804:	40020070 	.word	0x40020070
 8005808:	40020088 	.word	0x40020088
 800580c:	400200a0 	.word	0x400200a0
 8005810:	400200b8 	.word	0x400200b8
 8005814:	40020410 	.word	0x40020410
 8005818:	40020428 	.word	0x40020428
 800581c:	40020440 	.word	0x40020440
 8005820:	40020458 	.word	0x40020458
 8005824:	40020470 	.word	0x40020470
 8005828:	40020488 	.word	0x40020488
 800582c:	400204a0 	.word	0x400204a0
 8005830:	400204b8 	.word	0x400204b8
 8005834:	58025408 	.word	0x58025408
 8005838:	5802541c 	.word	0x5802541c
 800583c:	58025430 	.word	0x58025430
 8005840:	58025444 	.word	0x58025444
 8005844:	58025458 	.word	0x58025458
 8005848:	5802546c 	.word	0x5802546c
 800584c:	58025480 	.word	0x58025480
 8005850:	58025494 	.word	0x58025494

08005854 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800585c:	f7ff f8e8 	bl	8004a30 <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e2dc      	b.n	8005e26 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d008      	beq.n	800588a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2280      	movs	r2, #128	; 0x80
 800587c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e2cd      	b.n	8005e26 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a76      	ldr	r2, [pc, #472]	; (8005a68 <HAL_DMA_Abort+0x214>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d04a      	beq.n	800592a <HAL_DMA_Abort+0xd6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a74      	ldr	r2, [pc, #464]	; (8005a6c <HAL_DMA_Abort+0x218>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d045      	beq.n	800592a <HAL_DMA_Abort+0xd6>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a73      	ldr	r2, [pc, #460]	; (8005a70 <HAL_DMA_Abort+0x21c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d040      	beq.n	800592a <HAL_DMA_Abort+0xd6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a71      	ldr	r2, [pc, #452]	; (8005a74 <HAL_DMA_Abort+0x220>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d03b      	beq.n	800592a <HAL_DMA_Abort+0xd6>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a70      	ldr	r2, [pc, #448]	; (8005a78 <HAL_DMA_Abort+0x224>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d036      	beq.n	800592a <HAL_DMA_Abort+0xd6>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a6e      	ldr	r2, [pc, #440]	; (8005a7c <HAL_DMA_Abort+0x228>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d031      	beq.n	800592a <HAL_DMA_Abort+0xd6>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a6d      	ldr	r2, [pc, #436]	; (8005a80 <HAL_DMA_Abort+0x22c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d02c      	beq.n	800592a <HAL_DMA_Abort+0xd6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a6b      	ldr	r2, [pc, #428]	; (8005a84 <HAL_DMA_Abort+0x230>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d027      	beq.n	800592a <HAL_DMA_Abort+0xd6>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a6a      	ldr	r2, [pc, #424]	; (8005a88 <HAL_DMA_Abort+0x234>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d022      	beq.n	800592a <HAL_DMA_Abort+0xd6>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a68      	ldr	r2, [pc, #416]	; (8005a8c <HAL_DMA_Abort+0x238>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d01d      	beq.n	800592a <HAL_DMA_Abort+0xd6>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a67      	ldr	r2, [pc, #412]	; (8005a90 <HAL_DMA_Abort+0x23c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d018      	beq.n	800592a <HAL_DMA_Abort+0xd6>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a65      	ldr	r2, [pc, #404]	; (8005a94 <HAL_DMA_Abort+0x240>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d013      	beq.n	800592a <HAL_DMA_Abort+0xd6>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a64      	ldr	r2, [pc, #400]	; (8005a98 <HAL_DMA_Abort+0x244>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00e      	beq.n	800592a <HAL_DMA_Abort+0xd6>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a62      	ldr	r2, [pc, #392]	; (8005a9c <HAL_DMA_Abort+0x248>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d009      	beq.n	800592a <HAL_DMA_Abort+0xd6>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a61      	ldr	r2, [pc, #388]	; (8005aa0 <HAL_DMA_Abort+0x24c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d004      	beq.n	800592a <HAL_DMA_Abort+0xd6>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a5f      	ldr	r2, [pc, #380]	; (8005aa4 <HAL_DMA_Abort+0x250>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d101      	bne.n	800592e <HAL_DMA_Abort+0xda>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <HAL_DMA_Abort+0xdc>
 800592e:	2300      	movs	r3, #0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d013      	beq.n	800595c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 021e 	bic.w	r2, r2, #30
 8005942:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695a      	ldr	r2, [r3, #20]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005952:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	e00a      	b.n	8005972 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 020e 	bic.w	r2, r2, #14
 800596a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a3c      	ldr	r2, [pc, #240]	; (8005a68 <HAL_DMA_Abort+0x214>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d072      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a3a      	ldr	r2, [pc, #232]	; (8005a6c <HAL_DMA_Abort+0x218>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d06d      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a39      	ldr	r2, [pc, #228]	; (8005a70 <HAL_DMA_Abort+0x21c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d068      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a37      	ldr	r2, [pc, #220]	; (8005a74 <HAL_DMA_Abort+0x220>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d063      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a36      	ldr	r2, [pc, #216]	; (8005a78 <HAL_DMA_Abort+0x224>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d05e      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a34      	ldr	r2, [pc, #208]	; (8005a7c <HAL_DMA_Abort+0x228>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d059      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a33      	ldr	r2, [pc, #204]	; (8005a80 <HAL_DMA_Abort+0x22c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d054      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a31      	ldr	r2, [pc, #196]	; (8005a84 <HAL_DMA_Abort+0x230>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d04f      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a30      	ldr	r2, [pc, #192]	; (8005a88 <HAL_DMA_Abort+0x234>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d04a      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a2e      	ldr	r2, [pc, #184]	; (8005a8c <HAL_DMA_Abort+0x238>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d045      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a2d      	ldr	r2, [pc, #180]	; (8005a90 <HAL_DMA_Abort+0x23c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d040      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a2b      	ldr	r2, [pc, #172]	; (8005a94 <HAL_DMA_Abort+0x240>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d03b      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a2a      	ldr	r2, [pc, #168]	; (8005a98 <HAL_DMA_Abort+0x244>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d036      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a28      	ldr	r2, [pc, #160]	; (8005a9c <HAL_DMA_Abort+0x248>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d031      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a27      	ldr	r2, [pc, #156]	; (8005aa0 <HAL_DMA_Abort+0x24c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d02c      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a25      	ldr	r2, [pc, #148]	; (8005aa4 <HAL_DMA_Abort+0x250>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d027      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a24      	ldr	r2, [pc, #144]	; (8005aa8 <HAL_DMA_Abort+0x254>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d022      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a22      	ldr	r2, [pc, #136]	; (8005aac <HAL_DMA_Abort+0x258>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d01d      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a21      	ldr	r2, [pc, #132]	; (8005ab0 <HAL_DMA_Abort+0x25c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d018      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a1f      	ldr	r2, [pc, #124]	; (8005ab4 <HAL_DMA_Abort+0x260>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d013      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1e      	ldr	r2, [pc, #120]	; (8005ab8 <HAL_DMA_Abort+0x264>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00e      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a1c      	ldr	r2, [pc, #112]	; (8005abc <HAL_DMA_Abort+0x268>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d009      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a1b      	ldr	r2, [pc, #108]	; (8005ac0 <HAL_DMA_Abort+0x26c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d004      	beq.n	8005a62 <HAL_DMA_Abort+0x20e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a19      	ldr	r2, [pc, #100]	; (8005ac4 <HAL_DMA_Abort+0x270>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d132      	bne.n	8005ac8 <HAL_DMA_Abort+0x274>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e031      	b.n	8005aca <HAL_DMA_Abort+0x276>
 8005a66:	bf00      	nop
 8005a68:	40020010 	.word	0x40020010
 8005a6c:	40020028 	.word	0x40020028
 8005a70:	40020040 	.word	0x40020040
 8005a74:	40020058 	.word	0x40020058
 8005a78:	40020070 	.word	0x40020070
 8005a7c:	40020088 	.word	0x40020088
 8005a80:	400200a0 	.word	0x400200a0
 8005a84:	400200b8 	.word	0x400200b8
 8005a88:	40020410 	.word	0x40020410
 8005a8c:	40020428 	.word	0x40020428
 8005a90:	40020440 	.word	0x40020440
 8005a94:	40020458 	.word	0x40020458
 8005a98:	40020470 	.word	0x40020470
 8005a9c:	40020488 	.word	0x40020488
 8005aa0:	400204a0 	.word	0x400204a0
 8005aa4:	400204b8 	.word	0x400204b8
 8005aa8:	58025408 	.word	0x58025408
 8005aac:	5802541c 	.word	0x5802541c
 8005ab0:	58025430 	.word	0x58025430
 8005ab4:	58025444 	.word	0x58025444
 8005ab8:	58025458 	.word	0x58025458
 8005abc:	5802546c 	.word	0x5802546c
 8005ac0:	58025480 	.word	0x58025480
 8005ac4:	58025494 	.word	0x58025494
 8005ac8:	2300      	movs	r3, #0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d007      	beq.n	8005ade <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005adc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a6d      	ldr	r2, [pc, #436]	; (8005c98 <HAL_DMA_Abort+0x444>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d04a      	beq.n	8005b7e <HAL_DMA_Abort+0x32a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a6b      	ldr	r2, [pc, #428]	; (8005c9c <HAL_DMA_Abort+0x448>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d045      	beq.n	8005b7e <HAL_DMA_Abort+0x32a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a6a      	ldr	r2, [pc, #424]	; (8005ca0 <HAL_DMA_Abort+0x44c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d040      	beq.n	8005b7e <HAL_DMA_Abort+0x32a>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a68      	ldr	r2, [pc, #416]	; (8005ca4 <HAL_DMA_Abort+0x450>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d03b      	beq.n	8005b7e <HAL_DMA_Abort+0x32a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a67      	ldr	r2, [pc, #412]	; (8005ca8 <HAL_DMA_Abort+0x454>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d036      	beq.n	8005b7e <HAL_DMA_Abort+0x32a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a65      	ldr	r2, [pc, #404]	; (8005cac <HAL_DMA_Abort+0x458>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d031      	beq.n	8005b7e <HAL_DMA_Abort+0x32a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a64      	ldr	r2, [pc, #400]	; (8005cb0 <HAL_DMA_Abort+0x45c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d02c      	beq.n	8005b7e <HAL_DMA_Abort+0x32a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a62      	ldr	r2, [pc, #392]	; (8005cb4 <HAL_DMA_Abort+0x460>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d027      	beq.n	8005b7e <HAL_DMA_Abort+0x32a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a61      	ldr	r2, [pc, #388]	; (8005cb8 <HAL_DMA_Abort+0x464>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d022      	beq.n	8005b7e <HAL_DMA_Abort+0x32a>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a5f      	ldr	r2, [pc, #380]	; (8005cbc <HAL_DMA_Abort+0x468>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d01d      	beq.n	8005b7e <HAL_DMA_Abort+0x32a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a5e      	ldr	r2, [pc, #376]	; (8005cc0 <HAL_DMA_Abort+0x46c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d018      	beq.n	8005b7e <HAL_DMA_Abort+0x32a>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a5c      	ldr	r2, [pc, #368]	; (8005cc4 <HAL_DMA_Abort+0x470>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d013      	beq.n	8005b7e <HAL_DMA_Abort+0x32a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a5b      	ldr	r2, [pc, #364]	; (8005cc8 <HAL_DMA_Abort+0x474>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00e      	beq.n	8005b7e <HAL_DMA_Abort+0x32a>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a59      	ldr	r2, [pc, #356]	; (8005ccc <HAL_DMA_Abort+0x478>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d009      	beq.n	8005b7e <HAL_DMA_Abort+0x32a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a58      	ldr	r2, [pc, #352]	; (8005cd0 <HAL_DMA_Abort+0x47c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d004      	beq.n	8005b7e <HAL_DMA_Abort+0x32a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a56      	ldr	r2, [pc, #344]	; (8005cd4 <HAL_DMA_Abort+0x480>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d108      	bne.n	8005b90 <HAL_DMA_Abort+0x33c>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0201 	bic.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	e007      	b.n	8005ba0 <HAL_DMA_Abort+0x34c>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0201 	bic.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ba0:	e013      	b.n	8005bca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ba2:	f7fe ff45 	bl	8004a30 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b05      	cmp	r3, #5
 8005bae:	d90c      	bls.n	8005bca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e12d      	b.n	8005e26 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e5      	bne.n	8005ba2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a2f      	ldr	r2, [pc, #188]	; (8005c98 <HAL_DMA_Abort+0x444>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d04a      	beq.n	8005c76 <HAL_DMA_Abort+0x422>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a2d      	ldr	r2, [pc, #180]	; (8005c9c <HAL_DMA_Abort+0x448>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d045      	beq.n	8005c76 <HAL_DMA_Abort+0x422>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a2c      	ldr	r2, [pc, #176]	; (8005ca0 <HAL_DMA_Abort+0x44c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d040      	beq.n	8005c76 <HAL_DMA_Abort+0x422>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a2a      	ldr	r2, [pc, #168]	; (8005ca4 <HAL_DMA_Abort+0x450>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d03b      	beq.n	8005c76 <HAL_DMA_Abort+0x422>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a29      	ldr	r2, [pc, #164]	; (8005ca8 <HAL_DMA_Abort+0x454>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d036      	beq.n	8005c76 <HAL_DMA_Abort+0x422>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a27      	ldr	r2, [pc, #156]	; (8005cac <HAL_DMA_Abort+0x458>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d031      	beq.n	8005c76 <HAL_DMA_Abort+0x422>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a26      	ldr	r2, [pc, #152]	; (8005cb0 <HAL_DMA_Abort+0x45c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d02c      	beq.n	8005c76 <HAL_DMA_Abort+0x422>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a24      	ldr	r2, [pc, #144]	; (8005cb4 <HAL_DMA_Abort+0x460>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d027      	beq.n	8005c76 <HAL_DMA_Abort+0x422>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a23      	ldr	r2, [pc, #140]	; (8005cb8 <HAL_DMA_Abort+0x464>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d022      	beq.n	8005c76 <HAL_DMA_Abort+0x422>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a21      	ldr	r2, [pc, #132]	; (8005cbc <HAL_DMA_Abort+0x468>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d01d      	beq.n	8005c76 <HAL_DMA_Abort+0x422>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a20      	ldr	r2, [pc, #128]	; (8005cc0 <HAL_DMA_Abort+0x46c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d018      	beq.n	8005c76 <HAL_DMA_Abort+0x422>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1e      	ldr	r2, [pc, #120]	; (8005cc4 <HAL_DMA_Abort+0x470>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <HAL_DMA_Abort+0x422>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1d      	ldr	r2, [pc, #116]	; (8005cc8 <HAL_DMA_Abort+0x474>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00e      	beq.n	8005c76 <HAL_DMA_Abort+0x422>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1b      	ldr	r2, [pc, #108]	; (8005ccc <HAL_DMA_Abort+0x478>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d009      	beq.n	8005c76 <HAL_DMA_Abort+0x422>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a1a      	ldr	r2, [pc, #104]	; (8005cd0 <HAL_DMA_Abort+0x47c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d004      	beq.n	8005c76 <HAL_DMA_Abort+0x422>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a18      	ldr	r2, [pc, #96]	; (8005cd4 <HAL_DMA_Abort+0x480>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d101      	bne.n	8005c7a <HAL_DMA_Abort+0x426>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e000      	b.n	8005c7c <HAL_DMA_Abort+0x428>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d02b      	beq.n	8005cd8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c84:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8a:	f003 031f 	and.w	r3, r3, #31
 8005c8e:	223f      	movs	r2, #63	; 0x3f
 8005c90:	409a      	lsls	r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	609a      	str	r2, [r3, #8]
 8005c96:	e02a      	b.n	8005cee <HAL_DMA_Abort+0x49a>
 8005c98:	40020010 	.word	0x40020010
 8005c9c:	40020028 	.word	0x40020028
 8005ca0:	40020040 	.word	0x40020040
 8005ca4:	40020058 	.word	0x40020058
 8005ca8:	40020070 	.word	0x40020070
 8005cac:	40020088 	.word	0x40020088
 8005cb0:	400200a0 	.word	0x400200a0
 8005cb4:	400200b8 	.word	0x400200b8
 8005cb8:	40020410 	.word	0x40020410
 8005cbc:	40020428 	.word	0x40020428
 8005cc0:	40020440 	.word	0x40020440
 8005cc4:	40020458 	.word	0x40020458
 8005cc8:	40020470 	.word	0x40020470
 8005ccc:	40020488 	.word	0x40020488
 8005cd0:	400204a0 	.word	0x400204a0
 8005cd4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cdc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	409a      	lsls	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a4f      	ldr	r2, [pc, #316]	; (8005e30 <HAL_DMA_Abort+0x5dc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d072      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a4d      	ldr	r2, [pc, #308]	; (8005e34 <HAL_DMA_Abort+0x5e0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d06d      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a4c      	ldr	r2, [pc, #304]	; (8005e38 <HAL_DMA_Abort+0x5e4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d068      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a4a      	ldr	r2, [pc, #296]	; (8005e3c <HAL_DMA_Abort+0x5e8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d063      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a49      	ldr	r2, [pc, #292]	; (8005e40 <HAL_DMA_Abort+0x5ec>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d05e      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a47      	ldr	r2, [pc, #284]	; (8005e44 <HAL_DMA_Abort+0x5f0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d059      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a46      	ldr	r2, [pc, #280]	; (8005e48 <HAL_DMA_Abort+0x5f4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d054      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a44      	ldr	r2, [pc, #272]	; (8005e4c <HAL_DMA_Abort+0x5f8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d04f      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a43      	ldr	r2, [pc, #268]	; (8005e50 <HAL_DMA_Abort+0x5fc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d04a      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a41      	ldr	r2, [pc, #260]	; (8005e54 <HAL_DMA_Abort+0x600>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d045      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a40      	ldr	r2, [pc, #256]	; (8005e58 <HAL_DMA_Abort+0x604>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d040      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a3e      	ldr	r2, [pc, #248]	; (8005e5c <HAL_DMA_Abort+0x608>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d03b      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a3d      	ldr	r2, [pc, #244]	; (8005e60 <HAL_DMA_Abort+0x60c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d036      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a3b      	ldr	r2, [pc, #236]	; (8005e64 <HAL_DMA_Abort+0x610>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d031      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a3a      	ldr	r2, [pc, #232]	; (8005e68 <HAL_DMA_Abort+0x614>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d02c      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a38      	ldr	r2, [pc, #224]	; (8005e6c <HAL_DMA_Abort+0x618>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d027      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a37      	ldr	r2, [pc, #220]	; (8005e70 <HAL_DMA_Abort+0x61c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d022      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a35      	ldr	r2, [pc, #212]	; (8005e74 <HAL_DMA_Abort+0x620>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d01d      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a34      	ldr	r2, [pc, #208]	; (8005e78 <HAL_DMA_Abort+0x624>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d018      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a32      	ldr	r2, [pc, #200]	; (8005e7c <HAL_DMA_Abort+0x628>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d013      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a31      	ldr	r2, [pc, #196]	; (8005e80 <HAL_DMA_Abort+0x62c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00e      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a2f      	ldr	r2, [pc, #188]	; (8005e84 <HAL_DMA_Abort+0x630>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d009      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a2e      	ldr	r2, [pc, #184]	; (8005e88 <HAL_DMA_Abort+0x634>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d004      	beq.n	8005dde <HAL_DMA_Abort+0x58a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a2c      	ldr	r2, [pc, #176]	; (8005e8c <HAL_DMA_Abort+0x638>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d101      	bne.n	8005de2 <HAL_DMA_Abort+0x58e>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <HAL_DMA_Abort+0x590>
 8005de2:	2300      	movs	r3, #0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d015      	beq.n	8005e14 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005df0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00c      	beq.n	8005e14 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e08:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e12:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40020010 	.word	0x40020010
 8005e34:	40020028 	.word	0x40020028
 8005e38:	40020040 	.word	0x40020040
 8005e3c:	40020058 	.word	0x40020058
 8005e40:	40020070 	.word	0x40020070
 8005e44:	40020088 	.word	0x40020088
 8005e48:	400200a0 	.word	0x400200a0
 8005e4c:	400200b8 	.word	0x400200b8
 8005e50:	40020410 	.word	0x40020410
 8005e54:	40020428 	.word	0x40020428
 8005e58:	40020440 	.word	0x40020440
 8005e5c:	40020458 	.word	0x40020458
 8005e60:	40020470 	.word	0x40020470
 8005e64:	40020488 	.word	0x40020488
 8005e68:	400204a0 	.word	0x400204a0
 8005e6c:	400204b8 	.word	0x400204b8
 8005e70:	58025408 	.word	0x58025408
 8005e74:	5802541c 	.word	0x5802541c
 8005e78:	58025430 	.word	0x58025430
 8005e7c:	58025444 	.word	0x58025444
 8005e80:	58025458 	.word	0x58025458
 8005e84:	5802546c 	.word	0x5802546c
 8005e88:	58025480 	.word	0x58025480
 8005e8c:	58025494 	.word	0x58025494

08005e90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e205      	b.n	80062ae <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d004      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2280      	movs	r2, #128	; 0x80
 8005eb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e1fa      	b.n	80062ae <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a8c      	ldr	r2, [pc, #560]	; (80060f0 <HAL_DMA_Abort_IT+0x260>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d04a      	beq.n	8005f58 <HAL_DMA_Abort_IT+0xc8>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a8b      	ldr	r2, [pc, #556]	; (80060f4 <HAL_DMA_Abort_IT+0x264>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d045      	beq.n	8005f58 <HAL_DMA_Abort_IT+0xc8>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a89      	ldr	r2, [pc, #548]	; (80060f8 <HAL_DMA_Abort_IT+0x268>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d040      	beq.n	8005f58 <HAL_DMA_Abort_IT+0xc8>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a88      	ldr	r2, [pc, #544]	; (80060fc <HAL_DMA_Abort_IT+0x26c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d03b      	beq.n	8005f58 <HAL_DMA_Abort_IT+0xc8>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a86      	ldr	r2, [pc, #536]	; (8006100 <HAL_DMA_Abort_IT+0x270>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d036      	beq.n	8005f58 <HAL_DMA_Abort_IT+0xc8>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a85      	ldr	r2, [pc, #532]	; (8006104 <HAL_DMA_Abort_IT+0x274>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d031      	beq.n	8005f58 <HAL_DMA_Abort_IT+0xc8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a83      	ldr	r2, [pc, #524]	; (8006108 <HAL_DMA_Abort_IT+0x278>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d02c      	beq.n	8005f58 <HAL_DMA_Abort_IT+0xc8>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a82      	ldr	r2, [pc, #520]	; (800610c <HAL_DMA_Abort_IT+0x27c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d027      	beq.n	8005f58 <HAL_DMA_Abort_IT+0xc8>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a80      	ldr	r2, [pc, #512]	; (8006110 <HAL_DMA_Abort_IT+0x280>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d022      	beq.n	8005f58 <HAL_DMA_Abort_IT+0xc8>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a7f      	ldr	r2, [pc, #508]	; (8006114 <HAL_DMA_Abort_IT+0x284>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d01d      	beq.n	8005f58 <HAL_DMA_Abort_IT+0xc8>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a7d      	ldr	r2, [pc, #500]	; (8006118 <HAL_DMA_Abort_IT+0x288>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d018      	beq.n	8005f58 <HAL_DMA_Abort_IT+0xc8>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a7c      	ldr	r2, [pc, #496]	; (800611c <HAL_DMA_Abort_IT+0x28c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d013      	beq.n	8005f58 <HAL_DMA_Abort_IT+0xc8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a7a      	ldr	r2, [pc, #488]	; (8006120 <HAL_DMA_Abort_IT+0x290>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00e      	beq.n	8005f58 <HAL_DMA_Abort_IT+0xc8>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a79      	ldr	r2, [pc, #484]	; (8006124 <HAL_DMA_Abort_IT+0x294>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d009      	beq.n	8005f58 <HAL_DMA_Abort_IT+0xc8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a77      	ldr	r2, [pc, #476]	; (8006128 <HAL_DMA_Abort_IT+0x298>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d004      	beq.n	8005f58 <HAL_DMA_Abort_IT+0xc8>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a76      	ldr	r2, [pc, #472]	; (800612c <HAL_DMA_Abort_IT+0x29c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d101      	bne.n	8005f5c <HAL_DMA_Abort_IT+0xcc>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e000      	b.n	8005f5e <HAL_DMA_Abort_IT+0xce>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d065      	beq.n	800602e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2204      	movs	r2, #4
 8005f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a60      	ldr	r2, [pc, #384]	; (80060f0 <HAL_DMA_Abort_IT+0x260>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d04a      	beq.n	800600a <HAL_DMA_Abort_IT+0x17a>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a5e      	ldr	r2, [pc, #376]	; (80060f4 <HAL_DMA_Abort_IT+0x264>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d045      	beq.n	800600a <HAL_DMA_Abort_IT+0x17a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a5d      	ldr	r2, [pc, #372]	; (80060f8 <HAL_DMA_Abort_IT+0x268>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d040      	beq.n	800600a <HAL_DMA_Abort_IT+0x17a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a5b      	ldr	r2, [pc, #364]	; (80060fc <HAL_DMA_Abort_IT+0x26c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d03b      	beq.n	800600a <HAL_DMA_Abort_IT+0x17a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a5a      	ldr	r2, [pc, #360]	; (8006100 <HAL_DMA_Abort_IT+0x270>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d036      	beq.n	800600a <HAL_DMA_Abort_IT+0x17a>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a58      	ldr	r2, [pc, #352]	; (8006104 <HAL_DMA_Abort_IT+0x274>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d031      	beq.n	800600a <HAL_DMA_Abort_IT+0x17a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a57      	ldr	r2, [pc, #348]	; (8006108 <HAL_DMA_Abort_IT+0x278>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d02c      	beq.n	800600a <HAL_DMA_Abort_IT+0x17a>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a55      	ldr	r2, [pc, #340]	; (800610c <HAL_DMA_Abort_IT+0x27c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d027      	beq.n	800600a <HAL_DMA_Abort_IT+0x17a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a54      	ldr	r2, [pc, #336]	; (8006110 <HAL_DMA_Abort_IT+0x280>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d022      	beq.n	800600a <HAL_DMA_Abort_IT+0x17a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a52      	ldr	r2, [pc, #328]	; (8006114 <HAL_DMA_Abort_IT+0x284>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d01d      	beq.n	800600a <HAL_DMA_Abort_IT+0x17a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a51      	ldr	r2, [pc, #324]	; (8006118 <HAL_DMA_Abort_IT+0x288>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d018      	beq.n	800600a <HAL_DMA_Abort_IT+0x17a>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a4f      	ldr	r2, [pc, #316]	; (800611c <HAL_DMA_Abort_IT+0x28c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d013      	beq.n	800600a <HAL_DMA_Abort_IT+0x17a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a4e      	ldr	r2, [pc, #312]	; (8006120 <HAL_DMA_Abort_IT+0x290>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00e      	beq.n	800600a <HAL_DMA_Abort_IT+0x17a>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a4c      	ldr	r2, [pc, #304]	; (8006124 <HAL_DMA_Abort_IT+0x294>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d009      	beq.n	800600a <HAL_DMA_Abort_IT+0x17a>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a4b      	ldr	r2, [pc, #300]	; (8006128 <HAL_DMA_Abort_IT+0x298>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d004      	beq.n	800600a <HAL_DMA_Abort_IT+0x17a>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a49      	ldr	r2, [pc, #292]	; (800612c <HAL_DMA_Abort_IT+0x29c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d108      	bne.n	800601c <HAL_DMA_Abort_IT+0x18c>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0201 	bic.w	r2, r2, #1
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e147      	b.n	80062ac <HAL_DMA_Abort_IT+0x41c>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0201 	bic.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	e13e      	b.n	80062ac <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 020e 	bic.w	r2, r2, #14
 800603c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a2b      	ldr	r2, [pc, #172]	; (80060f0 <HAL_DMA_Abort_IT+0x260>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d04a      	beq.n	80060de <HAL_DMA_Abort_IT+0x24e>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a29      	ldr	r2, [pc, #164]	; (80060f4 <HAL_DMA_Abort_IT+0x264>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d045      	beq.n	80060de <HAL_DMA_Abort_IT+0x24e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a28      	ldr	r2, [pc, #160]	; (80060f8 <HAL_DMA_Abort_IT+0x268>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d040      	beq.n	80060de <HAL_DMA_Abort_IT+0x24e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a26      	ldr	r2, [pc, #152]	; (80060fc <HAL_DMA_Abort_IT+0x26c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d03b      	beq.n	80060de <HAL_DMA_Abort_IT+0x24e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a25      	ldr	r2, [pc, #148]	; (8006100 <HAL_DMA_Abort_IT+0x270>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d036      	beq.n	80060de <HAL_DMA_Abort_IT+0x24e>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a23      	ldr	r2, [pc, #140]	; (8006104 <HAL_DMA_Abort_IT+0x274>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d031      	beq.n	80060de <HAL_DMA_Abort_IT+0x24e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a22      	ldr	r2, [pc, #136]	; (8006108 <HAL_DMA_Abort_IT+0x278>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d02c      	beq.n	80060de <HAL_DMA_Abort_IT+0x24e>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a20      	ldr	r2, [pc, #128]	; (800610c <HAL_DMA_Abort_IT+0x27c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d027      	beq.n	80060de <HAL_DMA_Abort_IT+0x24e>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1f      	ldr	r2, [pc, #124]	; (8006110 <HAL_DMA_Abort_IT+0x280>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d022      	beq.n	80060de <HAL_DMA_Abort_IT+0x24e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1d      	ldr	r2, [pc, #116]	; (8006114 <HAL_DMA_Abort_IT+0x284>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d01d      	beq.n	80060de <HAL_DMA_Abort_IT+0x24e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1c      	ldr	r2, [pc, #112]	; (8006118 <HAL_DMA_Abort_IT+0x288>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d018      	beq.n	80060de <HAL_DMA_Abort_IT+0x24e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1a      	ldr	r2, [pc, #104]	; (800611c <HAL_DMA_Abort_IT+0x28c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d013      	beq.n	80060de <HAL_DMA_Abort_IT+0x24e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a19      	ldr	r2, [pc, #100]	; (8006120 <HAL_DMA_Abort_IT+0x290>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00e      	beq.n	80060de <HAL_DMA_Abort_IT+0x24e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a17      	ldr	r2, [pc, #92]	; (8006124 <HAL_DMA_Abort_IT+0x294>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d009      	beq.n	80060de <HAL_DMA_Abort_IT+0x24e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a16      	ldr	r2, [pc, #88]	; (8006128 <HAL_DMA_Abort_IT+0x298>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d004      	beq.n	80060de <HAL_DMA_Abort_IT+0x24e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a14      	ldr	r2, [pc, #80]	; (800612c <HAL_DMA_Abort_IT+0x29c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d128      	bne.n	8006130 <HAL_DMA_Abort_IT+0x2a0>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0201 	bic.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	e027      	b.n	8006140 <HAL_DMA_Abort_IT+0x2b0>
 80060f0:	40020010 	.word	0x40020010
 80060f4:	40020028 	.word	0x40020028
 80060f8:	40020040 	.word	0x40020040
 80060fc:	40020058 	.word	0x40020058
 8006100:	40020070 	.word	0x40020070
 8006104:	40020088 	.word	0x40020088
 8006108:	400200a0 	.word	0x400200a0
 800610c:	400200b8 	.word	0x400200b8
 8006110:	40020410 	.word	0x40020410
 8006114:	40020428 	.word	0x40020428
 8006118:	40020440 	.word	0x40020440
 800611c:	40020458 	.word	0x40020458
 8006120:	40020470 	.word	0x40020470
 8006124:	40020488 	.word	0x40020488
 8006128:	400204a0 	.word	0x400204a0
 800612c:	400204b8 	.word	0x400204b8
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0201 	bic.w	r2, r2, #1
 800613e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a5c      	ldr	r2, [pc, #368]	; (80062b8 <HAL_DMA_Abort_IT+0x428>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d072      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a5b      	ldr	r2, [pc, #364]	; (80062bc <HAL_DMA_Abort_IT+0x42c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d06d      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a59      	ldr	r2, [pc, #356]	; (80062c0 <HAL_DMA_Abort_IT+0x430>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d068      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a58      	ldr	r2, [pc, #352]	; (80062c4 <HAL_DMA_Abort_IT+0x434>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d063      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a56      	ldr	r2, [pc, #344]	; (80062c8 <HAL_DMA_Abort_IT+0x438>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d05e      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a55      	ldr	r2, [pc, #340]	; (80062cc <HAL_DMA_Abort_IT+0x43c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d059      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a53      	ldr	r2, [pc, #332]	; (80062d0 <HAL_DMA_Abort_IT+0x440>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d054      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a52      	ldr	r2, [pc, #328]	; (80062d4 <HAL_DMA_Abort_IT+0x444>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d04f      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a50      	ldr	r2, [pc, #320]	; (80062d8 <HAL_DMA_Abort_IT+0x448>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d04a      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a4f      	ldr	r2, [pc, #316]	; (80062dc <HAL_DMA_Abort_IT+0x44c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d045      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a4d      	ldr	r2, [pc, #308]	; (80062e0 <HAL_DMA_Abort_IT+0x450>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d040      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a4c      	ldr	r2, [pc, #304]	; (80062e4 <HAL_DMA_Abort_IT+0x454>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d03b      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a4a      	ldr	r2, [pc, #296]	; (80062e8 <HAL_DMA_Abort_IT+0x458>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d036      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a49      	ldr	r2, [pc, #292]	; (80062ec <HAL_DMA_Abort_IT+0x45c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d031      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a47      	ldr	r2, [pc, #284]	; (80062f0 <HAL_DMA_Abort_IT+0x460>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d02c      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a46      	ldr	r2, [pc, #280]	; (80062f4 <HAL_DMA_Abort_IT+0x464>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d027      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a44      	ldr	r2, [pc, #272]	; (80062f8 <HAL_DMA_Abort_IT+0x468>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d022      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a43      	ldr	r2, [pc, #268]	; (80062fc <HAL_DMA_Abort_IT+0x46c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d01d      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a41      	ldr	r2, [pc, #260]	; (8006300 <HAL_DMA_Abort_IT+0x470>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d018      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a40      	ldr	r2, [pc, #256]	; (8006304 <HAL_DMA_Abort_IT+0x474>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d013      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a3e      	ldr	r2, [pc, #248]	; (8006308 <HAL_DMA_Abort_IT+0x478>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00e      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a3d      	ldr	r2, [pc, #244]	; (800630c <HAL_DMA_Abort_IT+0x47c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d009      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a3b      	ldr	r2, [pc, #236]	; (8006310 <HAL_DMA_Abort_IT+0x480>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d004      	beq.n	8006230 <HAL_DMA_Abort_IT+0x3a0>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a3a      	ldr	r2, [pc, #232]	; (8006314 <HAL_DMA_Abort_IT+0x484>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d101      	bne.n	8006234 <HAL_DMA_Abort_IT+0x3a4>
 8006230:	2301      	movs	r3, #1
 8006232:	e000      	b.n	8006236 <HAL_DMA_Abort_IT+0x3a6>
 8006234:	2300      	movs	r3, #0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d028      	beq.n	800628c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006244:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006248:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	2201      	movs	r2, #1
 800625a:	409a      	lsls	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006268:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00c      	beq.n	800628c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800627c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006280:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800628a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40020010 	.word	0x40020010
 80062bc:	40020028 	.word	0x40020028
 80062c0:	40020040 	.word	0x40020040
 80062c4:	40020058 	.word	0x40020058
 80062c8:	40020070 	.word	0x40020070
 80062cc:	40020088 	.word	0x40020088
 80062d0:	400200a0 	.word	0x400200a0
 80062d4:	400200b8 	.word	0x400200b8
 80062d8:	40020410 	.word	0x40020410
 80062dc:	40020428 	.word	0x40020428
 80062e0:	40020440 	.word	0x40020440
 80062e4:	40020458 	.word	0x40020458
 80062e8:	40020470 	.word	0x40020470
 80062ec:	40020488 	.word	0x40020488
 80062f0:	400204a0 	.word	0x400204a0
 80062f4:	400204b8 	.word	0x400204b8
 80062f8:	58025408 	.word	0x58025408
 80062fc:	5802541c 	.word	0x5802541c
 8006300:	58025430 	.word	0x58025430
 8006304:	58025444 	.word	0x58025444
 8006308:	58025458 	.word	0x58025458
 800630c:	5802546c 	.word	0x5802546c
 8006310:	58025480 	.word	0x58025480
 8006314:	58025494 	.word	0x58025494

08006318 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08a      	sub	sp, #40	; 0x28
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006324:	4b67      	ldr	r3, [pc, #412]	; (80064c4 <HAL_DMA_IRQHandler+0x1ac>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a67      	ldr	r2, [pc, #412]	; (80064c8 <HAL_DMA_IRQHandler+0x1b0>)
 800632a:	fba2 2303 	umull	r2, r3, r2, r3
 800632e:	0a9b      	lsrs	r3, r3, #10
 8006330:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006336:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a5f      	ldr	r2, [pc, #380]	; (80064cc <HAL_DMA_IRQHandler+0x1b4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d04a      	beq.n	80063ea <HAL_DMA_IRQHandler+0xd2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a5d      	ldr	r2, [pc, #372]	; (80064d0 <HAL_DMA_IRQHandler+0x1b8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d045      	beq.n	80063ea <HAL_DMA_IRQHandler+0xd2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a5c      	ldr	r2, [pc, #368]	; (80064d4 <HAL_DMA_IRQHandler+0x1bc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d040      	beq.n	80063ea <HAL_DMA_IRQHandler+0xd2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a5a      	ldr	r2, [pc, #360]	; (80064d8 <HAL_DMA_IRQHandler+0x1c0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d03b      	beq.n	80063ea <HAL_DMA_IRQHandler+0xd2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a59      	ldr	r2, [pc, #356]	; (80064dc <HAL_DMA_IRQHandler+0x1c4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d036      	beq.n	80063ea <HAL_DMA_IRQHandler+0xd2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a57      	ldr	r2, [pc, #348]	; (80064e0 <HAL_DMA_IRQHandler+0x1c8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d031      	beq.n	80063ea <HAL_DMA_IRQHandler+0xd2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a56      	ldr	r2, [pc, #344]	; (80064e4 <HAL_DMA_IRQHandler+0x1cc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d02c      	beq.n	80063ea <HAL_DMA_IRQHandler+0xd2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a54      	ldr	r2, [pc, #336]	; (80064e8 <HAL_DMA_IRQHandler+0x1d0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d027      	beq.n	80063ea <HAL_DMA_IRQHandler+0xd2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a53      	ldr	r2, [pc, #332]	; (80064ec <HAL_DMA_IRQHandler+0x1d4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d022      	beq.n	80063ea <HAL_DMA_IRQHandler+0xd2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a51      	ldr	r2, [pc, #324]	; (80064f0 <HAL_DMA_IRQHandler+0x1d8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d01d      	beq.n	80063ea <HAL_DMA_IRQHandler+0xd2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a50      	ldr	r2, [pc, #320]	; (80064f4 <HAL_DMA_IRQHandler+0x1dc>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d018      	beq.n	80063ea <HAL_DMA_IRQHandler+0xd2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a4e      	ldr	r2, [pc, #312]	; (80064f8 <HAL_DMA_IRQHandler+0x1e0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d013      	beq.n	80063ea <HAL_DMA_IRQHandler+0xd2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a4d      	ldr	r2, [pc, #308]	; (80064fc <HAL_DMA_IRQHandler+0x1e4>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00e      	beq.n	80063ea <HAL_DMA_IRQHandler+0xd2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a4b      	ldr	r2, [pc, #300]	; (8006500 <HAL_DMA_IRQHandler+0x1e8>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d009      	beq.n	80063ea <HAL_DMA_IRQHandler+0xd2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a4a      	ldr	r2, [pc, #296]	; (8006504 <HAL_DMA_IRQHandler+0x1ec>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d004      	beq.n	80063ea <HAL_DMA_IRQHandler+0xd2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a48      	ldr	r2, [pc, #288]	; (8006508 <HAL_DMA_IRQHandler+0x1f0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d101      	bne.n	80063ee <HAL_DMA_IRQHandler+0xd6>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <HAL_DMA_IRQHandler+0xd8>
 80063ee:	2300      	movs	r3, #0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 842b 	beq.w	8006c4c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	2208      	movs	r2, #8
 8006400:	409a      	lsls	r2, r3
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	4013      	ands	r3, r2
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 80a2 	beq.w	8006550 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a2e      	ldr	r2, [pc, #184]	; (80064cc <HAL_DMA_IRQHandler+0x1b4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d04a      	beq.n	80064ac <HAL_DMA_IRQHandler+0x194>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a2d      	ldr	r2, [pc, #180]	; (80064d0 <HAL_DMA_IRQHandler+0x1b8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d045      	beq.n	80064ac <HAL_DMA_IRQHandler+0x194>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a2b      	ldr	r2, [pc, #172]	; (80064d4 <HAL_DMA_IRQHandler+0x1bc>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d040      	beq.n	80064ac <HAL_DMA_IRQHandler+0x194>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a2a      	ldr	r2, [pc, #168]	; (80064d8 <HAL_DMA_IRQHandler+0x1c0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d03b      	beq.n	80064ac <HAL_DMA_IRQHandler+0x194>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a28      	ldr	r2, [pc, #160]	; (80064dc <HAL_DMA_IRQHandler+0x1c4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d036      	beq.n	80064ac <HAL_DMA_IRQHandler+0x194>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a27      	ldr	r2, [pc, #156]	; (80064e0 <HAL_DMA_IRQHandler+0x1c8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d031      	beq.n	80064ac <HAL_DMA_IRQHandler+0x194>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a25      	ldr	r2, [pc, #148]	; (80064e4 <HAL_DMA_IRQHandler+0x1cc>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d02c      	beq.n	80064ac <HAL_DMA_IRQHandler+0x194>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a24      	ldr	r2, [pc, #144]	; (80064e8 <HAL_DMA_IRQHandler+0x1d0>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d027      	beq.n	80064ac <HAL_DMA_IRQHandler+0x194>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a22      	ldr	r2, [pc, #136]	; (80064ec <HAL_DMA_IRQHandler+0x1d4>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d022      	beq.n	80064ac <HAL_DMA_IRQHandler+0x194>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a21      	ldr	r2, [pc, #132]	; (80064f0 <HAL_DMA_IRQHandler+0x1d8>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d01d      	beq.n	80064ac <HAL_DMA_IRQHandler+0x194>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1f      	ldr	r2, [pc, #124]	; (80064f4 <HAL_DMA_IRQHandler+0x1dc>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d018      	beq.n	80064ac <HAL_DMA_IRQHandler+0x194>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1e      	ldr	r2, [pc, #120]	; (80064f8 <HAL_DMA_IRQHandler+0x1e0>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d013      	beq.n	80064ac <HAL_DMA_IRQHandler+0x194>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1c      	ldr	r2, [pc, #112]	; (80064fc <HAL_DMA_IRQHandler+0x1e4>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00e      	beq.n	80064ac <HAL_DMA_IRQHandler+0x194>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1b      	ldr	r2, [pc, #108]	; (8006500 <HAL_DMA_IRQHandler+0x1e8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d009      	beq.n	80064ac <HAL_DMA_IRQHandler+0x194>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a19      	ldr	r2, [pc, #100]	; (8006504 <HAL_DMA_IRQHandler+0x1ec>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d004      	beq.n	80064ac <HAL_DMA_IRQHandler+0x194>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a18      	ldr	r2, [pc, #96]	; (8006508 <HAL_DMA_IRQHandler+0x1f0>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d12f      	bne.n	800650c <HAL_DMA_IRQHandler+0x1f4>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	bf14      	ite	ne
 80064ba:	2301      	movne	r3, #1
 80064bc:	2300      	moveq	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	e02e      	b.n	8006520 <HAL_DMA_IRQHandler+0x208>
 80064c2:	bf00      	nop
 80064c4:	24000018 	.word	0x24000018
 80064c8:	1b4e81b5 	.word	0x1b4e81b5
 80064cc:	40020010 	.word	0x40020010
 80064d0:	40020028 	.word	0x40020028
 80064d4:	40020040 	.word	0x40020040
 80064d8:	40020058 	.word	0x40020058
 80064dc:	40020070 	.word	0x40020070
 80064e0:	40020088 	.word	0x40020088
 80064e4:	400200a0 	.word	0x400200a0
 80064e8:	400200b8 	.word	0x400200b8
 80064ec:	40020410 	.word	0x40020410
 80064f0:	40020428 	.word	0x40020428
 80064f4:	40020440 	.word	0x40020440
 80064f8:	40020458 	.word	0x40020458
 80064fc:	40020470 	.word	0x40020470
 8006500:	40020488 	.word	0x40020488
 8006504:	400204a0 	.word	0x400204a0
 8006508:	400204b8 	.word	0x400204b8
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0308 	and.w	r3, r3, #8
 8006516:	2b00      	cmp	r3, #0
 8006518:	bf14      	ite	ne
 800651a:	2301      	movne	r3, #1
 800651c:	2300      	moveq	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d015      	beq.n	8006550 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0204 	bic.w	r2, r2, #4
 8006532:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006538:	f003 031f 	and.w	r3, r3, #31
 800653c:	2208      	movs	r2, #8
 800653e:	409a      	lsls	r2, r3
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006548:	f043 0201 	orr.w	r2, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006554:	f003 031f 	and.w	r3, r3, #31
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	fa22 f303 	lsr.w	r3, r2, r3
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d06e      	beq.n	8006644 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a69      	ldr	r2, [pc, #420]	; (8006710 <HAL_DMA_IRQHandler+0x3f8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d04a      	beq.n	8006606 <HAL_DMA_IRQHandler+0x2ee>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a67      	ldr	r2, [pc, #412]	; (8006714 <HAL_DMA_IRQHandler+0x3fc>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d045      	beq.n	8006606 <HAL_DMA_IRQHandler+0x2ee>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a66      	ldr	r2, [pc, #408]	; (8006718 <HAL_DMA_IRQHandler+0x400>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d040      	beq.n	8006606 <HAL_DMA_IRQHandler+0x2ee>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a64      	ldr	r2, [pc, #400]	; (800671c <HAL_DMA_IRQHandler+0x404>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d03b      	beq.n	8006606 <HAL_DMA_IRQHandler+0x2ee>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a63      	ldr	r2, [pc, #396]	; (8006720 <HAL_DMA_IRQHandler+0x408>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d036      	beq.n	8006606 <HAL_DMA_IRQHandler+0x2ee>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a61      	ldr	r2, [pc, #388]	; (8006724 <HAL_DMA_IRQHandler+0x40c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d031      	beq.n	8006606 <HAL_DMA_IRQHandler+0x2ee>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a60      	ldr	r2, [pc, #384]	; (8006728 <HAL_DMA_IRQHandler+0x410>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d02c      	beq.n	8006606 <HAL_DMA_IRQHandler+0x2ee>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a5e      	ldr	r2, [pc, #376]	; (800672c <HAL_DMA_IRQHandler+0x414>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d027      	beq.n	8006606 <HAL_DMA_IRQHandler+0x2ee>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a5d      	ldr	r2, [pc, #372]	; (8006730 <HAL_DMA_IRQHandler+0x418>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d022      	beq.n	8006606 <HAL_DMA_IRQHandler+0x2ee>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a5b      	ldr	r2, [pc, #364]	; (8006734 <HAL_DMA_IRQHandler+0x41c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d01d      	beq.n	8006606 <HAL_DMA_IRQHandler+0x2ee>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a5a      	ldr	r2, [pc, #360]	; (8006738 <HAL_DMA_IRQHandler+0x420>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d018      	beq.n	8006606 <HAL_DMA_IRQHandler+0x2ee>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a58      	ldr	r2, [pc, #352]	; (800673c <HAL_DMA_IRQHandler+0x424>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d013      	beq.n	8006606 <HAL_DMA_IRQHandler+0x2ee>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a57      	ldr	r2, [pc, #348]	; (8006740 <HAL_DMA_IRQHandler+0x428>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00e      	beq.n	8006606 <HAL_DMA_IRQHandler+0x2ee>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a55      	ldr	r2, [pc, #340]	; (8006744 <HAL_DMA_IRQHandler+0x42c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d009      	beq.n	8006606 <HAL_DMA_IRQHandler+0x2ee>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a54      	ldr	r2, [pc, #336]	; (8006748 <HAL_DMA_IRQHandler+0x430>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d004      	beq.n	8006606 <HAL_DMA_IRQHandler+0x2ee>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a52      	ldr	r2, [pc, #328]	; (800674c <HAL_DMA_IRQHandler+0x434>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d10a      	bne.n	800661c <HAL_DMA_IRQHandler+0x304>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006610:	2b00      	cmp	r3, #0
 8006612:	bf14      	ite	ne
 8006614:	2301      	movne	r3, #1
 8006616:	2300      	moveq	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	e003      	b.n	8006624 <HAL_DMA_IRQHandler+0x30c>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2300      	movs	r3, #0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00d      	beq.n	8006644 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	2201      	movs	r2, #1
 8006632:	409a      	lsls	r2, r3
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663c:	f043 0202 	orr.w	r2, r3, #2
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006648:	f003 031f 	and.w	r3, r3, #31
 800664c:	2204      	movs	r2, #4
 800664e:	409a      	lsls	r2, r3
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	4013      	ands	r3, r2
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 808f 	beq.w	8006778 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a2c      	ldr	r2, [pc, #176]	; (8006710 <HAL_DMA_IRQHandler+0x3f8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d04a      	beq.n	80066fa <HAL_DMA_IRQHandler+0x3e2>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a2a      	ldr	r2, [pc, #168]	; (8006714 <HAL_DMA_IRQHandler+0x3fc>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d045      	beq.n	80066fa <HAL_DMA_IRQHandler+0x3e2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a29      	ldr	r2, [pc, #164]	; (8006718 <HAL_DMA_IRQHandler+0x400>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d040      	beq.n	80066fa <HAL_DMA_IRQHandler+0x3e2>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a27      	ldr	r2, [pc, #156]	; (800671c <HAL_DMA_IRQHandler+0x404>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d03b      	beq.n	80066fa <HAL_DMA_IRQHandler+0x3e2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a26      	ldr	r2, [pc, #152]	; (8006720 <HAL_DMA_IRQHandler+0x408>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d036      	beq.n	80066fa <HAL_DMA_IRQHandler+0x3e2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a24      	ldr	r2, [pc, #144]	; (8006724 <HAL_DMA_IRQHandler+0x40c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d031      	beq.n	80066fa <HAL_DMA_IRQHandler+0x3e2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a23      	ldr	r2, [pc, #140]	; (8006728 <HAL_DMA_IRQHandler+0x410>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d02c      	beq.n	80066fa <HAL_DMA_IRQHandler+0x3e2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a21      	ldr	r2, [pc, #132]	; (800672c <HAL_DMA_IRQHandler+0x414>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d027      	beq.n	80066fa <HAL_DMA_IRQHandler+0x3e2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a20      	ldr	r2, [pc, #128]	; (8006730 <HAL_DMA_IRQHandler+0x418>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d022      	beq.n	80066fa <HAL_DMA_IRQHandler+0x3e2>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1e      	ldr	r2, [pc, #120]	; (8006734 <HAL_DMA_IRQHandler+0x41c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d01d      	beq.n	80066fa <HAL_DMA_IRQHandler+0x3e2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1d      	ldr	r2, [pc, #116]	; (8006738 <HAL_DMA_IRQHandler+0x420>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d018      	beq.n	80066fa <HAL_DMA_IRQHandler+0x3e2>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a1b      	ldr	r2, [pc, #108]	; (800673c <HAL_DMA_IRQHandler+0x424>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d013      	beq.n	80066fa <HAL_DMA_IRQHandler+0x3e2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1a      	ldr	r2, [pc, #104]	; (8006740 <HAL_DMA_IRQHandler+0x428>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00e      	beq.n	80066fa <HAL_DMA_IRQHandler+0x3e2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a18      	ldr	r2, [pc, #96]	; (8006744 <HAL_DMA_IRQHandler+0x42c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d009      	beq.n	80066fa <HAL_DMA_IRQHandler+0x3e2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a17      	ldr	r2, [pc, #92]	; (8006748 <HAL_DMA_IRQHandler+0x430>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d004      	beq.n	80066fa <HAL_DMA_IRQHandler+0x3e2>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a15      	ldr	r2, [pc, #84]	; (800674c <HAL_DMA_IRQHandler+0x434>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d12a      	bne.n	8006750 <HAL_DMA_IRQHandler+0x438>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	bf14      	ite	ne
 8006708:	2301      	movne	r3, #1
 800670a:	2300      	moveq	r3, #0
 800670c:	b2db      	uxtb	r3, r3
 800670e:	e023      	b.n	8006758 <HAL_DMA_IRQHandler+0x440>
 8006710:	40020010 	.word	0x40020010
 8006714:	40020028 	.word	0x40020028
 8006718:	40020040 	.word	0x40020040
 800671c:	40020058 	.word	0x40020058
 8006720:	40020070 	.word	0x40020070
 8006724:	40020088 	.word	0x40020088
 8006728:	400200a0 	.word	0x400200a0
 800672c:	400200b8 	.word	0x400200b8
 8006730:	40020410 	.word	0x40020410
 8006734:	40020428 	.word	0x40020428
 8006738:	40020440 	.word	0x40020440
 800673c:	40020458 	.word	0x40020458
 8006740:	40020470 	.word	0x40020470
 8006744:	40020488 	.word	0x40020488
 8006748:	400204a0 	.word	0x400204a0
 800674c:	400204b8 	.word	0x400204b8
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2300      	movs	r3, #0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00d      	beq.n	8006778 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006760:	f003 031f 	and.w	r3, r3, #31
 8006764:	2204      	movs	r2, #4
 8006766:	409a      	lsls	r2, r3
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006770:	f043 0204 	orr.w	r2, r3, #4
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800677c:	f003 031f 	and.w	r3, r3, #31
 8006780:	2210      	movs	r2, #16
 8006782:	409a      	lsls	r2, r3
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	4013      	ands	r3, r2
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 80a6 	beq.w	80068da <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a85      	ldr	r2, [pc, #532]	; (80069a8 <HAL_DMA_IRQHandler+0x690>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d04a      	beq.n	800682e <HAL_DMA_IRQHandler+0x516>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a83      	ldr	r2, [pc, #524]	; (80069ac <HAL_DMA_IRQHandler+0x694>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d045      	beq.n	800682e <HAL_DMA_IRQHandler+0x516>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a82      	ldr	r2, [pc, #520]	; (80069b0 <HAL_DMA_IRQHandler+0x698>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d040      	beq.n	800682e <HAL_DMA_IRQHandler+0x516>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a80      	ldr	r2, [pc, #512]	; (80069b4 <HAL_DMA_IRQHandler+0x69c>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d03b      	beq.n	800682e <HAL_DMA_IRQHandler+0x516>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a7f      	ldr	r2, [pc, #508]	; (80069b8 <HAL_DMA_IRQHandler+0x6a0>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d036      	beq.n	800682e <HAL_DMA_IRQHandler+0x516>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a7d      	ldr	r2, [pc, #500]	; (80069bc <HAL_DMA_IRQHandler+0x6a4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d031      	beq.n	800682e <HAL_DMA_IRQHandler+0x516>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a7c      	ldr	r2, [pc, #496]	; (80069c0 <HAL_DMA_IRQHandler+0x6a8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d02c      	beq.n	800682e <HAL_DMA_IRQHandler+0x516>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a7a      	ldr	r2, [pc, #488]	; (80069c4 <HAL_DMA_IRQHandler+0x6ac>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d027      	beq.n	800682e <HAL_DMA_IRQHandler+0x516>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a79      	ldr	r2, [pc, #484]	; (80069c8 <HAL_DMA_IRQHandler+0x6b0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d022      	beq.n	800682e <HAL_DMA_IRQHandler+0x516>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a77      	ldr	r2, [pc, #476]	; (80069cc <HAL_DMA_IRQHandler+0x6b4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d01d      	beq.n	800682e <HAL_DMA_IRQHandler+0x516>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a76      	ldr	r2, [pc, #472]	; (80069d0 <HAL_DMA_IRQHandler+0x6b8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d018      	beq.n	800682e <HAL_DMA_IRQHandler+0x516>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a74      	ldr	r2, [pc, #464]	; (80069d4 <HAL_DMA_IRQHandler+0x6bc>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d013      	beq.n	800682e <HAL_DMA_IRQHandler+0x516>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a73      	ldr	r2, [pc, #460]	; (80069d8 <HAL_DMA_IRQHandler+0x6c0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00e      	beq.n	800682e <HAL_DMA_IRQHandler+0x516>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a71      	ldr	r2, [pc, #452]	; (80069dc <HAL_DMA_IRQHandler+0x6c4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d009      	beq.n	800682e <HAL_DMA_IRQHandler+0x516>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a70      	ldr	r2, [pc, #448]	; (80069e0 <HAL_DMA_IRQHandler+0x6c8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d004      	beq.n	800682e <HAL_DMA_IRQHandler+0x516>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a6e      	ldr	r2, [pc, #440]	; (80069e4 <HAL_DMA_IRQHandler+0x6cc>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d10a      	bne.n	8006844 <HAL_DMA_IRQHandler+0x52c>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0308 	and.w	r3, r3, #8
 8006838:	2b00      	cmp	r3, #0
 800683a:	bf14      	ite	ne
 800683c:	2301      	movne	r3, #1
 800683e:	2300      	moveq	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	e009      	b.n	8006858 <HAL_DMA_IRQHandler+0x540>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0304 	and.w	r3, r3, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	bf14      	ite	ne
 8006852:	2301      	movne	r3, #1
 8006854:	2300      	moveq	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d03e      	beq.n	80068da <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006860:	f003 031f 	and.w	r3, r3, #31
 8006864:	2210      	movs	r2, #16
 8006866:	409a      	lsls	r2, r3
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d018      	beq.n	80068ac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d108      	bne.n	800689a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	2b00      	cmp	r3, #0
 800688e:	d024      	beq.n	80068da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	4798      	blx	r3
 8006898:	e01f      	b.n	80068da <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d01b      	beq.n	80068da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
 80068aa:	e016      	b.n	80068da <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d107      	bne.n	80068ca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0208 	bic.w	r2, r2, #8
 80068c8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068de:	f003 031f 	and.w	r3, r3, #31
 80068e2:	2220      	movs	r2, #32
 80068e4:	409a      	lsls	r2, r3
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	4013      	ands	r3, r2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 8110 	beq.w	8006b10 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a2c      	ldr	r2, [pc, #176]	; (80069a8 <HAL_DMA_IRQHandler+0x690>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d04a      	beq.n	8006990 <HAL_DMA_IRQHandler+0x678>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a2b      	ldr	r2, [pc, #172]	; (80069ac <HAL_DMA_IRQHandler+0x694>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d045      	beq.n	8006990 <HAL_DMA_IRQHandler+0x678>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a29      	ldr	r2, [pc, #164]	; (80069b0 <HAL_DMA_IRQHandler+0x698>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d040      	beq.n	8006990 <HAL_DMA_IRQHandler+0x678>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a28      	ldr	r2, [pc, #160]	; (80069b4 <HAL_DMA_IRQHandler+0x69c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d03b      	beq.n	8006990 <HAL_DMA_IRQHandler+0x678>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a26      	ldr	r2, [pc, #152]	; (80069b8 <HAL_DMA_IRQHandler+0x6a0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d036      	beq.n	8006990 <HAL_DMA_IRQHandler+0x678>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a25      	ldr	r2, [pc, #148]	; (80069bc <HAL_DMA_IRQHandler+0x6a4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d031      	beq.n	8006990 <HAL_DMA_IRQHandler+0x678>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a23      	ldr	r2, [pc, #140]	; (80069c0 <HAL_DMA_IRQHandler+0x6a8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d02c      	beq.n	8006990 <HAL_DMA_IRQHandler+0x678>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a22      	ldr	r2, [pc, #136]	; (80069c4 <HAL_DMA_IRQHandler+0x6ac>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d027      	beq.n	8006990 <HAL_DMA_IRQHandler+0x678>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a20      	ldr	r2, [pc, #128]	; (80069c8 <HAL_DMA_IRQHandler+0x6b0>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d022      	beq.n	8006990 <HAL_DMA_IRQHandler+0x678>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1f      	ldr	r2, [pc, #124]	; (80069cc <HAL_DMA_IRQHandler+0x6b4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d01d      	beq.n	8006990 <HAL_DMA_IRQHandler+0x678>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a1d      	ldr	r2, [pc, #116]	; (80069d0 <HAL_DMA_IRQHandler+0x6b8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d018      	beq.n	8006990 <HAL_DMA_IRQHandler+0x678>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a1c      	ldr	r2, [pc, #112]	; (80069d4 <HAL_DMA_IRQHandler+0x6bc>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d013      	beq.n	8006990 <HAL_DMA_IRQHandler+0x678>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a1a      	ldr	r2, [pc, #104]	; (80069d8 <HAL_DMA_IRQHandler+0x6c0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00e      	beq.n	8006990 <HAL_DMA_IRQHandler+0x678>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a19      	ldr	r2, [pc, #100]	; (80069dc <HAL_DMA_IRQHandler+0x6c4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d009      	beq.n	8006990 <HAL_DMA_IRQHandler+0x678>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a17      	ldr	r2, [pc, #92]	; (80069e0 <HAL_DMA_IRQHandler+0x6c8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d004      	beq.n	8006990 <HAL_DMA_IRQHandler+0x678>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a16      	ldr	r2, [pc, #88]	; (80069e4 <HAL_DMA_IRQHandler+0x6cc>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d12b      	bne.n	80069e8 <HAL_DMA_IRQHandler+0x6d0>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0310 	and.w	r3, r3, #16
 800699a:	2b00      	cmp	r3, #0
 800699c:	bf14      	ite	ne
 800699e:	2301      	movne	r3, #1
 80069a0:	2300      	moveq	r3, #0
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	e02a      	b.n	80069fc <HAL_DMA_IRQHandler+0x6e4>
 80069a6:	bf00      	nop
 80069a8:	40020010 	.word	0x40020010
 80069ac:	40020028 	.word	0x40020028
 80069b0:	40020040 	.word	0x40020040
 80069b4:	40020058 	.word	0x40020058
 80069b8:	40020070 	.word	0x40020070
 80069bc:	40020088 	.word	0x40020088
 80069c0:	400200a0 	.word	0x400200a0
 80069c4:	400200b8 	.word	0x400200b8
 80069c8:	40020410 	.word	0x40020410
 80069cc:	40020428 	.word	0x40020428
 80069d0:	40020440 	.word	0x40020440
 80069d4:	40020458 	.word	0x40020458
 80069d8:	40020470 	.word	0x40020470
 80069dc:	40020488 	.word	0x40020488
 80069e0:	400204a0 	.word	0x400204a0
 80069e4:	400204b8 	.word	0x400204b8
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	bf14      	ite	ne
 80069f6:	2301      	movne	r3, #1
 80069f8:	2300      	moveq	r3, #0
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8087 	beq.w	8006b10 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	409a      	lsls	r2, r3
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d139      	bne.n	8006a92 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0216 	bic.w	r2, r2, #22
 8006a2c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	695a      	ldr	r2, [r3, #20]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a3c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d103      	bne.n	8006a4e <HAL_DMA_IRQHandler+0x736>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d007      	beq.n	8006a5e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0208 	bic.w	r2, r2, #8
 8006a5c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a62:	f003 031f 	and.w	r3, r3, #31
 8006a66:	223f      	movs	r2, #63	; 0x3f
 8006a68:	409a      	lsls	r2, r3
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 834a 	beq.w	800711c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	4798      	blx	r3
          }
          return;
 8006a90:	e344      	b.n	800711c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d018      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d108      	bne.n	8006ac0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d02c      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4798      	blx	r3
 8006abe:	e027      	b.n	8006b10 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d023      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	4798      	blx	r3
 8006ad0:	e01e      	b.n	8006b10 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10f      	bne.n	8006b00 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0210 	bic.w	r2, r2, #16
 8006aee:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d003      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 8306 	beq.w	8007126 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 8088 	beq.w	8006c38 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2204      	movs	r2, #4
 8006b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a7a      	ldr	r2, [pc, #488]	; (8006d20 <HAL_DMA_IRQHandler+0xa08>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d04a      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x8b8>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a79      	ldr	r2, [pc, #484]	; (8006d24 <HAL_DMA_IRQHandler+0xa0c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d045      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x8b8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a77      	ldr	r2, [pc, #476]	; (8006d28 <HAL_DMA_IRQHandler+0xa10>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d040      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x8b8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a76      	ldr	r2, [pc, #472]	; (8006d2c <HAL_DMA_IRQHandler+0xa14>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d03b      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x8b8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a74      	ldr	r2, [pc, #464]	; (8006d30 <HAL_DMA_IRQHandler+0xa18>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d036      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x8b8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a73      	ldr	r2, [pc, #460]	; (8006d34 <HAL_DMA_IRQHandler+0xa1c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d031      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x8b8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a71      	ldr	r2, [pc, #452]	; (8006d38 <HAL_DMA_IRQHandler+0xa20>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d02c      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x8b8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a70      	ldr	r2, [pc, #448]	; (8006d3c <HAL_DMA_IRQHandler+0xa24>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d027      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x8b8>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a6e      	ldr	r2, [pc, #440]	; (8006d40 <HAL_DMA_IRQHandler+0xa28>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d022      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x8b8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a6d      	ldr	r2, [pc, #436]	; (8006d44 <HAL_DMA_IRQHandler+0xa2c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d01d      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x8b8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a6b      	ldr	r2, [pc, #428]	; (8006d48 <HAL_DMA_IRQHandler+0xa30>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d018      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x8b8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a6a      	ldr	r2, [pc, #424]	; (8006d4c <HAL_DMA_IRQHandler+0xa34>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d013      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x8b8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a68      	ldr	r2, [pc, #416]	; (8006d50 <HAL_DMA_IRQHandler+0xa38>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00e      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x8b8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a67      	ldr	r2, [pc, #412]	; (8006d54 <HAL_DMA_IRQHandler+0xa3c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d009      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x8b8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a65      	ldr	r2, [pc, #404]	; (8006d58 <HAL_DMA_IRQHandler+0xa40>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d004      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x8b8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a64      	ldr	r2, [pc, #400]	; (8006d5c <HAL_DMA_IRQHandler+0xa44>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d108      	bne.n	8006be2 <HAL_DMA_IRQHandler+0x8ca>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0201 	bic.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	e007      	b.n	8006bf2 <HAL_DMA_IRQHandler+0x8da>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0201 	bic.w	r2, r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d307      	bcc.n	8006c0e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1f2      	bne.n	8006bf2 <HAL_DMA_IRQHandler+0x8da>
 8006c0c:	e000      	b.n	8006c10 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006c0e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d004      	beq.n	8006c30 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2203      	movs	r2, #3
 8006c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006c2e:	e003      	b.n	8006c38 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8272 	beq.w	8007126 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	4798      	blx	r3
 8006c4a:	e26c      	b.n	8007126 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a43      	ldr	r2, [pc, #268]	; (8006d60 <HAL_DMA_IRQHandler+0xa48>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d022      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x984>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a42      	ldr	r2, [pc, #264]	; (8006d64 <HAL_DMA_IRQHandler+0xa4c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d01d      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x984>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a40      	ldr	r2, [pc, #256]	; (8006d68 <HAL_DMA_IRQHandler+0xa50>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d018      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x984>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a3f      	ldr	r2, [pc, #252]	; (8006d6c <HAL_DMA_IRQHandler+0xa54>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d013      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x984>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a3d      	ldr	r2, [pc, #244]	; (8006d70 <HAL_DMA_IRQHandler+0xa58>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d00e      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x984>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a3c      	ldr	r2, [pc, #240]	; (8006d74 <HAL_DMA_IRQHandler+0xa5c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d009      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x984>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a3a      	ldr	r2, [pc, #232]	; (8006d78 <HAL_DMA_IRQHandler+0xa60>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d004      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x984>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a39      	ldr	r2, [pc, #228]	; (8006d7c <HAL_DMA_IRQHandler+0xa64>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d101      	bne.n	8006ca0 <HAL_DMA_IRQHandler+0x988>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <HAL_DMA_IRQHandler+0x98a>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 823f 	beq.w	8007126 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb4:	f003 031f 	and.w	r3, r3, #31
 8006cb8:	2204      	movs	r2, #4
 8006cba:	409a      	lsls	r2, r3
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 80cd 	beq.w	8006e60 <HAL_DMA_IRQHandler+0xb48>
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 80c7 	beq.w	8006e60 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd6:	f003 031f 	and.w	r3, r3, #31
 8006cda:	2204      	movs	r2, #4
 8006cdc:	409a      	lsls	r2, r3
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d049      	beq.n	8006d80 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d109      	bne.n	8006d0a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 8210 	beq.w	8007120 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d08:	e20a      	b.n	8007120 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 8206 	beq.w	8007120 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d1c:	e200      	b.n	8007120 <HAL_DMA_IRQHandler+0xe08>
 8006d1e:	bf00      	nop
 8006d20:	40020010 	.word	0x40020010
 8006d24:	40020028 	.word	0x40020028
 8006d28:	40020040 	.word	0x40020040
 8006d2c:	40020058 	.word	0x40020058
 8006d30:	40020070 	.word	0x40020070
 8006d34:	40020088 	.word	0x40020088
 8006d38:	400200a0 	.word	0x400200a0
 8006d3c:	400200b8 	.word	0x400200b8
 8006d40:	40020410 	.word	0x40020410
 8006d44:	40020428 	.word	0x40020428
 8006d48:	40020440 	.word	0x40020440
 8006d4c:	40020458 	.word	0x40020458
 8006d50:	40020470 	.word	0x40020470
 8006d54:	40020488 	.word	0x40020488
 8006d58:	400204a0 	.word	0x400204a0
 8006d5c:	400204b8 	.word	0x400204b8
 8006d60:	58025408 	.word	0x58025408
 8006d64:	5802541c 	.word	0x5802541c
 8006d68:	58025430 	.word	0x58025430
 8006d6c:	58025444 	.word	0x58025444
 8006d70:	58025458 	.word	0x58025458
 8006d74:	5802546c 	.word	0x5802546c
 8006d78:	58025480 	.word	0x58025480
 8006d7c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d160      	bne.n	8006e4c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a8c      	ldr	r2, [pc, #560]	; (8006fc0 <HAL_DMA_IRQHandler+0xca8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d04a      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xb12>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a8a      	ldr	r2, [pc, #552]	; (8006fc4 <HAL_DMA_IRQHandler+0xcac>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d045      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xb12>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a89      	ldr	r2, [pc, #548]	; (8006fc8 <HAL_DMA_IRQHandler+0xcb0>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d040      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xb12>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a87      	ldr	r2, [pc, #540]	; (8006fcc <HAL_DMA_IRQHandler+0xcb4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d03b      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xb12>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a86      	ldr	r2, [pc, #536]	; (8006fd0 <HAL_DMA_IRQHandler+0xcb8>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d036      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xb12>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a84      	ldr	r2, [pc, #528]	; (8006fd4 <HAL_DMA_IRQHandler+0xcbc>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d031      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xb12>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a83      	ldr	r2, [pc, #524]	; (8006fd8 <HAL_DMA_IRQHandler+0xcc0>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d02c      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xb12>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a81      	ldr	r2, [pc, #516]	; (8006fdc <HAL_DMA_IRQHandler+0xcc4>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d027      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xb12>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a80      	ldr	r2, [pc, #512]	; (8006fe0 <HAL_DMA_IRQHandler+0xcc8>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d022      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xb12>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a7e      	ldr	r2, [pc, #504]	; (8006fe4 <HAL_DMA_IRQHandler+0xccc>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d01d      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xb12>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a7d      	ldr	r2, [pc, #500]	; (8006fe8 <HAL_DMA_IRQHandler+0xcd0>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d018      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xb12>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a7b      	ldr	r2, [pc, #492]	; (8006fec <HAL_DMA_IRQHandler+0xcd4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xb12>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a7a      	ldr	r2, [pc, #488]	; (8006ff0 <HAL_DMA_IRQHandler+0xcd8>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00e      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xb12>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a78      	ldr	r2, [pc, #480]	; (8006ff4 <HAL_DMA_IRQHandler+0xcdc>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d009      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xb12>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a77      	ldr	r2, [pc, #476]	; (8006ff8 <HAL_DMA_IRQHandler+0xce0>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <HAL_DMA_IRQHandler+0xb12>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a75      	ldr	r2, [pc, #468]	; (8006ffc <HAL_DMA_IRQHandler+0xce4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d108      	bne.n	8006e3c <HAL_DMA_IRQHandler+0xb24>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0208 	bic.w	r2, r2, #8
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	e007      	b.n	8006e4c <HAL_DMA_IRQHandler+0xb34>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0204 	bic.w	r2, r2, #4
 8006e4a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 8165 	beq.w	8007120 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e5e:	e15f      	b.n	8007120 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e64:	f003 031f 	and.w	r3, r3, #31
 8006e68:	2202      	movs	r2, #2
 8006e6a:	409a      	lsls	r2, r3
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	4013      	ands	r3, r2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 80c5 	beq.w	8007000 <HAL_DMA_IRQHandler+0xce8>
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 80bf 	beq.w	8007000 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e86:	f003 031f 	and.w	r3, r3, #31
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	409a      	lsls	r2, r3
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d018      	beq.n	8006ece <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d109      	bne.n	8006eba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f000 813a 	beq.w	8007124 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eb8:	e134      	b.n	8007124 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 8130 	beq.w	8007124 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ecc:	e12a      	b.n	8007124 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f003 0320 	and.w	r3, r3, #32
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d168      	bne.n	8006faa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a38      	ldr	r2, [pc, #224]	; (8006fc0 <HAL_DMA_IRQHandler+0xca8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d04a      	beq.n	8006f78 <HAL_DMA_IRQHandler+0xc60>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a37      	ldr	r2, [pc, #220]	; (8006fc4 <HAL_DMA_IRQHandler+0xcac>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d045      	beq.n	8006f78 <HAL_DMA_IRQHandler+0xc60>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a35      	ldr	r2, [pc, #212]	; (8006fc8 <HAL_DMA_IRQHandler+0xcb0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d040      	beq.n	8006f78 <HAL_DMA_IRQHandler+0xc60>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a34      	ldr	r2, [pc, #208]	; (8006fcc <HAL_DMA_IRQHandler+0xcb4>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d03b      	beq.n	8006f78 <HAL_DMA_IRQHandler+0xc60>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a32      	ldr	r2, [pc, #200]	; (8006fd0 <HAL_DMA_IRQHandler+0xcb8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d036      	beq.n	8006f78 <HAL_DMA_IRQHandler+0xc60>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a31      	ldr	r2, [pc, #196]	; (8006fd4 <HAL_DMA_IRQHandler+0xcbc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d031      	beq.n	8006f78 <HAL_DMA_IRQHandler+0xc60>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a2f      	ldr	r2, [pc, #188]	; (8006fd8 <HAL_DMA_IRQHandler+0xcc0>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d02c      	beq.n	8006f78 <HAL_DMA_IRQHandler+0xc60>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a2e      	ldr	r2, [pc, #184]	; (8006fdc <HAL_DMA_IRQHandler+0xcc4>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d027      	beq.n	8006f78 <HAL_DMA_IRQHandler+0xc60>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a2c      	ldr	r2, [pc, #176]	; (8006fe0 <HAL_DMA_IRQHandler+0xcc8>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d022      	beq.n	8006f78 <HAL_DMA_IRQHandler+0xc60>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a2b      	ldr	r2, [pc, #172]	; (8006fe4 <HAL_DMA_IRQHandler+0xccc>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d01d      	beq.n	8006f78 <HAL_DMA_IRQHandler+0xc60>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a29      	ldr	r2, [pc, #164]	; (8006fe8 <HAL_DMA_IRQHandler+0xcd0>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d018      	beq.n	8006f78 <HAL_DMA_IRQHandler+0xc60>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a28      	ldr	r2, [pc, #160]	; (8006fec <HAL_DMA_IRQHandler+0xcd4>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d013      	beq.n	8006f78 <HAL_DMA_IRQHandler+0xc60>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a26      	ldr	r2, [pc, #152]	; (8006ff0 <HAL_DMA_IRQHandler+0xcd8>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00e      	beq.n	8006f78 <HAL_DMA_IRQHandler+0xc60>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a25      	ldr	r2, [pc, #148]	; (8006ff4 <HAL_DMA_IRQHandler+0xcdc>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d009      	beq.n	8006f78 <HAL_DMA_IRQHandler+0xc60>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a23      	ldr	r2, [pc, #140]	; (8006ff8 <HAL_DMA_IRQHandler+0xce0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d004      	beq.n	8006f78 <HAL_DMA_IRQHandler+0xc60>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a22      	ldr	r2, [pc, #136]	; (8006ffc <HAL_DMA_IRQHandler+0xce4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d108      	bne.n	8006f8a <HAL_DMA_IRQHandler+0xc72>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 0214 	bic.w	r2, r2, #20
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	e007      	b.n	8006f9a <HAL_DMA_IRQHandler+0xc82>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 020a 	bic.w	r2, r2, #10
 8006f98:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 80b8 	beq.w	8007124 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fbc:	e0b2      	b.n	8007124 <HAL_DMA_IRQHandler+0xe0c>
 8006fbe:	bf00      	nop
 8006fc0:	40020010 	.word	0x40020010
 8006fc4:	40020028 	.word	0x40020028
 8006fc8:	40020040 	.word	0x40020040
 8006fcc:	40020058 	.word	0x40020058
 8006fd0:	40020070 	.word	0x40020070
 8006fd4:	40020088 	.word	0x40020088
 8006fd8:	400200a0 	.word	0x400200a0
 8006fdc:	400200b8 	.word	0x400200b8
 8006fe0:	40020410 	.word	0x40020410
 8006fe4:	40020428 	.word	0x40020428
 8006fe8:	40020440 	.word	0x40020440
 8006fec:	40020458 	.word	0x40020458
 8006ff0:	40020470 	.word	0x40020470
 8006ff4:	40020488 	.word	0x40020488
 8006ff8:	400204a0 	.word	0x400204a0
 8006ffc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007004:	f003 031f 	and.w	r3, r3, #31
 8007008:	2208      	movs	r2, #8
 800700a:	409a      	lsls	r2, r3
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	4013      	ands	r3, r2
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 8088 	beq.w	8007126 <HAL_DMA_IRQHandler+0xe0e>
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f003 0308 	and.w	r3, r3, #8
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8082 	beq.w	8007126 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a41      	ldr	r2, [pc, #260]	; (800712c <HAL_DMA_IRQHandler+0xe14>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d04a      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xdaa>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a3f      	ldr	r2, [pc, #252]	; (8007130 <HAL_DMA_IRQHandler+0xe18>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d045      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xdaa>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a3e      	ldr	r2, [pc, #248]	; (8007134 <HAL_DMA_IRQHandler+0xe1c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d040      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xdaa>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a3c      	ldr	r2, [pc, #240]	; (8007138 <HAL_DMA_IRQHandler+0xe20>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d03b      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xdaa>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a3b      	ldr	r2, [pc, #236]	; (800713c <HAL_DMA_IRQHandler+0xe24>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d036      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xdaa>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a39      	ldr	r2, [pc, #228]	; (8007140 <HAL_DMA_IRQHandler+0xe28>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d031      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xdaa>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a38      	ldr	r2, [pc, #224]	; (8007144 <HAL_DMA_IRQHandler+0xe2c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d02c      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xdaa>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a36      	ldr	r2, [pc, #216]	; (8007148 <HAL_DMA_IRQHandler+0xe30>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d027      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xdaa>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a35      	ldr	r2, [pc, #212]	; (800714c <HAL_DMA_IRQHandler+0xe34>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d022      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xdaa>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a33      	ldr	r2, [pc, #204]	; (8007150 <HAL_DMA_IRQHandler+0xe38>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d01d      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xdaa>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a32      	ldr	r2, [pc, #200]	; (8007154 <HAL_DMA_IRQHandler+0xe3c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d018      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xdaa>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a30      	ldr	r2, [pc, #192]	; (8007158 <HAL_DMA_IRQHandler+0xe40>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d013      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xdaa>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a2f      	ldr	r2, [pc, #188]	; (800715c <HAL_DMA_IRQHandler+0xe44>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00e      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xdaa>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a2d      	ldr	r2, [pc, #180]	; (8007160 <HAL_DMA_IRQHandler+0xe48>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d009      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xdaa>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a2c      	ldr	r2, [pc, #176]	; (8007164 <HAL_DMA_IRQHandler+0xe4c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d004      	beq.n	80070c2 <HAL_DMA_IRQHandler+0xdaa>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a2a      	ldr	r2, [pc, #168]	; (8007168 <HAL_DMA_IRQHandler+0xe50>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d108      	bne.n	80070d4 <HAL_DMA_IRQHandler+0xdbc>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 021c 	bic.w	r2, r2, #28
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	e007      	b.n	80070e4 <HAL_DMA_IRQHandler+0xdcc>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 020e 	bic.w	r2, r2, #14
 80070e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e8:	f003 031f 	and.w	r3, r3, #31
 80070ec:	2201      	movs	r2, #1
 80070ee:	409a      	lsls	r2, r3
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d009      	beq.n	8007126 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	4798      	blx	r3
 800711a:	e004      	b.n	8007126 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800711c:	bf00      	nop
 800711e:	e002      	b.n	8007126 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007120:	bf00      	nop
 8007122:	e000      	b.n	8007126 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007124:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007126:	3728      	adds	r7, #40	; 0x28
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	40020010 	.word	0x40020010
 8007130:	40020028 	.word	0x40020028
 8007134:	40020040 	.word	0x40020040
 8007138:	40020058 	.word	0x40020058
 800713c:	40020070 	.word	0x40020070
 8007140:	40020088 	.word	0x40020088
 8007144:	400200a0 	.word	0x400200a0
 8007148:	400200b8 	.word	0x400200b8
 800714c:	40020410 	.word	0x40020410
 8007150:	40020428 	.word	0x40020428
 8007154:	40020440 	.word	0x40020440
 8007158:	40020458 	.word	0x40020458
 800715c:	40020470 	.word	0x40020470
 8007160:	40020488 	.word	0x40020488
 8007164:	400204a0 	.word	0x400204a0
 8007168:	400204b8 	.word	0x400204b8

0800716c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800717a:	b2db      	uxtb	r3, r3
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a84      	ldr	r2, [pc, #528]	; (80073d0 <DMA_SetConfig+0x230>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d072      	beq.n	80072aa <DMA_SetConfig+0x10a>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a82      	ldr	r2, [pc, #520]	; (80073d4 <DMA_SetConfig+0x234>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d06d      	beq.n	80072aa <DMA_SetConfig+0x10a>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a81      	ldr	r2, [pc, #516]	; (80073d8 <DMA_SetConfig+0x238>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d068      	beq.n	80072aa <DMA_SetConfig+0x10a>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a7f      	ldr	r2, [pc, #508]	; (80073dc <DMA_SetConfig+0x23c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d063      	beq.n	80072aa <DMA_SetConfig+0x10a>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a7e      	ldr	r2, [pc, #504]	; (80073e0 <DMA_SetConfig+0x240>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d05e      	beq.n	80072aa <DMA_SetConfig+0x10a>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a7c      	ldr	r2, [pc, #496]	; (80073e4 <DMA_SetConfig+0x244>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d059      	beq.n	80072aa <DMA_SetConfig+0x10a>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a7b      	ldr	r2, [pc, #492]	; (80073e8 <DMA_SetConfig+0x248>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d054      	beq.n	80072aa <DMA_SetConfig+0x10a>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a79      	ldr	r2, [pc, #484]	; (80073ec <DMA_SetConfig+0x24c>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d04f      	beq.n	80072aa <DMA_SetConfig+0x10a>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a78      	ldr	r2, [pc, #480]	; (80073f0 <DMA_SetConfig+0x250>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d04a      	beq.n	80072aa <DMA_SetConfig+0x10a>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a76      	ldr	r2, [pc, #472]	; (80073f4 <DMA_SetConfig+0x254>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d045      	beq.n	80072aa <DMA_SetConfig+0x10a>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a75      	ldr	r2, [pc, #468]	; (80073f8 <DMA_SetConfig+0x258>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d040      	beq.n	80072aa <DMA_SetConfig+0x10a>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a73      	ldr	r2, [pc, #460]	; (80073fc <DMA_SetConfig+0x25c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d03b      	beq.n	80072aa <DMA_SetConfig+0x10a>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a72      	ldr	r2, [pc, #456]	; (8007400 <DMA_SetConfig+0x260>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d036      	beq.n	80072aa <DMA_SetConfig+0x10a>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a70      	ldr	r2, [pc, #448]	; (8007404 <DMA_SetConfig+0x264>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d031      	beq.n	80072aa <DMA_SetConfig+0x10a>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a6f      	ldr	r2, [pc, #444]	; (8007408 <DMA_SetConfig+0x268>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d02c      	beq.n	80072aa <DMA_SetConfig+0x10a>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a6d      	ldr	r2, [pc, #436]	; (800740c <DMA_SetConfig+0x26c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d027      	beq.n	80072aa <DMA_SetConfig+0x10a>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a6c      	ldr	r2, [pc, #432]	; (8007410 <DMA_SetConfig+0x270>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d022      	beq.n	80072aa <DMA_SetConfig+0x10a>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a6a      	ldr	r2, [pc, #424]	; (8007414 <DMA_SetConfig+0x274>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d01d      	beq.n	80072aa <DMA_SetConfig+0x10a>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a69      	ldr	r2, [pc, #420]	; (8007418 <DMA_SetConfig+0x278>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d018      	beq.n	80072aa <DMA_SetConfig+0x10a>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a67      	ldr	r2, [pc, #412]	; (800741c <DMA_SetConfig+0x27c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <DMA_SetConfig+0x10a>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a66      	ldr	r2, [pc, #408]	; (8007420 <DMA_SetConfig+0x280>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00e      	beq.n	80072aa <DMA_SetConfig+0x10a>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a64      	ldr	r2, [pc, #400]	; (8007424 <DMA_SetConfig+0x284>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d009      	beq.n	80072aa <DMA_SetConfig+0x10a>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a63      	ldr	r2, [pc, #396]	; (8007428 <DMA_SetConfig+0x288>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d004      	beq.n	80072aa <DMA_SetConfig+0x10a>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a61      	ldr	r2, [pc, #388]	; (800742c <DMA_SetConfig+0x28c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d101      	bne.n	80072ae <DMA_SetConfig+0x10e>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e000      	b.n	80072b0 <DMA_SetConfig+0x110>
 80072ae:	2300      	movs	r3, #0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00d      	beq.n	80072d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a3e      	ldr	r2, [pc, #248]	; (80073d0 <DMA_SetConfig+0x230>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d04a      	beq.n	8007370 <DMA_SetConfig+0x1d0>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a3d      	ldr	r2, [pc, #244]	; (80073d4 <DMA_SetConfig+0x234>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d045      	beq.n	8007370 <DMA_SetConfig+0x1d0>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a3b      	ldr	r2, [pc, #236]	; (80073d8 <DMA_SetConfig+0x238>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d040      	beq.n	8007370 <DMA_SetConfig+0x1d0>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a3a      	ldr	r2, [pc, #232]	; (80073dc <DMA_SetConfig+0x23c>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d03b      	beq.n	8007370 <DMA_SetConfig+0x1d0>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a38      	ldr	r2, [pc, #224]	; (80073e0 <DMA_SetConfig+0x240>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d036      	beq.n	8007370 <DMA_SetConfig+0x1d0>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a37      	ldr	r2, [pc, #220]	; (80073e4 <DMA_SetConfig+0x244>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d031      	beq.n	8007370 <DMA_SetConfig+0x1d0>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a35      	ldr	r2, [pc, #212]	; (80073e8 <DMA_SetConfig+0x248>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d02c      	beq.n	8007370 <DMA_SetConfig+0x1d0>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a34      	ldr	r2, [pc, #208]	; (80073ec <DMA_SetConfig+0x24c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d027      	beq.n	8007370 <DMA_SetConfig+0x1d0>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a32      	ldr	r2, [pc, #200]	; (80073f0 <DMA_SetConfig+0x250>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d022      	beq.n	8007370 <DMA_SetConfig+0x1d0>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a31      	ldr	r2, [pc, #196]	; (80073f4 <DMA_SetConfig+0x254>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d01d      	beq.n	8007370 <DMA_SetConfig+0x1d0>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a2f      	ldr	r2, [pc, #188]	; (80073f8 <DMA_SetConfig+0x258>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d018      	beq.n	8007370 <DMA_SetConfig+0x1d0>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a2e      	ldr	r2, [pc, #184]	; (80073fc <DMA_SetConfig+0x25c>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d013      	beq.n	8007370 <DMA_SetConfig+0x1d0>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a2c      	ldr	r2, [pc, #176]	; (8007400 <DMA_SetConfig+0x260>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d00e      	beq.n	8007370 <DMA_SetConfig+0x1d0>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a2b      	ldr	r2, [pc, #172]	; (8007404 <DMA_SetConfig+0x264>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d009      	beq.n	8007370 <DMA_SetConfig+0x1d0>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a29      	ldr	r2, [pc, #164]	; (8007408 <DMA_SetConfig+0x268>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d004      	beq.n	8007370 <DMA_SetConfig+0x1d0>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a28      	ldr	r2, [pc, #160]	; (800740c <DMA_SetConfig+0x26c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d101      	bne.n	8007374 <DMA_SetConfig+0x1d4>
 8007370:	2301      	movs	r3, #1
 8007372:	e000      	b.n	8007376 <DMA_SetConfig+0x1d6>
 8007374:	2300      	movs	r3, #0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d05a      	beq.n	8007430 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800737e:	f003 031f 	and.w	r3, r3, #31
 8007382:	223f      	movs	r2, #63	; 0x3f
 8007384:	409a      	lsls	r2, r3
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007398:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	2b40      	cmp	r3, #64	; 0x40
 80073a8:	d108      	bne.n	80073bc <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80073ba:	e087      	b.n	80074cc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	60da      	str	r2, [r3, #12]
}
 80073cc:	e07e      	b.n	80074cc <DMA_SetConfig+0x32c>
 80073ce:	bf00      	nop
 80073d0:	40020010 	.word	0x40020010
 80073d4:	40020028 	.word	0x40020028
 80073d8:	40020040 	.word	0x40020040
 80073dc:	40020058 	.word	0x40020058
 80073e0:	40020070 	.word	0x40020070
 80073e4:	40020088 	.word	0x40020088
 80073e8:	400200a0 	.word	0x400200a0
 80073ec:	400200b8 	.word	0x400200b8
 80073f0:	40020410 	.word	0x40020410
 80073f4:	40020428 	.word	0x40020428
 80073f8:	40020440 	.word	0x40020440
 80073fc:	40020458 	.word	0x40020458
 8007400:	40020470 	.word	0x40020470
 8007404:	40020488 	.word	0x40020488
 8007408:	400204a0 	.word	0x400204a0
 800740c:	400204b8 	.word	0x400204b8
 8007410:	58025408 	.word	0x58025408
 8007414:	5802541c 	.word	0x5802541c
 8007418:	58025430 	.word	0x58025430
 800741c:	58025444 	.word	0x58025444
 8007420:	58025458 	.word	0x58025458
 8007424:	5802546c 	.word	0x5802546c
 8007428:	58025480 	.word	0x58025480
 800742c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a28      	ldr	r2, [pc, #160]	; (80074d8 <DMA_SetConfig+0x338>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d022      	beq.n	8007480 <DMA_SetConfig+0x2e0>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a27      	ldr	r2, [pc, #156]	; (80074dc <DMA_SetConfig+0x33c>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d01d      	beq.n	8007480 <DMA_SetConfig+0x2e0>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a25      	ldr	r2, [pc, #148]	; (80074e0 <DMA_SetConfig+0x340>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d018      	beq.n	8007480 <DMA_SetConfig+0x2e0>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a24      	ldr	r2, [pc, #144]	; (80074e4 <DMA_SetConfig+0x344>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d013      	beq.n	8007480 <DMA_SetConfig+0x2e0>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a22      	ldr	r2, [pc, #136]	; (80074e8 <DMA_SetConfig+0x348>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d00e      	beq.n	8007480 <DMA_SetConfig+0x2e0>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a21      	ldr	r2, [pc, #132]	; (80074ec <DMA_SetConfig+0x34c>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d009      	beq.n	8007480 <DMA_SetConfig+0x2e0>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1f      	ldr	r2, [pc, #124]	; (80074f0 <DMA_SetConfig+0x350>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d004      	beq.n	8007480 <DMA_SetConfig+0x2e0>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a1e      	ldr	r2, [pc, #120]	; (80074f4 <DMA_SetConfig+0x354>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d101      	bne.n	8007484 <DMA_SetConfig+0x2e4>
 8007480:	2301      	movs	r3, #1
 8007482:	e000      	b.n	8007486 <DMA_SetConfig+0x2e6>
 8007484:	2300      	movs	r3, #0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d020      	beq.n	80074cc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800748e:	f003 031f 	and.w	r3, r3, #31
 8007492:	2201      	movs	r2, #1
 8007494:	409a      	lsls	r2, r3
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	2b40      	cmp	r3, #64	; 0x40
 80074a8:	d108      	bne.n	80074bc <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	60da      	str	r2, [r3, #12]
}
 80074ba:	e007      	b.n	80074cc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	60da      	str	r2, [r3, #12]
}
 80074cc:	bf00      	nop
 80074ce:	371c      	adds	r7, #28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	58025408 	.word	0x58025408
 80074dc:	5802541c 	.word	0x5802541c
 80074e0:	58025430 	.word	0x58025430
 80074e4:	58025444 	.word	0x58025444
 80074e8:	58025458 	.word	0x58025458
 80074ec:	5802546c 	.word	0x5802546c
 80074f0:	58025480 	.word	0x58025480
 80074f4:	58025494 	.word	0x58025494

080074f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a42      	ldr	r2, [pc, #264]	; (8007610 <DMA_CalcBaseAndBitshift+0x118>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d04a      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xa8>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a41      	ldr	r2, [pc, #260]	; (8007614 <DMA_CalcBaseAndBitshift+0x11c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d045      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a3f      	ldr	r2, [pc, #252]	; (8007618 <DMA_CalcBaseAndBitshift+0x120>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d040      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xa8>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a3e      	ldr	r2, [pc, #248]	; (800761c <DMA_CalcBaseAndBitshift+0x124>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d03b      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a3c      	ldr	r2, [pc, #240]	; (8007620 <DMA_CalcBaseAndBitshift+0x128>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d036      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a3b      	ldr	r2, [pc, #236]	; (8007624 <DMA_CalcBaseAndBitshift+0x12c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d031      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xa8>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a39      	ldr	r2, [pc, #228]	; (8007628 <DMA_CalcBaseAndBitshift+0x130>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d02c      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a38      	ldr	r2, [pc, #224]	; (800762c <DMA_CalcBaseAndBitshift+0x134>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d027      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a36      	ldr	r2, [pc, #216]	; (8007630 <DMA_CalcBaseAndBitshift+0x138>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d022      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xa8>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a35      	ldr	r2, [pc, #212]	; (8007634 <DMA_CalcBaseAndBitshift+0x13c>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d01d      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a33      	ldr	r2, [pc, #204]	; (8007638 <DMA_CalcBaseAndBitshift+0x140>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d018      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xa8>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a32      	ldr	r2, [pc, #200]	; (800763c <DMA_CalcBaseAndBitshift+0x144>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d013      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a30      	ldr	r2, [pc, #192]	; (8007640 <DMA_CalcBaseAndBitshift+0x148>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d00e      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a2f      	ldr	r2, [pc, #188]	; (8007644 <DMA_CalcBaseAndBitshift+0x14c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d009      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xa8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a2d      	ldr	r2, [pc, #180]	; (8007648 <DMA_CalcBaseAndBitshift+0x150>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d004      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a2c      	ldr	r2, [pc, #176]	; (800764c <DMA_CalcBaseAndBitshift+0x154>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d101      	bne.n	80075a4 <DMA_CalcBaseAndBitshift+0xac>
 80075a0:	2301      	movs	r3, #1
 80075a2:	e000      	b.n	80075a6 <DMA_CalcBaseAndBitshift+0xae>
 80075a4:	2300      	movs	r3, #0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d024      	beq.n	80075f4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	3b10      	subs	r3, #16
 80075b2:	4a27      	ldr	r2, [pc, #156]	; (8007650 <DMA_CalcBaseAndBitshift+0x158>)
 80075b4:	fba2 2303 	umull	r2, r3, r2, r3
 80075b8:	091b      	lsrs	r3, r3, #4
 80075ba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	4a24      	ldr	r2, [pc, #144]	; (8007654 <DMA_CalcBaseAndBitshift+0x15c>)
 80075c4:	5cd3      	ldrb	r3, [r2, r3]
 80075c6:	461a      	mov	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d908      	bls.n	80075e4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	4b1f      	ldr	r3, [pc, #124]	; (8007658 <DMA_CalcBaseAndBitshift+0x160>)
 80075da:	4013      	ands	r3, r2
 80075dc:	1d1a      	adds	r2, r3, #4
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	659a      	str	r2, [r3, #88]	; 0x58
 80075e2:	e00d      	b.n	8007600 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	4b1b      	ldr	r3, [pc, #108]	; (8007658 <DMA_CalcBaseAndBitshift+0x160>)
 80075ec:	4013      	ands	r3, r2
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	6593      	str	r3, [r2, #88]	; 0x58
 80075f2:	e005      	b.n	8007600 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007604:	4618      	mov	r0, r3
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	40020010 	.word	0x40020010
 8007614:	40020028 	.word	0x40020028
 8007618:	40020040 	.word	0x40020040
 800761c:	40020058 	.word	0x40020058
 8007620:	40020070 	.word	0x40020070
 8007624:	40020088 	.word	0x40020088
 8007628:	400200a0 	.word	0x400200a0
 800762c:	400200b8 	.word	0x400200b8
 8007630:	40020410 	.word	0x40020410
 8007634:	40020428 	.word	0x40020428
 8007638:	40020440 	.word	0x40020440
 800763c:	40020458 	.word	0x40020458
 8007640:	40020470 	.word	0x40020470
 8007644:	40020488 	.word	0x40020488
 8007648:	400204a0 	.word	0x400204a0
 800764c:	400204b8 	.word	0x400204b8
 8007650:	aaaaaaab 	.word	0xaaaaaaab
 8007654:	0801378c 	.word	0x0801378c
 8007658:	fffffc00 	.word	0xfffffc00

0800765c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d120      	bne.n	80076b2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	2b03      	cmp	r3, #3
 8007676:	d858      	bhi.n	800772a <DMA_CheckFifoParam+0xce>
 8007678:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <DMA_CheckFifoParam+0x24>)
 800767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767e:	bf00      	nop
 8007680:	08007691 	.word	0x08007691
 8007684:	080076a3 	.word	0x080076a3
 8007688:	08007691 	.word	0x08007691
 800768c:	0800772b 	.word	0x0800772b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d048      	beq.n	800772e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076a0:	e045      	b.n	800772e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076aa:	d142      	bne.n	8007732 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076b0:	e03f      	b.n	8007732 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ba:	d123      	bne.n	8007704 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d838      	bhi.n	8007736 <DMA_CheckFifoParam+0xda>
 80076c4:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <DMA_CheckFifoParam+0x70>)
 80076c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ca:	bf00      	nop
 80076cc:	080076dd 	.word	0x080076dd
 80076d0:	080076e3 	.word	0x080076e3
 80076d4:	080076dd 	.word	0x080076dd
 80076d8:	080076f5 	.word	0x080076f5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	73fb      	strb	r3, [r7, #15]
        break;
 80076e0:	e030      	b.n	8007744 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d025      	beq.n	800773a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076f2:	e022      	b.n	800773a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076fc:	d11f      	bne.n	800773e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007702:	e01c      	b.n	800773e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007708:	2b02      	cmp	r3, #2
 800770a:	d902      	bls.n	8007712 <DMA_CheckFifoParam+0xb6>
 800770c:	2b03      	cmp	r3, #3
 800770e:	d003      	beq.n	8007718 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007710:	e018      	b.n	8007744 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	73fb      	strb	r3, [r7, #15]
        break;
 8007716:	e015      	b.n	8007744 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00e      	beq.n	8007742 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	73fb      	strb	r3, [r7, #15]
    break;
 8007728:	e00b      	b.n	8007742 <DMA_CheckFifoParam+0xe6>
        break;
 800772a:	bf00      	nop
 800772c:	e00a      	b.n	8007744 <DMA_CheckFifoParam+0xe8>
        break;
 800772e:	bf00      	nop
 8007730:	e008      	b.n	8007744 <DMA_CheckFifoParam+0xe8>
        break;
 8007732:	bf00      	nop
 8007734:	e006      	b.n	8007744 <DMA_CheckFifoParam+0xe8>
        break;
 8007736:	bf00      	nop
 8007738:	e004      	b.n	8007744 <DMA_CheckFifoParam+0xe8>
        break;
 800773a:	bf00      	nop
 800773c:	e002      	b.n	8007744 <DMA_CheckFifoParam+0xe8>
        break;
 800773e:	bf00      	nop
 8007740:	e000      	b.n	8007744 <DMA_CheckFifoParam+0xe8>
    break;
 8007742:	bf00      	nop
    }
  }

  return status;
 8007744:	7bfb      	ldrb	r3, [r7, #15]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop

08007754 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a38      	ldr	r2, [pc, #224]	; (8007848 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d022      	beq.n	80077b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a36      	ldr	r2, [pc, #216]	; (800784c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d01d      	beq.n	80077b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a35      	ldr	r2, [pc, #212]	; (8007850 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d018      	beq.n	80077b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a33      	ldr	r2, [pc, #204]	; (8007854 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d013      	beq.n	80077b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a32      	ldr	r2, [pc, #200]	; (8007858 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d00e      	beq.n	80077b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a30      	ldr	r2, [pc, #192]	; (800785c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d009      	beq.n	80077b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a2f      	ldr	r2, [pc, #188]	; (8007860 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d004      	beq.n	80077b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a2d      	ldr	r2, [pc, #180]	; (8007864 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d101      	bne.n	80077b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80077b6:	2300      	movs	r3, #0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d01a      	beq.n	80077f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	3b08      	subs	r3, #8
 80077c4:	4a28      	ldr	r2, [pc, #160]	; (8007868 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80077c6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ca:	091b      	lsrs	r3, r3, #4
 80077cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	4b26      	ldr	r3, [pc, #152]	; (800786c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80077d2:	4413      	add	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	461a      	mov	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a24      	ldr	r2, [pc, #144]	; (8007870 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80077e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f003 031f 	and.w	r3, r3, #31
 80077e8:	2201      	movs	r2, #1
 80077ea:	409a      	lsls	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80077f0:	e024      	b.n	800783c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	3b10      	subs	r3, #16
 80077fa:	4a1e      	ldr	r2, [pc, #120]	; (8007874 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80077fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007800:	091b      	lsrs	r3, r3, #4
 8007802:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	4a1c      	ldr	r2, [pc, #112]	; (8007878 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d806      	bhi.n	800781a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	4a1b      	ldr	r2, [pc, #108]	; (800787c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d902      	bls.n	800781a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3308      	adds	r3, #8
 8007818:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4b18      	ldr	r3, [pc, #96]	; (8007880 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800781e:	4413      	add	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	461a      	mov	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a16      	ldr	r2, [pc, #88]	; (8007884 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800782c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f003 031f 	and.w	r3, r3, #31
 8007834:	2201      	movs	r2, #1
 8007836:	409a      	lsls	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800783c:	bf00      	nop
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	58025408 	.word	0x58025408
 800784c:	5802541c 	.word	0x5802541c
 8007850:	58025430 	.word	0x58025430
 8007854:	58025444 	.word	0x58025444
 8007858:	58025458 	.word	0x58025458
 800785c:	5802546c 	.word	0x5802546c
 8007860:	58025480 	.word	0x58025480
 8007864:	58025494 	.word	0x58025494
 8007868:	cccccccd 	.word	0xcccccccd
 800786c:	16009600 	.word	0x16009600
 8007870:	58025880 	.word	0x58025880
 8007874:	aaaaaaab 	.word	0xaaaaaaab
 8007878:	400204b8 	.word	0x400204b8
 800787c:	4002040f 	.word	0x4002040f
 8007880:	10008200 	.word	0x10008200
 8007884:	40020880 	.word	0x40020880

08007888 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	b2db      	uxtb	r3, r3
 8007896:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d04a      	beq.n	8007934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d847      	bhi.n	8007934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a25      	ldr	r2, [pc, #148]	; (8007940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d022      	beq.n	80078f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a24      	ldr	r2, [pc, #144]	; (8007944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d01d      	beq.n	80078f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a22      	ldr	r2, [pc, #136]	; (8007948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d018      	beq.n	80078f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a21      	ldr	r2, [pc, #132]	; (800794c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d013      	beq.n	80078f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a1f      	ldr	r2, [pc, #124]	; (8007950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d00e      	beq.n	80078f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a1e      	ldr	r2, [pc, #120]	; (8007954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d009      	beq.n	80078f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a1c      	ldr	r2, [pc, #112]	; (8007958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d004      	beq.n	80078f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a1b      	ldr	r2, [pc, #108]	; (800795c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d101      	bne.n	80078f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80078f4:	2301      	movs	r3, #1
 80078f6:	e000      	b.n	80078fa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80078f8:	2300      	movs	r3, #0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	4b17      	ldr	r3, [pc, #92]	; (8007960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007902:	4413      	add	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	461a      	mov	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a15      	ldr	r2, [pc, #84]	; (8007964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007910:	671a      	str	r2, [r3, #112]	; 0x70
 8007912:	e009      	b.n	8007928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4b14      	ldr	r3, [pc, #80]	; (8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	461a      	mov	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a11      	ldr	r2, [pc, #68]	; (800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007926:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	3b01      	subs	r3, #1
 800792c:	2201      	movs	r2, #1
 800792e:	409a      	lsls	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007934:	bf00      	nop
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	58025408 	.word	0x58025408
 8007944:	5802541c 	.word	0x5802541c
 8007948:	58025430 	.word	0x58025430
 800794c:	58025444 	.word	0x58025444
 8007950:	58025458 	.word	0x58025458
 8007954:	5802546c 	.word	0x5802546c
 8007958:	58025480 	.word	0x58025480
 800795c:	58025494 	.word	0x58025494
 8007960:	1600963f 	.word	0x1600963f
 8007964:	58025940 	.word	0x58025940
 8007968:	1000823f 	.word	0x1000823f
 800796c:	40020940 	.word	0x40020940

08007970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007970:	b480      	push	{r7}
 8007972:	b089      	sub	sp, #36	; 0x24
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800797a:	2300      	movs	r3, #0
 800797c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800797e:	4b89      	ldr	r3, [pc, #548]	; (8007ba4 <HAL_GPIO_Init+0x234>)
 8007980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007982:	e194      	b.n	8007cae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	2101      	movs	r1, #1
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	fa01 f303 	lsl.w	r3, r1, r3
 8007990:	4013      	ands	r3, r2
 8007992:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 8186 	beq.w	8007ca8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d00b      	beq.n	80079bc <HAL_GPIO_Init+0x4c>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d007      	beq.n	80079bc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80079b0:	2b11      	cmp	r3, #17
 80079b2:	d003      	beq.n	80079bc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	2b12      	cmp	r3, #18
 80079ba:	d130      	bne.n	8007a1e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	2203      	movs	r2, #3
 80079c8:	fa02 f303 	lsl.w	r3, r2, r3
 80079cc:	43db      	mvns	r3, r3
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	4013      	ands	r3, r2
 80079d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	fa02 f303 	lsl.w	r3, r2, r3
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079f2:	2201      	movs	r2, #1
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	fa02 f303 	lsl.w	r3, r2, r3
 80079fa:	43db      	mvns	r3, r3
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	4013      	ands	r3, r2
 8007a00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	091b      	lsrs	r3, r3, #4
 8007a08:	f003 0201 	and.w	r2, r3, #1
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	2203      	movs	r2, #3
 8007a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2e:	43db      	mvns	r3, r3
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	4013      	ands	r3, r2
 8007a34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	005b      	lsls	r3, r3, #1
 8007a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a42:	69ba      	ldr	r2, [r7, #24]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d003      	beq.n	8007a5e <HAL_GPIO_Init+0xee>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	2b12      	cmp	r3, #18
 8007a5c:	d123      	bne.n	8007aa6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	08da      	lsrs	r2, r3, #3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3208      	adds	r2, #8
 8007a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	220f      	movs	r2, #15
 8007a76:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	691a      	ldr	r2, [r3, #16]
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	f003 0307 	and.w	r3, r3, #7
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	08da      	lsrs	r2, r3, #3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3208      	adds	r2, #8
 8007aa0:	69b9      	ldr	r1, [r7, #24]
 8007aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	2203      	movs	r2, #3
 8007ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab6:	43db      	mvns	r3, r3
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	4013      	ands	r3, r2
 8007abc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f003 0203 	and.w	r2, r3, #3
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	005b      	lsls	r3, r3, #1
 8007aca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ace:	69ba      	ldr	r2, [r7, #24]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 80e0 	beq.w	8007ca8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ae8:	4b2f      	ldr	r3, [pc, #188]	; (8007ba8 <HAL_GPIO_Init+0x238>)
 8007aea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007aee:	4a2e      	ldr	r2, [pc, #184]	; (8007ba8 <HAL_GPIO_Init+0x238>)
 8007af0:	f043 0302 	orr.w	r3, r3, #2
 8007af4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007af8:	4b2b      	ldr	r3, [pc, #172]	; (8007ba8 <HAL_GPIO_Init+0x238>)
 8007afa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b06:	4a29      	ldr	r2, [pc, #164]	; (8007bac <HAL_GPIO_Init+0x23c>)
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	089b      	lsrs	r3, r3, #2
 8007b0c:	3302      	adds	r3, #2
 8007b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	f003 0303 	and.w	r3, r3, #3
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	220f      	movs	r2, #15
 8007b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b22:	43db      	mvns	r3, r3
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	4013      	ands	r3, r2
 8007b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a20      	ldr	r2, [pc, #128]	; (8007bb0 <HAL_GPIO_Init+0x240>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d052      	beq.n	8007bd8 <HAL_GPIO_Init+0x268>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a1f      	ldr	r2, [pc, #124]	; (8007bb4 <HAL_GPIO_Init+0x244>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d031      	beq.n	8007b9e <HAL_GPIO_Init+0x22e>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a1e      	ldr	r2, [pc, #120]	; (8007bb8 <HAL_GPIO_Init+0x248>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d02b      	beq.n	8007b9a <HAL_GPIO_Init+0x22a>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a1d      	ldr	r2, [pc, #116]	; (8007bbc <HAL_GPIO_Init+0x24c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d025      	beq.n	8007b96 <HAL_GPIO_Init+0x226>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a1c      	ldr	r2, [pc, #112]	; (8007bc0 <HAL_GPIO_Init+0x250>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d01f      	beq.n	8007b92 <HAL_GPIO_Init+0x222>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a1b      	ldr	r2, [pc, #108]	; (8007bc4 <HAL_GPIO_Init+0x254>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d019      	beq.n	8007b8e <HAL_GPIO_Init+0x21e>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a1a      	ldr	r2, [pc, #104]	; (8007bc8 <HAL_GPIO_Init+0x258>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d013      	beq.n	8007b8a <HAL_GPIO_Init+0x21a>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a19      	ldr	r2, [pc, #100]	; (8007bcc <HAL_GPIO_Init+0x25c>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00d      	beq.n	8007b86 <HAL_GPIO_Init+0x216>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a18      	ldr	r2, [pc, #96]	; (8007bd0 <HAL_GPIO_Init+0x260>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d007      	beq.n	8007b82 <HAL_GPIO_Init+0x212>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a17      	ldr	r2, [pc, #92]	; (8007bd4 <HAL_GPIO_Init+0x264>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d101      	bne.n	8007b7e <HAL_GPIO_Init+0x20e>
 8007b7a:	2309      	movs	r3, #9
 8007b7c:	e02d      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b7e:	230a      	movs	r3, #10
 8007b80:	e02b      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b82:	2308      	movs	r3, #8
 8007b84:	e029      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b86:	2307      	movs	r3, #7
 8007b88:	e027      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b8a:	2306      	movs	r3, #6
 8007b8c:	e025      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b8e:	2305      	movs	r3, #5
 8007b90:	e023      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b92:	2304      	movs	r3, #4
 8007b94:	e021      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b96:	2303      	movs	r3, #3
 8007b98:	e01f      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e01d      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e01b      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007ba2:	bf00      	nop
 8007ba4:	58000080 	.word	0x58000080
 8007ba8:	58024400 	.word	0x58024400
 8007bac:	58000400 	.word	0x58000400
 8007bb0:	58020000 	.word	0x58020000
 8007bb4:	58020400 	.word	0x58020400
 8007bb8:	58020800 	.word	0x58020800
 8007bbc:	58020c00 	.word	0x58020c00
 8007bc0:	58021000 	.word	0x58021000
 8007bc4:	58021400 	.word	0x58021400
 8007bc8:	58021800 	.word	0x58021800
 8007bcc:	58021c00 	.word	0x58021c00
 8007bd0:	58022000 	.word	0x58022000
 8007bd4:	58022400 	.word	0x58022400
 8007bd8:	2300      	movs	r3, #0
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	f002 0203 	and.w	r2, r2, #3
 8007be0:	0092      	lsls	r2, r2, #2
 8007be2:	4093      	lsls	r3, r2
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bea:	4938      	ldr	r1, [pc, #224]	; (8007ccc <HAL_GPIO_Init+0x35c>)
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	089b      	lsrs	r3, r3, #2
 8007bf0:	3302      	adds	r3, #2
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	43db      	mvns	r3, r3
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	4013      	ands	r3, r2
 8007c06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d003      	beq.n	8007c1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	43db      	mvns	r3, r3
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	69ba      	ldr	r2, [r7, #24]
 8007c4a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	43db      	mvns	r3, r3
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	43db      	mvns	r3, r3
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	3301      	adds	r3, #1
 8007cac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f47f ae63 	bne.w	8007984 <HAL_GPIO_Init+0x14>
  }
}
 8007cbe:	bf00      	nop
 8007cc0:	bf00      	nop
 8007cc2:	3724      	adds	r7, #36	; 0x24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	58000400 	.word	0x58000400

08007cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	807b      	strh	r3, [r7, #2]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ce0:	787b      	ldrb	r3, [r7, #1]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ce6:	887a      	ldrh	r2, [r7, #2]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007cec:	e003      	b.n	8007cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007cee:	887b      	ldrh	r3, [r7, #2]
 8007cf0:	041a      	lsls	r2, r3, #16
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	619a      	str	r2, [r3, #24]
}
 8007cf6:	bf00      	nop
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d14:	887a      	ldrh	r2, [r7, #2]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	041a      	lsls	r2, r3, #16
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	43d9      	mvns	r1, r3
 8007d20:	887b      	ldrh	r3, [r7, #2]
 8007d22:	400b      	ands	r3, r1
 8007d24:	431a      	orrs	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	619a      	str	r2, [r3, #24]
}
 8007d2a:	bf00      	nop
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
	...

08007d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e07f      	b.n	8007e4a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7fb fcbe 	bl	80036e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2224      	movs	r2, #36	; 0x24
 8007d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 0201 	bic.w	r2, r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007d88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d107      	bne.n	8007db2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689a      	ldr	r2, [r3, #8]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dae:	609a      	str	r2, [r3, #8]
 8007db0:	e006      	b.n	8007dc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689a      	ldr	r2, [r3, #8]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007dbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d104      	bne.n	8007dd2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6859      	ldr	r1, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	4b1d      	ldr	r3, [pc, #116]	; (8007e54 <HAL_I2C_Init+0x11c>)
 8007dde:	430b      	orrs	r3, r1
 8007de0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007df0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691a      	ldr	r2, [r3, #16]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	ea42 0103 	orr.w	r1, r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	021a      	lsls	r2, r3, #8
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	69d9      	ldr	r1, [r3, #28]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a1a      	ldr	r2, [r3, #32]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f042 0201 	orr.w	r2, r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2220      	movs	r2, #32
 8007e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	02008000 	.word	0x02008000

08007e58 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b088      	sub	sp, #32
 8007e5c:	af02      	add	r7, sp, #8
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	4608      	mov	r0, r1
 8007e62:	4611      	mov	r1, r2
 8007e64:	461a      	mov	r2, r3
 8007e66:	4603      	mov	r3, r0
 8007e68:	817b      	strh	r3, [r7, #10]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	813b      	strh	r3, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b20      	cmp	r3, #32
 8007e7c:	f040 80f9 	bne.w	8008072 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <HAL_I2C_Mem_Write+0x34>
 8007e86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d105      	bne.n	8007e98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e0ed      	b.n	8008074 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d101      	bne.n	8007ea6 <HAL_I2C_Mem_Write+0x4e>
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	e0e6      	b.n	8008074 <HAL_I2C_Mem_Write+0x21c>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007eae:	f7fc fdbf 	bl	8004a30 <HAL_GetTick>
 8007eb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	2319      	movs	r3, #25
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f001 fee3 	bl	8009c8c <I2C_WaitOnFlagUntilTimeout>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e0d1      	b.n	8008074 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2221      	movs	r2, #33	; 0x21
 8007ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2240      	movs	r2, #64	; 0x40
 8007edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a3a      	ldr	r2, [r7, #32]
 8007eea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ef8:	88f8      	ldrh	r0, [r7, #6]
 8007efa:	893a      	ldrh	r2, [r7, #8]
 8007efc:	8979      	ldrh	r1, [r7, #10]
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	4603      	mov	r3, r0
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 ff23 	bl	8008d54 <I2C_RequestMemoryWrite>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d005      	beq.n	8007f20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e0a9      	b.n	8008074 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	2bff      	cmp	r3, #255	; 0xff
 8007f28:	d90e      	bls.n	8007f48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	22ff      	movs	r2, #255	; 0xff
 8007f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	8979      	ldrh	r1, [r7, #10]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f001 ffc5 	bl	8009ed0 <I2C_TransferConfig>
 8007f46:	e00f      	b.n	8007f68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	8979      	ldrh	r1, [r7, #10]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f001 ffb4 	bl	8009ed0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f001 fecd 	bl	8009d0c <I2C_WaitOnTXISFlagUntilTimeout>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e07b      	b.n	8008074 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f80:	781a      	ldrb	r2, [r3, #0]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8c:	1c5a      	adds	r2, r3, #1
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d034      	beq.n	8008020 <HAL_I2C_Mem_Write+0x1c8>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d130      	bne.n	8008020 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2180      	movs	r1, #128	; 0x80
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f001 fe5f 	bl	8009c8c <I2C_WaitOnFlagUntilTimeout>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e04d      	b.n	8008074 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	2bff      	cmp	r3, #255	; 0xff
 8007fe0:	d90e      	bls.n	8008000 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	22ff      	movs	r2, #255	; 0xff
 8007fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	8979      	ldrh	r1, [r7, #10]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f001 ff69 	bl	8009ed0 <I2C_TransferConfig>
 8007ffe:	e00f      	b.n	8008020 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800800e:	b2da      	uxtb	r2, r3
 8008010:	8979      	ldrh	r1, [r7, #10]
 8008012:	2300      	movs	r3, #0
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f001 ff58 	bl	8009ed0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008024:	b29b      	uxth	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d19e      	bne.n	8007f68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f001 feac 	bl	8009d8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e01a      	b.n	8008074 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2220      	movs	r2, #32
 8008044:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6859      	ldr	r1, [r3, #4]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	4b0a      	ldr	r3, [pc, #40]	; (800807c <HAL_I2C_Mem_Write+0x224>)
 8008052:	400b      	ands	r3, r1
 8008054:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2220      	movs	r2, #32
 800805a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	e000      	b.n	8008074 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008072:	2302      	movs	r3, #2
  }
}
 8008074:	4618      	mov	r0, r3
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	fe00e800 	.word	0xfe00e800

08008080 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af02      	add	r7, sp, #8
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	4608      	mov	r0, r1
 800808a:	4611      	mov	r1, r2
 800808c:	461a      	mov	r2, r3
 800808e:	4603      	mov	r3, r0
 8008090:	817b      	strh	r3, [r7, #10]
 8008092:	460b      	mov	r3, r1
 8008094:	813b      	strh	r3, [r7, #8]
 8008096:	4613      	mov	r3, r2
 8008098:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b20      	cmp	r3, #32
 80080a4:	f040 80fd 	bne.w	80082a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <HAL_I2C_Mem_Read+0x34>
 80080ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d105      	bne.n	80080c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e0f1      	b.n	80082a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d101      	bne.n	80080ce <HAL_I2C_Mem_Read+0x4e>
 80080ca:	2302      	movs	r3, #2
 80080cc:	e0ea      	b.n	80082a4 <HAL_I2C_Mem_Read+0x224>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80080d6:	f7fc fcab 	bl	8004a30 <HAL_GetTick>
 80080da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	2319      	movs	r3, #25
 80080e2:	2201      	movs	r2, #1
 80080e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f001 fdcf 	bl	8009c8c <I2C_WaitOnFlagUntilTimeout>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e0d5      	b.n	80082a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2222      	movs	r2, #34	; 0x22
 80080fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2240      	movs	r2, #64	; 0x40
 8008104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6a3a      	ldr	r2, [r7, #32]
 8008112:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008118:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008120:	88f8      	ldrh	r0, [r7, #6]
 8008122:	893a      	ldrh	r2, [r7, #8]
 8008124:	8979      	ldrh	r1, [r7, #10]
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	4603      	mov	r3, r0
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 fe63 	bl	8008dfc <I2C_RequestMemoryRead>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d005      	beq.n	8008148 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e0ad      	b.n	80082a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800814c:	b29b      	uxth	r3, r3
 800814e:	2bff      	cmp	r3, #255	; 0xff
 8008150:	d90e      	bls.n	8008170 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	22ff      	movs	r2, #255	; 0xff
 8008156:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800815c:	b2da      	uxtb	r2, r3
 800815e:	8979      	ldrh	r1, [r7, #10]
 8008160:	4b52      	ldr	r3, [pc, #328]	; (80082ac <HAL_I2C_Mem_Read+0x22c>)
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f001 feb1 	bl	8009ed0 <I2C_TransferConfig>
 800816e:	e00f      	b.n	8008190 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008174:	b29a      	uxth	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800817e:	b2da      	uxtb	r2, r3
 8008180:	8979      	ldrh	r1, [r7, #10]
 8008182:	4b4a      	ldr	r3, [pc, #296]	; (80082ac <HAL_I2C_Mem_Read+0x22c>)
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f001 fea0 	bl	8009ed0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008196:	2200      	movs	r2, #0
 8008198:	2104      	movs	r1, #4
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f001 fd76 	bl	8009c8c <I2C_WaitOnFlagUntilTimeout>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e07c      	b.n	80082a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	b2d2      	uxtb	r2, r2
 80081b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c6:	3b01      	subs	r3, #1
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	3b01      	subs	r3, #1
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d034      	beq.n	8008250 <HAL_I2C_Mem_Read+0x1d0>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d130      	bne.n	8008250 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f4:	2200      	movs	r2, #0
 80081f6:	2180      	movs	r1, #128	; 0x80
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f001 fd47 	bl	8009c8c <I2C_WaitOnFlagUntilTimeout>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e04d      	b.n	80082a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800820c:	b29b      	uxth	r3, r3
 800820e:	2bff      	cmp	r3, #255	; 0xff
 8008210:	d90e      	bls.n	8008230 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	22ff      	movs	r2, #255	; 0xff
 8008216:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800821c:	b2da      	uxtb	r2, r3
 800821e:	8979      	ldrh	r1, [r7, #10]
 8008220:	2300      	movs	r3, #0
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f001 fe51 	bl	8009ed0 <I2C_TransferConfig>
 800822e:	e00f      	b.n	8008250 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008234:	b29a      	uxth	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800823e:	b2da      	uxtb	r2, r3
 8008240:	8979      	ldrh	r1, [r7, #10]
 8008242:	2300      	movs	r3, #0
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f001 fe40 	bl	8009ed0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008254:	b29b      	uxth	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d19a      	bne.n	8008190 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f001 fd94 	bl	8009d8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e01a      	b.n	80082a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2220      	movs	r2, #32
 8008274:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6859      	ldr	r1, [r3, #4]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	4b0b      	ldr	r3, [pc, #44]	; (80082b0 <HAL_I2C_Mem_Read+0x230>)
 8008282:	400b      	ands	r3, r1
 8008284:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2220      	movs	r2, #32
 800828a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	e000      	b.n	80082a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80082a2:	2302      	movs	r3, #2
  }
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	80002400 	.word	0x80002400
 80082b0:	fe00e800 	.word	0xfe00e800

080082b4 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08a      	sub	sp, #40	; 0x28
 80082b8:	af02      	add	r7, sp, #8
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	4608      	mov	r0, r1
 80082be:	4611      	mov	r1, r2
 80082c0:	461a      	mov	r2, r3
 80082c2:	4603      	mov	r3, r0
 80082c4:	817b      	strh	r3, [r7, #10]
 80082c6:	460b      	mov	r3, r1
 80082c8:	813b      	strh	r3, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b20      	cmp	r3, #32
 80082d8:	f040 80d5 	bne.w	8008486 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 80082dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d002      	beq.n	80082e8 <HAL_I2C_Mem_Read_DMA+0x34>
 80082e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d105      	bne.n	80082f4 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e0c9      	b.n	8008488 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008302:	d101      	bne.n	8008308 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8008304:	2302      	movs	r3, #2
 8008306:	e0bf      	b.n	8008488 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800830e:	2b01      	cmp	r3, #1
 8008310:	d101      	bne.n	8008316 <HAL_I2C_Mem_Read_DMA+0x62>
 8008312:	2302      	movs	r3, #2
 8008314:	e0b8      	b.n	8008488 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800831e:	f7fc fb87 	bl	8004a30 <HAL_GetTick>
 8008322:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2222      	movs	r2, #34	; 0x22
 8008328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2240      	movs	r2, #64	; 0x40
 8008330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800833e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008344:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	4a51      	ldr	r2, [pc, #324]	; (8008490 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 800834a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4a51      	ldr	r2, [pc, #324]	; (8008494 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8008350:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008356:	b29b      	uxth	r3, r3
 8008358:	2bff      	cmp	r3, #255	; 0xff
 800835a:	d906      	bls.n	800836a <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	22ff      	movs	r2, #255	; 0xff
 8008360:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008362:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008366:	61fb      	str	r3, [r7, #28]
 8008368:	e007      	b.n	800837a <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800836e:	b29a      	uxth	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008374:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008378:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800837a:	88f8      	ldrh	r0, [r7, #6]
 800837c:	893a      	ldrh	r2, [r7, #8]
 800837e:	8979      	ldrh	r1, [r7, #10]
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	9301      	str	r3, [sp, #4]
 8008384:	2319      	movs	r3, #25
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	4603      	mov	r3, r0
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 fd36 	bl	8008dfc <I2C_RequestMemoryRead>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d005      	beq.n	80083a2 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e072      	b.n	8008488 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d020      	beq.n	80083ec <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ae:	4a3a      	ldr	r2, [pc, #232]	; (8008498 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 80083b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b6:	4a39      	ldr	r2, [pc, #228]	; (800849c <HAL_I2C_Mem_Read_DMA+0x1e8>)
 80083b8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083be:	2200      	movs	r2, #0
 80083c0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c6:	2200      	movs	r2, #0
 80083c8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3324      	adds	r3, #36	; 0x24
 80083d4:	4619      	mov	r1, r3
 80083d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083dc:	f7fc ffd0 	bl	8005380 <HAL_DMA_Start_IT>
 80083e0:	4603      	mov	r3, r0
 80083e2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d139      	bne.n	800845e <HAL_I2C_Mem_Read_DMA+0x1aa>
 80083ea:	e013      	b.n	8008414 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2220      	movs	r2, #32
 80083f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008400:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e039      	b.n	8008488 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008418:	b2da      	uxtb	r2, r3
 800841a:	8979      	ldrh	r1, [r7, #10]
 800841c:	4b20      	ldr	r3, [pc, #128]	; (80084a0 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f001 fd54 	bl	8009ed0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800842c:	b29a      	uxth	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	b29a      	uxth	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008442:	2110      	movs	r1, #16
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f001 fd71 	bl	8009f2c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008458:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	e014      	b.n	8008488 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2220      	movs	r2, #32
 8008462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008472:	f043 0210 	orr.w	r2, r3, #16
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e000      	b.n	8008488 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8008486:	2302      	movs	r3, #2
  }
}
 8008488:	4618      	mov	r0, r3
 800848a:	3720      	adds	r7, #32
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	ffff0000 	.word	0xffff0000
 8008494:	080087af 	.word	0x080087af
 8008498:	0800994b 	.word	0x0800994b
 800849c:	080099e1 	.word	0x080099e1
 80084a0:	80002400 	.word	0x80002400

080084a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d005      	beq.n	80084d0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	68f9      	ldr	r1, [r7, #12]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	4798      	blx	r3
  }
}
 80084d0:	bf00      	nop
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008508:	bf00      	nop
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
 8008534:	4613      	mov	r3, r2
 8008536:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d101      	bne.n	80085cc <I2C_Slave_ISR_IT+0x24>
 80085c8:	2302      	movs	r3, #2
 80085ca:	e0ec      	b.n	80087a6 <I2C_Slave_ISR_IT+0x1fe>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	095b      	lsrs	r3, r3, #5
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d009      	beq.n	80085f4 <I2C_Slave_ISR_IT+0x4c>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	095b      	lsrs	r3, r3, #5
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80085ec:	6939      	ldr	r1, [r7, #16]
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 fe42 	bl	8009278 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	091b      	lsrs	r3, r3, #4
 80085f8:	f003 0301 	and.w	r3, r3, #1
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d04d      	beq.n	800869c <I2C_Slave_ISR_IT+0xf4>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	091b      	lsrs	r3, r3, #4
 8008604:	f003 0301 	and.w	r3, r3, #1
 8008608:	2b00      	cmp	r3, #0
 800860a:	d047      	beq.n	800869c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008610:	b29b      	uxth	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d128      	bne.n	8008668 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b28      	cmp	r3, #40	; 0x28
 8008620:	d108      	bne.n	8008634 <I2C_Slave_ISR_IT+0x8c>
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008628:	d104      	bne.n	8008634 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800862a:	6939      	ldr	r1, [r7, #16]
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f001 f81b 	bl	8009668 <I2C_ITListenCplt>
 8008632:	e032      	b.n	800869a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b29      	cmp	r3, #41	; 0x29
 800863e:	d10e      	bne.n	800865e <I2C_Slave_ISR_IT+0xb6>
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008646:	d00a      	beq.n	800865e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2210      	movs	r2, #16
 800864e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f001 f956 	bl	8009902 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 fce5 	bl	8009026 <I2C_ITSlaveSeqCplt>
 800865c:	e01d      	b.n	800869a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2210      	movs	r2, #16
 8008664:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008666:	e096      	b.n	8008796 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2210      	movs	r2, #16
 800866e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008674:	f043 0204 	orr.w	r2, r3, #4
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d004      	beq.n	800868c <I2C_Slave_ISR_IT+0xe4>
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008688:	f040 8085 	bne.w	8008796 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008690:	4619      	mov	r1, r3
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f001 f83e 	bl	8009714 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008698:	e07d      	b.n	8008796 <I2C_Slave_ISR_IT+0x1ee>
 800869a:	e07c      	b.n	8008796 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	089b      	lsrs	r3, r3, #2
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d030      	beq.n	800870a <I2C_Slave_ISR_IT+0x162>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	089b      	lsrs	r3, r3, #2
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d02a      	beq.n	800870a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d018      	beq.n	80086f0 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c8:	b2d2      	uxtb	r2, r2
 80086ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086da:	3b01      	subs	r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	3b01      	subs	r3, #1
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d14f      	bne.n	800879a <I2C_Slave_ISR_IT+0x1f2>
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008700:	d04b      	beq.n	800879a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 fc8f 	bl	8009026 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008708:	e047      	b.n	800879a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	08db      	lsrs	r3, r3, #3
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00a      	beq.n	800872c <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	08db      	lsrs	r3, r3, #3
 800871a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800871e:	2b00      	cmp	r3, #0
 8008720:	d004      	beq.n	800872c <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008722:	6939      	ldr	r1, [r7, #16]
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 fbbd 	bl	8008ea4 <I2C_ITAddrCplt>
 800872a:	e037      	b.n	800879c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	085b      	lsrs	r3, r3, #1
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	d031      	beq.n	800879c <I2C_Slave_ISR_IT+0x1f4>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	085b      	lsrs	r3, r3, #1
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	d02b      	beq.n	800879c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008748:	b29b      	uxth	r3, r3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d018      	beq.n	8008780 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008752:	781a      	ldrb	r2, [r3, #0]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875e:	1c5a      	adds	r2, r3, #1
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008768:	b29b      	uxth	r3, r3
 800876a:	3b01      	subs	r3, #1
 800876c:	b29a      	uxth	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008776:	3b01      	subs	r3, #1
 8008778:	b29a      	uxth	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	851a      	strh	r2, [r3, #40]	; 0x28
 800877e:	e00d      	b.n	800879c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008786:	d002      	beq.n	800878e <I2C_Slave_ISR_IT+0x1e6>
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d106      	bne.n	800879c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 fc49 	bl	8009026 <I2C_ITSlaveSeqCplt>
 8008794:	e002      	b.n	800879c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008796:	bf00      	nop
 8008798:	e000      	b.n	800879c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800879a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3718      	adds	r7, #24
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b088      	sub	sp, #32
 80087b2:	af02      	add	r7, sp, #8
 80087b4:	60f8      	str	r0, [r7, #12]
 80087b6:	60b9      	str	r1, [r7, #8]
 80087b8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d101      	bne.n	80087c8 <I2C_Master_ISR_DMA+0x1a>
 80087c4:	2302      	movs	r3, #2
 80087c6:	e0e1      	b.n	800898c <I2C_Master_ISR_DMA+0x1de>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	091b      	lsrs	r3, r3, #4
 80087d4:	f003 0301 	and.w	r3, r3, #1
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d017      	beq.n	800880c <I2C_Master_ISR_DMA+0x5e>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	091b      	lsrs	r3, r3, #4
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d011      	beq.n	800880c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2210      	movs	r2, #16
 80087ee:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f4:	f043 0204 	orr.w	r2, r3, #4
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80087fc:	2120      	movs	r1, #32
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f001 fb94 	bl	8009f2c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f001 f87c 	bl	8009902 <I2C_Flush_TXDR>
 800880a:	e0ba      	b.n	8008982 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	09db      	lsrs	r3, r3, #7
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	2b00      	cmp	r3, #0
 8008816:	d072      	beq.n	80088fe <I2C_Master_ISR_DMA+0x150>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	099b      	lsrs	r3, r3, #6
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d06c      	beq.n	80088fe <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008832:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008838:	b29b      	uxth	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d04e      	beq.n	80088dc <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	b29b      	uxth	r3, r3
 8008846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800884a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008850:	b29b      	uxth	r3, r3
 8008852:	2bff      	cmp	r3, #255	; 0xff
 8008854:	d906      	bls.n	8008864 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	22ff      	movs	r2, #255	; 0xff
 800885a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800885c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008860:	617b      	str	r3, [r7, #20]
 8008862:	e010      	b.n	8008886 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008868:	b29a      	uxth	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008872:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008876:	d003      	beq.n	8008880 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887c:	617b      	str	r3, [r7, #20]
 800887e:	e002      	b.n	8008886 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008884:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800888a:	b2da      	uxtb	r2, r3
 800888c:	8a79      	ldrh	r1, [r7, #18]
 800888e:	2300      	movs	r3, #0
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f001 fb1b 	bl	8009ed0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800889e:	b29a      	uxth	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b22      	cmp	r3, #34	; 0x22
 80088b6:	d108      	bne.n	80088ca <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088c6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80088c8:	e05b      	b.n	8008982 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80088da:	e052      	b.n	8008982 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088ea:	d003      	beq.n	80088f4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 fb5d 	bl	8008fac <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80088f2:	e046      	b.n	8008982 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80088f4:	2140      	movs	r1, #64	; 0x40
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 ff0c 	bl	8009714 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80088fc:	e041      	b.n	8008982 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	099b      	lsrs	r3, r3, #6
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d029      	beq.n	800895e <I2C_Master_ISR_DMA+0x1b0>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	099b      	lsrs	r3, r3, #6
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d023      	beq.n	800895e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800891a:	b29b      	uxth	r3, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	d119      	bne.n	8008954 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800892a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800892e:	d027      	beq.n	8008980 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008934:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008938:	d108      	bne.n	800894c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008948:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800894a:	e019      	b.n	8008980 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 fb2d 	bl	8008fac <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008952:	e015      	b.n	8008980 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008954:	2140      	movs	r1, #64	; 0x40
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 fedc 	bl	8009714 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800895c:	e010      	b.n	8008980 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	095b      	lsrs	r3, r3, #5
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00b      	beq.n	8008982 <I2C_Master_ISR_DMA+0x1d4>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	095b      	lsrs	r3, r3, #5
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d005      	beq.n	8008982 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008976:	68b9      	ldr	r1, [r7, #8]
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 fbb3 	bl	80090e4 <I2C_ITMasterCplt>
 800897e:	e000      	b.n	8008982 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8008980:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3718      	adds	r7, #24
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b088      	sub	sp, #32
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d101      	bne.n	80089b8 <I2C_Slave_ISR_DMA+0x24>
 80089b4:	2302      	movs	r3, #2
 80089b6:	e1c8      	b.n	8008d4a <I2C_Slave_ISR_DMA+0x3b6>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	095b      	lsrs	r3, r3, #5
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d009      	beq.n	80089e0 <I2C_Slave_ISR_DMA+0x4c>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	095b      	lsrs	r3, r3, #5
 80089d0:	f003 0301 	and.w	r3, r3, #1
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80089d8:	68b9      	ldr	r1, [r7, #8]
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f000 fc4c 	bl	8009278 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	091b      	lsrs	r3, r3, #4
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 8199 	beq.w	8008d20 <I2C_Slave_ISR_DMA+0x38c>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	091b      	lsrs	r3, r3, #4
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 8192 	beq.w	8008d20 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	0b9b      	lsrs	r3, r3, #14
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d106      	bne.n	8008a16 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	0bdb      	lsrs	r3, r3, #15
 8008a0c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f000 817e 	beq.w	8008d12 <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d07c      	beq.n	8008b18 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	0bdb      	lsrs	r3, r3, #15
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d076      	beq.n	8008b18 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a8d      	ldr	r2, [pc, #564]	; (8008c68 <I2C_Slave_ISR_DMA+0x2d4>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d059      	beq.n	8008aea <I2C_Slave_ISR_DMA+0x156>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a8b      	ldr	r2, [pc, #556]	; (8008c6c <I2C_Slave_ISR_DMA+0x2d8>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d053      	beq.n	8008aea <I2C_Slave_ISR_DMA+0x156>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a89      	ldr	r2, [pc, #548]	; (8008c70 <I2C_Slave_ISR_DMA+0x2dc>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d04d      	beq.n	8008aea <I2C_Slave_ISR_DMA+0x156>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a87      	ldr	r2, [pc, #540]	; (8008c74 <I2C_Slave_ISR_DMA+0x2e0>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d047      	beq.n	8008aea <I2C_Slave_ISR_DMA+0x156>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a85      	ldr	r2, [pc, #532]	; (8008c78 <I2C_Slave_ISR_DMA+0x2e4>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d041      	beq.n	8008aea <I2C_Slave_ISR_DMA+0x156>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a83      	ldr	r2, [pc, #524]	; (8008c7c <I2C_Slave_ISR_DMA+0x2e8>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d03b      	beq.n	8008aea <I2C_Slave_ISR_DMA+0x156>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a81      	ldr	r2, [pc, #516]	; (8008c80 <I2C_Slave_ISR_DMA+0x2ec>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d035      	beq.n	8008aea <I2C_Slave_ISR_DMA+0x156>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a7f      	ldr	r2, [pc, #508]	; (8008c84 <I2C_Slave_ISR_DMA+0x2f0>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d02f      	beq.n	8008aea <I2C_Slave_ISR_DMA+0x156>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a7d      	ldr	r2, [pc, #500]	; (8008c88 <I2C_Slave_ISR_DMA+0x2f4>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d029      	beq.n	8008aea <I2C_Slave_ISR_DMA+0x156>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a7b      	ldr	r2, [pc, #492]	; (8008c8c <I2C_Slave_ISR_DMA+0x2f8>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d023      	beq.n	8008aea <I2C_Slave_ISR_DMA+0x156>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a79      	ldr	r2, [pc, #484]	; (8008c90 <I2C_Slave_ISR_DMA+0x2fc>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d01d      	beq.n	8008aea <I2C_Slave_ISR_DMA+0x156>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a77      	ldr	r2, [pc, #476]	; (8008c94 <I2C_Slave_ISR_DMA+0x300>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d017      	beq.n	8008aea <I2C_Slave_ISR_DMA+0x156>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a75      	ldr	r2, [pc, #468]	; (8008c98 <I2C_Slave_ISR_DMA+0x304>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d011      	beq.n	8008aea <I2C_Slave_ISR_DMA+0x156>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a73      	ldr	r2, [pc, #460]	; (8008c9c <I2C_Slave_ISR_DMA+0x308>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d00b      	beq.n	8008aea <I2C_Slave_ISR_DMA+0x156>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a71      	ldr	r2, [pc, #452]	; (8008ca0 <I2C_Slave_ISR_DMA+0x30c>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d005      	beq.n	8008aea <I2C_Slave_ISR_DMA+0x156>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a6f      	ldr	r2, [pc, #444]	; (8008ca4 <I2C_Slave_ISR_DMA+0x310>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d109      	bne.n	8008afe <I2C_Slave_ISR_DMA+0x16a>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	bf0c      	ite	eq
 8008af6:	2301      	moveq	r3, #1
 8008af8:	2300      	movne	r3, #0
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	e008      	b.n	8008b10 <I2C_Slave_ISR_DMA+0x17c>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	bf0c      	ite	eq
 8008b0a:	2301      	moveq	r3, #1
 8008b0c:	2300      	movne	r3, #0
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8008b14:	2301      	movs	r3, #1
 8008b16:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d07c      	beq.n	8008c1a <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	0b9b      	lsrs	r3, r3, #14
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d076      	beq.n	8008c1a <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a4d      	ldr	r2, [pc, #308]	; (8008c68 <I2C_Slave_ISR_DMA+0x2d4>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d059      	beq.n	8008bec <I2C_Slave_ISR_DMA+0x258>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a4b      	ldr	r2, [pc, #300]	; (8008c6c <I2C_Slave_ISR_DMA+0x2d8>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d053      	beq.n	8008bec <I2C_Slave_ISR_DMA+0x258>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a49      	ldr	r2, [pc, #292]	; (8008c70 <I2C_Slave_ISR_DMA+0x2dc>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d04d      	beq.n	8008bec <I2C_Slave_ISR_DMA+0x258>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a47      	ldr	r2, [pc, #284]	; (8008c74 <I2C_Slave_ISR_DMA+0x2e0>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d047      	beq.n	8008bec <I2C_Slave_ISR_DMA+0x258>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a45      	ldr	r2, [pc, #276]	; (8008c78 <I2C_Slave_ISR_DMA+0x2e4>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d041      	beq.n	8008bec <I2C_Slave_ISR_DMA+0x258>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a43      	ldr	r2, [pc, #268]	; (8008c7c <I2C_Slave_ISR_DMA+0x2e8>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d03b      	beq.n	8008bec <I2C_Slave_ISR_DMA+0x258>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a41      	ldr	r2, [pc, #260]	; (8008c80 <I2C_Slave_ISR_DMA+0x2ec>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d035      	beq.n	8008bec <I2C_Slave_ISR_DMA+0x258>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a3f      	ldr	r2, [pc, #252]	; (8008c84 <I2C_Slave_ISR_DMA+0x2f0>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d02f      	beq.n	8008bec <I2C_Slave_ISR_DMA+0x258>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a3d      	ldr	r2, [pc, #244]	; (8008c88 <I2C_Slave_ISR_DMA+0x2f4>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d029      	beq.n	8008bec <I2C_Slave_ISR_DMA+0x258>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a3b      	ldr	r2, [pc, #236]	; (8008c8c <I2C_Slave_ISR_DMA+0x2f8>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d023      	beq.n	8008bec <I2C_Slave_ISR_DMA+0x258>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a39      	ldr	r2, [pc, #228]	; (8008c90 <I2C_Slave_ISR_DMA+0x2fc>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d01d      	beq.n	8008bec <I2C_Slave_ISR_DMA+0x258>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a37      	ldr	r2, [pc, #220]	; (8008c94 <I2C_Slave_ISR_DMA+0x300>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d017      	beq.n	8008bec <I2C_Slave_ISR_DMA+0x258>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a35      	ldr	r2, [pc, #212]	; (8008c98 <I2C_Slave_ISR_DMA+0x304>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d011      	beq.n	8008bec <I2C_Slave_ISR_DMA+0x258>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a33      	ldr	r2, [pc, #204]	; (8008c9c <I2C_Slave_ISR_DMA+0x308>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d00b      	beq.n	8008bec <I2C_Slave_ISR_DMA+0x258>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a31      	ldr	r2, [pc, #196]	; (8008ca0 <I2C_Slave_ISR_DMA+0x30c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d005      	beq.n	8008bec <I2C_Slave_ISR_DMA+0x258>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a2f      	ldr	r2, [pc, #188]	; (8008ca4 <I2C_Slave_ISR_DMA+0x310>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d109      	bne.n	8008c00 <I2C_Slave_ISR_DMA+0x26c>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bf0c      	ite	eq
 8008bf8:	2301      	moveq	r3, #1
 8008bfa:	2300      	movne	r3, #0
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	e008      	b.n	8008c12 <I2C_Slave_ISR_DMA+0x27e>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	bf0c      	ite	eq
 8008c0c:	2301      	moveq	r3, #1
 8008c0e:	2300      	movne	r3, #0
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 8008c16:	2301      	movs	r3, #1
 8008c18:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d148      	bne.n	8008cb2 <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b28      	cmp	r3, #40	; 0x28
 8008c2a:	d108      	bne.n	8008c3e <I2C_Slave_ISR_DMA+0x2aa>
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c32:	d104      	bne.n	8008c3e <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008c34:	68b9      	ldr	r1, [r7, #8]
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f000 fd16 	bl	8009668 <I2C_ITListenCplt>
 8008c3c:	e068      	b.n	8008d10 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b29      	cmp	r3, #41	; 0x29
 8008c48:	d12e      	bne.n	8008ca8 <I2C_Slave_ISR_DMA+0x314>
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008c50:	d02a      	beq.n	8008ca8 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2210      	movs	r2, #16
 8008c58:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 fe51 	bl	8009902 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 f9e0 	bl	8009026 <I2C_ITSlaveSeqCplt>
 8008c66:	e053      	b.n	8008d10 <I2C_Slave_ISR_DMA+0x37c>
 8008c68:	40020010 	.word	0x40020010
 8008c6c:	40020028 	.word	0x40020028
 8008c70:	40020040 	.word	0x40020040
 8008c74:	40020058 	.word	0x40020058
 8008c78:	40020070 	.word	0x40020070
 8008c7c:	40020088 	.word	0x40020088
 8008c80:	400200a0 	.word	0x400200a0
 8008c84:	400200b8 	.word	0x400200b8
 8008c88:	40020410 	.word	0x40020410
 8008c8c:	40020428 	.word	0x40020428
 8008c90:	40020440 	.word	0x40020440
 8008c94:	40020458 	.word	0x40020458
 8008c98:	40020470 	.word	0x40020470
 8008c9c:	40020488 	.word	0x40020488
 8008ca0:	400204a0 	.word	0x400204a0
 8008ca4:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2210      	movs	r2, #16
 8008cae:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008cb0:	e034      	b.n	8008d1c <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2210      	movs	r2, #16
 8008cb8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cbe:	f043 0204 	orr.w	r2, r3, #4
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ccc:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d003      	beq.n	8008cdc <I2C_Slave_ISR_DMA+0x348>
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cda:	d11f      	bne.n	8008d1c <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
 8008cde:	2b21      	cmp	r3, #33	; 0x21
 8008ce0:	d002      	beq.n	8008ce8 <I2C_Slave_ISR_DMA+0x354>
 8008ce2:	7dfb      	ldrb	r3, [r7, #23]
 8008ce4:	2b29      	cmp	r3, #41	; 0x29
 8008ce6:	d103      	bne.n	8008cf0 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2221      	movs	r2, #33	; 0x21
 8008cec:	631a      	str	r2, [r3, #48]	; 0x30
 8008cee:	e008      	b.n	8008d02 <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008cf0:	7dfb      	ldrb	r3, [r7, #23]
 8008cf2:	2b22      	cmp	r3, #34	; 0x22
 8008cf4:	d002      	beq.n	8008cfc <I2C_Slave_ISR_DMA+0x368>
 8008cf6:	7dfb      	ldrb	r3, [r7, #23]
 8008cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8008cfa:	d102      	bne.n	8008d02 <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2222      	movs	r2, #34	; 0x22
 8008d00:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d06:	4619      	mov	r1, r3
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 fd03 	bl	8009714 <I2C_ITError>
      if (treatdmanack == 1U)
 8008d0e:	e005      	b.n	8008d1c <I2C_Slave_ISR_DMA+0x388>
 8008d10:	e004      	b.n	8008d1c <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2210      	movs	r2, #16
 8008d18:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d1a:	e011      	b.n	8008d40 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8008d1c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d1e:	e00f      	b.n	8008d40 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	08db      	lsrs	r3, r3, #3
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d009      	beq.n	8008d40 <I2C_Slave_ISR_DMA+0x3ac>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	08db      	lsrs	r3, r3, #3
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d003      	beq.n	8008d40 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008d38:	68b9      	ldr	r1, [r7, #8]
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 f8b2 	bl	8008ea4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3720      	adds	r7, #32
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop

08008d54 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af02      	add	r7, sp, #8
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	4608      	mov	r0, r1
 8008d5e:	4611      	mov	r1, r2
 8008d60:	461a      	mov	r2, r3
 8008d62:	4603      	mov	r3, r0
 8008d64:	817b      	strh	r3, [r7, #10]
 8008d66:	460b      	mov	r3, r1
 8008d68:	813b      	strh	r3, [r7, #8]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008d6e:	88fb      	ldrh	r3, [r7, #6]
 8008d70:	b2da      	uxtb	r2, r3
 8008d72:	8979      	ldrh	r1, [r7, #10]
 8008d74:	4b20      	ldr	r3, [pc, #128]	; (8008df8 <I2C_RequestMemoryWrite+0xa4>)
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f001 f8a7 	bl	8009ed0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d82:	69fa      	ldr	r2, [r7, #28]
 8008d84:	69b9      	ldr	r1, [r7, #24]
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 ffc0 	bl	8009d0c <I2C_WaitOnTXISFlagUntilTimeout>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e02c      	b.n	8008df0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d96:	88fb      	ldrh	r3, [r7, #6]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d105      	bne.n	8008da8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d9c:	893b      	ldrh	r3, [r7, #8]
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	629a      	str	r2, [r3, #40]	; 0x28
 8008da6:	e015      	b.n	8008dd4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008da8:	893b      	ldrh	r3, [r7, #8]
 8008daa:	0a1b      	lsrs	r3, r3, #8
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008db6:	69fa      	ldr	r2, [r7, #28]
 8008db8:	69b9      	ldr	r1, [r7, #24]
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f000 ffa6 	bl	8009d0c <I2C_WaitOnTXISFlagUntilTimeout>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e012      	b.n	8008df0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008dca:	893b      	ldrh	r3, [r7, #8]
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2180      	movs	r1, #128	; 0x80
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f000 ff54 	bl	8009c8c <I2C_WaitOnFlagUntilTimeout>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e000      	b.n	8008df0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	80002000 	.word	0x80002000

08008dfc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af02      	add	r7, sp, #8
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	4608      	mov	r0, r1
 8008e06:	4611      	mov	r1, r2
 8008e08:	461a      	mov	r2, r3
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	817b      	strh	r3, [r7, #10]
 8008e0e:	460b      	mov	r3, r1
 8008e10:	813b      	strh	r3, [r7, #8]
 8008e12:	4613      	mov	r3, r2
 8008e14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008e16:	88fb      	ldrh	r3, [r7, #6]
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	8979      	ldrh	r1, [r7, #10]
 8008e1c:	4b20      	ldr	r3, [pc, #128]	; (8008ea0 <I2C_RequestMemoryRead+0xa4>)
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	2300      	movs	r3, #0
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f001 f854 	bl	8009ed0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e28:	69fa      	ldr	r2, [r7, #28]
 8008e2a:	69b9      	ldr	r1, [r7, #24]
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 ff6d 	bl	8009d0c <I2C_WaitOnTXISFlagUntilTimeout>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d001      	beq.n	8008e3c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e02c      	b.n	8008e96 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e3c:	88fb      	ldrh	r3, [r7, #6]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d105      	bne.n	8008e4e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e42:	893b      	ldrh	r3, [r7, #8]
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	629a      	str	r2, [r3, #40]	; 0x28
 8008e4c:	e015      	b.n	8008e7a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008e4e:	893b      	ldrh	r3, [r7, #8]
 8008e50:	0a1b      	lsrs	r3, r3, #8
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e5c:	69fa      	ldr	r2, [r7, #28]
 8008e5e:	69b9      	ldr	r1, [r7, #24]
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 ff53 	bl	8009d0c <I2C_WaitOnTXISFlagUntilTimeout>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e012      	b.n	8008e96 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e70:	893b      	ldrh	r3, [r7, #8]
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	2200      	movs	r2, #0
 8008e82:	2140      	movs	r1, #64	; 0x40
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 ff01 	bl	8009c8c <I2C_WaitOnFlagUntilTimeout>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e000      	b.n	8008e96 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	80002000 	.word	0x80002000

08008ea4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008eba:	2b28      	cmp	r3, #40	; 0x28
 8008ebc:	d16a      	bne.n	8008f94 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	0c1b      	lsrs	r3, r3, #16
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	0c1b      	lsrs	r3, r3, #16
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008edc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008eea:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008ef8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d138      	bne.n	8008f74 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8008f02:	897b      	ldrh	r3, [r7, #10]
 8008f04:	09db      	lsrs	r3, r3, #7
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	89bb      	ldrh	r3, [r7, #12]
 8008f0a:	4053      	eors	r3, r2
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	f003 0306 	and.w	r3, r3, #6
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d11c      	bne.n	8008f50 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008f16:	897b      	ldrh	r3, [r7, #10]
 8008f18:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d13b      	bne.n	8008fa4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2208      	movs	r2, #8
 8008f38:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008f42:	89ba      	ldrh	r2, [r7, #12]
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
 8008f46:	4619      	mov	r1, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7ff faed 	bl	8008528 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008f4e:	e029      	b.n	8008fa4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008f50:	893b      	ldrh	r3, [r7, #8]
 8008f52:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 f84b 	bl	8009ff4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008f66:	89ba      	ldrh	r2, [r7, #12]
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7ff fadb 	bl	8008528 <HAL_I2C_AddrCallback>
}
 8008f72:	e017      	b.n	8008fa4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008f74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 f83b 	bl	8009ff4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008f86:	89ba      	ldrh	r2, [r7, #12]
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7ff facb 	bl	8008528 <HAL_I2C_AddrCallback>
}
 8008f92:	e007      	b.n	8008fa4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2208      	movs	r2, #8
 8008f9a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008fa4:	bf00      	nop
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b21      	cmp	r3, #33	; 0x21
 8008fc6:	d115      	bne.n	8008ff4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2211      	movs	r2, #17
 8008fd4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008fdc:	2101      	movs	r1, #1
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f001 f808 	bl	8009ff4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f7ff fa73 	bl	80084d8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008ff2:	e014      	b.n	800901e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2212      	movs	r2, #18
 8009000:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009008:	2102      	movs	r1, #2
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fff2 	bl	8009ff4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7ff fa67 	bl	80084ec <HAL_I2C_MasterRxCpltCallback>
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	0b9b      	lsrs	r3, r3, #14
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d008      	beq.n	800905c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	e00d      	b.n	8009078 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	0bdb      	lsrs	r3, r3, #15
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b00      	cmp	r3, #0
 8009066:	d007      	beq.n	8009078 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009076:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b29      	cmp	r3, #41	; 0x29
 8009082:	d112      	bne.n	80090aa <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2228      	movs	r2, #40	; 0x28
 8009088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2221      	movs	r2, #33	; 0x21
 8009090:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009092:	2101      	movs	r1, #1
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 ffad 	bl	8009ff4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7ff fa2c 	bl	8008500 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80090a8:	e017      	b.n	80090da <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b2a      	cmp	r3, #42	; 0x2a
 80090b4:	d111      	bne.n	80090da <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2228      	movs	r2, #40	; 0x28
 80090ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2222      	movs	r2, #34	; 0x22
 80090c2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80090c4:	2102      	movs	r1, #2
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 ff94 	bl	8009ff4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7ff fa1d 	bl	8008514 <HAL_I2C_SlaveRxCpltCallback>
}
 80090da:	bf00      	nop
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2220      	movs	r2, #32
 80090f8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b21      	cmp	r3, #33	; 0x21
 8009104:	d107      	bne.n	8009116 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009106:	2101      	movs	r1, #1
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 ff73 	bl	8009ff4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2211      	movs	r2, #17
 8009112:	631a      	str	r2, [r3, #48]	; 0x30
 8009114:	e00c      	b.n	8009130 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b22      	cmp	r3, #34	; 0x22
 8009120:	d106      	bne.n	8009130 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009122:	2102      	movs	r1, #2
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 ff65 	bl	8009ff4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2212      	movs	r2, #18
 800912e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6859      	ldr	r1, [r3, #4]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	4b4d      	ldr	r3, [pc, #308]	; (8009270 <I2C_ITMasterCplt+0x18c>)
 800913c:	400b      	ands	r3, r1
 800913e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a4a      	ldr	r2, [pc, #296]	; (8009274 <I2C_ITMasterCplt+0x190>)
 800914a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	091b      	lsrs	r3, r3, #4
 8009150:	f003 0301 	and.w	r3, r3, #1
 8009154:	2b00      	cmp	r3, #0
 8009156:	d009      	beq.n	800916c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2210      	movs	r2, #16
 800915e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009164:	f043 0204 	orr.w	r2, r3, #4
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b60      	cmp	r3, #96	; 0x60
 8009176:	d10b      	bne.n	8009190 <I2C_ITMasterCplt+0xac>
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	089b      	lsrs	r3, r3, #2
 800917c:	f003 0301 	and.w	r3, r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	d005      	beq.n	8009190 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918a:	b2db      	uxtb	r3, r3
 800918c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800918e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fbb6 	bl	8009902 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800919a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	2b60      	cmp	r3, #96	; 0x60
 80091a6:	d002      	beq.n	80091ae <I2C_ITMasterCplt+0xca>
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d006      	beq.n	80091bc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 faad 	bl	8009714 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80091ba:	e054      	b.n	8009266 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b21      	cmp	r3, #33	; 0x21
 80091c6:	d124      	bne.n	8009212 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2220      	movs	r2, #32
 80091cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b40      	cmp	r3, #64	; 0x40
 80091e0:	d10b      	bne.n	80091fa <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7ff f9b0 	bl	8008558 <HAL_I2C_MemTxCpltCallback>
}
 80091f8:	e035      	b.n	8009266 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7ff f964 	bl	80084d8 <HAL_I2C_MasterTxCpltCallback>
}
 8009210:	e029      	b.n	8009266 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b22      	cmp	r3, #34	; 0x22
 800921c:	d123      	bne.n	8009266 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2220      	movs	r2, #32
 8009222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b40      	cmp	r3, #64	; 0x40
 8009236:	d10b      	bne.n	8009250 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff f98f 	bl	800856c <HAL_I2C_MemRxCpltCallback>
}
 800924e:	e00a      	b.n	8009266 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f7ff f943 	bl	80084ec <HAL_I2C_MasterRxCpltCallback>
}
 8009266:	bf00      	nop
 8009268:	3718      	adds	r7, #24
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	fe00e800 	.word	0xfe00e800
 8009274:	ffff0000 	.word	0xffff0000

08009278 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009294:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2220      	movs	r2, #32
 800929c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	2b21      	cmp	r3, #33	; 0x21
 80092a2:	d002      	beq.n	80092aa <I2C_ITSlaveCplt+0x32>
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	2b29      	cmp	r3, #41	; 0x29
 80092a8:	d108      	bne.n	80092bc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80092aa:	f248 0101 	movw	r1, #32769	; 0x8001
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fea0 	bl	8009ff4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2221      	movs	r2, #33	; 0x21
 80092b8:	631a      	str	r2, [r3, #48]	; 0x30
 80092ba:	e00d      	b.n	80092d8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	2b22      	cmp	r3, #34	; 0x22
 80092c0:	d002      	beq.n	80092c8 <I2C_ITSlaveCplt+0x50>
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	2b2a      	cmp	r3, #42	; 0x2a
 80092c6:	d107      	bne.n	80092d8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80092c8:	f248 0102 	movw	r1, #32770	; 0x8002
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fe91 	bl	8009ff4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2222      	movs	r2, #34	; 0x22
 80092d6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80092e6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6859      	ldr	r1, [r3, #4]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	4b80      	ldr	r3, [pc, #512]	; (80094f4 <I2C_ITSlaveCplt+0x27c>)
 80092f4:	400b      	ands	r3, r1
 80092f6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fb02 	bl	8009902 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	0b9b      	lsrs	r3, r3, #14
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d07a      	beq.n	8009400 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009318:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931e:	2b00      	cmp	r3, #0
 8009320:	f000 8111 	beq.w	8009546 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a73      	ldr	r2, [pc, #460]	; (80094f8 <I2C_ITSlaveCplt+0x280>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d059      	beq.n	80093e4 <I2C_ITSlaveCplt+0x16c>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a71      	ldr	r2, [pc, #452]	; (80094fc <I2C_ITSlaveCplt+0x284>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d053      	beq.n	80093e4 <I2C_ITSlaveCplt+0x16c>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a6f      	ldr	r2, [pc, #444]	; (8009500 <I2C_ITSlaveCplt+0x288>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d04d      	beq.n	80093e4 <I2C_ITSlaveCplt+0x16c>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a6d      	ldr	r2, [pc, #436]	; (8009504 <I2C_ITSlaveCplt+0x28c>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d047      	beq.n	80093e4 <I2C_ITSlaveCplt+0x16c>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a6b      	ldr	r2, [pc, #428]	; (8009508 <I2C_ITSlaveCplt+0x290>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d041      	beq.n	80093e4 <I2C_ITSlaveCplt+0x16c>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a69      	ldr	r2, [pc, #420]	; (800950c <I2C_ITSlaveCplt+0x294>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d03b      	beq.n	80093e4 <I2C_ITSlaveCplt+0x16c>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a67      	ldr	r2, [pc, #412]	; (8009510 <I2C_ITSlaveCplt+0x298>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d035      	beq.n	80093e4 <I2C_ITSlaveCplt+0x16c>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a65      	ldr	r2, [pc, #404]	; (8009514 <I2C_ITSlaveCplt+0x29c>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d02f      	beq.n	80093e4 <I2C_ITSlaveCplt+0x16c>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a63      	ldr	r2, [pc, #396]	; (8009518 <I2C_ITSlaveCplt+0x2a0>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d029      	beq.n	80093e4 <I2C_ITSlaveCplt+0x16c>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a61      	ldr	r2, [pc, #388]	; (800951c <I2C_ITSlaveCplt+0x2a4>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d023      	beq.n	80093e4 <I2C_ITSlaveCplt+0x16c>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a5f      	ldr	r2, [pc, #380]	; (8009520 <I2C_ITSlaveCplt+0x2a8>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d01d      	beq.n	80093e4 <I2C_ITSlaveCplt+0x16c>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a5d      	ldr	r2, [pc, #372]	; (8009524 <I2C_ITSlaveCplt+0x2ac>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d017      	beq.n	80093e4 <I2C_ITSlaveCplt+0x16c>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a5b      	ldr	r2, [pc, #364]	; (8009528 <I2C_ITSlaveCplt+0x2b0>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d011      	beq.n	80093e4 <I2C_ITSlaveCplt+0x16c>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a59      	ldr	r2, [pc, #356]	; (800952c <I2C_ITSlaveCplt+0x2b4>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d00b      	beq.n	80093e4 <I2C_ITSlaveCplt+0x16c>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a57      	ldr	r2, [pc, #348]	; (8009530 <I2C_ITSlaveCplt+0x2b8>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d005      	beq.n	80093e4 <I2C_ITSlaveCplt+0x16c>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a55      	ldr	r2, [pc, #340]	; (8009534 <I2C_ITSlaveCplt+0x2bc>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d105      	bne.n	80093f0 <I2C_ITSlaveCplt+0x178>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	e004      	b.n	80093fa <I2C_ITSlaveCplt+0x182>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	8553      	strh	r3, [r2, #42]	; 0x2a
 80093fe:	e0a2      	b.n	8009546 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	0bdb      	lsrs	r3, r3, #15
 8009404:	f003 0301 	and.w	r3, r3, #1
 8009408:	2b00      	cmp	r3, #0
 800940a:	f000 809c 	beq.w	8009546 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800941c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 808f 	beq.w	8009546 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a32      	ldr	r2, [pc, #200]	; (80094f8 <I2C_ITSlaveCplt+0x280>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d059      	beq.n	80094e8 <I2C_ITSlaveCplt+0x270>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a30      	ldr	r2, [pc, #192]	; (80094fc <I2C_ITSlaveCplt+0x284>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d053      	beq.n	80094e8 <I2C_ITSlaveCplt+0x270>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a2e      	ldr	r2, [pc, #184]	; (8009500 <I2C_ITSlaveCplt+0x288>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d04d      	beq.n	80094e8 <I2C_ITSlaveCplt+0x270>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a2c      	ldr	r2, [pc, #176]	; (8009504 <I2C_ITSlaveCplt+0x28c>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d047      	beq.n	80094e8 <I2C_ITSlaveCplt+0x270>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a2a      	ldr	r2, [pc, #168]	; (8009508 <I2C_ITSlaveCplt+0x290>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d041      	beq.n	80094e8 <I2C_ITSlaveCplt+0x270>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a28      	ldr	r2, [pc, #160]	; (800950c <I2C_ITSlaveCplt+0x294>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d03b      	beq.n	80094e8 <I2C_ITSlaveCplt+0x270>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a26      	ldr	r2, [pc, #152]	; (8009510 <I2C_ITSlaveCplt+0x298>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d035      	beq.n	80094e8 <I2C_ITSlaveCplt+0x270>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a24      	ldr	r2, [pc, #144]	; (8009514 <I2C_ITSlaveCplt+0x29c>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d02f      	beq.n	80094e8 <I2C_ITSlaveCplt+0x270>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a22      	ldr	r2, [pc, #136]	; (8009518 <I2C_ITSlaveCplt+0x2a0>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d029      	beq.n	80094e8 <I2C_ITSlaveCplt+0x270>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a20      	ldr	r2, [pc, #128]	; (800951c <I2C_ITSlaveCplt+0x2a4>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d023      	beq.n	80094e8 <I2C_ITSlaveCplt+0x270>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a1e      	ldr	r2, [pc, #120]	; (8009520 <I2C_ITSlaveCplt+0x2a8>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d01d      	beq.n	80094e8 <I2C_ITSlaveCplt+0x270>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a1c      	ldr	r2, [pc, #112]	; (8009524 <I2C_ITSlaveCplt+0x2ac>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d017      	beq.n	80094e8 <I2C_ITSlaveCplt+0x270>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a1a      	ldr	r2, [pc, #104]	; (8009528 <I2C_ITSlaveCplt+0x2b0>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d011      	beq.n	80094e8 <I2C_ITSlaveCplt+0x270>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a18      	ldr	r2, [pc, #96]	; (800952c <I2C_ITSlaveCplt+0x2b4>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d00b      	beq.n	80094e8 <I2C_ITSlaveCplt+0x270>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a16      	ldr	r2, [pc, #88]	; (8009530 <I2C_ITSlaveCplt+0x2b8>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d005      	beq.n	80094e8 <I2C_ITSlaveCplt+0x270>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a14      	ldr	r2, [pc, #80]	; (8009534 <I2C_ITSlaveCplt+0x2bc>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d127      	bne.n	8009538 <I2C_ITSlaveCplt+0x2c0>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	e026      	b.n	8009542 <I2C_ITSlaveCplt+0x2ca>
 80094f4:	fe00e800 	.word	0xfe00e800
 80094f8:	40020010 	.word	0x40020010
 80094fc:	40020028 	.word	0x40020028
 8009500:	40020040 	.word	0x40020040
 8009504:	40020058 	.word	0x40020058
 8009508:	40020070 	.word	0x40020070
 800950c:	40020088 	.word	0x40020088
 8009510:	400200a0 	.word	0x400200a0
 8009514:	400200b8 	.word	0x400200b8
 8009518:	40020410 	.word	0x40020410
 800951c:	40020428 	.word	0x40020428
 8009520:	40020440 	.word	0x40020440
 8009524:	40020458 	.word	0x40020458
 8009528:	40020470 	.word	0x40020470
 800952c:	40020488 	.word	0x40020488
 8009530:	400204a0 	.word	0x400204a0
 8009534:	400204b8 	.word	0x400204b8
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	b29b      	uxth	r3, r3
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	089b      	lsrs	r3, r3, #2
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d020      	beq.n	8009594 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	f023 0304 	bic.w	r3, r3, #4
 8009558:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009564:	b2d2      	uxtb	r2, r2
 8009566:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956c:	1c5a      	adds	r2, r3, #1
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00c      	beq.n	8009594 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800957e:	3b01      	subs	r3, #1
 8009580:	b29a      	uxth	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800958a:	b29b      	uxth	r3, r3
 800958c:	3b01      	subs	r3, #1
 800958e:	b29a      	uxth	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009598:	b29b      	uxth	r3, r3
 800959a:	2b00      	cmp	r3, #0
 800959c:	d005      	beq.n	80095aa <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a2:	f043 0204 	orr.w	r2, r3, #4
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d010      	beq.n	80095e2 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f8a4 	bl	8009714 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b28      	cmp	r3, #40	; 0x28
 80095d6:	d141      	bne.n	800965c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80095d8:	6979      	ldr	r1, [r7, #20]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f844 	bl	8009668 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80095e0:	e03c      	b.n	800965c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80095ea:	d014      	beq.n	8009616 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff fd1a 	bl	8009026 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a1b      	ldr	r2, [pc, #108]	; (8009664 <I2C_ITSlaveCplt+0x3ec>)
 80095f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2220      	movs	r2, #32
 80095fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7fe ff98 	bl	8008544 <HAL_I2C_ListenCpltCallback>
}
 8009614:	e022      	b.n	800965c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b22      	cmp	r3, #34	; 0x22
 8009620:	d10e      	bne.n	8009640 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2220      	movs	r2, #32
 8009626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7fe ff6b 	bl	8008514 <HAL_I2C_SlaveRxCpltCallback>
}
 800963e:	e00d      	b.n	800965c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2220      	movs	r2, #32
 8009644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7fe ff52 	bl	8008500 <HAL_I2C_SlaveTxCpltCallback>
}
 800965c:	bf00      	nop
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	ffff0000 	.word	0xffff0000

08009668 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a26      	ldr	r2, [pc, #152]	; (8009710 <I2C_ITListenCplt+0xa8>)
 8009676:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2220      	movs	r2, #32
 8009682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	089b      	lsrs	r3, r3, #2
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	2b00      	cmp	r3, #0
 800969e:	d022      	beq.n	80096e6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096aa:	b2d2      	uxtb	r2, r2
 80096ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d012      	beq.n	80096e6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096c4:	3b01      	subs	r3, #1
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	3b01      	subs	r3, #1
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096de:	f043 0204 	orr.w	r2, r3, #4
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80096e6:	f248 0103 	movw	r1, #32771	; 0x8003
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fc82 	bl	8009ff4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2210      	movs	r2, #16
 80096f6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7fe ff1f 	bl	8008544 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009706:	bf00      	nop
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	ffff0000 	.word	0xffff0000

08009714 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a5d      	ldr	r2, [pc, #372]	; (80098a8 <I2C_ITError+0x194>)
 8009732:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	431a      	orrs	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009746:	7bfb      	ldrb	r3, [r7, #15]
 8009748:	2b28      	cmp	r3, #40	; 0x28
 800974a:	d005      	beq.n	8009758 <I2C_ITError+0x44>
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	2b29      	cmp	r3, #41	; 0x29
 8009750:	d002      	beq.n	8009758 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009752:	7bfb      	ldrb	r3, [r7, #15]
 8009754:	2b2a      	cmp	r3, #42	; 0x2a
 8009756:	d10b      	bne.n	8009770 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009758:	2103      	movs	r1, #3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fc4a 	bl	8009ff4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2228      	movs	r2, #40	; 0x28
 8009764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a50      	ldr	r2, [pc, #320]	; (80098ac <I2C_ITError+0x198>)
 800976c:	635a      	str	r2, [r3, #52]	; 0x34
 800976e:	e011      	b.n	8009794 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009770:	f248 0103 	movw	r1, #32771	; 0x8003
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fc3d 	bl	8009ff4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b60      	cmp	r3, #96	; 0x60
 8009784:	d003      	beq.n	800978e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2220      	movs	r2, #32
 800978a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009798:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d039      	beq.n	8009816 <I2C_ITError+0x102>
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	2b11      	cmp	r3, #17
 80097a6:	d002      	beq.n	80097ae <I2C_ITError+0x9a>
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2b21      	cmp	r3, #33	; 0x21
 80097ac:	d133      	bne.n	8009816 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097bc:	d107      	bne.n	80097ce <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fd fcca 	bl	800716c <HAL_DMA_GetState>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d017      	beq.n	800980e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e2:	4a33      	ldr	r2, [pc, #204]	; (80098b0 <I2C_ITError+0x19c>)
 80097e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7fc fb4c 	bl	8005e90 <HAL_DMA_Abort_IT>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d04d      	beq.n	800989a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009808:	4610      	mov	r0, r2
 800980a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800980c:	e045      	b.n	800989a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f850 	bl	80098b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009814:	e041      	b.n	800989a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800981a:	2b00      	cmp	r3, #0
 800981c:	d039      	beq.n	8009892 <I2C_ITError+0x17e>
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2b12      	cmp	r3, #18
 8009822:	d002      	beq.n	800982a <I2C_ITError+0x116>
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2b22      	cmp	r3, #34	; 0x22
 8009828:	d133      	bne.n	8009892 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009838:	d107      	bne.n	800984a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009848:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800984e:	4618      	mov	r0, r3
 8009850:	f7fd fc8c 	bl	800716c <HAL_DMA_GetState>
 8009854:	4603      	mov	r3, r0
 8009856:	2b01      	cmp	r3, #1
 8009858:	d017      	beq.n	800988a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800985e:	4a14      	ldr	r2, [pc, #80]	; (80098b0 <I2C_ITError+0x19c>)
 8009860:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800986e:	4618      	mov	r0, r3
 8009870:	f7fc fb0e 	bl	8005e90 <HAL_DMA_Abort_IT>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d011      	beq.n	800989e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800987e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009884:	4610      	mov	r0, r2
 8009886:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009888:	e009      	b.n	800989e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f812 	bl	80098b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009890:	e005      	b.n	800989e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f80e 	bl	80098b4 <I2C_TreatErrorCallback>
  }
}
 8009898:	e002      	b.n	80098a0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800989a:	bf00      	nop
 800989c:	e000      	b.n	80098a0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800989e:	bf00      	nop
}
 80098a0:	bf00      	nop
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	ffff0000 	.word	0xffff0000
 80098ac:	080085a9 	.word	0x080085a9
 80098b0:	08009c51 	.word	0x08009c51

080098b4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b60      	cmp	r3, #96	; 0x60
 80098c6:	d10e      	bne.n	80098e6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2220      	movs	r2, #32
 80098cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7fe fe58 	bl	8008594 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80098e4:	e009      	b.n	80098fa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7fe fe43 	bl	8008580 <HAL_I2C_ErrorCallback>
}
 80098fa:	bf00      	nop
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	f003 0302 	and.w	r3, r3, #2
 8009914:	2b02      	cmp	r3, #2
 8009916:	d103      	bne.n	8009920 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2200      	movs	r2, #0
 800991e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	f003 0301 	and.w	r3, r3, #1
 800992a:	2b01      	cmp	r3, #1
 800992c:	d007      	beq.n	800993e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	699a      	ldr	r2, [r3, #24]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f042 0201 	orr.w	r2, r2, #1
 800993c:	619a      	str	r2, [r3, #24]
  }
}
 800993e:	bf00      	nop
 8009940:	370c      	adds	r7, #12
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009956:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009966:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800996c:	b29b      	uxth	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d104      	bne.n	800997c <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009972:	2120      	movs	r1, #32
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f000 fad9 	bl	8009f2c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800997a:	e02d      	b.n	80099d8 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009984:	441a      	add	r2, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800998e:	b29b      	uxth	r3, r3
 8009990:	2bff      	cmp	r3, #255	; 0xff
 8009992:	d903      	bls.n	800999c <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	22ff      	movs	r2, #255	; 0xff
 8009998:	851a      	strh	r2, [r3, #40]	; 0x28
 800999a:	e004      	b.n	80099a6 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3324      	adds	r3, #36	; 0x24
 80099b0:	4619      	mov	r1, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b6:	461a      	mov	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099bc:	f7fb fce0 	bl	8005380 <HAL_DMA_Start_IT>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d004      	beq.n	80099d0 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80099c6:	2110      	movs	r1, #16
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f7ff fea3 	bl	8009714 <I2C_ITError>
}
 80099ce:	e003      	b.n	80099d8 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80099d0:	2140      	movs	r1, #64	; 0x40
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f000 faaa 	bl	8009f2c <I2C_Enable_IRQ>
}
 80099d8:	bf00      	nop
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d076      	beq.n	8009ae8 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a83      	ldr	r2, [pc, #524]	; (8009c10 <I2C_DMAError+0x230>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d059      	beq.n	8009aba <I2C_DMAError+0xda>
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a81      	ldr	r2, [pc, #516]	; (8009c14 <I2C_DMAError+0x234>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d053      	beq.n	8009aba <I2C_DMAError+0xda>
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a7f      	ldr	r2, [pc, #508]	; (8009c18 <I2C_DMAError+0x238>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d04d      	beq.n	8009aba <I2C_DMAError+0xda>
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a7d      	ldr	r2, [pc, #500]	; (8009c1c <I2C_DMAError+0x23c>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d047      	beq.n	8009aba <I2C_DMAError+0xda>
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a7b      	ldr	r2, [pc, #492]	; (8009c20 <I2C_DMAError+0x240>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d041      	beq.n	8009aba <I2C_DMAError+0xda>
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a79      	ldr	r2, [pc, #484]	; (8009c24 <I2C_DMAError+0x244>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d03b      	beq.n	8009aba <I2C_DMAError+0xda>
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a77      	ldr	r2, [pc, #476]	; (8009c28 <I2C_DMAError+0x248>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d035      	beq.n	8009aba <I2C_DMAError+0xda>
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a75      	ldr	r2, [pc, #468]	; (8009c2c <I2C_DMAError+0x24c>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d02f      	beq.n	8009aba <I2C_DMAError+0xda>
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a73      	ldr	r2, [pc, #460]	; (8009c30 <I2C_DMAError+0x250>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d029      	beq.n	8009aba <I2C_DMAError+0xda>
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a71      	ldr	r2, [pc, #452]	; (8009c34 <I2C_DMAError+0x254>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d023      	beq.n	8009aba <I2C_DMAError+0xda>
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a6f      	ldr	r2, [pc, #444]	; (8009c38 <I2C_DMAError+0x258>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d01d      	beq.n	8009aba <I2C_DMAError+0xda>
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a6d      	ldr	r2, [pc, #436]	; (8009c3c <I2C_DMAError+0x25c>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d017      	beq.n	8009aba <I2C_DMAError+0xda>
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a6b      	ldr	r2, [pc, #428]	; (8009c40 <I2C_DMAError+0x260>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d011      	beq.n	8009aba <I2C_DMAError+0xda>
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a69      	ldr	r2, [pc, #420]	; (8009c44 <I2C_DMAError+0x264>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d00b      	beq.n	8009aba <I2C_DMAError+0xda>
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a67      	ldr	r2, [pc, #412]	; (8009c48 <I2C_DMAError+0x268>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d005      	beq.n	8009aba <I2C_DMAError+0xda>
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a65      	ldr	r2, [pc, #404]	; (8009c4c <I2C_DMAError+0x26c>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d109      	bne.n	8009ace <I2C_DMAError+0xee>
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	bf0c      	ite	eq
 8009ac6:	2301      	moveq	r3, #1
 8009ac8:	2300      	movne	r3, #0
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	e008      	b.n	8009ae0 <I2C_DMAError+0x100>
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	bf0c      	ite	eq
 8009ada:	2301      	moveq	r3, #1
 8009adc:	2300      	movne	r3, #0
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d001      	beq.n	8009ae8 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d076      	beq.n	8009bde <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a46      	ldr	r2, [pc, #280]	; (8009c10 <I2C_DMAError+0x230>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d059      	beq.n	8009bb0 <I2C_DMAError+0x1d0>
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a44      	ldr	r2, [pc, #272]	; (8009c14 <I2C_DMAError+0x234>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d053      	beq.n	8009bb0 <I2C_DMAError+0x1d0>
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a42      	ldr	r2, [pc, #264]	; (8009c18 <I2C_DMAError+0x238>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d04d      	beq.n	8009bb0 <I2C_DMAError+0x1d0>
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a40      	ldr	r2, [pc, #256]	; (8009c1c <I2C_DMAError+0x23c>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d047      	beq.n	8009bb0 <I2C_DMAError+0x1d0>
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a3e      	ldr	r2, [pc, #248]	; (8009c20 <I2C_DMAError+0x240>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d041      	beq.n	8009bb0 <I2C_DMAError+0x1d0>
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a3c      	ldr	r2, [pc, #240]	; (8009c24 <I2C_DMAError+0x244>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d03b      	beq.n	8009bb0 <I2C_DMAError+0x1d0>
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a3a      	ldr	r2, [pc, #232]	; (8009c28 <I2C_DMAError+0x248>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d035      	beq.n	8009bb0 <I2C_DMAError+0x1d0>
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a38      	ldr	r2, [pc, #224]	; (8009c2c <I2C_DMAError+0x24c>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d02f      	beq.n	8009bb0 <I2C_DMAError+0x1d0>
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a36      	ldr	r2, [pc, #216]	; (8009c30 <I2C_DMAError+0x250>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d029      	beq.n	8009bb0 <I2C_DMAError+0x1d0>
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a34      	ldr	r2, [pc, #208]	; (8009c34 <I2C_DMAError+0x254>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d023      	beq.n	8009bb0 <I2C_DMAError+0x1d0>
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a32      	ldr	r2, [pc, #200]	; (8009c38 <I2C_DMAError+0x258>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d01d      	beq.n	8009bb0 <I2C_DMAError+0x1d0>
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a30      	ldr	r2, [pc, #192]	; (8009c3c <I2C_DMAError+0x25c>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d017      	beq.n	8009bb0 <I2C_DMAError+0x1d0>
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a2e      	ldr	r2, [pc, #184]	; (8009c40 <I2C_DMAError+0x260>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d011      	beq.n	8009bb0 <I2C_DMAError+0x1d0>
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a2c      	ldr	r2, [pc, #176]	; (8009c44 <I2C_DMAError+0x264>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d00b      	beq.n	8009bb0 <I2C_DMAError+0x1d0>
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a2a      	ldr	r2, [pc, #168]	; (8009c48 <I2C_DMAError+0x268>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d005      	beq.n	8009bb0 <I2C_DMAError+0x1d0>
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a28      	ldr	r2, [pc, #160]	; (8009c4c <I2C_DMAError+0x26c>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d109      	bne.n	8009bc4 <I2C_DMAError+0x1e4>
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	bf0c      	ite	eq
 8009bbc:	2301      	moveq	r3, #1
 8009bbe:	2300      	movne	r3, #0
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	e008      	b.n	8009bd6 <I2C_DMAError+0x1f6>
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	bf0c      	ite	eq
 8009bd0:	2301      	moveq	r3, #1
 8009bd2:	2300      	movne	r3, #0
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d001      	beq.n	8009bde <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7fd fad2 	bl	8007188 <HAL_DMA_GetError>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d00e      	beq.n	8009c08 <I2C_DMAError+0x228>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00b      	beq.n	8009c08 <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	685a      	ldr	r2, [r3, #4]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bfe:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009c00:	2110      	movs	r1, #16
 8009c02:	68b8      	ldr	r0, [r7, #8]
 8009c04:	f7ff fd86 	bl	8009714 <I2C_ITError>
  }
}
 8009c08:	bf00      	nop
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	40020010 	.word	0x40020010
 8009c14:	40020028 	.word	0x40020028
 8009c18:	40020040 	.word	0x40020040
 8009c1c:	40020058 	.word	0x40020058
 8009c20:	40020070 	.word	0x40020070
 8009c24:	40020088 	.word	0x40020088
 8009c28:	400200a0 	.word	0x400200a0
 8009c2c:	400200b8 	.word	0x400200b8
 8009c30:	40020410 	.word	0x40020410
 8009c34:	40020428 	.word	0x40020428
 8009c38:	40020440 	.word	0x40020440
 8009c3c:	40020458 	.word	0x40020458
 8009c40:	40020470 	.word	0x40020470
 8009c44:	40020488 	.word	0x40020488
 8009c48:	400204a0 	.word	0x400204a0
 8009c4c:	400204b8 	.word	0x400204b8

08009c50 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f7ff fe18 	bl	80098b4 <I2C_TreatErrorCallback>
}
 8009c84:	bf00      	nop
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	603b      	str	r3, [r7, #0]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c9c:	e022      	b.n	8009ce4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca4:	d01e      	beq.n	8009ce4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ca6:	f7fa fec3 	bl	8004a30 <HAL_GetTick>
 8009caa:	4602      	mov	r2, r0
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d302      	bcc.n	8009cbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d113      	bne.n	8009ce4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc0:	f043 0220 	orr.w	r2, r3, #32
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2220      	movs	r2, #32
 8009ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e00f      	b.n	8009d04 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	699a      	ldr	r2, [r3, #24]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	4013      	ands	r3, r2
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	bf0c      	ite	eq
 8009cf4:	2301      	moveq	r3, #1
 8009cf6:	2300      	movne	r3, #0
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	79fb      	ldrb	r3, [r7, #7]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d0cd      	beq.n	8009c9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009d18:	e02c      	b.n	8009d74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	68b9      	ldr	r1, [r7, #8]
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f000 f870 	bl	8009e04 <I2C_IsAcknowledgeFailed>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e02a      	b.n	8009d84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d34:	d01e      	beq.n	8009d74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d36:	f7fa fe7b 	bl	8004a30 <HAL_GetTick>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d302      	bcc.n	8009d4c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d113      	bne.n	8009d74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d50:	f043 0220 	orr.w	r2, r3, #32
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2220      	movs	r2, #32
 8009d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e007      	b.n	8009d84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	f003 0302 	and.w	r3, r3, #2
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d1cb      	bne.n	8009d1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d98:	e028      	b.n	8009dec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	68b9      	ldr	r1, [r7, #8]
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f000 f830 	bl	8009e04 <I2C_IsAcknowledgeFailed>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e026      	b.n	8009dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dae:	f7fa fe3f 	bl	8004a30 <HAL_GetTick>
 8009db2:	4602      	mov	r2, r0
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d302      	bcc.n	8009dc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d113      	bne.n	8009dec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dc8:	f043 0220 	orr.w	r2, r3, #32
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2220      	movs	r2, #32
 8009dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	e007      	b.n	8009dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	f003 0320 	and.w	r3, r3, #32
 8009df6:	2b20      	cmp	r3, #32
 8009df8:	d1cf      	bne.n	8009d9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	f003 0310 	and.w	r3, r3, #16
 8009e1a:	2b10      	cmp	r3, #16
 8009e1c:	d151      	bne.n	8009ec2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e1e:	e022      	b.n	8009e66 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e26:	d01e      	beq.n	8009e66 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e28:	f7fa fe02 	bl	8004a30 <HAL_GetTick>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d302      	bcc.n	8009e3e <I2C_IsAcknowledgeFailed+0x3a>
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d113      	bne.n	8009e66 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e42:	f043 0220 	orr.w	r2, r3, #32
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2220      	movs	r2, #32
 8009e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	e02e      	b.n	8009ec4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	f003 0320 	and.w	r3, r3, #32
 8009e70:	2b20      	cmp	r3, #32
 8009e72:	d1d5      	bne.n	8009e20 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2210      	movs	r2, #16
 8009e7a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2220      	movs	r2, #32
 8009e82:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f7ff fd3c 	bl	8009902 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6859      	ldr	r1, [r3, #4]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	4b0d      	ldr	r3, [pc, #52]	; (8009ecc <I2C_IsAcknowledgeFailed+0xc8>)
 8009e96:	400b      	ands	r3, r1
 8009e98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e9e:	f043 0204 	orr.w	r2, r3, #4
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2220      	movs	r2, #32
 8009eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e000      	b.n	8009ec4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	fe00e800 	.word	0xfe00e800

08009ed0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	607b      	str	r3, [r7, #4]
 8009eda:	460b      	mov	r3, r1
 8009edc:	817b      	strh	r3, [r7, #10]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	685a      	ldr	r2, [r3, #4]
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	0d5b      	lsrs	r3, r3, #21
 8009eec:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009ef0:	4b0d      	ldr	r3, [pc, #52]	; (8009f28 <I2C_TransferConfig+0x58>)
 8009ef2:	430b      	orrs	r3, r1
 8009ef4:	43db      	mvns	r3, r3
 8009ef6:	ea02 0103 	and.w	r1, r2, r3
 8009efa:	897b      	ldrh	r3, [r7, #10]
 8009efc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009f00:	7a7b      	ldrb	r3, [r7, #9]
 8009f02:	041b      	lsls	r3, r3, #16
 8009f04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f08:	431a      	orrs	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	431a      	orrs	r2, r3
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	431a      	orrs	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	430a      	orrs	r2, r1
 8009f18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009f1a:	bf00      	nop
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	03ff63ff 	.word	0x03ff63ff

08009f2c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	460b      	mov	r3, r1
 8009f36:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f40:	4a2a      	ldr	r2, [pc, #168]	; (8009fec <I2C_Enable_IRQ+0xc0>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d004      	beq.n	8009f50 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009f4a:	4a29      	ldr	r2, [pc, #164]	; (8009ff0 <I2C_Enable_IRQ+0xc4>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d11d      	bne.n	8009f8c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009f50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	da03      	bge.n	8009f60 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009f5e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009f60:	887b      	ldrh	r3, [r7, #2]
 8009f62:	2b10      	cmp	r3, #16
 8009f64:	d103      	bne.n	8009f6e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009f6c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009f6e:	887b      	ldrh	r3, [r7, #2]
 8009f70:	2b20      	cmp	r3, #32
 8009f72:	d103      	bne.n	8009f7c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009f7a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009f7c:	887b      	ldrh	r3, [r7, #2]
 8009f7e:	2b40      	cmp	r3, #64	; 0x40
 8009f80:	d125      	bne.n	8009fce <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f88:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009f8a:	e020      	b.n	8009fce <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009f8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	da03      	bge.n	8009f9c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009f9a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009f9c:	887b      	ldrh	r3, [r7, #2]
 8009f9e:	f003 0301 	and.w	r3, r3, #1
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d003      	beq.n	8009fae <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8009fac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009fae:	887b      	ldrh	r3, [r7, #2]
 8009fb0:	f003 0302 	and.w	r3, r3, #2
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d003      	beq.n	8009fc0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8009fbe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009fc0:	887b      	ldrh	r3, [r7, #2]
 8009fc2:	2b20      	cmp	r3, #32
 8009fc4:	d103      	bne.n	8009fce <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f043 0320 	orr.w	r3, r3, #32
 8009fcc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	6819      	ldr	r1, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	430a      	orrs	r2, r1
 8009fdc:	601a      	str	r2, [r3, #0]
}
 8009fde:	bf00      	nop
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	080087af 	.word	0x080087af
 8009ff0:	08008995 	.word	0x08008995

08009ff4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a000:	2300      	movs	r3, #0
 800a002:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a004:	887b      	ldrh	r3, [r7, #2]
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00f      	beq.n	800a02e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a014:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a022:	2b28      	cmp	r3, #40	; 0x28
 800a024:	d003      	beq.n	800a02e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a02c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a02e:	887b      	ldrh	r3, [r7, #2]
 800a030:	f003 0302 	and.w	r3, r3, #2
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00f      	beq.n	800a058 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a03e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a046:	b2db      	uxtb	r3, r3
 800a048:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a04c:	2b28      	cmp	r3, #40	; 0x28
 800a04e:	d003      	beq.n	800a058 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a056:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a058:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	da03      	bge.n	800a068 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a066:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a068:	887b      	ldrh	r3, [r7, #2]
 800a06a:	2b10      	cmp	r3, #16
 800a06c:	d103      	bne.n	800a076 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a074:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a076:	887b      	ldrh	r3, [r7, #2]
 800a078:	2b20      	cmp	r3, #32
 800a07a:	d103      	bne.n	800a084 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f043 0320 	orr.w	r3, r3, #32
 800a082:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a084:	887b      	ldrh	r3, [r7, #2]
 800a086:	2b40      	cmp	r3, #64	; 0x40
 800a088:	d103      	bne.n	800a092 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a090:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	6819      	ldr	r1, [r3, #0]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	43da      	mvns	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	400a      	ands	r2, r1
 800a0a2:	601a      	str	r2, [r3, #0]
}
 800a0a4:	bf00      	nop
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	2b20      	cmp	r3, #32
 800a0c4:	d138      	bne.n	800a138 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d101      	bne.n	800a0d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	e032      	b.n	800a13a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2224      	movs	r2, #36	; 0x24
 800a0e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f022 0201 	bic.w	r2, r2, #1
 800a0f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a102:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6819      	ldr	r1, [r3, #0]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	430a      	orrs	r2, r1
 800a112:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f042 0201 	orr.w	r2, r2, #1
 800a122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2220      	movs	r2, #32
 800a128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	e000      	b.n	800a13a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a138:	2302      	movs	r3, #2
  }
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a146:	b480      	push	{r7}
 800a148:	b085      	sub	sp, #20
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b20      	cmp	r3, #32
 800a15a:	d139      	bne.n	800a1d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a162:	2b01      	cmp	r3, #1
 800a164:	d101      	bne.n	800a16a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a166:	2302      	movs	r3, #2
 800a168:	e033      	b.n	800a1d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2224      	movs	r2, #36	; 0x24
 800a176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f022 0201 	bic.w	r2, r2, #1
 800a188:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a198:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	021b      	lsls	r3, r3, #8
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f042 0201 	orr.w	r2, r2, #1
 800a1ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2220      	movs	r2, #32
 800a1c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	e000      	b.n	800a1d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a1d0:	2302      	movs	r3, #2
  }
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
	...

0800a1e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a1e8:	4b19      	ldr	r3, [pc, #100]	; (800a250 <HAL_PWREx_ConfigSupply+0x70>)
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	f003 0304 	and.w	r3, r3, #4
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d00a      	beq.n	800a20a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a1f4:	4b16      	ldr	r3, [pc, #88]	; (800a250 <HAL_PWREx_ConfigSupply+0x70>)
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	f003 0307 	and.w	r3, r3, #7
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d001      	beq.n	800a206 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e01f      	b.n	800a246 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a206:	2300      	movs	r3, #0
 800a208:	e01d      	b.n	800a246 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a20a:	4b11      	ldr	r3, [pc, #68]	; (800a250 <HAL_PWREx_ConfigSupply+0x70>)
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	f023 0207 	bic.w	r2, r3, #7
 800a212:	490f      	ldr	r1, [pc, #60]	; (800a250 <HAL_PWREx_ConfigSupply+0x70>)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4313      	orrs	r3, r2
 800a218:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a21a:	f7fa fc09 	bl	8004a30 <HAL_GetTick>
 800a21e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a220:	e009      	b.n	800a236 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a222:	f7fa fc05 	bl	8004a30 <HAL_GetTick>
 800a226:	4602      	mov	r2, r0
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a230:	d901      	bls.n	800a236 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e007      	b.n	800a246 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a236:	4b06      	ldr	r3, [pc, #24]	; (800a250 <HAL_PWREx_ConfigSupply+0x70>)
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a23e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a242:	d1ee      	bne.n	800a222 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	58024800 	.word	0x58024800

0800a254 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b08c      	sub	sp, #48	; 0x30
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e3ff      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 0301 	and.w	r3, r3, #1
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f000 8087 	beq.w	800a382 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a274:	4b99      	ldr	r3, [pc, #612]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a27c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a27e:	4b97      	ldr	r3, [pc, #604]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a282:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a286:	2b10      	cmp	r3, #16
 800a288:	d007      	beq.n	800a29a <HAL_RCC_OscConfig+0x46>
 800a28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28c:	2b18      	cmp	r3, #24
 800a28e:	d110      	bne.n	800a2b2 <HAL_RCC_OscConfig+0x5e>
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a292:	f003 0303 	and.w	r3, r3, #3
 800a296:	2b02      	cmp	r3, #2
 800a298:	d10b      	bne.n	800a2b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a29a:	4b90      	ldr	r3, [pc, #576]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d06c      	beq.n	800a380 <HAL_RCC_OscConfig+0x12c>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d168      	bne.n	800a380 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e3d9      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ba:	d106      	bne.n	800a2ca <HAL_RCC_OscConfig+0x76>
 800a2bc:	4b87      	ldr	r3, [pc, #540]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a86      	ldr	r2, [pc, #536]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a2c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2c6:	6013      	str	r3, [r2, #0]
 800a2c8:	e02e      	b.n	800a328 <HAL_RCC_OscConfig+0xd4>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10c      	bne.n	800a2ec <HAL_RCC_OscConfig+0x98>
 800a2d2:	4b82      	ldr	r3, [pc, #520]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a81      	ldr	r2, [pc, #516]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a2d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2dc:	6013      	str	r3, [r2, #0]
 800a2de:	4b7f      	ldr	r3, [pc, #508]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a7e      	ldr	r2, [pc, #504]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a2e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2e8:	6013      	str	r3, [r2, #0]
 800a2ea:	e01d      	b.n	800a328 <HAL_RCC_OscConfig+0xd4>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a2f4:	d10c      	bne.n	800a310 <HAL_RCC_OscConfig+0xbc>
 800a2f6:	4b79      	ldr	r3, [pc, #484]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a78      	ldr	r2, [pc, #480]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a2fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a300:	6013      	str	r3, [r2, #0]
 800a302:	4b76      	ldr	r3, [pc, #472]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a75      	ldr	r2, [pc, #468]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a30c:	6013      	str	r3, [r2, #0]
 800a30e:	e00b      	b.n	800a328 <HAL_RCC_OscConfig+0xd4>
 800a310:	4b72      	ldr	r3, [pc, #456]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a71      	ldr	r2, [pc, #452]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a31a:	6013      	str	r3, [r2, #0]
 800a31c:	4b6f      	ldr	r3, [pc, #444]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a6e      	ldr	r2, [pc, #440]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d013      	beq.n	800a358 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a330:	f7fa fb7e 	bl	8004a30 <HAL_GetTick>
 800a334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a336:	e008      	b.n	800a34a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a338:	f7fa fb7a 	bl	8004a30 <HAL_GetTick>
 800a33c:	4602      	mov	r2, r0
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	2b64      	cmp	r3, #100	; 0x64
 800a344:	d901      	bls.n	800a34a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a346:	2303      	movs	r3, #3
 800a348:	e38d      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a34a:	4b64      	ldr	r3, [pc, #400]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a352:	2b00      	cmp	r3, #0
 800a354:	d0f0      	beq.n	800a338 <HAL_RCC_OscConfig+0xe4>
 800a356:	e014      	b.n	800a382 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a358:	f7fa fb6a 	bl	8004a30 <HAL_GetTick>
 800a35c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a35e:	e008      	b.n	800a372 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a360:	f7fa fb66 	bl	8004a30 <HAL_GetTick>
 800a364:	4602      	mov	r2, r0
 800a366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	2b64      	cmp	r3, #100	; 0x64
 800a36c:	d901      	bls.n	800a372 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a36e:	2303      	movs	r3, #3
 800a370:	e379      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a372:	4b5a      	ldr	r3, [pc, #360]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1f0      	bne.n	800a360 <HAL_RCC_OscConfig+0x10c>
 800a37e:	e000      	b.n	800a382 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0302 	and.w	r3, r3, #2
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f000 80ae 	beq.w	800a4ec <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a390:	4b52      	ldr	r3, [pc, #328]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a398:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a39a:	4b50      	ldr	r3, [pc, #320]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a39e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d007      	beq.n	800a3b6 <HAL_RCC_OscConfig+0x162>
 800a3a6:	6a3b      	ldr	r3, [r7, #32]
 800a3a8:	2b18      	cmp	r3, #24
 800a3aa:	d13a      	bne.n	800a422 <HAL_RCC_OscConfig+0x1ce>
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	f003 0303 	and.w	r3, r3, #3
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d135      	bne.n	800a422 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3b6:	4b49      	ldr	r3, [pc, #292]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 0304 	and.w	r3, r3, #4
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d005      	beq.n	800a3ce <HAL_RCC_OscConfig+0x17a>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d101      	bne.n	800a3ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e34b      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3ce:	f7fa fb5f 	bl	8004a90 <HAL_GetREVID>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	f241 0203 	movw	r2, #4099	; 0x1003
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d817      	bhi.n	800a40c <HAL_RCC_OscConfig+0x1b8>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	2b40      	cmp	r3, #64	; 0x40
 800a3e2:	d108      	bne.n	800a3f6 <HAL_RCC_OscConfig+0x1a2>
 800a3e4:	4b3d      	ldr	r3, [pc, #244]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a3ec:	4a3b      	ldr	r2, [pc, #236]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a3ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3f2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3f4:	e07a      	b.n	800a4ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3f6:	4b39      	ldr	r3, [pc, #228]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	031b      	lsls	r3, r3, #12
 800a404:	4935      	ldr	r1, [pc, #212]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a406:	4313      	orrs	r3, r2
 800a408:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a40a:	e06f      	b.n	800a4ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a40c:	4b33      	ldr	r3, [pc, #204]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	061b      	lsls	r3, r3, #24
 800a41a:	4930      	ldr	r1, [pc, #192]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a41c:	4313      	orrs	r3, r2
 800a41e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a420:	e064      	b.n	800a4ec <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d045      	beq.n	800a4b6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a42a:	4b2c      	ldr	r3, [pc, #176]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f023 0219 	bic.w	r2, r3, #25
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	4929      	ldr	r1, [pc, #164]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a438:	4313      	orrs	r3, r2
 800a43a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a43c:	f7fa faf8 	bl	8004a30 <HAL_GetTick>
 800a440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a442:	e008      	b.n	800a456 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a444:	f7fa faf4 	bl	8004a30 <HAL_GetTick>
 800a448:	4602      	mov	r2, r0
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	1ad3      	subs	r3, r2, r3
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d901      	bls.n	800a456 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800a452:	2303      	movs	r3, #3
 800a454:	e307      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a456:	4b21      	ldr	r3, [pc, #132]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 0304 	and.w	r3, r3, #4
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d0f0      	beq.n	800a444 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a462:	f7fa fb15 	bl	8004a90 <HAL_GetREVID>
 800a466:	4603      	mov	r3, r0
 800a468:	f241 0203 	movw	r2, #4099	; 0x1003
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d817      	bhi.n	800a4a0 <HAL_RCC_OscConfig+0x24c>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	2b40      	cmp	r3, #64	; 0x40
 800a476:	d108      	bne.n	800a48a <HAL_RCC_OscConfig+0x236>
 800a478:	4b18      	ldr	r3, [pc, #96]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a480:	4a16      	ldr	r2, [pc, #88]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a486:	6053      	str	r3, [r2, #4]
 800a488:	e030      	b.n	800a4ec <HAL_RCC_OscConfig+0x298>
 800a48a:	4b14      	ldr	r3, [pc, #80]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	031b      	lsls	r3, r3, #12
 800a498:	4910      	ldr	r1, [pc, #64]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a49a:	4313      	orrs	r3, r2
 800a49c:	604b      	str	r3, [r1, #4]
 800a49e:	e025      	b.n	800a4ec <HAL_RCC_OscConfig+0x298>
 800a4a0:	4b0e      	ldr	r3, [pc, #56]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	061b      	lsls	r3, r3, #24
 800a4ae:	490b      	ldr	r1, [pc, #44]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	604b      	str	r3, [r1, #4]
 800a4b4:	e01a      	b.n	800a4ec <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a4b6:	4b09      	ldr	r3, [pc, #36]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a08      	ldr	r2, [pc, #32]	; (800a4dc <HAL_RCC_OscConfig+0x288>)
 800a4bc:	f023 0301 	bic.w	r3, r3, #1
 800a4c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4c2:	f7fa fab5 	bl	8004a30 <HAL_GetTick>
 800a4c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a4c8:	e00a      	b.n	800a4e0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a4ca:	f7fa fab1 	bl	8004a30 <HAL_GetTick>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d903      	bls.n	800a4e0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e2c4      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
 800a4dc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a4e0:	4ba4      	ldr	r3, [pc, #656]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 0304 	and.w	r3, r3, #4
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1ee      	bne.n	800a4ca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 0310 	and.w	r3, r3, #16
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 80a9 	beq.w	800a64c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4fa:	4b9e      	ldr	r3, [pc, #632]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a502:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a504:	4b9b      	ldr	r3, [pc, #620]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a508:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	2b08      	cmp	r3, #8
 800a50e:	d007      	beq.n	800a520 <HAL_RCC_OscConfig+0x2cc>
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	2b18      	cmp	r3, #24
 800a514:	d13a      	bne.n	800a58c <HAL_RCC_OscConfig+0x338>
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	f003 0303 	and.w	r3, r3, #3
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d135      	bne.n	800a58c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a520:	4b94      	ldr	r3, [pc, #592]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d005      	beq.n	800a538 <HAL_RCC_OscConfig+0x2e4>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	69db      	ldr	r3, [r3, #28]
 800a530:	2b80      	cmp	r3, #128	; 0x80
 800a532:	d001      	beq.n	800a538 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e296      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a538:	f7fa faaa 	bl	8004a90 <HAL_GetREVID>
 800a53c:	4603      	mov	r3, r0
 800a53e:	f241 0203 	movw	r2, #4099	; 0x1003
 800a542:	4293      	cmp	r3, r2
 800a544:	d817      	bhi.n	800a576 <HAL_RCC_OscConfig+0x322>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a1b      	ldr	r3, [r3, #32]
 800a54a:	2b20      	cmp	r3, #32
 800a54c:	d108      	bne.n	800a560 <HAL_RCC_OscConfig+0x30c>
 800a54e:	4b89      	ldr	r3, [pc, #548]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a556:	4a87      	ldr	r2, [pc, #540]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a55c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a55e:	e075      	b.n	800a64c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a560:	4b84      	ldr	r3, [pc, #528]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a1b      	ldr	r3, [r3, #32]
 800a56c:	069b      	lsls	r3, r3, #26
 800a56e:	4981      	ldr	r1, [pc, #516]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a570:	4313      	orrs	r3, r2
 800a572:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a574:	e06a      	b.n	800a64c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a576:	4b7f      	ldr	r3, [pc, #508]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a1b      	ldr	r3, [r3, #32]
 800a582:	061b      	lsls	r3, r3, #24
 800a584:	497b      	ldr	r1, [pc, #492]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a586:	4313      	orrs	r3, r2
 800a588:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a58a:	e05f      	b.n	800a64c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	69db      	ldr	r3, [r3, #28]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d042      	beq.n	800a61a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a594:	4b77      	ldr	r3, [pc, #476]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a76      	ldr	r2, [pc, #472]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a59a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a59e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5a0:	f7fa fa46 	bl	8004a30 <HAL_GetTick>
 800a5a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a5a6:	e008      	b.n	800a5ba <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a5a8:	f7fa fa42 	bl	8004a30 <HAL_GetTick>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d901      	bls.n	800a5ba <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e255      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a5ba:	4b6e      	ldr	r3, [pc, #440]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d0f0      	beq.n	800a5a8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a5c6:	f7fa fa63 	bl	8004a90 <HAL_GetREVID>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	f241 0203 	movw	r2, #4099	; 0x1003
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d817      	bhi.n	800a604 <HAL_RCC_OscConfig+0x3b0>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a1b      	ldr	r3, [r3, #32]
 800a5d8:	2b20      	cmp	r3, #32
 800a5da:	d108      	bne.n	800a5ee <HAL_RCC_OscConfig+0x39a>
 800a5dc:	4b65      	ldr	r3, [pc, #404]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a5e4:	4a63      	ldr	r2, [pc, #396]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a5e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5ea:	6053      	str	r3, [r2, #4]
 800a5ec:	e02e      	b.n	800a64c <HAL_RCC_OscConfig+0x3f8>
 800a5ee:	4b61      	ldr	r3, [pc, #388]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	069b      	lsls	r3, r3, #26
 800a5fc:	495d      	ldr	r1, [pc, #372]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a5fe:	4313      	orrs	r3, r2
 800a600:	604b      	str	r3, [r1, #4]
 800a602:	e023      	b.n	800a64c <HAL_RCC_OscConfig+0x3f8>
 800a604:	4b5b      	ldr	r3, [pc, #364]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a1b      	ldr	r3, [r3, #32]
 800a610:	061b      	lsls	r3, r3, #24
 800a612:	4958      	ldr	r1, [pc, #352]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a614:	4313      	orrs	r3, r2
 800a616:	60cb      	str	r3, [r1, #12]
 800a618:	e018      	b.n	800a64c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a61a:	4b56      	ldr	r3, [pc, #344]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a55      	ldr	r2, [pc, #340]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a620:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a626:	f7fa fa03 	bl	8004a30 <HAL_GetTick>
 800a62a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a62c:	e008      	b.n	800a640 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a62e:	f7fa f9ff 	bl	8004a30 <HAL_GetTick>
 800a632:	4602      	mov	r2, r0
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	1ad3      	subs	r3, r2, r3
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d901      	bls.n	800a640 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e212      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a640:	4b4c      	ldr	r3, [pc, #304]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1f0      	bne.n	800a62e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 0308 	and.w	r3, r3, #8
 800a654:	2b00      	cmp	r3, #0
 800a656:	d036      	beq.n	800a6c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	695b      	ldr	r3, [r3, #20]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d019      	beq.n	800a694 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a660:	4b44      	ldr	r3, [pc, #272]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a664:	4a43      	ldr	r2, [pc, #268]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a666:	f043 0301 	orr.w	r3, r3, #1
 800a66a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a66c:	f7fa f9e0 	bl	8004a30 <HAL_GetTick>
 800a670:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a672:	e008      	b.n	800a686 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a674:	f7fa f9dc 	bl	8004a30 <HAL_GetTick>
 800a678:	4602      	mov	r2, r0
 800a67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67c:	1ad3      	subs	r3, r2, r3
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d901      	bls.n	800a686 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e1ef      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a686:	4b3b      	ldr	r3, [pc, #236]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a68a:	f003 0302 	and.w	r3, r3, #2
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d0f0      	beq.n	800a674 <HAL_RCC_OscConfig+0x420>
 800a692:	e018      	b.n	800a6c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a694:	4b37      	ldr	r3, [pc, #220]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a698:	4a36      	ldr	r2, [pc, #216]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a69a:	f023 0301 	bic.w	r3, r3, #1
 800a69e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6a0:	f7fa f9c6 	bl	8004a30 <HAL_GetTick>
 800a6a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a6a6:	e008      	b.n	800a6ba <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a6a8:	f7fa f9c2 	bl	8004a30 <HAL_GetTick>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b0:	1ad3      	subs	r3, r2, r3
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d901      	bls.n	800a6ba <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e1d5      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a6ba:	4b2e      	ldr	r3, [pc, #184]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a6bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6be:	f003 0302 	and.w	r3, r3, #2
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1f0      	bne.n	800a6a8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f003 0320 	and.w	r3, r3, #32
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d036      	beq.n	800a740 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d019      	beq.n	800a70e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a6da:	4b26      	ldr	r3, [pc, #152]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a25      	ldr	r2, [pc, #148]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a6e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a6e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a6e6:	f7fa f9a3 	bl	8004a30 <HAL_GetTick>
 800a6ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a6ec:	e008      	b.n	800a700 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a6ee:	f7fa f99f 	bl	8004a30 <HAL_GetTick>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d901      	bls.n	800a700 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e1b2      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a700:	4b1c      	ldr	r3, [pc, #112]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d0f0      	beq.n	800a6ee <HAL_RCC_OscConfig+0x49a>
 800a70c:	e018      	b.n	800a740 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a70e:	4b19      	ldr	r3, [pc, #100]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a18      	ldr	r2, [pc, #96]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a718:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a71a:	f7fa f989 	bl	8004a30 <HAL_GetTick>
 800a71e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a720:	e008      	b.n	800a734 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a722:	f7fa f985 	bl	8004a30 <HAL_GetTick>
 800a726:	4602      	mov	r2, r0
 800a728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72a:	1ad3      	subs	r3, r2, r3
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d901      	bls.n	800a734 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800a730:	2303      	movs	r3, #3
 800a732:	e198      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a734:	4b0f      	ldr	r3, [pc, #60]	; (800a774 <HAL_RCC_OscConfig+0x520>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1f0      	bne.n	800a722 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 0304 	and.w	r3, r3, #4
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f000 8085 	beq.w	800a858 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a74e:	4b0a      	ldr	r3, [pc, #40]	; (800a778 <HAL_RCC_OscConfig+0x524>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a09      	ldr	r2, [pc, #36]	; (800a778 <HAL_RCC_OscConfig+0x524>)
 800a754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a758:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a75a:	f7fa f969 	bl	8004a30 <HAL_GetTick>
 800a75e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a760:	e00c      	b.n	800a77c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a762:	f7fa f965 	bl	8004a30 <HAL_GetTick>
 800a766:	4602      	mov	r2, r0
 800a768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	2b64      	cmp	r3, #100	; 0x64
 800a76e:	d905      	bls.n	800a77c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	e178      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
 800a774:	58024400 	.word	0x58024400
 800a778:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a77c:	4b96      	ldr	r3, [pc, #600]	; (800a9d8 <HAL_RCC_OscConfig+0x784>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a784:	2b00      	cmp	r3, #0
 800a786:	d0ec      	beq.n	800a762 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d106      	bne.n	800a79e <HAL_RCC_OscConfig+0x54a>
 800a790:	4b92      	ldr	r3, [pc, #584]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a794:	4a91      	ldr	r2, [pc, #580]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a796:	f043 0301 	orr.w	r3, r3, #1
 800a79a:	6713      	str	r3, [r2, #112]	; 0x70
 800a79c:	e02d      	b.n	800a7fa <HAL_RCC_OscConfig+0x5a6>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d10c      	bne.n	800a7c0 <HAL_RCC_OscConfig+0x56c>
 800a7a6:	4b8d      	ldr	r3, [pc, #564]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a7a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7aa:	4a8c      	ldr	r2, [pc, #560]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a7ac:	f023 0301 	bic.w	r3, r3, #1
 800a7b0:	6713      	str	r3, [r2, #112]	; 0x70
 800a7b2:	4b8a      	ldr	r3, [pc, #552]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a7b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7b6:	4a89      	ldr	r2, [pc, #548]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a7b8:	f023 0304 	bic.w	r3, r3, #4
 800a7bc:	6713      	str	r3, [r2, #112]	; 0x70
 800a7be:	e01c      	b.n	800a7fa <HAL_RCC_OscConfig+0x5a6>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	2b05      	cmp	r3, #5
 800a7c6:	d10c      	bne.n	800a7e2 <HAL_RCC_OscConfig+0x58e>
 800a7c8:	4b84      	ldr	r3, [pc, #528]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a7ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7cc:	4a83      	ldr	r2, [pc, #524]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a7ce:	f043 0304 	orr.w	r3, r3, #4
 800a7d2:	6713      	str	r3, [r2, #112]	; 0x70
 800a7d4:	4b81      	ldr	r3, [pc, #516]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a7d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7d8:	4a80      	ldr	r2, [pc, #512]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a7da:	f043 0301 	orr.w	r3, r3, #1
 800a7de:	6713      	str	r3, [r2, #112]	; 0x70
 800a7e0:	e00b      	b.n	800a7fa <HAL_RCC_OscConfig+0x5a6>
 800a7e2:	4b7e      	ldr	r3, [pc, #504]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a7e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7e6:	4a7d      	ldr	r2, [pc, #500]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a7e8:	f023 0301 	bic.w	r3, r3, #1
 800a7ec:	6713      	str	r3, [r2, #112]	; 0x70
 800a7ee:	4b7b      	ldr	r3, [pc, #492]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a7f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f2:	4a7a      	ldr	r2, [pc, #488]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a7f4:	f023 0304 	bic.w	r3, r3, #4
 800a7f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d015      	beq.n	800a82e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a802:	f7fa f915 	bl	8004a30 <HAL_GetTick>
 800a806:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a808:	e00a      	b.n	800a820 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a80a:	f7fa f911 	bl	8004a30 <HAL_GetTick>
 800a80e:	4602      	mov	r2, r0
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	f241 3288 	movw	r2, #5000	; 0x1388
 800a818:	4293      	cmp	r3, r2
 800a81a:	d901      	bls.n	800a820 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800a81c:	2303      	movs	r3, #3
 800a81e:	e122      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a820:	4b6e      	ldr	r3, [pc, #440]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a824:	f003 0302 	and.w	r3, r3, #2
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d0ee      	beq.n	800a80a <HAL_RCC_OscConfig+0x5b6>
 800a82c:	e014      	b.n	800a858 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a82e:	f7fa f8ff 	bl	8004a30 <HAL_GetTick>
 800a832:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a834:	e00a      	b.n	800a84c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a836:	f7fa f8fb 	bl	8004a30 <HAL_GetTick>
 800a83a:	4602      	mov	r2, r0
 800a83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	f241 3288 	movw	r2, #5000	; 0x1388
 800a844:	4293      	cmp	r3, r2
 800a846:	d901      	bls.n	800a84c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800a848:	2303      	movs	r3, #3
 800a84a:	e10c      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a84c:	4b63      	ldr	r3, [pc, #396]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a84e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a850:	f003 0302 	and.w	r3, r3, #2
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1ee      	bne.n	800a836 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f000 8101 	beq.w	800aa64 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a862:	4b5e      	ldr	r3, [pc, #376]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a86a:	2b18      	cmp	r3, #24
 800a86c:	f000 80bc 	beq.w	800a9e8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a874:	2b02      	cmp	r3, #2
 800a876:	f040 8095 	bne.w	800a9a4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a87a:	4b58      	ldr	r3, [pc, #352]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a57      	ldr	r2, [pc, #348]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a886:	f7fa f8d3 	bl	8004a30 <HAL_GetTick>
 800a88a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a88c:	e008      	b.n	800a8a0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a88e:	f7fa f8cf 	bl	8004a30 <HAL_GetTick>
 800a892:	4602      	mov	r2, r0
 800a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d901      	bls.n	800a8a0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800a89c:	2303      	movs	r3, #3
 800a89e:	e0e2      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a8a0:	4b4e      	ldr	r3, [pc, #312]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1f0      	bne.n	800a88e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a8ac:	4b4b      	ldr	r3, [pc, #300]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a8ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8b0:	4b4b      	ldr	r3, [pc, #300]	; (800a9e0 <HAL_RCC_OscConfig+0x78c>)
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a8bc:	0112      	lsls	r2, r2, #4
 800a8be:	430a      	orrs	r2, r1
 800a8c0:	4946      	ldr	r1, [pc, #280]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	628b      	str	r3, [r1, #40]	; 0x28
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	025b      	lsls	r3, r3, #9
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	431a      	orrs	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	041b      	lsls	r3, r3, #16
 800a8e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a8e8:	431a      	orrs	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	061b      	lsls	r3, r3, #24
 800a8f2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a8f6:	4939      	ldr	r1, [pc, #228]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a8fc:	4b37      	ldr	r3, [pc, #220]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a900:	4a36      	ldr	r2, [pc, #216]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a902:	f023 0301 	bic.w	r3, r3, #1
 800a906:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a908:	4b34      	ldr	r3, [pc, #208]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a90a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a90c:	4b35      	ldr	r3, [pc, #212]	; (800a9e4 <HAL_RCC_OscConfig+0x790>)
 800a90e:	4013      	ands	r3, r2
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a914:	00d2      	lsls	r2, r2, #3
 800a916:	4931      	ldr	r1, [pc, #196]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a918:	4313      	orrs	r3, r2
 800a91a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a91c:	4b2f      	ldr	r3, [pc, #188]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a920:	f023 020c 	bic.w	r2, r3, #12
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a928:	492c      	ldr	r1, [pc, #176]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a92e:	4b2b      	ldr	r3, [pc, #172]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a932:	f023 0202 	bic.w	r2, r3, #2
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a93a:	4928      	ldr	r1, [pc, #160]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a93c:	4313      	orrs	r3, r2
 800a93e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a940:	4b26      	ldr	r3, [pc, #152]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a944:	4a25      	ldr	r2, [pc, #148]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a94a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a94c:	4b23      	ldr	r3, [pc, #140]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a950:	4a22      	ldr	r2, [pc, #136]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a956:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a958:	4b20      	ldr	r3, [pc, #128]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95c:	4a1f      	ldr	r2, [pc, #124]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a95e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a962:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a964:	4b1d      	ldr	r3, [pc, #116]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a968:	4a1c      	ldr	r2, [pc, #112]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a96a:	f043 0301 	orr.w	r3, r3, #1
 800a96e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a970:	4b1a      	ldr	r3, [pc, #104]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a19      	ldr	r2, [pc, #100]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a97a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a97c:	f7fa f858 	bl	8004a30 <HAL_GetTick>
 800a980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a982:	e008      	b.n	800a996 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a984:	f7fa f854 	bl	8004a30 <HAL_GetTick>
 800a988:	4602      	mov	r2, r0
 800a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d901      	bls.n	800a996 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800a992:	2303      	movs	r3, #3
 800a994:	e067      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a996:	4b11      	ldr	r3, [pc, #68]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d0f0      	beq.n	800a984 <HAL_RCC_OscConfig+0x730>
 800a9a2:	e05f      	b.n	800aa64 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9a4:	4b0d      	ldr	r3, [pc, #52]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a0c      	ldr	r2, [pc, #48]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a9aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a9ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9b0:	f7fa f83e 	bl	8004a30 <HAL_GetTick>
 800a9b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a9b6:	e008      	b.n	800a9ca <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a9b8:	f7fa f83a 	bl	8004a30 <HAL_GetTick>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d901      	bls.n	800a9ca <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e04d      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a9ca:	4b04      	ldr	r3, [pc, #16]	; (800a9dc <HAL_RCC_OscConfig+0x788>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1f0      	bne.n	800a9b8 <HAL_RCC_OscConfig+0x764>
 800a9d6:	e045      	b.n	800aa64 <HAL_RCC_OscConfig+0x810>
 800a9d8:	58024800 	.word	0x58024800
 800a9dc:	58024400 	.word	0x58024400
 800a9e0:	fffffc0c 	.word	0xfffffc0c
 800a9e4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a9e8:	4b21      	ldr	r3, [pc, #132]	; (800aa70 <HAL_RCC_OscConfig+0x81c>)
 800a9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a9ee:	4b20      	ldr	r3, [pc, #128]	; (800aa70 <HAL_RCC_OscConfig+0x81c>)
 800a9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d031      	beq.n	800aa60 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	f003 0203 	and.w	r2, r3, #3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d12a      	bne.n	800aa60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	091b      	lsrs	r3, r3, #4
 800aa0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d122      	bne.n	800aa60 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa24:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d11a      	bne.n	800aa60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	0a5b      	lsrs	r3, r3, #9
 800aa2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa36:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d111      	bne.n	800aa60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	0c1b      	lsrs	r3, r3, #16
 800aa40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa48:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d108      	bne.n	800aa60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	0e1b      	lsrs	r3, r3, #24
 800aa52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d001      	beq.n	800aa64 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	e000      	b.n	800aa66 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3730      	adds	r7, #48	; 0x30
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	58024400 	.word	0x58024400

0800aa74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b086      	sub	sp, #24
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d101      	bne.n	800aa88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e19c      	b.n	800adc2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aa88:	4b8a      	ldr	r3, [pc, #552]	; (800acb4 <HAL_RCC_ClockConfig+0x240>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 030f 	and.w	r3, r3, #15
 800aa90:	683a      	ldr	r2, [r7, #0]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d910      	bls.n	800aab8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa96:	4b87      	ldr	r3, [pc, #540]	; (800acb4 <HAL_RCC_ClockConfig+0x240>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f023 020f 	bic.w	r2, r3, #15
 800aa9e:	4985      	ldr	r1, [pc, #532]	; (800acb4 <HAL_RCC_ClockConfig+0x240>)
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aaa6:	4b83      	ldr	r3, [pc, #524]	; (800acb4 <HAL_RCC_ClockConfig+0x240>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 030f 	and.w	r3, r3, #15
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d001      	beq.n	800aab8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	e184      	b.n	800adc2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0304 	and.w	r3, r3, #4
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d010      	beq.n	800aae6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	691a      	ldr	r2, [r3, #16]
 800aac8:	4b7b      	ldr	r3, [pc, #492]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800aaca:	699b      	ldr	r3, [r3, #24]
 800aacc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d908      	bls.n	800aae6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aad4:	4b78      	ldr	r3, [pc, #480]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	691b      	ldr	r3, [r3, #16]
 800aae0:	4975      	ldr	r1, [pc, #468]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800aae2:	4313      	orrs	r3, r2
 800aae4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 0308 	and.w	r3, r3, #8
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d010      	beq.n	800ab14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	695a      	ldr	r2, [r3, #20]
 800aaf6:	4b70      	ldr	r3, [pc, #448]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800aaf8:	69db      	ldr	r3, [r3, #28]
 800aafa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d908      	bls.n	800ab14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ab02:	4b6d      	ldr	r3, [pc, #436]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ab04:	69db      	ldr	r3, [r3, #28]
 800ab06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	496a      	ldr	r1, [pc, #424]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ab10:	4313      	orrs	r3, r2
 800ab12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 0310 	and.w	r3, r3, #16
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d010      	beq.n	800ab42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	699a      	ldr	r2, [r3, #24]
 800ab24:	4b64      	ldr	r3, [pc, #400]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ab26:	69db      	ldr	r3, [r3, #28]
 800ab28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d908      	bls.n	800ab42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab30:	4b61      	ldr	r3, [pc, #388]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ab32:	69db      	ldr	r3, [r3, #28]
 800ab34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	699b      	ldr	r3, [r3, #24]
 800ab3c:	495e      	ldr	r1, [pc, #376]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f003 0320 	and.w	r3, r3, #32
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d010      	beq.n	800ab70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	69da      	ldr	r2, [r3, #28]
 800ab52:	4b59      	ldr	r3, [pc, #356]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d908      	bls.n	800ab70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ab5e:	4b56      	ldr	r3, [pc, #344]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ab60:	6a1b      	ldr	r3, [r3, #32]
 800ab62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	69db      	ldr	r3, [r3, #28]
 800ab6a:	4953      	ldr	r1, [pc, #332]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 0302 	and.w	r3, r3, #2
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d010      	beq.n	800ab9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	68da      	ldr	r2, [r3, #12]
 800ab80:	4b4d      	ldr	r3, [pc, #308]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	f003 030f 	and.w	r3, r3, #15
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d908      	bls.n	800ab9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab8c:	4b4a      	ldr	r3, [pc, #296]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ab8e:	699b      	ldr	r3, [r3, #24]
 800ab90:	f023 020f 	bic.w	r2, r3, #15
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	4947      	ldr	r1, [pc, #284]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 0301 	and.w	r3, r3, #1
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d055      	beq.n	800ac56 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800abaa:	4b43      	ldr	r3, [pc, #268]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	4940      	ldr	r1, [pc, #256]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800abb8:	4313      	orrs	r3, r2
 800abba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d107      	bne.n	800abd4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800abc4:	4b3c      	ldr	r3, [pc, #240]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d121      	bne.n	800ac14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	e0f6      	b.n	800adc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	2b03      	cmp	r3, #3
 800abda:	d107      	bne.n	800abec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800abdc:	4b36      	ldr	r3, [pc, #216]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d115      	bne.n	800ac14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	e0ea      	b.n	800adc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d107      	bne.n	800ac04 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800abf4:	4b30      	ldr	r3, [pc, #192]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d109      	bne.n	800ac14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ac00:	2301      	movs	r3, #1
 800ac02:	e0de      	b.n	800adc2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac04:	4b2c      	ldr	r3, [pc, #176]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 0304 	and.w	r3, r3, #4
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d101      	bne.n	800ac14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e0d6      	b.n	800adc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ac14:	4b28      	ldr	r3, [pc, #160]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	f023 0207 	bic.w	r2, r3, #7
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	4925      	ldr	r1, [pc, #148]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ac22:	4313      	orrs	r3, r2
 800ac24:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac26:	f7f9 ff03 	bl	8004a30 <HAL_GetTick>
 800ac2a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac2c:	e00a      	b.n	800ac44 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac2e:	f7f9 feff 	bl	8004a30 <HAL_GetTick>
 800ac32:	4602      	mov	r2, r0
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d901      	bls.n	800ac44 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800ac40:	2303      	movs	r3, #3
 800ac42:	e0be      	b.n	800adc2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac44:	4b1c      	ldr	r3, [pc, #112]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	00db      	lsls	r3, r3, #3
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d1eb      	bne.n	800ac2e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 0302 	and.w	r3, r3, #2
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d010      	beq.n	800ac84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	68da      	ldr	r2, [r3, #12]
 800ac66:	4b14      	ldr	r3, [pc, #80]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	f003 030f 	and.w	r3, r3, #15
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d208      	bcs.n	800ac84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac72:	4b11      	ldr	r3, [pc, #68]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ac74:	699b      	ldr	r3, [r3, #24]
 800ac76:	f023 020f 	bic.w	r2, r3, #15
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	490e      	ldr	r1, [pc, #56]	; (800acb8 <HAL_RCC_ClockConfig+0x244>)
 800ac80:	4313      	orrs	r3, r2
 800ac82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ac84:	4b0b      	ldr	r3, [pc, #44]	; (800acb4 <HAL_RCC_ClockConfig+0x240>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f003 030f 	and.w	r3, r3, #15
 800ac8c:	683a      	ldr	r2, [r7, #0]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d214      	bcs.n	800acbc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac92:	4b08      	ldr	r3, [pc, #32]	; (800acb4 <HAL_RCC_ClockConfig+0x240>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f023 020f 	bic.w	r2, r3, #15
 800ac9a:	4906      	ldr	r1, [pc, #24]	; (800acb4 <HAL_RCC_ClockConfig+0x240>)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aca2:	4b04      	ldr	r3, [pc, #16]	; (800acb4 <HAL_RCC_ClockConfig+0x240>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 030f 	and.w	r3, r3, #15
 800acaa:	683a      	ldr	r2, [r7, #0]
 800acac:	429a      	cmp	r2, r3
 800acae:	d005      	beq.n	800acbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800acb0:	2301      	movs	r3, #1
 800acb2:	e086      	b.n	800adc2 <HAL_RCC_ClockConfig+0x34e>
 800acb4:	52002000 	.word	0x52002000
 800acb8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f003 0304 	and.w	r3, r3, #4
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d010      	beq.n	800acea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	691a      	ldr	r2, [r3, #16]
 800accc:	4b3f      	ldr	r3, [pc, #252]	; (800adcc <HAL_RCC_ClockConfig+0x358>)
 800acce:	699b      	ldr	r3, [r3, #24]
 800acd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d208      	bcs.n	800acea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800acd8:	4b3c      	ldr	r3, [pc, #240]	; (800adcc <HAL_RCC_ClockConfig+0x358>)
 800acda:	699b      	ldr	r3, [r3, #24]
 800acdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	4939      	ldr	r1, [pc, #228]	; (800adcc <HAL_RCC_ClockConfig+0x358>)
 800ace6:	4313      	orrs	r3, r2
 800ace8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 0308 	and.w	r3, r3, #8
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d010      	beq.n	800ad18 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	695a      	ldr	r2, [r3, #20]
 800acfa:	4b34      	ldr	r3, [pc, #208]	; (800adcc <HAL_RCC_ClockConfig+0x358>)
 800acfc:	69db      	ldr	r3, [r3, #28]
 800acfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d208      	bcs.n	800ad18 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ad06:	4b31      	ldr	r3, [pc, #196]	; (800adcc <HAL_RCC_ClockConfig+0x358>)
 800ad08:	69db      	ldr	r3, [r3, #28]
 800ad0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	695b      	ldr	r3, [r3, #20]
 800ad12:	492e      	ldr	r1, [pc, #184]	; (800adcc <HAL_RCC_ClockConfig+0x358>)
 800ad14:	4313      	orrs	r3, r2
 800ad16:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0310 	and.w	r3, r3, #16
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d010      	beq.n	800ad46 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	699a      	ldr	r2, [r3, #24]
 800ad28:	4b28      	ldr	r3, [pc, #160]	; (800adcc <HAL_RCC_ClockConfig+0x358>)
 800ad2a:	69db      	ldr	r3, [r3, #28]
 800ad2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d208      	bcs.n	800ad46 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ad34:	4b25      	ldr	r3, [pc, #148]	; (800adcc <HAL_RCC_ClockConfig+0x358>)
 800ad36:	69db      	ldr	r3, [r3, #28]
 800ad38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	699b      	ldr	r3, [r3, #24]
 800ad40:	4922      	ldr	r1, [pc, #136]	; (800adcc <HAL_RCC_ClockConfig+0x358>)
 800ad42:	4313      	orrs	r3, r2
 800ad44:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f003 0320 	and.w	r3, r3, #32
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d010      	beq.n	800ad74 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	69da      	ldr	r2, [r3, #28]
 800ad56:	4b1d      	ldr	r3, [pc, #116]	; (800adcc <HAL_RCC_ClockConfig+0x358>)
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d208      	bcs.n	800ad74 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ad62:	4b1a      	ldr	r3, [pc, #104]	; (800adcc <HAL_RCC_ClockConfig+0x358>)
 800ad64:	6a1b      	ldr	r3, [r3, #32]
 800ad66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	69db      	ldr	r3, [r3, #28]
 800ad6e:	4917      	ldr	r1, [pc, #92]	; (800adcc <HAL_RCC_ClockConfig+0x358>)
 800ad70:	4313      	orrs	r3, r2
 800ad72:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ad74:	f000 f834 	bl	800ade0 <HAL_RCC_GetSysClockFreq>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	4b14      	ldr	r3, [pc, #80]	; (800adcc <HAL_RCC_ClockConfig+0x358>)
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	0a1b      	lsrs	r3, r3, #8
 800ad80:	f003 030f 	and.w	r3, r3, #15
 800ad84:	4912      	ldr	r1, [pc, #72]	; (800add0 <HAL_RCC_ClockConfig+0x35c>)
 800ad86:	5ccb      	ldrb	r3, [r1, r3]
 800ad88:	f003 031f 	and.w	r3, r3, #31
 800ad8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ad92:	4b0e      	ldr	r3, [pc, #56]	; (800adcc <HAL_RCC_ClockConfig+0x358>)
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	f003 030f 	and.w	r3, r3, #15
 800ad9a:	4a0d      	ldr	r2, [pc, #52]	; (800add0 <HAL_RCC_ClockConfig+0x35c>)
 800ad9c:	5cd3      	ldrb	r3, [r2, r3]
 800ad9e:	f003 031f 	and.w	r3, r3, #31
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	fa22 f303 	lsr.w	r3, r2, r3
 800ada8:	4a0a      	ldr	r2, [pc, #40]	; (800add4 <HAL_RCC_ClockConfig+0x360>)
 800adaa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800adac:	4a0a      	ldr	r2, [pc, #40]	; (800add8 <HAL_RCC_ClockConfig+0x364>)
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800adb2:	4b0a      	ldr	r3, [pc, #40]	; (800addc <HAL_RCC_ClockConfig+0x368>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7f9 fdf0 	bl	800499c <HAL_InitTick>
 800adbc:	4603      	mov	r3, r0
 800adbe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800adc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3718      	adds	r7, #24
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	58024400 	.word	0x58024400
 800add0:	0801377c 	.word	0x0801377c
 800add4:	2400001c 	.word	0x2400001c
 800add8:	24000018 	.word	0x24000018
 800addc:	24000020 	.word	0x24000020

0800ade0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b089      	sub	sp, #36	; 0x24
 800ade4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ade6:	4bb3      	ldr	r3, [pc, #716]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adee:	2b18      	cmp	r3, #24
 800adf0:	f200 8155 	bhi.w	800b09e <HAL_RCC_GetSysClockFreq+0x2be>
 800adf4:	a201      	add	r2, pc, #4	; (adr r2, 800adfc <HAL_RCC_GetSysClockFreq+0x1c>)
 800adf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfa:	bf00      	nop
 800adfc:	0800ae61 	.word	0x0800ae61
 800ae00:	0800b09f 	.word	0x0800b09f
 800ae04:	0800b09f 	.word	0x0800b09f
 800ae08:	0800b09f 	.word	0x0800b09f
 800ae0c:	0800b09f 	.word	0x0800b09f
 800ae10:	0800b09f 	.word	0x0800b09f
 800ae14:	0800b09f 	.word	0x0800b09f
 800ae18:	0800b09f 	.word	0x0800b09f
 800ae1c:	0800ae87 	.word	0x0800ae87
 800ae20:	0800b09f 	.word	0x0800b09f
 800ae24:	0800b09f 	.word	0x0800b09f
 800ae28:	0800b09f 	.word	0x0800b09f
 800ae2c:	0800b09f 	.word	0x0800b09f
 800ae30:	0800b09f 	.word	0x0800b09f
 800ae34:	0800b09f 	.word	0x0800b09f
 800ae38:	0800b09f 	.word	0x0800b09f
 800ae3c:	0800ae8d 	.word	0x0800ae8d
 800ae40:	0800b09f 	.word	0x0800b09f
 800ae44:	0800b09f 	.word	0x0800b09f
 800ae48:	0800b09f 	.word	0x0800b09f
 800ae4c:	0800b09f 	.word	0x0800b09f
 800ae50:	0800b09f 	.word	0x0800b09f
 800ae54:	0800b09f 	.word	0x0800b09f
 800ae58:	0800b09f 	.word	0x0800b09f
 800ae5c:	0800ae93 	.word	0x0800ae93
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae60:	4b94      	ldr	r3, [pc, #592]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 0320 	and.w	r3, r3, #32
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d009      	beq.n	800ae80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae6c:	4b91      	ldr	r3, [pc, #580]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	08db      	lsrs	r3, r3, #3
 800ae72:	f003 0303 	and.w	r3, r3, #3
 800ae76:	4a90      	ldr	r2, [pc, #576]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ae78:	fa22 f303 	lsr.w	r3, r2, r3
 800ae7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800ae7e:	e111      	b.n	800b0a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ae80:	4b8d      	ldr	r3, [pc, #564]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ae82:	61bb      	str	r3, [r7, #24]
    break;
 800ae84:	e10e      	b.n	800b0a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ae86:	4b8d      	ldr	r3, [pc, #564]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ae88:	61bb      	str	r3, [r7, #24]
    break;
 800ae8a:	e10b      	b.n	800b0a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800ae8c:	4b8c      	ldr	r3, [pc, #560]	; (800b0c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ae8e:	61bb      	str	r3, [r7, #24]
    break;
 800ae90:	e108      	b.n	800b0a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae92:	4b88      	ldr	r3, [pc, #544]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae96:	f003 0303 	and.w	r3, r3, #3
 800ae9a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ae9c:	4b85      	ldr	r3, [pc, #532]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea0:	091b      	lsrs	r3, r3, #4
 800aea2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aea6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aea8:	4b82      	ldr	r3, [pc, #520]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aeaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeac:	f003 0301 	and.w	r3, r3, #1
 800aeb0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800aeb2:	4b80      	ldr	r3, [pc, #512]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aeb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeb6:	08db      	lsrs	r3, r3, #3
 800aeb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	fb02 f303 	mul.w	r3, r2, r3
 800aec2:	ee07 3a90 	vmov	s15, r3
 800aec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 80e1 	beq.w	800b098 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	f000 8083 	beq.w	800afe4 <HAL_RCC_GetSysClockFreq+0x204>
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	f200 80a1 	bhi.w	800b028 <HAL_RCC_GetSysClockFreq+0x248>
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <HAL_RCC_GetSysClockFreq+0x114>
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d056      	beq.n	800afa0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800aef2:	e099      	b.n	800b028 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aef4:	4b6f      	ldr	r3, [pc, #444]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f003 0320 	and.w	r3, r3, #32
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d02d      	beq.n	800af5c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af00:	4b6c      	ldr	r3, [pc, #432]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	08db      	lsrs	r3, r3, #3
 800af06:	f003 0303 	and.w	r3, r3, #3
 800af0a:	4a6b      	ldr	r2, [pc, #428]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800af0c:	fa22 f303 	lsr.w	r3, r2, r3
 800af10:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	ee07 3a90 	vmov	s15, r3
 800af18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	ee07 3a90 	vmov	s15, r3
 800af22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af2a:	4b62      	ldr	r3, [pc, #392]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af32:	ee07 3a90 	vmov	s15, r3
 800af36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af3a:	ed97 6a02 	vldr	s12, [r7, #8]
 800af3e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b0c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800af5a:	e087      	b.n	800b06c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	ee07 3a90 	vmov	s15, r3
 800af62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af66:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b0c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800af6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af6e:	4b51      	ldr	r3, [pc, #324]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af76:	ee07 3a90 	vmov	s15, r3
 800af7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af7e:	ed97 6a02 	vldr	s12, [r7, #8]
 800af82:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b0c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af9e:	e065      	b.n	800b06c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	ee07 3a90 	vmov	s15, r3
 800afa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afaa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b0cc <HAL_RCC_GetSysClockFreq+0x2ec>
 800afae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afb2:	4b40      	ldr	r3, [pc, #256]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afba:	ee07 3a90 	vmov	s15, r3
 800afbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc2:	ed97 6a02 	vldr	s12, [r7, #8]
 800afc6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b0c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800afca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afe2:	e043      	b.n	800b06c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	ee07 3a90 	vmov	s15, r3
 800afea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afee:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b0d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aff6:	4b2f      	ldr	r3, [pc, #188]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800affe:	ee07 3a90 	vmov	s15, r3
 800b002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b006:	ed97 6a02 	vldr	s12, [r7, #8]
 800b00a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b0c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b00e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b026:	e021      	b.n	800b06c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	ee07 3a90 	vmov	s15, r3
 800b02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b032:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b0cc <HAL_RCC_GetSysClockFreq+0x2ec>
 800b036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b03a:	4b1e      	ldr	r3, [pc, #120]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b042:	ee07 3a90 	vmov	s15, r3
 800b046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b04a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b04e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b0c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b05a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b05e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b062:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b06a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b06c:	4b11      	ldr	r3, [pc, #68]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b070:	0a5b      	lsrs	r3, r3, #9
 800b072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b076:	3301      	adds	r3, #1
 800b078:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	ee07 3a90 	vmov	s15, r3
 800b080:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b084:	edd7 6a07 	vldr	s13, [r7, #28]
 800b088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b08c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b090:	ee17 3a90 	vmov	r3, s15
 800b094:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b096:	e005      	b.n	800b0a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b098:	2300      	movs	r3, #0
 800b09a:	61bb      	str	r3, [r7, #24]
    break;
 800b09c:	e002      	b.n	800b0a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b09e:	4b07      	ldr	r3, [pc, #28]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b0a0:	61bb      	str	r3, [r7, #24]
    break;
 800b0a2:	bf00      	nop
  }

  return sysclockfreq;
 800b0a4:	69bb      	ldr	r3, [r7, #24]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3724      	adds	r7, #36	; 0x24
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	58024400 	.word	0x58024400
 800b0b8:	03d09000 	.word	0x03d09000
 800b0bc:	003d0900 	.word	0x003d0900
 800b0c0:	017d7840 	.word	0x017d7840
 800b0c4:	46000000 	.word	0x46000000
 800b0c8:	4c742400 	.word	0x4c742400
 800b0cc:	4a742400 	.word	0x4a742400
 800b0d0:	4bbebc20 	.word	0x4bbebc20

0800b0d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b0da:	f7ff fe81 	bl	800ade0 <HAL_RCC_GetSysClockFreq>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	4b10      	ldr	r3, [pc, #64]	; (800b124 <HAL_RCC_GetHCLKFreq+0x50>)
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	0a1b      	lsrs	r3, r3, #8
 800b0e6:	f003 030f 	and.w	r3, r3, #15
 800b0ea:	490f      	ldr	r1, [pc, #60]	; (800b128 <HAL_RCC_GetHCLKFreq+0x54>)
 800b0ec:	5ccb      	ldrb	r3, [r1, r3]
 800b0ee:	f003 031f 	and.w	r3, r3, #31
 800b0f2:	fa22 f303 	lsr.w	r3, r2, r3
 800b0f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b0f8:	4b0a      	ldr	r3, [pc, #40]	; (800b124 <HAL_RCC_GetHCLKFreq+0x50>)
 800b0fa:	699b      	ldr	r3, [r3, #24]
 800b0fc:	f003 030f 	and.w	r3, r3, #15
 800b100:	4a09      	ldr	r2, [pc, #36]	; (800b128 <HAL_RCC_GetHCLKFreq+0x54>)
 800b102:	5cd3      	ldrb	r3, [r2, r3]
 800b104:	f003 031f 	and.w	r3, r3, #31
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	fa22 f303 	lsr.w	r3, r2, r3
 800b10e:	4a07      	ldr	r2, [pc, #28]	; (800b12c <HAL_RCC_GetHCLKFreq+0x58>)
 800b110:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b112:	4a07      	ldr	r2, [pc, #28]	; (800b130 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b118:	4b04      	ldr	r3, [pc, #16]	; (800b12c <HAL_RCC_GetHCLKFreq+0x58>)
 800b11a:	681b      	ldr	r3, [r3, #0]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	58024400 	.word	0x58024400
 800b128:	0801377c 	.word	0x0801377c
 800b12c:	2400001c 	.word	0x2400001c
 800b130:	24000018 	.word	0x24000018

0800b134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b138:	f7ff ffcc 	bl	800b0d4 <HAL_RCC_GetHCLKFreq>
 800b13c:	4602      	mov	r2, r0
 800b13e:	4b06      	ldr	r3, [pc, #24]	; (800b158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	091b      	lsrs	r3, r3, #4
 800b144:	f003 0307 	and.w	r3, r3, #7
 800b148:	4904      	ldr	r1, [pc, #16]	; (800b15c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b14a:	5ccb      	ldrb	r3, [r1, r3]
 800b14c:	f003 031f 	and.w	r3, r3, #31
 800b150:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b154:	4618      	mov	r0, r3
 800b156:	bd80      	pop	{r7, pc}
 800b158:	58024400 	.word	0x58024400
 800b15c:	0801377c 	.word	0x0801377c

0800b160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b164:	f7ff ffb6 	bl	800b0d4 <HAL_RCC_GetHCLKFreq>
 800b168:	4602      	mov	r2, r0
 800b16a:	4b06      	ldr	r3, [pc, #24]	; (800b184 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b16c:	69db      	ldr	r3, [r3, #28]
 800b16e:	0a1b      	lsrs	r3, r3, #8
 800b170:	f003 0307 	and.w	r3, r3, #7
 800b174:	4904      	ldr	r1, [pc, #16]	; (800b188 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b176:	5ccb      	ldrb	r3, [r1, r3]
 800b178:	f003 031f 	and.w	r3, r3, #31
 800b17c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b180:	4618      	mov	r0, r3
 800b182:	bd80      	pop	{r7, pc}
 800b184:	58024400 	.word	0x58024400
 800b188:	0801377c 	.word	0x0801377c

0800b18c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b194:	2300      	movs	r3, #0
 800b196:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b198:	2300      	movs	r3, #0
 800b19a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d03f      	beq.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b1b0:	d02a      	beq.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b1b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b1b6:	d824      	bhi.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b1b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1bc:	d018      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b1be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1c2:	d81e      	bhi.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d003      	beq.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b1c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1cc:	d007      	beq.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b1ce:	e018      	b.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1d0:	4bab      	ldr	r3, [pc, #684]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d4:	4aaa      	ldr	r2, [pc, #680]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b1d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b1dc:	e015      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	3304      	adds	r3, #4
 800b1e2:	2102      	movs	r1, #2
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f001 f9cf 	bl	800c588 <RCCEx_PLL2_Config>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b1ee:	e00c      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	3324      	adds	r3, #36	; 0x24
 800b1f4:	2102      	movs	r1, #2
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f001 fa78 	bl	800c6ec <RCCEx_PLL3_Config>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b200:	e003      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	75fb      	strb	r3, [r7, #23]
      break;
 800b206:	e000      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b20a:	7dfb      	ldrb	r3, [r7, #23]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d109      	bne.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b210:	4b9b      	ldr	r3, [pc, #620]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b214:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b21c:	4998      	ldr	r1, [pc, #608]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b21e:	4313      	orrs	r3, r2
 800b220:	650b      	str	r3, [r1, #80]	; 0x50
 800b222:	e001      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b224:	7dfb      	ldrb	r3, [r7, #23]
 800b226:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b230:	2b00      	cmp	r3, #0
 800b232:	d03d      	beq.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b238:	2b04      	cmp	r3, #4
 800b23a:	d826      	bhi.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b23c:	a201      	add	r2, pc, #4	; (adr r2, 800b244 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b242:	bf00      	nop
 800b244:	0800b259 	.word	0x0800b259
 800b248:	0800b267 	.word	0x0800b267
 800b24c:	0800b279 	.word	0x0800b279
 800b250:	0800b291 	.word	0x0800b291
 800b254:	0800b291 	.word	0x0800b291
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b258:	4b89      	ldr	r3, [pc, #548]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25c:	4a88      	ldr	r2, [pc, #544]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b25e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b262:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b264:	e015      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	3304      	adds	r3, #4
 800b26a:	2100      	movs	r1, #0
 800b26c:	4618      	mov	r0, r3
 800b26e:	f001 f98b 	bl	800c588 <RCCEx_PLL2_Config>
 800b272:	4603      	mov	r3, r0
 800b274:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b276:	e00c      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	3324      	adds	r3, #36	; 0x24
 800b27c:	2100      	movs	r1, #0
 800b27e:	4618      	mov	r0, r3
 800b280:	f001 fa34 	bl	800c6ec <RCCEx_PLL3_Config>
 800b284:	4603      	mov	r3, r0
 800b286:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b288:	e003      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	75fb      	strb	r3, [r7, #23]
      break;
 800b28e:	e000      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b290:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b292:	7dfb      	ldrb	r3, [r7, #23]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d109      	bne.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b298:	4b79      	ldr	r3, [pc, #484]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b29a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b29c:	f023 0207 	bic.w	r2, r3, #7
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a4:	4976      	ldr	r1, [pc, #472]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	650b      	str	r3, [r1, #80]	; 0x50
 800b2aa:	e001      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ac:	7dfb      	ldrb	r3, [r7, #23]
 800b2ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d042      	beq.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2c4:	d02b      	beq.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b2c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2ca:	d825      	bhi.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b2cc:	2bc0      	cmp	r3, #192	; 0xc0
 800b2ce:	d028      	beq.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b2d0:	2bc0      	cmp	r3, #192	; 0xc0
 800b2d2:	d821      	bhi.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b2d4:	2b80      	cmp	r3, #128	; 0x80
 800b2d6:	d016      	beq.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b2d8:	2b80      	cmp	r3, #128	; 0x80
 800b2da:	d81d      	bhi.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b2e0:	2b40      	cmp	r3, #64	; 0x40
 800b2e2:	d007      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b2e4:	e018      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2e6:	4b66      	ldr	r3, [pc, #408]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ea:	4a65      	ldr	r2, [pc, #404]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b2ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b2f2:	e017      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f001 f944 	bl	800c588 <RCCEx_PLL2_Config>
 800b300:	4603      	mov	r3, r0
 800b302:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b304:	e00e      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	3324      	adds	r3, #36	; 0x24
 800b30a:	2100      	movs	r1, #0
 800b30c:	4618      	mov	r0, r3
 800b30e:	f001 f9ed 	bl	800c6ec <RCCEx_PLL3_Config>
 800b312:	4603      	mov	r3, r0
 800b314:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b316:	e005      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	75fb      	strb	r3, [r7, #23]
      break;
 800b31c:	e002      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b31e:	bf00      	nop
 800b320:	e000      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b322:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b324:	7dfb      	ldrb	r3, [r7, #23]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d109      	bne.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b32a:	4b55      	ldr	r3, [pc, #340]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b32c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b32e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b336:	4952      	ldr	r1, [pc, #328]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b338:	4313      	orrs	r3, r2
 800b33a:	650b      	str	r3, [r1, #80]	; 0x50
 800b33c:	e001      	b.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b33e:	7dfb      	ldrb	r3, [r7, #23]
 800b340:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d049      	beq.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b354:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b358:	d030      	beq.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b35a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b35e:	d82a      	bhi.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b360:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b364:	d02c      	beq.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b366:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b36a:	d824      	bhi.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b36c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b370:	d018      	beq.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b376:	d81e      	bhi.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d003      	beq.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b37c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b380:	d007      	beq.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b382:	e018      	b.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b384:	4b3e      	ldr	r3, [pc, #248]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b388:	4a3d      	ldr	r2, [pc, #244]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b38a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b38e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b390:	e017      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	3304      	adds	r3, #4
 800b396:	2100      	movs	r1, #0
 800b398:	4618      	mov	r0, r3
 800b39a:	f001 f8f5 	bl	800c588 <RCCEx_PLL2_Config>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b3a2:	e00e      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	3324      	adds	r3, #36	; 0x24
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f001 f99e 	bl	800c6ec <RCCEx_PLL3_Config>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b3b4:	e005      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	75fb      	strb	r3, [r7, #23]
      break;
 800b3ba:	e002      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b3bc:	bf00      	nop
 800b3be:	e000      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b3c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3c2:	7dfb      	ldrb	r3, [r7, #23]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d10a      	bne.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b3c8:	4b2d      	ldr	r3, [pc, #180]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b3d6:	492a      	ldr	r1, [pc, #168]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	658b      	str	r3, [r1, #88]	; 0x58
 800b3dc:	e001      	b.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3de:	7dfb      	ldrb	r3, [r7, #23]
 800b3e0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d04c      	beq.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b3f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3f8:	d030      	beq.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b3fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3fe:	d82a      	bhi.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b400:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b404:	d02c      	beq.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800b406:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b40a:	d824      	bhi.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b40c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b410:	d018      	beq.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b416:	d81e      	bhi.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d003      	beq.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b41c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b420:	d007      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b422:	e018      	b.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b424:	4b16      	ldr	r3, [pc, #88]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b428:	4a15      	ldr	r2, [pc, #84]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b42a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b42e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b430:	e017      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	3304      	adds	r3, #4
 800b436:	2100      	movs	r1, #0
 800b438:	4618      	mov	r0, r3
 800b43a:	f001 f8a5 	bl	800c588 <RCCEx_PLL2_Config>
 800b43e:	4603      	mov	r3, r0
 800b440:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b442:	e00e      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	3324      	adds	r3, #36	; 0x24
 800b448:	2100      	movs	r1, #0
 800b44a:	4618      	mov	r0, r3
 800b44c:	f001 f94e 	bl	800c6ec <RCCEx_PLL3_Config>
 800b450:	4603      	mov	r3, r0
 800b452:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b454:	e005      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b456:	2301      	movs	r3, #1
 800b458:	75fb      	strb	r3, [r7, #23]
      break;
 800b45a:	e002      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b45c:	bf00      	nop
 800b45e:	e000      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b460:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b462:	7dfb      	ldrb	r3, [r7, #23]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10d      	bne.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b468:	4b05      	ldr	r3, [pc, #20]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b46a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b46c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b476:	4902      	ldr	r1, [pc, #8]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b478:	4313      	orrs	r3, r2
 800b47a:	658b      	str	r3, [r1, #88]	; 0x58
 800b47c:	e004      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800b47e:	bf00      	nop
 800b480:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b484:	7dfb      	ldrb	r3, [r7, #23]
 800b486:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d032      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b498:	2b30      	cmp	r3, #48	; 0x30
 800b49a:	d01c      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b49c:	2b30      	cmp	r3, #48	; 0x30
 800b49e:	d817      	bhi.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b4a0:	2b20      	cmp	r3, #32
 800b4a2:	d00c      	beq.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b4a4:	2b20      	cmp	r3, #32
 800b4a6:	d813      	bhi.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d016      	beq.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b4ac:	2b10      	cmp	r3, #16
 800b4ae:	d10f      	bne.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4b0:	4baf      	ldr	r3, [pc, #700]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b4:	4aae      	ldr	r2, [pc, #696]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b4b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b4bc:	e00e      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	3304      	adds	r3, #4
 800b4c2:	2102      	movs	r1, #2
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f001 f85f 	bl	800c588 <RCCEx_PLL2_Config>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b4ce:	e005      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	75fb      	strb	r3, [r7, #23]
      break;
 800b4d4:	e002      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b4d6:	bf00      	nop
 800b4d8:	e000      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b4da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4dc:	7dfb      	ldrb	r3, [r7, #23]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d109      	bne.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b4e2:	4ba3      	ldr	r3, [pc, #652]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b4e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4ee:	49a0      	ldr	r1, [pc, #640]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b4f4:	e001      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f6:	7dfb      	ldrb	r3, [r7, #23]
 800b4f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b502:	2b00      	cmp	r3, #0
 800b504:	d047      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b50a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b50e:	d030      	beq.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800b510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b514:	d82a      	bhi.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b516:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b51a:	d02c      	beq.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800b51c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b520:	d824      	bhi.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b526:	d018      	beq.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b52c:	d81e      	bhi.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d003      	beq.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800b532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b536:	d007      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800b538:	e018      	b.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b53a:	4b8d      	ldr	r3, [pc, #564]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53e:	4a8c      	ldr	r2, [pc, #560]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b544:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b546:	e017      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	3304      	adds	r3, #4
 800b54c:	2100      	movs	r1, #0
 800b54e:	4618      	mov	r0, r3
 800b550:	f001 f81a 	bl	800c588 <RCCEx_PLL2_Config>
 800b554:	4603      	mov	r3, r0
 800b556:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b558:	e00e      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	3324      	adds	r3, #36	; 0x24
 800b55e:	2100      	movs	r1, #0
 800b560:	4618      	mov	r0, r3
 800b562:	f001 f8c3 	bl	800c6ec <RCCEx_PLL3_Config>
 800b566:	4603      	mov	r3, r0
 800b568:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b56a:	e005      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	75fb      	strb	r3, [r7, #23]
      break;
 800b570:	e002      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b572:	bf00      	nop
 800b574:	e000      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b576:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b578:	7dfb      	ldrb	r3, [r7, #23]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d109      	bne.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b57e:	4b7c      	ldr	r3, [pc, #496]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b582:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b58a:	4979      	ldr	r1, [pc, #484]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b58c:	4313      	orrs	r3, r2
 800b58e:	650b      	str	r3, [r1, #80]	; 0x50
 800b590:	e001      	b.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b592:	7dfb      	ldrb	r3, [r7, #23]
 800b594:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d049      	beq.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5aa:	d02e      	beq.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800b5ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5b0:	d828      	bhi.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b5b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5b6:	d02a      	beq.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x482>
 800b5b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5bc:	d822      	bhi.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b5be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b5c2:	d026      	beq.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800b5c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b5c8:	d81c      	bhi.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b5ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5ce:	d010      	beq.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800b5d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5d4:	d816      	bhi.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d01d      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800b5da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5de:	d111      	bne.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	3304      	adds	r3, #4
 800b5e4:	2101      	movs	r1, #1
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f000 ffce 	bl	800c588 <RCCEx_PLL2_Config>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b5f0:	e012      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	3324      	adds	r3, #36	; 0x24
 800b5f6:	2101      	movs	r1, #1
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f001 f877 	bl	800c6ec <RCCEx_PLL3_Config>
 800b5fe:	4603      	mov	r3, r0
 800b600:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b602:	e009      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	75fb      	strb	r3, [r7, #23]
      break;
 800b608:	e006      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b60a:	bf00      	nop
 800b60c:	e004      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b60e:	bf00      	nop
 800b610:	e002      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b612:	bf00      	nop
 800b614:	e000      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b616:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b618:	7dfb      	ldrb	r3, [r7, #23]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d109      	bne.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b61e:	4b54      	ldr	r3, [pc, #336]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b622:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b62a:	4951      	ldr	r1, [pc, #324]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b62c:	4313      	orrs	r3, r2
 800b62e:	650b      	str	r3, [r1, #80]	; 0x50
 800b630:	e001      	b.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b632:	7dfb      	ldrb	r3, [r7, #23]
 800b634:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d04b      	beq.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b64c:	d02e      	beq.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x520>
 800b64e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b652:	d828      	bhi.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b658:	d02a      	beq.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b65a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b65e:	d822      	bhi.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b660:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b664:	d026      	beq.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800b666:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b66a:	d81c      	bhi.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b66c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b670:	d010      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800b672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b676:	d816      	bhi.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d01d      	beq.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800b67c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b680:	d111      	bne.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	3304      	adds	r3, #4
 800b686:	2101      	movs	r1, #1
 800b688:	4618      	mov	r0, r3
 800b68a:	f000 ff7d 	bl	800c588 <RCCEx_PLL2_Config>
 800b68e:	4603      	mov	r3, r0
 800b690:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b692:	e012      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3324      	adds	r3, #36	; 0x24
 800b698:	2101      	movs	r1, #1
 800b69a:	4618      	mov	r0, r3
 800b69c:	f001 f826 	bl	800c6ec <RCCEx_PLL3_Config>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b6a4:	e009      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	75fb      	strb	r3, [r7, #23]
      break;
 800b6aa:	e006      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b6ac:	bf00      	nop
 800b6ae:	e004      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b6b0:	bf00      	nop
 800b6b2:	e002      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b6b4:	bf00      	nop
 800b6b6:	e000      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b6b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d10a      	bne.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b6c0:	4b2b      	ldr	r3, [pc, #172]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b6c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6c4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b6ce:	4928      	ldr	r1, [pc, #160]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	658b      	str	r3, [r1, #88]	; 0x58
 800b6d4:	e001      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6d6:	7dfb      	ldrb	r3, [r7, #23]
 800b6d8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d02f      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6ee:	d00e      	beq.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b6f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6f4:	d814      	bhi.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d015      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b6fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6fe:	d10f      	bne.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b700:	4b1b      	ldr	r3, [pc, #108]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b704:	4a1a      	ldr	r2, [pc, #104]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b70a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b70c:	e00c      	b.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	3304      	adds	r3, #4
 800b712:	2101      	movs	r1, #1
 800b714:	4618      	mov	r0, r3
 800b716:	f000 ff37 	bl	800c588 <RCCEx_PLL2_Config>
 800b71a:	4603      	mov	r3, r0
 800b71c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b71e:	e003      	b.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b720:	2301      	movs	r3, #1
 800b722:	75fb      	strb	r3, [r7, #23]
      break;
 800b724:	e000      	b.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800b726:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b728:	7dfb      	ldrb	r3, [r7, #23]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d109      	bne.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b72e:	4b10      	ldr	r3, [pc, #64]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b732:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b73a:	490d      	ldr	r1, [pc, #52]	; (800b770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b73c:	4313      	orrs	r3, r2
 800b73e:	650b      	str	r3, [r1, #80]	; 0x50
 800b740:	e001      	b.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b742:	7dfb      	ldrb	r3, [r7, #23]
 800b744:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d033      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b756:	2b03      	cmp	r3, #3
 800b758:	d81c      	bhi.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b75a:	a201      	add	r2, pc, #4	; (adr r2, 800b760 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800b75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b760:	0800b79b 	.word	0x0800b79b
 800b764:	0800b775 	.word	0x0800b775
 800b768:	0800b783 	.word	0x0800b783
 800b76c:	0800b79b 	.word	0x0800b79b
 800b770:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b774:	4bb8      	ldr	r3, [pc, #736]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b778:	4ab7      	ldr	r2, [pc, #732]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b77a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b77e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b780:	e00c      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	3304      	adds	r3, #4
 800b786:	2102      	movs	r1, #2
 800b788:	4618      	mov	r0, r3
 800b78a:	f000 fefd 	bl	800c588 <RCCEx_PLL2_Config>
 800b78e:	4603      	mov	r3, r0
 800b790:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b792:	e003      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	75fb      	strb	r3, [r7, #23]
      break;
 800b798:	e000      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b79a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b79c:	7dfb      	ldrb	r3, [r7, #23]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d109      	bne.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b7a2:	4bad      	ldr	r3, [pc, #692]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b7a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7a6:	f023 0203 	bic.w	r2, r3, #3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ae:	49aa      	ldr	r1, [pc, #680]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b7b4:	e001      	b.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7b6:	7dfb      	ldrb	r3, [r7, #23]
 800b7b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f000 8086 	beq.w	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b7c8:	4ba4      	ldr	r3, [pc, #656]	; (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4aa3      	ldr	r2, [pc, #652]	; (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b7ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b7d4:	f7f9 f92c 	bl	8004a30 <HAL_GetTick>
 800b7d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7da:	e009      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7dc:	f7f9 f928 	bl	8004a30 <HAL_GetTick>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	2b64      	cmp	r3, #100	; 0x64
 800b7e8:	d902      	bls.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b7ea:	2303      	movs	r3, #3
 800b7ec:	75fb      	strb	r3, [r7, #23]
        break;
 800b7ee:	e005      	b.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7f0:	4b9a      	ldr	r3, [pc, #616]	; (800ba5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d0ef      	beq.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d166      	bne.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b802:	4b95      	ldr	r3, [pc, #596]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b804:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b80c:	4053      	eors	r3, r2
 800b80e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b812:	2b00      	cmp	r3, #0
 800b814:	d013      	beq.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b816:	4b90      	ldr	r3, [pc, #576]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b81a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b81e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b820:	4b8d      	ldr	r3, [pc, #564]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b824:	4a8c      	ldr	r2, [pc, #560]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b82a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b82c:	4b8a      	ldr	r3, [pc, #552]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b830:	4a89      	ldr	r2, [pc, #548]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b836:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b838:	4a87      	ldr	r2, [pc, #540]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b848:	d115      	bne.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b84a:	f7f9 f8f1 	bl	8004a30 <HAL_GetTick>
 800b84e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b850:	e00b      	b.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b852:	f7f9 f8ed 	bl	8004a30 <HAL_GetTick>
 800b856:	4602      	mov	r2, r0
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b860:	4293      	cmp	r3, r2
 800b862:	d902      	bls.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b864:	2303      	movs	r3, #3
 800b866:	75fb      	strb	r3, [r7, #23]
            break;
 800b868:	e005      	b.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b86a:	4b7b      	ldr	r3, [pc, #492]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b86e:	f003 0302 	and.w	r3, r3, #2
 800b872:	2b00      	cmp	r3, #0
 800b874:	d0ed      	beq.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b876:	7dfb      	ldrb	r3, [r7, #23]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d126      	bne.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b88a:	d10d      	bne.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b88c:	4b72      	ldr	r3, [pc, #456]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b88e:	691b      	ldr	r3, [r3, #16]
 800b890:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b89a:	0919      	lsrs	r1, r3, #4
 800b89c:	4b70      	ldr	r3, [pc, #448]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800b89e:	400b      	ands	r3, r1
 800b8a0:	496d      	ldr	r1, [pc, #436]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	610b      	str	r3, [r1, #16]
 800b8a6:	e005      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b8a8:	4b6b      	ldr	r3, [pc, #428]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b8aa:	691b      	ldr	r3, [r3, #16]
 800b8ac:	4a6a      	ldr	r2, [pc, #424]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b8ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b8b2:	6113      	str	r3, [r2, #16]
 800b8b4:	4b68      	ldr	r3, [pc, #416]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b8b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b8be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8c2:	4965      	ldr	r1, [pc, #404]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	670b      	str	r3, [r1, #112]	; 0x70
 800b8c8:	e004      	b.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
 800b8cc:	75bb      	strb	r3, [r7, #22]
 800b8ce:	e001      	b.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8d0:	7dfb      	ldrb	r3, [r7, #23]
 800b8d2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f003 0301 	and.w	r3, r3, #1
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d07e      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8e4:	2b28      	cmp	r3, #40	; 0x28
 800b8e6:	d867      	bhi.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b8e8:	a201      	add	r2, pc, #4	; (adr r2, 800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ee:	bf00      	nop
 800b8f0:	0800b9bf 	.word	0x0800b9bf
 800b8f4:	0800b9b9 	.word	0x0800b9b9
 800b8f8:	0800b9b9 	.word	0x0800b9b9
 800b8fc:	0800b9b9 	.word	0x0800b9b9
 800b900:	0800b9b9 	.word	0x0800b9b9
 800b904:	0800b9b9 	.word	0x0800b9b9
 800b908:	0800b9b9 	.word	0x0800b9b9
 800b90c:	0800b9b9 	.word	0x0800b9b9
 800b910:	0800b995 	.word	0x0800b995
 800b914:	0800b9b9 	.word	0x0800b9b9
 800b918:	0800b9b9 	.word	0x0800b9b9
 800b91c:	0800b9b9 	.word	0x0800b9b9
 800b920:	0800b9b9 	.word	0x0800b9b9
 800b924:	0800b9b9 	.word	0x0800b9b9
 800b928:	0800b9b9 	.word	0x0800b9b9
 800b92c:	0800b9b9 	.word	0x0800b9b9
 800b930:	0800b9a7 	.word	0x0800b9a7
 800b934:	0800b9b9 	.word	0x0800b9b9
 800b938:	0800b9b9 	.word	0x0800b9b9
 800b93c:	0800b9b9 	.word	0x0800b9b9
 800b940:	0800b9b9 	.word	0x0800b9b9
 800b944:	0800b9b9 	.word	0x0800b9b9
 800b948:	0800b9b9 	.word	0x0800b9b9
 800b94c:	0800b9b9 	.word	0x0800b9b9
 800b950:	0800b9bf 	.word	0x0800b9bf
 800b954:	0800b9b9 	.word	0x0800b9b9
 800b958:	0800b9b9 	.word	0x0800b9b9
 800b95c:	0800b9b9 	.word	0x0800b9b9
 800b960:	0800b9b9 	.word	0x0800b9b9
 800b964:	0800b9b9 	.word	0x0800b9b9
 800b968:	0800b9b9 	.word	0x0800b9b9
 800b96c:	0800b9b9 	.word	0x0800b9b9
 800b970:	0800b9bf 	.word	0x0800b9bf
 800b974:	0800b9b9 	.word	0x0800b9b9
 800b978:	0800b9b9 	.word	0x0800b9b9
 800b97c:	0800b9b9 	.word	0x0800b9b9
 800b980:	0800b9b9 	.word	0x0800b9b9
 800b984:	0800b9b9 	.word	0x0800b9b9
 800b988:	0800b9b9 	.word	0x0800b9b9
 800b98c:	0800b9b9 	.word	0x0800b9b9
 800b990:	0800b9bf 	.word	0x0800b9bf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	3304      	adds	r3, #4
 800b998:	2101      	movs	r1, #1
 800b99a:	4618      	mov	r0, r3
 800b99c:	f000 fdf4 	bl	800c588 <RCCEx_PLL2_Config>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b9a4:	e00c      	b.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	3324      	adds	r3, #36	; 0x24
 800b9aa:	2101      	movs	r1, #1
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f000 fe9d 	bl	800c6ec <RCCEx_PLL3_Config>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b9b6:	e003      	b.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b9bc:	e000      	b.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800b9be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d109      	bne.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b9c6:	4b24      	ldr	r3, [pc, #144]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9d2:	4921      	ldr	r1, [pc, #132]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	654b      	str	r3, [r1, #84]	; 0x54
 800b9d8:	e001      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9da:	7dfb      	ldrb	r3, [r7, #23]
 800b9dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f003 0302 	and.w	r3, r3, #2
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d03e      	beq.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9ee:	2b05      	cmp	r3, #5
 800b9f0:	d820      	bhi.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800b9f2:	a201      	add	r2, pc, #4	; (adr r2, 800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800b9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f8:	0800ba3b 	.word	0x0800ba3b
 800b9fc:	0800ba11 	.word	0x0800ba11
 800ba00:	0800ba23 	.word	0x0800ba23
 800ba04:	0800ba3b 	.word	0x0800ba3b
 800ba08:	0800ba3b 	.word	0x0800ba3b
 800ba0c:	0800ba3b 	.word	0x0800ba3b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	3304      	adds	r3, #4
 800ba14:	2101      	movs	r1, #1
 800ba16:	4618      	mov	r0, r3
 800ba18:	f000 fdb6 	bl	800c588 <RCCEx_PLL2_Config>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ba20:	e00c      	b.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	3324      	adds	r3, #36	; 0x24
 800ba26:	2101      	movs	r1, #1
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f000 fe5f 	bl	800c6ec <RCCEx_PLL3_Config>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ba32:	e003      	b.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba34:	2301      	movs	r3, #1
 800ba36:	75fb      	strb	r3, [r7, #23]
      break;
 800ba38:	e000      	b.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800ba3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba3c:	7dfb      	ldrb	r3, [r7, #23]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d110      	bne.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ba42:	4b05      	ldr	r3, [pc, #20]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba46:	f023 0207 	bic.w	r2, r3, #7
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba4e:	4902      	ldr	r1, [pc, #8]	; (800ba58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba50:	4313      	orrs	r3, r2
 800ba52:	654b      	str	r3, [r1, #84]	; 0x54
 800ba54:	e008      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800ba56:	bf00      	nop
 800ba58:	58024400 	.word	0x58024400
 800ba5c:	58024800 	.word	0x58024800
 800ba60:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba64:	7dfb      	ldrb	r3, [r7, #23]
 800ba66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f003 0304 	and.w	r3, r3, #4
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d039      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba7a:	2b05      	cmp	r3, #5
 800ba7c:	d820      	bhi.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800ba7e:	a201      	add	r2, pc, #4	; (adr r2, 800ba84 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800ba80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba84:	0800bac7 	.word	0x0800bac7
 800ba88:	0800ba9d 	.word	0x0800ba9d
 800ba8c:	0800baaf 	.word	0x0800baaf
 800ba90:	0800bac7 	.word	0x0800bac7
 800ba94:	0800bac7 	.word	0x0800bac7
 800ba98:	0800bac7 	.word	0x0800bac7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	3304      	adds	r3, #4
 800baa0:	2101      	movs	r1, #1
 800baa2:	4618      	mov	r0, r3
 800baa4:	f000 fd70 	bl	800c588 <RCCEx_PLL2_Config>
 800baa8:	4603      	mov	r3, r0
 800baaa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800baac:	e00c      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	3324      	adds	r3, #36	; 0x24
 800bab2:	2101      	movs	r1, #1
 800bab4:	4618      	mov	r0, r3
 800bab6:	f000 fe19 	bl	800c6ec <RCCEx_PLL3_Config>
 800baba:	4603      	mov	r3, r0
 800babc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800babe:	e003      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bac0:	2301      	movs	r3, #1
 800bac2:	75fb      	strb	r3, [r7, #23]
      break;
 800bac4:	e000      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800bac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bac8:	7dfb      	ldrb	r3, [r7, #23]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d10a      	bne.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bace:	4bb7      	ldr	r3, [pc, #732]	; (800bdac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bad2:	f023 0207 	bic.w	r2, r3, #7
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800badc:	49b3      	ldr	r1, [pc, #716]	; (800bdac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bade:	4313      	orrs	r3, r2
 800bae0:	658b      	str	r3, [r1, #88]	; 0x58
 800bae2:	e001      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae4:	7dfb      	ldrb	r3, [r7, #23]
 800bae6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 0320 	and.w	r3, r3, #32
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d04b      	beq.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bafa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bafe:	d02e      	beq.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800bb00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb04:	d828      	bhi.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bb06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb0a:	d02a      	beq.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800bb0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb10:	d822      	bhi.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bb12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb16:	d026      	beq.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800bb18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb1c:	d81c      	bhi.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bb1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb22:	d010      	beq.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800bb24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb28:	d816      	bhi.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d01d      	beq.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800bb2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb32:	d111      	bne.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	3304      	adds	r3, #4
 800bb38:	2100      	movs	r1, #0
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 fd24 	bl	800c588 <RCCEx_PLL2_Config>
 800bb40:	4603      	mov	r3, r0
 800bb42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bb44:	e012      	b.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	3324      	adds	r3, #36	; 0x24
 800bb4a:	2102      	movs	r1, #2
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f000 fdcd 	bl	800c6ec <RCCEx_PLL3_Config>
 800bb52:	4603      	mov	r3, r0
 800bb54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bb56:	e009      	b.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb5c:	e006      	b.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bb5e:	bf00      	nop
 800bb60:	e004      	b.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bb62:	bf00      	nop
 800bb64:	e002      	b.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bb66:	bf00      	nop
 800bb68:	e000      	b.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bb6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb6c:	7dfb      	ldrb	r3, [r7, #23]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d10a      	bne.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb72:	4b8e      	ldr	r3, [pc, #568]	; (800bdac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bb74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb80:	498a      	ldr	r1, [pc, #552]	; (800bdac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bb82:	4313      	orrs	r3, r2
 800bb84:	654b      	str	r3, [r1, #84]	; 0x54
 800bb86:	e001      	b.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb88:	7dfb      	ldrb	r3, [r7, #23]
 800bb8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d04b      	beq.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bba2:	d02e      	beq.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800bba4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bba8:	d828      	bhi.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bbaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbae:	d02a      	beq.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800bbb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbb4:	d822      	bhi.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bbb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbba:	d026      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800bbbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbc0:	d81c      	bhi.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bbc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbc6:	d010      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800bbc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbcc:	d816      	bhi.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d01d      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800bbd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbd6:	d111      	bne.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	3304      	adds	r3, #4
 800bbdc:	2100      	movs	r1, #0
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f000 fcd2 	bl	800c588 <RCCEx_PLL2_Config>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bbe8:	e012      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	3324      	adds	r3, #36	; 0x24
 800bbee:	2102      	movs	r1, #2
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f000 fd7b 	bl	800c6ec <RCCEx_PLL3_Config>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bbfa:	e009      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	75fb      	strb	r3, [r7, #23]
      break;
 800bc00:	e006      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bc02:	bf00      	nop
 800bc04:	e004      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bc06:	bf00      	nop
 800bc08:	e002      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bc0a:	bf00      	nop
 800bc0c:	e000      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bc0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc10:	7dfb      	ldrb	r3, [r7, #23]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d10a      	bne.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bc16:	4b65      	ldr	r3, [pc, #404]	; (800bdac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bc18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc1a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc24:	4961      	ldr	r1, [pc, #388]	; (800bdac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bc26:	4313      	orrs	r3, r2
 800bc28:	658b      	str	r3, [r1, #88]	; 0x58
 800bc2a:	e001      	b.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc2c:	7dfb      	ldrb	r3, [r7, #23]
 800bc2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d04b      	beq.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc42:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bc46:	d02e      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800bc48:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bc4c:	d828      	bhi.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bc4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc52:	d02a      	beq.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800bc54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc58:	d822      	bhi.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bc5a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bc5e:	d026      	beq.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800bc60:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bc64:	d81c      	bhi.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bc66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc6a:	d010      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800bc6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc70:	d816      	bhi.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d01d      	beq.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800bc76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc7a:	d111      	bne.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	3304      	adds	r3, #4
 800bc80:	2100      	movs	r1, #0
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 fc80 	bl	800c588 <RCCEx_PLL2_Config>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800bc8c:	e012      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	3324      	adds	r3, #36	; 0x24
 800bc92:	2102      	movs	r1, #2
 800bc94:	4618      	mov	r0, r3
 800bc96:	f000 fd29 	bl	800c6ec <RCCEx_PLL3_Config>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800bc9e:	e009      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	75fb      	strb	r3, [r7, #23]
      break;
 800bca4:	e006      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bca6:	bf00      	nop
 800bca8:	e004      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bcaa:	bf00      	nop
 800bcac:	e002      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bcae:	bf00      	nop
 800bcb0:	e000      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bcb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bcb4:	7dfb      	ldrb	r3, [r7, #23]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d10a      	bne.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bcba:	4b3c      	ldr	r3, [pc, #240]	; (800bdac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bcbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bcc8:	4938      	ldr	r1, [pc, #224]	; (800bdac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bcca:	4313      	orrs	r3, r2
 800bccc:	658b      	str	r3, [r1, #88]	; 0x58
 800bcce:	e001      	b.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcd0:	7dfb      	ldrb	r3, [r7, #23]
 800bcd2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f003 0308 	and.w	r3, r3, #8
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d01a      	beq.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcea:	d10a      	bne.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	3324      	adds	r3, #36	; 0x24
 800bcf0:	2102      	movs	r1, #2
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f000 fcfa 	bl	800c6ec <RCCEx_PLL3_Config>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d001      	beq.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bd02:	4b2a      	ldr	r3, [pc, #168]	; (800bdac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bd04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd10:	4926      	ldr	r1, [pc, #152]	; (800bdac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bd12:	4313      	orrs	r3, r2
 800bd14:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f003 0310 	and.w	r3, r3, #16
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d01a      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd2c:	d10a      	bne.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	3324      	adds	r3, #36	; 0x24
 800bd32:	2102      	movs	r1, #2
 800bd34:	4618      	mov	r0, r3
 800bd36:	f000 fcd9 	bl	800c6ec <RCCEx_PLL3_Config>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d001      	beq.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800bd40:	2301      	movs	r3, #1
 800bd42:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bd44:	4b19      	ldr	r3, [pc, #100]	; (800bdac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bd46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd52:	4916      	ldr	r1, [pc, #88]	; (800bdac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bd54:	4313      	orrs	r3, r2
 800bd56:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d036      	beq.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd6e:	d01f      	beq.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800bd70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd74:	d817      	bhi.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d003      	beq.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800bd7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd7e:	d009      	beq.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800bd80:	e011      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	3304      	adds	r3, #4
 800bd86:	2100      	movs	r1, #0
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 fbfd 	bl	800c588 <RCCEx_PLL2_Config>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bd92:	e00e      	b.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	3324      	adds	r3, #36	; 0x24
 800bd98:	2102      	movs	r1, #2
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f000 fca6 	bl	800c6ec <RCCEx_PLL3_Config>
 800bda0:	4603      	mov	r3, r0
 800bda2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bda4:	e005      	b.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	75fb      	strb	r3, [r7, #23]
      break;
 800bdaa:	e002      	b.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800bdac:	58024400 	.word	0x58024400
      break;
 800bdb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bdb2:	7dfb      	ldrb	r3, [r7, #23]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d10a      	bne.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bdb8:	4b93      	ldr	r3, [pc, #588]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bdba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bdc6:	4990      	ldr	r1, [pc, #576]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	658b      	str	r3, [r1, #88]	; 0x58
 800bdcc:	e001      	b.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdce:	7dfb      	ldrb	r3, [r7, #23]
 800bdd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d033      	beq.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bde4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bde8:	d01c      	beq.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800bdea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bdee:	d816      	bhi.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800bdf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdf4:	d003      	beq.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800bdf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdfa:	d007      	beq.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800bdfc:	e00f      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdfe:	4b82      	ldr	r3, [pc, #520]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be02:	4a81      	ldr	r2, [pc, #516]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800be0a:	e00c      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	3324      	adds	r3, #36	; 0x24
 800be10:	2101      	movs	r1, #1
 800be12:	4618      	mov	r0, r3
 800be14:	f000 fc6a 	bl	800c6ec <RCCEx_PLL3_Config>
 800be18:	4603      	mov	r3, r0
 800be1a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800be1c:	e003      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	75fb      	strb	r3, [r7, #23]
      break;
 800be22:	e000      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800be24:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be26:	7dfb      	ldrb	r3, [r7, #23]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10a      	bne.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be2c:	4b76      	ldr	r3, [pc, #472]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be3a:	4973      	ldr	r1, [pc, #460]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be3c:	4313      	orrs	r3, r2
 800be3e:	654b      	str	r3, [r1, #84]	; 0x54
 800be40:	e001      	b.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be42:	7dfb      	ldrb	r3, [r7, #23]
 800be44:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d029      	beq.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be56:	2b00      	cmp	r3, #0
 800be58:	d003      	beq.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800be5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be5e:	d007      	beq.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800be60:	e00f      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be62:	4b69      	ldr	r3, [pc, #420]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be66:	4a68      	ldr	r2, [pc, #416]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800be6e:	e00b      	b.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	3304      	adds	r3, #4
 800be74:	2102      	movs	r1, #2
 800be76:	4618      	mov	r0, r3
 800be78:	f000 fb86 	bl	800c588 <RCCEx_PLL2_Config>
 800be7c:	4603      	mov	r3, r0
 800be7e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800be80:	e002      	b.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	75fb      	strb	r3, [r7, #23]
      break;
 800be86:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be88:	7dfb      	ldrb	r3, [r7, #23]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d109      	bne.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800be8e:	4b5e      	ldr	r3, [pc, #376]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be9a:	495b      	ldr	r1, [pc, #364]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be9c:	4313      	orrs	r3, r2
 800be9e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bea0:	e001      	b.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea2:	7dfb      	ldrb	r3, [r7, #23]
 800bea4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00a      	beq.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	3324      	adds	r3, #36	; 0x24
 800beb6:	2102      	movs	r1, #2
 800beb8:	4618      	mov	r0, r3
 800beba:	f000 fc17 	bl	800c6ec <RCCEx_PLL3_Config>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d001      	beq.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800bec4:	2301      	movs	r3, #1
 800bec6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d030      	beq.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bedc:	d017      	beq.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800bede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bee2:	d811      	bhi.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800bee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bee8:	d013      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800beea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800beee:	d80b      	bhi.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d010      	beq.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800bef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bef8:	d106      	bne.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800befa:	4b43      	ldr	r3, [pc, #268]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800befc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befe:	4a42      	ldr	r2, [pc, #264]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800bf06:	e007      	b.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	75fb      	strb	r3, [r7, #23]
      break;
 800bf0c:	e004      	b.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800bf0e:	bf00      	nop
 800bf10:	e002      	b.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800bf12:	bf00      	nop
 800bf14:	e000      	b.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800bf16:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf18:	7dfb      	ldrb	r3, [r7, #23]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d109      	bne.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf1e:	4b3a      	ldr	r3, [pc, #232]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf2a:	4937      	ldr	r1, [pc, #220]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	654b      	str	r3, [r1, #84]	; 0x54
 800bf30:	e001      	b.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf32:	7dfb      	ldrb	r3, [r7, #23]
 800bf34:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d008      	beq.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bf42:	4b31      	ldr	r3, [pc, #196]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf4e:	492e      	ldr	r1, [pc, #184]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf50:	4313      	orrs	r3, r2
 800bf52:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d009      	beq.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bf60:	4b29      	ldr	r3, [pc, #164]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bf6e:	4926      	ldr	r1, [pc, #152]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf70:	4313      	orrs	r3, r2
 800bf72:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d008      	beq.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bf80:	4b21      	ldr	r3, [pc, #132]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf8c:	491e      	ldr	r1, [pc, #120]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00d      	beq.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bf9e:	4b1a      	ldr	r3, [pc, #104]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfa0:	691b      	ldr	r3, [r3, #16]
 800bfa2:	4a19      	ldr	r2, [pc, #100]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfa4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bfa8:	6113      	str	r3, [r2, #16]
 800bfaa:	4b17      	ldr	r3, [pc, #92]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfac:	691a      	ldr	r2, [r3, #16]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bfb4:	4914      	ldr	r1, [pc, #80]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	da08      	bge.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bfc2:	4b11      	ldr	r3, [pc, #68]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfce:	490e      	ldr	r1, [pc, #56]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d009      	beq.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bfe0:	4b09      	ldr	r3, [pc, #36]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfe4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfee:	4906      	ldr	r1, [pc, #24]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bff0:	4313      	orrs	r3, r2
 800bff2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800bff4:	7dbb      	ldrb	r3, [r7, #22]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d101      	bne.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800bffa:	2300      	movs	r3, #0
 800bffc:	e000      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800bffe:	2301      	movs	r3, #1
}
 800c000:	4618      	mov	r0, r3
 800c002:	3718      	adds	r7, #24
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	58024400 	.word	0x58024400

0800c00c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c010:	f7ff f860 	bl	800b0d4 <HAL_RCC_GetHCLKFreq>
 800c014:	4602      	mov	r2, r0
 800c016:	4b06      	ldr	r3, [pc, #24]	; (800c030 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c018:	6a1b      	ldr	r3, [r3, #32]
 800c01a:	091b      	lsrs	r3, r3, #4
 800c01c:	f003 0307 	and.w	r3, r3, #7
 800c020:	4904      	ldr	r1, [pc, #16]	; (800c034 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c022:	5ccb      	ldrb	r3, [r1, r3]
 800c024:	f003 031f 	and.w	r3, r3, #31
 800c028:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	58024400 	.word	0x58024400
 800c034:	0801377c 	.word	0x0801377c

0800c038 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c038:	b480      	push	{r7}
 800c03a:	b089      	sub	sp, #36	; 0x24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c040:	4ba1      	ldr	r3, [pc, #644]	; (800c2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c044:	f003 0303 	and.w	r3, r3, #3
 800c048:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c04a:	4b9f      	ldr	r3, [pc, #636]	; (800c2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c04e:	0b1b      	lsrs	r3, r3, #12
 800c050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c054:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c056:	4b9c      	ldr	r3, [pc, #624]	; (800c2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c05a:	091b      	lsrs	r3, r3, #4
 800c05c:	f003 0301 	and.w	r3, r3, #1
 800c060:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c062:	4b99      	ldr	r3, [pc, #612]	; (800c2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c066:	08db      	lsrs	r3, r3, #3
 800c068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c06c:	693a      	ldr	r2, [r7, #16]
 800c06e:	fb02 f303 	mul.w	r3, r2, r3
 800c072:	ee07 3a90 	vmov	s15, r3
 800c076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c07a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	2b00      	cmp	r3, #0
 800c082:	f000 8111 	beq.w	800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	2b02      	cmp	r3, #2
 800c08a:	f000 8083 	beq.w	800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	2b02      	cmp	r3, #2
 800c092:	f200 80a1 	bhi.w	800c1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d003      	beq.n	800c0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d056      	beq.n	800c150 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c0a2:	e099      	b.n	800c1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0a4:	4b88      	ldr	r3, [pc, #544]	; (800c2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f003 0320 	and.w	r3, r3, #32
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d02d      	beq.n	800c10c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c0b0:	4b85      	ldr	r3, [pc, #532]	; (800c2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	08db      	lsrs	r3, r3, #3
 800c0b6:	f003 0303 	and.w	r3, r3, #3
 800c0ba:	4a84      	ldr	r2, [pc, #528]	; (800c2cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c0bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c0c0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	ee07 3a90 	vmov	s15, r3
 800c0c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	ee07 3a90 	vmov	s15, r3
 800c0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0da:	4b7b      	ldr	r3, [pc, #492]	; (800c2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0e2:	ee07 3a90 	vmov	s15, r3
 800c0e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c2d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c0f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c102:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c106:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c10a:	e087      	b.n	800c21c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	ee07 3a90 	vmov	s15, r3
 800c112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c116:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c2d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c11a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c11e:	4b6a      	ldr	r3, [pc, #424]	; (800c2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c126:	ee07 3a90 	vmov	s15, r3
 800c12a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c12e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c132:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c2d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c13a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c13e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c14a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c14e:	e065      	b.n	800c21c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	ee07 3a90 	vmov	s15, r3
 800c156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c15a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c2d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c15e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c162:	4b59      	ldr	r3, [pc, #356]	; (800c2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c16a:	ee07 3a90 	vmov	s15, r3
 800c16e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c172:	ed97 6a03 	vldr	s12, [r7, #12]
 800c176:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c2d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c17a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c17e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c18a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c18e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c192:	e043      	b.n	800c21c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	ee07 3a90 	vmov	s15, r3
 800c19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c19e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c2dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c1a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1a6:	4b48      	ldr	r3, [pc, #288]	; (800c2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ae:	ee07 3a90 	vmov	s15, r3
 800c1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c2d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c1be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1d6:	e021      	b.n	800c21c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	ee07 3a90 	vmov	s15, r3
 800c1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c2d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c1e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ea:	4b37      	ldr	r3, [pc, #220]	; (800c2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1f2:	ee07 3a90 	vmov	s15, r3
 800c1f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c2d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c20a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c20e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c212:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c216:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c21a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c21c:	4b2a      	ldr	r3, [pc, #168]	; (800c2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c220:	0a5b      	lsrs	r3, r3, #9
 800c222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c226:	ee07 3a90 	vmov	s15, r3
 800c22a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c22e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c232:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c236:	edd7 6a07 	vldr	s13, [r7, #28]
 800c23a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c23e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c242:	ee17 2a90 	vmov	r2, s15
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c24a:	4b1f      	ldr	r3, [pc, #124]	; (800c2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c24e:	0c1b      	lsrs	r3, r3, #16
 800c250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c254:	ee07 3a90 	vmov	s15, r3
 800c258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c25c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c260:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c264:	edd7 6a07 	vldr	s13, [r7, #28]
 800c268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c26c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c270:	ee17 2a90 	vmov	r2, s15
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c278:	4b13      	ldr	r3, [pc, #76]	; (800c2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c27c:	0e1b      	lsrs	r3, r3, #24
 800c27e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c282:	ee07 3a90 	vmov	s15, r3
 800c286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c28a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c28e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c292:	edd7 6a07 	vldr	s13, [r7, #28]
 800c296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c29a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c29e:	ee17 2a90 	vmov	r2, s15
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c2a6:	e008      	b.n	800c2ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	609a      	str	r2, [r3, #8]
}
 800c2ba:	bf00      	nop
 800c2bc:	3724      	adds	r7, #36	; 0x24
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	58024400 	.word	0x58024400
 800c2cc:	03d09000 	.word	0x03d09000
 800c2d0:	46000000 	.word	0x46000000
 800c2d4:	4c742400 	.word	0x4c742400
 800c2d8:	4a742400 	.word	0x4a742400
 800c2dc:	4bbebc20 	.word	0x4bbebc20

0800c2e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b089      	sub	sp, #36	; 0x24
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c2e8:	4ba1      	ldr	r3, [pc, #644]	; (800c570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ec:	f003 0303 	and.w	r3, r3, #3
 800c2f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c2f2:	4b9f      	ldr	r3, [pc, #636]	; (800c570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2f6:	0d1b      	lsrs	r3, r3, #20
 800c2f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c2fe:	4b9c      	ldr	r3, [pc, #624]	; (800c570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c302:	0a1b      	lsrs	r3, r3, #8
 800c304:	f003 0301 	and.w	r3, r3, #1
 800c308:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c30a:	4b99      	ldr	r3, [pc, #612]	; (800c570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c30e:	08db      	lsrs	r3, r3, #3
 800c310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c314:	693a      	ldr	r2, [r7, #16]
 800c316:	fb02 f303 	mul.w	r3, r2, r3
 800c31a:	ee07 3a90 	vmov	s15, r3
 800c31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c322:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f000 8111 	beq.w	800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	2b02      	cmp	r3, #2
 800c332:	f000 8083 	beq.w	800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	2b02      	cmp	r3, #2
 800c33a:	f200 80a1 	bhi.w	800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d003      	beq.n	800c34c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	2b01      	cmp	r3, #1
 800c348:	d056      	beq.n	800c3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c34a:	e099      	b.n	800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c34c:	4b88      	ldr	r3, [pc, #544]	; (800c570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f003 0320 	and.w	r3, r3, #32
 800c354:	2b00      	cmp	r3, #0
 800c356:	d02d      	beq.n	800c3b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c358:	4b85      	ldr	r3, [pc, #532]	; (800c570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	08db      	lsrs	r3, r3, #3
 800c35e:	f003 0303 	and.w	r3, r3, #3
 800c362:	4a84      	ldr	r2, [pc, #528]	; (800c574 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c364:	fa22 f303 	lsr.w	r3, r2, r3
 800c368:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	ee07 3a90 	vmov	s15, r3
 800c370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	ee07 3a90 	vmov	s15, r3
 800c37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c37e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c382:	4b7b      	ldr	r3, [pc, #492]	; (800c570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c38a:	ee07 3a90 	vmov	s15, r3
 800c38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c392:	ed97 6a03 	vldr	s12, [r7, #12]
 800c396:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c39a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c39e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c3b2:	e087      	b.n	800c4c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	ee07 3a90 	vmov	s15, r3
 800c3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c57c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c3c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3c6:	4b6a      	ldr	r3, [pc, #424]	; (800c570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ce:	ee07 3a90 	vmov	s15, r3
 800c3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3da:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c3de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3f6:	e065      	b.n	800c4c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	ee07 3a90 	vmov	s15, r3
 800c3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c402:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c580 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c40a:	4b59      	ldr	r3, [pc, #356]	; (800c570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c412:	ee07 3a90 	vmov	s15, r3
 800c416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c41a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c41e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c42a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c43a:	e043      	b.n	800c4c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	ee07 3a90 	vmov	s15, r3
 800c442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c446:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c44a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c44e:	4b48      	ldr	r3, [pc, #288]	; (800c570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c456:	ee07 3a90 	vmov	s15, r3
 800c45a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c45e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c462:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c46a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c46e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c47a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c47e:	e021      	b.n	800c4c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	ee07 3a90 	vmov	s15, r3
 800c486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c48a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c580 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c48e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c492:	4b37      	ldr	r3, [pc, #220]	; (800c570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c49a:	ee07 3a90 	vmov	s15, r3
 800c49e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c4c4:	4b2a      	ldr	r3, [pc, #168]	; (800c570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c8:	0a5b      	lsrs	r3, r3, #9
 800c4ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4ce:	ee07 3a90 	vmov	s15, r3
 800c4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4de:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4ea:	ee17 2a90 	vmov	r2, s15
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c4f2:	4b1f      	ldr	r3, [pc, #124]	; (800c570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f6:	0c1b      	lsrs	r3, r3, #16
 800c4f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4fc:	ee07 3a90 	vmov	s15, r3
 800c500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c504:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c508:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c50c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c518:	ee17 2a90 	vmov	r2, s15
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c520:	4b13      	ldr	r3, [pc, #76]	; (800c570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c524:	0e1b      	lsrs	r3, r3, #24
 800c526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c52a:	ee07 3a90 	vmov	s15, r3
 800c52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c53a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c53e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c546:	ee17 2a90 	vmov	r2, s15
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c54e:	e008      	b.n	800c562 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	609a      	str	r2, [r3, #8]
}
 800c562:	bf00      	nop
 800c564:	3724      	adds	r7, #36	; 0x24
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	58024400 	.word	0x58024400
 800c574:	03d09000 	.word	0x03d09000
 800c578:	46000000 	.word	0x46000000
 800c57c:	4c742400 	.word	0x4c742400
 800c580:	4a742400 	.word	0x4a742400
 800c584:	4bbebc20 	.word	0x4bbebc20

0800c588 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c592:	2300      	movs	r3, #0
 800c594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c596:	4b53      	ldr	r3, [pc, #332]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c59a:	f003 0303 	and.w	r3, r3, #3
 800c59e:	2b03      	cmp	r3, #3
 800c5a0:	d101      	bne.n	800c5a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e099      	b.n	800c6da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c5a6:	4b4f      	ldr	r3, [pc, #316]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a4e      	ldr	r2, [pc, #312]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c5ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c5b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5b2:	f7f8 fa3d 	bl	8004a30 <HAL_GetTick>
 800c5b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5b8:	e008      	b.n	800c5cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c5ba:	f7f8 fa39 	bl	8004a30 <HAL_GetTick>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	1ad3      	subs	r3, r2, r3
 800c5c4:	2b02      	cmp	r3, #2
 800c5c6:	d901      	bls.n	800c5cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c5c8:	2303      	movs	r3, #3
 800c5ca:	e086      	b.n	800c6da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5cc:	4b45      	ldr	r3, [pc, #276]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d1f0      	bne.n	800c5ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c5d8:	4b42      	ldr	r3, [pc, #264]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	031b      	lsls	r3, r3, #12
 800c5e6:	493f      	ldr	r1, [pc, #252]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	628b      	str	r3, [r1, #40]	; 0x28
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	3b01      	subs	r3, #1
 800c5fc:	025b      	lsls	r3, r3, #9
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	431a      	orrs	r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	3b01      	subs	r3, #1
 800c608:	041b      	lsls	r3, r3, #16
 800c60a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c60e:	431a      	orrs	r2, r3
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	3b01      	subs	r3, #1
 800c616:	061b      	lsls	r3, r3, #24
 800c618:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c61c:	4931      	ldr	r1, [pc, #196]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c61e:	4313      	orrs	r3, r2
 800c620:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c622:	4b30      	ldr	r3, [pc, #192]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c626:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	695b      	ldr	r3, [r3, #20]
 800c62e:	492d      	ldr	r1, [pc, #180]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c630:	4313      	orrs	r3, r2
 800c632:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c634:	4b2b      	ldr	r3, [pc, #172]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c638:	f023 0220 	bic.w	r2, r3, #32
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	699b      	ldr	r3, [r3, #24]
 800c640:	4928      	ldr	r1, [pc, #160]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c642:	4313      	orrs	r3, r2
 800c644:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c646:	4b27      	ldr	r3, [pc, #156]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64a:	4a26      	ldr	r2, [pc, #152]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c64c:	f023 0310 	bic.w	r3, r3, #16
 800c650:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c652:	4b24      	ldr	r3, [pc, #144]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c654:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c656:	4b24      	ldr	r3, [pc, #144]	; (800c6e8 <RCCEx_PLL2_Config+0x160>)
 800c658:	4013      	ands	r3, r2
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	69d2      	ldr	r2, [r2, #28]
 800c65e:	00d2      	lsls	r2, r2, #3
 800c660:	4920      	ldr	r1, [pc, #128]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c662:	4313      	orrs	r3, r2
 800c664:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c666:	4b1f      	ldr	r3, [pc, #124]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c66a:	4a1e      	ldr	r2, [pc, #120]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c66c:	f043 0310 	orr.w	r3, r3, #16
 800c670:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d106      	bne.n	800c686 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c678:	4b1a      	ldr	r3, [pc, #104]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c67c:	4a19      	ldr	r2, [pc, #100]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c67e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c682:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c684:	e00f      	b.n	800c6a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d106      	bne.n	800c69a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c68c:	4b15      	ldr	r3, [pc, #84]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c690:	4a14      	ldr	r2, [pc, #80]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c696:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c698:	e005      	b.n	800c6a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c69a:	4b12      	ldr	r3, [pc, #72]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69e:	4a11      	ldr	r2, [pc, #68]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c6a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c6a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c6a6:	4b0f      	ldr	r3, [pc, #60]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a0e      	ldr	r2, [pc, #56]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c6ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c6b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6b2:	f7f8 f9bd 	bl	8004a30 <HAL_GetTick>
 800c6b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6b8:	e008      	b.n	800c6cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c6ba:	f7f8 f9b9 	bl	8004a30 <HAL_GetTick>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	1ad3      	subs	r3, r2, r3
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	d901      	bls.n	800c6cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c6c8:	2303      	movs	r3, #3
 800c6ca:	e006      	b.n	800c6da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6cc:	4b05      	ldr	r3, [pc, #20]	; (800c6e4 <RCCEx_PLL2_Config+0x15c>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d0f0      	beq.n	800c6ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	58024400 	.word	0x58024400
 800c6e8:	ffff0007 	.word	0xffff0007

0800c6ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c6fa:	4b53      	ldr	r3, [pc, #332]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6fe:	f003 0303 	and.w	r3, r3, #3
 800c702:	2b03      	cmp	r3, #3
 800c704:	d101      	bne.n	800c70a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c706:	2301      	movs	r3, #1
 800c708:	e099      	b.n	800c83e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c70a:	4b4f      	ldr	r3, [pc, #316]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a4e      	ldr	r2, [pc, #312]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c716:	f7f8 f98b 	bl	8004a30 <HAL_GetTick>
 800c71a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c71c:	e008      	b.n	800c730 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c71e:	f7f8 f987 	bl	8004a30 <HAL_GetTick>
 800c722:	4602      	mov	r2, r0
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	1ad3      	subs	r3, r2, r3
 800c728:	2b02      	cmp	r3, #2
 800c72a:	d901      	bls.n	800c730 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c72c:	2303      	movs	r3, #3
 800c72e:	e086      	b.n	800c83e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c730:	4b45      	ldr	r3, [pc, #276]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1f0      	bne.n	800c71e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c73c:	4b42      	ldr	r3, [pc, #264]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c740:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	051b      	lsls	r3, r3, #20
 800c74a:	493f      	ldr	r1, [pc, #252]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c74c:	4313      	orrs	r3, r2
 800c74e:	628b      	str	r3, [r1, #40]	; 0x28
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	3b01      	subs	r3, #1
 800c756:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	689b      	ldr	r3, [r3, #8]
 800c75e:	3b01      	subs	r3, #1
 800c760:	025b      	lsls	r3, r3, #9
 800c762:	b29b      	uxth	r3, r3
 800c764:	431a      	orrs	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	3b01      	subs	r3, #1
 800c76c:	041b      	lsls	r3, r3, #16
 800c76e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c772:	431a      	orrs	r2, r3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	691b      	ldr	r3, [r3, #16]
 800c778:	3b01      	subs	r3, #1
 800c77a:	061b      	lsls	r3, r3, #24
 800c77c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c780:	4931      	ldr	r1, [pc, #196]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c782:	4313      	orrs	r3, r2
 800c784:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c786:	4b30      	ldr	r3, [pc, #192]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	695b      	ldr	r3, [r3, #20]
 800c792:	492d      	ldr	r1, [pc, #180]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c794:	4313      	orrs	r3, r2
 800c796:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c798:	4b2b      	ldr	r3, [pc, #172]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c79c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	699b      	ldr	r3, [r3, #24]
 800c7a4:	4928      	ldr	r1, [pc, #160]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c7aa:	4b27      	ldr	r3, [pc, #156]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ae:	4a26      	ldr	r2, [pc, #152]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c7b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c7b6:	4b24      	ldr	r3, [pc, #144]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c7b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7ba:	4b24      	ldr	r3, [pc, #144]	; (800c84c <RCCEx_PLL3_Config+0x160>)
 800c7bc:	4013      	ands	r3, r2
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	69d2      	ldr	r2, [r2, #28]
 800c7c2:	00d2      	lsls	r2, r2, #3
 800c7c4:	4920      	ldr	r1, [pc, #128]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c7ca:	4b1f      	ldr	r3, [pc, #124]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ce:	4a1e      	ldr	r2, [pc, #120]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c7d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d106      	bne.n	800c7ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c7dc:	4b1a      	ldr	r3, [pc, #104]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e0:	4a19      	ldr	r2, [pc, #100]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c7e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c7e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c7e8:	e00f      	b.n	800c80a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d106      	bne.n	800c7fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c7f0:	4b15      	ldr	r3, [pc, #84]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f4:	4a14      	ldr	r2, [pc, #80]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c7f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c7fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c7fc:	e005      	b.n	800c80a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c7fe:	4b12      	ldr	r3, [pc, #72]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c802:	4a11      	ldr	r2, [pc, #68]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c804:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c808:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c80a:	4b0f      	ldr	r3, [pc, #60]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a0e      	ldr	r2, [pc, #56]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c816:	f7f8 f90b 	bl	8004a30 <HAL_GetTick>
 800c81a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c81c:	e008      	b.n	800c830 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c81e:	f7f8 f907 	bl	8004a30 <HAL_GetTick>
 800c822:	4602      	mov	r2, r0
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	2b02      	cmp	r3, #2
 800c82a:	d901      	bls.n	800c830 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c82c:	2303      	movs	r3, #3
 800c82e:	e006      	b.n	800c83e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c830:	4b05      	ldr	r3, [pc, #20]	; (800c848 <RCCEx_PLL3_Config+0x15c>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d0f0      	beq.n	800c81e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	58024400 	.word	0x58024400
 800c84c:	ffff0007 	.word	0xffff0007

0800c850 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800c858:	2300      	movs	r3, #0
 800c85a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d101      	bne.n	800c866 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800c862:	2301      	movs	r3, #1
 800c864:	e0eb      	b.n	800ca3e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a75      	ldr	r2, [pc, #468]	; (800ca48 <HAL_SPI_Init+0x1f8>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d00f      	beq.n	800c896 <HAL_SPI_Init+0x46>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a74      	ldr	r2, [pc, #464]	; (800ca4c <HAL_SPI_Init+0x1fc>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d00a      	beq.n	800c896 <HAL_SPI_Init+0x46>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a72      	ldr	r2, [pc, #456]	; (800ca50 <HAL_SPI_Init+0x200>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d005      	beq.n	800c896 <HAL_SPI_Init+0x46>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	68db      	ldr	r3, [r3, #12]
 800c88e:	2b0f      	cmp	r3, #15
 800c890:	d901      	bls.n	800c896 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800c892:	2301      	movs	r3, #1
 800c894:	e0d3      	b.n	800ca3e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f001 f87a 	bl	800d990 <SPI_GetPacketSize>
 800c89c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a69      	ldr	r2, [pc, #420]	; (800ca48 <HAL_SPI_Init+0x1f8>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d00c      	beq.n	800c8c2 <HAL_SPI_Init+0x72>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a67      	ldr	r2, [pc, #412]	; (800ca4c <HAL_SPI_Init+0x1fc>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d007      	beq.n	800c8c2 <HAL_SPI_Init+0x72>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a66      	ldr	r2, [pc, #408]	; (800ca50 <HAL_SPI_Init+0x200>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d002      	beq.n	800c8c2 <HAL_SPI_Init+0x72>
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	2b08      	cmp	r3, #8
 800c8c0:	d811      	bhi.n	800c8e6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c8c6:	4a60      	ldr	r2, [pc, #384]	; (800ca48 <HAL_SPI_Init+0x1f8>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d009      	beq.n	800c8e0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a5e      	ldr	r2, [pc, #376]	; (800ca4c <HAL_SPI_Init+0x1fc>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d004      	beq.n	800c8e0 <HAL_SPI_Init+0x90>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4a5d      	ldr	r2, [pc, #372]	; (800ca50 <HAL_SPI_Init+0x200>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d104      	bne.n	800c8ea <HAL_SPI_Init+0x9a>
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	2b10      	cmp	r3, #16
 800c8e4:	d901      	bls.n	800c8ea <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	e0a9      	b.n	800ca3e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d106      	bne.n	800c904 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f7f6 ff8c 	bl	800381c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2202      	movs	r2, #2
 800c908:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f022 0201 	bic.w	r2, r2, #1
 800c91a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	699b      	ldr	r3, [r3, #24]
 800c920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c924:	d119      	bne.n	800c95a <HAL_SPI_Init+0x10a>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c92e:	d103      	bne.n	800c938 <HAL_SPI_Init+0xe8>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c934:	2b00      	cmp	r3, #0
 800c936:	d008      	beq.n	800c94a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d10c      	bne.n	800c95a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c944:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c948:	d107      	bne.n	800c95a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c958:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	69da      	ldr	r2, [r3, #28]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c962:	431a      	orrs	r2, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	431a      	orrs	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c96c:	ea42 0103 	orr.w	r1, r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	68da      	ldr	r2, [r3, #12]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	430a      	orrs	r2, r1
 800c97a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c984:	431a      	orrs	r2, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c98a:	431a      	orrs	r2, r3
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	699b      	ldr	r3, [r3, #24]
 800c990:	431a      	orrs	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	691b      	ldr	r3, [r3, #16]
 800c996:	431a      	orrs	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	695b      	ldr	r3, [r3, #20]
 800c99c:	431a      	orrs	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	431a      	orrs	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	431a      	orrs	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9ae:	431a      	orrs	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	431a      	orrs	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9ba:	ea42 0103 	orr.w	r1, r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	430a      	orrs	r2, r1
 800c9c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d113      	bne.n	800c9fa <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9e4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c9f8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f022 0201 	bic.w	r2, r2, #1
 800ca08:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00a      	beq.n	800ca2c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	430a      	orrs	r2, r1
 800ca2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3710      	adds	r7, #16
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	40013000 	.word	0x40013000
 800ca4c:	40003800 	.word	0x40003800
 800ca50:	40003c00 	.word	0x40003c00

0800ca54 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b08a      	sub	sp, #40	; 0x28
 800ca58:	af02      	add	r7, sp, #8
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	603b      	str	r3, [r7, #0]
 800ca60:	4613      	mov	r3, r2
 800ca62:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	3320      	adds	r3, #32
 800ca6a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d101      	bne.n	800ca7e <HAL_SPI_Transmit+0x2a>
 800ca7a:	2302      	movs	r3, #2
 800ca7c:	e1d7      	b.n	800ce2e <HAL_SPI_Transmit+0x3da>
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2201      	movs	r2, #1
 800ca82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ca86:	f7f7 ffd3 	bl	8004a30 <HAL_GetTick>
 800ca8a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d007      	beq.n	800caa8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ca98:	2302      	movs	r3, #2
 800ca9a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800caa4:	7efb      	ldrb	r3, [r7, #27]
 800caa6:	e1c2      	b.n	800ce2e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d002      	beq.n	800cab4 <HAL_SPI_Transmit+0x60>
 800caae:	88fb      	ldrh	r3, [r7, #6]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d107      	bne.n	800cac4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800cab4:	2301      	movs	r3, #1
 800cab6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2200      	movs	r2, #0
 800cabc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cac0:	7efb      	ldrb	r3, [r7, #27]
 800cac2:	e1b4      	b.n	800ce2e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2203      	movs	r2, #3
 800cac8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2200      	movs	r2, #0
 800cad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	68ba      	ldr	r2, [r7, #8]
 800cad8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	88fa      	ldrh	r2, [r7, #6]
 800cade:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	88fa      	ldrh	r2, [r7, #6]
 800cae6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2200      	movs	r2, #0
 800caee:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2200      	movs	r2, #0
 800cb04:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cb14:	d107      	bne.n	800cb26 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb24:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	685a      	ldr	r2, [r3, #4]
 800cb2c:	4b96      	ldr	r3, [pc, #600]	; (800cd88 <HAL_SPI_Transmit+0x334>)
 800cb2e:	4013      	ands	r3, r2
 800cb30:	88f9      	ldrh	r1, [r7, #6]
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	6812      	ldr	r2, [r2, #0]
 800cb36:	430b      	orrs	r3, r1
 800cb38:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f042 0201 	orr.w	r2, r2, #1
 800cb48:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb52:	d107      	bne.n	800cb64 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	2b0f      	cmp	r3, #15
 800cb6a:	d947      	bls.n	800cbfc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cb6c:	e03f      	b.n	800cbee <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	695b      	ldr	r3, [r3, #20]
 800cb74:	f003 0302 	and.w	r3, r3, #2
 800cb78:	2b02      	cmp	r3, #2
 800cb7a:	d114      	bne.n	800cba6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	6812      	ldr	r2, [r2, #0]
 800cb86:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb8c:	1d1a      	adds	r2, r3, #4
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	b29a      	uxth	r2, r3
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cba4:	e023      	b.n	800cbee <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cba6:	f7f7 ff43 	bl	8004a30 <HAL_GetTick>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	1ad3      	subs	r3, r2, r3
 800cbb0:	683a      	ldr	r2, [r7, #0]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d803      	bhi.n	800cbbe <HAL_SPI_Transmit+0x16a>
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbbc:	d102      	bne.n	800cbc4 <HAL_SPI_Transmit+0x170>
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d114      	bne.n	800cbee <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	f000 fe15 	bl	800d7f4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	e11f      	b.n	800ce2e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d1b9      	bne.n	800cb6e <HAL_SPI_Transmit+0x11a>
 800cbfa:	e0f2      	b.n	800cde2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	2b07      	cmp	r3, #7
 800cc02:	f240 80e7 	bls.w	800cdd4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cc06:	e05d      	b.n	800ccc4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	695b      	ldr	r3, [r3, #20]
 800cc0e:	f003 0302 	and.w	r3, r3, #2
 800cc12:	2b02      	cmp	r3, #2
 800cc14:	d132      	bne.n	800cc7c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d918      	bls.n	800cc54 <HAL_SPI_Transmit+0x200>
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d014      	beq.n	800cc54 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	6812      	ldr	r2, [r2, #0]
 800cc34:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc3a:	1d1a      	adds	r2, r3, #4
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	3b02      	subs	r3, #2
 800cc4a:	b29a      	uxth	r2, r3
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cc52:	e037      	b.n	800ccc4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc58:	881a      	ldrh	r2, [r3, #0]
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc62:	1c9a      	adds	r2, r3, #2
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	3b01      	subs	r3, #1
 800cc72:	b29a      	uxth	r2, r3
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cc7a:	e023      	b.n	800ccc4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc7c:	f7f7 fed8 	bl	8004a30 <HAL_GetTick>
 800cc80:	4602      	mov	r2, r0
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	1ad3      	subs	r3, r2, r3
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d803      	bhi.n	800cc94 <HAL_SPI_Transmit+0x240>
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc92:	d102      	bne.n	800cc9a <HAL_SPI_Transmit+0x246>
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d114      	bne.n	800ccc4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f000 fdaa 	bl	800d7f4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2200      	movs	r2, #0
 800cca4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e0b4      	b.n	800ce2e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ccca:	b29b      	uxth	r3, r3
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d19b      	bne.n	800cc08 <HAL_SPI_Transmit+0x1b4>
 800ccd0:	e087      	b.n	800cde2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	695b      	ldr	r3, [r3, #20]
 800ccd8:	f003 0302 	and.w	r3, r3, #2
 800ccdc:	2b02      	cmp	r3, #2
 800ccde:	d155      	bne.n	800cd8c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	2b03      	cmp	r3, #3
 800ccea:	d918      	bls.n	800cd1e <HAL_SPI_Transmit+0x2ca>
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccf0:	2b40      	cmp	r3, #64	; 0x40
 800ccf2:	d914      	bls.n	800cd1e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	6812      	ldr	r2, [r2, #0]
 800ccfe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd04:	1d1a      	adds	r2, r3, #4
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	3b04      	subs	r3, #4
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cd1c:	e05a      	b.n	800cdd4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d917      	bls.n	800cd5a <HAL_SPI_Transmit+0x306>
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d013      	beq.n	800cd5a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd36:	881a      	ldrh	r2, [r3, #0]
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd40:	1c9a      	adds	r2, r3, #2
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	3b02      	subs	r3, #2
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cd58:	e03c      	b.n	800cdd4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	3320      	adds	r3, #32
 800cd64:	7812      	ldrb	r2, [r2, #0]
 800cd66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd6c:	1c5a      	adds	r2, r3, #1
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cd84:	e026      	b.n	800cdd4 <HAL_SPI_Transmit+0x380>
 800cd86:	bf00      	nop
 800cd88:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd8c:	f7f7 fe50 	bl	8004a30 <HAL_GetTick>
 800cd90:	4602      	mov	r2, r0
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	1ad3      	subs	r3, r2, r3
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d803      	bhi.n	800cda4 <HAL_SPI_Transmit+0x350>
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda2:	d102      	bne.n	800cdaa <HAL_SPI_Transmit+0x356>
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d114      	bne.n	800cdd4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f000 fd22 	bl	800d7f4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	e02c      	b.n	800ce2e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f47f af78 	bne.w	800ccd2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	9300      	str	r3, [sp, #0]
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	2200      	movs	r2, #0
 800cdea:	2108      	movs	r1, #8
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	f000 fda1 	bl	800d934 <SPI_WaitOnFlagUntilTimeout>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d007      	beq.n	800ce08 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdfe:	f043 0220 	orr.w	r2, r3, #32
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f000 fcf3 	bl	800d7f4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2201      	movs	r2, #1
 800ce1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d001      	beq.n	800ce2c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e000      	b.n	800ce2e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800ce2c:	7efb      	ldrb	r3, [r7, #27]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3720      	adds	r7, #32
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop

0800ce38 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b08a      	sub	sp, #40	; 0x28
 800ce3c:	af02      	add	r7, sp, #8
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	603b      	str	r3, [r7, #0]
 800ce44:	4613      	mov	r3, r2
 800ce46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	3330      	adds	r3, #48	; 0x30
 800ce52:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce5c:	d112      	bne.n	800ce84 <HAL_SPI_Receive+0x4c>
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d10e      	bne.n	800ce84 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2204      	movs	r2, #4
 800ce6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ce6e:	88fa      	ldrh	r2, [r7, #6]
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	9300      	str	r3, [sp, #0]
 800ce74:	4613      	mov	r3, r2
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	68b9      	ldr	r1, [r7, #8]
 800ce7a:	68f8      	ldr	r0, [r7, #12]
 800ce7c:	f000 f9ce 	bl	800d21c <HAL_SPI_TransmitReceive>
 800ce80:	4603      	mov	r3, r0
 800ce82:	e1c7      	b.n	800d214 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d101      	bne.n	800ce92 <HAL_SPI_Receive+0x5a>
 800ce8e:	2302      	movs	r3, #2
 800ce90:	e1c0      	b.n	800d214 <HAL_SPI_Receive+0x3dc>
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2201      	movs	r2, #1
 800ce96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ce9a:	f7f7 fdc9 	bl	8004a30 <HAL_GetTick>
 800ce9e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d007      	beq.n	800cebc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800ceac:	2302      	movs	r3, #2
 800ceae:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ceb8:	7ffb      	ldrb	r3, [r7, #31]
 800ceba:	e1ab      	b.n	800d214 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d002      	beq.n	800cec8 <HAL_SPI_Receive+0x90>
 800cec2:	88fb      	ldrh	r3, [r7, #6]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d107      	bne.n	800ced8 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800cec8:	2301      	movs	r3, #1
 800ceca:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ced4:	7ffb      	ldrb	r3, [r7, #31]
 800ced6:	e19d      	b.n	800d214 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2204      	movs	r2, #4
 800cedc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	68ba      	ldr	r2, [r7, #8]
 800ceec:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	88fa      	ldrh	r2, [r7, #6]
 800cef2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	88fa      	ldrh	r2, [r7, #6]
 800cefa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2200      	movs	r2, #0
 800cf02:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2200      	movs	r2, #0
 800cf08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cf28:	d107      	bne.n	800cf3a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cf38:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	685a      	ldr	r2, [r3, #4]
 800cf40:	4b94      	ldr	r3, [pc, #592]	; (800d194 <HAL_SPI_Receive+0x35c>)
 800cf42:	4013      	ands	r3, r2
 800cf44:	88f9      	ldrh	r1, [r7, #6]
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	6812      	ldr	r2, [r2, #0]
 800cf4a:	430b      	orrs	r3, r1
 800cf4c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f042 0201 	orr.w	r2, r2, #1
 800cf5c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf66:	d107      	bne.n	800cf78 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf76:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	2b0f      	cmp	r3, #15
 800cf7e:	d948      	bls.n	800d012 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cf80:	e040      	b.n	800d004 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	695a      	ldr	r2, [r3, #20]
 800cf88:	f248 0308 	movw	r3, #32776	; 0x8008
 800cf8c:	4013      	ands	r3, r2
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d014      	beq.n	800cfbc <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cf9c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfa2:	1d1a      	adds	r2, r3, #4
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	3b01      	subs	r3, #1
 800cfb2:	b29a      	uxth	r2, r3
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cfba:	e023      	b.n	800d004 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cfbc:	f7f7 fd38 	bl	8004a30 <HAL_GetTick>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	1ad3      	subs	r3, r2, r3
 800cfc6:	683a      	ldr	r2, [r7, #0]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d803      	bhi.n	800cfd4 <HAL_SPI_Receive+0x19c>
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd2:	d102      	bne.n	800cfda <HAL_SPI_Receive+0x1a2>
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d114      	bne.n	800d004 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f000 fc0a 	bl	800d7f4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d000:	2301      	movs	r3, #1
 800d002:	e107      	b.n	800d214 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d1b8      	bne.n	800cf82 <HAL_SPI_Receive+0x14a>
 800d010:	e0ed      	b.n	800d1ee <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	2b07      	cmp	r3, #7
 800d018:	f240 80e2 	bls.w	800d1e0 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d01c:	e05b      	b.n	800d0d6 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	695b      	ldr	r3, [r3, #20]
 800d024:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d030      	beq.n	800d08e <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	695b      	ldr	r3, [r3, #20]
 800d032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d036:	2b00      	cmp	r3, #0
 800d038:	d014      	beq.n	800d064 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d042:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d044:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d04a:	1d1a      	adds	r2, r3, #4
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d056:	b29b      	uxth	r3, r3
 800d058:	3b02      	subs	r3, #2
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d062:	e038      	b.n	800d0d6 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d068:	69ba      	ldr	r2, [r7, #24]
 800d06a:	8812      	ldrh	r2, [r2, #0]
 800d06c:	b292      	uxth	r2, r2
 800d06e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d074:	1c9a      	adds	r2, r3, #2
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d080:	b29b      	uxth	r3, r3
 800d082:	3b01      	subs	r3, #1
 800d084:	b29a      	uxth	r2, r3
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d08c:	e023      	b.n	800d0d6 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d08e:	f7f7 fccf 	bl	8004a30 <HAL_GetTick>
 800d092:	4602      	mov	r2, r0
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	1ad3      	subs	r3, r2, r3
 800d098:	683a      	ldr	r2, [r7, #0]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d803      	bhi.n	800d0a6 <HAL_SPI_Receive+0x26e>
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0a4:	d102      	bne.n	800d0ac <HAL_SPI_Receive+0x274>
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d114      	bne.n	800d0d6 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d0ac:	68f8      	ldr	r0, [r7, #12]
 800d0ae:	f000 fba1 	bl	800d7f4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e09e      	b.n	800d214 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d19d      	bne.n	800d01e <HAL_SPI_Receive+0x1e6>
 800d0e2:	e084      	b.n	800d1ee <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	695b      	ldr	r3, [r3, #20]
 800d0ea:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d052      	beq.n	800d198 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	695b      	ldr	r3, [r3, #20]
 800d0f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d014      	beq.n	800d12a <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d108:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d10a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d110:	1d1a      	adds	r2, r3, #4
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	3b04      	subs	r3, #4
 800d120:	b29a      	uxth	r2, r3
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d128:	e05a      	b.n	800d1e0 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	695b      	ldr	r3, [r3, #20]
 800d130:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d138:	d914      	bls.n	800d164 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d13e:	69ba      	ldr	r2, [r7, #24]
 800d140:	8812      	ldrh	r2, [r2, #0]
 800d142:	b292      	uxth	r2, r2
 800d144:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d14a:	1c9a      	adds	r2, r3, #2
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d156:	b29b      	uxth	r3, r3
 800d158:	3b02      	subs	r3, #2
 800d15a:	b29a      	uxth	r2, r3
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d162:	e03d      	b.n	800d1e0 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d170:	7812      	ldrb	r2, [r2, #0]
 800d172:	b2d2      	uxtb	r2, r2
 800d174:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d17a:	1c5a      	adds	r2, r3, #1
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d186:	b29b      	uxth	r3, r3
 800d188:	3b01      	subs	r3, #1
 800d18a:	b29a      	uxth	r2, r3
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d192:	e025      	b.n	800d1e0 <HAL_SPI_Receive+0x3a8>
 800d194:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d198:	f7f7 fc4a 	bl	8004a30 <HAL_GetTick>
 800d19c:	4602      	mov	r2, r0
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	1ad3      	subs	r3, r2, r3
 800d1a2:	683a      	ldr	r2, [r7, #0]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d803      	bhi.n	800d1b0 <HAL_SPI_Receive+0x378>
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ae:	d102      	bne.n	800d1b6 <HAL_SPI_Receive+0x37e>
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d114      	bne.n	800d1e0 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d1b6:	68f8      	ldr	r0, [r7, #12]
 800d1b8:	f000 fb1c 	bl	800d7f4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d1dc:	2301      	movs	r3, #1
 800d1de:	e019      	b.n	800d214 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f47f af7b 	bne.w	800d0e4 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	f000 fb00 	bl	800d7f4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2201      	movs	r2, #1
 800d200:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d001      	beq.n	800d212 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800d20e:	2301      	movs	r3, #1
 800d210:	e000      	b.n	800d214 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800d212:	7ffb      	ldrb	r3, [r7, #31]
}
 800d214:	4618      	mov	r0, r3
 800d216:	3720      	adds	r7, #32
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b08e      	sub	sp, #56	; 0x38
 800d220:	af02      	add	r7, sp, #8
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
 800d228:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d22a:	2300      	movs	r3, #0
 800d22c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	3320      	adds	r3, #32
 800d236:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	3330      	adds	r3, #48	; 0x30
 800d23e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d246:	2b01      	cmp	r3, #1
 800d248:	d101      	bne.n	800d24e <HAL_SPI_TransmitReceive+0x32>
 800d24a:	2302      	movs	r3, #2
 800d24c:	e2ce      	b.n	800d7ec <HAL_SPI_TransmitReceive+0x5d0>
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2201      	movs	r2, #1
 800d252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d256:	f7f7 fbeb 	bl	8004a30 <HAL_GetTick>
 800d25a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800d25c:	887b      	ldrh	r3, [r7, #2]
 800d25e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800d260:	887b      	ldrh	r3, [r7, #2]
 800d262:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d26a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d272:	7efb      	ldrb	r3, [r7, #27]
 800d274:	2b01      	cmp	r3, #1
 800d276:	d014      	beq.n	800d2a2 <HAL_SPI_TransmitReceive+0x86>
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d27e:	d106      	bne.n	800d28e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d102      	bne.n	800d28e <HAL_SPI_TransmitReceive+0x72>
 800d288:	7efb      	ldrb	r3, [r7, #27]
 800d28a:	2b04      	cmp	r3, #4
 800d28c:	d009      	beq.n	800d2a2 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800d28e:	2302      	movs	r3, #2
 800d290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2200      	movs	r2, #0
 800d298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d29c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d2a0:	e2a4      	b.n	800d7ec <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d005      	beq.n	800d2b4 <HAL_SPI_TransmitReceive+0x98>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d002      	beq.n	800d2b4 <HAL_SPI_TransmitReceive+0x98>
 800d2ae:	887b      	ldrh	r3, [r7, #2]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d109      	bne.n	800d2c8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d2c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d2c6:	e291      	b.n	800d7ec <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	2b04      	cmp	r3, #4
 800d2d2:	d003      	beq.n	800d2dc <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2205      	movs	r2, #5
 800d2d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	887a      	ldrh	r2, [r7, #2]
 800d2ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	887a      	ldrh	r2, [r7, #2]
 800d2f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	68ba      	ldr	r2, [r7, #8]
 800d2fe:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	887a      	ldrh	r2, [r7, #2]
 800d304:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	887a      	ldrh	r2, [r7, #2]
 800d30c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2200      	movs	r2, #0
 800d314:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2200      	movs	r2, #0
 800d31a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	685a      	ldr	r2, [r3, #4]
 800d322:	4b9f      	ldr	r3, [pc, #636]	; (800d5a0 <HAL_SPI_TransmitReceive+0x384>)
 800d324:	4013      	ands	r3, r2
 800d326:	8879      	ldrh	r1, [r7, #2]
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	6812      	ldr	r2, [r2, #0]
 800d32c:	430b      	orrs	r3, r1
 800d32e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f042 0201 	orr.w	r2, r2, #1
 800d33e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d348:	d107      	bne.n	800d35a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d358:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	2b0f      	cmp	r3, #15
 800d360:	d970      	bls.n	800d444 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d362:	e068      	b.n	800d436 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	695b      	ldr	r3, [r3, #20]
 800d36a:	f003 0302 	and.w	r3, r3, #2
 800d36e:	2b02      	cmp	r3, #2
 800d370:	d11a      	bne.n	800d3a8 <HAL_SPI_TransmitReceive+0x18c>
 800d372:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d374:	2b00      	cmp	r3, #0
 800d376:	d017      	beq.n	800d3a8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	6812      	ldr	r2, [r2, #0]
 800d382:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d388:	1d1a      	adds	r2, r3, #4
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d394:	b29b      	uxth	r3, r3
 800d396:	3b01      	subs	r3, #1
 800d398:	b29a      	uxth	r2, r3
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	695a      	ldr	r2, [r3, #20]
 800d3ae:	f248 0308 	movw	r3, #32776	; 0x8008
 800d3b2:	4013      	ands	r3, r2
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d01a      	beq.n	800d3ee <HAL_SPI_TransmitReceive+0x1d2>
 800d3b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d017      	beq.n	800d3ee <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d3c8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3ce:	1d1a      	adds	r2, r3, #4
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	3b01      	subs	r3, #1
 800d3de:	b29a      	uxth	r2, r3
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d3ec:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d3ee:	f7f7 fb1f 	bl	8004a30 <HAL_GetTick>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	1ad3      	subs	r3, r2, r3
 800d3f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d803      	bhi.n	800d406 <HAL_SPI_TransmitReceive+0x1ea>
 800d3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d404:	d102      	bne.n	800d40c <HAL_SPI_TransmitReceive+0x1f0>
 800d406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d114      	bne.n	800d436 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d40c:	68f8      	ldr	r0, [r7, #12]
 800d40e:	f000 f9f1 	bl	800d7f4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2200      	movs	r2, #0
 800d416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d420:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2201      	movs	r2, #1
 800d42e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d432:	2301      	movs	r3, #1
 800d434:	e1da      	b.n	800d7ec <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d436:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d193      	bne.n	800d364 <HAL_SPI_TransmitReceive+0x148>
 800d43c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d190      	bne.n	800d364 <HAL_SPI_TransmitReceive+0x148>
 800d442:	e1ac      	b.n	800d79e <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	2b07      	cmp	r3, #7
 800d44a:	f240 81a0 	bls.w	800d78e <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d44e:	e0a9      	b.n	800d5a4 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	695b      	ldr	r3, [r3, #20]
 800d456:	f003 0302 	and.w	r3, r3, #2
 800d45a:	2b02      	cmp	r3, #2
 800d45c:	d139      	bne.n	800d4d2 <HAL_SPI_TransmitReceive+0x2b6>
 800d45e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d460:	2b00      	cmp	r3, #0
 800d462:	d036      	beq.n	800d4d2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d464:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d466:	2b01      	cmp	r3, #1
 800d468:	d91c      	bls.n	800d4a4 <HAL_SPI_TransmitReceive+0x288>
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d018      	beq.n	800d4a4 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	6812      	ldr	r2, [r2, #0]
 800d47c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d482:	1d1a      	adds	r2, r3, #4
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d48e:	b29b      	uxth	r3, r3
 800d490:	3b02      	subs	r3, #2
 800d492:	b29a      	uxth	r2, r3
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d4a2:	e016      	b.n	800d4d2 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4a8:	881a      	ldrh	r2, [r3, #0]
 800d4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4b2:	1c9a      	adds	r2, r3, #2
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	695b      	ldr	r3, [r3, #20]
 800d4d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d03a      	beq.n	800d556 <HAL_SPI_TransmitReceive+0x33a>
 800d4e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d037      	beq.n	800d556 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	695b      	ldr	r3, [r3, #20]
 800d4ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d018      	beq.n	800d526 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d4fe:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d504:	1d1a      	adds	r2, r3, #4
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d510:	b29b      	uxth	r3, r3
 800d512:	3b02      	subs	r3, #2
 800d514:	b29a      	uxth	r2, r3
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d522:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d524:	e017      	b.n	800d556 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d52a:	6a3a      	ldr	r2, [r7, #32]
 800d52c:	8812      	ldrh	r2, [r2, #0]
 800d52e:	b292      	uxth	r2, r2
 800d530:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d536:	1c9a      	adds	r2, r3, #2
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d542:	b29b      	uxth	r3, r3
 800d544:	3b01      	subs	r3, #1
 800d546:	b29a      	uxth	r2, r3
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d554:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d556:	f7f7 fa6b 	bl	8004a30 <HAL_GetTick>
 800d55a:	4602      	mov	r2, r0
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	1ad3      	subs	r3, r2, r3
 800d560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d562:	429a      	cmp	r2, r3
 800d564:	d803      	bhi.n	800d56e <HAL_SPI_TransmitReceive+0x352>
 800d566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d56c:	d102      	bne.n	800d574 <HAL_SPI_TransmitReceive+0x358>
 800d56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d570:	2b00      	cmp	r3, #0
 800d572:	d117      	bne.n	800d5a4 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f000 f93d 	bl	800d7f4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2200      	movs	r2, #0
 800d57e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d588:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2201      	movs	r2, #1
 800d596:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d59a:	2301      	movs	r3, #1
 800d59c:	e126      	b.n	800d7ec <HAL_SPI_TransmitReceive+0x5d0>
 800d59e:	bf00      	nop
 800d5a0:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d5a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	f47f af52 	bne.w	800d450 <HAL_SPI_TransmitReceive+0x234>
 800d5ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f47f af4e 	bne.w	800d450 <HAL_SPI_TransmitReceive+0x234>
 800d5b4:	e0f3      	b.n	800d79e <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	695b      	ldr	r3, [r3, #20]
 800d5bc:	f003 0302 	and.w	r3, r3, #2
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	d15a      	bne.n	800d67a <HAL_SPI_TransmitReceive+0x45e>
 800d5c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d057      	beq.n	800d67a <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d5ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5cc:	2b03      	cmp	r3, #3
 800d5ce:	d91c      	bls.n	800d60a <HAL_SPI_TransmitReceive+0x3ee>
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5d4:	2b40      	cmp	r3, #64	; 0x40
 800d5d6:	d918      	bls.n	800d60a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6812      	ldr	r2, [r2, #0]
 800d5e2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5e8:	1d1a      	adds	r2, r3, #4
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	3b04      	subs	r3, #4
 800d5f8:	b29a      	uxth	r2, r3
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d606:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d608:	e037      	b.n	800d67a <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d60a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d91b      	bls.n	800d648 <HAL_SPI_TransmitReceive+0x42c>
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d614:	2b00      	cmp	r3, #0
 800d616:	d017      	beq.n	800d648 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d61c:	881a      	ldrh	r2, [r3, #0]
 800d61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d620:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d626:	1c9a      	adds	r2, r3, #2
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d632:	b29b      	uxth	r3, r3
 800d634:	3b02      	subs	r3, #2
 800d636:	b29a      	uxth	r2, r3
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d644:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d646:	e018      	b.n	800d67a <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	3320      	adds	r3, #32
 800d652:	7812      	ldrb	r2, [r2, #0]
 800d654:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d65a:	1c5a      	adds	r2, r3, #1
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d666:	b29b      	uxth	r3, r3
 800d668:	3b01      	subs	r3, #1
 800d66a:	b29a      	uxth	r2, r3
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d678:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	695b      	ldr	r3, [r3, #20]
 800d680:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d684:	2b00      	cmp	r3, #0
 800d686:	d05e      	beq.n	800d746 <HAL_SPI_TransmitReceive+0x52a>
 800d688:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d05b      	beq.n	800d746 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	695b      	ldr	r3, [r3, #20]
 800d694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d018      	beq.n	800d6ce <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d6a6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6ac:	1d1a      	adds	r2, r3, #4
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	3b04      	subs	r3, #4
 800d6bc:	b29a      	uxth	r2, r3
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d6ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d6cc:	e03b      	b.n	800d746 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	695b      	ldr	r3, [r3, #20]
 800d6d4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d6d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6dc:	d918      	bls.n	800d710 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6e2:	6a3a      	ldr	r2, [r7, #32]
 800d6e4:	8812      	ldrh	r2, [r2, #0]
 800d6e6:	b292      	uxth	r2, r2
 800d6e8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6ee:	1c9a      	adds	r2, r3, #2
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	3b02      	subs	r3, #2
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d70c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d70e:	e01a      	b.n	800d746 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d71c:	7812      	ldrb	r2, [r2, #0]
 800d71e:	b2d2      	uxtb	r2, r2
 800d720:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d726:	1c5a      	adds	r2, r3, #1
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d732:	b29b      	uxth	r3, r3
 800d734:	3b01      	subs	r3, #1
 800d736:	b29a      	uxth	r2, r3
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d744:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d746:	f7f7 f973 	bl	8004a30 <HAL_GetTick>
 800d74a:	4602      	mov	r2, r0
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	1ad3      	subs	r3, r2, r3
 800d750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d752:	429a      	cmp	r2, r3
 800d754:	d803      	bhi.n	800d75e <HAL_SPI_TransmitReceive+0x542>
 800d756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d75c:	d102      	bne.n	800d764 <HAL_SPI_TransmitReceive+0x548>
 800d75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d760:	2b00      	cmp	r3, #0
 800d762:	d114      	bne.n	800d78e <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f000 f845 	bl	800d7f4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2200      	movs	r2, #0
 800d76e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d778:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2201      	movs	r2, #1
 800d786:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d78a:	2301      	movs	r3, #1
 800d78c:	e02e      	b.n	800d7ec <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d78e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d790:	2b00      	cmp	r3, #0
 800d792:	f47f af10 	bne.w	800d5b6 <HAL_SPI_TransmitReceive+0x39a>
 800d796:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f47f af0c 	bne.w	800d5b6 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a0:	9300      	str	r3, [sp, #0]
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	2108      	movs	r1, #8
 800d7a8:	68f8      	ldr	r0, [r7, #12]
 800d7aa:	f000 f8c3 	bl	800d934 <SPI_WaitOnFlagUntilTimeout>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d007      	beq.n	800d7c4 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7ba:	f043 0220 	orr.w	r2, r3, #32
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d7c4:	68f8      	ldr	r0, [r7, #12]
 800d7c6:	f000 f815 	bl	800d7f4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d001      	beq.n	800d7e8 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e001      	b.n	800d7ec <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800d7e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3730      	adds	r7, #48	; 0x30
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b085      	sub	sp, #20
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	695b      	ldr	r3, [r3, #20]
 800d802:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	699a      	ldr	r2, [r3, #24]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f042 0208 	orr.w	r2, r2, #8
 800d812:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	699a      	ldr	r2, [r3, #24]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f042 0210 	orr.w	r2, r2, #16
 800d822:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f022 0201 	bic.w	r2, r2, #1
 800d832:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	6919      	ldr	r1, [r3, #16]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	4b3c      	ldr	r3, [pc, #240]	; (800d930 <SPI_CloseTransfer+0x13c>)
 800d840:	400b      	ands	r3, r1
 800d842:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	689a      	ldr	r2, [r3, #8]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d852:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	2b04      	cmp	r3, #4
 800d85e:	d014      	beq.n	800d88a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f003 0320 	and.w	r3, r3, #32
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00f      	beq.n	800d88a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d870:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	699a      	ldr	r2, [r3, #24]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f042 0220 	orr.w	r2, r2, #32
 800d888:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d890:	b2db      	uxtb	r3, r3
 800d892:	2b03      	cmp	r3, #3
 800d894:	d014      	beq.n	800d8c0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00f      	beq.n	800d8c0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8a6:	f043 0204 	orr.w	r2, r3, #4
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	699a      	ldr	r2, [r3, #24]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8be:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d00f      	beq.n	800d8ea <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8d0:	f043 0201 	orr.w	r2, r3, #1
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	699a      	ldr	r2, [r3, #24]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8e8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d00f      	beq.n	800d914 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8fa:	f043 0208 	orr.w	r2, r3, #8
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	699a      	ldr	r2, [r3, #24]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d912:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2200      	movs	r2, #0
 800d918:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d924:	bf00      	nop
 800d926:	3714      	adds	r7, #20
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr
 800d930:	fffffc90 	.word	0xfffffc90

0800d934 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	603b      	str	r3, [r7, #0]
 800d940:	4613      	mov	r3, r2
 800d942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d944:	e010      	b.n	800d968 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d946:	f7f7 f873 	bl	8004a30 <HAL_GetTick>
 800d94a:	4602      	mov	r2, r0
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	1ad3      	subs	r3, r2, r3
 800d950:	69ba      	ldr	r2, [r7, #24]
 800d952:	429a      	cmp	r2, r3
 800d954:	d803      	bhi.n	800d95e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d956:	69bb      	ldr	r3, [r7, #24]
 800d958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d95c:	d102      	bne.n	800d964 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d95e:	69bb      	ldr	r3, [r7, #24]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d101      	bne.n	800d968 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d964:	2303      	movs	r3, #3
 800d966:	e00f      	b.n	800d988 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	695a      	ldr	r2, [r3, #20]
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	4013      	ands	r3, r2
 800d972:	68ba      	ldr	r2, [r7, #8]
 800d974:	429a      	cmp	r2, r3
 800d976:	bf0c      	ite	eq
 800d978:	2301      	moveq	r3, #1
 800d97a:	2300      	movne	r3, #0
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	461a      	mov	r2, r3
 800d980:	79fb      	ldrb	r3, [r7, #7]
 800d982:	429a      	cmp	r2, r3
 800d984:	d0df      	beq.n	800d946 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d986:	2300      	movs	r3, #0
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3710      	adds	r7, #16
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d99c:	095b      	lsrs	r3, r3, #5
 800d99e:	3301      	adds	r3, #1
 800d9a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	3307      	adds	r3, #7
 800d9ae:	08db      	lsrs	r3, r3, #3
 800d9b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	fb02 f303 	mul.w	r3, r2, r3
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3714      	adds	r7, #20
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr

0800d9c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b082      	sub	sp, #8
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d101      	bne.n	800d9d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	e049      	b.n	800da6c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d106      	bne.n	800d9f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f7f5 ff7b 	bl	80038e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2202      	movs	r2, #2
 800d9f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	3304      	adds	r3, #4
 800da02:	4619      	mov	r1, r3
 800da04:	4610      	mov	r0, r2
 800da06:	f000 f9ed 	bl	800dde4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2201      	movs	r2, #1
 800da0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2201      	movs	r2, #1
 800da16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2201      	movs	r2, #1
 800da1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2201      	movs	r2, #1
 800da26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2201      	movs	r2, #1
 800da2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2201      	movs	r2, #1
 800da36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2201      	movs	r2, #1
 800da3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2201      	movs	r2, #1
 800da46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2201      	movs	r2, #1
 800da4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2201      	movs	r2, #1
 800da56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2201      	movs	r2, #1
 800da5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2201      	movs	r2, #1
 800da66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da6a:	2300      	movs	r3, #0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3708      	adds	r7, #8
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da82:	b2db      	uxtb	r3, r3
 800da84:	2b01      	cmp	r3, #1
 800da86:	d001      	beq.n	800da8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800da88:	2301      	movs	r3, #1
 800da8a:	e04f      	b.n	800db2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2202      	movs	r2, #2
 800da90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	68da      	ldr	r2, [r3, #12]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f042 0201 	orr.w	r2, r2, #1
 800daa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a23      	ldr	r2, [pc, #140]	; (800db38 <HAL_TIM_Base_Start_IT+0xc4>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d01d      	beq.n	800daea <HAL_TIM_Base_Start_IT+0x76>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dab6:	d018      	beq.n	800daea <HAL_TIM_Base_Start_IT+0x76>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a1f      	ldr	r2, [pc, #124]	; (800db3c <HAL_TIM_Base_Start_IT+0xc8>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d013      	beq.n	800daea <HAL_TIM_Base_Start_IT+0x76>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4a1e      	ldr	r2, [pc, #120]	; (800db40 <HAL_TIM_Base_Start_IT+0xcc>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d00e      	beq.n	800daea <HAL_TIM_Base_Start_IT+0x76>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a1c      	ldr	r2, [pc, #112]	; (800db44 <HAL_TIM_Base_Start_IT+0xd0>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d009      	beq.n	800daea <HAL_TIM_Base_Start_IT+0x76>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4a1b      	ldr	r2, [pc, #108]	; (800db48 <HAL_TIM_Base_Start_IT+0xd4>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d004      	beq.n	800daea <HAL_TIM_Base_Start_IT+0x76>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a19      	ldr	r2, [pc, #100]	; (800db4c <HAL_TIM_Base_Start_IT+0xd8>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d115      	bne.n	800db16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	689a      	ldr	r2, [r3, #8]
 800daf0:	4b17      	ldr	r3, [pc, #92]	; (800db50 <HAL_TIM_Base_Start_IT+0xdc>)
 800daf2:	4013      	ands	r3, r2
 800daf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2b06      	cmp	r3, #6
 800dafa:	d015      	beq.n	800db28 <HAL_TIM_Base_Start_IT+0xb4>
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db02:	d011      	beq.n	800db28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f042 0201 	orr.w	r2, r2, #1
 800db12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db14:	e008      	b.n	800db28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f042 0201 	orr.w	r2, r2, #1
 800db24:	601a      	str	r2, [r3, #0]
 800db26:	e000      	b.n	800db2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db2a:	2300      	movs	r3, #0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3714      	adds	r7, #20
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr
 800db38:	40010000 	.word	0x40010000
 800db3c:	40000400 	.word	0x40000400
 800db40:	40000800 	.word	0x40000800
 800db44:	40000c00 	.word	0x40000c00
 800db48:	40010400 	.word	0x40010400
 800db4c:	40001800 	.word	0x40001800
 800db50:	00010007 	.word	0x00010007

0800db54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b082      	sub	sp, #8
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	691b      	ldr	r3, [r3, #16]
 800db62:	f003 0302 	and.w	r3, r3, #2
 800db66:	2b02      	cmp	r3, #2
 800db68:	d122      	bne.n	800dbb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	68db      	ldr	r3, [r3, #12]
 800db70:	f003 0302 	and.w	r3, r3, #2
 800db74:	2b02      	cmp	r3, #2
 800db76:	d11b      	bne.n	800dbb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f06f 0202 	mvn.w	r2, #2
 800db80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2201      	movs	r2, #1
 800db86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	699b      	ldr	r3, [r3, #24]
 800db8e:	f003 0303 	and.w	r3, r3, #3
 800db92:	2b00      	cmp	r3, #0
 800db94:	d003      	beq.n	800db9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 f905 	bl	800dda6 <HAL_TIM_IC_CaptureCallback>
 800db9c:	e005      	b.n	800dbaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 f8f7 	bl	800dd92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 f908 	bl	800ddba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2200      	movs	r2, #0
 800dbae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	691b      	ldr	r3, [r3, #16]
 800dbb6:	f003 0304 	and.w	r3, r3, #4
 800dbba:	2b04      	cmp	r3, #4
 800dbbc:	d122      	bne.n	800dc04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	68db      	ldr	r3, [r3, #12]
 800dbc4:	f003 0304 	and.w	r3, r3, #4
 800dbc8:	2b04      	cmp	r3, #4
 800dbca:	d11b      	bne.n	800dc04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f06f 0204 	mvn.w	r2, #4
 800dbd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2202      	movs	r2, #2
 800dbda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	699b      	ldr	r3, [r3, #24]
 800dbe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d003      	beq.n	800dbf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f000 f8db 	bl	800dda6 <HAL_TIM_IC_CaptureCallback>
 800dbf0:	e005      	b.n	800dbfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 f8cd 	bl	800dd92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 f8de 	bl	800ddba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2200      	movs	r2, #0
 800dc02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	691b      	ldr	r3, [r3, #16]
 800dc0a:	f003 0308 	and.w	r3, r3, #8
 800dc0e:	2b08      	cmp	r3, #8
 800dc10:	d122      	bne.n	800dc58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	f003 0308 	and.w	r3, r3, #8
 800dc1c:	2b08      	cmp	r3, #8
 800dc1e:	d11b      	bne.n	800dc58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f06f 0208 	mvn.w	r2, #8
 800dc28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2204      	movs	r2, #4
 800dc2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	69db      	ldr	r3, [r3, #28]
 800dc36:	f003 0303 	and.w	r3, r3, #3
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d003      	beq.n	800dc46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 f8b1 	bl	800dda6 <HAL_TIM_IC_CaptureCallback>
 800dc44:	e005      	b.n	800dc52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 f8a3 	bl	800dd92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 f8b4 	bl	800ddba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	691b      	ldr	r3, [r3, #16]
 800dc5e:	f003 0310 	and.w	r3, r3, #16
 800dc62:	2b10      	cmp	r3, #16
 800dc64:	d122      	bne.n	800dcac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	f003 0310 	and.w	r3, r3, #16
 800dc70:	2b10      	cmp	r3, #16
 800dc72:	d11b      	bne.n	800dcac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f06f 0210 	mvn.w	r2, #16
 800dc7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2208      	movs	r2, #8
 800dc82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	69db      	ldr	r3, [r3, #28]
 800dc8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d003      	beq.n	800dc9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 f887 	bl	800dda6 <HAL_TIM_IC_CaptureCallback>
 800dc98:	e005      	b.n	800dca6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 f879 	bl	800dd92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f000 f88a 	bl	800ddba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	f003 0301 	and.w	r3, r3, #1
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d10e      	bne.n	800dcd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	68db      	ldr	r3, [r3, #12]
 800dcc0:	f003 0301 	and.w	r3, r3, #1
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d107      	bne.n	800dcd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f06f 0201 	mvn.w	r2, #1
 800dcd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f7f5 ffc4 	bl	8003c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	691b      	ldr	r3, [r3, #16]
 800dcde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dce2:	2b80      	cmp	r3, #128	; 0x80
 800dce4:	d10e      	bne.n	800dd04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcf0:	2b80      	cmp	r3, #128	; 0x80
 800dcf2:	d107      	bne.n	800dd04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dcfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 f99c 	bl	800e03c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	691b      	ldr	r3, [r3, #16]
 800dd0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd12:	d10e      	bne.n	800dd32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd1e:	2b80      	cmp	r3, #128	; 0x80
 800dd20:	d107      	bne.n	800dd32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dd2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 f98f 	bl	800e050 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	691b      	ldr	r3, [r3, #16]
 800dd38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd3c:	2b40      	cmp	r3, #64	; 0x40
 800dd3e:	d10e      	bne.n	800dd5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd4a:	2b40      	cmp	r3, #64	; 0x40
 800dd4c:	d107      	bne.n	800dd5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dd56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f000 f838 	bl	800ddce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	691b      	ldr	r3, [r3, #16]
 800dd64:	f003 0320 	and.w	r3, r3, #32
 800dd68:	2b20      	cmp	r3, #32
 800dd6a:	d10e      	bne.n	800dd8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	f003 0320 	and.w	r3, r3, #32
 800dd76:	2b20      	cmp	r3, #32
 800dd78:	d107      	bne.n	800dd8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f06f 0220 	mvn.w	r2, #32
 800dd82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 f94f 	bl	800e028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dd8a:	bf00      	nop
 800dd8c:	3708      	adds	r7, #8
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dd92:	b480      	push	{r7}
 800dd94:	b083      	sub	sp, #12
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dd9a:	bf00      	nop
 800dd9c:	370c      	adds	r7, #12
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr

0800dda6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dda6:	b480      	push	{r7}
 800dda8:	b083      	sub	sp, #12
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ddae:	bf00      	nop
 800ddb0:	370c      	adds	r7, #12
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr

0800ddba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ddba:	b480      	push	{r7}
 800ddbc:	b083      	sub	sp, #12
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ddc2:	bf00      	nop
 800ddc4:	370c      	adds	r7, #12
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr

0800ddce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ddce:	b480      	push	{r7}
 800ddd0:	b083      	sub	sp, #12
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ddd6:	bf00      	nop
 800ddd8:	370c      	adds	r7, #12
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr
	...

0800dde4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4a40      	ldr	r2, [pc, #256]	; (800def8 <TIM_Base_SetConfig+0x114>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d013      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de02:	d00f      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4a3d      	ldr	r2, [pc, #244]	; (800defc <TIM_Base_SetConfig+0x118>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d00b      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	4a3c      	ldr	r2, [pc, #240]	; (800df00 <TIM_Base_SetConfig+0x11c>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d007      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4a3b      	ldr	r2, [pc, #236]	; (800df04 <TIM_Base_SetConfig+0x120>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d003      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	4a3a      	ldr	r2, [pc, #232]	; (800df08 <TIM_Base_SetConfig+0x124>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d108      	bne.n	800de36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	4313      	orrs	r3, r2
 800de34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	4a2f      	ldr	r2, [pc, #188]	; (800def8 <TIM_Base_SetConfig+0x114>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d01f      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de44:	d01b      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	4a2c      	ldr	r2, [pc, #176]	; (800defc <TIM_Base_SetConfig+0x118>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d017      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	4a2b      	ldr	r2, [pc, #172]	; (800df00 <TIM_Base_SetConfig+0x11c>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d013      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4a2a      	ldr	r2, [pc, #168]	; (800df04 <TIM_Base_SetConfig+0x120>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d00f      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4a29      	ldr	r2, [pc, #164]	; (800df08 <TIM_Base_SetConfig+0x124>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d00b      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a28      	ldr	r2, [pc, #160]	; (800df0c <TIM_Base_SetConfig+0x128>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d007      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a27      	ldr	r2, [pc, #156]	; (800df10 <TIM_Base_SetConfig+0x12c>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d003      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a26      	ldr	r2, [pc, #152]	; (800df14 <TIM_Base_SetConfig+0x130>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d108      	bne.n	800de90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	4313      	orrs	r3, r2
 800de8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	4313      	orrs	r3, r2
 800de9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	68fa      	ldr	r2, [r7, #12]
 800dea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	689a      	ldr	r2, [r3, #8]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	4a10      	ldr	r2, [pc, #64]	; (800def8 <TIM_Base_SetConfig+0x114>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d00f      	beq.n	800dedc <TIM_Base_SetConfig+0xf8>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	4a12      	ldr	r2, [pc, #72]	; (800df08 <TIM_Base_SetConfig+0x124>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d00b      	beq.n	800dedc <TIM_Base_SetConfig+0xf8>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	4a11      	ldr	r2, [pc, #68]	; (800df0c <TIM_Base_SetConfig+0x128>)
 800dec8:	4293      	cmp	r3, r2
 800deca:	d007      	beq.n	800dedc <TIM_Base_SetConfig+0xf8>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	4a10      	ldr	r2, [pc, #64]	; (800df10 <TIM_Base_SetConfig+0x12c>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d003      	beq.n	800dedc <TIM_Base_SetConfig+0xf8>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	4a0f      	ldr	r2, [pc, #60]	; (800df14 <TIM_Base_SetConfig+0x130>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d103      	bne.n	800dee4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	691a      	ldr	r2, [r3, #16]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2201      	movs	r2, #1
 800dee8:	615a      	str	r2, [r3, #20]
}
 800deea:	bf00      	nop
 800deec:	3714      	adds	r7, #20
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr
 800def6:	bf00      	nop
 800def8:	40010000 	.word	0x40010000
 800defc:	40000400 	.word	0x40000400
 800df00:	40000800 	.word	0x40000800
 800df04:	40000c00 	.word	0x40000c00
 800df08:	40010400 	.word	0x40010400
 800df0c:	40014000 	.word	0x40014000
 800df10:	40014400 	.word	0x40014400
 800df14:	40014800 	.word	0x40014800

0800df18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800df18:	b480      	push	{r7}
 800df1a:	b085      	sub	sp, #20
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d101      	bne.n	800df30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800df2c:	2302      	movs	r3, #2
 800df2e:	e068      	b.n	800e002 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2201      	movs	r2, #1
 800df34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2202      	movs	r2, #2
 800df3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	689b      	ldr	r3, [r3, #8]
 800df4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a2e      	ldr	r2, [pc, #184]	; (800e010 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d004      	beq.n	800df64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4a2d      	ldr	r2, [pc, #180]	; (800e014 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d108      	bne.n	800df76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800df6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	68fa      	ldr	r2, [r7, #12]
 800df72:	4313      	orrs	r3, r2
 800df74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	68fa      	ldr	r2, [r7, #12]
 800df84:	4313      	orrs	r3, r2
 800df86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4a1e      	ldr	r2, [pc, #120]	; (800e010 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800df96:	4293      	cmp	r3, r2
 800df98:	d01d      	beq.n	800dfd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfa2:	d018      	beq.n	800dfd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4a1b      	ldr	r2, [pc, #108]	; (800e018 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d013      	beq.n	800dfd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	4a1a      	ldr	r2, [pc, #104]	; (800e01c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d00e      	beq.n	800dfd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a18      	ldr	r2, [pc, #96]	; (800e020 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d009      	beq.n	800dfd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	4a13      	ldr	r2, [pc, #76]	; (800e014 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d004      	beq.n	800dfd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4a14      	ldr	r2, [pc, #80]	; (800e024 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d10c      	bne.n	800dff0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	689b      	ldr	r3, [r3, #8]
 800dfe2:	68ba      	ldr	r2, [r7, #8]
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	68ba      	ldr	r2, [r7, #8]
 800dfee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2201      	movs	r2, #1
 800dff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2200      	movs	r2, #0
 800dffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e000:	2300      	movs	r3, #0
}
 800e002:	4618      	mov	r0, r3
 800e004:	3714      	adds	r7, #20
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	40010000 	.word	0x40010000
 800e014:	40010400 	.word	0x40010400
 800e018:	40000400 	.word	0x40000400
 800e01c:	40000800 	.word	0x40000800
 800e020:	40000c00 	.word	0x40000c00
 800e024:	40001800 	.word	0x40001800

0800e028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e030:	bf00      	nop
 800e032:	370c      	adds	r7, #12
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr

0800e03c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b083      	sub	sp, #12
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e044:	bf00      	nop
 800e046:	370c      	adds	r7, #12
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr

0800e050 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e050:	b480      	push	{r7}
 800e052:	b083      	sub	sp, #12
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e058:	bf00      	nop
 800e05a:	370c      	adds	r7, #12
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr

0800e064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d101      	bne.n	800e076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e072:	2301      	movs	r3, #1
 800e074:	e042      	b.n	800e0fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d106      	bne.n	800e08e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2200      	movs	r2, #0
 800e084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f7f5 fc55 	bl	8003938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2224      	movs	r2, #36	; 0x24
 800e092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f022 0201 	bic.w	r2, r2, #1
 800e0a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f000 fc26 	bl	800e8f8 <UART_SetConfig>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b01      	cmp	r3, #1
 800e0b0:	d101      	bne.n	800e0b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	e022      	b.n	800e0fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d002      	beq.n	800e0c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f001 f97a 	bl	800f3b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	685a      	ldr	r2, [r3, #4]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e0d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	689a      	ldr	r2, [r3, #8]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e0e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f042 0201 	orr.w	r2, r2, #1
 800e0f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f001 fa01 	bl	800f4fc <UART_CheckIdleState>
 800e0fa:	4603      	mov	r3, r0
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3708      	adds	r7, #8
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	4613      	mov	r3, r2
 800e110:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e118:	2b20      	cmp	r3, #32
 800e11a:	d131      	bne.n	800e180 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d002      	beq.n	800e128 <HAL_UART_Receive_IT+0x24>
 800e122:	88fb      	ldrh	r3, [r7, #6]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d101      	bne.n	800e12c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e128:	2301      	movs	r3, #1
 800e12a:	e02a      	b.n	800e182 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e132:	2b01      	cmp	r3, #1
 800e134:	d101      	bne.n	800e13a <HAL_UART_Receive_IT+0x36>
 800e136:	2302      	movs	r3, #2
 800e138:	e023      	b.n	800e182 <HAL_UART_Receive_IT+0x7e>
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2201      	movs	r2, #1
 800e13e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2200      	movs	r2, #0
 800e146:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4a0f      	ldr	r2, [pc, #60]	; (800e18c <HAL_UART_Receive_IT+0x88>)
 800e14e:	4293      	cmp	r3, r2
 800e150:	d00e      	beq.n	800e170 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d007      	beq.n	800e170 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	681a      	ldr	r2, [r3, #0]
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e16e:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e170:	88fb      	ldrh	r3, [r7, #6]
 800e172:	461a      	mov	r2, r3
 800e174:	68b9      	ldr	r1, [r7, #8]
 800e176:	68f8      	ldr	r0, [r7, #12]
 800e178:	f001 fa8c 	bl	800f694 <UART_Start_Receive_IT>
 800e17c:	4603      	mov	r3, r0
 800e17e:	e000      	b.n	800e182 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800e180:	2302      	movs	r3, #2
  }
}
 800e182:	4618      	mov	r0, r3
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	58000c00 	.word	0x58000c00

0800e190 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	60f8      	str	r0, [r7, #12]
 800e198:	60b9      	str	r1, [r7, #8]
 800e19a:	4613      	mov	r3, r2
 800e19c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1a4:	2b20      	cmp	r3, #32
 800e1a6:	d168      	bne.n	800e27a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d002      	beq.n	800e1b4 <HAL_UART_Transmit_DMA+0x24>
 800e1ae:	88fb      	ldrh	r3, [r7, #6]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d101      	bne.n	800e1b8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e061      	b.n	800e27c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d101      	bne.n	800e1c6 <HAL_UART_Transmit_DMA+0x36>
 800e1c2:	2302      	movs	r3, #2
 800e1c4:	e05a      	b.n	800e27c <HAL_UART_Transmit_DMA+0xec>
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	68ba      	ldr	r2, [r7, #8]
 800e1d2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	88fa      	ldrh	r2, [r7, #6]
 800e1d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	88fa      	ldrh	r2, [r7, #6]
 800e1e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2221      	movs	r2, #33	; 0x21
 800e1f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d02c      	beq.n	800e256 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e200:	4a20      	ldr	r2, [pc, #128]	; (800e284 <HAL_UART_Transmit_DMA+0xf4>)
 800e202:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e208:	4a1f      	ldr	r2, [pc, #124]	; (800e288 <HAL_UART_Transmit_DMA+0xf8>)
 800e20a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e210:	4a1e      	ldr	r2, [pc, #120]	; (800e28c <HAL_UART_Transmit_DMA+0xfc>)
 800e212:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e218:	2200      	movs	r2, #0
 800e21a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e224:	4619      	mov	r1, r3
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	3328      	adds	r3, #40	; 0x28
 800e22c:	461a      	mov	r2, r3
 800e22e:	88fb      	ldrh	r3, [r7, #6]
 800e230:	f7f7 f8a6 	bl	8005380 <HAL_DMA_Start_IT>
 800e234:	4603      	mov	r3, r0
 800e236:	2b00      	cmp	r3, #0
 800e238:	d00d      	beq.n	800e256 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2210      	movs	r2, #16
 800e23e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2200      	movs	r2, #0
 800e246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2220      	movs	r2, #32
 800e24e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800e252:	2301      	movs	r3, #1
 800e254:	e012      	b.n	800e27c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2240      	movs	r2, #64	; 0x40
 800e25c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2200      	movs	r2, #0
 800e262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	689a      	ldr	r2, [r3, #8]
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e274:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800e276:	2300      	movs	r3, #0
 800e278:	e000      	b.n	800e27c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800e27a:	2302      	movs	r3, #2
  }
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	0800f98d 	.word	0x0800f98d
 800e288:	0800f9dd 	.word	0x0800f9dd
 800e28c:	0800fac7 	.word	0x0800fac7

0800e290 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	60b9      	str	r1, [r7, #8]
 800e29a:	4613      	mov	r3, r2
 800e29c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2a4:	2b20      	cmp	r3, #32
 800e2a6:	d131      	bne.n	800e30c <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d002      	beq.n	800e2b4 <HAL_UART_Receive_DMA+0x24>
 800e2ae:	88fb      	ldrh	r3, [r7, #6]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d101      	bne.n	800e2b8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	e02a      	b.n	800e30e <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	d101      	bne.n	800e2c6 <HAL_UART_Receive_DMA+0x36>
 800e2c2:	2302      	movs	r3, #2
 800e2c4:	e023      	b.n	800e30e <HAL_UART_Receive_DMA+0x7e>
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4a0f      	ldr	r2, [pc, #60]	; (800e318 <HAL_UART_Receive_DMA+0x88>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d00e      	beq.n	800e2fc <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d007      	beq.n	800e2fc <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e2fa:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e2fc:	88fb      	ldrh	r3, [r7, #6]
 800e2fe:	461a      	mov	r2, r3
 800e300:	68b9      	ldr	r1, [r7, #8]
 800e302:	68f8      	ldr	r0, [r7, #12]
 800e304:	f001 fa84 	bl	800f810 <UART_Start_Receive_DMA>
 800e308:	4603      	mov	r3, r0
 800e30a:	e000      	b.n	800e30e <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800e30c:	2302      	movs	r3, #2
  }
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	58000c00 	.word	0x58000c00

0800e31c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b088      	sub	sp, #32
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	69db      	ldr	r3, [r3, #28]
 800e32a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	689b      	ldr	r3, [r3, #8]
 800e33a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e33c:	69fa      	ldr	r2, [r7, #28]
 800e33e:	f640 030f 	movw	r3, #2063	; 0x80f
 800e342:	4013      	ands	r3, r2
 800e344:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d118      	bne.n	800e37e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	f003 0320 	and.w	r3, r3, #32
 800e352:	2b00      	cmp	r3, #0
 800e354:	d013      	beq.n	800e37e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e356:	69bb      	ldr	r3, [r7, #24]
 800e358:	f003 0320 	and.w	r3, r3, #32
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d104      	bne.n	800e36a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e366:	2b00      	cmp	r3, #0
 800e368:	d009      	beq.n	800e37e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e36e:	2b00      	cmp	r3, #0
 800e370:	f000 8282 	beq.w	800e878 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	4798      	blx	r3
      }
      return;
 800e37c:	e27c      	b.n	800e878 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	2b00      	cmp	r3, #0
 800e382:	f000 80ef 	beq.w	800e564 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e386:	697a      	ldr	r2, [r7, #20]
 800e388:	4b73      	ldr	r3, [pc, #460]	; (800e558 <HAL_UART_IRQHandler+0x23c>)
 800e38a:	4013      	ands	r3, r2
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d105      	bne.n	800e39c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e390:	69ba      	ldr	r2, [r7, #24]
 800e392:	4b72      	ldr	r3, [pc, #456]	; (800e55c <HAL_UART_IRQHandler+0x240>)
 800e394:	4013      	ands	r3, r2
 800e396:	2b00      	cmp	r3, #0
 800e398:	f000 80e4 	beq.w	800e564 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	f003 0301 	and.w	r3, r3, #1
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d010      	beq.n	800e3c8 <HAL_UART_IRQHandler+0xac>
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00b      	beq.n	800e3c8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3be:	f043 0201 	orr.w	r2, r3, #1
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	f003 0302 	and.w	r3, r3, #2
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d010      	beq.n	800e3f4 <HAL_UART_IRQHandler+0xd8>
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	f003 0301 	and.w	r3, r3, #1
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d00b      	beq.n	800e3f4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2202      	movs	r2, #2
 800e3e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3ea:	f043 0204 	orr.w	r2, r3, #4
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	f003 0304 	and.w	r3, r3, #4
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d010      	beq.n	800e420 <HAL_UART_IRQHandler+0x104>
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	f003 0301 	and.w	r3, r3, #1
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00b      	beq.n	800e420 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2204      	movs	r2, #4
 800e40e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e416:	f043 0202 	orr.w	r2, r3, #2
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e420:	69fb      	ldr	r3, [r7, #28]
 800e422:	f003 0308 	and.w	r3, r3, #8
 800e426:	2b00      	cmp	r3, #0
 800e428:	d015      	beq.n	800e456 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	f003 0320 	and.w	r3, r3, #32
 800e430:	2b00      	cmp	r3, #0
 800e432:	d104      	bne.n	800e43e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e434:	697a      	ldr	r2, [r7, #20]
 800e436:	4b48      	ldr	r3, [pc, #288]	; (800e558 <HAL_UART_IRQHandler+0x23c>)
 800e438:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d00b      	beq.n	800e456 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2208      	movs	r2, #8
 800e444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e44c:	f043 0208 	orr.w	r2, r3, #8
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d011      	beq.n	800e484 <HAL_UART_IRQHandler+0x168>
 800e460:	69bb      	ldr	r3, [r7, #24]
 800e462:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e466:	2b00      	cmp	r3, #0
 800e468:	d00c      	beq.n	800e484 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e47a:	f043 0220 	orr.w	r2, r3, #32
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	f000 81f6 	beq.w	800e87c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	f003 0320 	and.w	r3, r3, #32
 800e496:	2b00      	cmp	r3, #0
 800e498:	d011      	beq.n	800e4be <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e49a:	69bb      	ldr	r3, [r7, #24]
 800e49c:	f003 0320 	and.w	r3, r3, #32
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d104      	bne.n	800e4ae <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d007      	beq.n	800e4be <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d003      	beq.n	800e4be <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4c4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4d0:	2b40      	cmp	r3, #64	; 0x40
 800e4d2:	d004      	beq.n	800e4de <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d031      	beq.n	800e542 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f001 fa22 	bl	800f928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	689b      	ldr	r3, [r3, #8]
 800e4ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4ee:	2b40      	cmp	r3, #64	; 0x40
 800e4f0:	d123      	bne.n	800e53a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	689a      	ldr	r2, [r3, #8]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e500:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e506:	2b00      	cmp	r3, #0
 800e508:	d013      	beq.n	800e532 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e50e:	4a14      	ldr	r2, [pc, #80]	; (800e560 <HAL_UART_IRQHandler+0x244>)
 800e510:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e516:	4618      	mov	r0, r3
 800e518:	f7f7 fcba 	bl	8005e90 <HAL_DMA_Abort_IT>
 800e51c:	4603      	mov	r3, r0
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d017      	beq.n	800e552 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e52c:	4610      	mov	r0, r2
 800e52e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e530:	e00f      	b.n	800e552 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f000 f9ca 	bl	800e8cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e538:	e00b      	b.n	800e552 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 f9c6 	bl	800e8cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e540:	e007      	b.n	800e552 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f000 f9c2 	bl	800e8cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2200      	movs	r2, #0
 800e54c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e550:	e194      	b.n	800e87c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e552:	bf00      	nop
    return;
 800e554:	e192      	b.n	800e87c <HAL_UART_IRQHandler+0x560>
 800e556:	bf00      	nop
 800e558:	10000001 	.word	0x10000001
 800e55c:	04000120 	.word	0x04000120
 800e560:	0800fb47 	.word	0x0800fb47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e568:	2b01      	cmp	r3, #1
 800e56a:	f040 810f 	bne.w	800e78c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	f003 0310 	and.w	r3, r3, #16
 800e574:	2b00      	cmp	r3, #0
 800e576:	f000 8109 	beq.w	800e78c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e57a:	69bb      	ldr	r3, [r7, #24]
 800e57c:	f003 0310 	and.w	r3, r3, #16
 800e580:	2b00      	cmp	r3, #0
 800e582:	f000 8103 	beq.w	800e78c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	2210      	movs	r2, #16
 800e58c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e598:	2b40      	cmp	r3, #64	; 0x40
 800e59a:	f040 80bb 	bne.w	800e714 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	4a96      	ldr	r2, [pc, #600]	; (800e800 <HAL_UART_IRQHandler+0x4e4>)
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	d059      	beq.n	800e65e <HAL_UART_IRQHandler+0x342>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4a94      	ldr	r2, [pc, #592]	; (800e804 <HAL_UART_IRQHandler+0x4e8>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d053      	beq.n	800e65e <HAL_UART_IRQHandler+0x342>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a92      	ldr	r2, [pc, #584]	; (800e808 <HAL_UART_IRQHandler+0x4ec>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d04d      	beq.n	800e65e <HAL_UART_IRQHandler+0x342>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4a90      	ldr	r2, [pc, #576]	; (800e80c <HAL_UART_IRQHandler+0x4f0>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d047      	beq.n	800e65e <HAL_UART_IRQHandler+0x342>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	4a8e      	ldr	r2, [pc, #568]	; (800e810 <HAL_UART_IRQHandler+0x4f4>)
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d041      	beq.n	800e65e <HAL_UART_IRQHandler+0x342>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a8c      	ldr	r2, [pc, #560]	; (800e814 <HAL_UART_IRQHandler+0x4f8>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d03b      	beq.n	800e65e <HAL_UART_IRQHandler+0x342>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4a8a      	ldr	r2, [pc, #552]	; (800e818 <HAL_UART_IRQHandler+0x4fc>)
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d035      	beq.n	800e65e <HAL_UART_IRQHandler+0x342>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a88      	ldr	r2, [pc, #544]	; (800e81c <HAL_UART_IRQHandler+0x500>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d02f      	beq.n	800e65e <HAL_UART_IRQHandler+0x342>
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4a86      	ldr	r2, [pc, #536]	; (800e820 <HAL_UART_IRQHandler+0x504>)
 800e606:	4293      	cmp	r3, r2
 800e608:	d029      	beq.n	800e65e <HAL_UART_IRQHandler+0x342>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a84      	ldr	r2, [pc, #528]	; (800e824 <HAL_UART_IRQHandler+0x508>)
 800e612:	4293      	cmp	r3, r2
 800e614:	d023      	beq.n	800e65e <HAL_UART_IRQHandler+0x342>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a82      	ldr	r2, [pc, #520]	; (800e828 <HAL_UART_IRQHandler+0x50c>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d01d      	beq.n	800e65e <HAL_UART_IRQHandler+0x342>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4a80      	ldr	r2, [pc, #512]	; (800e82c <HAL_UART_IRQHandler+0x510>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d017      	beq.n	800e65e <HAL_UART_IRQHandler+0x342>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4a7e      	ldr	r2, [pc, #504]	; (800e830 <HAL_UART_IRQHandler+0x514>)
 800e636:	4293      	cmp	r3, r2
 800e638:	d011      	beq.n	800e65e <HAL_UART_IRQHandler+0x342>
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4a7c      	ldr	r2, [pc, #496]	; (800e834 <HAL_UART_IRQHandler+0x518>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d00b      	beq.n	800e65e <HAL_UART_IRQHandler+0x342>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4a7a      	ldr	r2, [pc, #488]	; (800e838 <HAL_UART_IRQHandler+0x51c>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d005      	beq.n	800e65e <HAL_UART_IRQHandler+0x342>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4a78      	ldr	r2, [pc, #480]	; (800e83c <HAL_UART_IRQHandler+0x520>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d105      	bne.n	800e66a <HAL_UART_IRQHandler+0x34e>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	b29b      	uxth	r3, r3
 800e668:	e004      	b.n	800e674 <HAL_UART_IRQHandler+0x358>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	b29b      	uxth	r3, r3
 800e674:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800e676:	893b      	ldrh	r3, [r7, #8]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f000 8101 	beq.w	800e880 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e684:	893a      	ldrh	r2, [r7, #8]
 800e686:	429a      	cmp	r2, r3
 800e688:	f080 80fa 	bcs.w	800e880 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	893a      	ldrh	r2, [r7, #8]
 800e690:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e698:	69db      	ldr	r3, [r3, #28]
 800e69a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e69e:	d02b      	beq.n	800e6f8 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e6ae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	689a      	ldr	r2, [r3, #8]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f022 0201 	bic.w	r2, r2, #1
 800e6be:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	689a      	ldr	r2, [r3, #8]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e6ce:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2220      	movs	r2, #32
 800e6d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	681a      	ldr	r2, [r3, #0]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f022 0210 	bic.w	r2, r2, #16
 800e6ec:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7f7 f8ae 	bl	8005854 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e704:	b29b      	uxth	r3, r3
 800e706:	1ad3      	subs	r3, r2, r3
 800e708:	b29b      	uxth	r3, r3
 800e70a:	4619      	mov	r1, r3
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f000 f8e7 	bl	800e8e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e712:	e0b5      	b.n	800e880 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e720:	b29b      	uxth	r3, r3
 800e722:	1ad3      	subs	r3, r2, r3
 800e724:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	2b00      	cmp	r3, #0
 800e730:	f000 80a8 	beq.w	800e884 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800e734:	897b      	ldrh	r3, [r7, #10]
 800e736:	2b00      	cmp	r3, #0
 800e738:	f000 80a4 	beq.w	800e884 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e74a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	6899      	ldr	r1, [r3, #8]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681a      	ldr	r2, [r3, #0]
 800e756:	4b3a      	ldr	r3, [pc, #232]	; (800e840 <HAL_UART_IRQHandler+0x524>)
 800e758:	400b      	ands	r3, r1
 800e75a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2220      	movs	r2, #32
 800e760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2200      	movs	r2, #0
 800e768:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2200      	movs	r2, #0
 800e76e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	681a      	ldr	r2, [r3, #0]
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f022 0210 	bic.w	r2, r2, #16
 800e77e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e780:	897b      	ldrh	r3, [r7, #10]
 800e782:	4619      	mov	r1, r3
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f000 f8ab 	bl	800e8e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e78a:	e07b      	b.n	800e884 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e792:	2b00      	cmp	r3, #0
 800e794:	d00d      	beq.n	800e7b2 <HAL_UART_IRQHandler+0x496>
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d008      	beq.n	800e7b2 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e7a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f001 fcd8 	bl	8010160 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e7b0:	e06b      	b.n	800e88a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d012      	beq.n	800e7e2 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e7bc:	69bb      	ldr	r3, [r7, #24]
 800e7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d104      	bne.n	800e7d0 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d008      	beq.n	800e7e2 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d057      	beq.n	800e888 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	4798      	blx	r3
    }
    return;
 800e7e0:	e052      	b.n	800e888 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d02b      	beq.n	800e844 <HAL_UART_IRQHandler+0x528>
 800e7ec:	69bb      	ldr	r3, [r7, #24]
 800e7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d026      	beq.n	800e844 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f001 f9bb 	bl	800fb72 <UART_EndTransmit_IT>
    return;
 800e7fc:	e045      	b.n	800e88a <HAL_UART_IRQHandler+0x56e>
 800e7fe:	bf00      	nop
 800e800:	40020010 	.word	0x40020010
 800e804:	40020028 	.word	0x40020028
 800e808:	40020040 	.word	0x40020040
 800e80c:	40020058 	.word	0x40020058
 800e810:	40020070 	.word	0x40020070
 800e814:	40020088 	.word	0x40020088
 800e818:	400200a0 	.word	0x400200a0
 800e81c:	400200b8 	.word	0x400200b8
 800e820:	40020410 	.word	0x40020410
 800e824:	40020428 	.word	0x40020428
 800e828:	40020440 	.word	0x40020440
 800e82c:	40020458 	.word	0x40020458
 800e830:	40020470 	.word	0x40020470
 800e834:	40020488 	.word	0x40020488
 800e838:	400204a0 	.word	0x400204a0
 800e83c:	400204b8 	.word	0x400204b8
 800e840:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e844:	69fb      	ldr	r3, [r7, #28]
 800e846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d008      	beq.n	800e860 <HAL_UART_IRQHandler+0x544>
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e854:	2b00      	cmp	r3, #0
 800e856:	d003      	beq.n	800e860 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f001 fc95 	bl	8010188 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e85e:	e014      	b.n	800e88a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e860:	69fb      	ldr	r3, [r7, #28]
 800e862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e866:	2b00      	cmp	r3, #0
 800e868:	d00f      	beq.n	800e88a <HAL_UART_IRQHandler+0x56e>
 800e86a:	69bb      	ldr	r3, [r7, #24]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	da0c      	bge.n	800e88a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f001 fc7f 	bl	8010174 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e876:	e008      	b.n	800e88a <HAL_UART_IRQHandler+0x56e>
      return;
 800e878:	bf00      	nop
 800e87a:	e006      	b.n	800e88a <HAL_UART_IRQHandler+0x56e>
    return;
 800e87c:	bf00      	nop
 800e87e:	e004      	b.n	800e88a <HAL_UART_IRQHandler+0x56e>
      return;
 800e880:	bf00      	nop
 800e882:	e002      	b.n	800e88a <HAL_UART_IRQHandler+0x56e>
      return;
 800e884:	bf00      	nop
 800e886:	e000      	b.n	800e88a <HAL_UART_IRQHandler+0x56e>
    return;
 800e888:	bf00      	nop
  }
}
 800e88a:	3720      	adds	r7, #32
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e890:	b480      	push	{r7}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e898:	bf00      	nop
 800e89a:	370c      	adds	r7, #12
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr

0800e8a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e8ac:	bf00      	nop
 800e8ae:	370c      	adds	r7, #12
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e8c0:	bf00      	nop
 800e8c2:	370c      	adds	r7, #12
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr

0800e8cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b083      	sub	sp, #12
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e8d4:	bf00      	nop
 800e8d6:	370c      	adds	r7, #12
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr

0800e8e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e8ec:	bf00      	nop
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e8f8:	b5b0      	push	{r4, r5, r7, lr}
 800e8fa:	b08e      	sub	sp, #56	; 0x38
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e900:	2300      	movs	r3, #0
 800e902:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	689a      	ldr	r2, [r3, #8]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	691b      	ldr	r3, [r3, #16]
 800e90e:	431a      	orrs	r2, r3
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	695b      	ldr	r3, [r3, #20]
 800e914:	431a      	orrs	r2, r3
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	69db      	ldr	r3, [r3, #28]
 800e91a:	4313      	orrs	r3, r2
 800e91c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	681a      	ldr	r2, [r3, #0]
 800e924:	4bbf      	ldr	r3, [pc, #764]	; (800ec24 <UART_SetConfig+0x32c>)
 800e926:	4013      	ands	r3, r2
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	6812      	ldr	r2, [r2, #0]
 800e92c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e92e:	430b      	orrs	r3, r1
 800e930:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	68da      	ldr	r2, [r3, #12]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	430a      	orrs	r2, r1
 800e946:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	699b      	ldr	r3, [r3, #24]
 800e94c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	4ab5      	ldr	r2, [pc, #724]	; (800ec28 <UART_SetConfig+0x330>)
 800e954:	4293      	cmp	r3, r2
 800e956:	d004      	beq.n	800e962 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6a1b      	ldr	r3, [r3, #32]
 800e95c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e95e:	4313      	orrs	r3, r2
 800e960:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	689a      	ldr	r2, [r3, #8]
 800e968:	4bb0      	ldr	r3, [pc, #704]	; (800ec2c <UART_SetConfig+0x334>)
 800e96a:	4013      	ands	r3, r2
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	6812      	ldr	r2, [r2, #0]
 800e970:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e972:	430b      	orrs	r3, r1
 800e974:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e97c:	f023 010f 	bic.w	r1, r3, #15
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	430a      	orrs	r2, r1
 800e98a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4aa7      	ldr	r2, [pc, #668]	; (800ec30 <UART_SetConfig+0x338>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d176      	bne.n	800ea84 <UART_SetConfig+0x18c>
 800e996:	4ba7      	ldr	r3, [pc, #668]	; (800ec34 <UART_SetConfig+0x33c>)
 800e998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e99a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e99e:	2b28      	cmp	r3, #40	; 0x28
 800e9a0:	d86c      	bhi.n	800ea7c <UART_SetConfig+0x184>
 800e9a2:	a201      	add	r2, pc, #4	; (adr r2, 800e9a8 <UART_SetConfig+0xb0>)
 800e9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a8:	0800ea4d 	.word	0x0800ea4d
 800e9ac:	0800ea7d 	.word	0x0800ea7d
 800e9b0:	0800ea7d 	.word	0x0800ea7d
 800e9b4:	0800ea7d 	.word	0x0800ea7d
 800e9b8:	0800ea7d 	.word	0x0800ea7d
 800e9bc:	0800ea7d 	.word	0x0800ea7d
 800e9c0:	0800ea7d 	.word	0x0800ea7d
 800e9c4:	0800ea7d 	.word	0x0800ea7d
 800e9c8:	0800ea55 	.word	0x0800ea55
 800e9cc:	0800ea7d 	.word	0x0800ea7d
 800e9d0:	0800ea7d 	.word	0x0800ea7d
 800e9d4:	0800ea7d 	.word	0x0800ea7d
 800e9d8:	0800ea7d 	.word	0x0800ea7d
 800e9dc:	0800ea7d 	.word	0x0800ea7d
 800e9e0:	0800ea7d 	.word	0x0800ea7d
 800e9e4:	0800ea7d 	.word	0x0800ea7d
 800e9e8:	0800ea5d 	.word	0x0800ea5d
 800e9ec:	0800ea7d 	.word	0x0800ea7d
 800e9f0:	0800ea7d 	.word	0x0800ea7d
 800e9f4:	0800ea7d 	.word	0x0800ea7d
 800e9f8:	0800ea7d 	.word	0x0800ea7d
 800e9fc:	0800ea7d 	.word	0x0800ea7d
 800ea00:	0800ea7d 	.word	0x0800ea7d
 800ea04:	0800ea7d 	.word	0x0800ea7d
 800ea08:	0800ea65 	.word	0x0800ea65
 800ea0c:	0800ea7d 	.word	0x0800ea7d
 800ea10:	0800ea7d 	.word	0x0800ea7d
 800ea14:	0800ea7d 	.word	0x0800ea7d
 800ea18:	0800ea7d 	.word	0x0800ea7d
 800ea1c:	0800ea7d 	.word	0x0800ea7d
 800ea20:	0800ea7d 	.word	0x0800ea7d
 800ea24:	0800ea7d 	.word	0x0800ea7d
 800ea28:	0800ea6d 	.word	0x0800ea6d
 800ea2c:	0800ea7d 	.word	0x0800ea7d
 800ea30:	0800ea7d 	.word	0x0800ea7d
 800ea34:	0800ea7d 	.word	0x0800ea7d
 800ea38:	0800ea7d 	.word	0x0800ea7d
 800ea3c:	0800ea7d 	.word	0x0800ea7d
 800ea40:	0800ea7d 	.word	0x0800ea7d
 800ea44:	0800ea7d 	.word	0x0800ea7d
 800ea48:	0800ea75 	.word	0x0800ea75
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea52:	e222      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ea54:	2304      	movs	r3, #4
 800ea56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea5a:	e21e      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ea5c:	2308      	movs	r3, #8
 800ea5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea62:	e21a      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ea64:	2310      	movs	r3, #16
 800ea66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea6a:	e216      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ea6c:	2320      	movs	r3, #32
 800ea6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea72:	e212      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ea74:	2340      	movs	r3, #64	; 0x40
 800ea76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea7a:	e20e      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ea7c:	2380      	movs	r3, #128	; 0x80
 800ea7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea82:	e20a      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4a6b      	ldr	r2, [pc, #428]	; (800ec38 <UART_SetConfig+0x340>)
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	d130      	bne.n	800eaf0 <UART_SetConfig+0x1f8>
 800ea8e:	4b69      	ldr	r3, [pc, #420]	; (800ec34 <UART_SetConfig+0x33c>)
 800ea90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea92:	f003 0307 	and.w	r3, r3, #7
 800ea96:	2b05      	cmp	r3, #5
 800ea98:	d826      	bhi.n	800eae8 <UART_SetConfig+0x1f0>
 800ea9a:	a201      	add	r2, pc, #4	; (adr r2, 800eaa0 <UART_SetConfig+0x1a8>)
 800ea9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa0:	0800eab9 	.word	0x0800eab9
 800eaa4:	0800eac1 	.word	0x0800eac1
 800eaa8:	0800eac9 	.word	0x0800eac9
 800eaac:	0800ead1 	.word	0x0800ead1
 800eab0:	0800ead9 	.word	0x0800ead9
 800eab4:	0800eae1 	.word	0x0800eae1
 800eab8:	2300      	movs	r3, #0
 800eaba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eabe:	e1ec      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800eac0:	2304      	movs	r3, #4
 800eac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eac6:	e1e8      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800eac8:	2308      	movs	r3, #8
 800eaca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eace:	e1e4      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ead0:	2310      	movs	r3, #16
 800ead2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ead6:	e1e0      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ead8:	2320      	movs	r3, #32
 800eada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eade:	e1dc      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800eae0:	2340      	movs	r3, #64	; 0x40
 800eae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eae6:	e1d8      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800eae8:	2380      	movs	r3, #128	; 0x80
 800eaea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaee:	e1d4      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	4a51      	ldr	r2, [pc, #324]	; (800ec3c <UART_SetConfig+0x344>)
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	d130      	bne.n	800eb5c <UART_SetConfig+0x264>
 800eafa:	4b4e      	ldr	r3, [pc, #312]	; (800ec34 <UART_SetConfig+0x33c>)
 800eafc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eafe:	f003 0307 	and.w	r3, r3, #7
 800eb02:	2b05      	cmp	r3, #5
 800eb04:	d826      	bhi.n	800eb54 <UART_SetConfig+0x25c>
 800eb06:	a201      	add	r2, pc, #4	; (adr r2, 800eb0c <UART_SetConfig+0x214>)
 800eb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb0c:	0800eb25 	.word	0x0800eb25
 800eb10:	0800eb2d 	.word	0x0800eb2d
 800eb14:	0800eb35 	.word	0x0800eb35
 800eb18:	0800eb3d 	.word	0x0800eb3d
 800eb1c:	0800eb45 	.word	0x0800eb45
 800eb20:	0800eb4d 	.word	0x0800eb4d
 800eb24:	2300      	movs	r3, #0
 800eb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb2a:	e1b6      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800eb2c:	2304      	movs	r3, #4
 800eb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb32:	e1b2      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800eb34:	2308      	movs	r3, #8
 800eb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb3a:	e1ae      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800eb3c:	2310      	movs	r3, #16
 800eb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb42:	e1aa      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800eb44:	2320      	movs	r3, #32
 800eb46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb4a:	e1a6      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800eb4c:	2340      	movs	r3, #64	; 0x40
 800eb4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb52:	e1a2      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800eb54:	2380      	movs	r3, #128	; 0x80
 800eb56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb5a:	e19e      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	4a37      	ldr	r2, [pc, #220]	; (800ec40 <UART_SetConfig+0x348>)
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d130      	bne.n	800ebc8 <UART_SetConfig+0x2d0>
 800eb66:	4b33      	ldr	r3, [pc, #204]	; (800ec34 <UART_SetConfig+0x33c>)
 800eb68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb6a:	f003 0307 	and.w	r3, r3, #7
 800eb6e:	2b05      	cmp	r3, #5
 800eb70:	d826      	bhi.n	800ebc0 <UART_SetConfig+0x2c8>
 800eb72:	a201      	add	r2, pc, #4	; (adr r2, 800eb78 <UART_SetConfig+0x280>)
 800eb74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb78:	0800eb91 	.word	0x0800eb91
 800eb7c:	0800eb99 	.word	0x0800eb99
 800eb80:	0800eba1 	.word	0x0800eba1
 800eb84:	0800eba9 	.word	0x0800eba9
 800eb88:	0800ebb1 	.word	0x0800ebb1
 800eb8c:	0800ebb9 	.word	0x0800ebb9
 800eb90:	2300      	movs	r3, #0
 800eb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb96:	e180      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800eb98:	2304      	movs	r3, #4
 800eb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb9e:	e17c      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800eba0:	2308      	movs	r3, #8
 800eba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eba6:	e178      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800eba8:	2310      	movs	r3, #16
 800ebaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebae:	e174      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ebb0:	2320      	movs	r3, #32
 800ebb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebb6:	e170      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ebb8:	2340      	movs	r3, #64	; 0x40
 800ebba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebbe:	e16c      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ebc0:	2380      	movs	r3, #128	; 0x80
 800ebc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebc6:	e168      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4a1d      	ldr	r2, [pc, #116]	; (800ec44 <UART_SetConfig+0x34c>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d142      	bne.n	800ec58 <UART_SetConfig+0x360>
 800ebd2:	4b18      	ldr	r3, [pc, #96]	; (800ec34 <UART_SetConfig+0x33c>)
 800ebd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebd6:	f003 0307 	and.w	r3, r3, #7
 800ebda:	2b05      	cmp	r3, #5
 800ebdc:	d838      	bhi.n	800ec50 <UART_SetConfig+0x358>
 800ebde:	a201      	add	r2, pc, #4	; (adr r2, 800ebe4 <UART_SetConfig+0x2ec>)
 800ebe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe4:	0800ebfd 	.word	0x0800ebfd
 800ebe8:	0800ec05 	.word	0x0800ec05
 800ebec:	0800ec0d 	.word	0x0800ec0d
 800ebf0:	0800ec15 	.word	0x0800ec15
 800ebf4:	0800ec1d 	.word	0x0800ec1d
 800ebf8:	0800ec49 	.word	0x0800ec49
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec02:	e14a      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ec04:	2304      	movs	r3, #4
 800ec06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec0a:	e146      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ec0c:	2308      	movs	r3, #8
 800ec0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec12:	e142      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ec14:	2310      	movs	r3, #16
 800ec16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec1a:	e13e      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ec1c:	2320      	movs	r3, #32
 800ec1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec22:	e13a      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ec24:	cfff69f3 	.word	0xcfff69f3
 800ec28:	58000c00 	.word	0x58000c00
 800ec2c:	11fff4ff 	.word	0x11fff4ff
 800ec30:	40011000 	.word	0x40011000
 800ec34:	58024400 	.word	0x58024400
 800ec38:	40004400 	.word	0x40004400
 800ec3c:	40004800 	.word	0x40004800
 800ec40:	40004c00 	.word	0x40004c00
 800ec44:	40005000 	.word	0x40005000
 800ec48:	2340      	movs	r3, #64	; 0x40
 800ec4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec4e:	e124      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ec50:	2380      	movs	r3, #128	; 0x80
 800ec52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec56:	e120      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4acc      	ldr	r2, [pc, #816]	; (800ef90 <UART_SetConfig+0x698>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d176      	bne.n	800ed50 <UART_SetConfig+0x458>
 800ec62:	4bcc      	ldr	r3, [pc, #816]	; (800ef94 <UART_SetConfig+0x69c>)
 800ec64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec6a:	2b28      	cmp	r3, #40	; 0x28
 800ec6c:	d86c      	bhi.n	800ed48 <UART_SetConfig+0x450>
 800ec6e:	a201      	add	r2, pc, #4	; (adr r2, 800ec74 <UART_SetConfig+0x37c>)
 800ec70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec74:	0800ed19 	.word	0x0800ed19
 800ec78:	0800ed49 	.word	0x0800ed49
 800ec7c:	0800ed49 	.word	0x0800ed49
 800ec80:	0800ed49 	.word	0x0800ed49
 800ec84:	0800ed49 	.word	0x0800ed49
 800ec88:	0800ed49 	.word	0x0800ed49
 800ec8c:	0800ed49 	.word	0x0800ed49
 800ec90:	0800ed49 	.word	0x0800ed49
 800ec94:	0800ed21 	.word	0x0800ed21
 800ec98:	0800ed49 	.word	0x0800ed49
 800ec9c:	0800ed49 	.word	0x0800ed49
 800eca0:	0800ed49 	.word	0x0800ed49
 800eca4:	0800ed49 	.word	0x0800ed49
 800eca8:	0800ed49 	.word	0x0800ed49
 800ecac:	0800ed49 	.word	0x0800ed49
 800ecb0:	0800ed49 	.word	0x0800ed49
 800ecb4:	0800ed29 	.word	0x0800ed29
 800ecb8:	0800ed49 	.word	0x0800ed49
 800ecbc:	0800ed49 	.word	0x0800ed49
 800ecc0:	0800ed49 	.word	0x0800ed49
 800ecc4:	0800ed49 	.word	0x0800ed49
 800ecc8:	0800ed49 	.word	0x0800ed49
 800eccc:	0800ed49 	.word	0x0800ed49
 800ecd0:	0800ed49 	.word	0x0800ed49
 800ecd4:	0800ed31 	.word	0x0800ed31
 800ecd8:	0800ed49 	.word	0x0800ed49
 800ecdc:	0800ed49 	.word	0x0800ed49
 800ece0:	0800ed49 	.word	0x0800ed49
 800ece4:	0800ed49 	.word	0x0800ed49
 800ece8:	0800ed49 	.word	0x0800ed49
 800ecec:	0800ed49 	.word	0x0800ed49
 800ecf0:	0800ed49 	.word	0x0800ed49
 800ecf4:	0800ed39 	.word	0x0800ed39
 800ecf8:	0800ed49 	.word	0x0800ed49
 800ecfc:	0800ed49 	.word	0x0800ed49
 800ed00:	0800ed49 	.word	0x0800ed49
 800ed04:	0800ed49 	.word	0x0800ed49
 800ed08:	0800ed49 	.word	0x0800ed49
 800ed0c:	0800ed49 	.word	0x0800ed49
 800ed10:	0800ed49 	.word	0x0800ed49
 800ed14:	0800ed41 	.word	0x0800ed41
 800ed18:	2301      	movs	r3, #1
 800ed1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed1e:	e0bc      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ed20:	2304      	movs	r3, #4
 800ed22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed26:	e0b8      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ed28:	2308      	movs	r3, #8
 800ed2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed2e:	e0b4      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ed30:	2310      	movs	r3, #16
 800ed32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed36:	e0b0      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ed38:	2320      	movs	r3, #32
 800ed3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed3e:	e0ac      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ed40:	2340      	movs	r3, #64	; 0x40
 800ed42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed46:	e0a8      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ed48:	2380      	movs	r3, #128	; 0x80
 800ed4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed4e:	e0a4      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	4a90      	ldr	r2, [pc, #576]	; (800ef98 <UART_SetConfig+0x6a0>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d130      	bne.n	800edbc <UART_SetConfig+0x4c4>
 800ed5a:	4b8e      	ldr	r3, [pc, #568]	; (800ef94 <UART_SetConfig+0x69c>)
 800ed5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed5e:	f003 0307 	and.w	r3, r3, #7
 800ed62:	2b05      	cmp	r3, #5
 800ed64:	d826      	bhi.n	800edb4 <UART_SetConfig+0x4bc>
 800ed66:	a201      	add	r2, pc, #4	; (adr r2, 800ed6c <UART_SetConfig+0x474>)
 800ed68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed6c:	0800ed85 	.word	0x0800ed85
 800ed70:	0800ed8d 	.word	0x0800ed8d
 800ed74:	0800ed95 	.word	0x0800ed95
 800ed78:	0800ed9d 	.word	0x0800ed9d
 800ed7c:	0800eda5 	.word	0x0800eda5
 800ed80:	0800edad 	.word	0x0800edad
 800ed84:	2300      	movs	r3, #0
 800ed86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed8a:	e086      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ed8c:	2304      	movs	r3, #4
 800ed8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed92:	e082      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ed94:	2308      	movs	r3, #8
 800ed96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed9a:	e07e      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ed9c:	2310      	movs	r3, #16
 800ed9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eda2:	e07a      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800eda4:	2320      	movs	r3, #32
 800eda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edaa:	e076      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800edac:	2340      	movs	r3, #64	; 0x40
 800edae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edb2:	e072      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800edb4:	2380      	movs	r3, #128	; 0x80
 800edb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edba:	e06e      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4a76      	ldr	r2, [pc, #472]	; (800ef9c <UART_SetConfig+0x6a4>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d130      	bne.n	800ee28 <UART_SetConfig+0x530>
 800edc6:	4b73      	ldr	r3, [pc, #460]	; (800ef94 <UART_SetConfig+0x69c>)
 800edc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edca:	f003 0307 	and.w	r3, r3, #7
 800edce:	2b05      	cmp	r3, #5
 800edd0:	d826      	bhi.n	800ee20 <UART_SetConfig+0x528>
 800edd2:	a201      	add	r2, pc, #4	; (adr r2, 800edd8 <UART_SetConfig+0x4e0>)
 800edd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd8:	0800edf1 	.word	0x0800edf1
 800eddc:	0800edf9 	.word	0x0800edf9
 800ede0:	0800ee01 	.word	0x0800ee01
 800ede4:	0800ee09 	.word	0x0800ee09
 800ede8:	0800ee11 	.word	0x0800ee11
 800edec:	0800ee19 	.word	0x0800ee19
 800edf0:	2300      	movs	r3, #0
 800edf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edf6:	e050      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800edf8:	2304      	movs	r3, #4
 800edfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edfe:	e04c      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ee00:	2308      	movs	r3, #8
 800ee02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee06:	e048      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ee08:	2310      	movs	r3, #16
 800ee0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee0e:	e044      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ee10:	2320      	movs	r3, #32
 800ee12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee16:	e040      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ee18:	2340      	movs	r3, #64	; 0x40
 800ee1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee1e:	e03c      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ee20:	2380      	movs	r3, #128	; 0x80
 800ee22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee26:	e038      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a5c      	ldr	r2, [pc, #368]	; (800efa0 <UART_SetConfig+0x6a8>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d130      	bne.n	800ee94 <UART_SetConfig+0x59c>
 800ee32:	4b58      	ldr	r3, [pc, #352]	; (800ef94 <UART_SetConfig+0x69c>)
 800ee34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee36:	f003 0307 	and.w	r3, r3, #7
 800ee3a:	2b05      	cmp	r3, #5
 800ee3c:	d826      	bhi.n	800ee8c <UART_SetConfig+0x594>
 800ee3e:	a201      	add	r2, pc, #4	; (adr r2, 800ee44 <UART_SetConfig+0x54c>)
 800ee40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee44:	0800ee5d 	.word	0x0800ee5d
 800ee48:	0800ee65 	.word	0x0800ee65
 800ee4c:	0800ee6d 	.word	0x0800ee6d
 800ee50:	0800ee75 	.word	0x0800ee75
 800ee54:	0800ee7d 	.word	0x0800ee7d
 800ee58:	0800ee85 	.word	0x0800ee85
 800ee5c:	2302      	movs	r3, #2
 800ee5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee62:	e01a      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ee64:	2304      	movs	r3, #4
 800ee66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee6a:	e016      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ee6c:	2308      	movs	r3, #8
 800ee6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee72:	e012      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ee74:	2310      	movs	r3, #16
 800ee76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee7a:	e00e      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ee7c:	2320      	movs	r3, #32
 800ee7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee82:	e00a      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ee84:	2340      	movs	r3, #64	; 0x40
 800ee86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee8a:	e006      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ee8c:	2380      	movs	r3, #128	; 0x80
 800ee8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee92:	e002      	b.n	800ee9a <UART_SetConfig+0x5a2>
 800ee94:	2380      	movs	r3, #128	; 0x80
 800ee96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4a40      	ldr	r2, [pc, #256]	; (800efa0 <UART_SetConfig+0x6a8>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	f040 80ef 	bne.w	800f084 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eea6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eeaa:	2b20      	cmp	r3, #32
 800eeac:	dc46      	bgt.n	800ef3c <UART_SetConfig+0x644>
 800eeae:	2b02      	cmp	r3, #2
 800eeb0:	f2c0 8081 	blt.w	800efb6 <UART_SetConfig+0x6be>
 800eeb4:	3b02      	subs	r3, #2
 800eeb6:	2b1e      	cmp	r3, #30
 800eeb8:	d87d      	bhi.n	800efb6 <UART_SetConfig+0x6be>
 800eeba:	a201      	add	r2, pc, #4	; (adr r2, 800eec0 <UART_SetConfig+0x5c8>)
 800eebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eec0:	0800ef43 	.word	0x0800ef43
 800eec4:	0800efb7 	.word	0x0800efb7
 800eec8:	0800ef4b 	.word	0x0800ef4b
 800eecc:	0800efb7 	.word	0x0800efb7
 800eed0:	0800efb7 	.word	0x0800efb7
 800eed4:	0800efb7 	.word	0x0800efb7
 800eed8:	0800ef5b 	.word	0x0800ef5b
 800eedc:	0800efb7 	.word	0x0800efb7
 800eee0:	0800efb7 	.word	0x0800efb7
 800eee4:	0800efb7 	.word	0x0800efb7
 800eee8:	0800efb7 	.word	0x0800efb7
 800eeec:	0800efb7 	.word	0x0800efb7
 800eef0:	0800efb7 	.word	0x0800efb7
 800eef4:	0800efb7 	.word	0x0800efb7
 800eef8:	0800ef6b 	.word	0x0800ef6b
 800eefc:	0800efb7 	.word	0x0800efb7
 800ef00:	0800efb7 	.word	0x0800efb7
 800ef04:	0800efb7 	.word	0x0800efb7
 800ef08:	0800efb7 	.word	0x0800efb7
 800ef0c:	0800efb7 	.word	0x0800efb7
 800ef10:	0800efb7 	.word	0x0800efb7
 800ef14:	0800efb7 	.word	0x0800efb7
 800ef18:	0800efb7 	.word	0x0800efb7
 800ef1c:	0800efb7 	.word	0x0800efb7
 800ef20:	0800efb7 	.word	0x0800efb7
 800ef24:	0800efb7 	.word	0x0800efb7
 800ef28:	0800efb7 	.word	0x0800efb7
 800ef2c:	0800efb7 	.word	0x0800efb7
 800ef30:	0800efb7 	.word	0x0800efb7
 800ef34:	0800efb7 	.word	0x0800efb7
 800ef38:	0800efa9 	.word	0x0800efa9
 800ef3c:	2b40      	cmp	r3, #64	; 0x40
 800ef3e:	d036      	beq.n	800efae <UART_SetConfig+0x6b6>
 800ef40:	e039      	b.n	800efb6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ef42:	f7fd f863 	bl	800c00c <HAL_RCCEx_GetD3PCLK1Freq>
 800ef46:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ef48:	e03b      	b.n	800efc2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef4a:	f107 0314 	add.w	r3, r7, #20
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7fd f872 	bl	800c038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef58:	e033      	b.n	800efc2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef5a:	f107 0308 	add.w	r3, r7, #8
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fd f9be 	bl	800c2e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef68:	e02b      	b.n	800efc2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef6a:	4b0a      	ldr	r3, [pc, #40]	; (800ef94 <UART_SetConfig+0x69c>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f003 0320 	and.w	r3, r3, #32
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d009      	beq.n	800ef8a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ef76:	4b07      	ldr	r3, [pc, #28]	; (800ef94 <UART_SetConfig+0x69c>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	08db      	lsrs	r3, r3, #3
 800ef7c:	f003 0303 	and.w	r3, r3, #3
 800ef80:	4a08      	ldr	r2, [pc, #32]	; (800efa4 <UART_SetConfig+0x6ac>)
 800ef82:	fa22 f303 	lsr.w	r3, r2, r3
 800ef86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef88:	e01b      	b.n	800efc2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800ef8a:	4b06      	ldr	r3, [pc, #24]	; (800efa4 <UART_SetConfig+0x6ac>)
 800ef8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef8e:	e018      	b.n	800efc2 <UART_SetConfig+0x6ca>
 800ef90:	40011400 	.word	0x40011400
 800ef94:	58024400 	.word	0x58024400
 800ef98:	40007800 	.word	0x40007800
 800ef9c:	40007c00 	.word	0x40007c00
 800efa0:	58000c00 	.word	0x58000c00
 800efa4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800efa8:	4bc4      	ldr	r3, [pc, #784]	; (800f2bc <UART_SetConfig+0x9c4>)
 800efaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efac:	e009      	b.n	800efc2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efb4:	e005      	b.n	800efc2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800efb6:	2300      	movs	r3, #0
 800efb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800efba:	2301      	movs	r3, #1
 800efbc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800efc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800efc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f000 81da 	beq.w	800f37e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efce:	4abc      	ldr	r2, [pc, #752]	; (800f2c0 <UART_SetConfig+0x9c8>)
 800efd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efd4:	461a      	mov	r2, r3
 800efd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd8:	fbb3 f3f2 	udiv	r3, r3, r2
 800efdc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	685a      	ldr	r2, [r3, #4]
 800efe2:	4613      	mov	r3, r2
 800efe4:	005b      	lsls	r3, r3, #1
 800efe6:	4413      	add	r3, r2
 800efe8:	6a3a      	ldr	r2, [r7, #32]
 800efea:	429a      	cmp	r2, r3
 800efec:	d305      	bcc.n	800effa <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	685b      	ldr	r3, [r3, #4]
 800eff2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eff4:	6a3a      	ldr	r2, [r7, #32]
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d903      	bls.n	800f002 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800effa:	2301      	movs	r3, #1
 800effc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f000:	e1bd      	b.n	800f37e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f004:	4618      	mov	r0, r3
 800f006:	f04f 0100 	mov.w	r1, #0
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f00e:	4aac      	ldr	r2, [pc, #688]	; (800f2c0 <UART_SetConfig+0x9c8>)
 800f010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f014:	b29a      	uxth	r2, r3
 800f016:	f04f 0300 	mov.w	r3, #0
 800f01a:	f7f1 f9b9 	bl	8000390 <__aeabi_uldivmod>
 800f01e:	4602      	mov	r2, r0
 800f020:	460b      	mov	r3, r1
 800f022:	4610      	mov	r0, r2
 800f024:	4619      	mov	r1, r3
 800f026:	f04f 0200 	mov.w	r2, #0
 800f02a:	f04f 0300 	mov.w	r3, #0
 800f02e:	020b      	lsls	r3, r1, #8
 800f030:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f034:	0202      	lsls	r2, r0, #8
 800f036:	6879      	ldr	r1, [r7, #4]
 800f038:	6849      	ldr	r1, [r1, #4]
 800f03a:	0849      	lsrs	r1, r1, #1
 800f03c:	4608      	mov	r0, r1
 800f03e:	f04f 0100 	mov.w	r1, #0
 800f042:	1814      	adds	r4, r2, r0
 800f044:	eb43 0501 	adc.w	r5, r3, r1
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	685b      	ldr	r3, [r3, #4]
 800f04c:	461a      	mov	r2, r3
 800f04e:	f04f 0300 	mov.w	r3, #0
 800f052:	4620      	mov	r0, r4
 800f054:	4629      	mov	r1, r5
 800f056:	f7f1 f99b 	bl	8000390 <__aeabi_uldivmod>
 800f05a:	4602      	mov	r2, r0
 800f05c:	460b      	mov	r3, r1
 800f05e:	4613      	mov	r3, r2
 800f060:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f068:	d308      	bcc.n	800f07c <UART_SetConfig+0x784>
 800f06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f06c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f070:	d204      	bcs.n	800f07c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f078:	60da      	str	r2, [r3, #12]
 800f07a:	e180      	b.n	800f37e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800f07c:	2301      	movs	r3, #1
 800f07e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f082:	e17c      	b.n	800f37e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	69db      	ldr	r3, [r3, #28]
 800f088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f08c:	f040 80bf 	bne.w	800f20e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800f090:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f094:	2b20      	cmp	r3, #32
 800f096:	dc49      	bgt.n	800f12c <UART_SetConfig+0x834>
 800f098:	2b00      	cmp	r3, #0
 800f09a:	db7c      	blt.n	800f196 <UART_SetConfig+0x89e>
 800f09c:	2b20      	cmp	r3, #32
 800f09e:	d87a      	bhi.n	800f196 <UART_SetConfig+0x89e>
 800f0a0:	a201      	add	r2, pc, #4	; (adr r2, 800f0a8 <UART_SetConfig+0x7b0>)
 800f0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a6:	bf00      	nop
 800f0a8:	0800f133 	.word	0x0800f133
 800f0ac:	0800f13b 	.word	0x0800f13b
 800f0b0:	0800f197 	.word	0x0800f197
 800f0b4:	0800f197 	.word	0x0800f197
 800f0b8:	0800f143 	.word	0x0800f143
 800f0bc:	0800f197 	.word	0x0800f197
 800f0c0:	0800f197 	.word	0x0800f197
 800f0c4:	0800f197 	.word	0x0800f197
 800f0c8:	0800f153 	.word	0x0800f153
 800f0cc:	0800f197 	.word	0x0800f197
 800f0d0:	0800f197 	.word	0x0800f197
 800f0d4:	0800f197 	.word	0x0800f197
 800f0d8:	0800f197 	.word	0x0800f197
 800f0dc:	0800f197 	.word	0x0800f197
 800f0e0:	0800f197 	.word	0x0800f197
 800f0e4:	0800f197 	.word	0x0800f197
 800f0e8:	0800f163 	.word	0x0800f163
 800f0ec:	0800f197 	.word	0x0800f197
 800f0f0:	0800f197 	.word	0x0800f197
 800f0f4:	0800f197 	.word	0x0800f197
 800f0f8:	0800f197 	.word	0x0800f197
 800f0fc:	0800f197 	.word	0x0800f197
 800f100:	0800f197 	.word	0x0800f197
 800f104:	0800f197 	.word	0x0800f197
 800f108:	0800f197 	.word	0x0800f197
 800f10c:	0800f197 	.word	0x0800f197
 800f110:	0800f197 	.word	0x0800f197
 800f114:	0800f197 	.word	0x0800f197
 800f118:	0800f197 	.word	0x0800f197
 800f11c:	0800f197 	.word	0x0800f197
 800f120:	0800f197 	.word	0x0800f197
 800f124:	0800f197 	.word	0x0800f197
 800f128:	0800f189 	.word	0x0800f189
 800f12c:	2b40      	cmp	r3, #64	; 0x40
 800f12e:	d02e      	beq.n	800f18e <UART_SetConfig+0x896>
 800f130:	e031      	b.n	800f196 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f132:	f7fb ffff 	bl	800b134 <HAL_RCC_GetPCLK1Freq>
 800f136:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f138:	e033      	b.n	800f1a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f13a:	f7fc f811 	bl	800b160 <HAL_RCC_GetPCLK2Freq>
 800f13e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f140:	e02f      	b.n	800f1a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f142:	f107 0314 	add.w	r3, r7, #20
 800f146:	4618      	mov	r0, r3
 800f148:	f7fc ff76 	bl	800c038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f14c:	69bb      	ldr	r3, [r7, #24]
 800f14e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f150:	e027      	b.n	800f1a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f152:	f107 0308 	add.w	r3, r7, #8
 800f156:	4618      	mov	r0, r3
 800f158:	f7fd f8c2 	bl	800c2e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f160:	e01f      	b.n	800f1a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f162:	4b58      	ldr	r3, [pc, #352]	; (800f2c4 <UART_SetConfig+0x9cc>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f003 0320 	and.w	r3, r3, #32
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d009      	beq.n	800f182 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f16e:	4b55      	ldr	r3, [pc, #340]	; (800f2c4 <UART_SetConfig+0x9cc>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	08db      	lsrs	r3, r3, #3
 800f174:	f003 0303 	and.w	r3, r3, #3
 800f178:	4a53      	ldr	r2, [pc, #332]	; (800f2c8 <UART_SetConfig+0x9d0>)
 800f17a:	fa22 f303 	lsr.w	r3, r2, r3
 800f17e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f180:	e00f      	b.n	800f1a2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800f182:	4b51      	ldr	r3, [pc, #324]	; (800f2c8 <UART_SetConfig+0x9d0>)
 800f184:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f186:	e00c      	b.n	800f1a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f188:	4b4c      	ldr	r3, [pc, #304]	; (800f2bc <UART_SetConfig+0x9c4>)
 800f18a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f18c:	e009      	b.n	800f1a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f18e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f192:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f194:	e005      	b.n	800f1a2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800f196:	2300      	movs	r3, #0
 800f198:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f19a:	2301      	movs	r3, #1
 800f19c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f1a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	f000 80ea 	beq.w	800f37e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ae:	4a44      	ldr	r2, [pc, #272]	; (800f2c0 <UART_SetConfig+0x9c8>)
 800f1b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1bc:	005a      	lsls	r2, r3, #1
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	085b      	lsrs	r3, r3, #1
 800f1c4:	441a      	add	r2, r3
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d4:	2b0f      	cmp	r3, #15
 800f1d6:	d916      	bls.n	800f206 <UART_SetConfig+0x90e>
 800f1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1de:	d212      	bcs.n	800f206 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	f023 030f 	bic.w	r3, r3, #15
 800f1e8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ec:	085b      	lsrs	r3, r3, #1
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	f003 0307 	and.w	r3, r3, #7
 800f1f4:	b29a      	uxth	r2, r3
 800f1f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f1f8:	4313      	orrs	r3, r2
 800f1fa:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f202:	60da      	str	r2, [r3, #12]
 800f204:	e0bb      	b.n	800f37e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f206:	2301      	movs	r3, #1
 800f208:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f20c:	e0b7      	b.n	800f37e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f20e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f212:	2b20      	cmp	r3, #32
 800f214:	dc4a      	bgt.n	800f2ac <UART_SetConfig+0x9b4>
 800f216:	2b00      	cmp	r3, #0
 800f218:	f2c0 8086 	blt.w	800f328 <UART_SetConfig+0xa30>
 800f21c:	2b20      	cmp	r3, #32
 800f21e:	f200 8083 	bhi.w	800f328 <UART_SetConfig+0xa30>
 800f222:	a201      	add	r2, pc, #4	; (adr r2, 800f228 <UART_SetConfig+0x930>)
 800f224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f228:	0800f2b3 	.word	0x0800f2b3
 800f22c:	0800f2cd 	.word	0x0800f2cd
 800f230:	0800f329 	.word	0x0800f329
 800f234:	0800f329 	.word	0x0800f329
 800f238:	0800f2d5 	.word	0x0800f2d5
 800f23c:	0800f329 	.word	0x0800f329
 800f240:	0800f329 	.word	0x0800f329
 800f244:	0800f329 	.word	0x0800f329
 800f248:	0800f2e5 	.word	0x0800f2e5
 800f24c:	0800f329 	.word	0x0800f329
 800f250:	0800f329 	.word	0x0800f329
 800f254:	0800f329 	.word	0x0800f329
 800f258:	0800f329 	.word	0x0800f329
 800f25c:	0800f329 	.word	0x0800f329
 800f260:	0800f329 	.word	0x0800f329
 800f264:	0800f329 	.word	0x0800f329
 800f268:	0800f2f5 	.word	0x0800f2f5
 800f26c:	0800f329 	.word	0x0800f329
 800f270:	0800f329 	.word	0x0800f329
 800f274:	0800f329 	.word	0x0800f329
 800f278:	0800f329 	.word	0x0800f329
 800f27c:	0800f329 	.word	0x0800f329
 800f280:	0800f329 	.word	0x0800f329
 800f284:	0800f329 	.word	0x0800f329
 800f288:	0800f329 	.word	0x0800f329
 800f28c:	0800f329 	.word	0x0800f329
 800f290:	0800f329 	.word	0x0800f329
 800f294:	0800f329 	.word	0x0800f329
 800f298:	0800f329 	.word	0x0800f329
 800f29c:	0800f329 	.word	0x0800f329
 800f2a0:	0800f329 	.word	0x0800f329
 800f2a4:	0800f329 	.word	0x0800f329
 800f2a8:	0800f31b 	.word	0x0800f31b
 800f2ac:	2b40      	cmp	r3, #64	; 0x40
 800f2ae:	d037      	beq.n	800f320 <UART_SetConfig+0xa28>
 800f2b0:	e03a      	b.n	800f328 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f2b2:	f7fb ff3f 	bl	800b134 <HAL_RCC_GetPCLK1Freq>
 800f2b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f2b8:	e03c      	b.n	800f334 <UART_SetConfig+0xa3c>
 800f2ba:	bf00      	nop
 800f2bc:	003d0900 	.word	0x003d0900
 800f2c0:	08013794 	.word	0x08013794
 800f2c4:	58024400 	.word	0x58024400
 800f2c8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f2cc:	f7fb ff48 	bl	800b160 <HAL_RCC_GetPCLK2Freq>
 800f2d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f2d2:	e02f      	b.n	800f334 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2d4:	f107 0314 	add.w	r3, r7, #20
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7fc fead 	bl	800c038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f2de:	69bb      	ldr	r3, [r7, #24]
 800f2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f2e2:	e027      	b.n	800f334 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f2e4:	f107 0308 	add.w	r3, r7, #8
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7fc fff9 	bl	800c2e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f2f2:	e01f      	b.n	800f334 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f2f4:	4b2c      	ldr	r3, [pc, #176]	; (800f3a8 <UART_SetConfig+0xab0>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	f003 0320 	and.w	r3, r3, #32
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d009      	beq.n	800f314 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f300:	4b29      	ldr	r3, [pc, #164]	; (800f3a8 <UART_SetConfig+0xab0>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	08db      	lsrs	r3, r3, #3
 800f306:	f003 0303 	and.w	r3, r3, #3
 800f30a:	4a28      	ldr	r2, [pc, #160]	; (800f3ac <UART_SetConfig+0xab4>)
 800f30c:	fa22 f303 	lsr.w	r3, r2, r3
 800f310:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f312:	e00f      	b.n	800f334 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800f314:	4b25      	ldr	r3, [pc, #148]	; (800f3ac <UART_SetConfig+0xab4>)
 800f316:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f318:	e00c      	b.n	800f334 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f31a:	4b25      	ldr	r3, [pc, #148]	; (800f3b0 <UART_SetConfig+0xab8>)
 800f31c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f31e:	e009      	b.n	800f334 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f324:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f326:	e005      	b.n	800f334 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800f328:	2300      	movs	r3, #0
 800f32a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f32c:	2301      	movs	r3, #1
 800f32e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f332:	bf00      	nop
    }

    if (pclk != 0U)
 800f334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f336:	2b00      	cmp	r3, #0
 800f338:	d021      	beq.n	800f37e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f33e:	4a1d      	ldr	r2, [pc, #116]	; (800f3b4 <UART_SetConfig+0xabc>)
 800f340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f344:	461a      	mov	r2, r3
 800f346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f348:	fbb3 f2f2 	udiv	r2, r3, r2
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	085b      	lsrs	r3, r3, #1
 800f352:	441a      	add	r2, r3
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	fbb2 f3f3 	udiv	r3, r2, r3
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f362:	2b0f      	cmp	r3, #15
 800f364:	d908      	bls.n	800f378 <UART_SetConfig+0xa80>
 800f366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f36c:	d204      	bcs.n	800f378 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f374:	60da      	str	r2, [r3, #12]
 800f376:	e002      	b.n	800f37e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f378:	2301      	movs	r3, #1
 800f37a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2201      	movs	r2, #1
 800f382:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2201      	movs	r2, #1
 800f38a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2200      	movs	r2, #0
 800f392:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2200      	movs	r2, #0
 800f398:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f39a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3738      	adds	r7, #56	; 0x38
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bdb0      	pop	{r4, r5, r7, pc}
 800f3a6:	bf00      	nop
 800f3a8:	58024400 	.word	0x58024400
 800f3ac:	03d09000 	.word	0x03d09000
 800f3b0:	003d0900 	.word	0x003d0900
 800f3b4:	08013794 	.word	0x08013794

0800f3b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b083      	sub	sp, #12
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3c4:	f003 0301 	and.w	r3, r3, #1
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d00a      	beq.n	800f3e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	430a      	orrs	r2, r1
 800f3e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3e6:	f003 0302 	and.w	r3, r3, #2
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d00a      	beq.n	800f404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	430a      	orrs	r2, r1
 800f402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f408:	f003 0304 	and.w	r3, r3, #4
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d00a      	beq.n	800f426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	430a      	orrs	r2, r1
 800f424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f42a:	f003 0308 	and.w	r3, r3, #8
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d00a      	beq.n	800f448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	430a      	orrs	r2, r1
 800f446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f44c:	f003 0310 	and.w	r3, r3, #16
 800f450:	2b00      	cmp	r3, #0
 800f452:	d00a      	beq.n	800f46a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	689b      	ldr	r3, [r3, #8]
 800f45a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	430a      	orrs	r2, r1
 800f468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f46e:	f003 0320 	and.w	r3, r3, #32
 800f472:	2b00      	cmp	r3, #0
 800f474:	d00a      	beq.n	800f48c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	689b      	ldr	r3, [r3, #8]
 800f47c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	430a      	orrs	r2, r1
 800f48a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f494:	2b00      	cmp	r3, #0
 800f496:	d01a      	beq.n	800f4ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	430a      	orrs	r2, r1
 800f4ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4b6:	d10a      	bne.n	800f4ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	430a      	orrs	r2, r1
 800f4cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d00a      	beq.n	800f4f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	430a      	orrs	r2, r1
 800f4ee:	605a      	str	r2, [r3, #4]
  }
}
 800f4f0:	bf00      	nop
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr

0800f4fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b086      	sub	sp, #24
 800f500:	af02      	add	r7, sp, #8
 800f502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2200      	movs	r2, #0
 800f508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f50c:	f7f5 fa90 	bl	8004a30 <HAL_GetTick>
 800f510:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	f003 0308 	and.w	r3, r3, #8
 800f51c:	2b08      	cmp	r3, #8
 800f51e:	d10e      	bne.n	800f53e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f524:	9300      	str	r3, [sp, #0]
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	2200      	movs	r2, #0
 800f52a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f000 f82f 	bl	800f592 <UART_WaitOnFlagUntilTimeout>
 800f534:	4603      	mov	r3, r0
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f53a:	2303      	movs	r3, #3
 800f53c:	e025      	b.n	800f58a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	f003 0304 	and.w	r3, r3, #4
 800f548:	2b04      	cmp	r3, #4
 800f54a:	d10e      	bne.n	800f56a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f54c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f550:	9300      	str	r3, [sp, #0]
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2200      	movs	r2, #0
 800f556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 f819 	bl	800f592 <UART_WaitOnFlagUntilTimeout>
 800f560:	4603      	mov	r3, r0
 800f562:	2b00      	cmp	r3, #0
 800f564:	d001      	beq.n	800f56a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f566:	2303      	movs	r3, #3
 800f568:	e00f      	b.n	800f58a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2220      	movs	r2, #32
 800f56e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2220      	movs	r2, #32
 800f576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2200      	movs	r2, #0
 800f57e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2200      	movs	r2, #0
 800f584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f588:	2300      	movs	r3, #0
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}

0800f592 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f592:	b580      	push	{r7, lr}
 800f594:	b084      	sub	sp, #16
 800f596:	af00      	add	r7, sp, #0
 800f598:	60f8      	str	r0, [r7, #12]
 800f59a:	60b9      	str	r1, [r7, #8]
 800f59c:	603b      	str	r3, [r7, #0]
 800f59e:	4613      	mov	r3, r2
 800f5a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f5a2:	e062      	b.n	800f66a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f5a4:	69bb      	ldr	r3, [r7, #24]
 800f5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5aa:	d05e      	beq.n	800f66a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f5ac:	f7f5 fa40 	bl	8004a30 <HAL_GetTick>
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	1ad3      	subs	r3, r2, r3
 800f5b6:	69ba      	ldr	r2, [r7, #24]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d302      	bcc.n	800f5c2 <UART_WaitOnFlagUntilTimeout+0x30>
 800f5bc:	69bb      	ldr	r3, [r7, #24]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d11d      	bne.n	800f5fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	681a      	ldr	r2, [r3, #0]
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f5d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	689a      	ldr	r2, [r3, #8]
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f022 0201 	bic.w	r2, r2, #1
 800f5e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2220      	movs	r2, #32
 800f5e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2220      	movs	r2, #32
 800f5ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f5fa:	2303      	movs	r3, #3
 800f5fc:	e045      	b.n	800f68a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f003 0304 	and.w	r3, r3, #4
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d02e      	beq.n	800f66a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	69db      	ldr	r3, [r3, #28]
 800f612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f61a:	d126      	bne.n	800f66a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f624:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f634:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	689a      	ldr	r2, [r3, #8]
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	f022 0201 	bic.w	r2, r2, #1
 800f644:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2220      	movs	r2, #32
 800f64a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2220      	movs	r2, #32
 800f652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	2220      	movs	r2, #32
 800f65a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2200      	movs	r2, #0
 800f662:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f666:	2303      	movs	r3, #3
 800f668:	e00f      	b.n	800f68a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	69da      	ldr	r2, [r3, #28]
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	4013      	ands	r3, r2
 800f674:	68ba      	ldr	r2, [r7, #8]
 800f676:	429a      	cmp	r2, r3
 800f678:	bf0c      	ite	eq
 800f67a:	2301      	moveq	r3, #1
 800f67c:	2300      	movne	r3, #0
 800f67e:	b2db      	uxtb	r3, r3
 800f680:	461a      	mov	r2, r3
 800f682:	79fb      	ldrb	r3, [r7, #7]
 800f684:	429a      	cmp	r2, r3
 800f686:	d08d      	beq.n	800f5a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f688:	2300      	movs	r3, #0
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3710      	adds	r7, #16
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}
	...

0800f694 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f694:	b480      	push	{r7}
 800f696:	b085      	sub	sp, #20
 800f698:	af00      	add	r7, sp, #0
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	4613      	mov	r3, r2
 800f6a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	68ba      	ldr	r2, [r7, #8]
 800f6a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	88fa      	ldrh	r2, [r7, #6]
 800f6ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	88fa      	ldrh	r2, [r7, #6]
 800f6b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	689b      	ldr	r3, [r3, #8]
 800f6c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6c6:	d10e      	bne.n	800f6e6 <UART_Start_Receive_IT+0x52>
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	691b      	ldr	r3, [r3, #16]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d105      	bne.n	800f6dc <UART_Start_Receive_IT+0x48>
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f6d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f6da:	e02d      	b.n	800f738 <UART_Start_Receive_IT+0xa4>
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	22ff      	movs	r2, #255	; 0xff
 800f6e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f6e4:	e028      	b.n	800f738 <UART_Start_Receive_IT+0xa4>
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	689b      	ldr	r3, [r3, #8]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d10d      	bne.n	800f70a <UART_Start_Receive_IT+0x76>
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	691b      	ldr	r3, [r3, #16]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d104      	bne.n	800f700 <UART_Start_Receive_IT+0x6c>
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	22ff      	movs	r2, #255	; 0xff
 800f6fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f6fe:	e01b      	b.n	800f738 <UART_Start_Receive_IT+0xa4>
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	227f      	movs	r2, #127	; 0x7f
 800f704:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f708:	e016      	b.n	800f738 <UART_Start_Receive_IT+0xa4>
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	689b      	ldr	r3, [r3, #8]
 800f70e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f712:	d10d      	bne.n	800f730 <UART_Start_Receive_IT+0x9c>
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	691b      	ldr	r3, [r3, #16]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d104      	bne.n	800f726 <UART_Start_Receive_IT+0x92>
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	227f      	movs	r2, #127	; 0x7f
 800f720:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f724:	e008      	b.n	800f738 <UART_Start_Receive_IT+0xa4>
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	223f      	movs	r2, #63	; 0x3f
 800f72a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f72e:	e003      	b.n	800f738 <UART_Start_Receive_IT+0xa4>
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2200      	movs	r2, #0
 800f734:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2200      	movs	r2, #0
 800f73c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2222      	movs	r2, #34	; 0x22
 800f744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	689a      	ldr	r2, [r3, #8]
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f042 0201 	orr.w	r2, r2, #1
 800f756:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f75c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f760:	d12a      	bne.n	800f7b8 <UART_Start_Receive_IT+0x124>
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f768:	88fa      	ldrh	r2, [r7, #6]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d324      	bcc.n	800f7b8 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	689b      	ldr	r3, [r3, #8]
 800f772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f776:	d107      	bne.n	800f788 <UART_Start_Receive_IT+0xf4>
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	691b      	ldr	r3, [r3, #16]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d103      	bne.n	800f788 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	4a1f      	ldr	r2, [pc, #124]	; (800f800 <UART_Start_Receive_IT+0x16c>)
 800f784:	671a      	str	r2, [r3, #112]	; 0x70
 800f786:	e002      	b.n	800f78e <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	4a1e      	ldr	r2, [pc, #120]	; (800f804 <UART_Start_Receive_IT+0x170>)
 800f78c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2200      	movs	r2, #0
 800f792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	681a      	ldr	r2, [r3, #0]
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f7a4:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	689a      	ldr	r2, [r3, #8]
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f7b4:	609a      	str	r2, [r3, #8]
 800f7b6:	e01b      	b.n	800f7f0 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	689b      	ldr	r3, [r3, #8]
 800f7bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7c0:	d107      	bne.n	800f7d2 <UART_Start_Receive_IT+0x13e>
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	691b      	ldr	r3, [r3, #16]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d103      	bne.n	800f7d2 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	4a0e      	ldr	r2, [pc, #56]	; (800f808 <UART_Start_Receive_IT+0x174>)
 800f7ce:	671a      	str	r2, [r3, #112]	; 0x70
 800f7d0:	e002      	b.n	800f7d8 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	4a0d      	ldr	r2, [pc, #52]	; (800f80c <UART_Start_Receive_IT+0x178>)
 800f7d6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	681a      	ldr	r2, [r3, #0]
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800f7ee:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800f7f0:	2300      	movs	r3, #0
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3714      	adds	r7, #20
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fc:	4770      	bx	lr
 800f7fe:	bf00      	nop
 800f800:	0800ff5d 	.word	0x0800ff5d
 800f804:	0800fd59 	.word	0x0800fd59
 800f808:	0800fc7f 	.word	0x0800fc7f
 800f80c:	0800fba7 	.word	0x0800fba7

0800f810 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b084      	sub	sp, #16
 800f814:	af00      	add	r7, sp, #0
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	4613      	mov	r3, r2
 800f81c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	68ba      	ldr	r2, [r7, #8]
 800f822:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	88fa      	ldrh	r2, [r7, #6]
 800f828:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2200      	movs	r2, #0
 800f830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2222      	movs	r2, #34	; 0x22
 800f838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f840:	2b00      	cmp	r3, #0
 800f842:	d02c      	beq.n	800f89e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f848:	4a25      	ldr	r2, [pc, #148]	; (800f8e0 <UART_Start_Receive_DMA+0xd0>)
 800f84a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f850:	4a24      	ldr	r2, [pc, #144]	; (800f8e4 <UART_Start_Receive_DMA+0xd4>)
 800f852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f858:	4a23      	ldr	r2, [pc, #140]	; (800f8e8 <UART_Start_Receive_DMA+0xd8>)
 800f85a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f860:	2200      	movs	r2, #0
 800f862:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	3324      	adds	r3, #36	; 0x24
 800f86e:	4619      	mov	r1, r3
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f874:	461a      	mov	r2, r3
 800f876:	88fb      	ldrh	r3, [r7, #6]
 800f878:	f7f5 fd82 	bl	8005380 <HAL_DMA_Start_IT>
 800f87c:	4603      	mov	r3, r0
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d00d      	beq.n	800f89e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2210      	movs	r2, #16
 800f886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2200      	movs	r2, #0
 800f88e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2220      	movs	r2, #32
 800f896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800f89a:	2301      	movs	r3, #1
 800f89c:	e01c      	b.n	800f8d8 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f8b4:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	689a      	ldr	r2, [r3, #8]
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	f042 0201 	orr.w	r2, r2, #1
 800f8c4:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	689a      	ldr	r2, [r3, #8]
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f8d4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800f8d6:	2300      	movs	r3, #0
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3710      	adds	r7, #16
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	0800f9f9 	.word	0x0800f9f9
 800f8e4:	0800fa8f 	.word	0x0800fa8f
 800f8e8:	0800fac7 	.word	0x0800fac7

0800f8ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b083      	sub	sp, #12
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f902:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	689a      	ldr	r2, [r3, #8]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800f912:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2220      	movs	r2, #32
 800f918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f91c:	bf00      	nop
 800f91e:	370c      	adds	r7, #12
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr

0800f928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f93e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	6899      	ldr	r1, [r3, #8]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681a      	ldr	r2, [r3, #0]
 800f94a:	4b0f      	ldr	r3, [pc, #60]	; (800f988 <UART_EndRxTransfer+0x60>)
 800f94c:	400b      	ands	r3, r1
 800f94e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f954:	2b01      	cmp	r3, #1
 800f956:	d107      	bne.n	800f968 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	681a      	ldr	r2, [r3, #0]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f022 0210 	bic.w	r2, r2, #16
 800f966:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2220      	movs	r2, #32
 800f96c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2200      	movs	r2, #0
 800f974:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2200      	movs	r2, #0
 800f97a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f97c:	bf00      	nop
 800f97e:	370c      	adds	r7, #12
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr
 800f988:	effffffe 	.word	0xeffffffe

0800f98c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b084      	sub	sp, #16
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f998:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	69db      	ldr	r3, [r3, #28]
 800f99e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9a2:	d014      	beq.n	800f9ce <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	689a      	ldr	r2, [r3, #8]
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f9ba:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f9ca:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f9cc:	e002      	b.n	800f9d4 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800f9ce:	68f8      	ldr	r0, [r7, #12]
 800f9d0:	f7fe ff5e 	bl	800e890 <HAL_UART_TxCpltCallback>
}
 800f9d4:	bf00      	nop
 800f9d6:	3710      	adds	r7, #16
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b084      	sub	sp, #16
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f9ea:	68f8      	ldr	r0, [r7, #12]
 800f9ec:	f7fe ff5a 	bl	800e8a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9f0:	bf00      	nop
 800f9f2:	3710      	adds	r7, #16
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b084      	sub	sp, #16
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa04:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	69db      	ldr	r3, [r3, #28]
 800fa0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa0e:	d02b      	beq.n	800fa68 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2200      	movs	r2, #0
 800fa14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	681a      	ldr	r2, [r3, #0]
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fa26:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	689a      	ldr	r2, [r3, #8]
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	f022 0201 	bic.w	r2, r2, #1
 800fa36:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	689a      	ldr	r2, [r3, #8]
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fa46:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	2220      	movs	r2, #32
 800fa4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	d107      	bne.n	800fa68 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	681a      	ldr	r2, [r3, #0]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	f022 0210 	bic.w	r2, r2, #16
 800fa66:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa6c:	2b01      	cmp	r3, #1
 800fa6e:	d107      	bne.n	800fa80 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fa76:	4619      	mov	r1, r3
 800fa78:	68f8      	ldr	r0, [r7, #12]
 800fa7a:	f7fe ff31 	bl	800e8e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fa7e:	e002      	b.n	800fa86 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800fa80:	68f8      	ldr	r0, [r7, #12]
 800fa82:	f7f4 f925 	bl	8003cd0 <HAL_UART_RxCpltCallback>
}
 800fa86:	bf00      	nop
 800fa88:	3710      	adds	r7, #16
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}

0800fa8e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fa8e:	b580      	push	{r7, lr}
 800fa90:	b084      	sub	sp, #16
 800fa92:	af00      	add	r7, sp, #0
 800fa94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa9a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	d109      	bne.n	800fab8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800faaa:	085b      	lsrs	r3, r3, #1
 800faac:	b29b      	uxth	r3, r3
 800faae:	4619      	mov	r1, r3
 800fab0:	68f8      	ldr	r0, [r7, #12]
 800fab2:	f7fe ff15 	bl	800e8e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fab6:	e002      	b.n	800fabe <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800fab8:	68f8      	ldr	r0, [r7, #12]
 800faba:	f7fe fefd 	bl	800e8b8 <HAL_UART_RxHalfCpltCallback>
}
 800fabe:	bf00      	nop
 800fac0:	3710      	adds	r7, #16
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}

0800fac6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fac6:	b580      	push	{r7, lr}
 800fac8:	b086      	sub	sp, #24
 800faca:	af00      	add	r7, sp, #0
 800facc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fad2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fada:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fae2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	689b      	ldr	r3, [r3, #8]
 800faea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800faee:	2b80      	cmp	r3, #128	; 0x80
 800faf0:	d109      	bne.n	800fb06 <UART_DMAError+0x40>
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	2b21      	cmp	r3, #33	; 0x21
 800faf6:	d106      	bne.n	800fb06 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	2200      	movs	r2, #0
 800fafc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fb00:	6978      	ldr	r0, [r7, #20]
 800fb02:	f7ff fef3 	bl	800f8ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	689b      	ldr	r3, [r3, #8]
 800fb0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb10:	2b40      	cmp	r3, #64	; 0x40
 800fb12:	d109      	bne.n	800fb28 <UART_DMAError+0x62>
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	2b22      	cmp	r3, #34	; 0x22
 800fb18:	d106      	bne.n	800fb28 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fb22:	6978      	ldr	r0, [r7, #20]
 800fb24:	f7ff ff00 	bl	800f928 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb2e:	f043 0210 	orr.w	r2, r3, #16
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fb38:	6978      	ldr	r0, [r7, #20]
 800fb3a:	f7fe fec7 	bl	800e8cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb3e:	bf00      	nop
 800fb40:	3718      	adds	r7, #24
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}

0800fb46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fb46:	b580      	push	{r7, lr}
 800fb48:	b084      	sub	sp, #16
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2200      	movs	r2, #0
 800fb58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fb64:	68f8      	ldr	r0, [r7, #12]
 800fb66:	f7fe feb1 	bl	800e8cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb6a:	bf00      	nop
 800fb6c:	3710      	adds	r7, #16
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}

0800fb72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fb72:	b580      	push	{r7, lr}
 800fb74:	b082      	sub	sp, #8
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	681a      	ldr	r2, [r3, #0]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fb88:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2220      	movs	r2, #32
 800fb8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2200      	movs	r2, #0
 800fb96:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f7fe fe79 	bl	800e890 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb9e:	bf00      	nop
 800fba0:	3708      	adds	r7, #8
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fba6:	b580      	push	{r7, lr}
 800fba8:	b084      	sub	sp, #16
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbb4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fbbc:	2b22      	cmp	r3, #34	; 0x22
 800fbbe:	d152      	bne.n	800fc66 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fbc8:	89bb      	ldrh	r3, [r7, #12]
 800fbca:	b2d9      	uxtb	r1, r3
 800fbcc:	89fb      	ldrh	r3, [r7, #14]
 800fbce:	b2da      	uxtb	r2, r3
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbd4:	400a      	ands	r2, r1
 800fbd6:	b2d2      	uxtb	r2, r2
 800fbd8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbde:	1c5a      	adds	r2, r3, #1
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fbea:	b29b      	uxth	r3, r3
 800fbec:	3b01      	subs	r3, #1
 800fbee:	b29a      	uxth	r2, r3
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fbfc:	b29b      	uxth	r3, r3
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d139      	bne.n	800fc76 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	681a      	ldr	r2, [r3, #0]
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fc10:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	689a      	ldr	r2, [r3, #8]
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	f022 0201 	bic.w	r2, r2, #1
 800fc20:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2220      	movs	r2, #32
 800fc26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d10f      	bne.n	800fc58 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	681a      	ldr	r2, [r3, #0]
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	f022 0210 	bic.w	r2, r2, #16
 800fc46:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fc4e:	4619      	mov	r1, r3
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f7fe fe45 	bl	800e8e0 <HAL_UARTEx_RxEventCallback>
 800fc56:	e002      	b.n	800fc5e <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f7f4 f839 	bl	8003cd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2200      	movs	r2, #0
 800fc62:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fc64:	e007      	b.n	800fc76 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	699a      	ldr	r2, [r3, #24]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	f042 0208 	orr.w	r2, r2, #8
 800fc74:	619a      	str	r2, [r3, #24]
}
 800fc76:	bf00      	nop
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b084      	sub	sp, #16
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc8c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc94:	2b22      	cmp	r3, #34	; 0x22
 800fc96:	d152      	bne.n	800fd3e <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc9e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fca4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800fca6:	89ba      	ldrh	r2, [r7, #12]
 800fca8:	89fb      	ldrh	r3, [r7, #14]
 800fcaa:	4013      	ands	r3, r2
 800fcac:	b29a      	uxth	r2, r3
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcb6:	1c9a      	adds	r2, r3, #2
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	3b01      	subs	r3, #1
 800fcc6:	b29a      	uxth	r2, r3
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fcd4:	b29b      	uxth	r3, r3
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d139      	bne.n	800fd4e <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	681a      	ldr	r2, [r3, #0]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fce8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	689a      	ldr	r2, [r3, #8]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f022 0201 	bic.w	r2, r2, #1
 800fcf8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2220      	movs	r2, #32
 800fcfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2200      	movs	r2, #0
 800fd06:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d10f      	bne.n	800fd30 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	681a      	ldr	r2, [r3, #0]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	f022 0210 	bic.w	r2, r2, #16
 800fd1e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fd26:	4619      	mov	r1, r3
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f7fe fdd9 	bl	800e8e0 <HAL_UARTEx_RxEventCallback>
 800fd2e:	e002      	b.n	800fd36 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f7f3 ffcd 	bl	8003cd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fd3c:	e007      	b.n	800fd4e <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	699a      	ldr	r2, [r3, #24]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f042 0208 	orr.w	r2, r2, #8
 800fd4c:	619a      	str	r2, [r3, #24]
}
 800fd4e:	bf00      	nop
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
	...

0800fd58 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b088      	sub	sp, #32
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd66:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	69db      	ldr	r3, [r3, #28]
 800fd6e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	689b      	ldr	r3, [r3, #8]
 800fd7e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd86:	2b22      	cmp	r3, #34	; 0x22
 800fd88:	f040 80d8 	bne.w	800ff3c <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fd92:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fd94:	e0a8      	b.n	800fee8 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fd9e:	89bb      	ldrh	r3, [r7, #12]
 800fda0:	b2d9      	uxtb	r1, r3
 800fda2:	8b7b      	ldrh	r3, [r7, #26]
 800fda4:	b2da      	uxtb	r2, r3
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdaa:	400a      	ands	r2, r1
 800fdac:	b2d2      	uxtb	r2, r2
 800fdae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdb4:	1c5a      	adds	r2, r3, #1
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdc0:	b29b      	uxth	r3, r3
 800fdc2:	3b01      	subs	r3, #1
 800fdc4:	b29a      	uxth	r2, r3
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	69db      	ldr	r3, [r3, #28]
 800fdd2:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fdd4:	69fb      	ldr	r3, [r7, #28]
 800fdd6:	f003 0307 	and.w	r3, r3, #7
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d04d      	beq.n	800fe7a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fdde:	69fb      	ldr	r3, [r7, #28]
 800fde0:	f003 0301 	and.w	r3, r3, #1
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d010      	beq.n	800fe0a <UART_RxISR_8BIT_FIFOEN+0xb2>
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d00b      	beq.n	800fe0a <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe00:	f043 0201 	orr.w	r2, r3, #1
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe0a:	69fb      	ldr	r3, [r7, #28]
 800fe0c:	f003 0302 	and.w	r3, r3, #2
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d010      	beq.n	800fe36 <UART_RxISR_8BIT_FIFOEN+0xde>
 800fe14:	693b      	ldr	r3, [r7, #16]
 800fe16:	f003 0301 	and.w	r3, r3, #1
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d00b      	beq.n	800fe36 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	2202      	movs	r2, #2
 800fe24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe2c:	f043 0204 	orr.w	r2, r3, #4
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe36:	69fb      	ldr	r3, [r7, #28]
 800fe38:	f003 0304 	and.w	r3, r3, #4
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d010      	beq.n	800fe62 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	f003 0301 	and.w	r3, r3, #1
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d00b      	beq.n	800fe62 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	2204      	movs	r2, #4
 800fe50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe58:	f043 0202 	orr.w	r2, r3, #2
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d006      	beq.n	800fe7a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f7fe fd2d 	bl	800e8cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2200      	movs	r2, #0
 800fe76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe80:	b29b      	uxth	r3, r3
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d130      	bne.n	800fee8 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	681a      	ldr	r2, [r3, #0]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fe94:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	6899      	ldr	r1, [r3, #8]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681a      	ldr	r2, [r3, #0]
 800fea0:	4b2c      	ldr	r3, [pc, #176]	; (800ff54 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800fea2:	400b      	ands	r3, r1
 800fea4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2220      	movs	r2, #32
 800feaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2200      	movs	r2, #0
 800feb2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d10f      	bne.n	800fedc <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	681a      	ldr	r2, [r3, #0]
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	f022 0210 	bic.w	r2, r2, #16
 800feca:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fed2:	4619      	mov	r1, r3
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f7fe fd03 	bl	800e8e0 <HAL_UARTEx_RxEventCallback>
 800feda:	e002      	b.n	800fee2 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f7f3 fef7 	bl	8003cd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2200      	movs	r2, #0
 800fee6:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fee8:	89fb      	ldrh	r3, [r7, #14]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d005      	beq.n	800fefa <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800feee:	69fb      	ldr	r3, [r7, #28]
 800fef0:	f003 0320 	and.w	r3, r3, #32
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	f47f af4e 	bne.w	800fd96 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff00:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ff02:	897b      	ldrh	r3, [r7, #10]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d021      	beq.n	800ff4c <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ff0e:	897a      	ldrh	r2, [r7, #10]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d21b      	bcs.n	800ff4c <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	689a      	ldr	r2, [r3, #8]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ff22:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	4a0c      	ldr	r2, [pc, #48]	; (800ff58 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800ff28:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	681a      	ldr	r2, [r3, #0]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	f042 0220 	orr.w	r2, r2, #32
 800ff38:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ff3a:	e007      	b.n	800ff4c <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	699a      	ldr	r2, [r3, #24]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f042 0208 	orr.w	r2, r2, #8
 800ff4a:	619a      	str	r2, [r3, #24]
}
 800ff4c:	bf00      	nop
 800ff4e:	3720      	adds	r7, #32
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	effffffe 	.word	0xeffffffe
 800ff58:	0800fba7 	.word	0x0800fba7

0800ff5c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b08a      	sub	sp, #40	; 0x28
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff6a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	69db      	ldr	r3, [r3, #28]
 800ff72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	689b      	ldr	r3, [r3, #8]
 800ff82:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff8a:	2b22      	cmp	r3, #34	; 0x22
 800ff8c:	f040 80d8 	bne.w	8010140 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ff96:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ff98:	e0a8      	b.n	80100ec <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa0:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffa6:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800ffa8:	8aba      	ldrh	r2, [r7, #20]
 800ffaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ffac:	4013      	ands	r3, r2
 800ffae:	b29a      	uxth	r2, r3
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffb8:	1c9a      	adds	r2, r3, #2
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	3b01      	subs	r3, #1
 800ffc8:	b29a      	uxth	r2, r3
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	69db      	ldr	r3, [r3, #28]
 800ffd6:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ffd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffda:	f003 0307 	and.w	r3, r3, #7
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d04d      	beq.n	801007e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ffe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe4:	f003 0301 	and.w	r3, r3, #1
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d010      	beq.n	801000e <UART_RxISR_16BIT_FIFOEN+0xb2>
 800ffec:	69fb      	ldr	r3, [r7, #28]
 800ffee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d00b      	beq.n	801000e <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	2201      	movs	r2, #1
 800fffc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010004:	f043 0201 	orr.w	r2, r3, #1
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801000e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010010:	f003 0302 	and.w	r3, r3, #2
 8010014:	2b00      	cmp	r3, #0
 8010016:	d010      	beq.n	801003a <UART_RxISR_16BIT_FIFOEN+0xde>
 8010018:	69bb      	ldr	r3, [r7, #24]
 801001a:	f003 0301 	and.w	r3, r3, #1
 801001e:	2b00      	cmp	r3, #0
 8010020:	d00b      	beq.n	801003a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	2202      	movs	r2, #2
 8010028:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010030:	f043 0204 	orr.w	r2, r3, #4
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801003a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003c:	f003 0304 	and.w	r3, r3, #4
 8010040:	2b00      	cmp	r3, #0
 8010042:	d010      	beq.n	8010066 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8010044:	69bb      	ldr	r3, [r7, #24]
 8010046:	f003 0301 	and.w	r3, r3, #1
 801004a:	2b00      	cmp	r3, #0
 801004c:	d00b      	beq.n	8010066 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	2204      	movs	r2, #4
 8010054:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801005c:	f043 0202 	orr.w	r2, r3, #2
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801006c:	2b00      	cmp	r3, #0
 801006e:	d006      	beq.n	801007e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f7fe fc2b 	bl	800e8cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2200      	movs	r2, #0
 801007a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010084:	b29b      	uxth	r3, r3
 8010086:	2b00      	cmp	r3, #0
 8010088:	d130      	bne.n	80100ec <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	681a      	ldr	r2, [r3, #0]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010098:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	6899      	ldr	r1, [r3, #8]
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681a      	ldr	r2, [r3, #0]
 80100a4:	4b2c      	ldr	r3, [pc, #176]	; (8010158 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 80100a6:	400b      	ands	r3, r1
 80100a8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2220      	movs	r2, #32
 80100ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2200      	movs	r2, #0
 80100b6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100bc:	2b01      	cmp	r3, #1
 80100be:	d10f      	bne.n	80100e0 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	681a      	ldr	r2, [r3, #0]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	f022 0210 	bic.w	r2, r2, #16
 80100ce:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80100d6:	4619      	mov	r1, r3
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f7fe fc01 	bl	800e8e0 <HAL_UARTEx_RxEventCallback>
 80100de:	e002      	b.n	80100e6 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f7f3 fdf5 	bl	8003cd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2200      	movs	r2, #0
 80100ea:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80100ec:	8afb      	ldrh	r3, [r7, #22]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d005      	beq.n	80100fe <UART_RxISR_16BIT_FIFOEN+0x1a2>
 80100f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f4:	f003 0320 	and.w	r3, r3, #32
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	f47f af4e 	bne.w	800ff9a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010104:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010106:	89fb      	ldrh	r3, [r7, #14]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d021      	beq.n	8010150 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010112:	89fa      	ldrh	r2, [r7, #14]
 8010114:	429a      	cmp	r2, r3
 8010116:	d21b      	bcs.n	8010150 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	689a      	ldr	r2, [r3, #8]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8010126:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	4a0c      	ldr	r2, [pc, #48]	; (801015c <UART_RxISR_16BIT_FIFOEN+0x200>)
 801012c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	f042 0220 	orr.w	r2, r2, #32
 801013c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801013e:	e007      	b.n	8010150 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	699a      	ldr	r2, [r3, #24]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f042 0208 	orr.w	r2, r2, #8
 801014e:	619a      	str	r2, [r3, #24]
}
 8010150:	bf00      	nop
 8010152:	3728      	adds	r7, #40	; 0x28
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	effffffe 	.word	0xeffffffe
 801015c:	0800fc7f 	.word	0x0800fc7f

08010160 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010160:	b480      	push	{r7}
 8010162:	b083      	sub	sp, #12
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010168:	bf00      	nop
 801016a:	370c      	adds	r7, #12
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	4770      	bx	lr

08010174 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010174:	b480      	push	{r7}
 8010176:	b083      	sub	sp, #12
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801017c:	bf00      	nop
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010188:	b480      	push	{r7}
 801018a:	b083      	sub	sp, #12
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010190:	bf00      	nop
 8010192:	370c      	adds	r7, #12
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr

0801019c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801019c:	b480      	push	{r7}
 801019e:	b085      	sub	sp, #20
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80101aa:	2b01      	cmp	r3, #1
 80101ac:	d101      	bne.n	80101b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80101ae:	2302      	movs	r3, #2
 80101b0:	e027      	b.n	8010202 <HAL_UARTEx_DisableFifoMode+0x66>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2201      	movs	r2, #1
 80101b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2224      	movs	r2, #36	; 0x24
 80101be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	681a      	ldr	r2, [r3, #0]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f022 0201 	bic.w	r2, r2, #1
 80101d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80101e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	2200      	movs	r2, #0
 80101e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	68fa      	ldr	r2, [r7, #12]
 80101ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2220      	movs	r2, #32
 80101f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010200:	2300      	movs	r3, #0
}
 8010202:	4618      	mov	r0, r3
 8010204:	3714      	adds	r7, #20
 8010206:	46bd      	mov	sp, r7
 8010208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020c:	4770      	bx	lr

0801020e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801020e:	b580      	push	{r7, lr}
 8010210:	b084      	sub	sp, #16
 8010212:	af00      	add	r7, sp, #0
 8010214:	6078      	str	r0, [r7, #4]
 8010216:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801021e:	2b01      	cmp	r3, #1
 8010220:	d101      	bne.n	8010226 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010222:	2302      	movs	r3, #2
 8010224:	e02d      	b.n	8010282 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2201      	movs	r2, #1
 801022a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2224      	movs	r2, #36	; 0x24
 8010232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	f022 0201 	bic.w	r2, r2, #1
 801024c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	689b      	ldr	r3, [r3, #8]
 8010254:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	683a      	ldr	r2, [r7, #0]
 801025e:	430a      	orrs	r2, r1
 8010260:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f000 f850 	bl	8010308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	68fa      	ldr	r2, [r7, #12]
 801026e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2220      	movs	r2, #32
 8010274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2200      	movs	r2, #0
 801027c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010280:	2300      	movs	r3, #0
}
 8010282:	4618      	mov	r0, r3
 8010284:	3710      	adds	r7, #16
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}

0801028a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801028a:	b580      	push	{r7, lr}
 801028c:	b084      	sub	sp, #16
 801028e:	af00      	add	r7, sp, #0
 8010290:	6078      	str	r0, [r7, #4]
 8010292:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801029a:	2b01      	cmp	r3, #1
 801029c:	d101      	bne.n	80102a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801029e:	2302      	movs	r3, #2
 80102a0:	e02d      	b.n	80102fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2201      	movs	r2, #1
 80102a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2224      	movs	r2, #36	; 0x24
 80102ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	681a      	ldr	r2, [r3, #0]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	f022 0201 	bic.w	r2, r2, #1
 80102c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	689b      	ldr	r3, [r3, #8]
 80102d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	683a      	ldr	r2, [r7, #0]
 80102da:	430a      	orrs	r2, r1
 80102dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f000 f812 	bl	8010308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	68fa      	ldr	r2, [r7, #12]
 80102ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2220      	movs	r2, #32
 80102f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2200      	movs	r2, #0
 80102f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80102fc:	2300      	movs	r3, #0
}
 80102fe:	4618      	mov	r0, r3
 8010300:	3710      	adds	r7, #16
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
	...

08010308 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010308:	b480      	push	{r7}
 801030a:	b085      	sub	sp, #20
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010314:	2b00      	cmp	r3, #0
 8010316:	d108      	bne.n	801032a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2201      	movs	r2, #1
 801031c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2201      	movs	r2, #1
 8010324:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010328:	e031      	b.n	801038e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801032a:	2310      	movs	r3, #16
 801032c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801032e:	2310      	movs	r3, #16
 8010330:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	689b      	ldr	r3, [r3, #8]
 8010338:	0e5b      	lsrs	r3, r3, #25
 801033a:	b2db      	uxtb	r3, r3
 801033c:	f003 0307 	and.w	r3, r3, #7
 8010340:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	689b      	ldr	r3, [r3, #8]
 8010348:	0f5b      	lsrs	r3, r3, #29
 801034a:	b2db      	uxtb	r3, r3
 801034c:	f003 0307 	and.w	r3, r3, #7
 8010350:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010352:	7bbb      	ldrb	r3, [r7, #14]
 8010354:	7b3a      	ldrb	r2, [r7, #12]
 8010356:	4911      	ldr	r1, [pc, #68]	; (801039c <UARTEx_SetNbDataToProcess+0x94>)
 8010358:	5c8a      	ldrb	r2, [r1, r2]
 801035a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801035e:	7b3a      	ldrb	r2, [r7, #12]
 8010360:	490f      	ldr	r1, [pc, #60]	; (80103a0 <UARTEx_SetNbDataToProcess+0x98>)
 8010362:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010364:	fb93 f3f2 	sdiv	r3, r3, r2
 8010368:	b29a      	uxth	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010370:	7bfb      	ldrb	r3, [r7, #15]
 8010372:	7b7a      	ldrb	r2, [r7, #13]
 8010374:	4909      	ldr	r1, [pc, #36]	; (801039c <UARTEx_SetNbDataToProcess+0x94>)
 8010376:	5c8a      	ldrb	r2, [r1, r2]
 8010378:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801037c:	7b7a      	ldrb	r2, [r7, #13]
 801037e:	4908      	ldr	r1, [pc, #32]	; (80103a0 <UARTEx_SetNbDataToProcess+0x98>)
 8010380:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010382:	fb93 f3f2 	sdiv	r3, r3, r2
 8010386:	b29a      	uxth	r2, r3
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801038e:	bf00      	nop
 8010390:	3714      	adds	r7, #20
 8010392:	46bd      	mov	sp, r7
 8010394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010398:	4770      	bx	lr
 801039a:	bf00      	nop
 801039c:	080137ac 	.word	0x080137ac
 80103a0:	080137b4 	.word	0x080137b4

080103a4 <__errno>:
 80103a4:	4b01      	ldr	r3, [pc, #4]	; (80103ac <__errno+0x8>)
 80103a6:	6818      	ldr	r0, [r3, #0]
 80103a8:	4770      	bx	lr
 80103aa:	bf00      	nop
 80103ac:	24000028 	.word	0x24000028

080103b0 <__libc_init_array>:
 80103b0:	b570      	push	{r4, r5, r6, lr}
 80103b2:	4d0d      	ldr	r5, [pc, #52]	; (80103e8 <__libc_init_array+0x38>)
 80103b4:	4c0d      	ldr	r4, [pc, #52]	; (80103ec <__libc_init_array+0x3c>)
 80103b6:	1b64      	subs	r4, r4, r5
 80103b8:	10a4      	asrs	r4, r4, #2
 80103ba:	2600      	movs	r6, #0
 80103bc:	42a6      	cmp	r6, r4
 80103be:	d109      	bne.n	80103d4 <__libc_init_array+0x24>
 80103c0:	4d0b      	ldr	r5, [pc, #44]	; (80103f0 <__libc_init_array+0x40>)
 80103c2:	4c0c      	ldr	r4, [pc, #48]	; (80103f4 <__libc_init_array+0x44>)
 80103c4:	f003 f992 	bl	80136ec <_init>
 80103c8:	1b64      	subs	r4, r4, r5
 80103ca:	10a4      	asrs	r4, r4, #2
 80103cc:	2600      	movs	r6, #0
 80103ce:	42a6      	cmp	r6, r4
 80103d0:	d105      	bne.n	80103de <__libc_init_array+0x2e>
 80103d2:	bd70      	pop	{r4, r5, r6, pc}
 80103d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80103d8:	4798      	blx	r3
 80103da:	3601      	adds	r6, #1
 80103dc:	e7ee      	b.n	80103bc <__libc_init_array+0xc>
 80103de:	f855 3b04 	ldr.w	r3, [r5], #4
 80103e2:	4798      	blx	r3
 80103e4:	3601      	adds	r6, #1
 80103e6:	e7f2      	b.n	80103ce <__libc_init_array+0x1e>
 80103e8:	08013c50 	.word	0x08013c50
 80103ec:	08013c50 	.word	0x08013c50
 80103f0:	08013c50 	.word	0x08013c50
 80103f4:	08013c54 	.word	0x08013c54

080103f8 <memset>:
 80103f8:	4402      	add	r2, r0
 80103fa:	4603      	mov	r3, r0
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d100      	bne.n	8010402 <memset+0xa>
 8010400:	4770      	bx	lr
 8010402:	f803 1b01 	strb.w	r1, [r3], #1
 8010406:	e7f9      	b.n	80103fc <memset+0x4>

08010408 <__cvt>:
 8010408:	b5f0      	push	{r4, r5, r6, r7, lr}
 801040a:	ed2d 8b02 	vpush	{d8}
 801040e:	eeb0 8b40 	vmov.f64	d8, d0
 8010412:	b085      	sub	sp, #20
 8010414:	4617      	mov	r7, r2
 8010416:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010418:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801041a:	ee18 2a90 	vmov	r2, s17
 801041e:	f025 0520 	bic.w	r5, r5, #32
 8010422:	2a00      	cmp	r2, #0
 8010424:	bfb6      	itet	lt
 8010426:	222d      	movlt	r2, #45	; 0x2d
 8010428:	2200      	movge	r2, #0
 801042a:	eeb1 8b40 	vneglt.f64	d8, d0
 801042e:	2d46      	cmp	r5, #70	; 0x46
 8010430:	460c      	mov	r4, r1
 8010432:	701a      	strb	r2, [r3, #0]
 8010434:	d004      	beq.n	8010440 <__cvt+0x38>
 8010436:	2d45      	cmp	r5, #69	; 0x45
 8010438:	d100      	bne.n	801043c <__cvt+0x34>
 801043a:	3401      	adds	r4, #1
 801043c:	2102      	movs	r1, #2
 801043e:	e000      	b.n	8010442 <__cvt+0x3a>
 8010440:	2103      	movs	r1, #3
 8010442:	ab03      	add	r3, sp, #12
 8010444:	9301      	str	r3, [sp, #4]
 8010446:	ab02      	add	r3, sp, #8
 8010448:	9300      	str	r3, [sp, #0]
 801044a:	4622      	mov	r2, r4
 801044c:	4633      	mov	r3, r6
 801044e:	eeb0 0b48 	vmov.f64	d0, d8
 8010452:	f000 fdf5 	bl	8011040 <_dtoa_r>
 8010456:	2d47      	cmp	r5, #71	; 0x47
 8010458:	d109      	bne.n	801046e <__cvt+0x66>
 801045a:	07fb      	lsls	r3, r7, #31
 801045c:	d407      	bmi.n	801046e <__cvt+0x66>
 801045e:	9b03      	ldr	r3, [sp, #12]
 8010460:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010462:	1a1b      	subs	r3, r3, r0
 8010464:	6013      	str	r3, [r2, #0]
 8010466:	b005      	add	sp, #20
 8010468:	ecbd 8b02 	vpop	{d8}
 801046c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801046e:	2d46      	cmp	r5, #70	; 0x46
 8010470:	eb00 0204 	add.w	r2, r0, r4
 8010474:	d10c      	bne.n	8010490 <__cvt+0x88>
 8010476:	7803      	ldrb	r3, [r0, #0]
 8010478:	2b30      	cmp	r3, #48	; 0x30
 801047a:	d107      	bne.n	801048c <__cvt+0x84>
 801047c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010484:	bf1c      	itt	ne
 8010486:	f1c4 0401 	rsbne	r4, r4, #1
 801048a:	6034      	strne	r4, [r6, #0]
 801048c:	6833      	ldr	r3, [r6, #0]
 801048e:	441a      	add	r2, r3
 8010490:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010498:	bf08      	it	eq
 801049a:	9203      	streq	r2, [sp, #12]
 801049c:	2130      	movs	r1, #48	; 0x30
 801049e:	9b03      	ldr	r3, [sp, #12]
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d2dc      	bcs.n	801045e <__cvt+0x56>
 80104a4:	1c5c      	adds	r4, r3, #1
 80104a6:	9403      	str	r4, [sp, #12]
 80104a8:	7019      	strb	r1, [r3, #0]
 80104aa:	e7f8      	b.n	801049e <__cvt+0x96>

080104ac <__exponent>:
 80104ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104ae:	4603      	mov	r3, r0
 80104b0:	2900      	cmp	r1, #0
 80104b2:	bfb8      	it	lt
 80104b4:	4249      	neglt	r1, r1
 80104b6:	f803 2b02 	strb.w	r2, [r3], #2
 80104ba:	bfb4      	ite	lt
 80104bc:	222d      	movlt	r2, #45	; 0x2d
 80104be:	222b      	movge	r2, #43	; 0x2b
 80104c0:	2909      	cmp	r1, #9
 80104c2:	7042      	strb	r2, [r0, #1]
 80104c4:	dd2a      	ble.n	801051c <__exponent+0x70>
 80104c6:	f10d 0407 	add.w	r4, sp, #7
 80104ca:	46a4      	mov	ip, r4
 80104cc:	270a      	movs	r7, #10
 80104ce:	46a6      	mov	lr, r4
 80104d0:	460a      	mov	r2, r1
 80104d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80104d6:	fb07 1516 	mls	r5, r7, r6, r1
 80104da:	3530      	adds	r5, #48	; 0x30
 80104dc:	2a63      	cmp	r2, #99	; 0x63
 80104de:	f104 34ff 	add.w	r4, r4, #4294967295
 80104e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80104e6:	4631      	mov	r1, r6
 80104e8:	dcf1      	bgt.n	80104ce <__exponent+0x22>
 80104ea:	3130      	adds	r1, #48	; 0x30
 80104ec:	f1ae 0502 	sub.w	r5, lr, #2
 80104f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80104f4:	1c44      	adds	r4, r0, #1
 80104f6:	4629      	mov	r1, r5
 80104f8:	4561      	cmp	r1, ip
 80104fa:	d30a      	bcc.n	8010512 <__exponent+0x66>
 80104fc:	f10d 0209 	add.w	r2, sp, #9
 8010500:	eba2 020e 	sub.w	r2, r2, lr
 8010504:	4565      	cmp	r5, ip
 8010506:	bf88      	it	hi
 8010508:	2200      	movhi	r2, #0
 801050a:	4413      	add	r3, r2
 801050c:	1a18      	subs	r0, r3, r0
 801050e:	b003      	add	sp, #12
 8010510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010512:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010516:	f804 2f01 	strb.w	r2, [r4, #1]!
 801051a:	e7ed      	b.n	80104f8 <__exponent+0x4c>
 801051c:	2330      	movs	r3, #48	; 0x30
 801051e:	3130      	adds	r1, #48	; 0x30
 8010520:	7083      	strb	r3, [r0, #2]
 8010522:	70c1      	strb	r1, [r0, #3]
 8010524:	1d03      	adds	r3, r0, #4
 8010526:	e7f1      	b.n	801050c <__exponent+0x60>

08010528 <_printf_float>:
 8010528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801052c:	b08b      	sub	sp, #44	; 0x2c
 801052e:	460c      	mov	r4, r1
 8010530:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010534:	4616      	mov	r6, r2
 8010536:	461f      	mov	r7, r3
 8010538:	4605      	mov	r5, r0
 801053a:	f001 fcbb 	bl	8011eb4 <_localeconv_r>
 801053e:	f8d0 b000 	ldr.w	fp, [r0]
 8010542:	4658      	mov	r0, fp
 8010544:	f7ef fecc 	bl	80002e0 <strlen>
 8010548:	2300      	movs	r3, #0
 801054a:	9308      	str	r3, [sp, #32]
 801054c:	f8d8 3000 	ldr.w	r3, [r8]
 8010550:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010554:	6822      	ldr	r2, [r4, #0]
 8010556:	3307      	adds	r3, #7
 8010558:	f023 0307 	bic.w	r3, r3, #7
 801055c:	f103 0108 	add.w	r1, r3, #8
 8010560:	f8c8 1000 	str.w	r1, [r8]
 8010564:	4682      	mov	sl, r0
 8010566:	e9d3 0100 	ldrd	r0, r1, [r3]
 801056a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801056e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80107d0 <_printf_float+0x2a8>
 8010572:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010576:	eeb0 6bc0 	vabs.f64	d6, d0
 801057a:	eeb4 6b47 	vcmp.f64	d6, d7
 801057e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010582:	dd24      	ble.n	80105ce <_printf_float+0xa6>
 8010584:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801058c:	d502      	bpl.n	8010594 <_printf_float+0x6c>
 801058e:	232d      	movs	r3, #45	; 0x2d
 8010590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010594:	4b90      	ldr	r3, [pc, #576]	; (80107d8 <_printf_float+0x2b0>)
 8010596:	4891      	ldr	r0, [pc, #580]	; (80107dc <_printf_float+0x2b4>)
 8010598:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801059c:	bf94      	ite	ls
 801059e:	4698      	movls	r8, r3
 80105a0:	4680      	movhi	r8, r0
 80105a2:	2303      	movs	r3, #3
 80105a4:	6123      	str	r3, [r4, #16]
 80105a6:	f022 0204 	bic.w	r2, r2, #4
 80105aa:	2300      	movs	r3, #0
 80105ac:	6022      	str	r2, [r4, #0]
 80105ae:	9304      	str	r3, [sp, #16]
 80105b0:	9700      	str	r7, [sp, #0]
 80105b2:	4633      	mov	r3, r6
 80105b4:	aa09      	add	r2, sp, #36	; 0x24
 80105b6:	4621      	mov	r1, r4
 80105b8:	4628      	mov	r0, r5
 80105ba:	f000 f9d3 	bl	8010964 <_printf_common>
 80105be:	3001      	adds	r0, #1
 80105c0:	f040 808a 	bne.w	80106d8 <_printf_float+0x1b0>
 80105c4:	f04f 30ff 	mov.w	r0, #4294967295
 80105c8:	b00b      	add	sp, #44	; 0x2c
 80105ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ce:	eeb4 0b40 	vcmp.f64	d0, d0
 80105d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105d6:	d709      	bvc.n	80105ec <_printf_float+0xc4>
 80105d8:	ee10 3a90 	vmov	r3, s1
 80105dc:	2b00      	cmp	r3, #0
 80105de:	bfbc      	itt	lt
 80105e0:	232d      	movlt	r3, #45	; 0x2d
 80105e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80105e6:	487e      	ldr	r0, [pc, #504]	; (80107e0 <_printf_float+0x2b8>)
 80105e8:	4b7e      	ldr	r3, [pc, #504]	; (80107e4 <_printf_float+0x2bc>)
 80105ea:	e7d5      	b.n	8010598 <_printf_float+0x70>
 80105ec:	6863      	ldr	r3, [r4, #4]
 80105ee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80105f2:	9104      	str	r1, [sp, #16]
 80105f4:	1c59      	adds	r1, r3, #1
 80105f6:	d13c      	bne.n	8010672 <_printf_float+0x14a>
 80105f8:	2306      	movs	r3, #6
 80105fa:	6063      	str	r3, [r4, #4]
 80105fc:	2300      	movs	r3, #0
 80105fe:	9303      	str	r3, [sp, #12]
 8010600:	ab08      	add	r3, sp, #32
 8010602:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010606:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801060a:	ab07      	add	r3, sp, #28
 801060c:	6861      	ldr	r1, [r4, #4]
 801060e:	9300      	str	r3, [sp, #0]
 8010610:	6022      	str	r2, [r4, #0]
 8010612:	f10d 031b 	add.w	r3, sp, #27
 8010616:	4628      	mov	r0, r5
 8010618:	f7ff fef6 	bl	8010408 <__cvt>
 801061c:	9b04      	ldr	r3, [sp, #16]
 801061e:	9907      	ldr	r1, [sp, #28]
 8010620:	2b47      	cmp	r3, #71	; 0x47
 8010622:	4680      	mov	r8, r0
 8010624:	d108      	bne.n	8010638 <_printf_float+0x110>
 8010626:	1cc8      	adds	r0, r1, #3
 8010628:	db02      	blt.n	8010630 <_printf_float+0x108>
 801062a:	6863      	ldr	r3, [r4, #4]
 801062c:	4299      	cmp	r1, r3
 801062e:	dd41      	ble.n	80106b4 <_printf_float+0x18c>
 8010630:	f1a9 0902 	sub.w	r9, r9, #2
 8010634:	fa5f f989 	uxtb.w	r9, r9
 8010638:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801063c:	d820      	bhi.n	8010680 <_printf_float+0x158>
 801063e:	3901      	subs	r1, #1
 8010640:	464a      	mov	r2, r9
 8010642:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010646:	9107      	str	r1, [sp, #28]
 8010648:	f7ff ff30 	bl	80104ac <__exponent>
 801064c:	9a08      	ldr	r2, [sp, #32]
 801064e:	9004      	str	r0, [sp, #16]
 8010650:	1813      	adds	r3, r2, r0
 8010652:	2a01      	cmp	r2, #1
 8010654:	6123      	str	r3, [r4, #16]
 8010656:	dc02      	bgt.n	801065e <_printf_float+0x136>
 8010658:	6822      	ldr	r2, [r4, #0]
 801065a:	07d2      	lsls	r2, r2, #31
 801065c:	d501      	bpl.n	8010662 <_printf_float+0x13a>
 801065e:	3301      	adds	r3, #1
 8010660:	6123      	str	r3, [r4, #16]
 8010662:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d0a2      	beq.n	80105b0 <_printf_float+0x88>
 801066a:	232d      	movs	r3, #45	; 0x2d
 801066c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010670:	e79e      	b.n	80105b0 <_printf_float+0x88>
 8010672:	9904      	ldr	r1, [sp, #16]
 8010674:	2947      	cmp	r1, #71	; 0x47
 8010676:	d1c1      	bne.n	80105fc <_printf_float+0xd4>
 8010678:	2b00      	cmp	r3, #0
 801067a:	d1bf      	bne.n	80105fc <_printf_float+0xd4>
 801067c:	2301      	movs	r3, #1
 801067e:	e7bc      	b.n	80105fa <_printf_float+0xd2>
 8010680:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010684:	d118      	bne.n	80106b8 <_printf_float+0x190>
 8010686:	2900      	cmp	r1, #0
 8010688:	6863      	ldr	r3, [r4, #4]
 801068a:	dd0b      	ble.n	80106a4 <_printf_float+0x17c>
 801068c:	6121      	str	r1, [r4, #16]
 801068e:	b913      	cbnz	r3, 8010696 <_printf_float+0x16e>
 8010690:	6822      	ldr	r2, [r4, #0]
 8010692:	07d0      	lsls	r0, r2, #31
 8010694:	d502      	bpl.n	801069c <_printf_float+0x174>
 8010696:	3301      	adds	r3, #1
 8010698:	440b      	add	r3, r1
 801069a:	6123      	str	r3, [r4, #16]
 801069c:	2300      	movs	r3, #0
 801069e:	65a1      	str	r1, [r4, #88]	; 0x58
 80106a0:	9304      	str	r3, [sp, #16]
 80106a2:	e7de      	b.n	8010662 <_printf_float+0x13a>
 80106a4:	b913      	cbnz	r3, 80106ac <_printf_float+0x184>
 80106a6:	6822      	ldr	r2, [r4, #0]
 80106a8:	07d2      	lsls	r2, r2, #31
 80106aa:	d501      	bpl.n	80106b0 <_printf_float+0x188>
 80106ac:	3302      	adds	r3, #2
 80106ae:	e7f4      	b.n	801069a <_printf_float+0x172>
 80106b0:	2301      	movs	r3, #1
 80106b2:	e7f2      	b.n	801069a <_printf_float+0x172>
 80106b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80106b8:	9b08      	ldr	r3, [sp, #32]
 80106ba:	4299      	cmp	r1, r3
 80106bc:	db05      	blt.n	80106ca <_printf_float+0x1a2>
 80106be:	6823      	ldr	r3, [r4, #0]
 80106c0:	6121      	str	r1, [r4, #16]
 80106c2:	07d8      	lsls	r0, r3, #31
 80106c4:	d5ea      	bpl.n	801069c <_printf_float+0x174>
 80106c6:	1c4b      	adds	r3, r1, #1
 80106c8:	e7e7      	b.n	801069a <_printf_float+0x172>
 80106ca:	2900      	cmp	r1, #0
 80106cc:	bfd4      	ite	le
 80106ce:	f1c1 0202 	rsble	r2, r1, #2
 80106d2:	2201      	movgt	r2, #1
 80106d4:	4413      	add	r3, r2
 80106d6:	e7e0      	b.n	801069a <_printf_float+0x172>
 80106d8:	6823      	ldr	r3, [r4, #0]
 80106da:	055a      	lsls	r2, r3, #21
 80106dc:	d407      	bmi.n	80106ee <_printf_float+0x1c6>
 80106de:	6923      	ldr	r3, [r4, #16]
 80106e0:	4642      	mov	r2, r8
 80106e2:	4631      	mov	r1, r6
 80106e4:	4628      	mov	r0, r5
 80106e6:	47b8      	blx	r7
 80106e8:	3001      	adds	r0, #1
 80106ea:	d12a      	bne.n	8010742 <_printf_float+0x21a>
 80106ec:	e76a      	b.n	80105c4 <_printf_float+0x9c>
 80106ee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80106f2:	f240 80e2 	bls.w	80108ba <_printf_float+0x392>
 80106f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80106fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80106fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010702:	d133      	bne.n	801076c <_printf_float+0x244>
 8010704:	4a38      	ldr	r2, [pc, #224]	; (80107e8 <_printf_float+0x2c0>)
 8010706:	2301      	movs	r3, #1
 8010708:	4631      	mov	r1, r6
 801070a:	4628      	mov	r0, r5
 801070c:	47b8      	blx	r7
 801070e:	3001      	adds	r0, #1
 8010710:	f43f af58 	beq.w	80105c4 <_printf_float+0x9c>
 8010714:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010718:	429a      	cmp	r2, r3
 801071a:	db02      	blt.n	8010722 <_printf_float+0x1fa>
 801071c:	6823      	ldr	r3, [r4, #0]
 801071e:	07d8      	lsls	r0, r3, #31
 8010720:	d50f      	bpl.n	8010742 <_printf_float+0x21a>
 8010722:	4653      	mov	r3, sl
 8010724:	465a      	mov	r2, fp
 8010726:	4631      	mov	r1, r6
 8010728:	4628      	mov	r0, r5
 801072a:	47b8      	blx	r7
 801072c:	3001      	adds	r0, #1
 801072e:	f43f af49 	beq.w	80105c4 <_printf_float+0x9c>
 8010732:	f04f 0800 	mov.w	r8, #0
 8010736:	f104 091a 	add.w	r9, r4, #26
 801073a:	9b08      	ldr	r3, [sp, #32]
 801073c:	3b01      	subs	r3, #1
 801073e:	4543      	cmp	r3, r8
 8010740:	dc09      	bgt.n	8010756 <_printf_float+0x22e>
 8010742:	6823      	ldr	r3, [r4, #0]
 8010744:	079b      	lsls	r3, r3, #30
 8010746:	f100 8108 	bmi.w	801095a <_printf_float+0x432>
 801074a:	68e0      	ldr	r0, [r4, #12]
 801074c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801074e:	4298      	cmp	r0, r3
 8010750:	bfb8      	it	lt
 8010752:	4618      	movlt	r0, r3
 8010754:	e738      	b.n	80105c8 <_printf_float+0xa0>
 8010756:	2301      	movs	r3, #1
 8010758:	464a      	mov	r2, r9
 801075a:	4631      	mov	r1, r6
 801075c:	4628      	mov	r0, r5
 801075e:	47b8      	blx	r7
 8010760:	3001      	adds	r0, #1
 8010762:	f43f af2f 	beq.w	80105c4 <_printf_float+0x9c>
 8010766:	f108 0801 	add.w	r8, r8, #1
 801076a:	e7e6      	b.n	801073a <_printf_float+0x212>
 801076c:	9b07      	ldr	r3, [sp, #28]
 801076e:	2b00      	cmp	r3, #0
 8010770:	dc3c      	bgt.n	80107ec <_printf_float+0x2c4>
 8010772:	4a1d      	ldr	r2, [pc, #116]	; (80107e8 <_printf_float+0x2c0>)
 8010774:	2301      	movs	r3, #1
 8010776:	4631      	mov	r1, r6
 8010778:	4628      	mov	r0, r5
 801077a:	47b8      	blx	r7
 801077c:	3001      	adds	r0, #1
 801077e:	f43f af21 	beq.w	80105c4 <_printf_float+0x9c>
 8010782:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010786:	4313      	orrs	r3, r2
 8010788:	d102      	bne.n	8010790 <_printf_float+0x268>
 801078a:	6823      	ldr	r3, [r4, #0]
 801078c:	07d9      	lsls	r1, r3, #31
 801078e:	d5d8      	bpl.n	8010742 <_printf_float+0x21a>
 8010790:	4653      	mov	r3, sl
 8010792:	465a      	mov	r2, fp
 8010794:	4631      	mov	r1, r6
 8010796:	4628      	mov	r0, r5
 8010798:	47b8      	blx	r7
 801079a:	3001      	adds	r0, #1
 801079c:	f43f af12 	beq.w	80105c4 <_printf_float+0x9c>
 80107a0:	f04f 0900 	mov.w	r9, #0
 80107a4:	f104 0a1a 	add.w	sl, r4, #26
 80107a8:	9b07      	ldr	r3, [sp, #28]
 80107aa:	425b      	negs	r3, r3
 80107ac:	454b      	cmp	r3, r9
 80107ae:	dc01      	bgt.n	80107b4 <_printf_float+0x28c>
 80107b0:	9b08      	ldr	r3, [sp, #32]
 80107b2:	e795      	b.n	80106e0 <_printf_float+0x1b8>
 80107b4:	2301      	movs	r3, #1
 80107b6:	4652      	mov	r2, sl
 80107b8:	4631      	mov	r1, r6
 80107ba:	4628      	mov	r0, r5
 80107bc:	47b8      	blx	r7
 80107be:	3001      	adds	r0, #1
 80107c0:	f43f af00 	beq.w	80105c4 <_printf_float+0x9c>
 80107c4:	f109 0901 	add.w	r9, r9, #1
 80107c8:	e7ee      	b.n	80107a8 <_printf_float+0x280>
 80107ca:	bf00      	nop
 80107cc:	f3af 8000 	nop.w
 80107d0:	ffffffff 	.word	0xffffffff
 80107d4:	7fefffff 	.word	0x7fefffff
 80107d8:	080137c0 	.word	0x080137c0
 80107dc:	080137c4 	.word	0x080137c4
 80107e0:	080137cc 	.word	0x080137cc
 80107e4:	080137c8 	.word	0x080137c8
 80107e8:	080137d0 	.word	0x080137d0
 80107ec:	9a08      	ldr	r2, [sp, #32]
 80107ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80107f0:	429a      	cmp	r2, r3
 80107f2:	bfa8      	it	ge
 80107f4:	461a      	movge	r2, r3
 80107f6:	2a00      	cmp	r2, #0
 80107f8:	4691      	mov	r9, r2
 80107fa:	dc38      	bgt.n	801086e <_printf_float+0x346>
 80107fc:	2300      	movs	r3, #0
 80107fe:	9305      	str	r3, [sp, #20]
 8010800:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010804:	f104 021a 	add.w	r2, r4, #26
 8010808:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801080a:	9905      	ldr	r1, [sp, #20]
 801080c:	9304      	str	r3, [sp, #16]
 801080e:	eba3 0309 	sub.w	r3, r3, r9
 8010812:	428b      	cmp	r3, r1
 8010814:	dc33      	bgt.n	801087e <_printf_float+0x356>
 8010816:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801081a:	429a      	cmp	r2, r3
 801081c:	db3c      	blt.n	8010898 <_printf_float+0x370>
 801081e:	6823      	ldr	r3, [r4, #0]
 8010820:	07da      	lsls	r2, r3, #31
 8010822:	d439      	bmi.n	8010898 <_printf_float+0x370>
 8010824:	9a08      	ldr	r2, [sp, #32]
 8010826:	9b04      	ldr	r3, [sp, #16]
 8010828:	9907      	ldr	r1, [sp, #28]
 801082a:	1ad3      	subs	r3, r2, r3
 801082c:	eba2 0901 	sub.w	r9, r2, r1
 8010830:	4599      	cmp	r9, r3
 8010832:	bfa8      	it	ge
 8010834:	4699      	movge	r9, r3
 8010836:	f1b9 0f00 	cmp.w	r9, #0
 801083a:	dc35      	bgt.n	80108a8 <_printf_float+0x380>
 801083c:	f04f 0800 	mov.w	r8, #0
 8010840:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010844:	f104 0a1a 	add.w	sl, r4, #26
 8010848:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801084c:	1a9b      	subs	r3, r3, r2
 801084e:	eba3 0309 	sub.w	r3, r3, r9
 8010852:	4543      	cmp	r3, r8
 8010854:	f77f af75 	ble.w	8010742 <_printf_float+0x21a>
 8010858:	2301      	movs	r3, #1
 801085a:	4652      	mov	r2, sl
 801085c:	4631      	mov	r1, r6
 801085e:	4628      	mov	r0, r5
 8010860:	47b8      	blx	r7
 8010862:	3001      	adds	r0, #1
 8010864:	f43f aeae 	beq.w	80105c4 <_printf_float+0x9c>
 8010868:	f108 0801 	add.w	r8, r8, #1
 801086c:	e7ec      	b.n	8010848 <_printf_float+0x320>
 801086e:	4613      	mov	r3, r2
 8010870:	4631      	mov	r1, r6
 8010872:	4642      	mov	r2, r8
 8010874:	4628      	mov	r0, r5
 8010876:	47b8      	blx	r7
 8010878:	3001      	adds	r0, #1
 801087a:	d1bf      	bne.n	80107fc <_printf_float+0x2d4>
 801087c:	e6a2      	b.n	80105c4 <_printf_float+0x9c>
 801087e:	2301      	movs	r3, #1
 8010880:	4631      	mov	r1, r6
 8010882:	4628      	mov	r0, r5
 8010884:	9204      	str	r2, [sp, #16]
 8010886:	47b8      	blx	r7
 8010888:	3001      	adds	r0, #1
 801088a:	f43f ae9b 	beq.w	80105c4 <_printf_float+0x9c>
 801088e:	9b05      	ldr	r3, [sp, #20]
 8010890:	9a04      	ldr	r2, [sp, #16]
 8010892:	3301      	adds	r3, #1
 8010894:	9305      	str	r3, [sp, #20]
 8010896:	e7b7      	b.n	8010808 <_printf_float+0x2e0>
 8010898:	4653      	mov	r3, sl
 801089a:	465a      	mov	r2, fp
 801089c:	4631      	mov	r1, r6
 801089e:	4628      	mov	r0, r5
 80108a0:	47b8      	blx	r7
 80108a2:	3001      	adds	r0, #1
 80108a4:	d1be      	bne.n	8010824 <_printf_float+0x2fc>
 80108a6:	e68d      	b.n	80105c4 <_printf_float+0x9c>
 80108a8:	9a04      	ldr	r2, [sp, #16]
 80108aa:	464b      	mov	r3, r9
 80108ac:	4442      	add	r2, r8
 80108ae:	4631      	mov	r1, r6
 80108b0:	4628      	mov	r0, r5
 80108b2:	47b8      	blx	r7
 80108b4:	3001      	adds	r0, #1
 80108b6:	d1c1      	bne.n	801083c <_printf_float+0x314>
 80108b8:	e684      	b.n	80105c4 <_printf_float+0x9c>
 80108ba:	9a08      	ldr	r2, [sp, #32]
 80108bc:	2a01      	cmp	r2, #1
 80108be:	dc01      	bgt.n	80108c4 <_printf_float+0x39c>
 80108c0:	07db      	lsls	r3, r3, #31
 80108c2:	d537      	bpl.n	8010934 <_printf_float+0x40c>
 80108c4:	2301      	movs	r3, #1
 80108c6:	4642      	mov	r2, r8
 80108c8:	4631      	mov	r1, r6
 80108ca:	4628      	mov	r0, r5
 80108cc:	47b8      	blx	r7
 80108ce:	3001      	adds	r0, #1
 80108d0:	f43f ae78 	beq.w	80105c4 <_printf_float+0x9c>
 80108d4:	4653      	mov	r3, sl
 80108d6:	465a      	mov	r2, fp
 80108d8:	4631      	mov	r1, r6
 80108da:	4628      	mov	r0, r5
 80108dc:	47b8      	blx	r7
 80108de:	3001      	adds	r0, #1
 80108e0:	f43f ae70 	beq.w	80105c4 <_printf_float+0x9c>
 80108e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80108e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80108ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108f0:	d01b      	beq.n	801092a <_printf_float+0x402>
 80108f2:	9b08      	ldr	r3, [sp, #32]
 80108f4:	f108 0201 	add.w	r2, r8, #1
 80108f8:	3b01      	subs	r3, #1
 80108fa:	4631      	mov	r1, r6
 80108fc:	4628      	mov	r0, r5
 80108fe:	47b8      	blx	r7
 8010900:	3001      	adds	r0, #1
 8010902:	d10e      	bne.n	8010922 <_printf_float+0x3fa>
 8010904:	e65e      	b.n	80105c4 <_printf_float+0x9c>
 8010906:	2301      	movs	r3, #1
 8010908:	464a      	mov	r2, r9
 801090a:	4631      	mov	r1, r6
 801090c:	4628      	mov	r0, r5
 801090e:	47b8      	blx	r7
 8010910:	3001      	adds	r0, #1
 8010912:	f43f ae57 	beq.w	80105c4 <_printf_float+0x9c>
 8010916:	f108 0801 	add.w	r8, r8, #1
 801091a:	9b08      	ldr	r3, [sp, #32]
 801091c:	3b01      	subs	r3, #1
 801091e:	4543      	cmp	r3, r8
 8010920:	dcf1      	bgt.n	8010906 <_printf_float+0x3de>
 8010922:	9b04      	ldr	r3, [sp, #16]
 8010924:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010928:	e6db      	b.n	80106e2 <_printf_float+0x1ba>
 801092a:	f04f 0800 	mov.w	r8, #0
 801092e:	f104 091a 	add.w	r9, r4, #26
 8010932:	e7f2      	b.n	801091a <_printf_float+0x3f2>
 8010934:	2301      	movs	r3, #1
 8010936:	4642      	mov	r2, r8
 8010938:	e7df      	b.n	80108fa <_printf_float+0x3d2>
 801093a:	2301      	movs	r3, #1
 801093c:	464a      	mov	r2, r9
 801093e:	4631      	mov	r1, r6
 8010940:	4628      	mov	r0, r5
 8010942:	47b8      	blx	r7
 8010944:	3001      	adds	r0, #1
 8010946:	f43f ae3d 	beq.w	80105c4 <_printf_float+0x9c>
 801094a:	f108 0801 	add.w	r8, r8, #1
 801094e:	68e3      	ldr	r3, [r4, #12]
 8010950:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010952:	1a5b      	subs	r3, r3, r1
 8010954:	4543      	cmp	r3, r8
 8010956:	dcf0      	bgt.n	801093a <_printf_float+0x412>
 8010958:	e6f7      	b.n	801074a <_printf_float+0x222>
 801095a:	f04f 0800 	mov.w	r8, #0
 801095e:	f104 0919 	add.w	r9, r4, #25
 8010962:	e7f4      	b.n	801094e <_printf_float+0x426>

08010964 <_printf_common>:
 8010964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010968:	4616      	mov	r6, r2
 801096a:	4699      	mov	r9, r3
 801096c:	688a      	ldr	r2, [r1, #8]
 801096e:	690b      	ldr	r3, [r1, #16]
 8010970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010974:	4293      	cmp	r3, r2
 8010976:	bfb8      	it	lt
 8010978:	4613      	movlt	r3, r2
 801097a:	6033      	str	r3, [r6, #0]
 801097c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010980:	4607      	mov	r7, r0
 8010982:	460c      	mov	r4, r1
 8010984:	b10a      	cbz	r2, 801098a <_printf_common+0x26>
 8010986:	3301      	adds	r3, #1
 8010988:	6033      	str	r3, [r6, #0]
 801098a:	6823      	ldr	r3, [r4, #0]
 801098c:	0699      	lsls	r1, r3, #26
 801098e:	bf42      	ittt	mi
 8010990:	6833      	ldrmi	r3, [r6, #0]
 8010992:	3302      	addmi	r3, #2
 8010994:	6033      	strmi	r3, [r6, #0]
 8010996:	6825      	ldr	r5, [r4, #0]
 8010998:	f015 0506 	ands.w	r5, r5, #6
 801099c:	d106      	bne.n	80109ac <_printf_common+0x48>
 801099e:	f104 0a19 	add.w	sl, r4, #25
 80109a2:	68e3      	ldr	r3, [r4, #12]
 80109a4:	6832      	ldr	r2, [r6, #0]
 80109a6:	1a9b      	subs	r3, r3, r2
 80109a8:	42ab      	cmp	r3, r5
 80109aa:	dc26      	bgt.n	80109fa <_printf_common+0x96>
 80109ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80109b0:	1e13      	subs	r3, r2, #0
 80109b2:	6822      	ldr	r2, [r4, #0]
 80109b4:	bf18      	it	ne
 80109b6:	2301      	movne	r3, #1
 80109b8:	0692      	lsls	r2, r2, #26
 80109ba:	d42b      	bmi.n	8010a14 <_printf_common+0xb0>
 80109bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80109c0:	4649      	mov	r1, r9
 80109c2:	4638      	mov	r0, r7
 80109c4:	47c0      	blx	r8
 80109c6:	3001      	adds	r0, #1
 80109c8:	d01e      	beq.n	8010a08 <_printf_common+0xa4>
 80109ca:	6823      	ldr	r3, [r4, #0]
 80109cc:	68e5      	ldr	r5, [r4, #12]
 80109ce:	6832      	ldr	r2, [r6, #0]
 80109d0:	f003 0306 	and.w	r3, r3, #6
 80109d4:	2b04      	cmp	r3, #4
 80109d6:	bf08      	it	eq
 80109d8:	1aad      	subeq	r5, r5, r2
 80109da:	68a3      	ldr	r3, [r4, #8]
 80109dc:	6922      	ldr	r2, [r4, #16]
 80109de:	bf0c      	ite	eq
 80109e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80109e4:	2500      	movne	r5, #0
 80109e6:	4293      	cmp	r3, r2
 80109e8:	bfc4      	itt	gt
 80109ea:	1a9b      	subgt	r3, r3, r2
 80109ec:	18ed      	addgt	r5, r5, r3
 80109ee:	2600      	movs	r6, #0
 80109f0:	341a      	adds	r4, #26
 80109f2:	42b5      	cmp	r5, r6
 80109f4:	d11a      	bne.n	8010a2c <_printf_common+0xc8>
 80109f6:	2000      	movs	r0, #0
 80109f8:	e008      	b.n	8010a0c <_printf_common+0xa8>
 80109fa:	2301      	movs	r3, #1
 80109fc:	4652      	mov	r2, sl
 80109fe:	4649      	mov	r1, r9
 8010a00:	4638      	mov	r0, r7
 8010a02:	47c0      	blx	r8
 8010a04:	3001      	adds	r0, #1
 8010a06:	d103      	bne.n	8010a10 <_printf_common+0xac>
 8010a08:	f04f 30ff 	mov.w	r0, #4294967295
 8010a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a10:	3501      	adds	r5, #1
 8010a12:	e7c6      	b.n	80109a2 <_printf_common+0x3e>
 8010a14:	18e1      	adds	r1, r4, r3
 8010a16:	1c5a      	adds	r2, r3, #1
 8010a18:	2030      	movs	r0, #48	; 0x30
 8010a1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010a1e:	4422      	add	r2, r4
 8010a20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010a24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010a28:	3302      	adds	r3, #2
 8010a2a:	e7c7      	b.n	80109bc <_printf_common+0x58>
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	4622      	mov	r2, r4
 8010a30:	4649      	mov	r1, r9
 8010a32:	4638      	mov	r0, r7
 8010a34:	47c0      	blx	r8
 8010a36:	3001      	adds	r0, #1
 8010a38:	d0e6      	beq.n	8010a08 <_printf_common+0xa4>
 8010a3a:	3601      	adds	r6, #1
 8010a3c:	e7d9      	b.n	80109f2 <_printf_common+0x8e>
	...

08010a40 <_printf_i>:
 8010a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a44:	460c      	mov	r4, r1
 8010a46:	4691      	mov	r9, r2
 8010a48:	7e27      	ldrb	r7, [r4, #24]
 8010a4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a4c:	2f78      	cmp	r7, #120	; 0x78
 8010a4e:	4680      	mov	r8, r0
 8010a50:	469a      	mov	sl, r3
 8010a52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a56:	d807      	bhi.n	8010a68 <_printf_i+0x28>
 8010a58:	2f62      	cmp	r7, #98	; 0x62
 8010a5a:	d80a      	bhi.n	8010a72 <_printf_i+0x32>
 8010a5c:	2f00      	cmp	r7, #0
 8010a5e:	f000 80d8 	beq.w	8010c12 <_printf_i+0x1d2>
 8010a62:	2f58      	cmp	r7, #88	; 0x58
 8010a64:	f000 80a3 	beq.w	8010bae <_printf_i+0x16e>
 8010a68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a70:	e03a      	b.n	8010ae8 <_printf_i+0xa8>
 8010a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a76:	2b15      	cmp	r3, #21
 8010a78:	d8f6      	bhi.n	8010a68 <_printf_i+0x28>
 8010a7a:	a001      	add	r0, pc, #4	; (adr r0, 8010a80 <_printf_i+0x40>)
 8010a7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010a80:	08010ad9 	.word	0x08010ad9
 8010a84:	08010aed 	.word	0x08010aed
 8010a88:	08010a69 	.word	0x08010a69
 8010a8c:	08010a69 	.word	0x08010a69
 8010a90:	08010a69 	.word	0x08010a69
 8010a94:	08010a69 	.word	0x08010a69
 8010a98:	08010aed 	.word	0x08010aed
 8010a9c:	08010a69 	.word	0x08010a69
 8010aa0:	08010a69 	.word	0x08010a69
 8010aa4:	08010a69 	.word	0x08010a69
 8010aa8:	08010a69 	.word	0x08010a69
 8010aac:	08010bf9 	.word	0x08010bf9
 8010ab0:	08010b1d 	.word	0x08010b1d
 8010ab4:	08010bdb 	.word	0x08010bdb
 8010ab8:	08010a69 	.word	0x08010a69
 8010abc:	08010a69 	.word	0x08010a69
 8010ac0:	08010c1b 	.word	0x08010c1b
 8010ac4:	08010a69 	.word	0x08010a69
 8010ac8:	08010b1d 	.word	0x08010b1d
 8010acc:	08010a69 	.word	0x08010a69
 8010ad0:	08010a69 	.word	0x08010a69
 8010ad4:	08010be3 	.word	0x08010be3
 8010ad8:	680b      	ldr	r3, [r1, #0]
 8010ada:	1d1a      	adds	r2, r3, #4
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	600a      	str	r2, [r1, #0]
 8010ae0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010ae8:	2301      	movs	r3, #1
 8010aea:	e0a3      	b.n	8010c34 <_printf_i+0x1f4>
 8010aec:	6825      	ldr	r5, [r4, #0]
 8010aee:	6808      	ldr	r0, [r1, #0]
 8010af0:	062e      	lsls	r6, r5, #24
 8010af2:	f100 0304 	add.w	r3, r0, #4
 8010af6:	d50a      	bpl.n	8010b0e <_printf_i+0xce>
 8010af8:	6805      	ldr	r5, [r0, #0]
 8010afa:	600b      	str	r3, [r1, #0]
 8010afc:	2d00      	cmp	r5, #0
 8010afe:	da03      	bge.n	8010b08 <_printf_i+0xc8>
 8010b00:	232d      	movs	r3, #45	; 0x2d
 8010b02:	426d      	negs	r5, r5
 8010b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b08:	485e      	ldr	r0, [pc, #376]	; (8010c84 <_printf_i+0x244>)
 8010b0a:	230a      	movs	r3, #10
 8010b0c:	e019      	b.n	8010b42 <_printf_i+0x102>
 8010b0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010b12:	6805      	ldr	r5, [r0, #0]
 8010b14:	600b      	str	r3, [r1, #0]
 8010b16:	bf18      	it	ne
 8010b18:	b22d      	sxthne	r5, r5
 8010b1a:	e7ef      	b.n	8010afc <_printf_i+0xbc>
 8010b1c:	680b      	ldr	r3, [r1, #0]
 8010b1e:	6825      	ldr	r5, [r4, #0]
 8010b20:	1d18      	adds	r0, r3, #4
 8010b22:	6008      	str	r0, [r1, #0]
 8010b24:	0628      	lsls	r0, r5, #24
 8010b26:	d501      	bpl.n	8010b2c <_printf_i+0xec>
 8010b28:	681d      	ldr	r5, [r3, #0]
 8010b2a:	e002      	b.n	8010b32 <_printf_i+0xf2>
 8010b2c:	0669      	lsls	r1, r5, #25
 8010b2e:	d5fb      	bpl.n	8010b28 <_printf_i+0xe8>
 8010b30:	881d      	ldrh	r5, [r3, #0]
 8010b32:	4854      	ldr	r0, [pc, #336]	; (8010c84 <_printf_i+0x244>)
 8010b34:	2f6f      	cmp	r7, #111	; 0x6f
 8010b36:	bf0c      	ite	eq
 8010b38:	2308      	moveq	r3, #8
 8010b3a:	230a      	movne	r3, #10
 8010b3c:	2100      	movs	r1, #0
 8010b3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010b42:	6866      	ldr	r6, [r4, #4]
 8010b44:	60a6      	str	r6, [r4, #8]
 8010b46:	2e00      	cmp	r6, #0
 8010b48:	bfa2      	ittt	ge
 8010b4a:	6821      	ldrge	r1, [r4, #0]
 8010b4c:	f021 0104 	bicge.w	r1, r1, #4
 8010b50:	6021      	strge	r1, [r4, #0]
 8010b52:	b90d      	cbnz	r5, 8010b58 <_printf_i+0x118>
 8010b54:	2e00      	cmp	r6, #0
 8010b56:	d04d      	beq.n	8010bf4 <_printf_i+0x1b4>
 8010b58:	4616      	mov	r6, r2
 8010b5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8010b5e:	fb03 5711 	mls	r7, r3, r1, r5
 8010b62:	5dc7      	ldrb	r7, [r0, r7]
 8010b64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010b68:	462f      	mov	r7, r5
 8010b6a:	42bb      	cmp	r3, r7
 8010b6c:	460d      	mov	r5, r1
 8010b6e:	d9f4      	bls.n	8010b5a <_printf_i+0x11a>
 8010b70:	2b08      	cmp	r3, #8
 8010b72:	d10b      	bne.n	8010b8c <_printf_i+0x14c>
 8010b74:	6823      	ldr	r3, [r4, #0]
 8010b76:	07df      	lsls	r7, r3, #31
 8010b78:	d508      	bpl.n	8010b8c <_printf_i+0x14c>
 8010b7a:	6923      	ldr	r3, [r4, #16]
 8010b7c:	6861      	ldr	r1, [r4, #4]
 8010b7e:	4299      	cmp	r1, r3
 8010b80:	bfde      	ittt	le
 8010b82:	2330      	movle	r3, #48	; 0x30
 8010b84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010b88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010b8c:	1b92      	subs	r2, r2, r6
 8010b8e:	6122      	str	r2, [r4, #16]
 8010b90:	f8cd a000 	str.w	sl, [sp]
 8010b94:	464b      	mov	r3, r9
 8010b96:	aa03      	add	r2, sp, #12
 8010b98:	4621      	mov	r1, r4
 8010b9a:	4640      	mov	r0, r8
 8010b9c:	f7ff fee2 	bl	8010964 <_printf_common>
 8010ba0:	3001      	adds	r0, #1
 8010ba2:	d14c      	bne.n	8010c3e <_printf_i+0x1fe>
 8010ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ba8:	b004      	add	sp, #16
 8010baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bae:	4835      	ldr	r0, [pc, #212]	; (8010c84 <_printf_i+0x244>)
 8010bb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010bb4:	6823      	ldr	r3, [r4, #0]
 8010bb6:	680e      	ldr	r6, [r1, #0]
 8010bb8:	061f      	lsls	r7, r3, #24
 8010bba:	f856 5b04 	ldr.w	r5, [r6], #4
 8010bbe:	600e      	str	r6, [r1, #0]
 8010bc0:	d514      	bpl.n	8010bec <_printf_i+0x1ac>
 8010bc2:	07d9      	lsls	r1, r3, #31
 8010bc4:	bf44      	itt	mi
 8010bc6:	f043 0320 	orrmi.w	r3, r3, #32
 8010bca:	6023      	strmi	r3, [r4, #0]
 8010bcc:	b91d      	cbnz	r5, 8010bd6 <_printf_i+0x196>
 8010bce:	6823      	ldr	r3, [r4, #0]
 8010bd0:	f023 0320 	bic.w	r3, r3, #32
 8010bd4:	6023      	str	r3, [r4, #0]
 8010bd6:	2310      	movs	r3, #16
 8010bd8:	e7b0      	b.n	8010b3c <_printf_i+0xfc>
 8010bda:	6823      	ldr	r3, [r4, #0]
 8010bdc:	f043 0320 	orr.w	r3, r3, #32
 8010be0:	6023      	str	r3, [r4, #0]
 8010be2:	2378      	movs	r3, #120	; 0x78
 8010be4:	4828      	ldr	r0, [pc, #160]	; (8010c88 <_printf_i+0x248>)
 8010be6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010bea:	e7e3      	b.n	8010bb4 <_printf_i+0x174>
 8010bec:	065e      	lsls	r6, r3, #25
 8010bee:	bf48      	it	mi
 8010bf0:	b2ad      	uxthmi	r5, r5
 8010bf2:	e7e6      	b.n	8010bc2 <_printf_i+0x182>
 8010bf4:	4616      	mov	r6, r2
 8010bf6:	e7bb      	b.n	8010b70 <_printf_i+0x130>
 8010bf8:	680b      	ldr	r3, [r1, #0]
 8010bfa:	6826      	ldr	r6, [r4, #0]
 8010bfc:	6960      	ldr	r0, [r4, #20]
 8010bfe:	1d1d      	adds	r5, r3, #4
 8010c00:	600d      	str	r5, [r1, #0]
 8010c02:	0635      	lsls	r5, r6, #24
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	d501      	bpl.n	8010c0c <_printf_i+0x1cc>
 8010c08:	6018      	str	r0, [r3, #0]
 8010c0a:	e002      	b.n	8010c12 <_printf_i+0x1d2>
 8010c0c:	0671      	lsls	r1, r6, #25
 8010c0e:	d5fb      	bpl.n	8010c08 <_printf_i+0x1c8>
 8010c10:	8018      	strh	r0, [r3, #0]
 8010c12:	2300      	movs	r3, #0
 8010c14:	6123      	str	r3, [r4, #16]
 8010c16:	4616      	mov	r6, r2
 8010c18:	e7ba      	b.n	8010b90 <_printf_i+0x150>
 8010c1a:	680b      	ldr	r3, [r1, #0]
 8010c1c:	1d1a      	adds	r2, r3, #4
 8010c1e:	600a      	str	r2, [r1, #0]
 8010c20:	681e      	ldr	r6, [r3, #0]
 8010c22:	6862      	ldr	r2, [r4, #4]
 8010c24:	2100      	movs	r1, #0
 8010c26:	4630      	mov	r0, r6
 8010c28:	f7ef fb62 	bl	80002f0 <memchr>
 8010c2c:	b108      	cbz	r0, 8010c32 <_printf_i+0x1f2>
 8010c2e:	1b80      	subs	r0, r0, r6
 8010c30:	6060      	str	r0, [r4, #4]
 8010c32:	6863      	ldr	r3, [r4, #4]
 8010c34:	6123      	str	r3, [r4, #16]
 8010c36:	2300      	movs	r3, #0
 8010c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c3c:	e7a8      	b.n	8010b90 <_printf_i+0x150>
 8010c3e:	6923      	ldr	r3, [r4, #16]
 8010c40:	4632      	mov	r2, r6
 8010c42:	4649      	mov	r1, r9
 8010c44:	4640      	mov	r0, r8
 8010c46:	47d0      	blx	sl
 8010c48:	3001      	adds	r0, #1
 8010c4a:	d0ab      	beq.n	8010ba4 <_printf_i+0x164>
 8010c4c:	6823      	ldr	r3, [r4, #0]
 8010c4e:	079b      	lsls	r3, r3, #30
 8010c50:	d413      	bmi.n	8010c7a <_printf_i+0x23a>
 8010c52:	68e0      	ldr	r0, [r4, #12]
 8010c54:	9b03      	ldr	r3, [sp, #12]
 8010c56:	4298      	cmp	r0, r3
 8010c58:	bfb8      	it	lt
 8010c5a:	4618      	movlt	r0, r3
 8010c5c:	e7a4      	b.n	8010ba8 <_printf_i+0x168>
 8010c5e:	2301      	movs	r3, #1
 8010c60:	4632      	mov	r2, r6
 8010c62:	4649      	mov	r1, r9
 8010c64:	4640      	mov	r0, r8
 8010c66:	47d0      	blx	sl
 8010c68:	3001      	adds	r0, #1
 8010c6a:	d09b      	beq.n	8010ba4 <_printf_i+0x164>
 8010c6c:	3501      	adds	r5, #1
 8010c6e:	68e3      	ldr	r3, [r4, #12]
 8010c70:	9903      	ldr	r1, [sp, #12]
 8010c72:	1a5b      	subs	r3, r3, r1
 8010c74:	42ab      	cmp	r3, r5
 8010c76:	dcf2      	bgt.n	8010c5e <_printf_i+0x21e>
 8010c78:	e7eb      	b.n	8010c52 <_printf_i+0x212>
 8010c7a:	2500      	movs	r5, #0
 8010c7c:	f104 0619 	add.w	r6, r4, #25
 8010c80:	e7f5      	b.n	8010c6e <_printf_i+0x22e>
 8010c82:	bf00      	nop
 8010c84:	080137d2 	.word	0x080137d2
 8010c88:	080137e3 	.word	0x080137e3

08010c8c <iprintf>:
 8010c8c:	b40f      	push	{r0, r1, r2, r3}
 8010c8e:	4b0a      	ldr	r3, [pc, #40]	; (8010cb8 <iprintf+0x2c>)
 8010c90:	b513      	push	{r0, r1, r4, lr}
 8010c92:	681c      	ldr	r4, [r3, #0]
 8010c94:	b124      	cbz	r4, 8010ca0 <iprintf+0x14>
 8010c96:	69a3      	ldr	r3, [r4, #24]
 8010c98:	b913      	cbnz	r3, 8010ca0 <iprintf+0x14>
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	f001 f86c 	bl	8011d78 <__sinit>
 8010ca0:	ab05      	add	r3, sp, #20
 8010ca2:	9a04      	ldr	r2, [sp, #16]
 8010ca4:	68a1      	ldr	r1, [r4, #8]
 8010ca6:	9301      	str	r3, [sp, #4]
 8010ca8:	4620      	mov	r0, r4
 8010caa:	f001 fde7 	bl	801287c <_vfiprintf_r>
 8010cae:	b002      	add	sp, #8
 8010cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cb4:	b004      	add	sp, #16
 8010cb6:	4770      	bx	lr
 8010cb8:	24000028 	.word	0x24000028

08010cbc <_puts_r>:
 8010cbc:	b570      	push	{r4, r5, r6, lr}
 8010cbe:	460e      	mov	r6, r1
 8010cc0:	4605      	mov	r5, r0
 8010cc2:	b118      	cbz	r0, 8010ccc <_puts_r+0x10>
 8010cc4:	6983      	ldr	r3, [r0, #24]
 8010cc6:	b90b      	cbnz	r3, 8010ccc <_puts_r+0x10>
 8010cc8:	f001 f856 	bl	8011d78 <__sinit>
 8010ccc:	69ab      	ldr	r3, [r5, #24]
 8010cce:	68ac      	ldr	r4, [r5, #8]
 8010cd0:	b913      	cbnz	r3, 8010cd8 <_puts_r+0x1c>
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	f001 f850 	bl	8011d78 <__sinit>
 8010cd8:	4b2c      	ldr	r3, [pc, #176]	; (8010d8c <_puts_r+0xd0>)
 8010cda:	429c      	cmp	r4, r3
 8010cdc:	d120      	bne.n	8010d20 <_puts_r+0x64>
 8010cde:	686c      	ldr	r4, [r5, #4]
 8010ce0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ce2:	07db      	lsls	r3, r3, #31
 8010ce4:	d405      	bmi.n	8010cf2 <_puts_r+0x36>
 8010ce6:	89a3      	ldrh	r3, [r4, #12]
 8010ce8:	0598      	lsls	r0, r3, #22
 8010cea:	d402      	bmi.n	8010cf2 <_puts_r+0x36>
 8010cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010cee:	f001 f8e6 	bl	8011ebe <__retarget_lock_acquire_recursive>
 8010cf2:	89a3      	ldrh	r3, [r4, #12]
 8010cf4:	0719      	lsls	r1, r3, #28
 8010cf6:	d51d      	bpl.n	8010d34 <_puts_r+0x78>
 8010cf8:	6923      	ldr	r3, [r4, #16]
 8010cfa:	b1db      	cbz	r3, 8010d34 <_puts_r+0x78>
 8010cfc:	3e01      	subs	r6, #1
 8010cfe:	68a3      	ldr	r3, [r4, #8]
 8010d00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010d04:	3b01      	subs	r3, #1
 8010d06:	60a3      	str	r3, [r4, #8]
 8010d08:	bb39      	cbnz	r1, 8010d5a <_puts_r+0x9e>
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	da38      	bge.n	8010d80 <_puts_r+0xc4>
 8010d0e:	4622      	mov	r2, r4
 8010d10:	210a      	movs	r1, #10
 8010d12:	4628      	mov	r0, r5
 8010d14:	f000 f848 	bl	8010da8 <__swbuf_r>
 8010d18:	3001      	adds	r0, #1
 8010d1a:	d011      	beq.n	8010d40 <_puts_r+0x84>
 8010d1c:	250a      	movs	r5, #10
 8010d1e:	e011      	b.n	8010d44 <_puts_r+0x88>
 8010d20:	4b1b      	ldr	r3, [pc, #108]	; (8010d90 <_puts_r+0xd4>)
 8010d22:	429c      	cmp	r4, r3
 8010d24:	d101      	bne.n	8010d2a <_puts_r+0x6e>
 8010d26:	68ac      	ldr	r4, [r5, #8]
 8010d28:	e7da      	b.n	8010ce0 <_puts_r+0x24>
 8010d2a:	4b1a      	ldr	r3, [pc, #104]	; (8010d94 <_puts_r+0xd8>)
 8010d2c:	429c      	cmp	r4, r3
 8010d2e:	bf08      	it	eq
 8010d30:	68ec      	ldreq	r4, [r5, #12]
 8010d32:	e7d5      	b.n	8010ce0 <_puts_r+0x24>
 8010d34:	4621      	mov	r1, r4
 8010d36:	4628      	mov	r0, r5
 8010d38:	f000 f888 	bl	8010e4c <__swsetup_r>
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	d0dd      	beq.n	8010cfc <_puts_r+0x40>
 8010d40:	f04f 35ff 	mov.w	r5, #4294967295
 8010d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d46:	07da      	lsls	r2, r3, #31
 8010d48:	d405      	bmi.n	8010d56 <_puts_r+0x9a>
 8010d4a:	89a3      	ldrh	r3, [r4, #12]
 8010d4c:	059b      	lsls	r3, r3, #22
 8010d4e:	d402      	bmi.n	8010d56 <_puts_r+0x9a>
 8010d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d52:	f001 f8b5 	bl	8011ec0 <__retarget_lock_release_recursive>
 8010d56:	4628      	mov	r0, r5
 8010d58:	bd70      	pop	{r4, r5, r6, pc}
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	da04      	bge.n	8010d68 <_puts_r+0xac>
 8010d5e:	69a2      	ldr	r2, [r4, #24]
 8010d60:	429a      	cmp	r2, r3
 8010d62:	dc06      	bgt.n	8010d72 <_puts_r+0xb6>
 8010d64:	290a      	cmp	r1, #10
 8010d66:	d004      	beq.n	8010d72 <_puts_r+0xb6>
 8010d68:	6823      	ldr	r3, [r4, #0]
 8010d6a:	1c5a      	adds	r2, r3, #1
 8010d6c:	6022      	str	r2, [r4, #0]
 8010d6e:	7019      	strb	r1, [r3, #0]
 8010d70:	e7c5      	b.n	8010cfe <_puts_r+0x42>
 8010d72:	4622      	mov	r2, r4
 8010d74:	4628      	mov	r0, r5
 8010d76:	f000 f817 	bl	8010da8 <__swbuf_r>
 8010d7a:	3001      	adds	r0, #1
 8010d7c:	d1bf      	bne.n	8010cfe <_puts_r+0x42>
 8010d7e:	e7df      	b.n	8010d40 <_puts_r+0x84>
 8010d80:	6823      	ldr	r3, [r4, #0]
 8010d82:	250a      	movs	r5, #10
 8010d84:	1c5a      	adds	r2, r3, #1
 8010d86:	6022      	str	r2, [r4, #0]
 8010d88:	701d      	strb	r5, [r3, #0]
 8010d8a:	e7db      	b.n	8010d44 <_puts_r+0x88>
 8010d8c:	080138a8 	.word	0x080138a8
 8010d90:	080138c8 	.word	0x080138c8
 8010d94:	08013888 	.word	0x08013888

08010d98 <puts>:
 8010d98:	4b02      	ldr	r3, [pc, #8]	; (8010da4 <puts+0xc>)
 8010d9a:	4601      	mov	r1, r0
 8010d9c:	6818      	ldr	r0, [r3, #0]
 8010d9e:	f7ff bf8d 	b.w	8010cbc <_puts_r>
 8010da2:	bf00      	nop
 8010da4:	24000028 	.word	0x24000028

08010da8 <__swbuf_r>:
 8010da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010daa:	460e      	mov	r6, r1
 8010dac:	4614      	mov	r4, r2
 8010dae:	4605      	mov	r5, r0
 8010db0:	b118      	cbz	r0, 8010dba <__swbuf_r+0x12>
 8010db2:	6983      	ldr	r3, [r0, #24]
 8010db4:	b90b      	cbnz	r3, 8010dba <__swbuf_r+0x12>
 8010db6:	f000 ffdf 	bl	8011d78 <__sinit>
 8010dba:	4b21      	ldr	r3, [pc, #132]	; (8010e40 <__swbuf_r+0x98>)
 8010dbc:	429c      	cmp	r4, r3
 8010dbe:	d12b      	bne.n	8010e18 <__swbuf_r+0x70>
 8010dc0:	686c      	ldr	r4, [r5, #4]
 8010dc2:	69a3      	ldr	r3, [r4, #24]
 8010dc4:	60a3      	str	r3, [r4, #8]
 8010dc6:	89a3      	ldrh	r3, [r4, #12]
 8010dc8:	071a      	lsls	r2, r3, #28
 8010dca:	d52f      	bpl.n	8010e2c <__swbuf_r+0x84>
 8010dcc:	6923      	ldr	r3, [r4, #16]
 8010dce:	b36b      	cbz	r3, 8010e2c <__swbuf_r+0x84>
 8010dd0:	6923      	ldr	r3, [r4, #16]
 8010dd2:	6820      	ldr	r0, [r4, #0]
 8010dd4:	1ac0      	subs	r0, r0, r3
 8010dd6:	6963      	ldr	r3, [r4, #20]
 8010dd8:	b2f6      	uxtb	r6, r6
 8010dda:	4283      	cmp	r3, r0
 8010ddc:	4637      	mov	r7, r6
 8010dde:	dc04      	bgt.n	8010dea <__swbuf_r+0x42>
 8010de0:	4621      	mov	r1, r4
 8010de2:	4628      	mov	r0, r5
 8010de4:	f000 ff34 	bl	8011c50 <_fflush_r>
 8010de8:	bb30      	cbnz	r0, 8010e38 <__swbuf_r+0x90>
 8010dea:	68a3      	ldr	r3, [r4, #8]
 8010dec:	3b01      	subs	r3, #1
 8010dee:	60a3      	str	r3, [r4, #8]
 8010df0:	6823      	ldr	r3, [r4, #0]
 8010df2:	1c5a      	adds	r2, r3, #1
 8010df4:	6022      	str	r2, [r4, #0]
 8010df6:	701e      	strb	r6, [r3, #0]
 8010df8:	6963      	ldr	r3, [r4, #20]
 8010dfa:	3001      	adds	r0, #1
 8010dfc:	4283      	cmp	r3, r0
 8010dfe:	d004      	beq.n	8010e0a <__swbuf_r+0x62>
 8010e00:	89a3      	ldrh	r3, [r4, #12]
 8010e02:	07db      	lsls	r3, r3, #31
 8010e04:	d506      	bpl.n	8010e14 <__swbuf_r+0x6c>
 8010e06:	2e0a      	cmp	r6, #10
 8010e08:	d104      	bne.n	8010e14 <__swbuf_r+0x6c>
 8010e0a:	4621      	mov	r1, r4
 8010e0c:	4628      	mov	r0, r5
 8010e0e:	f000 ff1f 	bl	8011c50 <_fflush_r>
 8010e12:	b988      	cbnz	r0, 8010e38 <__swbuf_r+0x90>
 8010e14:	4638      	mov	r0, r7
 8010e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e18:	4b0a      	ldr	r3, [pc, #40]	; (8010e44 <__swbuf_r+0x9c>)
 8010e1a:	429c      	cmp	r4, r3
 8010e1c:	d101      	bne.n	8010e22 <__swbuf_r+0x7a>
 8010e1e:	68ac      	ldr	r4, [r5, #8]
 8010e20:	e7cf      	b.n	8010dc2 <__swbuf_r+0x1a>
 8010e22:	4b09      	ldr	r3, [pc, #36]	; (8010e48 <__swbuf_r+0xa0>)
 8010e24:	429c      	cmp	r4, r3
 8010e26:	bf08      	it	eq
 8010e28:	68ec      	ldreq	r4, [r5, #12]
 8010e2a:	e7ca      	b.n	8010dc2 <__swbuf_r+0x1a>
 8010e2c:	4621      	mov	r1, r4
 8010e2e:	4628      	mov	r0, r5
 8010e30:	f000 f80c 	bl	8010e4c <__swsetup_r>
 8010e34:	2800      	cmp	r0, #0
 8010e36:	d0cb      	beq.n	8010dd0 <__swbuf_r+0x28>
 8010e38:	f04f 37ff 	mov.w	r7, #4294967295
 8010e3c:	e7ea      	b.n	8010e14 <__swbuf_r+0x6c>
 8010e3e:	bf00      	nop
 8010e40:	080138a8 	.word	0x080138a8
 8010e44:	080138c8 	.word	0x080138c8
 8010e48:	08013888 	.word	0x08013888

08010e4c <__swsetup_r>:
 8010e4c:	4b32      	ldr	r3, [pc, #200]	; (8010f18 <__swsetup_r+0xcc>)
 8010e4e:	b570      	push	{r4, r5, r6, lr}
 8010e50:	681d      	ldr	r5, [r3, #0]
 8010e52:	4606      	mov	r6, r0
 8010e54:	460c      	mov	r4, r1
 8010e56:	b125      	cbz	r5, 8010e62 <__swsetup_r+0x16>
 8010e58:	69ab      	ldr	r3, [r5, #24]
 8010e5a:	b913      	cbnz	r3, 8010e62 <__swsetup_r+0x16>
 8010e5c:	4628      	mov	r0, r5
 8010e5e:	f000 ff8b 	bl	8011d78 <__sinit>
 8010e62:	4b2e      	ldr	r3, [pc, #184]	; (8010f1c <__swsetup_r+0xd0>)
 8010e64:	429c      	cmp	r4, r3
 8010e66:	d10f      	bne.n	8010e88 <__swsetup_r+0x3c>
 8010e68:	686c      	ldr	r4, [r5, #4]
 8010e6a:	89a3      	ldrh	r3, [r4, #12]
 8010e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010e70:	0719      	lsls	r1, r3, #28
 8010e72:	d42c      	bmi.n	8010ece <__swsetup_r+0x82>
 8010e74:	06dd      	lsls	r5, r3, #27
 8010e76:	d411      	bmi.n	8010e9c <__swsetup_r+0x50>
 8010e78:	2309      	movs	r3, #9
 8010e7a:	6033      	str	r3, [r6, #0]
 8010e7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010e80:	81a3      	strh	r3, [r4, #12]
 8010e82:	f04f 30ff 	mov.w	r0, #4294967295
 8010e86:	e03e      	b.n	8010f06 <__swsetup_r+0xba>
 8010e88:	4b25      	ldr	r3, [pc, #148]	; (8010f20 <__swsetup_r+0xd4>)
 8010e8a:	429c      	cmp	r4, r3
 8010e8c:	d101      	bne.n	8010e92 <__swsetup_r+0x46>
 8010e8e:	68ac      	ldr	r4, [r5, #8]
 8010e90:	e7eb      	b.n	8010e6a <__swsetup_r+0x1e>
 8010e92:	4b24      	ldr	r3, [pc, #144]	; (8010f24 <__swsetup_r+0xd8>)
 8010e94:	429c      	cmp	r4, r3
 8010e96:	bf08      	it	eq
 8010e98:	68ec      	ldreq	r4, [r5, #12]
 8010e9a:	e7e6      	b.n	8010e6a <__swsetup_r+0x1e>
 8010e9c:	0758      	lsls	r0, r3, #29
 8010e9e:	d512      	bpl.n	8010ec6 <__swsetup_r+0x7a>
 8010ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ea2:	b141      	cbz	r1, 8010eb6 <__swsetup_r+0x6a>
 8010ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ea8:	4299      	cmp	r1, r3
 8010eaa:	d002      	beq.n	8010eb2 <__swsetup_r+0x66>
 8010eac:	4630      	mov	r0, r6
 8010eae:	f001 fc11 	bl	80126d4 <_free_r>
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8010eb6:	89a3      	ldrh	r3, [r4, #12]
 8010eb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010ebc:	81a3      	strh	r3, [r4, #12]
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	6063      	str	r3, [r4, #4]
 8010ec2:	6923      	ldr	r3, [r4, #16]
 8010ec4:	6023      	str	r3, [r4, #0]
 8010ec6:	89a3      	ldrh	r3, [r4, #12]
 8010ec8:	f043 0308 	orr.w	r3, r3, #8
 8010ecc:	81a3      	strh	r3, [r4, #12]
 8010ece:	6923      	ldr	r3, [r4, #16]
 8010ed0:	b94b      	cbnz	r3, 8010ee6 <__swsetup_r+0x9a>
 8010ed2:	89a3      	ldrh	r3, [r4, #12]
 8010ed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010edc:	d003      	beq.n	8010ee6 <__swsetup_r+0x9a>
 8010ede:	4621      	mov	r1, r4
 8010ee0:	4630      	mov	r0, r6
 8010ee2:	f001 f813 	bl	8011f0c <__smakebuf_r>
 8010ee6:	89a0      	ldrh	r0, [r4, #12]
 8010ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010eec:	f010 0301 	ands.w	r3, r0, #1
 8010ef0:	d00a      	beq.n	8010f08 <__swsetup_r+0xbc>
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	60a3      	str	r3, [r4, #8]
 8010ef6:	6963      	ldr	r3, [r4, #20]
 8010ef8:	425b      	negs	r3, r3
 8010efa:	61a3      	str	r3, [r4, #24]
 8010efc:	6923      	ldr	r3, [r4, #16]
 8010efe:	b943      	cbnz	r3, 8010f12 <__swsetup_r+0xc6>
 8010f00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010f04:	d1ba      	bne.n	8010e7c <__swsetup_r+0x30>
 8010f06:	bd70      	pop	{r4, r5, r6, pc}
 8010f08:	0781      	lsls	r1, r0, #30
 8010f0a:	bf58      	it	pl
 8010f0c:	6963      	ldrpl	r3, [r4, #20]
 8010f0e:	60a3      	str	r3, [r4, #8]
 8010f10:	e7f4      	b.n	8010efc <__swsetup_r+0xb0>
 8010f12:	2000      	movs	r0, #0
 8010f14:	e7f7      	b.n	8010f06 <__swsetup_r+0xba>
 8010f16:	bf00      	nop
 8010f18:	24000028 	.word	0x24000028
 8010f1c:	080138a8 	.word	0x080138a8
 8010f20:	080138c8 	.word	0x080138c8
 8010f24:	08013888 	.word	0x08013888

08010f28 <quorem>:
 8010f28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f2c:	6903      	ldr	r3, [r0, #16]
 8010f2e:	690c      	ldr	r4, [r1, #16]
 8010f30:	42a3      	cmp	r3, r4
 8010f32:	4607      	mov	r7, r0
 8010f34:	f2c0 8081 	blt.w	801103a <quorem+0x112>
 8010f38:	3c01      	subs	r4, #1
 8010f3a:	f101 0814 	add.w	r8, r1, #20
 8010f3e:	f100 0514 	add.w	r5, r0, #20
 8010f42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010f46:	9301      	str	r3, [sp, #4]
 8010f48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010f4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f50:	3301      	adds	r3, #1
 8010f52:	429a      	cmp	r2, r3
 8010f54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010f58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010f5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010f60:	d331      	bcc.n	8010fc6 <quorem+0x9e>
 8010f62:	f04f 0e00 	mov.w	lr, #0
 8010f66:	4640      	mov	r0, r8
 8010f68:	46ac      	mov	ip, r5
 8010f6a:	46f2      	mov	sl, lr
 8010f6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010f70:	b293      	uxth	r3, r2
 8010f72:	fb06 e303 	mla	r3, r6, r3, lr
 8010f76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	ebaa 0303 	sub.w	r3, sl, r3
 8010f80:	0c12      	lsrs	r2, r2, #16
 8010f82:	f8dc a000 	ldr.w	sl, [ip]
 8010f86:	fb06 e202 	mla	r2, r6, r2, lr
 8010f8a:	fa13 f38a 	uxtah	r3, r3, sl
 8010f8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010f92:	fa1f fa82 	uxth.w	sl, r2
 8010f96:	f8dc 2000 	ldr.w	r2, [ip]
 8010f9a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010f9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010fa8:	4581      	cmp	r9, r0
 8010faa:	f84c 3b04 	str.w	r3, [ip], #4
 8010fae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010fb2:	d2db      	bcs.n	8010f6c <quorem+0x44>
 8010fb4:	f855 300b 	ldr.w	r3, [r5, fp]
 8010fb8:	b92b      	cbnz	r3, 8010fc6 <quorem+0x9e>
 8010fba:	9b01      	ldr	r3, [sp, #4]
 8010fbc:	3b04      	subs	r3, #4
 8010fbe:	429d      	cmp	r5, r3
 8010fc0:	461a      	mov	r2, r3
 8010fc2:	d32e      	bcc.n	8011022 <quorem+0xfa>
 8010fc4:	613c      	str	r4, [r7, #16]
 8010fc6:	4638      	mov	r0, r7
 8010fc8:	f001 fa74 	bl	80124b4 <__mcmp>
 8010fcc:	2800      	cmp	r0, #0
 8010fce:	db24      	blt.n	801101a <quorem+0xf2>
 8010fd0:	3601      	adds	r6, #1
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	f04f 0c00 	mov.w	ip, #0
 8010fd8:	f858 2b04 	ldr.w	r2, [r8], #4
 8010fdc:	f8d0 e000 	ldr.w	lr, [r0]
 8010fe0:	b293      	uxth	r3, r2
 8010fe2:	ebac 0303 	sub.w	r3, ip, r3
 8010fe6:	0c12      	lsrs	r2, r2, #16
 8010fe8:	fa13 f38e 	uxtah	r3, r3, lr
 8010fec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010ff0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010ffa:	45c1      	cmp	r9, r8
 8010ffc:	f840 3b04 	str.w	r3, [r0], #4
 8011000:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011004:	d2e8      	bcs.n	8010fd8 <quorem+0xb0>
 8011006:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801100a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801100e:	b922      	cbnz	r2, 801101a <quorem+0xf2>
 8011010:	3b04      	subs	r3, #4
 8011012:	429d      	cmp	r5, r3
 8011014:	461a      	mov	r2, r3
 8011016:	d30a      	bcc.n	801102e <quorem+0x106>
 8011018:	613c      	str	r4, [r7, #16]
 801101a:	4630      	mov	r0, r6
 801101c:	b003      	add	sp, #12
 801101e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011022:	6812      	ldr	r2, [r2, #0]
 8011024:	3b04      	subs	r3, #4
 8011026:	2a00      	cmp	r2, #0
 8011028:	d1cc      	bne.n	8010fc4 <quorem+0x9c>
 801102a:	3c01      	subs	r4, #1
 801102c:	e7c7      	b.n	8010fbe <quorem+0x96>
 801102e:	6812      	ldr	r2, [r2, #0]
 8011030:	3b04      	subs	r3, #4
 8011032:	2a00      	cmp	r2, #0
 8011034:	d1f0      	bne.n	8011018 <quorem+0xf0>
 8011036:	3c01      	subs	r4, #1
 8011038:	e7eb      	b.n	8011012 <quorem+0xea>
 801103a:	2000      	movs	r0, #0
 801103c:	e7ee      	b.n	801101c <quorem+0xf4>
	...

08011040 <_dtoa_r>:
 8011040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011044:	ec59 8b10 	vmov	r8, r9, d0
 8011048:	b095      	sub	sp, #84	; 0x54
 801104a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801104c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801104e:	9107      	str	r1, [sp, #28]
 8011050:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8011054:	4606      	mov	r6, r0
 8011056:	9209      	str	r2, [sp, #36]	; 0x24
 8011058:	9310      	str	r3, [sp, #64]	; 0x40
 801105a:	b975      	cbnz	r5, 801107a <_dtoa_r+0x3a>
 801105c:	2010      	movs	r0, #16
 801105e:	f000 ff95 	bl	8011f8c <malloc>
 8011062:	4602      	mov	r2, r0
 8011064:	6270      	str	r0, [r6, #36]	; 0x24
 8011066:	b920      	cbnz	r0, 8011072 <_dtoa_r+0x32>
 8011068:	4bab      	ldr	r3, [pc, #684]	; (8011318 <_dtoa_r+0x2d8>)
 801106a:	21ea      	movs	r1, #234	; 0xea
 801106c:	48ab      	ldr	r0, [pc, #684]	; (801131c <_dtoa_r+0x2dc>)
 801106e:	f001 fd9b 	bl	8012ba8 <__assert_func>
 8011072:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011076:	6005      	str	r5, [r0, #0]
 8011078:	60c5      	str	r5, [r0, #12]
 801107a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801107c:	6819      	ldr	r1, [r3, #0]
 801107e:	b151      	cbz	r1, 8011096 <_dtoa_r+0x56>
 8011080:	685a      	ldr	r2, [r3, #4]
 8011082:	604a      	str	r2, [r1, #4]
 8011084:	2301      	movs	r3, #1
 8011086:	4093      	lsls	r3, r2
 8011088:	608b      	str	r3, [r1, #8]
 801108a:	4630      	mov	r0, r6
 801108c:	f000 ffd4 	bl	8012038 <_Bfree>
 8011090:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011092:	2200      	movs	r2, #0
 8011094:	601a      	str	r2, [r3, #0]
 8011096:	f1b9 0300 	subs.w	r3, r9, #0
 801109a:	bfbb      	ittet	lt
 801109c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80110a0:	9303      	strlt	r3, [sp, #12]
 80110a2:	2300      	movge	r3, #0
 80110a4:	2201      	movlt	r2, #1
 80110a6:	bfac      	ite	ge
 80110a8:	6023      	strge	r3, [r4, #0]
 80110aa:	6022      	strlt	r2, [r4, #0]
 80110ac:	4b9c      	ldr	r3, [pc, #624]	; (8011320 <_dtoa_r+0x2e0>)
 80110ae:	9c03      	ldr	r4, [sp, #12]
 80110b0:	43a3      	bics	r3, r4
 80110b2:	d11a      	bne.n	80110ea <_dtoa_r+0xaa>
 80110b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80110b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80110ba:	6013      	str	r3, [r2, #0]
 80110bc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80110c0:	ea53 0308 	orrs.w	r3, r3, r8
 80110c4:	f000 8512 	beq.w	8011aec <_dtoa_r+0xaac>
 80110c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80110ca:	b953      	cbnz	r3, 80110e2 <_dtoa_r+0xa2>
 80110cc:	4b95      	ldr	r3, [pc, #596]	; (8011324 <_dtoa_r+0x2e4>)
 80110ce:	e01f      	b.n	8011110 <_dtoa_r+0xd0>
 80110d0:	4b95      	ldr	r3, [pc, #596]	; (8011328 <_dtoa_r+0x2e8>)
 80110d2:	9300      	str	r3, [sp, #0]
 80110d4:	3308      	adds	r3, #8
 80110d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80110d8:	6013      	str	r3, [r2, #0]
 80110da:	9800      	ldr	r0, [sp, #0]
 80110dc:	b015      	add	sp, #84	; 0x54
 80110de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110e2:	4b90      	ldr	r3, [pc, #576]	; (8011324 <_dtoa_r+0x2e4>)
 80110e4:	9300      	str	r3, [sp, #0]
 80110e6:	3303      	adds	r3, #3
 80110e8:	e7f5      	b.n	80110d6 <_dtoa_r+0x96>
 80110ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80110ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80110f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110f6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80110fa:	d10b      	bne.n	8011114 <_dtoa_r+0xd4>
 80110fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80110fe:	2301      	movs	r3, #1
 8011100:	6013      	str	r3, [r2, #0]
 8011102:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011104:	2b00      	cmp	r3, #0
 8011106:	f000 84ee 	beq.w	8011ae6 <_dtoa_r+0xaa6>
 801110a:	4888      	ldr	r0, [pc, #544]	; (801132c <_dtoa_r+0x2ec>)
 801110c:	6018      	str	r0, [r3, #0]
 801110e:	1e43      	subs	r3, r0, #1
 8011110:	9300      	str	r3, [sp, #0]
 8011112:	e7e2      	b.n	80110da <_dtoa_r+0x9a>
 8011114:	a913      	add	r1, sp, #76	; 0x4c
 8011116:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801111a:	aa12      	add	r2, sp, #72	; 0x48
 801111c:	4630      	mov	r0, r6
 801111e:	f001 fa6d 	bl	80125fc <__d2b>
 8011122:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8011126:	4605      	mov	r5, r0
 8011128:	9812      	ldr	r0, [sp, #72]	; 0x48
 801112a:	2900      	cmp	r1, #0
 801112c:	d047      	beq.n	80111be <_dtoa_r+0x17e>
 801112e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011130:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011134:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011138:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801113c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011140:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011144:	2400      	movs	r4, #0
 8011146:	ec43 2b16 	vmov	d6, r2, r3
 801114a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801114e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8011300 <_dtoa_r+0x2c0>
 8011152:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011156:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8011308 <_dtoa_r+0x2c8>
 801115a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801115e:	eeb0 7b46 	vmov.f64	d7, d6
 8011162:	ee06 1a90 	vmov	s13, r1
 8011166:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801116a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011310 <_dtoa_r+0x2d0>
 801116e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011172:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011176:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801117e:	ee16 ba90 	vmov	fp, s13
 8011182:	9411      	str	r4, [sp, #68]	; 0x44
 8011184:	d508      	bpl.n	8011198 <_dtoa_r+0x158>
 8011186:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801118a:	eeb4 6b47 	vcmp.f64	d6, d7
 801118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011192:	bf18      	it	ne
 8011194:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011198:	f1bb 0f16 	cmp.w	fp, #22
 801119c:	d832      	bhi.n	8011204 <_dtoa_r+0x1c4>
 801119e:	4b64      	ldr	r3, [pc, #400]	; (8011330 <_dtoa_r+0x2f0>)
 80111a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80111a4:	ed93 7b00 	vldr	d7, [r3]
 80111a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80111ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80111b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b4:	d501      	bpl.n	80111ba <_dtoa_r+0x17a>
 80111b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80111ba:	2300      	movs	r3, #0
 80111bc:	e023      	b.n	8011206 <_dtoa_r+0x1c6>
 80111be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80111c0:	4401      	add	r1, r0
 80111c2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80111c6:	2b20      	cmp	r3, #32
 80111c8:	bfc3      	ittte	gt
 80111ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80111ce:	fa04 f303 	lslgt.w	r3, r4, r3
 80111d2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80111d6:	f1c3 0320 	rsble	r3, r3, #32
 80111da:	bfc6      	itte	gt
 80111dc:	fa28 f804 	lsrgt.w	r8, r8, r4
 80111e0:	ea43 0308 	orrgt.w	r3, r3, r8
 80111e4:	fa08 f303 	lslle.w	r3, r8, r3
 80111e8:	ee07 3a90 	vmov	s15, r3
 80111ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80111f0:	3901      	subs	r1, #1
 80111f2:	ed8d 7b00 	vstr	d7, [sp]
 80111f6:	9c01      	ldr	r4, [sp, #4]
 80111f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80111fc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011200:	2401      	movs	r4, #1
 8011202:	e7a0      	b.n	8011146 <_dtoa_r+0x106>
 8011204:	2301      	movs	r3, #1
 8011206:	930f      	str	r3, [sp, #60]	; 0x3c
 8011208:	1a43      	subs	r3, r0, r1
 801120a:	1e5a      	subs	r2, r3, #1
 801120c:	bf45      	ittet	mi
 801120e:	f1c3 0301 	rsbmi	r3, r3, #1
 8011212:	9305      	strmi	r3, [sp, #20]
 8011214:	2300      	movpl	r3, #0
 8011216:	2300      	movmi	r3, #0
 8011218:	9206      	str	r2, [sp, #24]
 801121a:	bf54      	ite	pl
 801121c:	9305      	strpl	r3, [sp, #20]
 801121e:	9306      	strmi	r3, [sp, #24]
 8011220:	f1bb 0f00 	cmp.w	fp, #0
 8011224:	db18      	blt.n	8011258 <_dtoa_r+0x218>
 8011226:	9b06      	ldr	r3, [sp, #24]
 8011228:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801122c:	445b      	add	r3, fp
 801122e:	9306      	str	r3, [sp, #24]
 8011230:	2300      	movs	r3, #0
 8011232:	9a07      	ldr	r2, [sp, #28]
 8011234:	2a09      	cmp	r2, #9
 8011236:	d849      	bhi.n	80112cc <_dtoa_r+0x28c>
 8011238:	2a05      	cmp	r2, #5
 801123a:	bfc4      	itt	gt
 801123c:	3a04      	subgt	r2, #4
 801123e:	9207      	strgt	r2, [sp, #28]
 8011240:	9a07      	ldr	r2, [sp, #28]
 8011242:	f1a2 0202 	sub.w	r2, r2, #2
 8011246:	bfcc      	ite	gt
 8011248:	2400      	movgt	r4, #0
 801124a:	2401      	movle	r4, #1
 801124c:	2a03      	cmp	r2, #3
 801124e:	d848      	bhi.n	80112e2 <_dtoa_r+0x2a2>
 8011250:	e8df f002 	tbb	[pc, r2]
 8011254:	3a2c2e0b 	.word	0x3a2c2e0b
 8011258:	9b05      	ldr	r3, [sp, #20]
 801125a:	2200      	movs	r2, #0
 801125c:	eba3 030b 	sub.w	r3, r3, fp
 8011260:	9305      	str	r3, [sp, #20]
 8011262:	920e      	str	r2, [sp, #56]	; 0x38
 8011264:	f1cb 0300 	rsb	r3, fp, #0
 8011268:	e7e3      	b.n	8011232 <_dtoa_r+0x1f2>
 801126a:	2200      	movs	r2, #0
 801126c:	9208      	str	r2, [sp, #32]
 801126e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011270:	2a00      	cmp	r2, #0
 8011272:	dc39      	bgt.n	80112e8 <_dtoa_r+0x2a8>
 8011274:	f04f 0a01 	mov.w	sl, #1
 8011278:	46d1      	mov	r9, sl
 801127a:	4652      	mov	r2, sl
 801127c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011280:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8011282:	2100      	movs	r1, #0
 8011284:	6079      	str	r1, [r7, #4]
 8011286:	2004      	movs	r0, #4
 8011288:	f100 0c14 	add.w	ip, r0, #20
 801128c:	4594      	cmp	ip, r2
 801128e:	6879      	ldr	r1, [r7, #4]
 8011290:	d92f      	bls.n	80112f2 <_dtoa_r+0x2b2>
 8011292:	4630      	mov	r0, r6
 8011294:	930c      	str	r3, [sp, #48]	; 0x30
 8011296:	f000 fe8f 	bl	8011fb8 <_Balloc>
 801129a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801129c:	9000      	str	r0, [sp, #0]
 801129e:	4602      	mov	r2, r0
 80112a0:	2800      	cmp	r0, #0
 80112a2:	d149      	bne.n	8011338 <_dtoa_r+0x2f8>
 80112a4:	4b23      	ldr	r3, [pc, #140]	; (8011334 <_dtoa_r+0x2f4>)
 80112a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80112aa:	e6df      	b.n	801106c <_dtoa_r+0x2c>
 80112ac:	2201      	movs	r2, #1
 80112ae:	e7dd      	b.n	801126c <_dtoa_r+0x22c>
 80112b0:	2200      	movs	r2, #0
 80112b2:	9208      	str	r2, [sp, #32]
 80112b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112b6:	eb0b 0a02 	add.w	sl, fp, r2
 80112ba:	f10a 0901 	add.w	r9, sl, #1
 80112be:	464a      	mov	r2, r9
 80112c0:	2a01      	cmp	r2, #1
 80112c2:	bfb8      	it	lt
 80112c4:	2201      	movlt	r2, #1
 80112c6:	e7db      	b.n	8011280 <_dtoa_r+0x240>
 80112c8:	2201      	movs	r2, #1
 80112ca:	e7f2      	b.n	80112b2 <_dtoa_r+0x272>
 80112cc:	2401      	movs	r4, #1
 80112ce:	2200      	movs	r2, #0
 80112d0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80112d4:	f04f 3aff 	mov.w	sl, #4294967295
 80112d8:	2100      	movs	r1, #0
 80112da:	46d1      	mov	r9, sl
 80112dc:	2212      	movs	r2, #18
 80112de:	9109      	str	r1, [sp, #36]	; 0x24
 80112e0:	e7ce      	b.n	8011280 <_dtoa_r+0x240>
 80112e2:	2201      	movs	r2, #1
 80112e4:	9208      	str	r2, [sp, #32]
 80112e6:	e7f5      	b.n	80112d4 <_dtoa_r+0x294>
 80112e8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80112ec:	46d1      	mov	r9, sl
 80112ee:	4652      	mov	r2, sl
 80112f0:	e7c6      	b.n	8011280 <_dtoa_r+0x240>
 80112f2:	3101      	adds	r1, #1
 80112f4:	6079      	str	r1, [r7, #4]
 80112f6:	0040      	lsls	r0, r0, #1
 80112f8:	e7c6      	b.n	8011288 <_dtoa_r+0x248>
 80112fa:	bf00      	nop
 80112fc:	f3af 8000 	nop.w
 8011300:	636f4361 	.word	0x636f4361
 8011304:	3fd287a7 	.word	0x3fd287a7
 8011308:	8b60c8b3 	.word	0x8b60c8b3
 801130c:	3fc68a28 	.word	0x3fc68a28
 8011310:	509f79fb 	.word	0x509f79fb
 8011314:	3fd34413 	.word	0x3fd34413
 8011318:	08013801 	.word	0x08013801
 801131c:	08013818 	.word	0x08013818
 8011320:	7ff00000 	.word	0x7ff00000
 8011324:	080137fd 	.word	0x080137fd
 8011328:	080137f4 	.word	0x080137f4
 801132c:	080137d1 	.word	0x080137d1
 8011330:	08013970 	.word	0x08013970
 8011334:	08013877 	.word	0x08013877
 8011338:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801133a:	9900      	ldr	r1, [sp, #0]
 801133c:	6011      	str	r1, [r2, #0]
 801133e:	f1b9 0f0e 	cmp.w	r9, #14
 8011342:	d872      	bhi.n	801142a <_dtoa_r+0x3ea>
 8011344:	2c00      	cmp	r4, #0
 8011346:	d070      	beq.n	801142a <_dtoa_r+0x3ea>
 8011348:	f1bb 0f00 	cmp.w	fp, #0
 801134c:	f340 80a6 	ble.w	801149c <_dtoa_r+0x45c>
 8011350:	49ca      	ldr	r1, [pc, #808]	; (801167c <_dtoa_r+0x63c>)
 8011352:	f00b 020f 	and.w	r2, fp, #15
 8011356:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801135a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801135e:	ed92 7b00 	vldr	d7, [r2]
 8011362:	ea4f 112b 	mov.w	r1, fp, asr #4
 8011366:	f000 808d 	beq.w	8011484 <_dtoa_r+0x444>
 801136a:	4ac5      	ldr	r2, [pc, #788]	; (8011680 <_dtoa_r+0x640>)
 801136c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8011370:	ed92 6b08 	vldr	d6, [r2, #32]
 8011374:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8011378:	ed8d 6b02 	vstr	d6, [sp, #8]
 801137c:	f001 010f 	and.w	r1, r1, #15
 8011380:	2203      	movs	r2, #3
 8011382:	48bf      	ldr	r0, [pc, #764]	; (8011680 <_dtoa_r+0x640>)
 8011384:	2900      	cmp	r1, #0
 8011386:	d17f      	bne.n	8011488 <_dtoa_r+0x448>
 8011388:	ed9d 6b02 	vldr	d6, [sp, #8]
 801138c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011390:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011394:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011396:	2900      	cmp	r1, #0
 8011398:	f000 80b2 	beq.w	8011500 <_dtoa_r+0x4c0>
 801139c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80113a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80113a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80113a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ac:	f140 80a8 	bpl.w	8011500 <_dtoa_r+0x4c0>
 80113b0:	f1b9 0f00 	cmp.w	r9, #0
 80113b4:	f000 80a4 	beq.w	8011500 <_dtoa_r+0x4c0>
 80113b8:	f1ba 0f00 	cmp.w	sl, #0
 80113bc:	dd31      	ble.n	8011422 <_dtoa_r+0x3e2>
 80113be:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80113c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80113c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80113ca:	f10b 37ff 	add.w	r7, fp, #4294967295
 80113ce:	3201      	adds	r2, #1
 80113d0:	4650      	mov	r0, sl
 80113d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80113d6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80113da:	ee07 2a90 	vmov	s15, r2
 80113de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80113e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80113e6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80113ea:	9c03      	ldr	r4, [sp, #12]
 80113ec:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80113f0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80113f4:	2800      	cmp	r0, #0
 80113f6:	f040 8086 	bne.w	8011506 <_dtoa_r+0x4c6>
 80113fa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80113fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011402:	ec42 1b17 	vmov	d7, r1, r2
 8011406:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801140e:	f300 8272 	bgt.w	80118f6 <_dtoa_r+0x8b6>
 8011412:	eeb1 7b47 	vneg.f64	d7, d7
 8011416:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801141e:	f100 8267 	bmi.w	80118f0 <_dtoa_r+0x8b0>
 8011422:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8011426:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801142a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801142c:	2a00      	cmp	r2, #0
 801142e:	f2c0 8129 	blt.w	8011684 <_dtoa_r+0x644>
 8011432:	f1bb 0f0e 	cmp.w	fp, #14
 8011436:	f300 8125 	bgt.w	8011684 <_dtoa_r+0x644>
 801143a:	4b90      	ldr	r3, [pc, #576]	; (801167c <_dtoa_r+0x63c>)
 801143c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011440:	ed93 6b00 	vldr	d6, [r3]
 8011444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011446:	2b00      	cmp	r3, #0
 8011448:	f280 80c3 	bge.w	80115d2 <_dtoa_r+0x592>
 801144c:	f1b9 0f00 	cmp.w	r9, #0
 8011450:	f300 80bf 	bgt.w	80115d2 <_dtoa_r+0x592>
 8011454:	f040 824c 	bne.w	80118f0 <_dtoa_r+0x8b0>
 8011458:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801145c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011460:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011464:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801146c:	464c      	mov	r4, r9
 801146e:	464f      	mov	r7, r9
 8011470:	f280 8222 	bge.w	80118b8 <_dtoa_r+0x878>
 8011474:	f8dd 8000 	ldr.w	r8, [sp]
 8011478:	2331      	movs	r3, #49	; 0x31
 801147a:	f808 3b01 	strb.w	r3, [r8], #1
 801147e:	f10b 0b01 	add.w	fp, fp, #1
 8011482:	e21e      	b.n	80118c2 <_dtoa_r+0x882>
 8011484:	2202      	movs	r2, #2
 8011486:	e77c      	b.n	8011382 <_dtoa_r+0x342>
 8011488:	07cc      	lsls	r4, r1, #31
 801148a:	d504      	bpl.n	8011496 <_dtoa_r+0x456>
 801148c:	ed90 6b00 	vldr	d6, [r0]
 8011490:	3201      	adds	r2, #1
 8011492:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011496:	1049      	asrs	r1, r1, #1
 8011498:	3008      	adds	r0, #8
 801149a:	e773      	b.n	8011384 <_dtoa_r+0x344>
 801149c:	d02e      	beq.n	80114fc <_dtoa_r+0x4bc>
 801149e:	f1cb 0100 	rsb	r1, fp, #0
 80114a2:	4a76      	ldr	r2, [pc, #472]	; (801167c <_dtoa_r+0x63c>)
 80114a4:	f001 000f 	and.w	r0, r1, #15
 80114a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80114ac:	ed92 7b00 	vldr	d7, [r2]
 80114b0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80114b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80114b8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80114bc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80114c0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80114c4:	486e      	ldr	r0, [pc, #440]	; (8011680 <_dtoa_r+0x640>)
 80114c6:	1109      	asrs	r1, r1, #4
 80114c8:	2400      	movs	r4, #0
 80114ca:	2202      	movs	r2, #2
 80114cc:	b939      	cbnz	r1, 80114de <_dtoa_r+0x49e>
 80114ce:	2c00      	cmp	r4, #0
 80114d0:	f43f af60 	beq.w	8011394 <_dtoa_r+0x354>
 80114d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80114d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114dc:	e75a      	b.n	8011394 <_dtoa_r+0x354>
 80114de:	07cf      	lsls	r7, r1, #31
 80114e0:	d509      	bpl.n	80114f6 <_dtoa_r+0x4b6>
 80114e2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80114e6:	ed90 7b00 	vldr	d7, [r0]
 80114ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80114ee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80114f2:	3201      	adds	r2, #1
 80114f4:	2401      	movs	r4, #1
 80114f6:	1049      	asrs	r1, r1, #1
 80114f8:	3008      	adds	r0, #8
 80114fa:	e7e7      	b.n	80114cc <_dtoa_r+0x48c>
 80114fc:	2202      	movs	r2, #2
 80114fe:	e749      	b.n	8011394 <_dtoa_r+0x354>
 8011500:	465f      	mov	r7, fp
 8011502:	4648      	mov	r0, r9
 8011504:	e765      	b.n	80113d2 <_dtoa_r+0x392>
 8011506:	ec42 1b17 	vmov	d7, r1, r2
 801150a:	4a5c      	ldr	r2, [pc, #368]	; (801167c <_dtoa_r+0x63c>)
 801150c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011510:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011514:	9a00      	ldr	r2, [sp, #0]
 8011516:	1814      	adds	r4, r2, r0
 8011518:	9a08      	ldr	r2, [sp, #32]
 801151a:	b352      	cbz	r2, 8011572 <_dtoa_r+0x532>
 801151c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011520:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011524:	f8dd 8000 	ldr.w	r8, [sp]
 8011528:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801152c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011530:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011534:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011538:	ee14 2a90 	vmov	r2, s9
 801153c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011540:	3230      	adds	r2, #48	; 0x30
 8011542:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011546:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801154e:	f808 2b01 	strb.w	r2, [r8], #1
 8011552:	d439      	bmi.n	80115c8 <_dtoa_r+0x588>
 8011554:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011558:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011560:	d472      	bmi.n	8011648 <_dtoa_r+0x608>
 8011562:	45a0      	cmp	r8, r4
 8011564:	f43f af5d 	beq.w	8011422 <_dtoa_r+0x3e2>
 8011568:	ee27 7b03 	vmul.f64	d7, d7, d3
 801156c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011570:	e7e0      	b.n	8011534 <_dtoa_r+0x4f4>
 8011572:	f8dd 8000 	ldr.w	r8, [sp]
 8011576:	ee27 7b04 	vmul.f64	d7, d7, d4
 801157a:	4621      	mov	r1, r4
 801157c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011580:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011584:	ee14 2a90 	vmov	r2, s9
 8011588:	3230      	adds	r2, #48	; 0x30
 801158a:	f808 2b01 	strb.w	r2, [r8], #1
 801158e:	45a0      	cmp	r8, r4
 8011590:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011594:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011598:	d118      	bne.n	80115cc <_dtoa_r+0x58c>
 801159a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801159e:	ee37 4b05 	vadd.f64	d4, d7, d5
 80115a2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80115a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115aa:	dc4d      	bgt.n	8011648 <_dtoa_r+0x608>
 80115ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 80115b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80115b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b8:	f57f af33 	bpl.w	8011422 <_dtoa_r+0x3e2>
 80115bc:	4688      	mov	r8, r1
 80115be:	3901      	subs	r1, #1
 80115c0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80115c4:	2b30      	cmp	r3, #48	; 0x30
 80115c6:	d0f9      	beq.n	80115bc <_dtoa_r+0x57c>
 80115c8:	46bb      	mov	fp, r7
 80115ca:	e02a      	b.n	8011622 <_dtoa_r+0x5e2>
 80115cc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80115d0:	e7d6      	b.n	8011580 <_dtoa_r+0x540>
 80115d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80115d6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80115da:	f8dd 8000 	ldr.w	r8, [sp]
 80115de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80115e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80115e6:	ee15 3a10 	vmov	r3, s10
 80115ea:	3330      	adds	r3, #48	; 0x30
 80115ec:	f808 3b01 	strb.w	r3, [r8], #1
 80115f0:	9b00      	ldr	r3, [sp, #0]
 80115f2:	eba8 0303 	sub.w	r3, r8, r3
 80115f6:	4599      	cmp	r9, r3
 80115f8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80115fc:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011600:	d133      	bne.n	801166a <_dtoa_r+0x62a>
 8011602:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011606:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801160a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801160e:	dc1a      	bgt.n	8011646 <_dtoa_r+0x606>
 8011610:	eeb4 7b46 	vcmp.f64	d7, d6
 8011614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011618:	d103      	bne.n	8011622 <_dtoa_r+0x5e2>
 801161a:	ee15 3a10 	vmov	r3, s10
 801161e:	07d9      	lsls	r1, r3, #31
 8011620:	d411      	bmi.n	8011646 <_dtoa_r+0x606>
 8011622:	4629      	mov	r1, r5
 8011624:	4630      	mov	r0, r6
 8011626:	f000 fd07 	bl	8012038 <_Bfree>
 801162a:	2300      	movs	r3, #0
 801162c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801162e:	f888 3000 	strb.w	r3, [r8]
 8011632:	f10b 0301 	add.w	r3, fp, #1
 8011636:	6013      	str	r3, [r2, #0]
 8011638:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801163a:	2b00      	cmp	r3, #0
 801163c:	f43f ad4d 	beq.w	80110da <_dtoa_r+0x9a>
 8011640:	f8c3 8000 	str.w	r8, [r3]
 8011644:	e549      	b.n	80110da <_dtoa_r+0x9a>
 8011646:	465f      	mov	r7, fp
 8011648:	4643      	mov	r3, r8
 801164a:	4698      	mov	r8, r3
 801164c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011650:	2a39      	cmp	r2, #57	; 0x39
 8011652:	d106      	bne.n	8011662 <_dtoa_r+0x622>
 8011654:	9a00      	ldr	r2, [sp, #0]
 8011656:	429a      	cmp	r2, r3
 8011658:	d1f7      	bne.n	801164a <_dtoa_r+0x60a>
 801165a:	9900      	ldr	r1, [sp, #0]
 801165c:	2230      	movs	r2, #48	; 0x30
 801165e:	3701      	adds	r7, #1
 8011660:	700a      	strb	r2, [r1, #0]
 8011662:	781a      	ldrb	r2, [r3, #0]
 8011664:	3201      	adds	r2, #1
 8011666:	701a      	strb	r2, [r3, #0]
 8011668:	e7ae      	b.n	80115c8 <_dtoa_r+0x588>
 801166a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801166e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011676:	d1b2      	bne.n	80115de <_dtoa_r+0x59e>
 8011678:	e7d3      	b.n	8011622 <_dtoa_r+0x5e2>
 801167a:	bf00      	nop
 801167c:	08013970 	.word	0x08013970
 8011680:	08013948 	.word	0x08013948
 8011684:	9908      	ldr	r1, [sp, #32]
 8011686:	2900      	cmp	r1, #0
 8011688:	f000 80d1 	beq.w	801182e <_dtoa_r+0x7ee>
 801168c:	9907      	ldr	r1, [sp, #28]
 801168e:	2901      	cmp	r1, #1
 8011690:	f300 80b4 	bgt.w	80117fc <_dtoa_r+0x7bc>
 8011694:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011696:	2900      	cmp	r1, #0
 8011698:	f000 80ac 	beq.w	80117f4 <_dtoa_r+0x7b4>
 801169c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80116a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80116a4:	461c      	mov	r4, r3
 80116a6:	930a      	str	r3, [sp, #40]	; 0x28
 80116a8:	9b05      	ldr	r3, [sp, #20]
 80116aa:	4413      	add	r3, r2
 80116ac:	9305      	str	r3, [sp, #20]
 80116ae:	9b06      	ldr	r3, [sp, #24]
 80116b0:	2101      	movs	r1, #1
 80116b2:	4413      	add	r3, r2
 80116b4:	4630      	mov	r0, r6
 80116b6:	9306      	str	r3, [sp, #24]
 80116b8:	f000 fd7a 	bl	80121b0 <__i2b>
 80116bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116be:	4607      	mov	r7, r0
 80116c0:	f1b8 0f00 	cmp.w	r8, #0
 80116c4:	dd0d      	ble.n	80116e2 <_dtoa_r+0x6a2>
 80116c6:	9a06      	ldr	r2, [sp, #24]
 80116c8:	2a00      	cmp	r2, #0
 80116ca:	dd0a      	ble.n	80116e2 <_dtoa_r+0x6a2>
 80116cc:	4542      	cmp	r2, r8
 80116ce:	9905      	ldr	r1, [sp, #20]
 80116d0:	bfa8      	it	ge
 80116d2:	4642      	movge	r2, r8
 80116d4:	1a89      	subs	r1, r1, r2
 80116d6:	9105      	str	r1, [sp, #20]
 80116d8:	9906      	ldr	r1, [sp, #24]
 80116da:	eba8 0802 	sub.w	r8, r8, r2
 80116de:	1a8a      	subs	r2, r1, r2
 80116e0:	9206      	str	r2, [sp, #24]
 80116e2:	b303      	cbz	r3, 8011726 <_dtoa_r+0x6e6>
 80116e4:	9a08      	ldr	r2, [sp, #32]
 80116e6:	2a00      	cmp	r2, #0
 80116e8:	f000 80a6 	beq.w	8011838 <_dtoa_r+0x7f8>
 80116ec:	2c00      	cmp	r4, #0
 80116ee:	dd13      	ble.n	8011718 <_dtoa_r+0x6d8>
 80116f0:	4639      	mov	r1, r7
 80116f2:	4622      	mov	r2, r4
 80116f4:	4630      	mov	r0, r6
 80116f6:	930c      	str	r3, [sp, #48]	; 0x30
 80116f8:	f000 fe16 	bl	8012328 <__pow5mult>
 80116fc:	462a      	mov	r2, r5
 80116fe:	4601      	mov	r1, r0
 8011700:	4607      	mov	r7, r0
 8011702:	4630      	mov	r0, r6
 8011704:	f000 fd6a 	bl	80121dc <__multiply>
 8011708:	4629      	mov	r1, r5
 801170a:	900a      	str	r0, [sp, #40]	; 0x28
 801170c:	4630      	mov	r0, r6
 801170e:	f000 fc93 	bl	8012038 <_Bfree>
 8011712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011716:	4615      	mov	r5, r2
 8011718:	1b1a      	subs	r2, r3, r4
 801171a:	d004      	beq.n	8011726 <_dtoa_r+0x6e6>
 801171c:	4629      	mov	r1, r5
 801171e:	4630      	mov	r0, r6
 8011720:	f000 fe02 	bl	8012328 <__pow5mult>
 8011724:	4605      	mov	r5, r0
 8011726:	2101      	movs	r1, #1
 8011728:	4630      	mov	r0, r6
 801172a:	f000 fd41 	bl	80121b0 <__i2b>
 801172e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011730:	2b00      	cmp	r3, #0
 8011732:	4604      	mov	r4, r0
 8011734:	f340 8082 	ble.w	801183c <_dtoa_r+0x7fc>
 8011738:	461a      	mov	r2, r3
 801173a:	4601      	mov	r1, r0
 801173c:	4630      	mov	r0, r6
 801173e:	f000 fdf3 	bl	8012328 <__pow5mult>
 8011742:	9b07      	ldr	r3, [sp, #28]
 8011744:	2b01      	cmp	r3, #1
 8011746:	4604      	mov	r4, r0
 8011748:	dd7b      	ble.n	8011842 <_dtoa_r+0x802>
 801174a:	2300      	movs	r3, #0
 801174c:	930a      	str	r3, [sp, #40]	; 0x28
 801174e:	6922      	ldr	r2, [r4, #16]
 8011750:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011754:	6910      	ldr	r0, [r2, #16]
 8011756:	f000 fcdb 	bl	8012110 <__hi0bits>
 801175a:	f1c0 0020 	rsb	r0, r0, #32
 801175e:	9b06      	ldr	r3, [sp, #24]
 8011760:	4418      	add	r0, r3
 8011762:	f010 001f 	ands.w	r0, r0, #31
 8011766:	f000 808d 	beq.w	8011884 <_dtoa_r+0x844>
 801176a:	f1c0 0220 	rsb	r2, r0, #32
 801176e:	2a04      	cmp	r2, #4
 8011770:	f340 8086 	ble.w	8011880 <_dtoa_r+0x840>
 8011774:	f1c0 001c 	rsb	r0, r0, #28
 8011778:	9b05      	ldr	r3, [sp, #20]
 801177a:	4403      	add	r3, r0
 801177c:	9305      	str	r3, [sp, #20]
 801177e:	9b06      	ldr	r3, [sp, #24]
 8011780:	4403      	add	r3, r0
 8011782:	4480      	add	r8, r0
 8011784:	9306      	str	r3, [sp, #24]
 8011786:	9b05      	ldr	r3, [sp, #20]
 8011788:	2b00      	cmp	r3, #0
 801178a:	dd05      	ble.n	8011798 <_dtoa_r+0x758>
 801178c:	4629      	mov	r1, r5
 801178e:	461a      	mov	r2, r3
 8011790:	4630      	mov	r0, r6
 8011792:	f000 fe23 	bl	80123dc <__lshift>
 8011796:	4605      	mov	r5, r0
 8011798:	9b06      	ldr	r3, [sp, #24]
 801179a:	2b00      	cmp	r3, #0
 801179c:	dd05      	ble.n	80117aa <_dtoa_r+0x76a>
 801179e:	4621      	mov	r1, r4
 80117a0:	461a      	mov	r2, r3
 80117a2:	4630      	mov	r0, r6
 80117a4:	f000 fe1a 	bl	80123dc <__lshift>
 80117a8:	4604      	mov	r4, r0
 80117aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d06b      	beq.n	8011888 <_dtoa_r+0x848>
 80117b0:	4621      	mov	r1, r4
 80117b2:	4628      	mov	r0, r5
 80117b4:	f000 fe7e 	bl	80124b4 <__mcmp>
 80117b8:	2800      	cmp	r0, #0
 80117ba:	da65      	bge.n	8011888 <_dtoa_r+0x848>
 80117bc:	2300      	movs	r3, #0
 80117be:	4629      	mov	r1, r5
 80117c0:	220a      	movs	r2, #10
 80117c2:	4630      	mov	r0, r6
 80117c4:	f000 fc5a 	bl	801207c <__multadd>
 80117c8:	9b08      	ldr	r3, [sp, #32]
 80117ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80117ce:	4605      	mov	r5, r0
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	f000 8192 	beq.w	8011afa <_dtoa_r+0xaba>
 80117d6:	4639      	mov	r1, r7
 80117d8:	2300      	movs	r3, #0
 80117da:	220a      	movs	r2, #10
 80117dc:	4630      	mov	r0, r6
 80117de:	f000 fc4d 	bl	801207c <__multadd>
 80117e2:	f1ba 0f00 	cmp.w	sl, #0
 80117e6:	4607      	mov	r7, r0
 80117e8:	f300 808e 	bgt.w	8011908 <_dtoa_r+0x8c8>
 80117ec:	9b07      	ldr	r3, [sp, #28]
 80117ee:	2b02      	cmp	r3, #2
 80117f0:	dc51      	bgt.n	8011896 <_dtoa_r+0x856>
 80117f2:	e089      	b.n	8011908 <_dtoa_r+0x8c8>
 80117f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80117f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80117fa:	e751      	b.n	80116a0 <_dtoa_r+0x660>
 80117fc:	f109 34ff 	add.w	r4, r9, #4294967295
 8011800:	42a3      	cmp	r3, r4
 8011802:	bfbf      	itttt	lt
 8011804:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8011806:	1ae3      	sublt	r3, r4, r3
 8011808:	18d2      	addlt	r2, r2, r3
 801180a:	4613      	movlt	r3, r2
 801180c:	bfb7      	itett	lt
 801180e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011810:	1b1c      	subge	r4, r3, r4
 8011812:	4623      	movlt	r3, r4
 8011814:	2400      	movlt	r4, #0
 8011816:	f1b9 0f00 	cmp.w	r9, #0
 801181a:	bfb5      	itete	lt
 801181c:	9a05      	ldrlt	r2, [sp, #20]
 801181e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8011822:	eba2 0809 	sublt.w	r8, r2, r9
 8011826:	464a      	movge	r2, r9
 8011828:	bfb8      	it	lt
 801182a:	2200      	movlt	r2, #0
 801182c:	e73b      	b.n	80116a6 <_dtoa_r+0x666>
 801182e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011832:	9f08      	ldr	r7, [sp, #32]
 8011834:	461c      	mov	r4, r3
 8011836:	e743      	b.n	80116c0 <_dtoa_r+0x680>
 8011838:	461a      	mov	r2, r3
 801183a:	e76f      	b.n	801171c <_dtoa_r+0x6dc>
 801183c:	9b07      	ldr	r3, [sp, #28]
 801183e:	2b01      	cmp	r3, #1
 8011840:	dc18      	bgt.n	8011874 <_dtoa_r+0x834>
 8011842:	9b02      	ldr	r3, [sp, #8]
 8011844:	b9b3      	cbnz	r3, 8011874 <_dtoa_r+0x834>
 8011846:	9b03      	ldr	r3, [sp, #12]
 8011848:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801184c:	b9a2      	cbnz	r2, 8011878 <_dtoa_r+0x838>
 801184e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011852:	0d12      	lsrs	r2, r2, #20
 8011854:	0512      	lsls	r2, r2, #20
 8011856:	b18a      	cbz	r2, 801187c <_dtoa_r+0x83c>
 8011858:	9b05      	ldr	r3, [sp, #20]
 801185a:	3301      	adds	r3, #1
 801185c:	9305      	str	r3, [sp, #20]
 801185e:	9b06      	ldr	r3, [sp, #24]
 8011860:	3301      	adds	r3, #1
 8011862:	9306      	str	r3, [sp, #24]
 8011864:	2301      	movs	r3, #1
 8011866:	930a      	str	r3, [sp, #40]	; 0x28
 8011868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801186a:	2b00      	cmp	r3, #0
 801186c:	f47f af6f 	bne.w	801174e <_dtoa_r+0x70e>
 8011870:	2001      	movs	r0, #1
 8011872:	e774      	b.n	801175e <_dtoa_r+0x71e>
 8011874:	2300      	movs	r3, #0
 8011876:	e7f6      	b.n	8011866 <_dtoa_r+0x826>
 8011878:	9b02      	ldr	r3, [sp, #8]
 801187a:	e7f4      	b.n	8011866 <_dtoa_r+0x826>
 801187c:	920a      	str	r2, [sp, #40]	; 0x28
 801187e:	e7f3      	b.n	8011868 <_dtoa_r+0x828>
 8011880:	d081      	beq.n	8011786 <_dtoa_r+0x746>
 8011882:	4610      	mov	r0, r2
 8011884:	301c      	adds	r0, #28
 8011886:	e777      	b.n	8011778 <_dtoa_r+0x738>
 8011888:	f1b9 0f00 	cmp.w	r9, #0
 801188c:	dc37      	bgt.n	80118fe <_dtoa_r+0x8be>
 801188e:	9b07      	ldr	r3, [sp, #28]
 8011890:	2b02      	cmp	r3, #2
 8011892:	dd34      	ble.n	80118fe <_dtoa_r+0x8be>
 8011894:	46ca      	mov	sl, r9
 8011896:	f1ba 0f00 	cmp.w	sl, #0
 801189a:	d10d      	bne.n	80118b8 <_dtoa_r+0x878>
 801189c:	4621      	mov	r1, r4
 801189e:	4653      	mov	r3, sl
 80118a0:	2205      	movs	r2, #5
 80118a2:	4630      	mov	r0, r6
 80118a4:	f000 fbea 	bl	801207c <__multadd>
 80118a8:	4601      	mov	r1, r0
 80118aa:	4604      	mov	r4, r0
 80118ac:	4628      	mov	r0, r5
 80118ae:	f000 fe01 	bl	80124b4 <__mcmp>
 80118b2:	2800      	cmp	r0, #0
 80118b4:	f73f adde 	bgt.w	8011474 <_dtoa_r+0x434>
 80118b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118ba:	f8dd 8000 	ldr.w	r8, [sp]
 80118be:	ea6f 0b03 	mvn.w	fp, r3
 80118c2:	f04f 0900 	mov.w	r9, #0
 80118c6:	4621      	mov	r1, r4
 80118c8:	4630      	mov	r0, r6
 80118ca:	f000 fbb5 	bl	8012038 <_Bfree>
 80118ce:	2f00      	cmp	r7, #0
 80118d0:	f43f aea7 	beq.w	8011622 <_dtoa_r+0x5e2>
 80118d4:	f1b9 0f00 	cmp.w	r9, #0
 80118d8:	d005      	beq.n	80118e6 <_dtoa_r+0x8a6>
 80118da:	45b9      	cmp	r9, r7
 80118dc:	d003      	beq.n	80118e6 <_dtoa_r+0x8a6>
 80118de:	4649      	mov	r1, r9
 80118e0:	4630      	mov	r0, r6
 80118e2:	f000 fba9 	bl	8012038 <_Bfree>
 80118e6:	4639      	mov	r1, r7
 80118e8:	4630      	mov	r0, r6
 80118ea:	f000 fba5 	bl	8012038 <_Bfree>
 80118ee:	e698      	b.n	8011622 <_dtoa_r+0x5e2>
 80118f0:	2400      	movs	r4, #0
 80118f2:	4627      	mov	r7, r4
 80118f4:	e7e0      	b.n	80118b8 <_dtoa_r+0x878>
 80118f6:	46bb      	mov	fp, r7
 80118f8:	4604      	mov	r4, r0
 80118fa:	4607      	mov	r7, r0
 80118fc:	e5ba      	b.n	8011474 <_dtoa_r+0x434>
 80118fe:	9b08      	ldr	r3, [sp, #32]
 8011900:	46ca      	mov	sl, r9
 8011902:	2b00      	cmp	r3, #0
 8011904:	f000 8100 	beq.w	8011b08 <_dtoa_r+0xac8>
 8011908:	f1b8 0f00 	cmp.w	r8, #0
 801190c:	dd05      	ble.n	801191a <_dtoa_r+0x8da>
 801190e:	4639      	mov	r1, r7
 8011910:	4642      	mov	r2, r8
 8011912:	4630      	mov	r0, r6
 8011914:	f000 fd62 	bl	80123dc <__lshift>
 8011918:	4607      	mov	r7, r0
 801191a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801191c:	2b00      	cmp	r3, #0
 801191e:	d05d      	beq.n	80119dc <_dtoa_r+0x99c>
 8011920:	6879      	ldr	r1, [r7, #4]
 8011922:	4630      	mov	r0, r6
 8011924:	f000 fb48 	bl	8011fb8 <_Balloc>
 8011928:	4680      	mov	r8, r0
 801192a:	b928      	cbnz	r0, 8011938 <_dtoa_r+0x8f8>
 801192c:	4b82      	ldr	r3, [pc, #520]	; (8011b38 <_dtoa_r+0xaf8>)
 801192e:	4602      	mov	r2, r0
 8011930:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011934:	f7ff bb9a 	b.w	801106c <_dtoa_r+0x2c>
 8011938:	693a      	ldr	r2, [r7, #16]
 801193a:	3202      	adds	r2, #2
 801193c:	0092      	lsls	r2, r2, #2
 801193e:	f107 010c 	add.w	r1, r7, #12
 8011942:	300c      	adds	r0, #12
 8011944:	f000 fb2a 	bl	8011f9c <memcpy>
 8011948:	2201      	movs	r2, #1
 801194a:	4641      	mov	r1, r8
 801194c:	4630      	mov	r0, r6
 801194e:	f000 fd45 	bl	80123dc <__lshift>
 8011952:	9b00      	ldr	r3, [sp, #0]
 8011954:	3301      	adds	r3, #1
 8011956:	9305      	str	r3, [sp, #20]
 8011958:	9b00      	ldr	r3, [sp, #0]
 801195a:	4453      	add	r3, sl
 801195c:	9309      	str	r3, [sp, #36]	; 0x24
 801195e:	9b02      	ldr	r3, [sp, #8]
 8011960:	f003 0301 	and.w	r3, r3, #1
 8011964:	46b9      	mov	r9, r7
 8011966:	9308      	str	r3, [sp, #32]
 8011968:	4607      	mov	r7, r0
 801196a:	9b05      	ldr	r3, [sp, #20]
 801196c:	4621      	mov	r1, r4
 801196e:	3b01      	subs	r3, #1
 8011970:	4628      	mov	r0, r5
 8011972:	9302      	str	r3, [sp, #8]
 8011974:	f7ff fad8 	bl	8010f28 <quorem>
 8011978:	4603      	mov	r3, r0
 801197a:	3330      	adds	r3, #48	; 0x30
 801197c:	9006      	str	r0, [sp, #24]
 801197e:	4649      	mov	r1, r9
 8011980:	4628      	mov	r0, r5
 8011982:	930a      	str	r3, [sp, #40]	; 0x28
 8011984:	f000 fd96 	bl	80124b4 <__mcmp>
 8011988:	463a      	mov	r2, r7
 801198a:	4682      	mov	sl, r0
 801198c:	4621      	mov	r1, r4
 801198e:	4630      	mov	r0, r6
 8011990:	f000 fdac 	bl	80124ec <__mdiff>
 8011994:	68c2      	ldr	r2, [r0, #12]
 8011996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011998:	4680      	mov	r8, r0
 801199a:	bb0a      	cbnz	r2, 80119e0 <_dtoa_r+0x9a0>
 801199c:	4601      	mov	r1, r0
 801199e:	4628      	mov	r0, r5
 80119a0:	f000 fd88 	bl	80124b4 <__mcmp>
 80119a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119a6:	4602      	mov	r2, r0
 80119a8:	4641      	mov	r1, r8
 80119aa:	4630      	mov	r0, r6
 80119ac:	920e      	str	r2, [sp, #56]	; 0x38
 80119ae:	930a      	str	r3, [sp, #40]	; 0x28
 80119b0:	f000 fb42 	bl	8012038 <_Bfree>
 80119b4:	9b07      	ldr	r3, [sp, #28]
 80119b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80119b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80119bc:	ea43 0102 	orr.w	r1, r3, r2
 80119c0:	9b08      	ldr	r3, [sp, #32]
 80119c2:	430b      	orrs	r3, r1
 80119c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119c6:	d10d      	bne.n	80119e4 <_dtoa_r+0x9a4>
 80119c8:	2b39      	cmp	r3, #57	; 0x39
 80119ca:	d029      	beq.n	8011a20 <_dtoa_r+0x9e0>
 80119cc:	f1ba 0f00 	cmp.w	sl, #0
 80119d0:	dd01      	ble.n	80119d6 <_dtoa_r+0x996>
 80119d2:	9b06      	ldr	r3, [sp, #24]
 80119d4:	3331      	adds	r3, #49	; 0x31
 80119d6:	9a02      	ldr	r2, [sp, #8]
 80119d8:	7013      	strb	r3, [r2, #0]
 80119da:	e774      	b.n	80118c6 <_dtoa_r+0x886>
 80119dc:	4638      	mov	r0, r7
 80119de:	e7b8      	b.n	8011952 <_dtoa_r+0x912>
 80119e0:	2201      	movs	r2, #1
 80119e2:	e7e1      	b.n	80119a8 <_dtoa_r+0x968>
 80119e4:	f1ba 0f00 	cmp.w	sl, #0
 80119e8:	db06      	blt.n	80119f8 <_dtoa_r+0x9b8>
 80119ea:	9907      	ldr	r1, [sp, #28]
 80119ec:	ea41 0a0a 	orr.w	sl, r1, sl
 80119f0:	9908      	ldr	r1, [sp, #32]
 80119f2:	ea5a 0101 	orrs.w	r1, sl, r1
 80119f6:	d120      	bne.n	8011a3a <_dtoa_r+0x9fa>
 80119f8:	2a00      	cmp	r2, #0
 80119fa:	ddec      	ble.n	80119d6 <_dtoa_r+0x996>
 80119fc:	4629      	mov	r1, r5
 80119fe:	2201      	movs	r2, #1
 8011a00:	4630      	mov	r0, r6
 8011a02:	9305      	str	r3, [sp, #20]
 8011a04:	f000 fcea 	bl	80123dc <__lshift>
 8011a08:	4621      	mov	r1, r4
 8011a0a:	4605      	mov	r5, r0
 8011a0c:	f000 fd52 	bl	80124b4 <__mcmp>
 8011a10:	2800      	cmp	r0, #0
 8011a12:	9b05      	ldr	r3, [sp, #20]
 8011a14:	dc02      	bgt.n	8011a1c <_dtoa_r+0x9dc>
 8011a16:	d1de      	bne.n	80119d6 <_dtoa_r+0x996>
 8011a18:	07da      	lsls	r2, r3, #31
 8011a1a:	d5dc      	bpl.n	80119d6 <_dtoa_r+0x996>
 8011a1c:	2b39      	cmp	r3, #57	; 0x39
 8011a1e:	d1d8      	bne.n	80119d2 <_dtoa_r+0x992>
 8011a20:	9a02      	ldr	r2, [sp, #8]
 8011a22:	2339      	movs	r3, #57	; 0x39
 8011a24:	7013      	strb	r3, [r2, #0]
 8011a26:	4643      	mov	r3, r8
 8011a28:	4698      	mov	r8, r3
 8011a2a:	3b01      	subs	r3, #1
 8011a2c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8011a30:	2a39      	cmp	r2, #57	; 0x39
 8011a32:	d051      	beq.n	8011ad8 <_dtoa_r+0xa98>
 8011a34:	3201      	adds	r2, #1
 8011a36:	701a      	strb	r2, [r3, #0]
 8011a38:	e745      	b.n	80118c6 <_dtoa_r+0x886>
 8011a3a:	2a00      	cmp	r2, #0
 8011a3c:	dd03      	ble.n	8011a46 <_dtoa_r+0xa06>
 8011a3e:	2b39      	cmp	r3, #57	; 0x39
 8011a40:	d0ee      	beq.n	8011a20 <_dtoa_r+0x9e0>
 8011a42:	3301      	adds	r3, #1
 8011a44:	e7c7      	b.n	80119d6 <_dtoa_r+0x996>
 8011a46:	9a05      	ldr	r2, [sp, #20]
 8011a48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a4a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011a4e:	428a      	cmp	r2, r1
 8011a50:	d02b      	beq.n	8011aaa <_dtoa_r+0xa6a>
 8011a52:	4629      	mov	r1, r5
 8011a54:	2300      	movs	r3, #0
 8011a56:	220a      	movs	r2, #10
 8011a58:	4630      	mov	r0, r6
 8011a5a:	f000 fb0f 	bl	801207c <__multadd>
 8011a5e:	45b9      	cmp	r9, r7
 8011a60:	4605      	mov	r5, r0
 8011a62:	f04f 0300 	mov.w	r3, #0
 8011a66:	f04f 020a 	mov.w	r2, #10
 8011a6a:	4649      	mov	r1, r9
 8011a6c:	4630      	mov	r0, r6
 8011a6e:	d107      	bne.n	8011a80 <_dtoa_r+0xa40>
 8011a70:	f000 fb04 	bl	801207c <__multadd>
 8011a74:	4681      	mov	r9, r0
 8011a76:	4607      	mov	r7, r0
 8011a78:	9b05      	ldr	r3, [sp, #20]
 8011a7a:	3301      	adds	r3, #1
 8011a7c:	9305      	str	r3, [sp, #20]
 8011a7e:	e774      	b.n	801196a <_dtoa_r+0x92a>
 8011a80:	f000 fafc 	bl	801207c <__multadd>
 8011a84:	4639      	mov	r1, r7
 8011a86:	4681      	mov	r9, r0
 8011a88:	2300      	movs	r3, #0
 8011a8a:	220a      	movs	r2, #10
 8011a8c:	4630      	mov	r0, r6
 8011a8e:	f000 faf5 	bl	801207c <__multadd>
 8011a92:	4607      	mov	r7, r0
 8011a94:	e7f0      	b.n	8011a78 <_dtoa_r+0xa38>
 8011a96:	f1ba 0f00 	cmp.w	sl, #0
 8011a9a:	9a00      	ldr	r2, [sp, #0]
 8011a9c:	bfcc      	ite	gt
 8011a9e:	46d0      	movgt	r8, sl
 8011aa0:	f04f 0801 	movle.w	r8, #1
 8011aa4:	4490      	add	r8, r2
 8011aa6:	f04f 0900 	mov.w	r9, #0
 8011aaa:	4629      	mov	r1, r5
 8011aac:	2201      	movs	r2, #1
 8011aae:	4630      	mov	r0, r6
 8011ab0:	9302      	str	r3, [sp, #8]
 8011ab2:	f000 fc93 	bl	80123dc <__lshift>
 8011ab6:	4621      	mov	r1, r4
 8011ab8:	4605      	mov	r5, r0
 8011aba:	f000 fcfb 	bl	80124b4 <__mcmp>
 8011abe:	2800      	cmp	r0, #0
 8011ac0:	dcb1      	bgt.n	8011a26 <_dtoa_r+0x9e6>
 8011ac2:	d102      	bne.n	8011aca <_dtoa_r+0xa8a>
 8011ac4:	9b02      	ldr	r3, [sp, #8]
 8011ac6:	07db      	lsls	r3, r3, #31
 8011ac8:	d4ad      	bmi.n	8011a26 <_dtoa_r+0x9e6>
 8011aca:	4643      	mov	r3, r8
 8011acc:	4698      	mov	r8, r3
 8011ace:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011ad2:	2a30      	cmp	r2, #48	; 0x30
 8011ad4:	d0fa      	beq.n	8011acc <_dtoa_r+0xa8c>
 8011ad6:	e6f6      	b.n	80118c6 <_dtoa_r+0x886>
 8011ad8:	9a00      	ldr	r2, [sp, #0]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d1a4      	bne.n	8011a28 <_dtoa_r+0x9e8>
 8011ade:	f10b 0b01 	add.w	fp, fp, #1
 8011ae2:	2331      	movs	r3, #49	; 0x31
 8011ae4:	e778      	b.n	80119d8 <_dtoa_r+0x998>
 8011ae6:	4b15      	ldr	r3, [pc, #84]	; (8011b3c <_dtoa_r+0xafc>)
 8011ae8:	f7ff bb12 	b.w	8011110 <_dtoa_r+0xd0>
 8011aec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	f47f aaee 	bne.w	80110d0 <_dtoa_r+0x90>
 8011af4:	4b12      	ldr	r3, [pc, #72]	; (8011b40 <_dtoa_r+0xb00>)
 8011af6:	f7ff bb0b 	b.w	8011110 <_dtoa_r+0xd0>
 8011afa:	f1ba 0f00 	cmp.w	sl, #0
 8011afe:	dc03      	bgt.n	8011b08 <_dtoa_r+0xac8>
 8011b00:	9b07      	ldr	r3, [sp, #28]
 8011b02:	2b02      	cmp	r3, #2
 8011b04:	f73f aec7 	bgt.w	8011896 <_dtoa_r+0x856>
 8011b08:	f8dd 8000 	ldr.w	r8, [sp]
 8011b0c:	4621      	mov	r1, r4
 8011b0e:	4628      	mov	r0, r5
 8011b10:	f7ff fa0a 	bl	8010f28 <quorem>
 8011b14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011b18:	f808 3b01 	strb.w	r3, [r8], #1
 8011b1c:	9a00      	ldr	r2, [sp, #0]
 8011b1e:	eba8 0202 	sub.w	r2, r8, r2
 8011b22:	4592      	cmp	sl, r2
 8011b24:	ddb7      	ble.n	8011a96 <_dtoa_r+0xa56>
 8011b26:	4629      	mov	r1, r5
 8011b28:	2300      	movs	r3, #0
 8011b2a:	220a      	movs	r2, #10
 8011b2c:	4630      	mov	r0, r6
 8011b2e:	f000 faa5 	bl	801207c <__multadd>
 8011b32:	4605      	mov	r5, r0
 8011b34:	e7ea      	b.n	8011b0c <_dtoa_r+0xacc>
 8011b36:	bf00      	nop
 8011b38:	08013877 	.word	0x08013877
 8011b3c:	080137d0 	.word	0x080137d0
 8011b40:	080137f4 	.word	0x080137f4

08011b44 <__sflush_r>:
 8011b44:	898a      	ldrh	r2, [r1, #12]
 8011b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b4a:	4605      	mov	r5, r0
 8011b4c:	0710      	lsls	r0, r2, #28
 8011b4e:	460c      	mov	r4, r1
 8011b50:	d458      	bmi.n	8011c04 <__sflush_r+0xc0>
 8011b52:	684b      	ldr	r3, [r1, #4]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	dc05      	bgt.n	8011b64 <__sflush_r+0x20>
 8011b58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	dc02      	bgt.n	8011b64 <__sflush_r+0x20>
 8011b5e:	2000      	movs	r0, #0
 8011b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b66:	2e00      	cmp	r6, #0
 8011b68:	d0f9      	beq.n	8011b5e <__sflush_r+0x1a>
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011b70:	682f      	ldr	r7, [r5, #0]
 8011b72:	602b      	str	r3, [r5, #0]
 8011b74:	d032      	beq.n	8011bdc <__sflush_r+0x98>
 8011b76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011b78:	89a3      	ldrh	r3, [r4, #12]
 8011b7a:	075a      	lsls	r2, r3, #29
 8011b7c:	d505      	bpl.n	8011b8a <__sflush_r+0x46>
 8011b7e:	6863      	ldr	r3, [r4, #4]
 8011b80:	1ac0      	subs	r0, r0, r3
 8011b82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011b84:	b10b      	cbz	r3, 8011b8a <__sflush_r+0x46>
 8011b86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011b88:	1ac0      	subs	r0, r0, r3
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b90:	6a21      	ldr	r1, [r4, #32]
 8011b92:	4628      	mov	r0, r5
 8011b94:	47b0      	blx	r6
 8011b96:	1c43      	adds	r3, r0, #1
 8011b98:	89a3      	ldrh	r3, [r4, #12]
 8011b9a:	d106      	bne.n	8011baa <__sflush_r+0x66>
 8011b9c:	6829      	ldr	r1, [r5, #0]
 8011b9e:	291d      	cmp	r1, #29
 8011ba0:	d82c      	bhi.n	8011bfc <__sflush_r+0xb8>
 8011ba2:	4a2a      	ldr	r2, [pc, #168]	; (8011c4c <__sflush_r+0x108>)
 8011ba4:	40ca      	lsrs	r2, r1
 8011ba6:	07d6      	lsls	r6, r2, #31
 8011ba8:	d528      	bpl.n	8011bfc <__sflush_r+0xb8>
 8011baa:	2200      	movs	r2, #0
 8011bac:	6062      	str	r2, [r4, #4]
 8011bae:	04d9      	lsls	r1, r3, #19
 8011bb0:	6922      	ldr	r2, [r4, #16]
 8011bb2:	6022      	str	r2, [r4, #0]
 8011bb4:	d504      	bpl.n	8011bc0 <__sflush_r+0x7c>
 8011bb6:	1c42      	adds	r2, r0, #1
 8011bb8:	d101      	bne.n	8011bbe <__sflush_r+0x7a>
 8011bba:	682b      	ldr	r3, [r5, #0]
 8011bbc:	b903      	cbnz	r3, 8011bc0 <__sflush_r+0x7c>
 8011bbe:	6560      	str	r0, [r4, #84]	; 0x54
 8011bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bc2:	602f      	str	r7, [r5, #0]
 8011bc4:	2900      	cmp	r1, #0
 8011bc6:	d0ca      	beq.n	8011b5e <__sflush_r+0x1a>
 8011bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011bcc:	4299      	cmp	r1, r3
 8011bce:	d002      	beq.n	8011bd6 <__sflush_r+0x92>
 8011bd0:	4628      	mov	r0, r5
 8011bd2:	f000 fd7f 	bl	80126d4 <_free_r>
 8011bd6:	2000      	movs	r0, #0
 8011bd8:	6360      	str	r0, [r4, #52]	; 0x34
 8011bda:	e7c1      	b.n	8011b60 <__sflush_r+0x1c>
 8011bdc:	6a21      	ldr	r1, [r4, #32]
 8011bde:	2301      	movs	r3, #1
 8011be0:	4628      	mov	r0, r5
 8011be2:	47b0      	blx	r6
 8011be4:	1c41      	adds	r1, r0, #1
 8011be6:	d1c7      	bne.n	8011b78 <__sflush_r+0x34>
 8011be8:	682b      	ldr	r3, [r5, #0]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d0c4      	beq.n	8011b78 <__sflush_r+0x34>
 8011bee:	2b1d      	cmp	r3, #29
 8011bf0:	d001      	beq.n	8011bf6 <__sflush_r+0xb2>
 8011bf2:	2b16      	cmp	r3, #22
 8011bf4:	d101      	bne.n	8011bfa <__sflush_r+0xb6>
 8011bf6:	602f      	str	r7, [r5, #0]
 8011bf8:	e7b1      	b.n	8011b5e <__sflush_r+0x1a>
 8011bfa:	89a3      	ldrh	r3, [r4, #12]
 8011bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c00:	81a3      	strh	r3, [r4, #12]
 8011c02:	e7ad      	b.n	8011b60 <__sflush_r+0x1c>
 8011c04:	690f      	ldr	r7, [r1, #16]
 8011c06:	2f00      	cmp	r7, #0
 8011c08:	d0a9      	beq.n	8011b5e <__sflush_r+0x1a>
 8011c0a:	0793      	lsls	r3, r2, #30
 8011c0c:	680e      	ldr	r6, [r1, #0]
 8011c0e:	bf08      	it	eq
 8011c10:	694b      	ldreq	r3, [r1, #20]
 8011c12:	600f      	str	r7, [r1, #0]
 8011c14:	bf18      	it	ne
 8011c16:	2300      	movne	r3, #0
 8011c18:	eba6 0807 	sub.w	r8, r6, r7
 8011c1c:	608b      	str	r3, [r1, #8]
 8011c1e:	f1b8 0f00 	cmp.w	r8, #0
 8011c22:	dd9c      	ble.n	8011b5e <__sflush_r+0x1a>
 8011c24:	6a21      	ldr	r1, [r4, #32]
 8011c26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c28:	4643      	mov	r3, r8
 8011c2a:	463a      	mov	r2, r7
 8011c2c:	4628      	mov	r0, r5
 8011c2e:	47b0      	blx	r6
 8011c30:	2800      	cmp	r0, #0
 8011c32:	dc06      	bgt.n	8011c42 <__sflush_r+0xfe>
 8011c34:	89a3      	ldrh	r3, [r4, #12]
 8011c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c3a:	81a3      	strh	r3, [r4, #12]
 8011c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c40:	e78e      	b.n	8011b60 <__sflush_r+0x1c>
 8011c42:	4407      	add	r7, r0
 8011c44:	eba8 0800 	sub.w	r8, r8, r0
 8011c48:	e7e9      	b.n	8011c1e <__sflush_r+0xda>
 8011c4a:	bf00      	nop
 8011c4c:	20400001 	.word	0x20400001

08011c50 <_fflush_r>:
 8011c50:	b538      	push	{r3, r4, r5, lr}
 8011c52:	690b      	ldr	r3, [r1, #16]
 8011c54:	4605      	mov	r5, r0
 8011c56:	460c      	mov	r4, r1
 8011c58:	b913      	cbnz	r3, 8011c60 <_fflush_r+0x10>
 8011c5a:	2500      	movs	r5, #0
 8011c5c:	4628      	mov	r0, r5
 8011c5e:	bd38      	pop	{r3, r4, r5, pc}
 8011c60:	b118      	cbz	r0, 8011c6a <_fflush_r+0x1a>
 8011c62:	6983      	ldr	r3, [r0, #24]
 8011c64:	b90b      	cbnz	r3, 8011c6a <_fflush_r+0x1a>
 8011c66:	f000 f887 	bl	8011d78 <__sinit>
 8011c6a:	4b14      	ldr	r3, [pc, #80]	; (8011cbc <_fflush_r+0x6c>)
 8011c6c:	429c      	cmp	r4, r3
 8011c6e:	d11b      	bne.n	8011ca8 <_fflush_r+0x58>
 8011c70:	686c      	ldr	r4, [r5, #4]
 8011c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d0ef      	beq.n	8011c5a <_fflush_r+0xa>
 8011c7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011c7c:	07d0      	lsls	r0, r2, #31
 8011c7e:	d404      	bmi.n	8011c8a <_fflush_r+0x3a>
 8011c80:	0599      	lsls	r1, r3, #22
 8011c82:	d402      	bmi.n	8011c8a <_fflush_r+0x3a>
 8011c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c86:	f000 f91a 	bl	8011ebe <__retarget_lock_acquire_recursive>
 8011c8a:	4628      	mov	r0, r5
 8011c8c:	4621      	mov	r1, r4
 8011c8e:	f7ff ff59 	bl	8011b44 <__sflush_r>
 8011c92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c94:	07da      	lsls	r2, r3, #31
 8011c96:	4605      	mov	r5, r0
 8011c98:	d4e0      	bmi.n	8011c5c <_fflush_r+0xc>
 8011c9a:	89a3      	ldrh	r3, [r4, #12]
 8011c9c:	059b      	lsls	r3, r3, #22
 8011c9e:	d4dd      	bmi.n	8011c5c <_fflush_r+0xc>
 8011ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ca2:	f000 f90d 	bl	8011ec0 <__retarget_lock_release_recursive>
 8011ca6:	e7d9      	b.n	8011c5c <_fflush_r+0xc>
 8011ca8:	4b05      	ldr	r3, [pc, #20]	; (8011cc0 <_fflush_r+0x70>)
 8011caa:	429c      	cmp	r4, r3
 8011cac:	d101      	bne.n	8011cb2 <_fflush_r+0x62>
 8011cae:	68ac      	ldr	r4, [r5, #8]
 8011cb0:	e7df      	b.n	8011c72 <_fflush_r+0x22>
 8011cb2:	4b04      	ldr	r3, [pc, #16]	; (8011cc4 <_fflush_r+0x74>)
 8011cb4:	429c      	cmp	r4, r3
 8011cb6:	bf08      	it	eq
 8011cb8:	68ec      	ldreq	r4, [r5, #12]
 8011cba:	e7da      	b.n	8011c72 <_fflush_r+0x22>
 8011cbc:	080138a8 	.word	0x080138a8
 8011cc0:	080138c8 	.word	0x080138c8
 8011cc4:	08013888 	.word	0x08013888

08011cc8 <std>:
 8011cc8:	2300      	movs	r3, #0
 8011cca:	b510      	push	{r4, lr}
 8011ccc:	4604      	mov	r4, r0
 8011cce:	e9c0 3300 	strd	r3, r3, [r0]
 8011cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011cd6:	6083      	str	r3, [r0, #8]
 8011cd8:	8181      	strh	r1, [r0, #12]
 8011cda:	6643      	str	r3, [r0, #100]	; 0x64
 8011cdc:	81c2      	strh	r2, [r0, #14]
 8011cde:	6183      	str	r3, [r0, #24]
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	2208      	movs	r2, #8
 8011ce4:	305c      	adds	r0, #92	; 0x5c
 8011ce6:	f7fe fb87 	bl	80103f8 <memset>
 8011cea:	4b05      	ldr	r3, [pc, #20]	; (8011d00 <std+0x38>)
 8011cec:	6263      	str	r3, [r4, #36]	; 0x24
 8011cee:	4b05      	ldr	r3, [pc, #20]	; (8011d04 <std+0x3c>)
 8011cf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8011cf2:	4b05      	ldr	r3, [pc, #20]	; (8011d08 <std+0x40>)
 8011cf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011cf6:	4b05      	ldr	r3, [pc, #20]	; (8011d0c <std+0x44>)
 8011cf8:	6224      	str	r4, [r4, #32]
 8011cfa:	6323      	str	r3, [r4, #48]	; 0x30
 8011cfc:	bd10      	pop	{r4, pc}
 8011cfe:	bf00      	nop
 8011d00:	08012afd 	.word	0x08012afd
 8011d04:	08012b1f 	.word	0x08012b1f
 8011d08:	08012b57 	.word	0x08012b57
 8011d0c:	08012b7b 	.word	0x08012b7b

08011d10 <_cleanup_r>:
 8011d10:	4901      	ldr	r1, [pc, #4]	; (8011d18 <_cleanup_r+0x8>)
 8011d12:	f000 b8af 	b.w	8011e74 <_fwalk_reent>
 8011d16:	bf00      	nop
 8011d18:	08011c51 	.word	0x08011c51

08011d1c <__sfmoreglue>:
 8011d1c:	b570      	push	{r4, r5, r6, lr}
 8011d1e:	1e4a      	subs	r2, r1, #1
 8011d20:	2568      	movs	r5, #104	; 0x68
 8011d22:	4355      	muls	r5, r2
 8011d24:	460e      	mov	r6, r1
 8011d26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011d2a:	f000 fd23 	bl	8012774 <_malloc_r>
 8011d2e:	4604      	mov	r4, r0
 8011d30:	b140      	cbz	r0, 8011d44 <__sfmoreglue+0x28>
 8011d32:	2100      	movs	r1, #0
 8011d34:	e9c0 1600 	strd	r1, r6, [r0]
 8011d38:	300c      	adds	r0, #12
 8011d3a:	60a0      	str	r0, [r4, #8]
 8011d3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011d40:	f7fe fb5a 	bl	80103f8 <memset>
 8011d44:	4620      	mov	r0, r4
 8011d46:	bd70      	pop	{r4, r5, r6, pc}

08011d48 <__sfp_lock_acquire>:
 8011d48:	4801      	ldr	r0, [pc, #4]	; (8011d50 <__sfp_lock_acquire+0x8>)
 8011d4a:	f000 b8b8 	b.w	8011ebe <__retarget_lock_acquire_recursive>
 8011d4e:	bf00      	nop
 8011d50:	2400070c 	.word	0x2400070c

08011d54 <__sfp_lock_release>:
 8011d54:	4801      	ldr	r0, [pc, #4]	; (8011d5c <__sfp_lock_release+0x8>)
 8011d56:	f000 b8b3 	b.w	8011ec0 <__retarget_lock_release_recursive>
 8011d5a:	bf00      	nop
 8011d5c:	2400070c 	.word	0x2400070c

08011d60 <__sinit_lock_acquire>:
 8011d60:	4801      	ldr	r0, [pc, #4]	; (8011d68 <__sinit_lock_acquire+0x8>)
 8011d62:	f000 b8ac 	b.w	8011ebe <__retarget_lock_acquire_recursive>
 8011d66:	bf00      	nop
 8011d68:	24000707 	.word	0x24000707

08011d6c <__sinit_lock_release>:
 8011d6c:	4801      	ldr	r0, [pc, #4]	; (8011d74 <__sinit_lock_release+0x8>)
 8011d6e:	f000 b8a7 	b.w	8011ec0 <__retarget_lock_release_recursive>
 8011d72:	bf00      	nop
 8011d74:	24000707 	.word	0x24000707

08011d78 <__sinit>:
 8011d78:	b510      	push	{r4, lr}
 8011d7a:	4604      	mov	r4, r0
 8011d7c:	f7ff fff0 	bl	8011d60 <__sinit_lock_acquire>
 8011d80:	69a3      	ldr	r3, [r4, #24]
 8011d82:	b11b      	cbz	r3, 8011d8c <__sinit+0x14>
 8011d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d88:	f7ff bff0 	b.w	8011d6c <__sinit_lock_release>
 8011d8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011d90:	6523      	str	r3, [r4, #80]	; 0x50
 8011d92:	4b13      	ldr	r3, [pc, #76]	; (8011de0 <__sinit+0x68>)
 8011d94:	4a13      	ldr	r2, [pc, #76]	; (8011de4 <__sinit+0x6c>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	62a2      	str	r2, [r4, #40]	; 0x28
 8011d9a:	42a3      	cmp	r3, r4
 8011d9c:	bf04      	itt	eq
 8011d9e:	2301      	moveq	r3, #1
 8011da0:	61a3      	streq	r3, [r4, #24]
 8011da2:	4620      	mov	r0, r4
 8011da4:	f000 f820 	bl	8011de8 <__sfp>
 8011da8:	6060      	str	r0, [r4, #4]
 8011daa:	4620      	mov	r0, r4
 8011dac:	f000 f81c 	bl	8011de8 <__sfp>
 8011db0:	60a0      	str	r0, [r4, #8]
 8011db2:	4620      	mov	r0, r4
 8011db4:	f000 f818 	bl	8011de8 <__sfp>
 8011db8:	2200      	movs	r2, #0
 8011dba:	60e0      	str	r0, [r4, #12]
 8011dbc:	2104      	movs	r1, #4
 8011dbe:	6860      	ldr	r0, [r4, #4]
 8011dc0:	f7ff ff82 	bl	8011cc8 <std>
 8011dc4:	68a0      	ldr	r0, [r4, #8]
 8011dc6:	2201      	movs	r2, #1
 8011dc8:	2109      	movs	r1, #9
 8011dca:	f7ff ff7d 	bl	8011cc8 <std>
 8011dce:	68e0      	ldr	r0, [r4, #12]
 8011dd0:	2202      	movs	r2, #2
 8011dd2:	2112      	movs	r1, #18
 8011dd4:	f7ff ff78 	bl	8011cc8 <std>
 8011dd8:	2301      	movs	r3, #1
 8011dda:	61a3      	str	r3, [r4, #24]
 8011ddc:	e7d2      	b.n	8011d84 <__sinit+0xc>
 8011dde:	bf00      	nop
 8011de0:	080137bc 	.word	0x080137bc
 8011de4:	08011d11 	.word	0x08011d11

08011de8 <__sfp>:
 8011de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dea:	4607      	mov	r7, r0
 8011dec:	f7ff ffac 	bl	8011d48 <__sfp_lock_acquire>
 8011df0:	4b1e      	ldr	r3, [pc, #120]	; (8011e6c <__sfp+0x84>)
 8011df2:	681e      	ldr	r6, [r3, #0]
 8011df4:	69b3      	ldr	r3, [r6, #24]
 8011df6:	b913      	cbnz	r3, 8011dfe <__sfp+0x16>
 8011df8:	4630      	mov	r0, r6
 8011dfa:	f7ff ffbd 	bl	8011d78 <__sinit>
 8011dfe:	3648      	adds	r6, #72	; 0x48
 8011e00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011e04:	3b01      	subs	r3, #1
 8011e06:	d503      	bpl.n	8011e10 <__sfp+0x28>
 8011e08:	6833      	ldr	r3, [r6, #0]
 8011e0a:	b30b      	cbz	r3, 8011e50 <__sfp+0x68>
 8011e0c:	6836      	ldr	r6, [r6, #0]
 8011e0e:	e7f7      	b.n	8011e00 <__sfp+0x18>
 8011e10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011e14:	b9d5      	cbnz	r5, 8011e4c <__sfp+0x64>
 8011e16:	4b16      	ldr	r3, [pc, #88]	; (8011e70 <__sfp+0x88>)
 8011e18:	60e3      	str	r3, [r4, #12]
 8011e1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011e1e:	6665      	str	r5, [r4, #100]	; 0x64
 8011e20:	f000 f84c 	bl	8011ebc <__retarget_lock_init_recursive>
 8011e24:	f7ff ff96 	bl	8011d54 <__sfp_lock_release>
 8011e28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011e2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011e30:	6025      	str	r5, [r4, #0]
 8011e32:	61a5      	str	r5, [r4, #24]
 8011e34:	2208      	movs	r2, #8
 8011e36:	4629      	mov	r1, r5
 8011e38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011e3c:	f7fe fadc 	bl	80103f8 <memset>
 8011e40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011e44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011e48:	4620      	mov	r0, r4
 8011e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e4c:	3468      	adds	r4, #104	; 0x68
 8011e4e:	e7d9      	b.n	8011e04 <__sfp+0x1c>
 8011e50:	2104      	movs	r1, #4
 8011e52:	4638      	mov	r0, r7
 8011e54:	f7ff ff62 	bl	8011d1c <__sfmoreglue>
 8011e58:	4604      	mov	r4, r0
 8011e5a:	6030      	str	r0, [r6, #0]
 8011e5c:	2800      	cmp	r0, #0
 8011e5e:	d1d5      	bne.n	8011e0c <__sfp+0x24>
 8011e60:	f7ff ff78 	bl	8011d54 <__sfp_lock_release>
 8011e64:	230c      	movs	r3, #12
 8011e66:	603b      	str	r3, [r7, #0]
 8011e68:	e7ee      	b.n	8011e48 <__sfp+0x60>
 8011e6a:	bf00      	nop
 8011e6c:	080137bc 	.word	0x080137bc
 8011e70:	ffff0001 	.word	0xffff0001

08011e74 <_fwalk_reent>:
 8011e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e78:	4606      	mov	r6, r0
 8011e7a:	4688      	mov	r8, r1
 8011e7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011e80:	2700      	movs	r7, #0
 8011e82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011e86:	f1b9 0901 	subs.w	r9, r9, #1
 8011e8a:	d505      	bpl.n	8011e98 <_fwalk_reent+0x24>
 8011e8c:	6824      	ldr	r4, [r4, #0]
 8011e8e:	2c00      	cmp	r4, #0
 8011e90:	d1f7      	bne.n	8011e82 <_fwalk_reent+0xe>
 8011e92:	4638      	mov	r0, r7
 8011e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e98:	89ab      	ldrh	r3, [r5, #12]
 8011e9a:	2b01      	cmp	r3, #1
 8011e9c:	d907      	bls.n	8011eae <_fwalk_reent+0x3a>
 8011e9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ea2:	3301      	adds	r3, #1
 8011ea4:	d003      	beq.n	8011eae <_fwalk_reent+0x3a>
 8011ea6:	4629      	mov	r1, r5
 8011ea8:	4630      	mov	r0, r6
 8011eaa:	47c0      	blx	r8
 8011eac:	4307      	orrs	r7, r0
 8011eae:	3568      	adds	r5, #104	; 0x68
 8011eb0:	e7e9      	b.n	8011e86 <_fwalk_reent+0x12>
	...

08011eb4 <_localeconv_r>:
 8011eb4:	4800      	ldr	r0, [pc, #0]	; (8011eb8 <_localeconv_r+0x4>)
 8011eb6:	4770      	bx	lr
 8011eb8:	2400017c 	.word	0x2400017c

08011ebc <__retarget_lock_init_recursive>:
 8011ebc:	4770      	bx	lr

08011ebe <__retarget_lock_acquire_recursive>:
 8011ebe:	4770      	bx	lr

08011ec0 <__retarget_lock_release_recursive>:
 8011ec0:	4770      	bx	lr

08011ec2 <__swhatbuf_r>:
 8011ec2:	b570      	push	{r4, r5, r6, lr}
 8011ec4:	460e      	mov	r6, r1
 8011ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eca:	2900      	cmp	r1, #0
 8011ecc:	b096      	sub	sp, #88	; 0x58
 8011ece:	4614      	mov	r4, r2
 8011ed0:	461d      	mov	r5, r3
 8011ed2:	da07      	bge.n	8011ee4 <__swhatbuf_r+0x22>
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	602b      	str	r3, [r5, #0]
 8011ed8:	89b3      	ldrh	r3, [r6, #12]
 8011eda:	061a      	lsls	r2, r3, #24
 8011edc:	d410      	bmi.n	8011f00 <__swhatbuf_r+0x3e>
 8011ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ee2:	e00e      	b.n	8011f02 <__swhatbuf_r+0x40>
 8011ee4:	466a      	mov	r2, sp
 8011ee6:	f000 fe9f 	bl	8012c28 <_fstat_r>
 8011eea:	2800      	cmp	r0, #0
 8011eec:	dbf2      	blt.n	8011ed4 <__swhatbuf_r+0x12>
 8011eee:	9a01      	ldr	r2, [sp, #4]
 8011ef0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011ef4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011ef8:	425a      	negs	r2, r3
 8011efa:	415a      	adcs	r2, r3
 8011efc:	602a      	str	r2, [r5, #0]
 8011efe:	e7ee      	b.n	8011ede <__swhatbuf_r+0x1c>
 8011f00:	2340      	movs	r3, #64	; 0x40
 8011f02:	2000      	movs	r0, #0
 8011f04:	6023      	str	r3, [r4, #0]
 8011f06:	b016      	add	sp, #88	; 0x58
 8011f08:	bd70      	pop	{r4, r5, r6, pc}
	...

08011f0c <__smakebuf_r>:
 8011f0c:	898b      	ldrh	r3, [r1, #12]
 8011f0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f10:	079d      	lsls	r5, r3, #30
 8011f12:	4606      	mov	r6, r0
 8011f14:	460c      	mov	r4, r1
 8011f16:	d507      	bpl.n	8011f28 <__smakebuf_r+0x1c>
 8011f18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011f1c:	6023      	str	r3, [r4, #0]
 8011f1e:	6123      	str	r3, [r4, #16]
 8011f20:	2301      	movs	r3, #1
 8011f22:	6163      	str	r3, [r4, #20]
 8011f24:	b002      	add	sp, #8
 8011f26:	bd70      	pop	{r4, r5, r6, pc}
 8011f28:	ab01      	add	r3, sp, #4
 8011f2a:	466a      	mov	r2, sp
 8011f2c:	f7ff ffc9 	bl	8011ec2 <__swhatbuf_r>
 8011f30:	9900      	ldr	r1, [sp, #0]
 8011f32:	4605      	mov	r5, r0
 8011f34:	4630      	mov	r0, r6
 8011f36:	f000 fc1d 	bl	8012774 <_malloc_r>
 8011f3a:	b948      	cbnz	r0, 8011f50 <__smakebuf_r+0x44>
 8011f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f40:	059a      	lsls	r2, r3, #22
 8011f42:	d4ef      	bmi.n	8011f24 <__smakebuf_r+0x18>
 8011f44:	f023 0303 	bic.w	r3, r3, #3
 8011f48:	f043 0302 	orr.w	r3, r3, #2
 8011f4c:	81a3      	strh	r3, [r4, #12]
 8011f4e:	e7e3      	b.n	8011f18 <__smakebuf_r+0xc>
 8011f50:	4b0d      	ldr	r3, [pc, #52]	; (8011f88 <__smakebuf_r+0x7c>)
 8011f52:	62b3      	str	r3, [r6, #40]	; 0x28
 8011f54:	89a3      	ldrh	r3, [r4, #12]
 8011f56:	6020      	str	r0, [r4, #0]
 8011f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f5c:	81a3      	strh	r3, [r4, #12]
 8011f5e:	9b00      	ldr	r3, [sp, #0]
 8011f60:	6163      	str	r3, [r4, #20]
 8011f62:	9b01      	ldr	r3, [sp, #4]
 8011f64:	6120      	str	r0, [r4, #16]
 8011f66:	b15b      	cbz	r3, 8011f80 <__smakebuf_r+0x74>
 8011f68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	f000 fe6d 	bl	8012c4c <_isatty_r>
 8011f72:	b128      	cbz	r0, 8011f80 <__smakebuf_r+0x74>
 8011f74:	89a3      	ldrh	r3, [r4, #12]
 8011f76:	f023 0303 	bic.w	r3, r3, #3
 8011f7a:	f043 0301 	orr.w	r3, r3, #1
 8011f7e:	81a3      	strh	r3, [r4, #12]
 8011f80:	89a0      	ldrh	r0, [r4, #12]
 8011f82:	4305      	orrs	r5, r0
 8011f84:	81a5      	strh	r5, [r4, #12]
 8011f86:	e7cd      	b.n	8011f24 <__smakebuf_r+0x18>
 8011f88:	08011d11 	.word	0x08011d11

08011f8c <malloc>:
 8011f8c:	4b02      	ldr	r3, [pc, #8]	; (8011f98 <malloc+0xc>)
 8011f8e:	4601      	mov	r1, r0
 8011f90:	6818      	ldr	r0, [r3, #0]
 8011f92:	f000 bbef 	b.w	8012774 <_malloc_r>
 8011f96:	bf00      	nop
 8011f98:	24000028 	.word	0x24000028

08011f9c <memcpy>:
 8011f9c:	440a      	add	r2, r1
 8011f9e:	4291      	cmp	r1, r2
 8011fa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011fa4:	d100      	bne.n	8011fa8 <memcpy+0xc>
 8011fa6:	4770      	bx	lr
 8011fa8:	b510      	push	{r4, lr}
 8011faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011fb2:	4291      	cmp	r1, r2
 8011fb4:	d1f9      	bne.n	8011faa <memcpy+0xe>
 8011fb6:	bd10      	pop	{r4, pc}

08011fb8 <_Balloc>:
 8011fb8:	b570      	push	{r4, r5, r6, lr}
 8011fba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011fbc:	4604      	mov	r4, r0
 8011fbe:	460d      	mov	r5, r1
 8011fc0:	b976      	cbnz	r6, 8011fe0 <_Balloc+0x28>
 8011fc2:	2010      	movs	r0, #16
 8011fc4:	f7ff ffe2 	bl	8011f8c <malloc>
 8011fc8:	4602      	mov	r2, r0
 8011fca:	6260      	str	r0, [r4, #36]	; 0x24
 8011fcc:	b920      	cbnz	r0, 8011fd8 <_Balloc+0x20>
 8011fce:	4b18      	ldr	r3, [pc, #96]	; (8012030 <_Balloc+0x78>)
 8011fd0:	4818      	ldr	r0, [pc, #96]	; (8012034 <_Balloc+0x7c>)
 8011fd2:	2166      	movs	r1, #102	; 0x66
 8011fd4:	f000 fde8 	bl	8012ba8 <__assert_func>
 8011fd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011fdc:	6006      	str	r6, [r0, #0]
 8011fde:	60c6      	str	r6, [r0, #12]
 8011fe0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011fe2:	68f3      	ldr	r3, [r6, #12]
 8011fe4:	b183      	cbz	r3, 8012008 <_Balloc+0x50>
 8011fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011fe8:	68db      	ldr	r3, [r3, #12]
 8011fea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011fee:	b9b8      	cbnz	r0, 8012020 <_Balloc+0x68>
 8011ff0:	2101      	movs	r1, #1
 8011ff2:	fa01 f605 	lsl.w	r6, r1, r5
 8011ff6:	1d72      	adds	r2, r6, #5
 8011ff8:	0092      	lsls	r2, r2, #2
 8011ffa:	4620      	mov	r0, r4
 8011ffc:	f000 fb5a 	bl	80126b4 <_calloc_r>
 8012000:	b160      	cbz	r0, 801201c <_Balloc+0x64>
 8012002:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012006:	e00e      	b.n	8012026 <_Balloc+0x6e>
 8012008:	2221      	movs	r2, #33	; 0x21
 801200a:	2104      	movs	r1, #4
 801200c:	4620      	mov	r0, r4
 801200e:	f000 fb51 	bl	80126b4 <_calloc_r>
 8012012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012014:	60f0      	str	r0, [r6, #12]
 8012016:	68db      	ldr	r3, [r3, #12]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d1e4      	bne.n	8011fe6 <_Balloc+0x2e>
 801201c:	2000      	movs	r0, #0
 801201e:	bd70      	pop	{r4, r5, r6, pc}
 8012020:	6802      	ldr	r2, [r0, #0]
 8012022:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012026:	2300      	movs	r3, #0
 8012028:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801202c:	e7f7      	b.n	801201e <_Balloc+0x66>
 801202e:	bf00      	nop
 8012030:	08013801 	.word	0x08013801
 8012034:	080138e8 	.word	0x080138e8

08012038 <_Bfree>:
 8012038:	b570      	push	{r4, r5, r6, lr}
 801203a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801203c:	4605      	mov	r5, r0
 801203e:	460c      	mov	r4, r1
 8012040:	b976      	cbnz	r6, 8012060 <_Bfree+0x28>
 8012042:	2010      	movs	r0, #16
 8012044:	f7ff ffa2 	bl	8011f8c <malloc>
 8012048:	4602      	mov	r2, r0
 801204a:	6268      	str	r0, [r5, #36]	; 0x24
 801204c:	b920      	cbnz	r0, 8012058 <_Bfree+0x20>
 801204e:	4b09      	ldr	r3, [pc, #36]	; (8012074 <_Bfree+0x3c>)
 8012050:	4809      	ldr	r0, [pc, #36]	; (8012078 <_Bfree+0x40>)
 8012052:	218a      	movs	r1, #138	; 0x8a
 8012054:	f000 fda8 	bl	8012ba8 <__assert_func>
 8012058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801205c:	6006      	str	r6, [r0, #0]
 801205e:	60c6      	str	r6, [r0, #12]
 8012060:	b13c      	cbz	r4, 8012072 <_Bfree+0x3a>
 8012062:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012064:	6862      	ldr	r2, [r4, #4]
 8012066:	68db      	ldr	r3, [r3, #12]
 8012068:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801206c:	6021      	str	r1, [r4, #0]
 801206e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012072:	bd70      	pop	{r4, r5, r6, pc}
 8012074:	08013801 	.word	0x08013801
 8012078:	080138e8 	.word	0x080138e8

0801207c <__multadd>:
 801207c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012080:	690e      	ldr	r6, [r1, #16]
 8012082:	4607      	mov	r7, r0
 8012084:	4698      	mov	r8, r3
 8012086:	460c      	mov	r4, r1
 8012088:	f101 0014 	add.w	r0, r1, #20
 801208c:	2300      	movs	r3, #0
 801208e:	6805      	ldr	r5, [r0, #0]
 8012090:	b2a9      	uxth	r1, r5
 8012092:	fb02 8101 	mla	r1, r2, r1, r8
 8012096:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801209a:	0c2d      	lsrs	r5, r5, #16
 801209c:	fb02 c505 	mla	r5, r2, r5, ip
 80120a0:	b289      	uxth	r1, r1
 80120a2:	3301      	adds	r3, #1
 80120a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80120a8:	429e      	cmp	r6, r3
 80120aa:	f840 1b04 	str.w	r1, [r0], #4
 80120ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80120b2:	dcec      	bgt.n	801208e <__multadd+0x12>
 80120b4:	f1b8 0f00 	cmp.w	r8, #0
 80120b8:	d022      	beq.n	8012100 <__multadd+0x84>
 80120ba:	68a3      	ldr	r3, [r4, #8]
 80120bc:	42b3      	cmp	r3, r6
 80120be:	dc19      	bgt.n	80120f4 <__multadd+0x78>
 80120c0:	6861      	ldr	r1, [r4, #4]
 80120c2:	4638      	mov	r0, r7
 80120c4:	3101      	adds	r1, #1
 80120c6:	f7ff ff77 	bl	8011fb8 <_Balloc>
 80120ca:	4605      	mov	r5, r0
 80120cc:	b928      	cbnz	r0, 80120da <__multadd+0x5e>
 80120ce:	4602      	mov	r2, r0
 80120d0:	4b0d      	ldr	r3, [pc, #52]	; (8012108 <__multadd+0x8c>)
 80120d2:	480e      	ldr	r0, [pc, #56]	; (801210c <__multadd+0x90>)
 80120d4:	21b5      	movs	r1, #181	; 0xb5
 80120d6:	f000 fd67 	bl	8012ba8 <__assert_func>
 80120da:	6922      	ldr	r2, [r4, #16]
 80120dc:	3202      	adds	r2, #2
 80120de:	f104 010c 	add.w	r1, r4, #12
 80120e2:	0092      	lsls	r2, r2, #2
 80120e4:	300c      	adds	r0, #12
 80120e6:	f7ff ff59 	bl	8011f9c <memcpy>
 80120ea:	4621      	mov	r1, r4
 80120ec:	4638      	mov	r0, r7
 80120ee:	f7ff ffa3 	bl	8012038 <_Bfree>
 80120f2:	462c      	mov	r4, r5
 80120f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80120f8:	3601      	adds	r6, #1
 80120fa:	f8c3 8014 	str.w	r8, [r3, #20]
 80120fe:	6126      	str	r6, [r4, #16]
 8012100:	4620      	mov	r0, r4
 8012102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012106:	bf00      	nop
 8012108:	08013877 	.word	0x08013877
 801210c:	080138e8 	.word	0x080138e8

08012110 <__hi0bits>:
 8012110:	0c03      	lsrs	r3, r0, #16
 8012112:	041b      	lsls	r3, r3, #16
 8012114:	b9d3      	cbnz	r3, 801214c <__hi0bits+0x3c>
 8012116:	0400      	lsls	r0, r0, #16
 8012118:	2310      	movs	r3, #16
 801211a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801211e:	bf04      	itt	eq
 8012120:	0200      	lsleq	r0, r0, #8
 8012122:	3308      	addeq	r3, #8
 8012124:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012128:	bf04      	itt	eq
 801212a:	0100      	lsleq	r0, r0, #4
 801212c:	3304      	addeq	r3, #4
 801212e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012132:	bf04      	itt	eq
 8012134:	0080      	lsleq	r0, r0, #2
 8012136:	3302      	addeq	r3, #2
 8012138:	2800      	cmp	r0, #0
 801213a:	db05      	blt.n	8012148 <__hi0bits+0x38>
 801213c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012140:	f103 0301 	add.w	r3, r3, #1
 8012144:	bf08      	it	eq
 8012146:	2320      	moveq	r3, #32
 8012148:	4618      	mov	r0, r3
 801214a:	4770      	bx	lr
 801214c:	2300      	movs	r3, #0
 801214e:	e7e4      	b.n	801211a <__hi0bits+0xa>

08012150 <__lo0bits>:
 8012150:	6803      	ldr	r3, [r0, #0]
 8012152:	f013 0207 	ands.w	r2, r3, #7
 8012156:	4601      	mov	r1, r0
 8012158:	d00b      	beq.n	8012172 <__lo0bits+0x22>
 801215a:	07da      	lsls	r2, r3, #31
 801215c:	d424      	bmi.n	80121a8 <__lo0bits+0x58>
 801215e:	0798      	lsls	r0, r3, #30
 8012160:	bf49      	itett	mi
 8012162:	085b      	lsrmi	r3, r3, #1
 8012164:	089b      	lsrpl	r3, r3, #2
 8012166:	2001      	movmi	r0, #1
 8012168:	600b      	strmi	r3, [r1, #0]
 801216a:	bf5c      	itt	pl
 801216c:	600b      	strpl	r3, [r1, #0]
 801216e:	2002      	movpl	r0, #2
 8012170:	4770      	bx	lr
 8012172:	b298      	uxth	r0, r3
 8012174:	b9b0      	cbnz	r0, 80121a4 <__lo0bits+0x54>
 8012176:	0c1b      	lsrs	r3, r3, #16
 8012178:	2010      	movs	r0, #16
 801217a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801217e:	bf04      	itt	eq
 8012180:	0a1b      	lsreq	r3, r3, #8
 8012182:	3008      	addeq	r0, #8
 8012184:	071a      	lsls	r2, r3, #28
 8012186:	bf04      	itt	eq
 8012188:	091b      	lsreq	r3, r3, #4
 801218a:	3004      	addeq	r0, #4
 801218c:	079a      	lsls	r2, r3, #30
 801218e:	bf04      	itt	eq
 8012190:	089b      	lsreq	r3, r3, #2
 8012192:	3002      	addeq	r0, #2
 8012194:	07da      	lsls	r2, r3, #31
 8012196:	d403      	bmi.n	80121a0 <__lo0bits+0x50>
 8012198:	085b      	lsrs	r3, r3, #1
 801219a:	f100 0001 	add.w	r0, r0, #1
 801219e:	d005      	beq.n	80121ac <__lo0bits+0x5c>
 80121a0:	600b      	str	r3, [r1, #0]
 80121a2:	4770      	bx	lr
 80121a4:	4610      	mov	r0, r2
 80121a6:	e7e8      	b.n	801217a <__lo0bits+0x2a>
 80121a8:	2000      	movs	r0, #0
 80121aa:	4770      	bx	lr
 80121ac:	2020      	movs	r0, #32
 80121ae:	4770      	bx	lr

080121b0 <__i2b>:
 80121b0:	b510      	push	{r4, lr}
 80121b2:	460c      	mov	r4, r1
 80121b4:	2101      	movs	r1, #1
 80121b6:	f7ff feff 	bl	8011fb8 <_Balloc>
 80121ba:	4602      	mov	r2, r0
 80121bc:	b928      	cbnz	r0, 80121ca <__i2b+0x1a>
 80121be:	4b05      	ldr	r3, [pc, #20]	; (80121d4 <__i2b+0x24>)
 80121c0:	4805      	ldr	r0, [pc, #20]	; (80121d8 <__i2b+0x28>)
 80121c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80121c6:	f000 fcef 	bl	8012ba8 <__assert_func>
 80121ca:	2301      	movs	r3, #1
 80121cc:	6144      	str	r4, [r0, #20]
 80121ce:	6103      	str	r3, [r0, #16]
 80121d0:	bd10      	pop	{r4, pc}
 80121d2:	bf00      	nop
 80121d4:	08013877 	.word	0x08013877
 80121d8:	080138e8 	.word	0x080138e8

080121dc <__multiply>:
 80121dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e0:	4614      	mov	r4, r2
 80121e2:	690a      	ldr	r2, [r1, #16]
 80121e4:	6923      	ldr	r3, [r4, #16]
 80121e6:	429a      	cmp	r2, r3
 80121e8:	bfb8      	it	lt
 80121ea:	460b      	movlt	r3, r1
 80121ec:	460d      	mov	r5, r1
 80121ee:	bfbc      	itt	lt
 80121f0:	4625      	movlt	r5, r4
 80121f2:	461c      	movlt	r4, r3
 80121f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80121f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80121fc:	68ab      	ldr	r3, [r5, #8]
 80121fe:	6869      	ldr	r1, [r5, #4]
 8012200:	eb0a 0709 	add.w	r7, sl, r9
 8012204:	42bb      	cmp	r3, r7
 8012206:	b085      	sub	sp, #20
 8012208:	bfb8      	it	lt
 801220a:	3101      	addlt	r1, #1
 801220c:	f7ff fed4 	bl	8011fb8 <_Balloc>
 8012210:	b930      	cbnz	r0, 8012220 <__multiply+0x44>
 8012212:	4602      	mov	r2, r0
 8012214:	4b42      	ldr	r3, [pc, #264]	; (8012320 <__multiply+0x144>)
 8012216:	4843      	ldr	r0, [pc, #268]	; (8012324 <__multiply+0x148>)
 8012218:	f240 115d 	movw	r1, #349	; 0x15d
 801221c:	f000 fcc4 	bl	8012ba8 <__assert_func>
 8012220:	f100 0614 	add.w	r6, r0, #20
 8012224:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012228:	4633      	mov	r3, r6
 801222a:	2200      	movs	r2, #0
 801222c:	4543      	cmp	r3, r8
 801222e:	d31e      	bcc.n	801226e <__multiply+0x92>
 8012230:	f105 0c14 	add.w	ip, r5, #20
 8012234:	f104 0314 	add.w	r3, r4, #20
 8012238:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801223c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012240:	9202      	str	r2, [sp, #8]
 8012242:	ebac 0205 	sub.w	r2, ip, r5
 8012246:	3a15      	subs	r2, #21
 8012248:	f022 0203 	bic.w	r2, r2, #3
 801224c:	3204      	adds	r2, #4
 801224e:	f105 0115 	add.w	r1, r5, #21
 8012252:	458c      	cmp	ip, r1
 8012254:	bf38      	it	cc
 8012256:	2204      	movcc	r2, #4
 8012258:	9201      	str	r2, [sp, #4]
 801225a:	9a02      	ldr	r2, [sp, #8]
 801225c:	9303      	str	r3, [sp, #12]
 801225e:	429a      	cmp	r2, r3
 8012260:	d808      	bhi.n	8012274 <__multiply+0x98>
 8012262:	2f00      	cmp	r7, #0
 8012264:	dc55      	bgt.n	8012312 <__multiply+0x136>
 8012266:	6107      	str	r7, [r0, #16]
 8012268:	b005      	add	sp, #20
 801226a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801226e:	f843 2b04 	str.w	r2, [r3], #4
 8012272:	e7db      	b.n	801222c <__multiply+0x50>
 8012274:	f8b3 a000 	ldrh.w	sl, [r3]
 8012278:	f1ba 0f00 	cmp.w	sl, #0
 801227c:	d020      	beq.n	80122c0 <__multiply+0xe4>
 801227e:	f105 0e14 	add.w	lr, r5, #20
 8012282:	46b1      	mov	r9, r6
 8012284:	2200      	movs	r2, #0
 8012286:	f85e 4b04 	ldr.w	r4, [lr], #4
 801228a:	f8d9 b000 	ldr.w	fp, [r9]
 801228e:	b2a1      	uxth	r1, r4
 8012290:	fa1f fb8b 	uxth.w	fp, fp
 8012294:	fb0a b101 	mla	r1, sl, r1, fp
 8012298:	4411      	add	r1, r2
 801229a:	f8d9 2000 	ldr.w	r2, [r9]
 801229e:	0c24      	lsrs	r4, r4, #16
 80122a0:	0c12      	lsrs	r2, r2, #16
 80122a2:	fb0a 2404 	mla	r4, sl, r4, r2
 80122a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80122aa:	b289      	uxth	r1, r1
 80122ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80122b0:	45f4      	cmp	ip, lr
 80122b2:	f849 1b04 	str.w	r1, [r9], #4
 80122b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80122ba:	d8e4      	bhi.n	8012286 <__multiply+0xaa>
 80122bc:	9901      	ldr	r1, [sp, #4]
 80122be:	5072      	str	r2, [r6, r1]
 80122c0:	9a03      	ldr	r2, [sp, #12]
 80122c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80122c6:	3304      	adds	r3, #4
 80122c8:	f1b9 0f00 	cmp.w	r9, #0
 80122cc:	d01f      	beq.n	801230e <__multiply+0x132>
 80122ce:	6834      	ldr	r4, [r6, #0]
 80122d0:	f105 0114 	add.w	r1, r5, #20
 80122d4:	46b6      	mov	lr, r6
 80122d6:	f04f 0a00 	mov.w	sl, #0
 80122da:	880a      	ldrh	r2, [r1, #0]
 80122dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80122e0:	fb09 b202 	mla	r2, r9, r2, fp
 80122e4:	4492      	add	sl, r2
 80122e6:	b2a4      	uxth	r4, r4
 80122e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80122ec:	f84e 4b04 	str.w	r4, [lr], #4
 80122f0:	f851 4b04 	ldr.w	r4, [r1], #4
 80122f4:	f8be 2000 	ldrh.w	r2, [lr]
 80122f8:	0c24      	lsrs	r4, r4, #16
 80122fa:	fb09 2404 	mla	r4, r9, r4, r2
 80122fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012302:	458c      	cmp	ip, r1
 8012304:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012308:	d8e7      	bhi.n	80122da <__multiply+0xfe>
 801230a:	9a01      	ldr	r2, [sp, #4]
 801230c:	50b4      	str	r4, [r6, r2]
 801230e:	3604      	adds	r6, #4
 8012310:	e7a3      	b.n	801225a <__multiply+0x7e>
 8012312:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012316:	2b00      	cmp	r3, #0
 8012318:	d1a5      	bne.n	8012266 <__multiply+0x8a>
 801231a:	3f01      	subs	r7, #1
 801231c:	e7a1      	b.n	8012262 <__multiply+0x86>
 801231e:	bf00      	nop
 8012320:	08013877 	.word	0x08013877
 8012324:	080138e8 	.word	0x080138e8

08012328 <__pow5mult>:
 8012328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801232c:	4615      	mov	r5, r2
 801232e:	f012 0203 	ands.w	r2, r2, #3
 8012332:	4606      	mov	r6, r0
 8012334:	460f      	mov	r7, r1
 8012336:	d007      	beq.n	8012348 <__pow5mult+0x20>
 8012338:	4c25      	ldr	r4, [pc, #148]	; (80123d0 <__pow5mult+0xa8>)
 801233a:	3a01      	subs	r2, #1
 801233c:	2300      	movs	r3, #0
 801233e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012342:	f7ff fe9b 	bl	801207c <__multadd>
 8012346:	4607      	mov	r7, r0
 8012348:	10ad      	asrs	r5, r5, #2
 801234a:	d03d      	beq.n	80123c8 <__pow5mult+0xa0>
 801234c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801234e:	b97c      	cbnz	r4, 8012370 <__pow5mult+0x48>
 8012350:	2010      	movs	r0, #16
 8012352:	f7ff fe1b 	bl	8011f8c <malloc>
 8012356:	4602      	mov	r2, r0
 8012358:	6270      	str	r0, [r6, #36]	; 0x24
 801235a:	b928      	cbnz	r0, 8012368 <__pow5mult+0x40>
 801235c:	4b1d      	ldr	r3, [pc, #116]	; (80123d4 <__pow5mult+0xac>)
 801235e:	481e      	ldr	r0, [pc, #120]	; (80123d8 <__pow5mult+0xb0>)
 8012360:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012364:	f000 fc20 	bl	8012ba8 <__assert_func>
 8012368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801236c:	6004      	str	r4, [r0, #0]
 801236e:	60c4      	str	r4, [r0, #12]
 8012370:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012378:	b94c      	cbnz	r4, 801238e <__pow5mult+0x66>
 801237a:	f240 2171 	movw	r1, #625	; 0x271
 801237e:	4630      	mov	r0, r6
 8012380:	f7ff ff16 	bl	80121b0 <__i2b>
 8012384:	2300      	movs	r3, #0
 8012386:	f8c8 0008 	str.w	r0, [r8, #8]
 801238a:	4604      	mov	r4, r0
 801238c:	6003      	str	r3, [r0, #0]
 801238e:	f04f 0900 	mov.w	r9, #0
 8012392:	07eb      	lsls	r3, r5, #31
 8012394:	d50a      	bpl.n	80123ac <__pow5mult+0x84>
 8012396:	4639      	mov	r1, r7
 8012398:	4622      	mov	r2, r4
 801239a:	4630      	mov	r0, r6
 801239c:	f7ff ff1e 	bl	80121dc <__multiply>
 80123a0:	4639      	mov	r1, r7
 80123a2:	4680      	mov	r8, r0
 80123a4:	4630      	mov	r0, r6
 80123a6:	f7ff fe47 	bl	8012038 <_Bfree>
 80123aa:	4647      	mov	r7, r8
 80123ac:	106d      	asrs	r5, r5, #1
 80123ae:	d00b      	beq.n	80123c8 <__pow5mult+0xa0>
 80123b0:	6820      	ldr	r0, [r4, #0]
 80123b2:	b938      	cbnz	r0, 80123c4 <__pow5mult+0x9c>
 80123b4:	4622      	mov	r2, r4
 80123b6:	4621      	mov	r1, r4
 80123b8:	4630      	mov	r0, r6
 80123ba:	f7ff ff0f 	bl	80121dc <__multiply>
 80123be:	6020      	str	r0, [r4, #0]
 80123c0:	f8c0 9000 	str.w	r9, [r0]
 80123c4:	4604      	mov	r4, r0
 80123c6:	e7e4      	b.n	8012392 <__pow5mult+0x6a>
 80123c8:	4638      	mov	r0, r7
 80123ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123ce:	bf00      	nop
 80123d0:	08013a38 	.word	0x08013a38
 80123d4:	08013801 	.word	0x08013801
 80123d8:	080138e8 	.word	0x080138e8

080123dc <__lshift>:
 80123dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123e0:	460c      	mov	r4, r1
 80123e2:	6849      	ldr	r1, [r1, #4]
 80123e4:	6923      	ldr	r3, [r4, #16]
 80123e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80123ea:	68a3      	ldr	r3, [r4, #8]
 80123ec:	4607      	mov	r7, r0
 80123ee:	4691      	mov	r9, r2
 80123f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80123f4:	f108 0601 	add.w	r6, r8, #1
 80123f8:	42b3      	cmp	r3, r6
 80123fa:	db0b      	blt.n	8012414 <__lshift+0x38>
 80123fc:	4638      	mov	r0, r7
 80123fe:	f7ff fddb 	bl	8011fb8 <_Balloc>
 8012402:	4605      	mov	r5, r0
 8012404:	b948      	cbnz	r0, 801241a <__lshift+0x3e>
 8012406:	4602      	mov	r2, r0
 8012408:	4b28      	ldr	r3, [pc, #160]	; (80124ac <__lshift+0xd0>)
 801240a:	4829      	ldr	r0, [pc, #164]	; (80124b0 <__lshift+0xd4>)
 801240c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012410:	f000 fbca 	bl	8012ba8 <__assert_func>
 8012414:	3101      	adds	r1, #1
 8012416:	005b      	lsls	r3, r3, #1
 8012418:	e7ee      	b.n	80123f8 <__lshift+0x1c>
 801241a:	2300      	movs	r3, #0
 801241c:	f100 0114 	add.w	r1, r0, #20
 8012420:	f100 0210 	add.w	r2, r0, #16
 8012424:	4618      	mov	r0, r3
 8012426:	4553      	cmp	r3, sl
 8012428:	db33      	blt.n	8012492 <__lshift+0xb6>
 801242a:	6920      	ldr	r0, [r4, #16]
 801242c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012430:	f104 0314 	add.w	r3, r4, #20
 8012434:	f019 091f 	ands.w	r9, r9, #31
 8012438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801243c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012440:	d02b      	beq.n	801249a <__lshift+0xbe>
 8012442:	f1c9 0e20 	rsb	lr, r9, #32
 8012446:	468a      	mov	sl, r1
 8012448:	2200      	movs	r2, #0
 801244a:	6818      	ldr	r0, [r3, #0]
 801244c:	fa00 f009 	lsl.w	r0, r0, r9
 8012450:	4302      	orrs	r2, r0
 8012452:	f84a 2b04 	str.w	r2, [sl], #4
 8012456:	f853 2b04 	ldr.w	r2, [r3], #4
 801245a:	459c      	cmp	ip, r3
 801245c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012460:	d8f3      	bhi.n	801244a <__lshift+0x6e>
 8012462:	ebac 0304 	sub.w	r3, ip, r4
 8012466:	3b15      	subs	r3, #21
 8012468:	f023 0303 	bic.w	r3, r3, #3
 801246c:	3304      	adds	r3, #4
 801246e:	f104 0015 	add.w	r0, r4, #21
 8012472:	4584      	cmp	ip, r0
 8012474:	bf38      	it	cc
 8012476:	2304      	movcc	r3, #4
 8012478:	50ca      	str	r2, [r1, r3]
 801247a:	b10a      	cbz	r2, 8012480 <__lshift+0xa4>
 801247c:	f108 0602 	add.w	r6, r8, #2
 8012480:	3e01      	subs	r6, #1
 8012482:	4638      	mov	r0, r7
 8012484:	612e      	str	r6, [r5, #16]
 8012486:	4621      	mov	r1, r4
 8012488:	f7ff fdd6 	bl	8012038 <_Bfree>
 801248c:	4628      	mov	r0, r5
 801248e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012492:	f842 0f04 	str.w	r0, [r2, #4]!
 8012496:	3301      	adds	r3, #1
 8012498:	e7c5      	b.n	8012426 <__lshift+0x4a>
 801249a:	3904      	subs	r1, #4
 801249c:	f853 2b04 	ldr.w	r2, [r3], #4
 80124a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80124a4:	459c      	cmp	ip, r3
 80124a6:	d8f9      	bhi.n	801249c <__lshift+0xc0>
 80124a8:	e7ea      	b.n	8012480 <__lshift+0xa4>
 80124aa:	bf00      	nop
 80124ac:	08013877 	.word	0x08013877
 80124b0:	080138e8 	.word	0x080138e8

080124b4 <__mcmp>:
 80124b4:	b530      	push	{r4, r5, lr}
 80124b6:	6902      	ldr	r2, [r0, #16]
 80124b8:	690c      	ldr	r4, [r1, #16]
 80124ba:	1b12      	subs	r2, r2, r4
 80124bc:	d10e      	bne.n	80124dc <__mcmp+0x28>
 80124be:	f100 0314 	add.w	r3, r0, #20
 80124c2:	3114      	adds	r1, #20
 80124c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80124c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80124cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80124d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80124d4:	42a5      	cmp	r5, r4
 80124d6:	d003      	beq.n	80124e0 <__mcmp+0x2c>
 80124d8:	d305      	bcc.n	80124e6 <__mcmp+0x32>
 80124da:	2201      	movs	r2, #1
 80124dc:	4610      	mov	r0, r2
 80124de:	bd30      	pop	{r4, r5, pc}
 80124e0:	4283      	cmp	r3, r0
 80124e2:	d3f3      	bcc.n	80124cc <__mcmp+0x18>
 80124e4:	e7fa      	b.n	80124dc <__mcmp+0x28>
 80124e6:	f04f 32ff 	mov.w	r2, #4294967295
 80124ea:	e7f7      	b.n	80124dc <__mcmp+0x28>

080124ec <__mdiff>:
 80124ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f0:	460c      	mov	r4, r1
 80124f2:	4606      	mov	r6, r0
 80124f4:	4611      	mov	r1, r2
 80124f6:	4620      	mov	r0, r4
 80124f8:	4617      	mov	r7, r2
 80124fa:	f7ff ffdb 	bl	80124b4 <__mcmp>
 80124fe:	1e05      	subs	r5, r0, #0
 8012500:	d110      	bne.n	8012524 <__mdiff+0x38>
 8012502:	4629      	mov	r1, r5
 8012504:	4630      	mov	r0, r6
 8012506:	f7ff fd57 	bl	8011fb8 <_Balloc>
 801250a:	b930      	cbnz	r0, 801251a <__mdiff+0x2e>
 801250c:	4b39      	ldr	r3, [pc, #228]	; (80125f4 <__mdiff+0x108>)
 801250e:	4602      	mov	r2, r0
 8012510:	f240 2132 	movw	r1, #562	; 0x232
 8012514:	4838      	ldr	r0, [pc, #224]	; (80125f8 <__mdiff+0x10c>)
 8012516:	f000 fb47 	bl	8012ba8 <__assert_func>
 801251a:	2301      	movs	r3, #1
 801251c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012524:	bfa4      	itt	ge
 8012526:	463b      	movge	r3, r7
 8012528:	4627      	movge	r7, r4
 801252a:	4630      	mov	r0, r6
 801252c:	6879      	ldr	r1, [r7, #4]
 801252e:	bfa6      	itte	ge
 8012530:	461c      	movge	r4, r3
 8012532:	2500      	movge	r5, #0
 8012534:	2501      	movlt	r5, #1
 8012536:	f7ff fd3f 	bl	8011fb8 <_Balloc>
 801253a:	b920      	cbnz	r0, 8012546 <__mdiff+0x5a>
 801253c:	4b2d      	ldr	r3, [pc, #180]	; (80125f4 <__mdiff+0x108>)
 801253e:	4602      	mov	r2, r0
 8012540:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012544:	e7e6      	b.n	8012514 <__mdiff+0x28>
 8012546:	693e      	ldr	r6, [r7, #16]
 8012548:	60c5      	str	r5, [r0, #12]
 801254a:	6925      	ldr	r5, [r4, #16]
 801254c:	f107 0114 	add.w	r1, r7, #20
 8012550:	f104 0914 	add.w	r9, r4, #20
 8012554:	f100 0e14 	add.w	lr, r0, #20
 8012558:	f107 0210 	add.w	r2, r7, #16
 801255c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012560:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012564:	46f2      	mov	sl, lr
 8012566:	2700      	movs	r7, #0
 8012568:	f859 3b04 	ldr.w	r3, [r9], #4
 801256c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012570:	fa1f f883 	uxth.w	r8, r3
 8012574:	fa17 f78b 	uxtah	r7, r7, fp
 8012578:	0c1b      	lsrs	r3, r3, #16
 801257a:	eba7 0808 	sub.w	r8, r7, r8
 801257e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012582:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012586:	fa1f f888 	uxth.w	r8, r8
 801258a:	141f      	asrs	r7, r3, #16
 801258c:	454d      	cmp	r5, r9
 801258e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012592:	f84a 3b04 	str.w	r3, [sl], #4
 8012596:	d8e7      	bhi.n	8012568 <__mdiff+0x7c>
 8012598:	1b2b      	subs	r3, r5, r4
 801259a:	3b15      	subs	r3, #21
 801259c:	f023 0303 	bic.w	r3, r3, #3
 80125a0:	3304      	adds	r3, #4
 80125a2:	3415      	adds	r4, #21
 80125a4:	42a5      	cmp	r5, r4
 80125a6:	bf38      	it	cc
 80125a8:	2304      	movcc	r3, #4
 80125aa:	4419      	add	r1, r3
 80125ac:	4473      	add	r3, lr
 80125ae:	469e      	mov	lr, r3
 80125b0:	460d      	mov	r5, r1
 80125b2:	4565      	cmp	r5, ip
 80125b4:	d30e      	bcc.n	80125d4 <__mdiff+0xe8>
 80125b6:	f10c 0203 	add.w	r2, ip, #3
 80125ba:	1a52      	subs	r2, r2, r1
 80125bc:	f022 0203 	bic.w	r2, r2, #3
 80125c0:	3903      	subs	r1, #3
 80125c2:	458c      	cmp	ip, r1
 80125c4:	bf38      	it	cc
 80125c6:	2200      	movcc	r2, #0
 80125c8:	441a      	add	r2, r3
 80125ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80125ce:	b17b      	cbz	r3, 80125f0 <__mdiff+0x104>
 80125d0:	6106      	str	r6, [r0, #16]
 80125d2:	e7a5      	b.n	8012520 <__mdiff+0x34>
 80125d4:	f855 8b04 	ldr.w	r8, [r5], #4
 80125d8:	fa17 f488 	uxtah	r4, r7, r8
 80125dc:	1422      	asrs	r2, r4, #16
 80125de:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80125e2:	b2a4      	uxth	r4, r4
 80125e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80125e8:	f84e 4b04 	str.w	r4, [lr], #4
 80125ec:	1417      	asrs	r7, r2, #16
 80125ee:	e7e0      	b.n	80125b2 <__mdiff+0xc6>
 80125f0:	3e01      	subs	r6, #1
 80125f2:	e7ea      	b.n	80125ca <__mdiff+0xde>
 80125f4:	08013877 	.word	0x08013877
 80125f8:	080138e8 	.word	0x080138e8

080125fc <__d2b>:
 80125fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012600:	4689      	mov	r9, r1
 8012602:	2101      	movs	r1, #1
 8012604:	ec57 6b10 	vmov	r6, r7, d0
 8012608:	4690      	mov	r8, r2
 801260a:	f7ff fcd5 	bl	8011fb8 <_Balloc>
 801260e:	4604      	mov	r4, r0
 8012610:	b930      	cbnz	r0, 8012620 <__d2b+0x24>
 8012612:	4602      	mov	r2, r0
 8012614:	4b25      	ldr	r3, [pc, #148]	; (80126ac <__d2b+0xb0>)
 8012616:	4826      	ldr	r0, [pc, #152]	; (80126b0 <__d2b+0xb4>)
 8012618:	f240 310a 	movw	r1, #778	; 0x30a
 801261c:	f000 fac4 	bl	8012ba8 <__assert_func>
 8012620:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012624:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012628:	bb35      	cbnz	r5, 8012678 <__d2b+0x7c>
 801262a:	2e00      	cmp	r6, #0
 801262c:	9301      	str	r3, [sp, #4]
 801262e:	d028      	beq.n	8012682 <__d2b+0x86>
 8012630:	4668      	mov	r0, sp
 8012632:	9600      	str	r6, [sp, #0]
 8012634:	f7ff fd8c 	bl	8012150 <__lo0bits>
 8012638:	9900      	ldr	r1, [sp, #0]
 801263a:	b300      	cbz	r0, 801267e <__d2b+0x82>
 801263c:	9a01      	ldr	r2, [sp, #4]
 801263e:	f1c0 0320 	rsb	r3, r0, #32
 8012642:	fa02 f303 	lsl.w	r3, r2, r3
 8012646:	430b      	orrs	r3, r1
 8012648:	40c2      	lsrs	r2, r0
 801264a:	6163      	str	r3, [r4, #20]
 801264c:	9201      	str	r2, [sp, #4]
 801264e:	9b01      	ldr	r3, [sp, #4]
 8012650:	61a3      	str	r3, [r4, #24]
 8012652:	2b00      	cmp	r3, #0
 8012654:	bf14      	ite	ne
 8012656:	2202      	movne	r2, #2
 8012658:	2201      	moveq	r2, #1
 801265a:	6122      	str	r2, [r4, #16]
 801265c:	b1d5      	cbz	r5, 8012694 <__d2b+0x98>
 801265e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012662:	4405      	add	r5, r0
 8012664:	f8c9 5000 	str.w	r5, [r9]
 8012668:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801266c:	f8c8 0000 	str.w	r0, [r8]
 8012670:	4620      	mov	r0, r4
 8012672:	b003      	add	sp, #12
 8012674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801267c:	e7d5      	b.n	801262a <__d2b+0x2e>
 801267e:	6161      	str	r1, [r4, #20]
 8012680:	e7e5      	b.n	801264e <__d2b+0x52>
 8012682:	a801      	add	r0, sp, #4
 8012684:	f7ff fd64 	bl	8012150 <__lo0bits>
 8012688:	9b01      	ldr	r3, [sp, #4]
 801268a:	6163      	str	r3, [r4, #20]
 801268c:	2201      	movs	r2, #1
 801268e:	6122      	str	r2, [r4, #16]
 8012690:	3020      	adds	r0, #32
 8012692:	e7e3      	b.n	801265c <__d2b+0x60>
 8012694:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012698:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801269c:	f8c9 0000 	str.w	r0, [r9]
 80126a0:	6918      	ldr	r0, [r3, #16]
 80126a2:	f7ff fd35 	bl	8012110 <__hi0bits>
 80126a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80126aa:	e7df      	b.n	801266c <__d2b+0x70>
 80126ac:	08013877 	.word	0x08013877
 80126b0:	080138e8 	.word	0x080138e8

080126b4 <_calloc_r>:
 80126b4:	b513      	push	{r0, r1, r4, lr}
 80126b6:	434a      	muls	r2, r1
 80126b8:	4611      	mov	r1, r2
 80126ba:	9201      	str	r2, [sp, #4]
 80126bc:	f000 f85a 	bl	8012774 <_malloc_r>
 80126c0:	4604      	mov	r4, r0
 80126c2:	b118      	cbz	r0, 80126cc <_calloc_r+0x18>
 80126c4:	9a01      	ldr	r2, [sp, #4]
 80126c6:	2100      	movs	r1, #0
 80126c8:	f7fd fe96 	bl	80103f8 <memset>
 80126cc:	4620      	mov	r0, r4
 80126ce:	b002      	add	sp, #8
 80126d0:	bd10      	pop	{r4, pc}
	...

080126d4 <_free_r>:
 80126d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80126d6:	2900      	cmp	r1, #0
 80126d8:	d048      	beq.n	801276c <_free_r+0x98>
 80126da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126de:	9001      	str	r0, [sp, #4]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	f1a1 0404 	sub.w	r4, r1, #4
 80126e6:	bfb8      	it	lt
 80126e8:	18e4      	addlt	r4, r4, r3
 80126ea:	f000 fae3 	bl	8012cb4 <__malloc_lock>
 80126ee:	4a20      	ldr	r2, [pc, #128]	; (8012770 <_free_r+0x9c>)
 80126f0:	9801      	ldr	r0, [sp, #4]
 80126f2:	6813      	ldr	r3, [r2, #0]
 80126f4:	4615      	mov	r5, r2
 80126f6:	b933      	cbnz	r3, 8012706 <_free_r+0x32>
 80126f8:	6063      	str	r3, [r4, #4]
 80126fa:	6014      	str	r4, [r2, #0]
 80126fc:	b003      	add	sp, #12
 80126fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012702:	f000 badd 	b.w	8012cc0 <__malloc_unlock>
 8012706:	42a3      	cmp	r3, r4
 8012708:	d90b      	bls.n	8012722 <_free_r+0x4e>
 801270a:	6821      	ldr	r1, [r4, #0]
 801270c:	1862      	adds	r2, r4, r1
 801270e:	4293      	cmp	r3, r2
 8012710:	bf04      	itt	eq
 8012712:	681a      	ldreq	r2, [r3, #0]
 8012714:	685b      	ldreq	r3, [r3, #4]
 8012716:	6063      	str	r3, [r4, #4]
 8012718:	bf04      	itt	eq
 801271a:	1852      	addeq	r2, r2, r1
 801271c:	6022      	streq	r2, [r4, #0]
 801271e:	602c      	str	r4, [r5, #0]
 8012720:	e7ec      	b.n	80126fc <_free_r+0x28>
 8012722:	461a      	mov	r2, r3
 8012724:	685b      	ldr	r3, [r3, #4]
 8012726:	b10b      	cbz	r3, 801272c <_free_r+0x58>
 8012728:	42a3      	cmp	r3, r4
 801272a:	d9fa      	bls.n	8012722 <_free_r+0x4e>
 801272c:	6811      	ldr	r1, [r2, #0]
 801272e:	1855      	adds	r5, r2, r1
 8012730:	42a5      	cmp	r5, r4
 8012732:	d10b      	bne.n	801274c <_free_r+0x78>
 8012734:	6824      	ldr	r4, [r4, #0]
 8012736:	4421      	add	r1, r4
 8012738:	1854      	adds	r4, r2, r1
 801273a:	42a3      	cmp	r3, r4
 801273c:	6011      	str	r1, [r2, #0]
 801273e:	d1dd      	bne.n	80126fc <_free_r+0x28>
 8012740:	681c      	ldr	r4, [r3, #0]
 8012742:	685b      	ldr	r3, [r3, #4]
 8012744:	6053      	str	r3, [r2, #4]
 8012746:	4421      	add	r1, r4
 8012748:	6011      	str	r1, [r2, #0]
 801274a:	e7d7      	b.n	80126fc <_free_r+0x28>
 801274c:	d902      	bls.n	8012754 <_free_r+0x80>
 801274e:	230c      	movs	r3, #12
 8012750:	6003      	str	r3, [r0, #0]
 8012752:	e7d3      	b.n	80126fc <_free_r+0x28>
 8012754:	6825      	ldr	r5, [r4, #0]
 8012756:	1961      	adds	r1, r4, r5
 8012758:	428b      	cmp	r3, r1
 801275a:	bf04      	itt	eq
 801275c:	6819      	ldreq	r1, [r3, #0]
 801275e:	685b      	ldreq	r3, [r3, #4]
 8012760:	6063      	str	r3, [r4, #4]
 8012762:	bf04      	itt	eq
 8012764:	1949      	addeq	r1, r1, r5
 8012766:	6021      	streq	r1, [r4, #0]
 8012768:	6054      	str	r4, [r2, #4]
 801276a:	e7c7      	b.n	80126fc <_free_r+0x28>
 801276c:	b003      	add	sp, #12
 801276e:	bd30      	pop	{r4, r5, pc}
 8012770:	24000244 	.word	0x24000244

08012774 <_malloc_r>:
 8012774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012776:	1ccd      	adds	r5, r1, #3
 8012778:	f025 0503 	bic.w	r5, r5, #3
 801277c:	3508      	adds	r5, #8
 801277e:	2d0c      	cmp	r5, #12
 8012780:	bf38      	it	cc
 8012782:	250c      	movcc	r5, #12
 8012784:	2d00      	cmp	r5, #0
 8012786:	4606      	mov	r6, r0
 8012788:	db01      	blt.n	801278e <_malloc_r+0x1a>
 801278a:	42a9      	cmp	r1, r5
 801278c:	d903      	bls.n	8012796 <_malloc_r+0x22>
 801278e:	230c      	movs	r3, #12
 8012790:	6033      	str	r3, [r6, #0]
 8012792:	2000      	movs	r0, #0
 8012794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012796:	f000 fa8d 	bl	8012cb4 <__malloc_lock>
 801279a:	4921      	ldr	r1, [pc, #132]	; (8012820 <_malloc_r+0xac>)
 801279c:	680a      	ldr	r2, [r1, #0]
 801279e:	4614      	mov	r4, r2
 80127a0:	b99c      	cbnz	r4, 80127ca <_malloc_r+0x56>
 80127a2:	4f20      	ldr	r7, [pc, #128]	; (8012824 <_malloc_r+0xb0>)
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	b923      	cbnz	r3, 80127b2 <_malloc_r+0x3e>
 80127a8:	4621      	mov	r1, r4
 80127aa:	4630      	mov	r0, r6
 80127ac:	f000 f996 	bl	8012adc <_sbrk_r>
 80127b0:	6038      	str	r0, [r7, #0]
 80127b2:	4629      	mov	r1, r5
 80127b4:	4630      	mov	r0, r6
 80127b6:	f000 f991 	bl	8012adc <_sbrk_r>
 80127ba:	1c43      	adds	r3, r0, #1
 80127bc:	d123      	bne.n	8012806 <_malloc_r+0x92>
 80127be:	230c      	movs	r3, #12
 80127c0:	6033      	str	r3, [r6, #0]
 80127c2:	4630      	mov	r0, r6
 80127c4:	f000 fa7c 	bl	8012cc0 <__malloc_unlock>
 80127c8:	e7e3      	b.n	8012792 <_malloc_r+0x1e>
 80127ca:	6823      	ldr	r3, [r4, #0]
 80127cc:	1b5b      	subs	r3, r3, r5
 80127ce:	d417      	bmi.n	8012800 <_malloc_r+0x8c>
 80127d0:	2b0b      	cmp	r3, #11
 80127d2:	d903      	bls.n	80127dc <_malloc_r+0x68>
 80127d4:	6023      	str	r3, [r4, #0]
 80127d6:	441c      	add	r4, r3
 80127d8:	6025      	str	r5, [r4, #0]
 80127da:	e004      	b.n	80127e6 <_malloc_r+0x72>
 80127dc:	6863      	ldr	r3, [r4, #4]
 80127de:	42a2      	cmp	r2, r4
 80127e0:	bf0c      	ite	eq
 80127e2:	600b      	streq	r3, [r1, #0]
 80127e4:	6053      	strne	r3, [r2, #4]
 80127e6:	4630      	mov	r0, r6
 80127e8:	f000 fa6a 	bl	8012cc0 <__malloc_unlock>
 80127ec:	f104 000b 	add.w	r0, r4, #11
 80127f0:	1d23      	adds	r3, r4, #4
 80127f2:	f020 0007 	bic.w	r0, r0, #7
 80127f6:	1ac2      	subs	r2, r0, r3
 80127f8:	d0cc      	beq.n	8012794 <_malloc_r+0x20>
 80127fa:	1a1b      	subs	r3, r3, r0
 80127fc:	50a3      	str	r3, [r4, r2]
 80127fe:	e7c9      	b.n	8012794 <_malloc_r+0x20>
 8012800:	4622      	mov	r2, r4
 8012802:	6864      	ldr	r4, [r4, #4]
 8012804:	e7cc      	b.n	80127a0 <_malloc_r+0x2c>
 8012806:	1cc4      	adds	r4, r0, #3
 8012808:	f024 0403 	bic.w	r4, r4, #3
 801280c:	42a0      	cmp	r0, r4
 801280e:	d0e3      	beq.n	80127d8 <_malloc_r+0x64>
 8012810:	1a21      	subs	r1, r4, r0
 8012812:	4630      	mov	r0, r6
 8012814:	f000 f962 	bl	8012adc <_sbrk_r>
 8012818:	3001      	adds	r0, #1
 801281a:	d1dd      	bne.n	80127d8 <_malloc_r+0x64>
 801281c:	e7cf      	b.n	80127be <_malloc_r+0x4a>
 801281e:	bf00      	nop
 8012820:	24000244 	.word	0x24000244
 8012824:	24000248 	.word	0x24000248

08012828 <__sfputc_r>:
 8012828:	6893      	ldr	r3, [r2, #8]
 801282a:	3b01      	subs	r3, #1
 801282c:	2b00      	cmp	r3, #0
 801282e:	b410      	push	{r4}
 8012830:	6093      	str	r3, [r2, #8]
 8012832:	da08      	bge.n	8012846 <__sfputc_r+0x1e>
 8012834:	6994      	ldr	r4, [r2, #24]
 8012836:	42a3      	cmp	r3, r4
 8012838:	db01      	blt.n	801283e <__sfputc_r+0x16>
 801283a:	290a      	cmp	r1, #10
 801283c:	d103      	bne.n	8012846 <__sfputc_r+0x1e>
 801283e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012842:	f7fe bab1 	b.w	8010da8 <__swbuf_r>
 8012846:	6813      	ldr	r3, [r2, #0]
 8012848:	1c58      	adds	r0, r3, #1
 801284a:	6010      	str	r0, [r2, #0]
 801284c:	7019      	strb	r1, [r3, #0]
 801284e:	4608      	mov	r0, r1
 8012850:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012854:	4770      	bx	lr

08012856 <__sfputs_r>:
 8012856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012858:	4606      	mov	r6, r0
 801285a:	460f      	mov	r7, r1
 801285c:	4614      	mov	r4, r2
 801285e:	18d5      	adds	r5, r2, r3
 8012860:	42ac      	cmp	r4, r5
 8012862:	d101      	bne.n	8012868 <__sfputs_r+0x12>
 8012864:	2000      	movs	r0, #0
 8012866:	e007      	b.n	8012878 <__sfputs_r+0x22>
 8012868:	f814 1b01 	ldrb.w	r1, [r4], #1
 801286c:	463a      	mov	r2, r7
 801286e:	4630      	mov	r0, r6
 8012870:	f7ff ffda 	bl	8012828 <__sfputc_r>
 8012874:	1c43      	adds	r3, r0, #1
 8012876:	d1f3      	bne.n	8012860 <__sfputs_r+0xa>
 8012878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801287c <_vfiprintf_r>:
 801287c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012880:	460d      	mov	r5, r1
 8012882:	b09d      	sub	sp, #116	; 0x74
 8012884:	4614      	mov	r4, r2
 8012886:	4698      	mov	r8, r3
 8012888:	4606      	mov	r6, r0
 801288a:	b118      	cbz	r0, 8012894 <_vfiprintf_r+0x18>
 801288c:	6983      	ldr	r3, [r0, #24]
 801288e:	b90b      	cbnz	r3, 8012894 <_vfiprintf_r+0x18>
 8012890:	f7ff fa72 	bl	8011d78 <__sinit>
 8012894:	4b89      	ldr	r3, [pc, #548]	; (8012abc <_vfiprintf_r+0x240>)
 8012896:	429d      	cmp	r5, r3
 8012898:	d11b      	bne.n	80128d2 <_vfiprintf_r+0x56>
 801289a:	6875      	ldr	r5, [r6, #4]
 801289c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801289e:	07d9      	lsls	r1, r3, #31
 80128a0:	d405      	bmi.n	80128ae <_vfiprintf_r+0x32>
 80128a2:	89ab      	ldrh	r3, [r5, #12]
 80128a4:	059a      	lsls	r2, r3, #22
 80128a6:	d402      	bmi.n	80128ae <_vfiprintf_r+0x32>
 80128a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128aa:	f7ff fb08 	bl	8011ebe <__retarget_lock_acquire_recursive>
 80128ae:	89ab      	ldrh	r3, [r5, #12]
 80128b0:	071b      	lsls	r3, r3, #28
 80128b2:	d501      	bpl.n	80128b8 <_vfiprintf_r+0x3c>
 80128b4:	692b      	ldr	r3, [r5, #16]
 80128b6:	b9eb      	cbnz	r3, 80128f4 <_vfiprintf_r+0x78>
 80128b8:	4629      	mov	r1, r5
 80128ba:	4630      	mov	r0, r6
 80128bc:	f7fe fac6 	bl	8010e4c <__swsetup_r>
 80128c0:	b1c0      	cbz	r0, 80128f4 <_vfiprintf_r+0x78>
 80128c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128c4:	07dc      	lsls	r4, r3, #31
 80128c6:	d50e      	bpl.n	80128e6 <_vfiprintf_r+0x6a>
 80128c8:	f04f 30ff 	mov.w	r0, #4294967295
 80128cc:	b01d      	add	sp, #116	; 0x74
 80128ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128d2:	4b7b      	ldr	r3, [pc, #492]	; (8012ac0 <_vfiprintf_r+0x244>)
 80128d4:	429d      	cmp	r5, r3
 80128d6:	d101      	bne.n	80128dc <_vfiprintf_r+0x60>
 80128d8:	68b5      	ldr	r5, [r6, #8]
 80128da:	e7df      	b.n	801289c <_vfiprintf_r+0x20>
 80128dc:	4b79      	ldr	r3, [pc, #484]	; (8012ac4 <_vfiprintf_r+0x248>)
 80128de:	429d      	cmp	r5, r3
 80128e0:	bf08      	it	eq
 80128e2:	68f5      	ldreq	r5, [r6, #12]
 80128e4:	e7da      	b.n	801289c <_vfiprintf_r+0x20>
 80128e6:	89ab      	ldrh	r3, [r5, #12]
 80128e8:	0598      	lsls	r0, r3, #22
 80128ea:	d4ed      	bmi.n	80128c8 <_vfiprintf_r+0x4c>
 80128ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128ee:	f7ff fae7 	bl	8011ec0 <__retarget_lock_release_recursive>
 80128f2:	e7e9      	b.n	80128c8 <_vfiprintf_r+0x4c>
 80128f4:	2300      	movs	r3, #0
 80128f6:	9309      	str	r3, [sp, #36]	; 0x24
 80128f8:	2320      	movs	r3, #32
 80128fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80128fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8012902:	2330      	movs	r3, #48	; 0x30
 8012904:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012ac8 <_vfiprintf_r+0x24c>
 8012908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801290c:	f04f 0901 	mov.w	r9, #1
 8012910:	4623      	mov	r3, r4
 8012912:	469a      	mov	sl, r3
 8012914:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012918:	b10a      	cbz	r2, 801291e <_vfiprintf_r+0xa2>
 801291a:	2a25      	cmp	r2, #37	; 0x25
 801291c:	d1f9      	bne.n	8012912 <_vfiprintf_r+0x96>
 801291e:	ebba 0b04 	subs.w	fp, sl, r4
 8012922:	d00b      	beq.n	801293c <_vfiprintf_r+0xc0>
 8012924:	465b      	mov	r3, fp
 8012926:	4622      	mov	r2, r4
 8012928:	4629      	mov	r1, r5
 801292a:	4630      	mov	r0, r6
 801292c:	f7ff ff93 	bl	8012856 <__sfputs_r>
 8012930:	3001      	adds	r0, #1
 8012932:	f000 80aa 	beq.w	8012a8a <_vfiprintf_r+0x20e>
 8012936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012938:	445a      	add	r2, fp
 801293a:	9209      	str	r2, [sp, #36]	; 0x24
 801293c:	f89a 3000 	ldrb.w	r3, [sl]
 8012940:	2b00      	cmp	r3, #0
 8012942:	f000 80a2 	beq.w	8012a8a <_vfiprintf_r+0x20e>
 8012946:	2300      	movs	r3, #0
 8012948:	f04f 32ff 	mov.w	r2, #4294967295
 801294c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012950:	f10a 0a01 	add.w	sl, sl, #1
 8012954:	9304      	str	r3, [sp, #16]
 8012956:	9307      	str	r3, [sp, #28]
 8012958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801295c:	931a      	str	r3, [sp, #104]	; 0x68
 801295e:	4654      	mov	r4, sl
 8012960:	2205      	movs	r2, #5
 8012962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012966:	4858      	ldr	r0, [pc, #352]	; (8012ac8 <_vfiprintf_r+0x24c>)
 8012968:	f7ed fcc2 	bl	80002f0 <memchr>
 801296c:	9a04      	ldr	r2, [sp, #16]
 801296e:	b9d8      	cbnz	r0, 80129a8 <_vfiprintf_r+0x12c>
 8012970:	06d1      	lsls	r1, r2, #27
 8012972:	bf44      	itt	mi
 8012974:	2320      	movmi	r3, #32
 8012976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801297a:	0713      	lsls	r3, r2, #28
 801297c:	bf44      	itt	mi
 801297e:	232b      	movmi	r3, #43	; 0x2b
 8012980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012984:	f89a 3000 	ldrb.w	r3, [sl]
 8012988:	2b2a      	cmp	r3, #42	; 0x2a
 801298a:	d015      	beq.n	80129b8 <_vfiprintf_r+0x13c>
 801298c:	9a07      	ldr	r2, [sp, #28]
 801298e:	4654      	mov	r4, sl
 8012990:	2000      	movs	r0, #0
 8012992:	f04f 0c0a 	mov.w	ip, #10
 8012996:	4621      	mov	r1, r4
 8012998:	f811 3b01 	ldrb.w	r3, [r1], #1
 801299c:	3b30      	subs	r3, #48	; 0x30
 801299e:	2b09      	cmp	r3, #9
 80129a0:	d94e      	bls.n	8012a40 <_vfiprintf_r+0x1c4>
 80129a2:	b1b0      	cbz	r0, 80129d2 <_vfiprintf_r+0x156>
 80129a4:	9207      	str	r2, [sp, #28]
 80129a6:	e014      	b.n	80129d2 <_vfiprintf_r+0x156>
 80129a8:	eba0 0308 	sub.w	r3, r0, r8
 80129ac:	fa09 f303 	lsl.w	r3, r9, r3
 80129b0:	4313      	orrs	r3, r2
 80129b2:	9304      	str	r3, [sp, #16]
 80129b4:	46a2      	mov	sl, r4
 80129b6:	e7d2      	b.n	801295e <_vfiprintf_r+0xe2>
 80129b8:	9b03      	ldr	r3, [sp, #12]
 80129ba:	1d19      	adds	r1, r3, #4
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	9103      	str	r1, [sp, #12]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	bfbb      	ittet	lt
 80129c4:	425b      	neglt	r3, r3
 80129c6:	f042 0202 	orrlt.w	r2, r2, #2
 80129ca:	9307      	strge	r3, [sp, #28]
 80129cc:	9307      	strlt	r3, [sp, #28]
 80129ce:	bfb8      	it	lt
 80129d0:	9204      	strlt	r2, [sp, #16]
 80129d2:	7823      	ldrb	r3, [r4, #0]
 80129d4:	2b2e      	cmp	r3, #46	; 0x2e
 80129d6:	d10c      	bne.n	80129f2 <_vfiprintf_r+0x176>
 80129d8:	7863      	ldrb	r3, [r4, #1]
 80129da:	2b2a      	cmp	r3, #42	; 0x2a
 80129dc:	d135      	bne.n	8012a4a <_vfiprintf_r+0x1ce>
 80129de:	9b03      	ldr	r3, [sp, #12]
 80129e0:	1d1a      	adds	r2, r3, #4
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	9203      	str	r2, [sp, #12]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	bfb8      	it	lt
 80129ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80129ee:	3402      	adds	r4, #2
 80129f0:	9305      	str	r3, [sp, #20]
 80129f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012ad8 <_vfiprintf_r+0x25c>
 80129f6:	7821      	ldrb	r1, [r4, #0]
 80129f8:	2203      	movs	r2, #3
 80129fa:	4650      	mov	r0, sl
 80129fc:	f7ed fc78 	bl	80002f0 <memchr>
 8012a00:	b140      	cbz	r0, 8012a14 <_vfiprintf_r+0x198>
 8012a02:	2340      	movs	r3, #64	; 0x40
 8012a04:	eba0 000a 	sub.w	r0, r0, sl
 8012a08:	fa03 f000 	lsl.w	r0, r3, r0
 8012a0c:	9b04      	ldr	r3, [sp, #16]
 8012a0e:	4303      	orrs	r3, r0
 8012a10:	3401      	adds	r4, #1
 8012a12:	9304      	str	r3, [sp, #16]
 8012a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a18:	482c      	ldr	r0, [pc, #176]	; (8012acc <_vfiprintf_r+0x250>)
 8012a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012a1e:	2206      	movs	r2, #6
 8012a20:	f7ed fc66 	bl	80002f0 <memchr>
 8012a24:	2800      	cmp	r0, #0
 8012a26:	d03f      	beq.n	8012aa8 <_vfiprintf_r+0x22c>
 8012a28:	4b29      	ldr	r3, [pc, #164]	; (8012ad0 <_vfiprintf_r+0x254>)
 8012a2a:	bb1b      	cbnz	r3, 8012a74 <_vfiprintf_r+0x1f8>
 8012a2c:	9b03      	ldr	r3, [sp, #12]
 8012a2e:	3307      	adds	r3, #7
 8012a30:	f023 0307 	bic.w	r3, r3, #7
 8012a34:	3308      	adds	r3, #8
 8012a36:	9303      	str	r3, [sp, #12]
 8012a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a3a:	443b      	add	r3, r7
 8012a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8012a3e:	e767      	b.n	8012910 <_vfiprintf_r+0x94>
 8012a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a44:	460c      	mov	r4, r1
 8012a46:	2001      	movs	r0, #1
 8012a48:	e7a5      	b.n	8012996 <_vfiprintf_r+0x11a>
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	3401      	adds	r4, #1
 8012a4e:	9305      	str	r3, [sp, #20]
 8012a50:	4619      	mov	r1, r3
 8012a52:	f04f 0c0a 	mov.w	ip, #10
 8012a56:	4620      	mov	r0, r4
 8012a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a5c:	3a30      	subs	r2, #48	; 0x30
 8012a5e:	2a09      	cmp	r2, #9
 8012a60:	d903      	bls.n	8012a6a <_vfiprintf_r+0x1ee>
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d0c5      	beq.n	80129f2 <_vfiprintf_r+0x176>
 8012a66:	9105      	str	r1, [sp, #20]
 8012a68:	e7c3      	b.n	80129f2 <_vfiprintf_r+0x176>
 8012a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a6e:	4604      	mov	r4, r0
 8012a70:	2301      	movs	r3, #1
 8012a72:	e7f0      	b.n	8012a56 <_vfiprintf_r+0x1da>
 8012a74:	ab03      	add	r3, sp, #12
 8012a76:	9300      	str	r3, [sp, #0]
 8012a78:	462a      	mov	r2, r5
 8012a7a:	4b16      	ldr	r3, [pc, #88]	; (8012ad4 <_vfiprintf_r+0x258>)
 8012a7c:	a904      	add	r1, sp, #16
 8012a7e:	4630      	mov	r0, r6
 8012a80:	f7fd fd52 	bl	8010528 <_printf_float>
 8012a84:	4607      	mov	r7, r0
 8012a86:	1c78      	adds	r0, r7, #1
 8012a88:	d1d6      	bne.n	8012a38 <_vfiprintf_r+0x1bc>
 8012a8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a8c:	07d9      	lsls	r1, r3, #31
 8012a8e:	d405      	bmi.n	8012a9c <_vfiprintf_r+0x220>
 8012a90:	89ab      	ldrh	r3, [r5, #12]
 8012a92:	059a      	lsls	r2, r3, #22
 8012a94:	d402      	bmi.n	8012a9c <_vfiprintf_r+0x220>
 8012a96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a98:	f7ff fa12 	bl	8011ec0 <__retarget_lock_release_recursive>
 8012a9c:	89ab      	ldrh	r3, [r5, #12]
 8012a9e:	065b      	lsls	r3, r3, #25
 8012aa0:	f53f af12 	bmi.w	80128c8 <_vfiprintf_r+0x4c>
 8012aa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012aa6:	e711      	b.n	80128cc <_vfiprintf_r+0x50>
 8012aa8:	ab03      	add	r3, sp, #12
 8012aaa:	9300      	str	r3, [sp, #0]
 8012aac:	462a      	mov	r2, r5
 8012aae:	4b09      	ldr	r3, [pc, #36]	; (8012ad4 <_vfiprintf_r+0x258>)
 8012ab0:	a904      	add	r1, sp, #16
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	f7fd ffc4 	bl	8010a40 <_printf_i>
 8012ab8:	e7e4      	b.n	8012a84 <_vfiprintf_r+0x208>
 8012aba:	bf00      	nop
 8012abc:	080138a8 	.word	0x080138a8
 8012ac0:	080138c8 	.word	0x080138c8
 8012ac4:	08013888 	.word	0x08013888
 8012ac8:	08013a44 	.word	0x08013a44
 8012acc:	08013a4e 	.word	0x08013a4e
 8012ad0:	08010529 	.word	0x08010529
 8012ad4:	08012857 	.word	0x08012857
 8012ad8:	08013a4a 	.word	0x08013a4a

08012adc <_sbrk_r>:
 8012adc:	b538      	push	{r3, r4, r5, lr}
 8012ade:	4d06      	ldr	r5, [pc, #24]	; (8012af8 <_sbrk_r+0x1c>)
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	4604      	mov	r4, r0
 8012ae4:	4608      	mov	r0, r1
 8012ae6:	602b      	str	r3, [r5, #0]
 8012ae8:	f7f1 fa22 	bl	8003f30 <_sbrk>
 8012aec:	1c43      	adds	r3, r0, #1
 8012aee:	d102      	bne.n	8012af6 <_sbrk_r+0x1a>
 8012af0:	682b      	ldr	r3, [r5, #0]
 8012af2:	b103      	cbz	r3, 8012af6 <_sbrk_r+0x1a>
 8012af4:	6023      	str	r3, [r4, #0]
 8012af6:	bd38      	pop	{r3, r4, r5, pc}
 8012af8:	24000710 	.word	0x24000710

08012afc <__sread>:
 8012afc:	b510      	push	{r4, lr}
 8012afe:	460c      	mov	r4, r1
 8012b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b04:	f000 f8e2 	bl	8012ccc <_read_r>
 8012b08:	2800      	cmp	r0, #0
 8012b0a:	bfab      	itete	ge
 8012b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8012b10:	181b      	addge	r3, r3, r0
 8012b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012b16:	bfac      	ite	ge
 8012b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8012b1a:	81a3      	strhlt	r3, [r4, #12]
 8012b1c:	bd10      	pop	{r4, pc}

08012b1e <__swrite>:
 8012b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b22:	461f      	mov	r7, r3
 8012b24:	898b      	ldrh	r3, [r1, #12]
 8012b26:	05db      	lsls	r3, r3, #23
 8012b28:	4605      	mov	r5, r0
 8012b2a:	460c      	mov	r4, r1
 8012b2c:	4616      	mov	r6, r2
 8012b2e:	d505      	bpl.n	8012b3c <__swrite+0x1e>
 8012b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b34:	2302      	movs	r3, #2
 8012b36:	2200      	movs	r2, #0
 8012b38:	f000 f898 	bl	8012c6c <_lseek_r>
 8012b3c:	89a3      	ldrh	r3, [r4, #12]
 8012b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012b46:	81a3      	strh	r3, [r4, #12]
 8012b48:	4632      	mov	r2, r6
 8012b4a:	463b      	mov	r3, r7
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b52:	f000 b817 	b.w	8012b84 <_write_r>

08012b56 <__sseek>:
 8012b56:	b510      	push	{r4, lr}
 8012b58:	460c      	mov	r4, r1
 8012b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b5e:	f000 f885 	bl	8012c6c <_lseek_r>
 8012b62:	1c43      	adds	r3, r0, #1
 8012b64:	89a3      	ldrh	r3, [r4, #12]
 8012b66:	bf15      	itete	ne
 8012b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8012b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012b72:	81a3      	strheq	r3, [r4, #12]
 8012b74:	bf18      	it	ne
 8012b76:	81a3      	strhne	r3, [r4, #12]
 8012b78:	bd10      	pop	{r4, pc}

08012b7a <__sclose>:
 8012b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b7e:	f000 b831 	b.w	8012be4 <_close_r>
	...

08012b84 <_write_r>:
 8012b84:	b538      	push	{r3, r4, r5, lr}
 8012b86:	4d07      	ldr	r5, [pc, #28]	; (8012ba4 <_write_r+0x20>)
 8012b88:	4604      	mov	r4, r0
 8012b8a:	4608      	mov	r0, r1
 8012b8c:	4611      	mov	r1, r2
 8012b8e:	2200      	movs	r2, #0
 8012b90:	602a      	str	r2, [r5, #0]
 8012b92:	461a      	mov	r2, r3
 8012b94:	f7f0 f830 	bl	8002bf8 <_write>
 8012b98:	1c43      	adds	r3, r0, #1
 8012b9a:	d102      	bne.n	8012ba2 <_write_r+0x1e>
 8012b9c:	682b      	ldr	r3, [r5, #0]
 8012b9e:	b103      	cbz	r3, 8012ba2 <_write_r+0x1e>
 8012ba0:	6023      	str	r3, [r4, #0]
 8012ba2:	bd38      	pop	{r3, r4, r5, pc}
 8012ba4:	24000710 	.word	0x24000710

08012ba8 <__assert_func>:
 8012ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012baa:	4614      	mov	r4, r2
 8012bac:	461a      	mov	r2, r3
 8012bae:	4b09      	ldr	r3, [pc, #36]	; (8012bd4 <__assert_func+0x2c>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	4605      	mov	r5, r0
 8012bb4:	68d8      	ldr	r0, [r3, #12]
 8012bb6:	b14c      	cbz	r4, 8012bcc <__assert_func+0x24>
 8012bb8:	4b07      	ldr	r3, [pc, #28]	; (8012bd8 <__assert_func+0x30>)
 8012bba:	9100      	str	r1, [sp, #0]
 8012bbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012bc0:	4906      	ldr	r1, [pc, #24]	; (8012bdc <__assert_func+0x34>)
 8012bc2:	462b      	mov	r3, r5
 8012bc4:	f000 f81e 	bl	8012c04 <fiprintf>
 8012bc8:	f000 f89f 	bl	8012d0a <abort>
 8012bcc:	4b04      	ldr	r3, [pc, #16]	; (8012be0 <__assert_func+0x38>)
 8012bce:	461c      	mov	r4, r3
 8012bd0:	e7f3      	b.n	8012bba <__assert_func+0x12>
 8012bd2:	bf00      	nop
 8012bd4:	24000028 	.word	0x24000028
 8012bd8:	08013a55 	.word	0x08013a55
 8012bdc:	08013a62 	.word	0x08013a62
 8012be0:	08013a90 	.word	0x08013a90

08012be4 <_close_r>:
 8012be4:	b538      	push	{r3, r4, r5, lr}
 8012be6:	4d06      	ldr	r5, [pc, #24]	; (8012c00 <_close_r+0x1c>)
 8012be8:	2300      	movs	r3, #0
 8012bea:	4604      	mov	r4, r0
 8012bec:	4608      	mov	r0, r1
 8012bee:	602b      	str	r3, [r5, #0]
 8012bf0:	f7f1 f969 	bl	8003ec6 <_close>
 8012bf4:	1c43      	adds	r3, r0, #1
 8012bf6:	d102      	bne.n	8012bfe <_close_r+0x1a>
 8012bf8:	682b      	ldr	r3, [r5, #0]
 8012bfa:	b103      	cbz	r3, 8012bfe <_close_r+0x1a>
 8012bfc:	6023      	str	r3, [r4, #0]
 8012bfe:	bd38      	pop	{r3, r4, r5, pc}
 8012c00:	24000710 	.word	0x24000710

08012c04 <fiprintf>:
 8012c04:	b40e      	push	{r1, r2, r3}
 8012c06:	b503      	push	{r0, r1, lr}
 8012c08:	4601      	mov	r1, r0
 8012c0a:	ab03      	add	r3, sp, #12
 8012c0c:	4805      	ldr	r0, [pc, #20]	; (8012c24 <fiprintf+0x20>)
 8012c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c12:	6800      	ldr	r0, [r0, #0]
 8012c14:	9301      	str	r3, [sp, #4]
 8012c16:	f7ff fe31 	bl	801287c <_vfiprintf_r>
 8012c1a:	b002      	add	sp, #8
 8012c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c20:	b003      	add	sp, #12
 8012c22:	4770      	bx	lr
 8012c24:	24000028 	.word	0x24000028

08012c28 <_fstat_r>:
 8012c28:	b538      	push	{r3, r4, r5, lr}
 8012c2a:	4d07      	ldr	r5, [pc, #28]	; (8012c48 <_fstat_r+0x20>)
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	4604      	mov	r4, r0
 8012c30:	4608      	mov	r0, r1
 8012c32:	4611      	mov	r1, r2
 8012c34:	602b      	str	r3, [r5, #0]
 8012c36:	f7f1 f952 	bl	8003ede <_fstat>
 8012c3a:	1c43      	adds	r3, r0, #1
 8012c3c:	d102      	bne.n	8012c44 <_fstat_r+0x1c>
 8012c3e:	682b      	ldr	r3, [r5, #0]
 8012c40:	b103      	cbz	r3, 8012c44 <_fstat_r+0x1c>
 8012c42:	6023      	str	r3, [r4, #0]
 8012c44:	bd38      	pop	{r3, r4, r5, pc}
 8012c46:	bf00      	nop
 8012c48:	24000710 	.word	0x24000710

08012c4c <_isatty_r>:
 8012c4c:	b538      	push	{r3, r4, r5, lr}
 8012c4e:	4d06      	ldr	r5, [pc, #24]	; (8012c68 <_isatty_r+0x1c>)
 8012c50:	2300      	movs	r3, #0
 8012c52:	4604      	mov	r4, r0
 8012c54:	4608      	mov	r0, r1
 8012c56:	602b      	str	r3, [r5, #0]
 8012c58:	f7f1 f951 	bl	8003efe <_isatty>
 8012c5c:	1c43      	adds	r3, r0, #1
 8012c5e:	d102      	bne.n	8012c66 <_isatty_r+0x1a>
 8012c60:	682b      	ldr	r3, [r5, #0]
 8012c62:	b103      	cbz	r3, 8012c66 <_isatty_r+0x1a>
 8012c64:	6023      	str	r3, [r4, #0]
 8012c66:	bd38      	pop	{r3, r4, r5, pc}
 8012c68:	24000710 	.word	0x24000710

08012c6c <_lseek_r>:
 8012c6c:	b538      	push	{r3, r4, r5, lr}
 8012c6e:	4d07      	ldr	r5, [pc, #28]	; (8012c8c <_lseek_r+0x20>)
 8012c70:	4604      	mov	r4, r0
 8012c72:	4608      	mov	r0, r1
 8012c74:	4611      	mov	r1, r2
 8012c76:	2200      	movs	r2, #0
 8012c78:	602a      	str	r2, [r5, #0]
 8012c7a:	461a      	mov	r2, r3
 8012c7c:	f7f1 f94a 	bl	8003f14 <_lseek>
 8012c80:	1c43      	adds	r3, r0, #1
 8012c82:	d102      	bne.n	8012c8a <_lseek_r+0x1e>
 8012c84:	682b      	ldr	r3, [r5, #0]
 8012c86:	b103      	cbz	r3, 8012c8a <_lseek_r+0x1e>
 8012c88:	6023      	str	r3, [r4, #0]
 8012c8a:	bd38      	pop	{r3, r4, r5, pc}
 8012c8c:	24000710 	.word	0x24000710

08012c90 <__ascii_mbtowc>:
 8012c90:	b082      	sub	sp, #8
 8012c92:	b901      	cbnz	r1, 8012c96 <__ascii_mbtowc+0x6>
 8012c94:	a901      	add	r1, sp, #4
 8012c96:	b142      	cbz	r2, 8012caa <__ascii_mbtowc+0x1a>
 8012c98:	b14b      	cbz	r3, 8012cae <__ascii_mbtowc+0x1e>
 8012c9a:	7813      	ldrb	r3, [r2, #0]
 8012c9c:	600b      	str	r3, [r1, #0]
 8012c9e:	7812      	ldrb	r2, [r2, #0]
 8012ca0:	1e10      	subs	r0, r2, #0
 8012ca2:	bf18      	it	ne
 8012ca4:	2001      	movne	r0, #1
 8012ca6:	b002      	add	sp, #8
 8012ca8:	4770      	bx	lr
 8012caa:	4610      	mov	r0, r2
 8012cac:	e7fb      	b.n	8012ca6 <__ascii_mbtowc+0x16>
 8012cae:	f06f 0001 	mvn.w	r0, #1
 8012cb2:	e7f8      	b.n	8012ca6 <__ascii_mbtowc+0x16>

08012cb4 <__malloc_lock>:
 8012cb4:	4801      	ldr	r0, [pc, #4]	; (8012cbc <__malloc_lock+0x8>)
 8012cb6:	f7ff b902 	b.w	8011ebe <__retarget_lock_acquire_recursive>
 8012cba:	bf00      	nop
 8012cbc:	24000708 	.word	0x24000708

08012cc0 <__malloc_unlock>:
 8012cc0:	4801      	ldr	r0, [pc, #4]	; (8012cc8 <__malloc_unlock+0x8>)
 8012cc2:	f7ff b8fd 	b.w	8011ec0 <__retarget_lock_release_recursive>
 8012cc6:	bf00      	nop
 8012cc8:	24000708 	.word	0x24000708

08012ccc <_read_r>:
 8012ccc:	b538      	push	{r3, r4, r5, lr}
 8012cce:	4d07      	ldr	r5, [pc, #28]	; (8012cec <_read_r+0x20>)
 8012cd0:	4604      	mov	r4, r0
 8012cd2:	4608      	mov	r0, r1
 8012cd4:	4611      	mov	r1, r2
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	602a      	str	r2, [r5, #0]
 8012cda:	461a      	mov	r2, r3
 8012cdc:	f7f1 f8d6 	bl	8003e8c <_read>
 8012ce0:	1c43      	adds	r3, r0, #1
 8012ce2:	d102      	bne.n	8012cea <_read_r+0x1e>
 8012ce4:	682b      	ldr	r3, [r5, #0]
 8012ce6:	b103      	cbz	r3, 8012cea <_read_r+0x1e>
 8012ce8:	6023      	str	r3, [r4, #0]
 8012cea:	bd38      	pop	{r3, r4, r5, pc}
 8012cec:	24000710 	.word	0x24000710

08012cf0 <__ascii_wctomb>:
 8012cf0:	b149      	cbz	r1, 8012d06 <__ascii_wctomb+0x16>
 8012cf2:	2aff      	cmp	r2, #255	; 0xff
 8012cf4:	bf85      	ittet	hi
 8012cf6:	238a      	movhi	r3, #138	; 0x8a
 8012cf8:	6003      	strhi	r3, [r0, #0]
 8012cfa:	700a      	strbls	r2, [r1, #0]
 8012cfc:	f04f 30ff 	movhi.w	r0, #4294967295
 8012d00:	bf98      	it	ls
 8012d02:	2001      	movls	r0, #1
 8012d04:	4770      	bx	lr
 8012d06:	4608      	mov	r0, r1
 8012d08:	4770      	bx	lr

08012d0a <abort>:
 8012d0a:	b508      	push	{r3, lr}
 8012d0c:	2006      	movs	r0, #6
 8012d0e:	f000 f82b 	bl	8012d68 <raise>
 8012d12:	2001      	movs	r0, #1
 8012d14:	f7f1 f8b0 	bl	8003e78 <_exit>

08012d18 <_raise_r>:
 8012d18:	291f      	cmp	r1, #31
 8012d1a:	b538      	push	{r3, r4, r5, lr}
 8012d1c:	4604      	mov	r4, r0
 8012d1e:	460d      	mov	r5, r1
 8012d20:	d904      	bls.n	8012d2c <_raise_r+0x14>
 8012d22:	2316      	movs	r3, #22
 8012d24:	6003      	str	r3, [r0, #0]
 8012d26:	f04f 30ff 	mov.w	r0, #4294967295
 8012d2a:	bd38      	pop	{r3, r4, r5, pc}
 8012d2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012d2e:	b112      	cbz	r2, 8012d36 <_raise_r+0x1e>
 8012d30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012d34:	b94b      	cbnz	r3, 8012d4a <_raise_r+0x32>
 8012d36:	4620      	mov	r0, r4
 8012d38:	f000 f830 	bl	8012d9c <_getpid_r>
 8012d3c:	462a      	mov	r2, r5
 8012d3e:	4601      	mov	r1, r0
 8012d40:	4620      	mov	r0, r4
 8012d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d46:	f000 b817 	b.w	8012d78 <_kill_r>
 8012d4a:	2b01      	cmp	r3, #1
 8012d4c:	d00a      	beq.n	8012d64 <_raise_r+0x4c>
 8012d4e:	1c59      	adds	r1, r3, #1
 8012d50:	d103      	bne.n	8012d5a <_raise_r+0x42>
 8012d52:	2316      	movs	r3, #22
 8012d54:	6003      	str	r3, [r0, #0]
 8012d56:	2001      	movs	r0, #1
 8012d58:	e7e7      	b.n	8012d2a <_raise_r+0x12>
 8012d5a:	2400      	movs	r4, #0
 8012d5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012d60:	4628      	mov	r0, r5
 8012d62:	4798      	blx	r3
 8012d64:	2000      	movs	r0, #0
 8012d66:	e7e0      	b.n	8012d2a <_raise_r+0x12>

08012d68 <raise>:
 8012d68:	4b02      	ldr	r3, [pc, #8]	; (8012d74 <raise+0xc>)
 8012d6a:	4601      	mov	r1, r0
 8012d6c:	6818      	ldr	r0, [r3, #0]
 8012d6e:	f7ff bfd3 	b.w	8012d18 <_raise_r>
 8012d72:	bf00      	nop
 8012d74:	24000028 	.word	0x24000028

08012d78 <_kill_r>:
 8012d78:	b538      	push	{r3, r4, r5, lr}
 8012d7a:	4d07      	ldr	r5, [pc, #28]	; (8012d98 <_kill_r+0x20>)
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	4604      	mov	r4, r0
 8012d80:	4608      	mov	r0, r1
 8012d82:	4611      	mov	r1, r2
 8012d84:	602b      	str	r3, [r5, #0]
 8012d86:	f7f1 f867 	bl	8003e58 <_kill>
 8012d8a:	1c43      	adds	r3, r0, #1
 8012d8c:	d102      	bne.n	8012d94 <_kill_r+0x1c>
 8012d8e:	682b      	ldr	r3, [r5, #0]
 8012d90:	b103      	cbz	r3, 8012d94 <_kill_r+0x1c>
 8012d92:	6023      	str	r3, [r4, #0]
 8012d94:	bd38      	pop	{r3, r4, r5, pc}
 8012d96:	bf00      	nop
 8012d98:	24000710 	.word	0x24000710

08012d9c <_getpid_r>:
 8012d9c:	f7f1 b854 	b.w	8003e48 <_getpid>

08012da0 <atan2>:
 8012da0:	f000 b862 	b.w	8012e68 <__ieee754_atan2>
 8012da4:	0000      	movs	r0, r0
	...

08012da8 <sqrt>:
 8012da8:	b508      	push	{r3, lr}
 8012daa:	ed2d 8b04 	vpush	{d8-d9}
 8012dae:	eeb0 8b40 	vmov.f64	d8, d0
 8012db2:	f000 f927 	bl	8013004 <__ieee754_sqrt>
 8012db6:	4b10      	ldr	r3, [pc, #64]	; (8012df8 <sqrt+0x50>)
 8012db8:	f993 3000 	ldrsb.w	r3, [r3]
 8012dbc:	3301      	adds	r3, #1
 8012dbe:	d011      	beq.n	8012de4 <sqrt+0x3c>
 8012dc0:	eeb4 8b48 	vcmp.f64	d8, d8
 8012dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dc8:	d60c      	bvs.n	8012de4 <sqrt+0x3c>
 8012dca:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8012df0 <sqrt+0x48>
 8012dce:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8012dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dd6:	d505      	bpl.n	8012de4 <sqrt+0x3c>
 8012dd8:	f7fd fae4 	bl	80103a4 <__errno>
 8012ddc:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8012de0:	2321      	movs	r3, #33	; 0x21
 8012de2:	6003      	str	r3, [r0, #0]
 8012de4:	ecbd 8b04 	vpop	{d8-d9}
 8012de8:	bd08      	pop	{r3, pc}
 8012dea:	bf00      	nop
 8012dec:	f3af 8000 	nop.w
	...
 8012df8:	240001f8 	.word	0x240001f8

08012dfc <asinf>:
 8012dfc:	b508      	push	{r3, lr}
 8012dfe:	ed2d 8b02 	vpush	{d8}
 8012e02:	eeb0 8a40 	vmov.f32	s16, s0
 8012e06:	f000 f901 	bl	801300c <__ieee754_asinf>
 8012e0a:	4b13      	ldr	r3, [pc, #76]	; (8012e58 <asinf+0x5c>)
 8012e0c:	f993 3000 	ldrsb.w	r3, [r3]
 8012e10:	3301      	adds	r3, #1
 8012e12:	eef0 8a40 	vmov.f32	s17, s0
 8012e16:	d01a      	beq.n	8012e4e <asinf+0x52>
 8012e18:	eeb4 8a48 	vcmp.f32	s16, s16
 8012e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e20:	d615      	bvs.n	8012e4e <asinf+0x52>
 8012e22:	eeb0 0a48 	vmov.f32	s0, s16
 8012e26:	f000 fc53 	bl	80136d0 <fabsf>
 8012e2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012e2e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e36:	dd0a      	ble.n	8012e4e <asinf+0x52>
 8012e38:	f7fd fab4 	bl	80103a4 <__errno>
 8012e3c:	ecbd 8b02 	vpop	{d8}
 8012e40:	2321      	movs	r3, #33	; 0x21
 8012e42:	6003      	str	r3, [r0, #0]
 8012e44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012e48:	4804      	ldr	r0, [pc, #16]	; (8012e5c <asinf+0x60>)
 8012e4a:	f000 bc49 	b.w	80136e0 <nanf>
 8012e4e:	eeb0 0a68 	vmov.f32	s0, s17
 8012e52:	ecbd 8b02 	vpop	{d8}
 8012e56:	bd08      	pop	{r3, pc}
 8012e58:	240001f8 	.word	0x240001f8
 8012e5c:	08013a90 	.word	0x08013a90

08012e60 <atan2f>:
 8012e60:	f000 b9ba 	b.w	80131d8 <__ieee754_atan2f>
 8012e64:	0000      	movs	r0, r0
	...

08012e68 <__ieee754_atan2>:
 8012e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e6a:	ee11 6a10 	vmov	r6, s2
 8012e6e:	ee11 0a90 	vmov	r0, s3
 8012e72:	4273      	negs	r3, r6
 8012e74:	4f60      	ldr	r7, [pc, #384]	; (8012ff8 <__ieee754_atan2+0x190>)
 8012e76:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8012e7a:	4333      	orrs	r3, r6
 8012e7c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012e80:	42bb      	cmp	r3, r7
 8012e82:	ed8d 0b00 	vstr	d0, [sp]
 8012e86:	d80b      	bhi.n	8012ea0 <__ieee754_atan2+0x38>
 8012e88:	e9dd c500 	ldrd	ip, r5, [sp]
 8012e8c:	f1cc 0100 	rsb	r1, ip, #0
 8012e90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012e94:	ea41 010c 	orr.w	r1, r1, ip
 8012e98:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8012e9c:	42b9      	cmp	r1, r7
 8012e9e:	d906      	bls.n	8012eae <__ieee754_atan2+0x46>
 8012ea0:	ed9d 7b00 	vldr	d7, [sp]
 8012ea4:	ee37 7b01 	vadd.f64	d7, d7, d1
 8012ea8:	ed8d 7b00 	vstr	d7, [sp]
 8012eac:	e054      	b.n	8012f58 <__ieee754_atan2+0xf0>
 8012eae:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8012eb2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8012eb6:	4331      	orrs	r1, r6
 8012eb8:	d104      	bne.n	8012ec4 <__ieee754_atan2+0x5c>
 8012eba:	b003      	add	sp, #12
 8012ebc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012ec0:	f000 ba2e 	b.w	8013320 <atan>
 8012ec4:	1784      	asrs	r4, r0, #30
 8012ec6:	f004 0402 	and.w	r4, r4, #2
 8012eca:	ea53 010c 	orrs.w	r1, r3, ip
 8012ece:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8012ed2:	d109      	bne.n	8012ee8 <__ieee754_atan2+0x80>
 8012ed4:	2c02      	cmp	r4, #2
 8012ed6:	d069      	beq.n	8012fac <__ieee754_atan2+0x144>
 8012ed8:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8012fc0 <__ieee754_atan2+0x158>
 8012edc:	ed9d 6b00 	vldr	d6, [sp]
 8012ee0:	2c03      	cmp	r4, #3
 8012ee2:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8012ee6:	e7df      	b.n	8012ea8 <__ieee754_atan2+0x40>
 8012ee8:	ea52 0106 	orrs.w	r1, r2, r6
 8012eec:	d107      	bne.n	8012efe <__ieee754_atan2+0x96>
 8012eee:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8012fc8 <__ieee754_atan2+0x160>
 8012ef2:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8012fd0 <__ieee754_atan2+0x168>
 8012ef6:	2d00      	cmp	r5, #0
 8012ef8:	fe26 7b07 	vselge.f64	d7, d6, d7
 8012efc:	e7d4      	b.n	8012ea8 <__ieee754_atan2+0x40>
 8012efe:	42ba      	cmp	r2, r7
 8012f00:	d10f      	bne.n	8012f22 <__ieee754_atan2+0xba>
 8012f02:	4293      	cmp	r3, r2
 8012f04:	f104 34ff 	add.w	r4, r4, #4294967295
 8012f08:	d107      	bne.n	8012f1a <__ieee754_atan2+0xb2>
 8012f0a:	2c02      	cmp	r4, #2
 8012f0c:	d851      	bhi.n	8012fb2 <__ieee754_atan2+0x14a>
 8012f0e:	4b3b      	ldr	r3, [pc, #236]	; (8012ffc <__ieee754_atan2+0x194>)
 8012f10:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012f14:	ed94 7b00 	vldr	d7, [r4]
 8012f18:	e7c6      	b.n	8012ea8 <__ieee754_atan2+0x40>
 8012f1a:	2c02      	cmp	r4, #2
 8012f1c:	d84c      	bhi.n	8012fb8 <__ieee754_atan2+0x150>
 8012f1e:	4b38      	ldr	r3, [pc, #224]	; (8013000 <__ieee754_atan2+0x198>)
 8012f20:	e7f6      	b.n	8012f10 <__ieee754_atan2+0xa8>
 8012f22:	42bb      	cmp	r3, r7
 8012f24:	d0e3      	beq.n	8012eee <__ieee754_atan2+0x86>
 8012f26:	1a9b      	subs	r3, r3, r2
 8012f28:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8012f2c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012f30:	da16      	bge.n	8012f60 <__ieee754_atan2+0xf8>
 8012f32:	2800      	cmp	r0, #0
 8012f34:	da01      	bge.n	8012f3a <__ieee754_atan2+0xd2>
 8012f36:	323c      	adds	r2, #60	; 0x3c
 8012f38:	db17      	blt.n	8012f6a <__ieee754_atan2+0x102>
 8012f3a:	ed9d 7b00 	vldr	d7, [sp]
 8012f3e:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8012f42:	f000 fae7 	bl	8013514 <fabs>
 8012f46:	f000 f9eb 	bl	8013320 <atan>
 8012f4a:	ed8d 0b00 	vstr	d0, [sp]
 8012f4e:	2c01      	cmp	r4, #1
 8012f50:	d00e      	beq.n	8012f70 <__ieee754_atan2+0x108>
 8012f52:	2c02      	cmp	r4, #2
 8012f54:	d014      	beq.n	8012f80 <__ieee754_atan2+0x118>
 8012f56:	b9f4      	cbnz	r4, 8012f96 <__ieee754_atan2+0x12e>
 8012f58:	ed9d 0b00 	vldr	d0, [sp]
 8012f5c:	b003      	add	sp, #12
 8012f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f60:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8012fc8 <__ieee754_atan2+0x160>
 8012f64:	ed8d 7b00 	vstr	d7, [sp]
 8012f68:	e7f1      	b.n	8012f4e <__ieee754_atan2+0xe6>
 8012f6a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8012fd8 <__ieee754_atan2+0x170>
 8012f6e:	e7f9      	b.n	8012f64 <__ieee754_atan2+0xfc>
 8012f70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f74:	9901      	ldr	r1, [sp, #4]
 8012f76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f7a:	e9cd 2300 	strd	r2, r3, [sp]
 8012f7e:	e7eb      	b.n	8012f58 <__ieee754_atan2+0xf0>
 8012f80:	ed9d 6b00 	vldr	d6, [sp]
 8012f84:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012fe0 <__ieee754_atan2+0x178>
 8012f88:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012f8c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8012fe8 <__ieee754_atan2+0x180>
 8012f90:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012f94:	e788      	b.n	8012ea8 <__ieee754_atan2+0x40>
 8012f96:	ed9d 6b00 	vldr	d6, [sp]
 8012f9a:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8012fe0 <__ieee754_atan2+0x178>
 8012f9e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012fa2:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8012fe8 <__ieee754_atan2+0x180>
 8012fa6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012faa:	e77d      	b.n	8012ea8 <__ieee754_atan2+0x40>
 8012fac:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012fe8 <__ieee754_atan2+0x180>
 8012fb0:	e77a      	b.n	8012ea8 <__ieee754_atan2+0x40>
 8012fb2:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8012ff0 <__ieee754_atan2+0x188>
 8012fb6:	e777      	b.n	8012ea8 <__ieee754_atan2+0x40>
 8012fb8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8012fd8 <__ieee754_atan2+0x170>
 8012fbc:	e774      	b.n	8012ea8 <__ieee754_atan2+0x40>
 8012fbe:	bf00      	nop
 8012fc0:	54442d18 	.word	0x54442d18
 8012fc4:	c00921fb 	.word	0xc00921fb
 8012fc8:	54442d18 	.word	0x54442d18
 8012fcc:	3ff921fb 	.word	0x3ff921fb
 8012fd0:	54442d18 	.word	0x54442d18
 8012fd4:	bff921fb 	.word	0xbff921fb
	...
 8012fe0:	33145c07 	.word	0x33145c07
 8012fe4:	3ca1a626 	.word	0x3ca1a626
 8012fe8:	54442d18 	.word	0x54442d18
 8012fec:	400921fb 	.word	0x400921fb
 8012ff0:	54442d18 	.word	0x54442d18
 8012ff4:	3fe921fb 	.word	0x3fe921fb
 8012ff8:	7ff00000 	.word	0x7ff00000
 8012ffc:	08013ba0 	.word	0x08013ba0
 8013000:	08013bb8 	.word	0x08013bb8

08013004 <__ieee754_sqrt>:
 8013004:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8013008:	4770      	bx	lr
	...

0801300c <__ieee754_asinf>:
 801300c:	b538      	push	{r3, r4, r5, lr}
 801300e:	ee10 5a10 	vmov	r5, s0
 8013012:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013016:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801301a:	ed2d 8b04 	vpush	{d8-d9}
 801301e:	d10c      	bne.n	801303a <__ieee754_asinf+0x2e>
 8013020:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8013198 <__ieee754_asinf+0x18c>
 8013024:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801319c <__ieee754_asinf+0x190>
 8013028:	ee60 7a27 	vmul.f32	s15, s0, s15
 801302c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013030:	eeb0 0a67 	vmov.f32	s0, s15
 8013034:	ecbd 8b04 	vpop	{d8-d9}
 8013038:	bd38      	pop	{r3, r4, r5, pc}
 801303a:	dd04      	ble.n	8013046 <__ieee754_asinf+0x3a>
 801303c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013040:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013044:	e7f6      	b.n	8013034 <__ieee754_asinf+0x28>
 8013046:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801304a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801304e:	da0b      	bge.n	8013068 <__ieee754_asinf+0x5c>
 8013050:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8013054:	da52      	bge.n	80130fc <__ieee754_asinf+0xf0>
 8013056:	eddf 7a52 	vldr	s15, [pc, #328]	; 80131a0 <__ieee754_asinf+0x194>
 801305a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801305e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013066:	dce5      	bgt.n	8013034 <__ieee754_asinf+0x28>
 8013068:	f000 fb32 	bl	80136d0 <fabsf>
 801306c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8013070:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8013074:	ee20 8a08 	vmul.f32	s16, s0, s16
 8013078:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80131a4 <__ieee754_asinf+0x198>
 801307c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80131a8 <__ieee754_asinf+0x19c>
 8013080:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80131ac <__ieee754_asinf+0x1a0>
 8013084:	eea8 7a27 	vfma.f32	s14, s16, s15
 8013088:	eddf 7a49 	vldr	s15, [pc, #292]	; 80131b0 <__ieee754_asinf+0x1a4>
 801308c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013090:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80131b4 <__ieee754_asinf+0x1a8>
 8013094:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013098:	eddf 7a47 	vldr	s15, [pc, #284]	; 80131b8 <__ieee754_asinf+0x1ac>
 801309c:	eee7 7a08 	vfma.f32	s15, s14, s16
 80130a0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80131bc <__ieee754_asinf+0x1b0>
 80130a4:	eea7 9a88 	vfma.f32	s18, s15, s16
 80130a8:	eddf 7a45 	vldr	s15, [pc, #276]	; 80131c0 <__ieee754_asinf+0x1b4>
 80130ac:	eee8 7a07 	vfma.f32	s15, s16, s14
 80130b0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80131c4 <__ieee754_asinf+0x1b8>
 80130b4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80130b8:	eddf 7a43 	vldr	s15, [pc, #268]	; 80131c8 <__ieee754_asinf+0x1bc>
 80130bc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80130c0:	eeb0 0a48 	vmov.f32	s0, s16
 80130c4:	eee7 8a88 	vfma.f32	s17, s15, s16
 80130c8:	f000 f924 	bl	8013314 <__ieee754_sqrtf>
 80130cc:	4b3f      	ldr	r3, [pc, #252]	; (80131cc <__ieee754_asinf+0x1c0>)
 80130ce:	ee29 9a08 	vmul.f32	s18, s18, s16
 80130d2:	429c      	cmp	r4, r3
 80130d4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80130d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80130dc:	dd3d      	ble.n	801315a <__ieee754_asinf+0x14e>
 80130de:	eea0 0a06 	vfma.f32	s0, s0, s12
 80130e2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80131d0 <__ieee754_asinf+0x1c4>
 80130e6:	eee0 7a26 	vfma.f32	s15, s0, s13
 80130ea:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801319c <__ieee754_asinf+0x190>
 80130ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80130f2:	2d00      	cmp	r5, #0
 80130f4:	bfd8      	it	le
 80130f6:	eeb1 0a40 	vnegle.f32	s0, s0
 80130fa:	e79b      	b.n	8013034 <__ieee754_asinf+0x28>
 80130fc:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013100:	eddf 6a28 	vldr	s13, [pc, #160]	; 80131a4 <__ieee754_asinf+0x198>
 8013104:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80131a8 <__ieee754_asinf+0x19c>
 8013108:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80131bc <__ieee754_asinf+0x1b0>
 801310c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013110:	eddf 6a27 	vldr	s13, [pc, #156]	; 80131b0 <__ieee754_asinf+0x1a4>
 8013114:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013118:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80131b4 <__ieee754_asinf+0x1a8>
 801311c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013120:	eddf 6a25 	vldr	s13, [pc, #148]	; 80131b8 <__ieee754_asinf+0x1ac>
 8013124:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013128:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80131ac <__ieee754_asinf+0x1a0>
 801312c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013130:	eddf 6a23 	vldr	s13, [pc, #140]	; 80131c0 <__ieee754_asinf+0x1b4>
 8013134:	eee7 6a86 	vfma.f32	s13, s15, s12
 8013138:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80131c4 <__ieee754_asinf+0x1b8>
 801313c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013140:	eddf 6a21 	vldr	s13, [pc, #132]	; 80131c8 <__ieee754_asinf+0x1bc>
 8013144:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013148:	ee27 7a27 	vmul.f32	s14, s14, s15
 801314c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8013150:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013154:	eea0 0a27 	vfma.f32	s0, s0, s15
 8013158:	e76c      	b.n	8013034 <__ieee754_asinf+0x28>
 801315a:	ee10 3a10 	vmov	r3, s0
 801315e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013162:	f023 030f 	bic.w	r3, r3, #15
 8013166:	ee07 3a10 	vmov	s14, r3
 801316a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801316e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013172:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013176:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801317a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8013198 <__ieee754_asinf+0x18c>
 801317e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8013182:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8013186:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80131d4 <__ieee754_asinf+0x1c8>
 801318a:	eeb0 6a40 	vmov.f32	s12, s0
 801318e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8013192:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013196:	e7aa      	b.n	80130ee <__ieee754_asinf+0xe2>
 8013198:	b33bbd2e 	.word	0xb33bbd2e
 801319c:	3fc90fdb 	.word	0x3fc90fdb
 80131a0:	7149f2ca 	.word	0x7149f2ca
 80131a4:	3811ef08 	.word	0x3811ef08
 80131a8:	3a4f7f04 	.word	0x3a4f7f04
 80131ac:	3e2aaaab 	.word	0x3e2aaaab
 80131b0:	bd241146 	.word	0xbd241146
 80131b4:	3e4e0aa8 	.word	0x3e4e0aa8
 80131b8:	bea6b090 	.word	0xbea6b090
 80131bc:	3d9dc62e 	.word	0x3d9dc62e
 80131c0:	bf303361 	.word	0xbf303361
 80131c4:	4001572d 	.word	0x4001572d
 80131c8:	c019d139 	.word	0xc019d139
 80131cc:	3f799999 	.word	0x3f799999
 80131d0:	333bbd2e 	.word	0x333bbd2e
 80131d4:	3f490fdb 	.word	0x3f490fdb

080131d8 <__ieee754_atan2f>:
 80131d8:	ee10 2a90 	vmov	r2, s1
 80131dc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80131e0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80131e4:	b510      	push	{r4, lr}
 80131e6:	eef0 7a40 	vmov.f32	s15, s0
 80131ea:	dc06      	bgt.n	80131fa <__ieee754_atan2f+0x22>
 80131ec:	ee10 0a10 	vmov	r0, s0
 80131f0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80131f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80131f8:	dd04      	ble.n	8013204 <__ieee754_atan2f+0x2c>
 80131fa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80131fe:	eeb0 0a67 	vmov.f32	s0, s15
 8013202:	bd10      	pop	{r4, pc}
 8013204:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013208:	d103      	bne.n	8013212 <__ieee754_atan2f+0x3a>
 801320a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801320e:	f000 b98b 	b.w	8013528 <atanf>
 8013212:	1794      	asrs	r4, r2, #30
 8013214:	f004 0402 	and.w	r4, r4, #2
 8013218:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801321c:	b93b      	cbnz	r3, 801322e <__ieee754_atan2f+0x56>
 801321e:	2c02      	cmp	r4, #2
 8013220:	d05c      	beq.n	80132dc <__ieee754_atan2f+0x104>
 8013222:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80132f0 <__ieee754_atan2f+0x118>
 8013226:	2c03      	cmp	r4, #3
 8013228:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801322c:	e7e7      	b.n	80131fe <__ieee754_atan2f+0x26>
 801322e:	b939      	cbnz	r1, 8013240 <__ieee754_atan2f+0x68>
 8013230:	eddf 7a30 	vldr	s15, [pc, #192]	; 80132f4 <__ieee754_atan2f+0x11c>
 8013234:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80132f8 <__ieee754_atan2f+0x120>
 8013238:	2800      	cmp	r0, #0
 801323a:	fe67 7a80 	vselge.f32	s15, s15, s0
 801323e:	e7de      	b.n	80131fe <__ieee754_atan2f+0x26>
 8013240:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013244:	d110      	bne.n	8013268 <__ieee754_atan2f+0x90>
 8013246:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801324a:	f104 34ff 	add.w	r4, r4, #4294967295
 801324e:	d107      	bne.n	8013260 <__ieee754_atan2f+0x88>
 8013250:	2c02      	cmp	r4, #2
 8013252:	d846      	bhi.n	80132e2 <__ieee754_atan2f+0x10a>
 8013254:	4b29      	ldr	r3, [pc, #164]	; (80132fc <__ieee754_atan2f+0x124>)
 8013256:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801325a:	edd4 7a00 	vldr	s15, [r4]
 801325e:	e7ce      	b.n	80131fe <__ieee754_atan2f+0x26>
 8013260:	2c02      	cmp	r4, #2
 8013262:	d841      	bhi.n	80132e8 <__ieee754_atan2f+0x110>
 8013264:	4b26      	ldr	r3, [pc, #152]	; (8013300 <__ieee754_atan2f+0x128>)
 8013266:	e7f6      	b.n	8013256 <__ieee754_atan2f+0x7e>
 8013268:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801326c:	d0e0      	beq.n	8013230 <__ieee754_atan2f+0x58>
 801326e:	1a5b      	subs	r3, r3, r1
 8013270:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8013274:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8013278:	da1a      	bge.n	80132b0 <__ieee754_atan2f+0xd8>
 801327a:	2a00      	cmp	r2, #0
 801327c:	da01      	bge.n	8013282 <__ieee754_atan2f+0xaa>
 801327e:	313c      	adds	r1, #60	; 0x3c
 8013280:	db19      	blt.n	80132b6 <__ieee754_atan2f+0xde>
 8013282:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8013286:	f000 fa23 	bl	80136d0 <fabsf>
 801328a:	f000 f94d 	bl	8013528 <atanf>
 801328e:	eef0 7a40 	vmov.f32	s15, s0
 8013292:	2c01      	cmp	r4, #1
 8013294:	d012      	beq.n	80132bc <__ieee754_atan2f+0xe4>
 8013296:	2c02      	cmp	r4, #2
 8013298:	d017      	beq.n	80132ca <__ieee754_atan2f+0xf2>
 801329a:	2c00      	cmp	r4, #0
 801329c:	d0af      	beq.n	80131fe <__ieee754_atan2f+0x26>
 801329e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8013304 <__ieee754_atan2f+0x12c>
 80132a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80132a6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8013308 <__ieee754_atan2f+0x130>
 80132aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80132ae:	e7a6      	b.n	80131fe <__ieee754_atan2f+0x26>
 80132b0:	eddf 7a10 	vldr	s15, [pc, #64]	; 80132f4 <__ieee754_atan2f+0x11c>
 80132b4:	e7ed      	b.n	8013292 <__ieee754_atan2f+0xba>
 80132b6:	eddf 7a15 	vldr	s15, [pc, #84]	; 801330c <__ieee754_atan2f+0x134>
 80132ba:	e7ea      	b.n	8013292 <__ieee754_atan2f+0xba>
 80132bc:	ee17 3a90 	vmov	r3, s15
 80132c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80132c4:	ee07 3a90 	vmov	s15, r3
 80132c8:	e799      	b.n	80131fe <__ieee754_atan2f+0x26>
 80132ca:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013304 <__ieee754_atan2f+0x12c>
 80132ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 80132d2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8013308 <__ieee754_atan2f+0x130>
 80132d6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80132da:	e790      	b.n	80131fe <__ieee754_atan2f+0x26>
 80132dc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8013308 <__ieee754_atan2f+0x130>
 80132e0:	e78d      	b.n	80131fe <__ieee754_atan2f+0x26>
 80132e2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8013310 <__ieee754_atan2f+0x138>
 80132e6:	e78a      	b.n	80131fe <__ieee754_atan2f+0x26>
 80132e8:	eddf 7a08 	vldr	s15, [pc, #32]	; 801330c <__ieee754_atan2f+0x134>
 80132ec:	e787      	b.n	80131fe <__ieee754_atan2f+0x26>
 80132ee:	bf00      	nop
 80132f0:	c0490fdb 	.word	0xc0490fdb
 80132f4:	3fc90fdb 	.word	0x3fc90fdb
 80132f8:	bfc90fdb 	.word	0xbfc90fdb
 80132fc:	08013bd0 	.word	0x08013bd0
 8013300:	08013bdc 	.word	0x08013bdc
 8013304:	33bbbd2e 	.word	0x33bbbd2e
 8013308:	40490fdb 	.word	0x40490fdb
 801330c:	00000000 	.word	0x00000000
 8013310:	3f490fdb 	.word	0x3f490fdb

08013314 <__ieee754_sqrtf>:
 8013314:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013318:	4770      	bx	lr
 801331a:	0000      	movs	r0, r0
 801331c:	0000      	movs	r0, r0
	...

08013320 <atan>:
 8013320:	b538      	push	{r3, r4, r5, lr}
 8013322:	eeb0 7b40 	vmov.f64	d7, d0
 8013326:	ee17 5a90 	vmov	r5, s15
 801332a:	4b73      	ldr	r3, [pc, #460]	; (80134f8 <atan+0x1d8>)
 801332c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013330:	429c      	cmp	r4, r3
 8013332:	dd13      	ble.n	801335c <atan+0x3c>
 8013334:	4b71      	ldr	r3, [pc, #452]	; (80134fc <atan+0x1dc>)
 8013336:	429c      	cmp	r4, r3
 8013338:	dc03      	bgt.n	8013342 <atan+0x22>
 801333a:	d107      	bne.n	801334c <atan+0x2c>
 801333c:	ee10 3a10 	vmov	r3, s0
 8013340:	b123      	cbz	r3, 801334c <atan+0x2c>
 8013342:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013346:	eeb0 0b47 	vmov.f64	d0, d7
 801334a:	bd38      	pop	{r3, r4, r5, pc}
 801334c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8013488 <atan+0x168>
 8013350:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8013490 <atan+0x170>
 8013354:	2d00      	cmp	r5, #0
 8013356:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801335a:	e7f4      	b.n	8013346 <atan+0x26>
 801335c:	4b68      	ldr	r3, [pc, #416]	; (8013500 <atan+0x1e0>)
 801335e:	429c      	cmp	r4, r3
 8013360:	dc11      	bgt.n	8013386 <atan+0x66>
 8013362:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8013366:	429c      	cmp	r4, r3
 8013368:	dc0a      	bgt.n	8013380 <atan+0x60>
 801336a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 801336e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8013498 <atan+0x178>
 8013372:	ee30 6b06 	vadd.f64	d6, d0, d6
 8013376:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801337a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801337e:	dce2      	bgt.n	8013346 <atan+0x26>
 8013380:	f04f 33ff 	mov.w	r3, #4294967295
 8013384:	e013      	b.n	80133ae <atan+0x8e>
 8013386:	f000 f8c5 	bl	8013514 <fabs>
 801338a:	4b5e      	ldr	r3, [pc, #376]	; (8013504 <atan+0x1e4>)
 801338c:	429c      	cmp	r4, r3
 801338e:	dc4f      	bgt.n	8013430 <atan+0x110>
 8013390:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8013394:	429c      	cmp	r4, r3
 8013396:	dc41      	bgt.n	801341c <atan+0xfc>
 8013398:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801339c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80133a0:	2300      	movs	r3, #0
 80133a2:	eea0 6b07 	vfma.f64	d6, d0, d7
 80133a6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80133aa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80133ae:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80134a0 <atan+0x180>
 80133b2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80133b6:	ee24 5b04 	vmul.f64	d5, d4, d4
 80133ba:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80134a8 <atan+0x188>
 80133be:	eea5 3b06 	vfma.f64	d3, d5, d6
 80133c2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80134b0 <atan+0x190>
 80133c6:	eea3 6b05 	vfma.f64	d6, d3, d5
 80133ca:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80134b8 <atan+0x198>
 80133ce:	eea6 3b05 	vfma.f64	d3, d6, d5
 80133d2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80134c0 <atan+0x1a0>
 80133d6:	eea3 6b05 	vfma.f64	d6, d3, d5
 80133da:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80134c8 <atan+0x1a8>
 80133de:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80134d0 <atan+0x1b0>
 80133e2:	eea6 3b05 	vfma.f64	d3, d6, d5
 80133e6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80134d8 <atan+0x1b8>
 80133ea:	eea5 2b06 	vfma.f64	d2, d5, d6
 80133ee:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80134e0 <atan+0x1c0>
 80133f2:	eea2 6b05 	vfma.f64	d6, d2, d5
 80133f6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80134e8 <atan+0x1c8>
 80133fa:	eea6 2b05 	vfma.f64	d2, d6, d5
 80133fe:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80134f0 <atan+0x1d0>
 8013402:	1c5a      	adds	r2, r3, #1
 8013404:	eea2 6b05 	vfma.f64	d6, d2, d5
 8013408:	ee26 6b05 	vmul.f64	d6, d6, d5
 801340c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8013410:	ee27 6b06 	vmul.f64	d6, d7, d6
 8013414:	d121      	bne.n	801345a <atan+0x13a>
 8013416:	ee37 7b46 	vsub.f64	d7, d7, d6
 801341a:	e794      	b.n	8013346 <atan+0x26>
 801341c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013420:	2301      	movs	r3, #1
 8013422:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013426:	ee30 0b07 	vadd.f64	d0, d0, d7
 801342a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801342e:	e7be      	b.n	80133ae <atan+0x8e>
 8013430:	4b35      	ldr	r3, [pc, #212]	; (8013508 <atan+0x1e8>)
 8013432:	429c      	cmp	r4, r3
 8013434:	da0b      	bge.n	801344e <atan+0x12e>
 8013436:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801343a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801343e:	ee30 5b47 	vsub.f64	d5, d0, d7
 8013442:	eea0 6b07 	vfma.f64	d6, d0, d7
 8013446:	2302      	movs	r3, #2
 8013448:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801344c:	e7af      	b.n	80133ae <atan+0x8e>
 801344e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8013452:	2303      	movs	r3, #3
 8013454:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8013458:	e7a9      	b.n	80133ae <atan+0x8e>
 801345a:	4a2c      	ldr	r2, [pc, #176]	; (801350c <atan+0x1ec>)
 801345c:	492c      	ldr	r1, [pc, #176]	; (8013510 <atan+0x1f0>)
 801345e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013462:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8013466:	ed93 5b00 	vldr	d5, [r3]
 801346a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801346e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013472:	ed92 6b00 	vldr	d6, [r2]
 8013476:	2d00      	cmp	r5, #0
 8013478:	ee36 7b47 	vsub.f64	d7, d6, d7
 801347c:	bfb8      	it	lt
 801347e:	eeb1 7b47 	vneglt.f64	d7, d7
 8013482:	e760      	b.n	8013346 <atan+0x26>
 8013484:	f3af 8000 	nop.w
 8013488:	54442d18 	.word	0x54442d18
 801348c:	3ff921fb 	.word	0x3ff921fb
 8013490:	54442d18 	.word	0x54442d18
 8013494:	bff921fb 	.word	0xbff921fb
 8013498:	8800759c 	.word	0x8800759c
 801349c:	7e37e43c 	.word	0x7e37e43c
 80134a0:	e322da11 	.word	0xe322da11
 80134a4:	3f90ad3a 	.word	0x3f90ad3a
 80134a8:	24760deb 	.word	0x24760deb
 80134ac:	3fa97b4b 	.word	0x3fa97b4b
 80134b0:	a0d03d51 	.word	0xa0d03d51
 80134b4:	3fb10d66 	.word	0x3fb10d66
 80134b8:	c54c206e 	.word	0xc54c206e
 80134bc:	3fb745cd 	.word	0x3fb745cd
 80134c0:	920083ff 	.word	0x920083ff
 80134c4:	3fc24924 	.word	0x3fc24924
 80134c8:	5555550d 	.word	0x5555550d
 80134cc:	3fd55555 	.word	0x3fd55555
 80134d0:	52defd9a 	.word	0x52defd9a
 80134d4:	bfadde2d 	.word	0xbfadde2d
 80134d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80134dc:	bfa2b444 	.word	0xbfa2b444
 80134e0:	af749a6d 	.word	0xaf749a6d
 80134e4:	bfb3b0f2 	.word	0xbfb3b0f2
 80134e8:	fe231671 	.word	0xfe231671
 80134ec:	bfbc71c6 	.word	0xbfbc71c6
 80134f0:	9998ebc4 	.word	0x9998ebc4
 80134f4:	bfc99999 	.word	0xbfc99999
 80134f8:	440fffff 	.word	0x440fffff
 80134fc:	7ff00000 	.word	0x7ff00000
 8013500:	3fdbffff 	.word	0x3fdbffff
 8013504:	3ff2ffff 	.word	0x3ff2ffff
 8013508:	40038000 	.word	0x40038000
 801350c:	08013be8 	.word	0x08013be8
 8013510:	08013c08 	.word	0x08013c08

08013514 <fabs>:
 8013514:	ec51 0b10 	vmov	r0, r1, d0
 8013518:	ee10 2a10 	vmov	r2, s0
 801351c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013520:	ec43 2b10 	vmov	d0, r2, r3
 8013524:	4770      	bx	lr
	...

08013528 <atanf>:
 8013528:	b538      	push	{r3, r4, r5, lr}
 801352a:	ee10 5a10 	vmov	r5, s0
 801352e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013532:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013536:	eef0 7a40 	vmov.f32	s15, s0
 801353a:	db0f      	blt.n	801355c <atanf+0x34>
 801353c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013540:	dd04      	ble.n	801354c <atanf+0x24>
 8013542:	ee70 7a00 	vadd.f32	s15, s0, s0
 8013546:	eeb0 0a67 	vmov.f32	s0, s15
 801354a:	bd38      	pop	{r3, r4, r5, pc}
 801354c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8013684 <atanf+0x15c>
 8013550:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8013688 <atanf+0x160>
 8013554:	2d00      	cmp	r5, #0
 8013556:	fe77 7a80 	vselgt.f32	s15, s15, s0
 801355a:	e7f4      	b.n	8013546 <atanf+0x1e>
 801355c:	4b4b      	ldr	r3, [pc, #300]	; (801368c <atanf+0x164>)
 801355e:	429c      	cmp	r4, r3
 8013560:	dc10      	bgt.n	8013584 <atanf+0x5c>
 8013562:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8013566:	da0a      	bge.n	801357e <atanf+0x56>
 8013568:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013690 <atanf+0x168>
 801356c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013570:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013574:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801357c:	dce3      	bgt.n	8013546 <atanf+0x1e>
 801357e:	f04f 33ff 	mov.w	r3, #4294967295
 8013582:	e013      	b.n	80135ac <atanf+0x84>
 8013584:	f000 f8a4 	bl	80136d0 <fabsf>
 8013588:	4b42      	ldr	r3, [pc, #264]	; (8013694 <atanf+0x16c>)
 801358a:	429c      	cmp	r4, r3
 801358c:	dc4f      	bgt.n	801362e <atanf+0x106>
 801358e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013592:	429c      	cmp	r4, r3
 8013594:	dc41      	bgt.n	801361a <atanf+0xf2>
 8013596:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801359a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801359e:	eea0 7a27 	vfma.f32	s14, s0, s15
 80135a2:	2300      	movs	r3, #0
 80135a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80135a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80135ac:	1c5a      	adds	r2, r3, #1
 80135ae:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80135b2:	eddf 5a39 	vldr	s11, [pc, #228]	; 8013698 <atanf+0x170>
 80135b6:	ed9f 6a39 	vldr	s12, [pc, #228]	; 801369c <atanf+0x174>
 80135ba:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80136a0 <atanf+0x178>
 80135be:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80136a4 <atanf+0x17c>
 80135c2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80135c6:	eea7 6a25 	vfma.f32	s12, s14, s11
 80135ca:	eddf 5a37 	vldr	s11, [pc, #220]	; 80136a8 <atanf+0x180>
 80135ce:	eee6 5a07 	vfma.f32	s11, s12, s14
 80135d2:	ed9f 6a36 	vldr	s12, [pc, #216]	; 80136ac <atanf+0x184>
 80135d6:	eea5 6a87 	vfma.f32	s12, s11, s14
 80135da:	eddf 5a35 	vldr	s11, [pc, #212]	; 80136b0 <atanf+0x188>
 80135de:	eee6 5a07 	vfma.f32	s11, s12, s14
 80135e2:	ed9f 6a34 	vldr	s12, [pc, #208]	; 80136b4 <atanf+0x18c>
 80135e6:	eea5 6a87 	vfma.f32	s12, s11, s14
 80135ea:	eddf 5a33 	vldr	s11, [pc, #204]	; 80136b8 <atanf+0x190>
 80135ee:	eee7 5a05 	vfma.f32	s11, s14, s10
 80135f2:	ed9f 5a32 	vldr	s10, [pc, #200]	; 80136bc <atanf+0x194>
 80135f6:	eea5 5a87 	vfma.f32	s10, s11, s14
 80135fa:	eddf 5a31 	vldr	s11, [pc, #196]	; 80136c0 <atanf+0x198>
 80135fe:	eee5 5a07 	vfma.f32	s11, s10, s14
 8013602:	eea5 0a87 	vfma.f32	s0, s11, s14
 8013606:	ee20 0a07 	vmul.f32	s0, s0, s14
 801360a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801360e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013612:	d121      	bne.n	8013658 <atanf+0x130>
 8013614:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013618:	e795      	b.n	8013546 <atanf+0x1e>
 801361a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801361e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013622:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013626:	2301      	movs	r3, #1
 8013628:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801362c:	e7be      	b.n	80135ac <atanf+0x84>
 801362e:	4b25      	ldr	r3, [pc, #148]	; (80136c4 <atanf+0x19c>)
 8013630:	429c      	cmp	r4, r3
 8013632:	dc0b      	bgt.n	801364c <atanf+0x124>
 8013634:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013638:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801363c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013640:	2302      	movs	r3, #2
 8013642:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801364a:	e7af      	b.n	80135ac <atanf+0x84>
 801364c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013650:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013654:	2303      	movs	r3, #3
 8013656:	e7a9      	b.n	80135ac <atanf+0x84>
 8013658:	4a1b      	ldr	r2, [pc, #108]	; (80136c8 <atanf+0x1a0>)
 801365a:	491c      	ldr	r1, [pc, #112]	; (80136cc <atanf+0x1a4>)
 801365c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013660:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013664:	ed93 7a00 	vldr	s14, [r3]
 8013668:	ee30 0a47 	vsub.f32	s0, s0, s14
 801366c:	2d00      	cmp	r5, #0
 801366e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013672:	ed92 0a00 	vldr	s0, [r2]
 8013676:	ee70 7a67 	vsub.f32	s15, s0, s15
 801367a:	bfb8      	it	lt
 801367c:	eef1 7a67 	vneglt.f32	s15, s15
 8013680:	e761      	b.n	8013546 <atanf+0x1e>
 8013682:	bf00      	nop
 8013684:	3fc90fdb 	.word	0x3fc90fdb
 8013688:	bfc90fdb 	.word	0xbfc90fdb
 801368c:	3edfffff 	.word	0x3edfffff
 8013690:	7149f2ca 	.word	0x7149f2ca
 8013694:	3f97ffff 	.word	0x3f97ffff
 8013698:	3c8569d7 	.word	0x3c8569d7
 801369c:	3d4bda59 	.word	0x3d4bda59
 80136a0:	bd15a221 	.word	0xbd15a221
 80136a4:	be4ccccd 	.word	0xbe4ccccd
 80136a8:	3d886b35 	.word	0x3d886b35
 80136ac:	3dba2e6e 	.word	0x3dba2e6e
 80136b0:	3e124925 	.word	0x3e124925
 80136b4:	3eaaaaab 	.word	0x3eaaaaab
 80136b8:	bd6ef16b 	.word	0xbd6ef16b
 80136bc:	bd9d8795 	.word	0xbd9d8795
 80136c0:	bde38e38 	.word	0xbde38e38
 80136c4:	401bffff 	.word	0x401bffff
 80136c8:	08013c28 	.word	0x08013c28
 80136cc:	08013c38 	.word	0x08013c38

080136d0 <fabsf>:
 80136d0:	ee10 3a10 	vmov	r3, s0
 80136d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80136d8:	ee00 3a10 	vmov	s0, r3
 80136dc:	4770      	bx	lr
	...

080136e0 <nanf>:
 80136e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80136e8 <nanf+0x8>
 80136e4:	4770      	bx	lr
 80136e6:	bf00      	nop
 80136e8:	7fc00000 	.word	0x7fc00000

080136ec <_init>:
 80136ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136ee:	bf00      	nop
 80136f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136f2:	bc08      	pop	{r3}
 80136f4:	469e      	mov	lr, r3
 80136f6:	4770      	bx	lr

080136f8 <_fini>:
 80136f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136fa:	bf00      	nop
 80136fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136fe:	bc08      	pop	{r3}
 8013700:	469e      	mov	lr, r3
 8013702:	4770      	bx	lr
