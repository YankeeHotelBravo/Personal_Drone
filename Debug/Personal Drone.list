
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014314  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  080145b8  080145b8  000245b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014b20  08014b20  00024b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014b28  08014b28  00024b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014b2c  08014b2c  00024b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  24000000  08014b30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000060c  240001f8  08014d28  000301f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000804  08014d28  00030804  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002bbc8  00000000  00000000  00030226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004537  00000000  00000000  0005bdee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017e8  00000000  00000000  00060328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016d8  00000000  00000000  00061b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000394ed  00000000  00000000  000631e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f75d  00000000  00000000  0009c6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016861a  00000000  00000000  000bbe32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0022444c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000076e4  00000000  00000000  002244a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801459c 	.word	0x0801459c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	0801459c 	.word	0x0801459c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <iBus_Check_CHKSUM>:

FSiA6B_iBus iBus;
uint8_t iBus_return;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000698:	81fb      	strh	r3, [r7, #14]

	for(int i=0; i<len-2;i++)
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	e00a      	b.n	80006b6 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	89fa      	ldrh	r2, [r7, #14]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2;i++)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	3301      	adds	r3, #1
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	3b02      	subs	r3, #2
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbef      	blt.n	80006a0 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8) && data[31]);
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	321e      	adds	r2, #30
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d10b      	bne.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d006      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	331f      	adds	r3, #31
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <iBus_Check_CHKSUM+0x60>
 80006e6:	2300      	movs	r3, #0
 80006e8:	b2db      	uxtb	r3, r3

}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0FFF;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3302      	adds	r3, #2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b21a      	sxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3303      	adds	r3, #3
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21b      	sxth	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b21b      	sxth	r3, r3
 8000716:	b29b      	uxth	r3, r3
 8000718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0FFF;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3304      	adds	r3, #4
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b21a      	sxth	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3305      	adds	r3, #5
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29b      	uxth	r3, r3
 800073a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800073e:	b29a      	uxth	r2, r3
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0FFF;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3306      	adds	r3, #6
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b21a      	sxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3307      	adds	r3, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	b21b      	sxth	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b21b      	sxth	r3, r3
 800075a:	b29b      	uxth	r3, r3
 800075c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000760:	b29a      	uxth	r2, r3
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0FFF;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3308      	adds	r3, #8
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b21a      	sxth	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3309      	adds	r3, #9
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21b      	sxth	r3, r3
 800077c:	b29b      	uxth	r3, r3
 800077e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000782:	b29a      	uxth	r2, r3
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0FFF;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	330a      	adds	r3, #10
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b21a      	sxth	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	330b      	adds	r3, #11
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21b      	sxth	r3, r3
 800079a:	4313      	orrs	r3, r2
 800079c:	b21b      	sxth	r3, r3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	811a      	strh	r2, [r3, #8]
	iBus->SwB = (data[12] | data[13]<<8) & 0x0FFF;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	330c      	adds	r3, #12
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	330d      	adds	r3, #13
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	815a      	strh	r2, [r3, #10]
	iBus->VrA = (data[14] | data[15]<<8) & 0x0FFF;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	330e      	adds	r3, #14
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	330f      	adds	r3, #15
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	821a      	strh	r2, [r3, #16]
	iBus->VrB = (data[16] | data[17]<<8) & 0x0FFF;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3310      	adds	r3, #16
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3311      	adds	r3, #17
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	b21b      	sxth	r3, r3
 8000804:	b29b      	uxth	r3, r3
 8000806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800080a:	b29a      	uxth	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	825a      	strh	r2, [r3, #18]
	iBus->SwC = (data[18] | data[19]<<8) & 0x0FFF;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3312      	adds	r3, #18
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b21a      	sxth	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3313      	adds	r3, #19
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	b29b      	uxth	r3, r3
 8000828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800082c:	b29a      	uxth	r2, r3
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	819a      	strh	r2, [r3, #12]
	iBus->SwD = (data[20] | data[21]<<8) & 0x0FFF;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3314      	adds	r3, #20
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b21a      	sxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3315      	adds	r3, #21
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21b      	sxth	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	b21b      	sxth	r3, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800084e:	b29a      	uxth	r2, r3
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	81da      	strh	r2, [r3, #14]

	iBus->FailSafe = (data[13] >> 4);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	330d      	adds	r3, #13
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	091b      	lsrs	r3, r3, #4
 800085c:	b2da      	uxtb	r2, r3
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	751a      	strb	r2, [r3, #20]
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <iBus_isActiveFailSafe>:

unsigned char iBus_isActiveFailSafe(FSiA6B_iBus* iBus)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7d1b      	ldrb	r3, [r3, #20]
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af04      	add	r7, sp, #16
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	4608      	mov	r0, r1
 800089a:	4611      	mov	r1, r2
 800089c:	461a      	mov	r2, r3
 800089e:	4603      	mov	r3, r0
 80008a0:	70fb      	strb	r3, [r7, #3]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70bb      	strb	r3, [r7, #2]
 80008a6:	4613      	mov	r3, r2
 80008a8:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 80008aa:	78fb      	ldrb	r3, [r7, #3]
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d81b      	bhi.n	80008e8 <MPU9250_Init+0x58>
 80008b0:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <MPU9250_Init+0x28>)
 80008b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b6:	bf00      	nop
 80008b8:	080008c9 	.word	0x080008c9
 80008bc:	080008d1 	.word	0x080008d1
 80008c0:	080008d9 	.word	0x080008d9
 80008c4:	080008e1 	.word	0x080008e1
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 80008c8:	4b5d      	ldr	r3, [pc, #372]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008ca:	4a5e      	ldr	r2, [pc, #376]	; (8000a44 <MPU9250_Init+0x1b4>)
 80008cc:	601a      	str	r2, [r3, #0]
		break;
 80008ce:	e00c      	b.n	80008ea <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80008d0:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008d2:	4a5d      	ldr	r2, [pc, #372]	; (8000a48 <MPU9250_Init+0x1b8>)
 80008d4:	601a      	str	r2, [r3, #0]
		break;
 80008d6:	e008      	b.n	80008ea <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80008d8:	4b59      	ldr	r3, [pc, #356]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008da:	4a5c      	ldr	r2, [pc, #368]	; (8000a4c <MPU9250_Init+0x1bc>)
 80008dc:	601a      	str	r2, [r3, #0]
		break;
 80008de:	e004      	b.n	80008ea <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80008e0:	4b57      	ldr	r3, [pc, #348]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008e2:	4a5b      	ldr	r2, [pc, #364]	; (8000a50 <MPU9250_Init+0x1c0>)
 80008e4:	601a      	str	r2, [r3, #0]
		break;
 80008e6:	e000      	b.n	80008ea <MPU9250_Init+0x5a>
	default:
		break;
 80008e8:	bf00      	nop
	}

	switch(Acc_FS)
 80008ea:	78bb      	ldrb	r3, [r7, #2]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d81f      	bhi.n	8000930 <MPU9250_Init+0xa0>
 80008f0:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <MPU9250_Init+0x68>)
 80008f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f6:	bf00      	nop
 80008f8:	08000909 	.word	0x08000909
 80008fc:	08000913 	.word	0x08000913
 8000900:	0800091d 	.word	0x0800091d
 8000904:	08000927 	.word	0x08000927
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 8000908:	4b52      	ldr	r3, [pc, #328]	; (8000a54 <MPU9250_Init+0x1c4>)
 800090a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800090e:	601a      	str	r2, [r3, #0]
		break;
 8000910:	e00f      	b.n	8000932 <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 8000912:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <MPU9250_Init+0x1c4>)
 8000914:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000918:	601a      	str	r2, [r3, #0]
		break;
 800091a:	e00a      	b.n	8000932 <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 800091c:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <MPU9250_Init+0x1c4>)
 800091e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000922:	601a      	str	r2, [r3, #0]
		break;
 8000924:	e005      	b.n	8000932 <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 8000926:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <MPU9250_Init+0x1c4>)
 8000928:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800092c:	601a      	str	r2, [r3, #0]
		break;
 800092e:	e000      	b.n	8000932 <MPU9250_Init+0xa2>
	default:
		break;
 8000930:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 8000932:	2364      	movs	r3, #100	; 0x64
 8000934:	9302      	str	r3, [sp, #8]
 8000936:	2301      	movs	r3, #1
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <MPU9250_Init+0x1c8>)
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2301      	movs	r3, #1
 8000940:	2275      	movs	r2, #117	; 0x75
 8000942:	21d0      	movs	r1, #208	; 0xd0
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f007 ff8d 	bl	8008864 <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 800094a:	4b43      	ldr	r3, [pc, #268]	; (8000a58 <MPU9250_Init+0x1c8>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b71      	cmp	r3, #113	; 0x71
 8000950:	d171      	bne.n	8000a36 <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 8000952:	4b42      	ldr	r3, [pc, #264]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000958:	2364      	movs	r3, #100	; 0x64
 800095a:	9302      	str	r3, [sp, #8]
 800095c:	2301      	movs	r3, #1
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	4b3e      	ldr	r3, [pc, #248]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2301      	movs	r3, #1
 8000966:	2219      	movs	r2, #25
 8000968:	21d0      	movs	r1, #208	; 0xd0
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f007 fe66 	bl	800863c <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000970:	200a      	movs	r0, #10
 8000972:	f004 fc75 	bl	8005260 <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 8000976:	4a39      	ldr	r2, [pc, #228]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000978:	787b      	ldrb	r3, [r7, #1]
 800097a:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	2301      	movs	r3, #1
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	4b35      	ldr	r3, [pc, #212]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2301      	movs	r3, #1
 800098a:	221a      	movs	r2, #26
 800098c:	21d0      	movs	r1, #208	; 0xd0
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f007 fe54 	bl	800863c <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000994:	200a      	movs	r0, #10
 8000996:	f004 fc63 	bl	8005260 <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009a2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 80009a4:	2364      	movs	r3, #100	; 0x64
 80009a6:	9302      	str	r3, [sp, #8]
 80009a8:	2301      	movs	r3, #1
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2301      	movs	r3, #1
 80009b2:	221b      	movs	r2, #27
 80009b4:	21d0      	movs	r1, #208	; 0xd0
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f007 fe40 	bl	800863c <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009bc:	200a      	movs	r0, #10
 80009be:	f004 fc4f 	bl	8005260 <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 80009c2:	78bb      	ldrb	r3, [r7, #2]
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ca:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 80009cc:	2364      	movs	r3, #100	; 0x64
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	2301      	movs	r3, #1
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2301      	movs	r3, #1
 80009da:	221c      	movs	r2, #28
 80009dc:	21d0      	movs	r1, #208	; 0xd0
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f007 fe2c 	bl	800863c <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009e4:	200a      	movs	r0, #10
 80009e6:	f004 fc3b 	bl	8005260 <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ec:	7c3b      	ldrb	r3, [r7, #16]
 80009ee:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	9302      	str	r3, [sp, #8]
 80009f4:	2301      	movs	r3, #1
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2301      	movs	r3, #1
 80009fe:	221d      	movs	r2, #29
 8000a00:	21d0      	movs	r1, #208	; 0xd0
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f007 fe1a 	bl	800863c <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f004 fc29 	bl	8005260 <HAL_Delay>

		MPU9250_tx = 0x00;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	9302      	str	r3, [sp, #8]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2301      	movs	r3, #1
 8000a22:	226b      	movs	r2, #107	; 0x6b
 8000a24:	21d0      	movs	r1, #208	; 0xd0
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f007 fe08 	bl	800863c <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000a2c:	200a      	movs	r0, #10
 8000a2e:	f004 fc17 	bl	8005260 <HAL_Delay>

		return 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <MPU9250_Init+0x1a8>
	}
	return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	24000000 	.word	0x24000000
 8000a44:	43030000 	.word	0x43030000
 8000a48:	42830000 	.word	0x42830000
 8000a4c:	42033333 	.word	0x42033333
 8000a50:	41833333 	.word	0x41833333
 8000a54:	24000004 	.word	0x24000004
 8000a58:	240002f9 	.word	0x240002f9
 8000a5c:	24000279 	.word	0x24000279

08000a60 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af04      	add	r7, sp, #16
 8000a66:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000a6e:	2364      	movs	r3, #100	; 0x64
 8000a70:	9302      	str	r3, [sp, #8]
 8000a72:	2301      	movs	r3, #1
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	226a      	movs	r2, #106	; 0x6a
 8000a7e:	21d0      	movs	r1, #208	; 0xd0
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f007 fddb 	bl	800863c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a86:	200a      	movs	r0, #10
 8000a88:	f004 fbea 	bl	8005260 <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a8e:	2202      	movs	r2, #2
 8000a90:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 8000a92:	2364      	movs	r3, #100	; 0x64
 8000a94:	9302      	str	r3, [sp, #8]
 8000a96:	2301      	movs	r3, #1
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	2237      	movs	r2, #55	; 0x37
 8000aa2:	21d0      	movs	r1, #208	; 0xd0
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f007 fdc9 	bl	800863c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f004 fbd8 	bl	8005260 <HAL_Delay>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	24000279 	.word	0x24000279

08000abc <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af04      	add	r7, sp, #16
 8000ac2:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <MPU9250_Master+0xa0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	9302      	str	r3, [sp, #8]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <MPU9250_Master+0xa0>)
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	2237      	movs	r2, #55	; 0x37
 8000ada:	21d0      	movs	r1, #208	; 0xd0
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f007 fdad 	bl	800863c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ae2:	200a      	movs	r0, #10
 8000ae4:	f004 fbbc 	bl	8005260 <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <MPU9250_Master+0xa0>)
 8000aea:	2220      	movs	r2, #32
 8000aec:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2301      	movs	r3, #1
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <MPU9250_Master+0xa0>)
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	226a      	movs	r2, #106	; 0x6a
 8000afe:	21d0      	movs	r1, #208	; 0xd0
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f007 fd9b 	bl	800863c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b06:	200a      	movs	r0, #10
 8000b08:	f004 fbaa 	bl	8005260 <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b0e:	220d      	movs	r2, #13
 8000b10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 8000b12:	2364      	movs	r3, #100	; 0x64
 8000b14:	9302      	str	r3, [sp, #8]
 8000b16:	2301      	movs	r3, #1
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	2224      	movs	r2, #36	; 0x24
 8000b22:	21d0      	movs	r1, #208	; 0xd0
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f007 fd89 	bl	800863c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f004 fb98 	bl	8005260 <HAL_Delay>

	MPU9250_tx = 0x00;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000b36:	2364      	movs	r3, #100	; 0x64
 8000b38:	9302      	str	r3, [sp, #8]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2301      	movs	r3, #1
 8000b44:	226b      	movs	r2, #107	; 0x6b
 8000b46:	21d0      	movs	r1, #208	; 0xd0
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f007 fd77 	bl	800863c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b4e:	200a      	movs	r0, #10
 8000b50:	f004 fb86 	bl	8005260 <HAL_Delay>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	24000279 	.word	0x24000279

08000b60 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *DataStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af04      	add	r7, sp, #16
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000b6a:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <MPU9250_AK8963_Setup+0xa0>)
 8000b6c:	2216      	movs	r2, #22
 8000b6e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000b70:	2364      	movs	r3, #100	; 0x64
 8000b72:	9302      	str	r3, [sp, #8]
 8000b74:	2301      	movs	r3, #1
 8000b76:	9301      	str	r3, [sp, #4]
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MPU9250_AK8963_Setup+0xa0>)
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	220a      	movs	r2, #10
 8000b80:	2118      	movs	r1, #24
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f007 fd5a 	bl	800863c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b88:	200a      	movs	r0, #10
 8000b8a:	f004 fb69 	bl	8005260 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_MPU9250_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000b8e:	2364      	movs	r3, #100	; 0x64
 8000b90:	9302      	str	r3, [sp, #8]
 8000b92:	2303      	movs	r3, #3
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	2118      	movs	r1, #24
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f007 fe5f 	bl	8008864 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f004 fb5a 	bl	8005260 <HAL_Delay>

	DataStruct->ASAX = MPU9250_rx_buf[0];
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	DataStruct->ASAY = MPU9250_rx_buf[1];
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bb8:	785a      	ldrb	r2, [r3, #1]
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	DataStruct->ASAZ = MPU9250_rx_buf[2];
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bc2:	789a      	ldrb	r2, [r3, #2]
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 8000bca:	2364      	movs	r3, #100	; 0x64
 8000bcc:	9302      	str	r3, [sp, #8]
 8000bce:	2303      	movs	r3, #3
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MPU9250_AK8963_Setup+0xa8>)
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2118      	movs	r1, #24
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f007 fe41 	bl	8008864 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000be2:	200a      	movs	r0, #10
 8000be4:	f004 fb3c 	bl	8005260 <HAL_Delay>

	if(AK8963_WAI == 0b01001000) return 1;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MPU9250_AK8963_Setup+0xa8>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b48      	cmp	r3, #72	; 0x48
 8000bee:	d101      	bne.n	8000bf4 <MPU9250_AK8963_Setup+0x94>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <MPU9250_AK8963_Setup+0x96>
	return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	24000279 	.word	0x24000279
 8000c04:	240002fc 	.word	0x240002fc
 8000c08:	240002f8 	.word	0x240002f8

08000c0c <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af04      	add	r7, sp, #16
 8000c12:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c16:	228c      	movs	r2, #140	; 0x8c
 8000c18:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000c1a:	2364      	movs	r3, #100	; 0x64
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2301      	movs	r3, #1
 8000c28:	2225      	movs	r2, #37	; 0x25
 8000c2a:	21d0      	movs	r1, #208	; 0xd0
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f007 fd05 	bl	800863c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c32:	200a      	movs	r0, #10
 8000c34:	f004 fb14 	bl	8005260 <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000c3e:	2364      	movs	r3, #100	; 0x64
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	2301      	movs	r3, #1
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2226      	movs	r2, #38	; 0x26
 8000c4e:	21d0      	movs	r1, #208	; 0xd0
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f007 fcf3 	bl	800863c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c56:	200a      	movs	r0, #10
 8000c58:	f004 fb02 	bl	8005260 <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c5e:	2287      	movs	r2, #135	; 0x87
 8000c60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000c62:	2364      	movs	r3, #100	; 0x64
 8000c64:	9302      	str	r3, [sp, #8]
 8000c66:	2301      	movs	r3, #1
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	2227      	movs	r2, #39	; 0x27
 8000c72:	21d0      	movs	r1, #208	; 0xd0
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f007 fce1 	bl	800863c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f004 faf0 	bl	8005260 <HAL_Delay>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24000279 	.word	0x24000279

08000c8c <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000c94:	2314      	movs	r3, #20
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <MPU9250_Read_All+0x24>)
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	223b      	movs	r2, #59	; 0x3b
 8000ca0:	21d0      	movs	r1, #208	; 0xd0
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f007 fef8 	bl	8008a98 <HAL_I2C_Mem_Read_DMA>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240002fc 	.word	0x240002fc
 8000cb4:	00000000 	.word	0x00000000

08000cb8 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000cc0:	4bb7      	ldr	r3, [pc, #732]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	4bb5      	ldr	r3, [pc, #724]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000cca:	785b      	ldrb	r3, [r3, #1]
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	425b      	negs	r3, r3
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000cde:	4bb0      	ldr	r3, [pc, #704]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000ce0:	789b      	ldrb	r3, [r3, #2]
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	4bae      	ldr	r3, [pc, #696]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000ce8:	78db      	ldrb	r3, [r3, #3]
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]); // Didn't Save Temp Value
 8000cf4:	4baa      	ldr	r3, [pc, #680]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000cf6:	791b      	ldrb	r3, [r3, #4]
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	4ba8      	ldr	r3, [pc, #672]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000cfe:	795b      	ldrb	r3, [r3, #5]
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	b21a      	sxth	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	809a      	strh	r2, [r3, #4]
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000d0a:	4ba5      	ldr	r3, [pc, #660]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d0c:	7a1b      	ldrb	r3, [r3, #8]
 8000d0e:	021b      	lsls	r3, r3, #8
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	4ba3      	ldr	r3, [pc, #652]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d14:	7a5b      	ldrb	r3, [r3, #9]
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b21a      	sxth	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000d20:	4b9f      	ldr	r3, [pc, #636]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d22:	7a9b      	ldrb	r3, [r3, #10]
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	b21a      	sxth	r2, r3
 8000d28:	4b9d      	ldr	r3, [pc, #628]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d2a:	7adb      	ldrb	r3, [r3, #11]
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	425b      	negs	r3, r3
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	b21a      	sxth	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000d3e:	4b98      	ldr	r3, [pc, #608]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d40:	7b1b      	ldrb	r3, [r3, #12]
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	4b96      	ldr	r3, [pc, #600]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d48:	7b5b      	ldrb	r3, [r3, #13]
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	b21b      	sxth	r3, r3
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	425b      	negs	r3, r3
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	831a      	strh	r2, [r3, #24]
	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000d5c:	4b90      	ldr	r3, [pc, #576]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d5e:	7bdb      	ldrb	r3, [r3, #15]
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	b21a      	sxth	r2, r3
 8000d64:	4b8e      	ldr	r3, [pc, #568]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d66:	7b9b      	ldrb	r3, [r3, #14]
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	b21b      	sxth	r3, r3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	425b      	negs	r3, r3
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000d7c:	4b88      	ldr	r3, [pc, #544]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d7e:	7c5b      	ldrb	r3, [r3, #17]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	4b86      	ldr	r3, [pc, #536]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d86:	7c1b      	ldrb	r3, [r3, #16]
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000d94:	4b82      	ldr	r3, [pc, #520]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d96:	7cdb      	ldrb	r3, [r3, #19]
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	b21a      	sxth	r2, r3
 8000d9c:	4b80      	ldr	r3, [pc, #512]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d9e:	7c9b      	ldrb	r3, [r3, #18]
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	4313      	orrs	r3, r2
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db2:	ee07 3a90 	vmov	s15, r3
 8000db6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dba:	4b7a      	ldr	r3, [pc, #488]	; (8000fa4 <MPU9250_Parsing+0x2ec>)
 8000dbc:	ed93 7a00 	vldr	s14, [r3]
 8000dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dd0:	ee07 3a90 	vmov	s15, r3
 8000dd4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dd8:	4b72      	ldr	r3, [pc, #456]	; (8000fa4 <MPU9250_Parsing+0x2ec>)
 8000dda:	ed93 7a00 	vldr	s14, [r3]
 8000dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = ((DataStruct->Az_Raw / MPU9250_Acc_LSB)-0.15) / 1.08;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dee:	ee07 3a90 	vmov	s15, r3
 8000df2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000df6:	4b6b      	ldr	r3, [pc, #428]	; (8000fa4 <MPU9250_Parsing+0x2ec>)
 8000df8:	ed93 7a00 	vldr	s14, [r3]
 8000dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e04:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8000f90 <MPU9250_Parsing+0x2d8>
 8000e08:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000e0c:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8000f98 <MPU9250_Parsing+0x2e0>
 8000e10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000e24:	ee07 3a90 	vmov	s15, r3
 8000e28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e2c:	4b5e      	ldr	r3, [pc, #376]	; (8000fa8 <MPU9250_Parsing+0x2f0>)
 8000e2e:	ed93 7a00 	vldr	s14, [r3]
 8000e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e4a:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <MPU9250_Parsing+0x2f0>)
 8000e4c:	ed93 7a00 	vldr	s14, [r3]
 8000e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e68:	4b4f      	ldr	r3, [pc, #316]	; (8000fa8 <MPU9250_Parsing+0x2f0>)
 8000e6a:	ed93 7a00 	vldr	s14, [r3]
 8000e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8000e7e:	461a      	mov	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000e86:	3b80      	subs	r3, #128	; 0x80
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	da00      	bge.n	8000e8e <MPU9250_Parsing+0x1d6>
 8000e8c:	33ff      	adds	r3, #255	; 0xff
 8000e8e:	121b      	asrs	r3, r3, #8
 8000e90:	3301      	adds	r3, #1
 8000e92:	fb03 f302 	mul.w	r3, r3, r2
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e9e:	4b43      	ldr	r3, [pc, #268]	; (8000fac <MPU9250_Parsing+0x2f4>)
 8000ea0:	edd3 7a00 	vldr	s15, [r3]
 8000ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000ebc:	3b80      	subs	r3, #128	; 0x80
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	da00      	bge.n	8000ec4 <MPU9250_Parsing+0x20c>
 8000ec2:	33ff      	adds	r3, #255	; 0xff
 8000ec4:	121b      	asrs	r3, r3, #8
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	fb03 f302 	mul.w	r3, r3, r2
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed4:	4b35      	ldr	r3, [pc, #212]	; (8000fac <MPU9250_Parsing+0x2f4>)
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000ef2:	3b80      	subs	r3, #128	; 0x80
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	da00      	bge.n	8000efa <MPU9250_Parsing+0x242>
 8000ef8:	33ff      	adds	r3, #255	; 0xff
 8000efa:	121b      	asrs	r3, r3, #8
 8000efc:	3301      	adds	r3, #1
 8000efe:	fb03 f302 	mul.w	r3, r3, r2
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f0a:	4b28      	ldr	r3, [pc, #160]	; (8000fac <MPU9250_Parsing+0x2f4>)
 8000f0c:	edd3 7a00 	vldr	s15, [r3]
 8000f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	ed93 7a07 	vldr	s14, [r3, #28]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My -= DataStruct->My_Offset;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8000f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8000f8e:	e011      	b.n	8000fb4 <MPU9250_Parsing+0x2fc>
 8000f90:	33333333 	.word	0x33333333
 8000f94:	3fc33333 	.word	0x3fc33333
 8000f98:	147ae148 	.word	0x147ae148
 8000f9c:	3ff147ae 	.word	0x3ff147ae
 8000fa0:	240002fc 	.word	0x240002fc
 8000fa4:	24000004 	.word	0x24000004
 8000fa8:	24000000 	.word	0x24000000
 8000fac:	24000008 	.word	0x24000008
 8000fb0:	3c8efa35 	.word	0x3c8efa35
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8000fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fca:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8000fb0 <MPU9250_Parsing+0x2f8>
 8000fce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fde:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8000fb0 <MPU9250_Parsing+0x2f8>
 8000fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000ff2:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8000fb0 <MPU9250_Parsing+0x2f8>
 8000ff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	0000      	movs	r0, r0
	...

08001010 <MPU9250_Parsing_NoOffset>:

void MPU9250_Parsing_NoOffset(MPU9250_t *DataStruct)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8001018:	4bad      	ldr	r3, [pc, #692]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b21a      	sxth	r2, r3
 8001020:	4bab      	ldr	r3, [pc, #684]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 8001022:	785b      	ldrb	r3, [r3, #1]
 8001024:	b21b      	sxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b21b      	sxth	r3, r3
 800102a:	b29b      	uxth	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	b29b      	uxth	r3, r3
 8001030:	b21a      	sxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8001036:	4ba6      	ldr	r3, [pc, #664]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 8001038:	789b      	ldrb	r3, [r3, #2]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	4ba4      	ldr	r3, [pc, #656]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 8001040:	78db      	ldrb	r3, [r3, #3]
 8001042:	b21b      	sxth	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b21a      	sxth	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]); // Didn't Save Temp Value
 800104c:	4ba0      	ldr	r3, [pc, #640]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 800104e:	791b      	ldrb	r3, [r3, #4]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21a      	sxth	r2, r3
 8001054:	4b9e      	ldr	r3, [pc, #632]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 8001056:	795b      	ldrb	r3, [r3, #5]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21a      	sxth	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	809a      	strh	r2, [r3, #4]
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8001062:	4b9b      	ldr	r3, [pc, #620]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 8001064:	7a1b      	ldrb	r3, [r3, #8]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	4b99      	ldr	r3, [pc, #612]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 800106c:	7a5b      	ldrb	r3, [r3, #9]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21a      	sxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8001078:	4b95      	ldr	r3, [pc, #596]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 800107a:	7a9b      	ldrb	r3, [r3, #10]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b93      	ldr	r3, [pc, #588]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 8001082:	7adb      	ldrb	r3, [r3, #11]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21b      	sxth	r3, r3
 800108a:	b29b      	uxth	r3, r3
 800108c:	425b      	negs	r3, r3
 800108e:	b29b      	uxth	r3, r3
 8001090:	b21a      	sxth	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8001096:	4b8e      	ldr	r3, [pc, #568]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 8001098:	7b1b      	ldrb	r3, [r3, #12]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	4b8c      	ldr	r3, [pc, #560]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 80010a0:	7b5b      	ldrb	r3, [r3, #13]
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	425b      	negs	r3, r3
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	831a      	strh	r2, [r3, #24]
	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 80010b4:	4b86      	ldr	r3, [pc, #536]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 80010b6:	7bdb      	ldrb	r3, [r3, #15]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	4b84      	ldr	r3, [pc, #528]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 80010be:	7b9b      	ldrb	r3, [r3, #14]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	425b      	negs	r3, r3
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 80010d4:	4b7e      	ldr	r3, [pc, #504]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 80010d6:	7c5b      	ldrb	r3, [r3, #17]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	4b7c      	ldr	r3, [pc, #496]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 80010de:	7c1b      	ldrb	r3, [r3, #16]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 80010ec:	4b78      	ldr	r3, [pc, #480]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 80010ee:	7cdb      	ldrb	r3, [r3, #19]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	4b76      	ldr	r3, [pc, #472]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 80010f6:	7c9b      	ldrb	r3, [r3, #18]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001112:	4b70      	ldr	r3, [pc, #448]	; (80012d4 <MPU9250_Parsing_NoOffset+0x2c4>)
 8001114:	ed93 7a00 	vldr	s14, [r3]
 8001118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001130:	4b68      	ldr	r3, [pc, #416]	; (80012d4 <MPU9250_Parsing_NoOffset+0x2c4>)
 8001132:	ed93 7a00 	vldr	s14, [r3]
 8001136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = ((DataStruct->Az_Raw / MPU9250_Acc_LSB)-0.15) / 1.08;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800114e:	4b61      	ldr	r3, [pc, #388]	; (80012d4 <MPU9250_Parsing_NoOffset+0x2c4>)
 8001150:	ed93 7a00 	vldr	s14, [r3]
 8001154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001158:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800115c:	ed9f 6b58 	vldr	d6, [pc, #352]	; 80012c0 <MPU9250_Parsing_NoOffset+0x2b0>
 8001160:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001164:	ed9f 5b58 	vldr	d5, [pc, #352]	; 80012c8 <MPU9250_Parsing_NoOffset+0x2b8>
 8001168:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800116c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001184:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <MPU9250_Parsing_NoOffset+0x2c8>)
 8001186:	ed93 7a00 	vldr	s14, [r3]
 800118a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011a2:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80011a4:	ed93 7a00 	vldr	s14, [r3]
 80011a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80011b8:	ee07 3a90 	vmov	s15, r3
 80011bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011c0:	4b45      	ldr	r3, [pc, #276]	; (80012d8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80011c2:	ed93 7a00 	vldr	s14, [r3]
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80011d6:	461a      	mov	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80011de:	3b80      	subs	r3, #128	; 0x80
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	da00      	bge.n	80011e6 <MPU9250_Parsing_NoOffset+0x1d6>
 80011e4:	33ff      	adds	r3, #255	; 0xff
 80011e6:	121b      	asrs	r3, r3, #8
 80011e8:	3301      	adds	r3, #1
 80011ea:	fb03 f302 	mul.w	r3, r3, r2
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f6:	4b39      	ldr	r3, [pc, #228]	; (80012dc <MPU9250_Parsing_NoOffset+0x2cc>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800120c:	461a      	mov	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001214:	3b80      	subs	r3, #128	; 0x80
 8001216:	2b00      	cmp	r3, #0
 8001218:	da00      	bge.n	800121c <MPU9250_Parsing_NoOffset+0x20c>
 800121a:	33ff      	adds	r3, #255	; 0xff
 800121c:	121b      	asrs	r3, r3, #8
 800121e:	3301      	adds	r3, #1
 8001220:	fb03 f302 	mul.w	r3, r3, r2
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122c:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <MPU9250_Parsing_NoOffset+0x2cc>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001242:	461a      	mov	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800124a:	3b80      	subs	r3, #128	; 0x80
 800124c:	2b00      	cmp	r3, #0
 800124e:	da00      	bge.n	8001252 <MPU9250_Parsing_NoOffset+0x242>
 8001250:	33ff      	adds	r3, #255	; 0xff
 8001252:	121b      	asrs	r3, r3, #8
 8001254:	3301      	adds	r3, #1
 8001256:	fb03 f302 	mul.w	r3, r3, r2
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MPU9250_Parsing_NoOffset+0x2cc>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	edd3 7a07 	vldr	s15, [r3, #28]
 8001278:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80012e0 <MPU9250_Parsing_NoOffset+0x2d0>
 800127c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	edd3 7a08 	vldr	s15, [r3, #32]
 800128c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80012e0 <MPU9250_Parsing_NoOffset+0x2d0>
 8001290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80012a0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80012e0 <MPU9250_Parsing_NoOffset+0x2d0>
 80012a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	f3af 8000 	nop.w
 80012c0:	33333333 	.word	0x33333333
 80012c4:	3fc33333 	.word	0x3fc33333
 80012c8:	147ae148 	.word	0x147ae148
 80012cc:	3ff147ae 	.word	0x3ff147ae
 80012d0:	240002fc 	.word	0x240002fc
 80012d4:	24000004 	.word	0x24000004
 80012d8:	24000000 	.word	0x24000000
 80012dc:	24000008 	.word	0x24000008
 80012e0:	3c8efa35 	.word	0x3c8efa35

080012e4 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0ae      	sub	sp, #184	; 0xb8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80012ee:	edc7 0a08 	vstr	s1, [r7, #32]
 80012f2:	ed87 1a07 	vstr	s2, [r7, #28]
 80012f6:	edc7 1a06 	vstr	s3, [r7, #24]
 80012fa:	ed87 2a05 	vstr	s4, [r7, #20]
 80012fe:	edc7 2a04 	vstr	s5, [r7, #16]
 8001302:	ed87 3a03 	vstr	s6, [r7, #12]
 8001306:	edc7 3a02 	vstr	s7, [r7, #8]
 800130a:	ed87 4a01 	vstr	s8, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 800130e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001312:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131a:	d11d      	bne.n	8001358 <MadgwickAHRSupdate+0x74>
 800131c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001320:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001328:	d116      	bne.n	8001358 <MadgwickAHRSupdate+0x74>
 800132a:	edd7 7a01 	vldr	s15, [r7, #4]
 800132e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001336:	d10f      	bne.n	8001358 <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8001338:	edd7 2a04 	vldr	s5, [r7, #16]
 800133c:	ed97 2a05 	vldr	s4, [r7, #20]
 8001340:	edd7 1a06 	vldr	s3, [r7, #24]
 8001344:	ed97 1a07 	vldr	s2, [r7, #28]
 8001348:	edd7 0a08 	vldr	s1, [r7, #32]
 800134c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001350:	f000 ffd6 	bl	8002300 <MadgwickAHRSupdateIMU>
		return;
 8001354:	f000 bfb4 	b.w	80022c0 <MadgwickAHRSupdate+0xfdc>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001358:	4be6      	ldr	r3, [pc, #920]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	eeb1 7a67 	vneg.f32	s14, s15
 8001362:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001366:	ee27 7a27 	vmul.f32	s14, s14, s15
 800136a:	4be3      	ldr	r3, [pc, #908]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 800136c:	edd3 6a00 	vldr	s13, [r3]
 8001370:	edd7 7a08 	vldr	s15, [r7, #32]
 8001374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001378:	ee37 7a67 	vsub.f32	s14, s14, s15
 800137c:	4bdf      	ldr	r3, [pc, #892]	; (80016fc <MadgwickAHRSupdate+0x418>)
 800137e:	edd3 6a00 	vldr	s13, [r3]
 8001382:	edd7 7a07 	vldr	s15, [r7, #28]
 8001386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001396:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800139a:	4bd9      	ldr	r3, [pc, #868]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 800139c:	ed93 7a00 	vldr	s14, [r3]
 80013a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a8:	4bd3      	ldr	r3, [pc, #844]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 80013aa:	edd3 6a00 	vldr	s13, [r3]
 80013ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80013b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ba:	4bd0      	ldr	r3, [pc, #832]	; (80016fc <MadgwickAHRSupdate+0x418>)
 80013bc:	edd3 6a00 	vldr	s13, [r3]
 80013c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80013c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80013d8:	4bc9      	ldr	r3, [pc, #804]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 80013da:	ed93 7a00 	vldr	s14, [r3]
 80013de:	edd7 7a08 	vldr	s15, [r7, #32]
 80013e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013e6:	4bc3      	ldr	r3, [pc, #780]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 80013e8:	edd3 6a00 	vldr	s13, [r3]
 80013ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80013f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013f8:	4bc0      	ldr	r3, [pc, #768]	; (80016fc <MadgwickAHRSupdate+0x418>)
 80013fa:	edd3 6a00 	vldr	s13, [r3]
 80013fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800140e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001412:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001416:	4bba      	ldr	r3, [pc, #744]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 8001418:	ed93 7a00 	vldr	s14, [r3]
 800141c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001420:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001424:	4bb3      	ldr	r3, [pc, #716]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 8001426:	edd3 6a00 	vldr	s13, [r3]
 800142a:	edd7 7a08 	vldr	s15, [r7, #32]
 800142e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001436:	4bb0      	ldr	r3, [pc, #704]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 8001438:	edd3 6a00 	vldr	s13, [r3]
 800143c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001448:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800144c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001450:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001454:	edd7 7a06 	vldr	s15, [r7, #24]
 8001458:	eef5 7a40 	vcmp.f32	s15, #0.0
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	d10e      	bne.n	8001480 <MadgwickAHRSupdate+0x19c>
 8001462:	edd7 7a05 	vldr	s15, [r7, #20]
 8001466:	eef5 7a40 	vcmp.f32	s15, #0.0
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	d107      	bne.n	8001480 <MadgwickAHRSupdate+0x19c>
 8001470:	edd7 7a04 	vldr	s15, [r7, #16]
 8001474:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147c:	f000 85a6 	beq.w	8001fcc <MadgwickAHRSupdate+0xce8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001480:	edd7 7a06 	vldr	s15, [r7, #24]
 8001484:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001488:	edd7 7a05 	vldr	s15, [r7, #20]
 800148c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001494:	edd7 7a04 	vldr	s15, [r7, #16]
 8001498:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800149c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	f001 fb5a 	bl	8002b5c <invSqrt>
 80014a8:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 80014ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80014b0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b8:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 80014bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80014c0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c8:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 80014cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80014d0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d8:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80014dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80014e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80014e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001500:	f001 fb2c 	bl	8002b5c <invSqrt>
 8001504:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 8001508:	ed97 7a03 	vldr	s14, [r7, #12]
 800150c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001514:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8001518:	ed97 7a02 	vldr	s14, [r7, #8]
 800151c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001524:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8001528:	ed97 7a01 	vldr	s14, [r7, #4]
 800152c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001534:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001538:	4b71      	ldr	r3, [pc, #452]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 800153a:	edd3 7a00 	vldr	s15, [r3]
 800153e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001542:	ed97 7a03 	vldr	s14, [r7, #12]
 8001546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 800154e:	4b6c      	ldr	r3, [pc, #432]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001558:	ed97 7a02 	vldr	s14, [r7, #8]
 800155c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001560:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8001564:	4b66      	ldr	r3, [pc, #408]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800156e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001576:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 800157a:	4b5e      	ldr	r3, [pc, #376]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001584:	ed97 7a03 	vldr	s14, [r7, #12]
 8001588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 8001590:	4b5b      	ldr	r3, [pc, #364]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800159a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 800159e:	4b55      	ldr	r3, [pc, #340]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015a8:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 80015ac:	4b52      	ldr	r3, [pc, #328]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015b6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 80015ba:	4b50      	ldr	r3, [pc, #320]	; (80016fc <MadgwickAHRSupdate+0x418>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015c4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 80015c8:	4b4d      	ldr	r3, [pc, #308]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015d2:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015dc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 80015e0:	4b45      	ldr	r3, [pc, #276]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015ea:	4b44      	ldr	r3, [pc, #272]	; (80016fc <MadgwickAHRSupdate+0x418>)
 80015ec:	edd3 7a00 	vldr	s15, [r3]
 80015f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 80015f8:	4b41      	ldr	r3, [pc, #260]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 80015fa:	ed93 7a00 	vldr	s14, [r3]
 80015fe:	4b40      	ldr	r3, [pc, #256]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 8001600:	edd3 7a00 	vldr	s15, [r3]
 8001604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001608:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 800160c:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 800160e:	ed93 7a00 	vldr	s14, [r3]
 8001612:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 8001620:	4b37      	ldr	r3, [pc, #220]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 8001622:	ed93 7a00 	vldr	s14, [r3]
 8001626:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 8001628:	edd3 7a00 	vldr	s15, [r3]
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001630:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 8001634:	4b32      	ldr	r3, [pc, #200]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 8001636:	ed93 7a00 	vldr	s14, [r3]
 800163a:	4b30      	ldr	r3, [pc, #192]	; (80016fc <MadgwickAHRSupdate+0x418>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001644:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 8001648:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 800164a:	ed93 7a00 	vldr	s14, [r3]
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001658:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 800165c:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 800165e:	ed93 7a00 	vldr	s14, [r3]
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 8001670:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 8001672:	ed93 7a00 	vldr	s14, [r3]
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <MadgwickAHRSupdate+0x418>)
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001680:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 8001686:	ed93 7a00 	vldr	s14, [r3]
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001694:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 800169a:	ed93 7a00 	vldr	s14, [r3]
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <MadgwickAHRSupdate+0x418>)
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <MadgwickAHRSupdate+0x418>)
 80016ae:	ed93 7a00 	vldr	s14, [r3]
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MadgwickAHRSupdate+0x418>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016bc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80016c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80016c4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80016c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <MadgwickAHRSupdate+0x418>)
 80016ce:	edd3 6a00 	vldr	s13, [r3]
 80016d2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80016d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 80016e0:	edd3 6a00 	vldr	s13, [r3]
 80016e4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80016e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016f0:	e008      	b.n	8001704 <MadgwickAHRSupdate+0x420>
 80016f2:	bf00      	nop
 80016f4:	24000214 	.word	0x24000214
 80016f8:	24000218 	.word	0x24000218
 80016fc:	2400021c 	.word	0x2400021c
 8001700:	24000010 	.word	0x24000010
 8001704:	edd7 6a03 	vldr	s13, [r7, #12]
 8001708:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800170c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001710:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001714:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001718:	edd7 7a02 	vldr	s15, [r7, #8]
 800171c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001720:	4bf5      	ldr	r3, [pc, #980]	; (8001af8 <MadgwickAHRSupdate+0x814>)
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800172e:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001732:	edd7 7a01 	vldr	s15, [r7, #4]
 8001736:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800173a:	4bf0      	ldr	r3, [pc, #960]	; (8001afc <MadgwickAHRSupdate+0x818>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001748:	edd7 6a03 	vldr	s13, [r7, #12]
 800174c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001754:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001758:	edd7 6a03 	vldr	s13, [r7, #12]
 800175c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001768:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 800176c:	4be3      	ldr	r3, [pc, #908]	; (8001afc <MadgwickAHRSupdate+0x818>)
 800176e:	ed93 7a00 	vldr	s14, [r3]
 8001772:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001776:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177a:	edd7 6a02 	vldr	s13, [r7, #8]
 800177e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001786:	ee37 7a27 	vadd.f32	s14, s14, s15
 800178a:	4bdd      	ldr	r3, [pc, #884]	; (8001b00 <MadgwickAHRSupdate+0x81c>)
 800178c:	edd3 6a00 	vldr	s13, [r3]
 8001790:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800179c:	4bd6      	ldr	r3, [pc, #856]	; (8001af8 <MadgwickAHRSupdate+0x814>)
 800179e:	edd3 6a00 	vldr	s13, [r3]
 80017a2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80017a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ae:	edd7 6a02 	vldr	s13, [r7, #8]
 80017b2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017be:	edd7 6a02 	vldr	s13, [r7, #8]
 80017c2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ce:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80017d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017da:	4bc8      	ldr	r3, [pc, #800]	; (8001afc <MadgwickAHRSupdate+0x818>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e8:	edd7 6a02 	vldr	s13, [r7, #8]
 80017ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80017f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 80017fc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001800:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001804:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001808:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800180c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001810:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001814:	eeb0 0b47 	vmov.f64	d0, d7
 8001818:	f012 fa1e 	bl	8013c58 <sqrt>
 800181c:	eeb0 7b40 	vmov.f64	d7, d0
 8001820:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001824:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001828:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800182c:	eeb1 7a67 	vneg.f32	s14, s15
 8001830:	4bb1      	ldr	r3, [pc, #708]	; (8001af8 <MadgwickAHRSupdate+0x814>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800183a:	4bb1      	ldr	r3, [pc, #708]	; (8001b00 <MadgwickAHRSupdate+0x81c>)
 800183c:	edd3 6a00 	vldr	s13, [r3]
 8001840:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001848:	ee37 7a27 	vadd.f32	s14, s14, s15
 800184c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001850:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001858:	ee37 7a27 	vadd.f32	s14, s14, s15
 800185c:	4ba7      	ldr	r3, [pc, #668]	; (8001afc <MadgwickAHRSupdate+0x818>)
 800185e:	edd3 6a00 	vldr	s13, [r3]
 8001862:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800186a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800186e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001872:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001876:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800187e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001882:	edd7 7a02 	vldr	s15, [r7, #8]
 8001886:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800188a:	4b9c      	ldr	r3, [pc, #624]	; (8001afc <MadgwickAHRSupdate+0x818>)
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001898:	edd7 6a01 	vldr	s13, [r7, #4]
 800189c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018a8:	edd7 6a01 	vldr	s13, [r7, #4]
 80018ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 80018bc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018c4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 80018c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018d0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80018d4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80018d8:	eeb1 7a67 	vneg.f32	s14, s15
 80018dc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018e0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018e4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80018e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80018f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80018fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001900:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001904:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001908:	edd7 7a05 	vldr	s15, [r7, #20]
 800190c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001910:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001918:	ee37 7a27 	vadd.f32	s14, s14, s15
 800191c:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <MadgwickAHRSupdate+0x814>)
 800191e:	edd3 6a00 	vldr	s13, [r3]
 8001922:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001926:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800192a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800192e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001932:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001936:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800193a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800193e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001942:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001946:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800194a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800194e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001952:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001956:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800195a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800195e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001962:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800196a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800196e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001972:	eef1 6a67 	vneg.f32	s13, s15
 8001976:	4b61      	ldr	r3, [pc, #388]	; (8001afc <MadgwickAHRSupdate+0x818>)
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001980:	4b5f      	ldr	r3, [pc, #380]	; (8001b00 <MadgwickAHRSupdate+0x81c>)
 8001982:	ed93 6a00 	vldr	s12, [r3]
 8001986:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800198a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800198e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001992:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001996:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800199a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800199e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019a2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019a6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80019aa:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80019ae:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80019b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019b6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019ba:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019be:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ce:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <MadgwickAHRSupdate+0x814>)
 80019d0:	edd3 6a00 	vldr	s13, [r3]
 80019d4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019dc:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80019e0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019e4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019e8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019f0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80019f4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80019f8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019fc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a00:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a04:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a08:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a0c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a14:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a20:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001a24:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a28:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a2c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a34:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a3c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a44:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001a48:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a4c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001a50:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a54:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a58:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a5c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a68:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <MadgwickAHRSupdate+0x81c>)
 8001a6a:	edd3 7a00 	vldr	s15, [r3]
 8001a6e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001a72:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a76:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a7e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001a82:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a86:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a8e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a92:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a96:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <MadgwickAHRSupdate+0x818>)
 8001aa4:	edd3 6a00 	vldr	s13, [r3]
 8001aa8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001aac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ab0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001ab4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ab8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001abc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ac0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ac4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ac8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001acc:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001ad0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001ad4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ad8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001adc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ae0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ae4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001af4:	e006      	b.n	8001b04 <MadgwickAHRSupdate+0x820>
 8001af6:	bf00      	nop
 8001af8:	24000218 	.word	0x24000218
 8001afc:	2400021c 	.word	0x2400021c
 8001b00:	24000214 	.word	0x24000214
 8001b04:	4bf6      	ldr	r3, [pc, #984]	; (8001ee0 <MadgwickAHRSupdate+0xbfc>)
 8001b06:	edd3 6a00 	vldr	s13, [r3]
 8001b0a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b12:	4bf4      	ldr	r3, [pc, #976]	; (8001ee4 <MadgwickAHRSupdate+0xc00>)
 8001b14:	ed93 6a00 	vldr	s12, [r3]
 8001b18:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b1c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b20:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b24:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001b28:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001b2c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001b30:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b38:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001b3c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001b40:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001b44:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b48:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b4c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b54:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b60:	4be1      	ldr	r3, [pc, #900]	; (8001ee8 <MadgwickAHRSupdate+0xc04>)
 8001b62:	edd3 6a00 	vldr	s13, [r3]
 8001b66:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b6e:	4bdf      	ldr	r3, [pc, #892]	; (8001eec <MadgwickAHRSupdate+0xc08>)
 8001b70:	ed93 6a00 	vldr	s12, [r3]
 8001b74:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b7c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b80:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001b84:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b88:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b8c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b94:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b98:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b9c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ba0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ba4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ba8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001bb0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001bb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001bc8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001bcc:	eeb1 7a67 	vneg.f32	s14, s15
 8001bd0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001bd4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001bd8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001bdc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001be0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001be4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bec:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001bf0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001bf4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001bf8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001bfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c04:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c10:	4bb3      	ldr	r3, [pc, #716]	; (8001ee0 <MadgwickAHRSupdate+0xbfc>)
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001c1a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c1e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001c22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c26:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001c2a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c2e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c36:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c3e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c4a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c4e:	eef1 6a67 	vneg.f32	s13, s15
 8001c52:	4ba3      	ldr	r3, [pc, #652]	; (8001ee0 <MadgwickAHRSupdate+0xbfc>)
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c5c:	4ba1      	ldr	r3, [pc, #644]	; (8001ee4 <MadgwickAHRSupdate+0xc00>)
 8001c5e:	ed93 6a00 	vldr	s12, [r3]
 8001c62:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c66:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c6a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c6e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001c72:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c76:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c7a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c7e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c82:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c86:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c8a:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001c8e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c92:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c96:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c9a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c9e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ca2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb2:	4b8e      	ldr	r3, [pc, #568]	; (8001eec <MadgwickAHRSupdate+0xc08>)
 8001cb4:	edd3 6a00 	vldr	s13, [r3]
 8001cb8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cc0:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <MadgwickAHRSupdate+0xc04>)
 8001cc2:	ed93 6a00 	vldr	s12, [r3]
 8001cc6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001cd2:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001cd6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001cda:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001cde:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ce2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ce6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001cea:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001cee:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001cf2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cf6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cfa:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d02:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d0e:	4b75      	ldr	r3, [pc, #468]	; (8001ee4 <MadgwickAHRSupdate+0xc00>)
 8001d10:	edd3 6a00 	vldr	s13, [r3]
 8001d14:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d1c:	4b70      	ldr	r3, [pc, #448]	; (8001ee0 <MadgwickAHRSupdate+0xbfc>)
 8001d1e:	ed93 6a00 	vldr	s12, [r3]
 8001d22:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d26:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d2a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d2e:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001d32:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d36:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d3a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d3e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d42:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001d46:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001d4a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d4e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d52:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d56:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d5a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d5e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d62:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d66:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d72:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001d76:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d7a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d7e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001d82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d8e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d96:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d9a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d9e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001da2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001da6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001daa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001dae:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001db2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dba:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001dbe:	eef1 6a67 	vneg.f32	s13, s15
 8001dc2:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <MadgwickAHRSupdate+0xc04>)
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dcc:	4b47      	ldr	r3, [pc, #284]	; (8001eec <MadgwickAHRSupdate+0xc08>)
 8001dce:	ed93 6a00 	vldr	s12, [r3]
 8001dd2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dd6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dda:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dde:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001de2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001de6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001dea:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001dee:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001df2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001df6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dfa:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001dfe:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001e02:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e0a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e0e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e16:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e22:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e26:	eef1 6a67 	vneg.f32	s13, s15
 8001e2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ee4 <MadgwickAHRSupdate+0xc00>)
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e34:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <MadgwickAHRSupdate+0xbfc>)
 8001e36:	ed93 6a00 	vldr	s12, [r3]
 8001e3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e3e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e42:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e46:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001e4a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001e4e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001e52:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e56:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e5a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001e5e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e62:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001e66:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e6a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e6e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e76:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <MadgwickAHRSupdate+0xc08>)
 8001e84:	edd3 6a00 	vldr	s13, [r3]
 8001e88:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e90:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001e94:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e98:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e9c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ea0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ea4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001ea8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001eac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001eb0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001eb4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001eb8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ebc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ec0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ec4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ec8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001ed8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001edc:	e008      	b.n	8001ef0 <MadgwickAHRSupdate+0xc0c>
 8001ede:	bf00      	nop
 8001ee0:	24000218 	.word	0x24000218
 8001ee4:	24000010 	.word	0x24000010
 8001ee8:	2400021c 	.word	0x2400021c
 8001eec:	24000214 	.word	0x24000214
 8001ef0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001ef4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ef8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001efc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f00:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f0c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f18:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1c:	f000 fe1e 	bl	8002b5c <invSqrt>
 8001f20:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001f24:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001f28:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f30:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001f34:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001f38:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f40:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001f44:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f48:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f50:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001f54:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001f58:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f60:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001f64:	4bd8      	ldr	r3, [pc, #864]	; (80022c8 <MadgwickAHRSupdate+0xfe4>)
 8001f66:	ed93 7a00 	vldr	s14, [r3]
 8001f6a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f72:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f7a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001f7e:	4bd2      	ldr	r3, [pc, #840]	; (80022c8 <MadgwickAHRSupdate+0xfe4>)
 8001f80:	ed93 7a00 	vldr	s14, [r3]
 8001f84:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001f90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f94:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001f98:	4bcb      	ldr	r3, [pc, #812]	; (80022c8 <MadgwickAHRSupdate+0xfe4>)
 8001f9a:	ed93 7a00 	vldr	s14, [r3]
 8001f9e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa6:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fae:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001fb2:	4bc5      	ldr	r3, [pc, #788]	; (80022c8 <MadgwickAHRSupdate+0xfe4>)
 8001fb4:	ed93 7a00 	vldr	s14, [r3]
 8001fb8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc0:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001fcc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001fd0:	ed9f 7abe 	vldr	s14, [pc, #760]	; 80022cc <MadgwickAHRSupdate+0xfe8>
 8001fd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fd8:	4bbd      	ldr	r3, [pc, #756]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe2:	4bbb      	ldr	r3, [pc, #748]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 8001fe4:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001fe8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001fec:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80022cc <MadgwickAHRSupdate+0xfe8>
 8001ff0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ff4:	4bb7      	ldr	r3, [pc, #732]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 8001ff6:	edd3 7a00 	vldr	s15, [r3]
 8001ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ffe:	4bb5      	ldr	r3, [pc, #724]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 8002000:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002004:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002008:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 80022cc <MadgwickAHRSupdate+0xfe8>
 800200c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002010:	4bb1      	ldr	r3, [pc, #708]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201a:	4baf      	ldr	r3, [pc, #700]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 800201c:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002020:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002024:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80022cc <MadgwickAHRSupdate+0xfe8>
 8002028:	ee27 7a87 	vmul.f32	s14, s15, s14
 800202c:	4bab      	ldr	r3, [pc, #684]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002036:	4ba9      	ldr	r3, [pc, #676]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 8002038:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800203c:	4ba4      	ldr	r3, [pc, #656]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 800203e:	ed93 7a00 	vldr	s14, [r3]
 8002042:	4ba3      	ldr	r3, [pc, #652]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 8002044:	edd3 7a00 	vldr	s15, [r3]
 8002048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800204c:	4ba1      	ldr	r3, [pc, #644]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 800204e:	edd3 6a00 	vldr	s13, [r3]
 8002052:	4ba0      	ldr	r3, [pc, #640]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800205c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002060:	4b9d      	ldr	r3, [pc, #628]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 8002062:	edd3 6a00 	vldr	s13, [r3]
 8002066:	4b9c      	ldr	r3, [pc, #624]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002070:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002074:	4b99      	ldr	r3, [pc, #612]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 8002076:	edd3 6a00 	vldr	s13, [r3]
 800207a:	4b98      	ldr	r3, [pc, #608]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002088:	eeb0 0a67 	vmov.f32	s0, s15
 800208c:	f000 fd66 	bl	8002b5c <invSqrt>
 8002090:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8002094:	4b8e      	ldr	r3, [pc, #568]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 8002096:	ed93 7a00 	vldr	s14, [r3]
 800209a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800209e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a2:	4b8b      	ldr	r3, [pc, #556]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 80020a4:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80020a8:	4b8a      	ldr	r3, [pc, #552]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 80020aa:	ed93 7a00 	vldr	s14, [r3]
 80020ae:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b6:	4b87      	ldr	r3, [pc, #540]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 80020b8:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80020bc:	4b86      	ldr	r3, [pc, #536]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 80020be:	ed93 7a00 	vldr	s14, [r3]
 80020c2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ca:	4b83      	ldr	r3, [pc, #524]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 80020cc:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80020d0:	4b82      	ldr	r3, [pc, #520]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 80020d2:	ed93 7a00 	vldr	s14, [r3]
 80020d6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020de:	4b7f      	ldr	r3, [pc, #508]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 80020e0:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 80020e4:	4b7a      	ldr	r3, [pc, #488]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 80020e6:	ed93 7a00 	vldr	s14, [r3]
 80020ea:	4b7a      	ldr	r3, [pc, #488]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f4:	4b78      	ldr	r3, [pc, #480]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 80020f6:	edd3 6a00 	vldr	s13, [r3]
 80020fa:	4b78      	ldr	r3, [pc, #480]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002104:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002108:	4b72      	ldr	r3, [pc, #456]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 800210a:	ed93 7a00 	vldr	s14, [r3]
 800210e:	4b71      	ldr	r3, [pc, #452]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002118:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800211c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002120:	4b6d      	ldr	r3, [pc, #436]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 8002122:	edd3 6a00 	vldr	s13, [r3]
 8002126:	4b6c      	ldr	r3, [pc, #432]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 8002128:	edd3 7a00 	vldr	s15, [r3]
 800212c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002134:	eef0 0a67 	vmov.f32	s1, s15
 8002138:	eeb0 0a46 	vmov.f32	s0, s12
 800213c:	f011 fde8 	bl	8013d10 <atan2f>
 8002140:	eef0 7a40 	vmov.f32	s15, s0
 8002144:	4b66      	ldr	r3, [pc, #408]	; (80022e0 <MadgwickAHRSupdate+0xffc>)
 8002146:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 800214a:	4b62      	ldr	r3, [pc, #392]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 800214c:	ed93 7a00 	vldr	s14, [r3]
 8002150:	4b62      	ldr	r3, [pc, #392]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215a:	4b5d      	ldr	r3, [pc, #372]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 800215c:	edd3 6a00 	vldr	s13, [r3]
 8002160:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 8002162:	edd3 7a00 	vldr	s15, [r3]
 8002166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800216a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800216e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002176:	eeb0 0a67 	vmov.f32	s0, s15
 800217a:	f011 fd97 	bl	8013cac <asinf>
 800217e:	eef0 7a40 	vmov.f32	s15, s0
 8002182:	4b58      	ldr	r3, [pc, #352]	; (80022e4 <MadgwickAHRSupdate+0x1000>)
 8002184:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 8002188:	4b52      	ldr	r3, [pc, #328]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 800218a:	ed93 7a00 	vldr	s14, [r3]
 800218e:	4b52      	ldr	r3, [pc, #328]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 8002190:	edd3 7a00 	vldr	s15, [r3]
 8002194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002198:	4b4d      	ldr	r3, [pc, #308]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 800219a:	edd3 6a00 	vldr	s13, [r3]
 800219e:	4b4f      	ldr	r3, [pc, #316]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021b4:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 80021b6:	ed93 6a00 	vldr	s12, [r3]
 80021ba:	4b45      	ldr	r3, [pc, #276]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 80021bc:	edd3 6a00 	vldr	s13, [r3]
 80021c0:	ee26 6a26 	vmul.f32	s12, s12, s13
 80021c4:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 80021c6:	edd3 5a00 	vldr	s11, [r3]
 80021ca:	4b42      	ldr	r3, [pc, #264]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 80021cc:	edd3 6a00 	vldr	s13, [r3]
 80021d0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021d4:	ee36 6a26 	vadd.f32	s12, s12, s13
 80021d8:	4b3f      	ldr	r3, [pc, #252]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 80021da:	edd3 5a00 	vldr	s11, [r3]
 80021de:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 80021e0:	edd3 6a00 	vldr	s13, [r3]
 80021e4:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021e8:	ee36 6a66 	vsub.f32	s12, s12, s13
 80021ec:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 80021ee:	edd3 5a00 	vldr	s11, [r3]
 80021f2:	4b3a      	ldr	r3, [pc, #232]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 80021f4:	edd3 6a00 	vldr	s13, [r3]
 80021f8:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021fc:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002200:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002204:	eeb0 1b46 	vmov.f64	d1, d6
 8002208:	eeb0 0b47 	vmov.f64	d0, d7
 800220c:	f011 fd20 	bl	8013c50 <atan2>
 8002210:	eeb0 7b40 	vmov.f64	d7, d0
 8002214:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002218:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <MadgwickAHRSupdate+0x1004>)
 800221a:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 800221e:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <MadgwickAHRSupdate+0xffc>)
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80022ec <MadgwickAHRSupdate+0x1008>
 8002228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800222c:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <MadgwickAHRSupdate+0xffc>)
 800222e:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002232:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <MadgwickAHRSupdate+0x1000>)
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80022ec <MadgwickAHRSupdate+0x1008>
 800223c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002240:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <MadgwickAHRSupdate+0x1000>)
 8002242:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <MadgwickAHRSupdate+0x1004>)
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80022ec <MadgwickAHRSupdate+0x1008>
 8002250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <MadgwickAHRSupdate+0x1004>)
 8002256:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 800225a:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <MadgwickAHRSupdate+0xffc>)
 800225c:	ed93 7a00 	vldr	s14, [r3]
 8002260:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <MadgwickAHRSupdate+0x100c>)
 8002262:	edd3 7a00 	vldr	s15, [r3]
 8002266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <MadgwickAHRSupdate+0xffc>)
 800226c:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002270:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <MadgwickAHRSupdate+0x1000>)
 8002272:	ed93 7a00 	vldr	s14, [r3]
 8002276:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <MadgwickAHRSupdate+0x1010>)
 8002278:	edd3 7a00 	vldr	s15, [r3]
 800227c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <MadgwickAHRSupdate+0x1000>)
 8002282:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <MadgwickAHRSupdate+0x1004>)
 8002288:	ed93 7a00 	vldr	s14, [r3]
 800228c:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <MadgwickAHRSupdate+0x1014>)
 800228e:	edd3 7a00 	vldr	s15, [r3]
 8002292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <MadgwickAHRSupdate+0x1004>)
 8002298:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <MadgwickAHRSupdate+0x1004>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022aa:	d509      	bpl.n	80022c0 <MadgwickAHRSupdate+0xfdc>
	{
		System_Yaw = 360.0f + System_Yaw;
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <MadgwickAHRSupdate+0x1004>)
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80022fc <MadgwickAHRSupdate+0x1018>
 80022b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <MadgwickAHRSupdate+0x1004>)
 80022bc:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80022c0:	37b8      	adds	r7, #184	; 0xb8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2400000c 	.word	0x2400000c
 80022cc:	3b03126f 	.word	0x3b03126f
 80022d0:	24000010 	.word	0x24000010
 80022d4:	24000214 	.word	0x24000214
 80022d8:	24000218 	.word	0x24000218
 80022dc:	2400021c 	.word	0x2400021c
 80022e0:	24000314 	.word	0x24000314
 80022e4:	24000318 	.word	0x24000318
 80022e8:	24000310 	.word	0x24000310
 80022ec:	42652ee1 	.word	0x42652ee1
 80022f0:	24000220 	.word	0x24000220
 80022f4:	24000224 	.word	0x24000224
 80022f8:	24000228 	.word	0x24000228
 80022fc:	43b40000 	.word	0x43b40000

08002300 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b09c      	sub	sp, #112	; 0x70
 8002304:	af00      	add	r7, sp, #0
 8002306:	ed87 0a05 	vstr	s0, [r7, #20]
 800230a:	edc7 0a04 	vstr	s1, [r7, #16]
 800230e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002312:	edc7 1a02 	vstr	s3, [r7, #8]
 8002316:	ed87 2a01 	vstr	s4, [r7, #4]
 800231a:	edc7 2a00 	vstr	s5, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800231e:	4bee      	ldr	r3, [pc, #952]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	eeb1 7a67 	vneg.f32	s14, s15
 8002328:	edd7 7a05 	vldr	s15, [r7, #20]
 800232c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002330:	4bea      	ldr	r3, [pc, #936]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 8002332:	edd3 6a00 	vldr	s13, [r3]
 8002336:	edd7 7a04 	vldr	s15, [r7, #16]
 800233a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002342:	4be7      	ldr	r3, [pc, #924]	; (80026e0 <MadgwickAHRSupdateIMU+0x3e0>)
 8002344:	edd3 6a00 	vldr	s13, [r3]
 8002348:	edd7 7a03 	vldr	s15, [r7, #12]
 800234c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002354:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800235c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002360:	4be0      	ldr	r3, [pc, #896]	; (80026e4 <MadgwickAHRSupdateIMU+0x3e4>)
 8002362:	ed93 7a00 	vldr	s14, [r3]
 8002366:	edd7 7a05 	vldr	s15, [r7, #20]
 800236a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800236e:	4bdb      	ldr	r3, [pc, #876]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 8002370:	edd3 6a00 	vldr	s13, [r3]
 8002374:	edd7 7a03 	vldr	s15, [r7, #12]
 8002378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800237c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002380:	4bd7      	ldr	r3, [pc, #860]	; (80026e0 <MadgwickAHRSupdateIMU+0x3e0>)
 8002382:	edd3 6a00 	vldr	s13, [r3]
 8002386:	edd7 7a04 	vldr	s15, [r7, #16]
 800238a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002392:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800239a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800239e:	4bd1      	ldr	r3, [pc, #836]	; (80026e4 <MadgwickAHRSupdateIMU+0x3e4>)
 80023a0:	ed93 7a00 	vldr	s14, [r3]
 80023a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80023a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ac:	4bca      	ldr	r3, [pc, #808]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 80023ae:	edd3 6a00 	vldr	s13, [r3]
 80023b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80023b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023be:	4bc8      	ldr	r3, [pc, #800]	; (80026e0 <MadgwickAHRSupdateIMU+0x3e0>)
 80023c0:	edd3 6a00 	vldr	s13, [r3]
 80023c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80023c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80023dc:	4bc1      	ldr	r3, [pc, #772]	; (80026e4 <MadgwickAHRSupdateIMU+0x3e4>)
 80023de:	ed93 7a00 	vldr	s14, [r3]
 80023e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80023e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ea:	4bbb      	ldr	r3, [pc, #748]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 80023ec:	edd3 6a00 	vldr	s13, [r3]
 80023f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80023f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fc:	4bb7      	ldr	r3, [pc, #732]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 80023fe:	edd3 6a00 	vldr	s13, [r3]
 8002402:	edd7 7a05 	vldr	s15, [r7, #20]
 8002406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800240a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002416:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800241a:	edd7 7a02 	vldr	s15, [r7, #8]
 800241e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002426:	d10e      	bne.n	8002446 <MadgwickAHRSupdateIMU+0x146>
 8002428:	edd7 7a01 	vldr	s15, [r7, #4]
 800242c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002434:	d107      	bne.n	8002446 <MadgwickAHRSupdateIMU+0x146>
 8002436:	edd7 7a00 	vldr	s15, [r7]
 800243a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800243e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002442:	f000 81e5 	beq.w	8002810 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002446:	edd7 7a02 	vldr	s15, [r7, #8]
 800244a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800244e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002452:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002456:	ee37 7a27 	vadd.f32	s14, s14, s15
 800245a:	edd7 7a00 	vldr	s15, [r7]
 800245e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002466:	eeb0 0a67 	vmov.f32	s0, s15
 800246a:	f000 fb77 	bl	8002b5c <invSqrt>
 800246e:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8002472:	ed97 7a02 	vldr	s14, [r7, #8]
 8002476:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800247a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247e:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8002482:	ed97 7a01 	vldr	s14, [r7, #4]
 8002486:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800248a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248e:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 8002492:	ed97 7a00 	vldr	s14, [r7]
 8002496:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800249a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249e:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80024a2:	4b90      	ldr	r3, [pc, #576]	; (80026e4 <MadgwickAHRSupdateIMU+0x3e4>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024ac:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 80024b0:	4b89      	ldr	r3, [pc, #548]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 80024b2:	edd3 7a00 	vldr	s15, [r3]
 80024b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024ba:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 80024be:	4b87      	ldr	r3, [pc, #540]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 80024c0:	edd3 7a00 	vldr	s15, [r3]
 80024c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024c8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 80024cc:	4b84      	ldr	r3, [pc, #528]	; (80026e0 <MadgwickAHRSupdateIMU+0x3e0>)
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024d6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 80024da:	4b82      	ldr	r3, [pc, #520]	; (80026e4 <MadgwickAHRSupdateIMU+0x3e4>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 80024ec:	4b7a      	ldr	r3, [pc, #488]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fa:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 80024fe:	4b77      	ldr	r3, [pc, #476]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8002510:	4b71      	ldr	r3, [pc, #452]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800251a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800251e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 8002522:	4b6e      	ldr	r3, [pc, #440]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800252c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002530:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8002534:	4b6b      	ldr	r3, [pc, #428]	; (80026e4 <MadgwickAHRSupdateIMU+0x3e4>)
 8002536:	ed93 7a00 	vldr	s14, [r3]
 800253a:	4b6a      	ldr	r3, [pc, #424]	; (80026e4 <MadgwickAHRSupdateIMU+0x3e4>)
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002544:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8002548:	4b63      	ldr	r3, [pc, #396]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 800254a:	ed93 7a00 	vldr	s14, [r3]
 800254e:	4b62      	ldr	r3, [pc, #392]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002558:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 800255c:	4b5f      	ldr	r3, [pc, #380]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 800255e:	ed93 7a00 	vldr	s14, [r3]
 8002562:	4b5e      	ldr	r3, [pc, #376]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 8002564:	edd3 7a00 	vldr	s15, [r3]
 8002568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8002570:	4b5b      	ldr	r3, [pc, #364]	; (80026e0 <MadgwickAHRSupdateIMU+0x3e0>)
 8002572:	ed93 7a00 	vldr	s14, [r3]
 8002576:	4b5a      	ldr	r3, [pc, #360]	; (80026e0 <MadgwickAHRSupdateIMU+0x3e0>)
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002580:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002584:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002588:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800258c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002590:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002594:	edd7 7a02 	vldr	s15, [r7, #8]
 8002598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80025a4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025b0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80025b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80025c4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80025c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80025d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80025d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025e0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025e4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80025e8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80025ec:	4b3a      	ldr	r3, [pc, #232]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025fa:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80025fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002606:	ee37 7a67 	vsub.f32	s14, s14, s15
 800260a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800260e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002612:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002616:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800261a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002622:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002626:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800262a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002632:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002636:	edd7 7a00 	vldr	s15, [r7]
 800263a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800263e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002642:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002646:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800264a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800264e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002652:	4b22      	ldr	r3, [pc, #136]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 8002654:	edd3 7a00 	vldr	s15, [r3]
 8002658:	ee27 7a27 	vmul.f32	s14, s14, s15
 800265c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002660:	edd7 7a02 	vldr	s15, [r7, #8]
 8002664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002668:	ee37 7a27 	vadd.f32	s14, s14, s15
 800266c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002670:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002678:	ee37 7a27 	vadd.f32	s14, s14, s15
 800267c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002680:	edd7 7a01 	vldr	s15, [r7, #4]
 8002684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002688:	ee37 7a67 	vsub.f32	s14, s14, s15
 800268c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002690:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002694:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002698:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800269c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026a4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80026a8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026b4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80026b8:	edd7 7a00 	vldr	s15, [r7]
 80026bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c4:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80026c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026cc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80026d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026d4:	e008      	b.n	80026e8 <MadgwickAHRSupdateIMU+0x3e8>
 80026d6:	bf00      	nop
 80026d8:	24000214 	.word	0x24000214
 80026dc:	24000218 	.word	0x24000218
 80026e0:	2400021c 	.word	0x2400021c
 80026e4:	24000010 	.word	0x24000010
 80026e8:	4be0      	ldr	r3, [pc, #896]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026f2:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80026f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002702:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002706:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800270a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800270e:	4bd7      	ldr	r3, [pc, #860]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002718:	ee37 7a27 	vadd.f32	s14, s14, s15
 800271c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002720:	edd7 7a01 	vldr	s15, [r7, #4]
 8002724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272c:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002730:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002734:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002738:	edd7 7a08 	vldr	s15, [r7, #32]
 800273c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002740:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002744:	edd7 7a07 	vldr	s15, [r7, #28]
 8002748:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800274c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002750:	edd7 7a06 	vldr	s15, [r7, #24]
 8002754:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800275c:	eeb0 0a67 	vmov.f32	s0, s15
 8002760:	f000 f9fc 	bl	8002b5c <invSqrt>
 8002764:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 8002768:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800276c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002774:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 8002778:	ed97 7a08 	vldr	s14, [r7, #32]
 800277c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002784:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8002788:	ed97 7a07 	vldr	s14, [r7, #28]
 800278c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002794:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8002798:	ed97 7a06 	vldr	s14, [r7, #24]
 800279c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80027a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a4:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 80027a8:	4bb1      	ldr	r3, [pc, #708]	; (8002a70 <MadgwickAHRSupdateIMU+0x770>)
 80027aa:	ed93 7a00 	vldr	s14, [r3]
 80027ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b6:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80027ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027be:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 80027c2:	4bab      	ldr	r3, [pc, #684]	; (8002a70 <MadgwickAHRSupdateIMU+0x770>)
 80027c4:	ed93 7a00 	vldr	s14, [r3]
 80027c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80027cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80027d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 80027dc:	4ba4      	ldr	r3, [pc, #656]	; (8002a70 <MadgwickAHRSupdateIMU+0x770>)
 80027de:	ed93 7a00 	vldr	s14, [r3]
 80027e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80027e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ea:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80027ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 80027f6:	4b9e      	ldr	r3, [pc, #632]	; (8002a70 <MadgwickAHRSupdateIMU+0x770>)
 80027f8:	ed93 7a00 	vldr	s14, [r3]
 80027fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002804:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800280c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002810:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002814:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8002a74 <MadgwickAHRSupdateIMU+0x774>
 8002818:	ee27 7a87 	vmul.f32	s14, s15, s14
 800281c:	4b96      	ldr	r3, [pc, #600]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 800281e:	edd3 7a00 	vldr	s15, [r3]
 8002822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002826:	4b94      	ldr	r3, [pc, #592]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 8002828:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 800282c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002830:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002a74 <MadgwickAHRSupdateIMU+0x774>
 8002834:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002838:	4b90      	ldr	r3, [pc, #576]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 800283a:	edd3 7a00 	vldr	s15, [r3]
 800283e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002842:	4b8e      	ldr	r3, [pc, #568]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 8002844:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002848:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800284c:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002a74 <MadgwickAHRSupdateIMU+0x774>
 8002850:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002854:	4b8a      	ldr	r3, [pc, #552]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 8002856:	edd3 7a00 	vldr	s15, [r3]
 800285a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800285e:	4b88      	ldr	r3, [pc, #544]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 8002860:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002864:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002868:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002a74 <MadgwickAHRSupdateIMU+0x774>
 800286c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002870:	4b7e      	ldr	r3, [pc, #504]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 8002872:	edd3 7a00 	vldr	s15, [r3]
 8002876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287a:	4b7c      	ldr	r3, [pc, #496]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 800287c:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002880:	4b7d      	ldr	r3, [pc, #500]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 8002882:	ed93 7a00 	vldr	s14, [r3]
 8002886:	4b7c      	ldr	r3, [pc, #496]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002890:	4b7a      	ldr	r3, [pc, #488]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 8002892:	edd3 6a00 	vldr	s13, [r3]
 8002896:	4b79      	ldr	r3, [pc, #484]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a4:	4b76      	ldr	r3, [pc, #472]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 80028a6:	edd3 6a00 	vldr	s13, [r3]
 80028aa:	4b75      	ldr	r3, [pc, #468]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b8:	4b6c      	ldr	r3, [pc, #432]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 80028ba:	edd3 6a00 	vldr	s13, [r3]
 80028be:	4b6b      	ldr	r3, [pc, #428]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 80028c0:	edd3 7a00 	vldr	s15, [r3]
 80028c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028cc:	eeb0 0a67 	vmov.f32	s0, s15
 80028d0:	f000 f944 	bl	8002b5c <invSqrt>
 80028d4:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 80028d8:	4b67      	ldr	r3, [pc, #412]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 80028da:	ed93 7a00 	vldr	s14, [r3]
 80028de:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e6:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 80028e8:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80028ec:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 80028ee:	ed93 7a00 	vldr	s14, [r3]
 80028f2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fa:	4b60      	ldr	r3, [pc, #384]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 80028fc:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002900:	4b5f      	ldr	r3, [pc, #380]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 8002902:	ed93 7a00 	vldr	s14, [r3]
 8002906:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800290a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290e:	4b5c      	ldr	r3, [pc, #368]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 8002910:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002914:	4b55      	ldr	r3, [pc, #340]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 8002916:	ed93 7a00 	vldr	s14, [r3]
 800291a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800291e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002922:	4b52      	ldr	r3, [pc, #328]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 8002924:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8002928:	4b53      	ldr	r3, [pc, #332]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 800292a:	ed93 7a00 	vldr	s14, [r3]
 800292e:	4b53      	ldr	r3, [pc, #332]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 8002930:	edd3 7a00 	vldr	s15, [r3]
 8002934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002938:	4b51      	ldr	r3, [pc, #324]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 800293a:	edd3 6a00 	vldr	s13, [r3]
 800293e:	4b4b      	ldr	r3, [pc, #300]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 8002940:	edd3 7a00 	vldr	s15, [r3]
 8002944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002948:	ee37 6a27 	vadd.f32	s12, s14, s15
 800294c:	4b4b      	ldr	r3, [pc, #300]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 800294e:	ed93 7a00 	vldr	s14, [r3]
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002960:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002964:	4b46      	ldr	r3, [pc, #280]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 8002966:	edd3 6a00 	vldr	s13, [r3]
 800296a:	4b45      	ldr	r3, [pc, #276]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002978:	eef0 0a67 	vmov.f32	s1, s15
 800297c:	eeb0 0a46 	vmov.f32	s0, s12
 8002980:	f011 f9c6 	bl	8013d10 <atan2f>
 8002984:	eef0 7a40 	vmov.f32	s15, s0
 8002988:	4b3e      	ldr	r3, [pc, #248]	; (8002a84 <MadgwickAHRSupdateIMU+0x784>)
 800298a:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 8002990:	ed93 7a00 	vldr	s14, [r3]
 8002994:	4b35      	ldr	r3, [pc, #212]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 8002996:	edd3 7a00 	vldr	s15, [r3]
 800299a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800299e:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 80029a0:	edd3 6a00 	vldr	s13, [r3]
 80029a4:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80029b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ba:	eeb0 0a67 	vmov.f32	s0, s15
 80029be:	f011 f975 	bl	8013cac <asinf>
 80029c2:	eef0 7a40 	vmov.f32	s15, s0
 80029c6:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <MadgwickAHRSupdateIMU+0x788>)
 80029c8:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 80029ce:	ed93 7a00 	vldr	s14, [r3]
 80029d2:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029dc:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 80029de:	edd3 6a00 	vldr	s13, [r3]
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 80029e4:	edd3 7a00 	vldr	s15, [r3]
 80029e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029f8:	4b1f      	ldr	r3, [pc, #124]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 80029fa:	ed93 6a00 	vldr	s12, [r3]
 80029fe:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 8002a00:	edd3 6a00 	vldr	s13, [r3]
 8002a04:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002a08:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 8002a0a:	edd3 5a00 	vldr	s11, [r3]
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 8002a10:	edd3 6a00 	vldr	s13, [r3]
 8002a14:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a18:	ee36 6a26 	vadd.f32	s12, s12, s13
 8002a1c:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 8002a1e:	edd3 5a00 	vldr	s11, [r3]
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 8002a24:	edd3 6a00 	vldr	s13, [r3]
 8002a28:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a2c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002a30:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 8002a32:	edd3 5a00 	vldr	s11, [r3]
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 8002a38:	edd3 6a00 	vldr	s13, [r3]
 8002a3c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a40:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002a44:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002a48:	eeb0 1b46 	vmov.f64	d1, d6
 8002a4c:	eeb0 0b47 	vmov.f64	d0, d7
 8002a50:	f011 f8fe 	bl	8013c50 <atan2>
 8002a54:	eeb0 7b40 	vmov.f64	d7, d0
 8002a58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <MadgwickAHRSupdateIMU+0x78c>)
 8002a5e:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <MadgwickAHRSupdateIMU+0x784>)
 8002a64:	edd3 7a00 	vldr	s15, [r3]
 8002a68:	e014      	b.n	8002a94 <MadgwickAHRSupdateIMU+0x794>
 8002a6a:	bf00      	nop
 8002a6c:	2400021c 	.word	0x2400021c
 8002a70:	2400000c 	.word	0x2400000c
 8002a74:	3b03126f 	.word	0x3b03126f
 8002a78:	24000010 	.word	0x24000010
 8002a7c:	24000214 	.word	0x24000214
 8002a80:	24000218 	.word	0x24000218
 8002a84:	24000314 	.word	0x24000314
 8002a88:	24000318 	.word	0x24000318
 8002a8c:	24000310 	.word	0x24000310
 8002a90:	42652ee1 	.word	0x42652ee1
 8002a94:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002a90 <MadgwickAHRSupdateIMU+0x790>
 8002a98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a9c:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <MadgwickAHRSupdateIMU+0x83c>)
 8002a9e:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002aa2:	4b27      	ldr	r3, [pc, #156]	; (8002b40 <MadgwickAHRSupdateIMU+0x840>)
 8002aa4:	edd3 7a00 	vldr	s15, [r3]
 8002aa8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002b44 <MadgwickAHRSupdateIMU+0x844>
 8002aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab0:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <MadgwickAHRSupdateIMU+0x840>)
 8002ab2:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 8002ab6:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <MadgwickAHRSupdateIMU+0x848>)
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002b44 <MadgwickAHRSupdateIMU+0x844>
 8002ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac4:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <MadgwickAHRSupdateIMU+0x848>)
 8002ac6:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 8002aca:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <MadgwickAHRSupdateIMU+0x83c>)
 8002acc:	ed93 7a00 	vldr	s14, [r3]
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <MadgwickAHRSupdateIMU+0x84c>)
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ada:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <MadgwickAHRSupdateIMU+0x83c>)
 8002adc:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002ae0:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <MadgwickAHRSupdateIMU+0x840>)
 8002ae2:	ed93 7a00 	vldr	s14, [r3]
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <MadgwickAHRSupdateIMU+0x850>)
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af0:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <MadgwickAHRSupdateIMU+0x840>)
 8002af2:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 8002af6:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <MadgwickAHRSupdateIMU+0x848>)
 8002af8:	ed93 7a00 	vldr	s14, [r3]
 8002afc:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <MadgwickAHRSupdateIMU+0x854>)
 8002afe:	edd3 7a00 	vldr	s15, [r3]
 8002b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <MadgwickAHRSupdateIMU+0x848>)
 8002b08:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <MadgwickAHRSupdateIMU+0x848>)
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1a:	d400      	bmi.n	8002b1e <MadgwickAHRSupdateIMU+0x81e>
	{
		System_Yaw = 360.0f + System_Yaw;
	}
}
 8002b1c:	e009      	b.n	8002b32 <MadgwickAHRSupdateIMU+0x832>
		System_Yaw = 360.0f + System_Yaw;
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <MadgwickAHRSupdateIMU+0x848>)
 8002b20:	edd3 7a00 	vldr	s15, [r3]
 8002b24:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002b58 <MadgwickAHRSupdateIMU+0x858>
 8002b28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <MadgwickAHRSupdateIMU+0x848>)
 8002b2e:	edc3 7a00 	vstr	s15, [r3]
}
 8002b32:	bf00      	nop
 8002b34:	3770      	adds	r7, #112	; 0x70
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	24000314 	.word	0x24000314
 8002b40:	24000318 	.word	0x24000318
 8002b44:	42652ee1 	.word	0x42652ee1
 8002b48:	24000310 	.word	0x24000310
 8002b4c:	24000220 	.word	0x24000220
 8002b50:	24000224 	.word	0x24000224
 8002b54:	24000228 	.word	0x24000228
 8002b58:	43b40000 	.word	0x43b40000

08002b5c <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002b66:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b72:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002b7a:	f107 0310 	add.w	r3, r7, #16
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	105a      	asrs	r2, r3, #1
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <invSqrt+0x74>)
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002b94:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b98:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ba0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002bac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb8:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	ee07 3a90 	vmov	s15, r3
}
 8002bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	5f3759df 	.word	0x5f3759df

08002bd4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	4803      	ldr	r0, [pc, #12]	; (8002bf8 <_write+0x24>)
 8002bea:	f00c fdc3 	bl	800f774 <HAL_UART_Transmit_DMA>
}
 8002bee:	bf00      	nop
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	24000528 	.word	0x24000528

08002bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c00:	b088      	sub	sp, #32
 8002c02:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
	MPU9250.Gx_Offset = 0.43;
 8002c04:	4bb2      	ldr	r3, [pc, #712]	; (8002ed0 <main+0x2d4>)
 8002c06:	4ab3      	ldr	r2, [pc, #716]	; (8002ed4 <main+0x2d8>)
 8002c08:	629a      	str	r2, [r3, #40]	; 0x28
	MPU9250.Gy_Offset = -0.49;
 8002c0a:	4bb1      	ldr	r3, [pc, #708]	; (8002ed0 <main+0x2d4>)
 8002c0c:	4ab2      	ldr	r2, [pc, #712]	; (8002ed8 <main+0x2dc>)
 8002c0e:	62da      	str	r2, [r3, #44]	; 0x2c
	MPU9250.Gz_Offset = -1.40;
 8002c10:	4baf      	ldr	r3, [pc, #700]	; (8002ed0 <main+0x2d4>)
 8002c12:	4ab2      	ldr	r2, [pc, #712]	; (8002edc <main+0x2e0>)
 8002c14:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c16:	f002 fa91 	bl	800513c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c1a:	f000 fb51 	bl	80032c0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002c1e:	f000 fbcd 	bl	80033bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c22:	f000 fe1b 	bl	800385c <MX_GPIO_Init>
  MX_DMA_Init();
 8002c26:	f000 fde1 	bl	80037ec <MX_DMA_Init>
  MX_TIM7_Init();
 8002c2a:	f000 fd11 	bl	8003650 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002c2e:	f000 fd45 	bl	80036bc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002c32:	f000 fbdf 	bl	80033f4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002c36:	f000 fc1d 	bl	8003474 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002c3a:	f000 fd8b 	bl	8003754 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002c3e:	f000 fc6f 	bl	8003520 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2102      	movs	r1, #2
 8002c46:	48a6      	ldr	r0, [pc, #664]	; (8002ee0 <main+0x2e4>)
 8002c48:	f005 fc4e 	bl	80084e8 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8002c4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c50:	f002 fb06 	bl	8005260 <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002c54:	2201      	movs	r2, #1
 8002c56:	2102      	movs	r1, #2
 8002c58:	48a1      	ldr	r0, [pc, #644]	; (8002ee0 <main+0x2e4>)
 8002c5a:	f005 fc45 	bl	80084e8 <HAL_GPIO_WritePin>

  //General Timer HAL
  HAL_TIM_Base_Start_IT(&htim7);
 8002c5e:	48a1      	ldr	r0, [pc, #644]	; (8002ee4 <main+0x2e8>)
 8002c60:	f00b fafa 	bl	800e258 <HAL_TIM_Base_Start_IT>
  //General PWM LL
//  LL_TIM_EnableCounter(TIM7);
//  LL_TIM_EnableIT_UPDATE(TIM7);

  //USART Channels HAL
  HAL_UART_Receive_DMA(&huart1, &uart1_rx_data, 1); //FTDI
 8002c64:	2201      	movs	r2, #1
 8002c66:	49a0      	ldr	r1, [pc, #640]	; (8002ee8 <main+0x2ec>)
 8002c68:	48a0      	ldr	r0, [pc, #640]	; (8002eec <main+0x2f0>)
 8002c6a:	f00c fe03 	bl	800f874 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, &uart2_rx_data, 1); //Receiver
 8002c6e:	2201      	movs	r2, #1
 8002c70:	499f      	ldr	r1, [pc, #636]	; (8002ef0 <main+0x2f4>)
 8002c72:	48a0      	ldr	r0, [pc, #640]	; (8002ef4 <main+0x2f8>)
 8002c74:	f00c fdfe 	bl	800f874 <HAL_UART_Receive_DMA>

	//Motor PWM HAL
	HAL_TIM_Base_Start_IT(&htim3);
 8002c78:	489f      	ldr	r0, [pc, #636]	; (8002ef8 <main+0x2fc>)
 8002c7a:	f00b faed 	bl	800e258 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002c7e:	2100      	movs	r1, #0
 8002c80:	489d      	ldr	r0, [pc, #628]	; (8002ef8 <main+0x2fc>)
 8002c82:	f00b fbbb 	bl	800e3fc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8002c86:	2104      	movs	r1, #4
 8002c88:	489b      	ldr	r0, [pc, #620]	; (8002ef8 <main+0x2fc>)
 8002c8a:	f00b fbb7 	bl	800e3fc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8002c8e:	2108      	movs	r1, #8
 8002c90:	4899      	ldr	r0, [pc, #612]	; (8002ef8 <main+0x2fc>)
 8002c92:	f00b fbb3 	bl	800e3fc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 8002c96:	210c      	movs	r1, #12
 8002c98:	4897      	ldr	r0, [pc, #604]	; (8002ef8 <main+0x2fc>)
 8002c9a:	f00b fbaf 	bl	800e3fc <HAL_TIM_PWM_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002c9e:	e009      	b.n	8002cb4 <main+0xb8>
	{
		if(tim1_20ms_flag == 1)
 8002ca0:	4b96      	ldr	r3, [pc, #600]	; (8002efc <main+0x300>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d105      	bne.n	8002cb4 <main+0xb8>
		{
			tim1_20ms_flag = 0;
 8002ca8:	4b94      	ldr	r3, [pc, #592]	; (8002efc <main+0x300>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialing \n");
 8002cae:	4894      	ldr	r0, [pc, #592]	; (8002f00 <main+0x304>)
 8002cb0:	f00e ffca 	bl	8011c48 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2303      	movs	r3, #3
 8002cba:	2203      	movs	r2, #3
 8002cbc:	2103      	movs	r1, #3
 8002cbe:	4891      	ldr	r0, [pc, #580]	; (8002f04 <main+0x308>)
 8002cc0:	f7fd fde6 	bl	8000890 <MPU9250_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0ea      	beq.n	8002ca0 <main+0xa4>
		}
	}
	MPU9250_Bypass(&hi2c1);
 8002cca:	488e      	ldr	r0, [pc, #568]	; (8002f04 <main+0x308>)
 8002ccc:	f7fd fec8 	bl	8000a60 <MPU9250_Bypass>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002cd0:	e009      	b.n	8002ce6 <main+0xea>
	{
		if(tim1_20ms_flag == 1)
 8002cd2:	4b8a      	ldr	r3, [pc, #552]	; (8002efc <main+0x300>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d105      	bne.n	8002ce6 <main+0xea>
		{
			tim1_20ms_flag = 0;
 8002cda:	4b88      	ldr	r3, [pc, #544]	; (8002efc <main+0x300>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialing \n");
 8002ce0:	4889      	ldr	r0, [pc, #548]	; (8002f08 <main+0x30c>)
 8002ce2:	f00e ffb1 	bl	8011c48 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002ce6:	497a      	ldr	r1, [pc, #488]	; (8002ed0 <main+0x2d4>)
 8002ce8:	4886      	ldr	r0, [pc, #536]	; (8002f04 <main+0x308>)
 8002cea:	f7fd ff39 	bl	8000b60 <MPU9250_AK8963_Setup>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0ee      	beq.n	8002cd2 <main+0xd6>
		}
	}
	MPU9250_Master(&hi2c1);
 8002cf4:	4883      	ldr	r0, [pc, #524]	; (8002f04 <main+0x308>)
 8002cf6:	f7fd fee1 	bl	8000abc <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 8002cfa:	4882      	ldr	r0, [pc, #520]	; (8002f04 <main+0x308>)
 8002cfc:	f7fd ff86 	bl	8000c0c <MPU9250_Slave0_Enable>

	//Initialize MS5611

	//EEPROM
	W25qxx_Init();
 8002d00:	f001 feec 	bl	8004adc <W25qxx_Init>
	W25qxx_ReadSector(Mag_Calib, 0, 0, 12);
 8002d04:	230c      	movs	r3, #12
 8002d06:	2200      	movs	r2, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4880      	ldr	r0, [pc, #512]	; (8002f0c <main+0x310>)
 8002d0c:	f002 f98a 	bl	8005024 <W25qxx_ReadSector>
	MPU9250.Mx_Offset = *(float*)&Mag_Calib[0];
 8002d10:	4b7e      	ldr	r3, [pc, #504]	; (8002f0c <main+0x310>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a6e      	ldr	r2, [pc, #440]	; (8002ed0 <main+0x2d4>)
 8002d16:	6653      	str	r3, [r2, #100]	; 0x64
	MPU9250.My_Offset = *(float*)&Mag_Calib[4];
 8002d18:	4b7d      	ldr	r3, [pc, #500]	; (8002f10 <main+0x314>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a6c      	ldr	r2, [pc, #432]	; (8002ed0 <main+0x2d4>)
 8002d1e:	6693      	str	r3, [r2, #104]	; 0x68
	MPU9250.Mz_Offset = *(float*)&Mag_Calib[8];
 8002d20:	4b7c      	ldr	r3, [pc, #496]	; (8002f14 <main+0x318>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a6a      	ldr	r2, [pc, #424]	; (8002ed0 <main+0x2d4>)
 8002d26:	66d3      	str	r3, [r2, #108]	; 0x6c

	//Receiver Check
	printf("Receiver Status Check \n"); HAL_Delay(10);
 8002d28:	487b      	ldr	r0, [pc, #492]	; (8002f18 <main+0x31c>)
 8002d2a:	f00e ff8d 	bl	8011c48 <puts>
 8002d2e:	200a      	movs	r0, #10
 8002d30:	f002 fa96 	bl	8005260 <HAL_Delay>
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 8002d34:	e011      	b.n	8002d5a <main+0x15e>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2102      	movs	r1, #2
 8002d3a:	4869      	ldr	r0, [pc, #420]	; (8002ee0 <main+0x2e4>)
 8002d3c:	f005 fbd4 	bl	80084e8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002d40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d44:	f002 fa8c 	bl	8005260 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002d48:	2201      	movs	r2, #1
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	4864      	ldr	r0, [pc, #400]	; (8002ee0 <main+0x2e4>)
 8002d4e:	f005 fbcb 	bl	80084e8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002d52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d56:	f002 fa83 	bl	8005260 <HAL_Delay>
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 8002d5a:	4b70      	ldr	r3, [pc, #448]	; (8002f1c <main+0x320>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 fc18 	bl	8004594 <Is_iBus_Received>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0e5      	beq.n	8002d36 <main+0x13a>
	}
	while(Is_Throttle_Min() == 0)
 8002d6a:	e01d      	b.n	8002da8 <main+0x1ac>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2102      	movs	r1, #2
 8002d70:	485b      	ldr	r0, [pc, #364]	; (8002ee0 <main+0x2e4>)
 8002d72:	f005 fbb9 	bl	80084e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_GPIO_Port, GPIO_PIN_SET);
 8002d76:	2201      	movs	r2, #1
 8002d78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d7c:	4868      	ldr	r0, [pc, #416]	; (8002f20 <main+0x324>)
 8002d7e:	f005 fbb3 	bl	80084e8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002d82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d86:	f002 fa6b 	bl	8005260 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	4854      	ldr	r0, [pc, #336]	; (8002ee0 <main+0x2e4>)
 8002d90:	f005 fbaa 	bl	80084e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_GPIO_Port, GPIO_PIN_RESET);
 8002d94:	2200      	movs	r2, #0
 8002d96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d9a:	4861      	ldr	r0, [pc, #388]	; (8002f20 <main+0x324>)
 8002d9c:	f005 fba4 	bl	80084e8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002da0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002da4:	f002 fa5c 	bl	8005260 <HAL_Delay>
	while(Is_Throttle_Min() == 0)
 8002da8:	f001 fc2e 	bl	8004608 <Is_Throttle_Min>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0dc      	beq.n	8002d6c <main+0x170>
	}
	printf("Receiver OK \n"); HAL_Delay(10);
 8002db2:	485c      	ldr	r0, [pc, #368]	; (8002f24 <main+0x328>)
 8002db4:	f00e ff48 	bl	8011c48 <puts>
 8002db8:	200a      	movs	r0, #10
 8002dba:	f002 fa51 	bl	8005260 <HAL_Delay>

	//ESC Calibration
	if(iBus.SwB == 2000 && iBus.SwC == 2000)
 8002dbe:	4b5a      	ldr	r3, [pc, #360]	; (8002f28 <main+0x32c>)
 8002dc0:	895b      	ldrh	r3, [r3, #10]
 8002dc2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002dc6:	d111      	bne.n	8002dec <main+0x1f0>
 8002dc8:	4b57      	ldr	r3, [pc, #348]	; (8002f28 <main+0x32c>)
 8002dca:	899b      	ldrh	r3, [r3, #12]
 8002dcc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002dd0:	d10c      	bne.n	8002dec <main+0x1f0>
	{
		ESC_Calibration();
 8002dd2:	f000 fecd 	bl	8003b70 <ESC_Calibration>
		while(iBus.SwB != 1000) Is_iBus_Received(ibus_rx_cplt_flag);
 8002dd6:	e004      	b.n	8002de2 <main+0x1e6>
 8002dd8:	4b50      	ldr	r3, [pc, #320]	; (8002f1c <main+0x320>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 fbd9 	bl	8004594 <Is_iBus_Received>
 8002de2:	4b51      	ldr	r3, [pc, #324]	; (8002f28 <main+0x32c>)
 8002de4:	895b      	ldrh	r3, [r3, #10]
 8002de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dea:	d1f5      	bne.n	8002dd8 <main+0x1dc>
	}

	while (1)
	{
		//UART Message Check
		Receive_Command();
 8002dec:	f001 fb5a 	bl	80044a4 <Receive_Command>
		Compass_Calibration(mag_calibration_enable);
 8002df0:	4b4e      	ldr	r3, [pc, #312]	; (8002f2c <main+0x330>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fdcd 	bl	8003994 <Compass_Calibration>

		//Receiver Channel Check
		Is_iBus_Received(ibus_rx_cplt_flag);
 8002dfa:	4b48      	ldr	r3, [pc, #288]	; (8002f1c <main+0x320>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f001 fbc8 	bl	8004594 <Is_iBus_Received>
		if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 8002e04:	4b48      	ldr	r3, [pc, #288]	; (8002f28 <main+0x32c>)
 8002e06:	891b      	ldrh	r3, [r3, #8]
 8002e08:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002e0c:	d111      	bne.n	8002e32 <main+0x236>
 8002e0e:	4b48      	ldr	r3, [pc, #288]	; (8002f30 <main+0x334>)
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002e16:	d00c      	beq.n	8002e32 <main+0x236>
		{
			if(iBus.LV < 1010)
 8002e18:	4b43      	ldr	r3, [pc, #268]	; (8002f28 <main+0x32c>)
 8002e1a:	889b      	ldrh	r3, [r3, #4]
 8002e1c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d806      	bhi.n	8002e32 <main+0x236>
			{
				motor_arming_flag = 1;
 8002e24:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <main+0x338>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
				yaw_heading_reference = System_Yaw;
 8002e2a:	4b43      	ldr	r3, [pc, #268]	; (8002f38 <main+0x33c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a43      	ldr	r2, [pc, #268]	; (8002f3c <main+0x340>)
 8002e30:	6013      	str	r3, [r2, #0]
			}
		}
		iBus_SwA_Prev = iBus.SwA;
 8002e32:	4b3d      	ldr	r3, [pc, #244]	; (8002f28 <main+0x32c>)
 8002e34:	891a      	ldrh	r2, [r3, #8]
 8002e36:	4b3e      	ldr	r3, [pc, #248]	; (8002f30 <main+0x334>)
 8002e38:	801a      	strh	r2, [r3, #0]
		if(iBus.SwA != 2000)
 8002e3a:	4b3b      	ldr	r3, [pc, #236]	; (8002f28 <main+0x32c>)
 8002e3c:	891b      	ldrh	r3, [r3, #8]
 8002e3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002e42:	d002      	beq.n	8002e4a <main+0x24e>
		{
			motor_arming_flag = 0;
 8002e44:	4b3b      	ldr	r3, [pc, #236]	; (8002f34 <main+0x338>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
		}
		if(motor_arming_flag == 1)
 8002e4a:	4b3a      	ldr	r3, [pc, #232]	; (8002f34 <main+0x338>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	f040 80b9 	bne.w	8002fc6 <main+0x3ca>
				{
					if(failsafe_flag == 0)
 8002e54:	4b3a      	ldr	r3, [pc, #232]	; (8002f40 <main+0x344>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f040 80a3 	bne.w	8002fa4 <main+0x3a8>
					{
						if(iBus.LV > 1010)
 8002e5e:	4b32      	ldr	r3, [pc, #200]	; (8002f28 <main+0x32c>)
 8002e60:	889b      	ldrh	r3, [r3, #4]
 8002e62:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8002e66:	4293      	cmp	r3, r2
 8002e68:	f240 808b 	bls.w	8002f82 <main+0x386>
						{
							TIM3->CCR1 = ccr1 > 20000 ? 19900 : ccr1 < 10000 ? 10000 : ccr1;
 8002e6c:	4b35      	ldr	r3, [pc, #212]	; (8002f44 <main+0x348>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d807      	bhi.n	8002e88 <main+0x28c>
 8002e78:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <main+0x348>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e80:	4293      	cmp	r3, r2
 8002e82:	bf38      	it	cc
 8002e84:	4613      	movcc	r3, r2
 8002e86:	e001      	b.n	8002e8c <main+0x290>
 8002e88:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 8002e8c:	4a2e      	ldr	r2, [pc, #184]	; (8002f48 <main+0x34c>)
 8002e8e:	6353      	str	r3, [r2, #52]	; 0x34
							TIM3->CCR2 = ccr2 > 20000 ? 19900 : ccr2 < 10000 ? 10000 : ccr2;
 8002e90:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <main+0x350>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d807      	bhi.n	8002eac <main+0x2b0>
 8002e9c:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <main+0x350>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f242 7210 	movw	r2, #10000	; 0x2710
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	bf38      	it	cc
 8002ea8:	4613      	movcc	r3, r2
 8002eaa:	e001      	b.n	8002eb0 <main+0x2b4>
 8002eac:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 8002eb0:	4a25      	ldr	r2, [pc, #148]	; (8002f48 <main+0x34c>)
 8002eb2:	6393      	str	r3, [r2, #56]	; 0x38
							TIM3->CCR3 = ccr3 > 20000 ? 19900 : ccr3 < 10000 ? 10000 : ccr3;
 8002eb4:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <main+0x354>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d849      	bhi.n	8002f54 <main+0x358>
 8002ec0:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <main+0x354>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f242 7210 	movw	r2, #10000	; 0x2710
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	bf38      	it	cc
 8002ecc:	4613      	movcc	r3, r2
 8002ece:	e043      	b.n	8002f58 <main+0x35c>
 8002ed0:	2400027c 	.word	0x2400027c
 8002ed4:	3edc28f6 	.word	0x3edc28f6
 8002ed8:	befae148 	.word	0xbefae148
 8002edc:	bfb33333 	.word	0xbfb33333
 8002ee0:	58020000 	.word	0x58020000
 8002ee4:	24000758 	.word	0x24000758
 8002ee8:	2400023d 	.word	0x2400023d
 8002eec:	24000528 	.word	0x24000528
 8002ef0:	2400023f 	.word	0x2400023f
 8002ef4:	240006bc 	.word	0x240006bc
 8002ef8:	240003e4 	.word	0x240003e4
 8002efc:	2400023b 	.word	0x2400023b
 8002f00:	080145b8 	.word	0x080145b8
 8002f04:	24000398 	.word	0x24000398
 8002f08:	080145cc 	.word	0x080145cc
 8002f0c:	2400074c 	.word	0x2400074c
 8002f10:	24000750 	.word	0x24000750
 8002f14:	24000754 	.word	0x24000754
 8002f18:	080145e0 	.word	0x080145e0
 8002f1c:	24000240 	.word	0x24000240
 8002f20:	58021000 	.word	0x58021000
 8002f24:	080145f8 	.word	0x080145f8
 8002f28:	24000260 	.word	0x24000260
 8002f2c:	2400022d 	.word	0x2400022d
 8002f30:	24000230 	.word	0x24000230
 8002f34:	2400022e 	.word	0x2400022e
 8002f38:	24000310 	.word	0x24000310
 8002f3c:	24000234 	.word	0x24000234
 8002f40:	24000238 	.word	0x24000238
 8002f44:	24000394 	.word	0x24000394
 8002f48:	40000400 	.word	0x40000400
 8002f4c:	24000520 	.word	0x24000520
 8002f50:	240006b8 	.word	0x240006b8
 8002f54:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 8002f58:	4aaf      	ldr	r2, [pc, #700]	; (8003218 <main+0x61c>)
 8002f5a:	63d3      	str	r3, [r2, #60]	; 0x3c
							TIM3->CCR4 = ccr4 > 20000 ? 19900 : ccr4 < 10000 ? 10000 : ccr4;
 8002f5c:	4baf      	ldr	r3, [pc, #700]	; (800321c <main+0x620>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d807      	bhi.n	8002f78 <main+0x37c>
 8002f68:	4bac      	ldr	r3, [pc, #688]	; (800321c <main+0x620>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f70:	4293      	cmp	r3, r2
 8002f72:	bf38      	it	cc
 8002f74:	4613      	movcc	r3, r2
 8002f76:	e001      	b.n	8002f7c <main+0x380>
 8002f78:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 8002f7c:	4aa6      	ldr	r2, [pc, #664]	; (8003218 <main+0x61c>)
 8002f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f80:	e031      	b.n	8002fe6 <main+0x3ea>

						}
						else
						{
							TIM3->CCR1 = 10000;
 8002f82:	4ba5      	ldr	r3, [pc, #660]	; (8003218 <main+0x61c>)
 8002f84:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f88:	635a      	str	r2, [r3, #52]	; 0x34
							TIM3->CCR2 = 10000;
 8002f8a:	4ba3      	ldr	r3, [pc, #652]	; (8003218 <main+0x61c>)
 8002f8c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38
							TIM3->CCR3 = 10000;
 8002f92:	4ba1      	ldr	r3, [pc, #644]	; (8003218 <main+0x61c>)
 8002f94:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f98:	63da      	str	r2, [r3, #60]	; 0x3c
							TIM3->CCR4 = 10000;
 8002f9a:	4b9f      	ldr	r3, [pc, #636]	; (8003218 <main+0x61c>)
 8002f9c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8002fa2:	e020      	b.n	8002fe6 <main+0x3ea>
						}
					}
					else
					{
						TIM3->CCR1 = 10000;
 8002fa4:	4b9c      	ldr	r3, [pc, #624]	; (8003218 <main+0x61c>)
 8002fa6:	f242 7210 	movw	r2, #10000	; 0x2710
 8002faa:	635a      	str	r2, [r3, #52]	; 0x34
						TIM3->CCR2 = 10000;
 8002fac:	4b9a      	ldr	r3, [pc, #616]	; (8003218 <main+0x61c>)
 8002fae:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
						TIM3->CCR3 = 10000;
 8002fb4:	4b98      	ldr	r3, [pc, #608]	; (8003218 <main+0x61c>)
 8002fb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fba:	63da      	str	r2, [r3, #60]	; 0x3c
						TIM3->CCR4 = 10000;
 8002fbc:	4b96      	ldr	r3, [pc, #600]	; (8003218 <main+0x61c>)
 8002fbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
 8002fc4:	e00f      	b.n	8002fe6 <main+0x3ea>
					}
				}
				else
				{
					TIM3->CCR1 = 10000;
 8002fc6:	4b94      	ldr	r3, [pc, #592]	; (8003218 <main+0x61c>)
 8002fc8:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fcc:	635a      	str	r2, [r3, #52]	; 0x34
					TIM3->CCR2 = 10000;
 8002fce:	4b92      	ldr	r3, [pc, #584]	; (8003218 <main+0x61c>)
 8002fd0:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38
					TIM3->CCR3 = 10000;
 8002fd6:	4b90      	ldr	r3, [pc, #576]	; (8003218 <main+0x61c>)
 8002fd8:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fdc:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM3->CCR4 = 10000;
 8002fde:	4b8e      	ldr	r3, [pc, #568]	; (8003218 <main+0x61c>)
 8002fe0:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40
				}

		//Read MPU9250 + Motor PID
		if(tim1_2ms_flag == 1)
 8002fe6:	4b8e      	ldr	r3, [pc, #568]	; (8003220 <main+0x624>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d16f      	bne.n	80030ce <main+0x4d2>
		{
			tim1_2ms_flag = 0;
 8002fee:	4b8c      	ldr	r3, [pc, #560]	; (8003220 <main+0x624>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
			MPU9250_Read_All(&hi2c1);
 8002ff4:	488b      	ldr	r0, [pc, #556]	; (8003224 <main+0x628>)
 8002ff6:	f7fd fe49 	bl	8000c8c <MPU9250_Read_All>
			MPU9250_Parsing(&MPU9250);
 8002ffa:	488b      	ldr	r0, [pc, #556]	; (8003228 <main+0x62c>)
 8002ffc:	f7fd fe5c 	bl	8000cb8 <MPU9250_Parsing>
			MadgwickAHRSupdate(MPU9250.Gx_Rad, MPU9250.Gy_Rad, MPU9250.Gz_Rad, MPU9250.Ax, MPU9250.Ay, MPU9250.Az, MPU9250.Mx, MPU9250.My, MPU9250.Mz);
 8003000:	4b89      	ldr	r3, [pc, #548]	; (8003228 <main+0x62c>)
 8003002:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003006:	4b88      	ldr	r3, [pc, #544]	; (8003228 <main+0x62c>)
 8003008:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800300c:	4b86      	ldr	r3, [pc, #536]	; (8003228 <main+0x62c>)
 800300e:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8003012:	4b85      	ldr	r3, [pc, #532]	; (8003228 <main+0x62c>)
 8003014:	ed93 6a02 	vldr	s12, [r3, #8]
 8003018:	4b83      	ldr	r3, [pc, #524]	; (8003228 <main+0x62c>)
 800301a:	edd3 5a03 	vldr	s11, [r3, #12]
 800301e:	4b82      	ldr	r3, [pc, #520]	; (8003228 <main+0x62c>)
 8003020:	ed93 5a04 	vldr	s10, [r3, #16]
 8003024:	4b80      	ldr	r3, [pc, #512]	; (8003228 <main+0x62c>)
 8003026:	edd3 4a1c 	vldr	s9, [r3, #112]	; 0x70
 800302a:	4b7f      	ldr	r3, [pc, #508]	; (8003228 <main+0x62c>)
 800302c:	edd3 3a1d 	vldr	s7, [r3, #116]	; 0x74
 8003030:	4b7d      	ldr	r3, [pc, #500]	; (8003228 <main+0x62c>)
 8003032:	ed93 4a1e 	vldr	s8, [r3, #120]	; 0x78
 8003036:	eeb0 3a64 	vmov.f32	s6, s9
 800303a:	eef0 2a45 	vmov.f32	s5, s10
 800303e:	eeb0 2a65 	vmov.f32	s4, s11
 8003042:	eef0 1a46 	vmov.f32	s3, s12
 8003046:	eeb0 1a66 	vmov.f32	s2, s13
 800304a:	eef0 0a47 	vmov.f32	s1, s14
 800304e:	eeb0 0a67 	vmov.f32	s0, s15
 8003052:	f7fe f947 	bl	80012e4 <MadgwickAHRSupdate>

			ccr1 = 10000 + (iBus.LV-1000)*10;
 8003056:	4b75      	ldr	r3, [pc, #468]	; (800322c <main+0x630>)
 8003058:	889b      	ldrh	r3, [r3, #4]
 800305a:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	461a      	mov	r2, r3
 8003068:	f242 7310 	movw	r3, #10000	; 0x2710
 800306c:	4413      	add	r3, r2
 800306e:	461a      	mov	r2, r3
 8003070:	4b6f      	ldr	r3, [pc, #444]	; (8003230 <main+0x634>)
 8003072:	601a      	str	r2, [r3, #0]
			ccr2 = 10000 + (iBus.LV-1000)*10;
 8003074:	4b6d      	ldr	r3, [pc, #436]	; (800322c <main+0x630>)
 8003076:	889b      	ldrh	r3, [r3, #4]
 8003078:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	461a      	mov	r2, r3
 8003086:	f242 7310 	movw	r3, #10000	; 0x2710
 800308a:	4413      	add	r3, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4b69      	ldr	r3, [pc, #420]	; (8003234 <main+0x638>)
 8003090:	601a      	str	r2, [r3, #0]
			ccr3 = 10000 + (iBus.LV-1000)*10;
 8003092:	4b66      	ldr	r3, [pc, #408]	; (800322c <main+0x630>)
 8003094:	889b      	ldrh	r3, [r3, #4]
 8003096:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	461a      	mov	r2, r3
 80030a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80030a8:	4413      	add	r3, r2
 80030aa:	461a      	mov	r2, r3
 80030ac:	4b62      	ldr	r3, [pc, #392]	; (8003238 <main+0x63c>)
 80030ae:	601a      	str	r2, [r3, #0]
			ccr4 = 10000 + (iBus.LV-1000)*10;
 80030b0:	4b5e      	ldr	r3, [pc, #376]	; (800322c <main+0x630>)
 80030b2:	889b      	ldrh	r3, [r3, #4]
 80030b4:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	461a      	mov	r2, r3
 80030c2:	f242 7310 	movw	r3, #10000	; 0x2710
 80030c6:	4413      	add	r3, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4b54      	ldr	r3, [pc, #336]	; (800321c <main+0x620>)
 80030cc:	601a      	str	r2, [r3, #0]
		}

		//Print According to the Input
		if(tim1_20ms_flag == 1)
 80030ce:	4b5b      	ldr	r3, [pc, #364]	; (800323c <main+0x640>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	f040 80eb 	bne.w	80032ae <main+0x6b2>
		{
			tim1_20ms_flag = 0;
 80030d8:	4b58      	ldr	r3, [pc, #352]	; (800323c <main+0x640>)
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
//			printf("%.2f \t %.2f \t %.2f \t \n", System_Roll, System_Pitch, System_Yaw);

			switch(print_mode)
 80030de:	4b58      	ldr	r3, [pc, #352]	; (8003240 <main+0x644>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	2b0a      	cmp	r3, #10
 80030e6:	f200 80e4 	bhi.w	80032b2 <main+0x6b6>
 80030ea:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <main+0x4f4>)
 80030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f0:	0800311d 	.word	0x0800311d
 80030f4:	080032b3 	.word	0x080032b3
 80030f8:	0800314f 	.word	0x0800314f
 80030fc:	08003181 	.word	0x08003181
 8003100:	080031b3 	.word	0x080031b3
 8003104:	080031e5 	.word	0x080031e5
 8003108:	080032b3 	.word	0x080032b3
 800310c:	080032b3 	.word	0x080032b3
 8003110:	080032b3 	.word	0x080032b3
 8003114:	080032b3 	.word	0x080032b3
 8003118:	08003259 	.word	0x08003259
			{
			case 1: printf("%.2f \t %.2f \t %.2f \t \n", System_Roll, System_Pitch, System_Yaw); break; //Roll, Pitch, Yaw
 800311c:	4b49      	ldr	r3, [pc, #292]	; (8003244 <main+0x648>)
 800311e:	edd3 7a00 	vldr	s15, [r3]
 8003122:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003126:	4b48      	ldr	r3, [pc, #288]	; (8003248 <main+0x64c>)
 8003128:	edd3 7a00 	vldr	s15, [r3]
 800312c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003130:	4b46      	ldr	r3, [pc, #280]	; (800324c <main+0x650>)
 8003132:	edd3 6a00 	vldr	s13, [r3]
 8003136:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800313a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800313e:	ed8d 7b00 	vstr	d7, [sp]
 8003142:	ec53 2b15 	vmov	r2, r3, d5
 8003146:	4842      	ldr	r0, [pc, #264]	; (8003250 <main+0x654>)
 8003148:	f00e fcf8 	bl	8011b3c <iprintf>
 800314c:	e0b2      	b.n	80032b4 <main+0x6b8>
			case 2: /* printf("%.2f \t %.2f \t \m", Alt, Alt_Filt); */ break; //Alt Raw, Alt Filt
			case 3: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Gx, MPU9250.Gy, MPU9250.Gz); break; //Gyro
 800314e:	4b36      	ldr	r3, [pc, #216]	; (8003228 <main+0x62c>)
 8003150:	edd3 7a07 	vldr	s15, [r3, #28]
 8003154:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003158:	4b33      	ldr	r3, [pc, #204]	; (8003228 <main+0x62c>)
 800315a:	edd3 7a08 	vldr	s15, [r3, #32]
 800315e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003162:	4b31      	ldr	r3, [pc, #196]	; (8003228 <main+0x62c>)
 8003164:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003168:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800316c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003170:	ed8d 7b00 	vstr	d7, [sp]
 8003174:	ec53 2b15 	vmov	r2, r3, d5
 8003178:	4835      	ldr	r0, [pc, #212]	; (8003250 <main+0x654>)
 800317a:	f00e fcdf 	bl	8011b3c <iprintf>
 800317e:	e099      	b.n	80032b4 <main+0x6b8>
			case 4: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Ax, MPU9250.Ay, MPU9250.Az); break; //Accel
 8003180:	4b29      	ldr	r3, [pc, #164]	; (8003228 <main+0x62c>)
 8003182:	edd3 7a02 	vldr	s15, [r3, #8]
 8003186:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800318a:	4b27      	ldr	r3, [pc, #156]	; (8003228 <main+0x62c>)
 800318c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003190:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003194:	4b24      	ldr	r3, [pc, #144]	; (8003228 <main+0x62c>)
 8003196:	edd3 6a04 	vldr	s13, [r3, #16]
 800319a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800319e:	ed8d 6b02 	vstr	d6, [sp, #8]
 80031a2:	ed8d 7b00 	vstr	d7, [sp]
 80031a6:	ec53 2b15 	vmov	r2, r3, d5
 80031aa:	4829      	ldr	r0, [pc, #164]	; (8003250 <main+0x654>)
 80031ac:	f00e fcc6 	bl	8011b3c <iprintf>
 80031b0:	e080      	b.n	80032b4 <main+0x6b8>
			case 5: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Mx, MPU9250.My, MPU9250.Mz); break; //Mag
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <main+0x62c>)
 80031b4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80031b8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80031bc:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <main+0x62c>)
 80031be:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80031c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031c6:	4b18      	ldr	r3, [pc, #96]	; (8003228 <main+0x62c>)
 80031c8:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 80031cc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80031d0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80031d4:	ed8d 7b00 	vstr	d7, [sp]
 80031d8:	ec53 2b15 	vmov	r2, r3, d5
 80031dc:	481c      	ldr	r0, [pc, #112]	; (8003250 <main+0x654>)
 80031de:	f00e fcad 	bl	8011b3c <iprintf>
 80031e2:	e067      	b.n	80032b4 <main+0x6b8>
			case 6: printf("%f \t %f \t %f \t \n", MPU9250.Mx_Offset, MPU9250.My_Offset, MPU9250.Mz_Offset); break; //Mag_Offset
 80031e4:	4b10      	ldr	r3, [pc, #64]	; (8003228 <main+0x62c>)
 80031e6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80031ea:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80031ee:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <main+0x62c>)
 80031f0:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80031f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <main+0x62c>)
 80031fa:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80031fe:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003202:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003206:	ed8d 7b00 	vstr	d7, [sp]
 800320a:	ec53 2b15 	vmov	r2, r3, d5
 800320e:	4811      	ldr	r0, [pc, #68]	; (8003254 <main+0x658>)
 8003210:	f00e fc94 	bl	8011b3c <iprintf>
 8003214:	e04e      	b.n	80032b4 <main+0x6b8>
 8003216:	bf00      	nop
 8003218:	40000400 	.word	0x40000400
 800321c:	24000524 	.word	0x24000524
 8003220:	24000239 	.word	0x24000239
 8003224:	24000398 	.word	0x24000398
 8003228:	2400027c 	.word	0x2400027c
 800322c:	24000260 	.word	0x24000260
 8003230:	24000394 	.word	0x24000394
 8003234:	24000520 	.word	0x24000520
 8003238:	240006b8 	.word	0x240006b8
 800323c:	2400023b 	.word	0x2400023b
 8003240:	2400022c 	.word	0x2400022c
 8003244:	24000314 	.word	0x24000314
 8003248:	24000318 	.word	0x24000318
 800324c:	24000310 	.word	0x24000310
 8003250:	08014608 	.word	0x08014608
 8003254:	08014620 	.word	0x08014620
			case 11: printf("%d %d %d %d %d %d %d %d %d %d \n", iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.VrA, iBus.VrB, iBus.SwC, iBus.SwD); break; //Mag_Offset
 8003258:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <main+0x6bc>)
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	469c      	mov	ip, r3
 800325e:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <main+0x6bc>)
 8003260:	885b      	ldrh	r3, [r3, #2]
 8003262:	469e      	mov	lr, r3
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <main+0x6bc>)
 8003266:	889b      	ldrh	r3, [r3, #4]
 8003268:	4698      	mov	r8, r3
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <main+0x6bc>)
 800326c:	88db      	ldrh	r3, [r3, #6]
 800326e:	461a      	mov	r2, r3
 8003270:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <main+0x6bc>)
 8003272:	891b      	ldrh	r3, [r3, #8]
 8003274:	4619      	mov	r1, r3
 8003276:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <main+0x6bc>)
 8003278:	895b      	ldrh	r3, [r3, #10]
 800327a:	4618      	mov	r0, r3
 800327c:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <main+0x6bc>)
 800327e:	8a1b      	ldrh	r3, [r3, #16]
 8003280:	461c      	mov	r4, r3
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <main+0x6bc>)
 8003284:	8a5b      	ldrh	r3, [r3, #18]
 8003286:	461d      	mov	r5, r3
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <main+0x6bc>)
 800328a:	899b      	ldrh	r3, [r3, #12]
 800328c:	461e      	mov	r6, r3
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <main+0x6bc>)
 8003290:	89db      	ldrh	r3, [r3, #14]
 8003292:	9306      	str	r3, [sp, #24]
 8003294:	9605      	str	r6, [sp, #20]
 8003296:	9504      	str	r5, [sp, #16]
 8003298:	9403      	str	r4, [sp, #12]
 800329a:	9002      	str	r0, [sp, #8]
 800329c:	9101      	str	r1, [sp, #4]
 800329e:	9200      	str	r2, [sp, #0]
 80032a0:	4643      	mov	r3, r8
 80032a2:	4672      	mov	r2, lr
 80032a4:	4661      	mov	r1, ip
 80032a6:	4805      	ldr	r0, [pc, #20]	; (80032bc <main+0x6c0>)
 80032a8:	f00e fc48 	bl	8011b3c <iprintf>
 80032ac:	e002      	b.n	80032b4 <main+0x6b8>
			default: break;
			}
		}
 80032ae:	bf00      	nop
 80032b0:	e59c      	b.n	8002dec <main+0x1f0>
			default: break;
 80032b2:	bf00      	nop
	{
 80032b4:	e59a      	b.n	8002dec <main+0x1f0>
 80032b6:	bf00      	nop
 80032b8:	24000260 	.word	0x24000260
 80032bc:	08014634 	.word	0x08014634

080032c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b09c      	sub	sp, #112	; 0x70
 80032c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ca:	224c      	movs	r2, #76	; 0x4c
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f00d ffe8 	bl	80112a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	2220      	movs	r2, #32
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f00d ffe2 	bl	80112a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80032e0:	2002      	movs	r0, #2
 80032e2:	f007 fb6f 	bl	800a9c4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80032e6:	2300      	movs	r3, #0
 80032e8:	603b      	str	r3, [r7, #0]
 80032ea:	4b32      	ldr	r3, [pc, #200]	; (80033b4 <SystemClock_Config+0xf4>)
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	4a31      	ldr	r2, [pc, #196]	; (80033b4 <SystemClock_Config+0xf4>)
 80032f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032f4:	6193      	str	r3, [r2, #24]
 80032f6:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <SystemClock_Config+0xf4>)
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <SystemClock_Config+0xf8>)
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	4a2c      	ldr	r2, [pc, #176]	; (80033b8 <SystemClock_Config+0xf8>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800330c:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <SystemClock_Config+0xf8>)
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	603b      	str	r3, [r7, #0]
 8003316:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003318:	bf00      	nop
 800331a:	4b26      	ldr	r3, [pc, #152]	; (80033b4 <SystemClock_Config+0xf4>)
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003326:	d1f8      	bne.n	800331a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003328:	2303      	movs	r3, #3
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800332c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003332:	2301      	movs	r3, #1
 8003334:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003336:	2340      	movs	r3, #64	; 0x40
 8003338:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800333a:	2302      	movs	r3, #2
 800333c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800333e:	2302      	movs	r3, #2
 8003340:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8003342:	2305      	movs	r3, #5
 8003344:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003346:	23c0      	movs	r3, #192	; 0xc0
 8003348:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800334a:	2302      	movs	r3, #2
 800334c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800334e:	2302      	movs	r3, #2
 8003350:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003352:	2302      	movs	r3, #2
 8003354:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003356:	2308      	movs	r3, #8
 8003358:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800335a:	2300      	movs	r3, #0
 800335c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003366:	4618      	mov	r0, r3
 8003368:	f007 fb66 	bl	800aa38 <HAL_RCC_OscConfig>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003372:	f000 fc2b 	bl	8003bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003376:	233f      	movs	r3, #63	; 0x3f
 8003378:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800337a:	2303      	movs	r3, #3
 800337c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003382:	2308      	movs	r3, #8
 8003384:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003386:	2340      	movs	r3, #64	; 0x40
 8003388:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800338a:	2340      	movs	r3, #64	; 0x40
 800338c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800338e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003392:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003394:	2340      	movs	r3, #64	; 0x40
 8003396:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	2104      	movs	r1, #4
 800339c:	4618      	mov	r0, r3
 800339e:	f007 ff5b 	bl	800b258 <HAL_RCC_ClockConfig>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <SystemClock_Config+0xec>
  {
    Error_Handler();
 80033a8:	f000 fc10 	bl	8003bcc <Error_Handler>
  }
}
 80033ac:	bf00      	nop
 80033ae:	3770      	adds	r7, #112	; 0x70
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	58024800 	.word	0x58024800
 80033b8:	58000400 	.word	0x58000400

080033bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b0b0      	sub	sp, #192	; 0xc0
 80033c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	22bc      	movs	r2, #188	; 0xbc
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f00d ff6b 	bl	80112a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80033ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80033d2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80033d4:	2300      	movs	r3, #0
 80033d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033d8:	1d3b      	adds	r3, r7, #4
 80033da:	4618      	mov	r0, r3
 80033dc:	f008 fac8 	bl	800b970 <HAL_RCCEx_PeriphCLKConfig>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 80033e6:	f000 fbf1 	bl	8003bcc <Error_Handler>
  }
}
 80033ea:	bf00      	nop
 80033ec:	37c0      	adds	r7, #192	; 0xc0
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <MX_I2C1_Init+0x74>)
 80033fa:	4a1c      	ldr	r2, [pc, #112]	; (800346c <MX_I2C1_Init+0x78>)
 80033fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80033fe:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <MX_I2C1_Init+0x74>)
 8003400:	4a1b      	ldr	r2, [pc, #108]	; (8003470 <MX_I2C1_Init+0x7c>)
 8003402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003404:	4b18      	ldr	r3, [pc, #96]	; (8003468 <MX_I2C1_Init+0x74>)
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800340a:	4b17      	ldr	r3, [pc, #92]	; (8003468 <MX_I2C1_Init+0x74>)
 800340c:	2201      	movs	r2, #1
 800340e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003410:	4b15      	ldr	r3, [pc, #84]	; (8003468 <MX_I2C1_Init+0x74>)
 8003412:	2200      	movs	r2, #0
 8003414:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003416:	4b14      	ldr	r3, [pc, #80]	; (8003468 <MX_I2C1_Init+0x74>)
 8003418:	2200      	movs	r2, #0
 800341a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <MX_I2C1_Init+0x74>)
 800341e:	2200      	movs	r2, #0
 8003420:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003422:	4b11      	ldr	r3, [pc, #68]	; (8003468 <MX_I2C1_Init+0x74>)
 8003424:	2200      	movs	r2, #0
 8003426:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003428:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <MX_I2C1_Init+0x74>)
 800342a:	2200      	movs	r2, #0
 800342c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800342e:	480e      	ldr	r0, [pc, #56]	; (8003468 <MX_I2C1_Init+0x74>)
 8003430:	f005 f874 	bl	800851c <HAL_I2C_Init>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800343a:	f000 fbc7 	bl	8003bcc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800343e:	2100      	movs	r1, #0
 8003440:	4809      	ldr	r0, [pc, #36]	; (8003468 <MX_I2C1_Init+0x74>)
 8003442:	f007 fa27 	bl	800a894 <HAL_I2CEx_ConfigAnalogFilter>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800344c:	f000 fbbe 	bl	8003bcc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003450:	2100      	movs	r1, #0
 8003452:	4805      	ldr	r0, [pc, #20]	; (8003468 <MX_I2C1_Init+0x74>)
 8003454:	f007 fa69 	bl	800a92a <HAL_I2CEx_ConfigDigitalFilter>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800345e:	f000 fbb5 	bl	8003bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	24000398 	.word	0x24000398
 800346c:	40005400 	.word	0x40005400
 8003470:	00b03fdb 	.word	0x00b03fdb

08003474 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003478:	4b27      	ldr	r3, [pc, #156]	; (8003518 <MX_SPI1_Init+0xa4>)
 800347a:	4a28      	ldr	r2, [pc, #160]	; (800351c <MX_SPI1_Init+0xa8>)
 800347c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800347e:	4b26      	ldr	r3, [pc, #152]	; (8003518 <MX_SPI1_Init+0xa4>)
 8003480:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003484:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003486:	4b24      	ldr	r3, [pc, #144]	; (8003518 <MX_SPI1_Init+0xa4>)
 8003488:	2200      	movs	r2, #0
 800348a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800348c:	4b22      	ldr	r3, [pc, #136]	; (8003518 <MX_SPI1_Init+0xa4>)
 800348e:	2207      	movs	r2, #7
 8003490:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003492:	4b21      	ldr	r3, [pc, #132]	; (8003518 <MX_SPI1_Init+0xa4>)
 8003494:	2200      	movs	r2, #0
 8003496:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003498:	4b1f      	ldr	r3, [pc, #124]	; (8003518 <MX_SPI1_Init+0xa4>)
 800349a:	2200      	movs	r2, #0
 800349c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800349e:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <MX_SPI1_Init+0xa4>)
 80034a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80034a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80034a6:	4b1c      	ldr	r3, [pc, #112]	; (8003518 <MX_SPI1_Init+0xa4>)
 80034a8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80034ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034ae:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <MX_SPI1_Init+0xa4>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80034b4:	4b18      	ldr	r3, [pc, #96]	; (8003518 <MX_SPI1_Init+0xa4>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ba:	4b17      	ldr	r3, [pc, #92]	; (8003518 <MX_SPI1_Init+0xa4>)
 80034bc:	2200      	movs	r2, #0
 80034be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80034c0:	4b15      	ldr	r3, [pc, #84]	; (8003518 <MX_SPI1_Init+0xa4>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034c6:	4b14      	ldr	r3, [pc, #80]	; (8003518 <MX_SPI1_Init+0xa4>)
 80034c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034cc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <MX_SPI1_Init+0xa4>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80034d4:	4b10      	ldr	r3, [pc, #64]	; (8003518 <MX_SPI1_Init+0xa4>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80034da:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <MX_SPI1_Init+0xa4>)
 80034dc:	2200      	movs	r2, #0
 80034de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80034e0:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <MX_SPI1_Init+0xa4>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80034e6:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <MX_SPI1_Init+0xa4>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <MX_SPI1_Init+0xa4>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <MX_SPI1_Init+0xa4>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80034f8:	4b07      	ldr	r3, [pc, #28]	; (8003518 <MX_SPI1_Init+0xa4>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <MX_SPI1_Init+0xa4>)
 8003500:	2200      	movs	r2, #0
 8003502:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003504:	4804      	ldr	r0, [pc, #16]	; (8003518 <MX_SPI1_Init+0xa4>)
 8003506:	f009 fd95 	bl	800d034 <HAL_SPI_Init>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003510:	f000 fb5c 	bl	8003bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003514:	bf00      	nop
 8003516:	bd80      	pop	{r7, pc}
 8003518:	24000630 	.word	0x24000630
 800351c:	40013000 	.word	0x40013000

08003520 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08e      	sub	sp, #56	; 0x38
 8003524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	609a      	str	r2, [r3, #8]
 8003532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003534:	f107 031c 	add.w	r3, r7, #28
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003540:	463b      	mov	r3, r7
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	609a      	str	r2, [r3, #8]
 800354a:	60da      	str	r2, [r3, #12]
 800354c:	611a      	str	r2, [r3, #16]
 800354e:	615a      	str	r2, [r3, #20]
 8003550:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003552:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <MX_TIM3_Init+0x128>)
 8003554:	4a3d      	ldr	r2, [pc, #244]	; (800364c <MX_TIM3_Init+0x12c>)
 8003556:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8003558:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <MX_TIM3_Init+0x128>)
 800355a:	2217      	movs	r2, #23
 800355c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800355e:	4b3a      	ldr	r3, [pc, #232]	; (8003648 <MX_TIM3_Init+0x128>)
 8003560:	2200      	movs	r2, #0
 8003562:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8003564:	4b38      	ldr	r3, [pc, #224]	; (8003648 <MX_TIM3_Init+0x128>)
 8003566:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800356a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800356c:	4b36      	ldr	r3, [pc, #216]	; (8003648 <MX_TIM3_Init+0x128>)
 800356e:	2200      	movs	r2, #0
 8003570:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003572:	4b35      	ldr	r3, [pc, #212]	; (8003648 <MX_TIM3_Init+0x128>)
 8003574:	2200      	movs	r2, #0
 8003576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003578:	4833      	ldr	r0, [pc, #204]	; (8003648 <MX_TIM3_Init+0x128>)
 800357a:	f00a fe16 	bl	800e1aa <HAL_TIM_Base_Init>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003584:	f000 fb22 	bl	8003bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800358c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800358e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003592:	4619      	mov	r1, r3
 8003594:	482c      	ldr	r0, [pc, #176]	; (8003648 <MX_TIM3_Init+0x128>)
 8003596:	f00b faaf 	bl	800eaf8 <HAL_TIM_ConfigClockSource>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80035a0:	f000 fb14 	bl	8003bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035a4:	4828      	ldr	r0, [pc, #160]	; (8003648 <MX_TIM3_Init+0x128>)
 80035a6:	f00a fec7 	bl	800e338 <HAL_TIM_PWM_Init>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80035b0:	f000 fb0c 	bl	8003bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035bc:	f107 031c 	add.w	r3, r7, #28
 80035c0:	4619      	mov	r1, r3
 80035c2:	4821      	ldr	r0, [pc, #132]	; (8003648 <MX_TIM3_Init+0x128>)
 80035c4:	f00b ffe0 	bl	800f588 <HAL_TIMEx_MasterConfigSynchronization>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80035ce:	f000 fafd 	bl	8003bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035d2:	2360      	movs	r3, #96	; 0x60
 80035d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80035d6:	2300      	movs	r3, #0
 80035d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035e2:	463b      	mov	r3, r7
 80035e4:	2200      	movs	r2, #0
 80035e6:	4619      	mov	r1, r3
 80035e8:	4817      	ldr	r0, [pc, #92]	; (8003648 <MX_TIM3_Init+0x128>)
 80035ea:	f00b f975 	bl	800e8d8 <HAL_TIM_PWM_ConfigChannel>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80035f4:	f000 faea 	bl	8003bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035f8:	463b      	mov	r3, r7
 80035fa:	2204      	movs	r2, #4
 80035fc:	4619      	mov	r1, r3
 80035fe:	4812      	ldr	r0, [pc, #72]	; (8003648 <MX_TIM3_Init+0x128>)
 8003600:	f00b f96a 	bl	800e8d8 <HAL_TIM_PWM_ConfigChannel>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800360a:	f000 fadf 	bl	8003bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800360e:	463b      	mov	r3, r7
 8003610:	2208      	movs	r2, #8
 8003612:	4619      	mov	r1, r3
 8003614:	480c      	ldr	r0, [pc, #48]	; (8003648 <MX_TIM3_Init+0x128>)
 8003616:	f00b f95f 	bl	800e8d8 <HAL_TIM_PWM_ConfigChannel>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8003620:	f000 fad4 	bl	8003bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003624:	463b      	mov	r3, r7
 8003626:	220c      	movs	r2, #12
 8003628:	4619      	mov	r1, r3
 800362a:	4807      	ldr	r0, [pc, #28]	; (8003648 <MX_TIM3_Init+0x128>)
 800362c:	f00b f954 	bl	800e8d8 <HAL_TIM_PWM_ConfigChannel>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8003636:	f000 fac9 	bl	8003bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800363a:	4803      	ldr	r0, [pc, #12]	; (8003648 <MX_TIM3_Init+0x128>)
 800363c:	f000 fc32 	bl	8003ea4 <HAL_TIM_MspPostInit>

}
 8003640:	bf00      	nop
 8003642:	3738      	adds	r7, #56	; 0x38
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	240003e4 	.word	0x240003e4
 800364c:	40000400 	.word	0x40000400

08003650 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003656:	1d3b      	adds	r3, r7, #4
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003660:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <MX_TIM7_Init+0x64>)
 8003662:	4a15      	ldr	r2, [pc, #84]	; (80036b8 <MX_TIM7_Init+0x68>)
 8003664:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <MX_TIM7_Init+0x64>)
 8003668:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800366c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <MX_TIM7_Init+0x64>)
 8003670:	2200      	movs	r2, #0
 8003672:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <MX_TIM7_Init+0x64>)
 8003676:	2205      	movs	r2, #5
 8003678:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800367a:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <MX_TIM7_Init+0x64>)
 800367c:	2280      	movs	r2, #128	; 0x80
 800367e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003680:	480c      	ldr	r0, [pc, #48]	; (80036b4 <MX_TIM7_Init+0x64>)
 8003682:	f00a fd92 	bl	800e1aa <HAL_TIM_Base_Init>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800368c:	f000 fa9e 	bl	8003bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003690:	2300      	movs	r3, #0
 8003692:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003698:	1d3b      	adds	r3, r7, #4
 800369a:	4619      	mov	r1, r3
 800369c:	4805      	ldr	r0, [pc, #20]	; (80036b4 <MX_TIM7_Init+0x64>)
 800369e:	f00b ff73 	bl	800f588 <HAL_TIMEx_MasterConfigSynchronization>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80036a8:	f000 fa90 	bl	8003bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	24000758 	.word	0x24000758
 80036b8:	40001400 	.word	0x40001400

080036bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036c0:	4b22      	ldr	r3, [pc, #136]	; (800374c <MX_USART1_UART_Init+0x90>)
 80036c2:	4a23      	ldr	r2, [pc, #140]	; (8003750 <MX_USART1_UART_Init+0x94>)
 80036c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80036c6:	4b21      	ldr	r3, [pc, #132]	; (800374c <MX_USART1_UART_Init+0x90>)
 80036c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036ce:	4b1f      	ldr	r3, [pc, #124]	; (800374c <MX_USART1_UART_Init+0x90>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <MX_USART1_UART_Init+0x90>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036da:	4b1c      	ldr	r3, [pc, #112]	; (800374c <MX_USART1_UART_Init+0x90>)
 80036dc:	2200      	movs	r2, #0
 80036de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036e0:	4b1a      	ldr	r3, [pc, #104]	; (800374c <MX_USART1_UART_Init+0x90>)
 80036e2:	220c      	movs	r2, #12
 80036e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036e6:	4b19      	ldr	r3, [pc, #100]	; (800374c <MX_USART1_UART_Init+0x90>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036ec:	4b17      	ldr	r3, [pc, #92]	; (800374c <MX_USART1_UART_Init+0x90>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036f2:	4b16      	ldr	r3, [pc, #88]	; (800374c <MX_USART1_UART_Init+0x90>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036f8:	4b14      	ldr	r3, [pc, #80]	; (800374c <MX_USART1_UART_Init+0x90>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <MX_USART1_UART_Init+0x90>)
 8003700:	2200      	movs	r2, #0
 8003702:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003704:	4811      	ldr	r0, [pc, #68]	; (800374c <MX_USART1_UART_Init+0x90>)
 8003706:	f00b ffe5 	bl	800f6d4 <HAL_UART_Init>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003710:	f000 fa5c 	bl	8003bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003714:	2100      	movs	r1, #0
 8003716:	480d      	ldr	r0, [pc, #52]	; (800374c <MX_USART1_UART_Init+0x90>)
 8003718:	f00d fcd0 	bl	80110bc <HAL_UARTEx_SetTxFifoThreshold>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003722:	f000 fa53 	bl	8003bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003726:	2100      	movs	r1, #0
 8003728:	4808      	ldr	r0, [pc, #32]	; (800374c <MX_USART1_UART_Init+0x90>)
 800372a:	f00d fd05 	bl	8011138 <HAL_UARTEx_SetRxFifoThreshold>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003734:	f000 fa4a 	bl	8003bcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003738:	4804      	ldr	r0, [pc, #16]	; (800374c <MX_USART1_UART_Init+0x90>)
 800373a:	f00d fc86 	bl	801104a <HAL_UARTEx_DisableFifoMode>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003744:	f000 fa42 	bl	8003bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003748:	bf00      	nop
 800374a:	bd80      	pop	{r7, pc}
 800374c:	24000528 	.word	0x24000528
 8003750:	40011000 	.word	0x40011000

08003754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003758:	4b22      	ldr	r3, [pc, #136]	; (80037e4 <MX_USART2_UART_Init+0x90>)
 800375a:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <MX_USART2_UART_Init+0x94>)
 800375c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800375e:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <MX_USART2_UART_Init+0x90>)
 8003760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003766:	4b1f      	ldr	r3, [pc, #124]	; (80037e4 <MX_USART2_UART_Init+0x90>)
 8003768:	2200      	movs	r2, #0
 800376a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <MX_USART2_UART_Init+0x90>)
 800376e:	2200      	movs	r2, #0
 8003770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003772:	4b1c      	ldr	r3, [pc, #112]	; (80037e4 <MX_USART2_UART_Init+0x90>)
 8003774:	2200      	movs	r2, #0
 8003776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003778:	4b1a      	ldr	r3, [pc, #104]	; (80037e4 <MX_USART2_UART_Init+0x90>)
 800377a:	220c      	movs	r2, #12
 800377c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800377e:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <MX_USART2_UART_Init+0x90>)
 8003780:	2200      	movs	r2, #0
 8003782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003784:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <MX_USART2_UART_Init+0x90>)
 8003786:	2200      	movs	r2, #0
 8003788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800378a:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <MX_USART2_UART_Init+0x90>)
 800378c:	2200      	movs	r2, #0
 800378e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003790:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <MX_USART2_UART_Init+0x90>)
 8003792:	2200      	movs	r2, #0
 8003794:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003796:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <MX_USART2_UART_Init+0x90>)
 8003798:	2200      	movs	r2, #0
 800379a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800379c:	4811      	ldr	r0, [pc, #68]	; (80037e4 <MX_USART2_UART_Init+0x90>)
 800379e:	f00b ff99 	bl	800f6d4 <HAL_UART_Init>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80037a8:	f000 fa10 	bl	8003bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037ac:	2100      	movs	r1, #0
 80037ae:	480d      	ldr	r0, [pc, #52]	; (80037e4 <MX_USART2_UART_Init+0x90>)
 80037b0:	f00d fc84 	bl	80110bc <HAL_UARTEx_SetTxFifoThreshold>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80037ba:	f000 fa07 	bl	8003bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037be:	2100      	movs	r1, #0
 80037c0:	4808      	ldr	r0, [pc, #32]	; (80037e4 <MX_USART2_UART_Init+0x90>)
 80037c2:	f00d fcb9 	bl	8011138 <HAL_UARTEx_SetRxFifoThreshold>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80037cc:	f000 f9fe 	bl	8003bcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80037d0:	4804      	ldr	r0, [pc, #16]	; (80037e4 <MX_USART2_UART_Init+0x90>)
 80037d2:	f00d fc3a 	bl	801104a <HAL_UARTEx_DisableFifoMode>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80037dc:	f000 f9f6 	bl	8003bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037e0:	bf00      	nop
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	240006bc 	.word	0x240006bc
 80037e8:	40004400 	.word	0x40004400

080037ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037f2:	4b19      	ldr	r3, [pc, #100]	; (8003858 <MX_DMA_Init+0x6c>)
 80037f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037f8:	4a17      	ldr	r2, [pc, #92]	; (8003858 <MX_DMA_Init+0x6c>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003802:	4b15      	ldr	r3, [pc, #84]	; (8003858 <MX_DMA_Init+0x6c>)
 8003804:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003810:	2200      	movs	r2, #0
 8003812:	2100      	movs	r1, #0
 8003814:	200b      	movs	r0, #11
 8003816:	f001 fe2e 	bl	8005476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800381a:	200b      	movs	r0, #11
 800381c:	f001 fe45 	bl	80054aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003820:	2200      	movs	r2, #0
 8003822:	2100      	movs	r1, #0
 8003824:	200c      	movs	r0, #12
 8003826:	f001 fe26 	bl	8005476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800382a:	200c      	movs	r0, #12
 800382c:	f001 fe3d 	bl	80054aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003830:	2200      	movs	r2, #0
 8003832:	2100      	movs	r1, #0
 8003834:	200d      	movs	r0, #13
 8003836:	f001 fe1e 	bl	8005476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800383a:	200d      	movs	r0, #13
 800383c:	f001 fe35 	bl	80054aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003840:	2200      	movs	r2, #0
 8003842:	2100      	movs	r1, #0
 8003844:	200e      	movs	r0, #14
 8003846:	f001 fe16 	bl	8005476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800384a:	200e      	movs	r0, #14
 800384c:	f001 fe2d 	bl	80054aa <HAL_NVIC_EnableIRQ>

}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	58024400 	.word	0x58024400

0800385c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003862:	f107 0314 	add.w	r3, r7, #20
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	605a      	str	r2, [r3, #4]
 800386c:	609a      	str	r2, [r3, #8]
 800386e:	60da      	str	r2, [r3, #12]
 8003870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003872:	4b44      	ldr	r3, [pc, #272]	; (8003984 <MX_GPIO_Init+0x128>)
 8003874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003878:	4a42      	ldr	r2, [pc, #264]	; (8003984 <MX_GPIO_Init+0x128>)
 800387a:	f043 0310 	orr.w	r3, r3, #16
 800387e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003882:	4b40      	ldr	r3, [pc, #256]	; (8003984 <MX_GPIO_Init+0x128>)
 8003884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003890:	4b3c      	ldr	r3, [pc, #240]	; (8003984 <MX_GPIO_Init+0x128>)
 8003892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003896:	4a3b      	ldr	r2, [pc, #236]	; (8003984 <MX_GPIO_Init+0x128>)
 8003898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800389c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038a0:	4b38      	ldr	r3, [pc, #224]	; (8003984 <MX_GPIO_Init+0x128>)
 80038a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ae:	4b35      	ldr	r3, [pc, #212]	; (8003984 <MX_GPIO_Init+0x128>)
 80038b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038b4:	4a33      	ldr	r2, [pc, #204]	; (8003984 <MX_GPIO_Init+0x128>)
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038be:	4b31      	ldr	r3, [pc, #196]	; (8003984 <MX_GPIO_Init+0x128>)
 80038c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038cc:	4b2d      	ldr	r3, [pc, #180]	; (8003984 <MX_GPIO_Init+0x128>)
 80038ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d2:	4a2c      	ldr	r2, [pc, #176]	; (8003984 <MX_GPIO_Init+0x128>)
 80038d4:	f043 0302 	orr.w	r3, r3, #2
 80038d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038dc:	4b29      	ldr	r3, [pc, #164]	; (8003984 <MX_GPIO_Init+0x128>)
 80038de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ea:	4b26      	ldr	r3, [pc, #152]	; (8003984 <MX_GPIO_Init+0x128>)
 80038ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038f0:	4a24      	ldr	r2, [pc, #144]	; (8003984 <MX_GPIO_Init+0x128>)
 80038f2:	f043 0304 	orr.w	r3, r3, #4
 80038f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038fa:	4b22      	ldr	r3, [pc, #136]	; (8003984 <MX_GPIO_Init+0x128>)
 80038fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	603b      	str	r3, [r7, #0]
 8003906:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8003908:	2200      	movs	r2, #0
 800390a:	2108      	movs	r1, #8
 800390c:	481e      	ldr	r0, [pc, #120]	; (8003988 <MX_GPIO_Init+0x12c>)
 800390e:	f004 fdeb 	bl	80084e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003912:	2200      	movs	r2, #0
 8003914:	2102      	movs	r1, #2
 8003916:	481d      	ldr	r0, [pc, #116]	; (800398c <MX_GPIO_Init+0x130>)
 8003918:	f004 fde6 	bl	80084e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W25qxx_CS_GPIO_Port, W25qxx_CS_Pin, GPIO_PIN_RESET);
 800391c:	2200      	movs	r2, #0
 800391e:	2140      	movs	r1, #64	; 0x40
 8003920:	481b      	ldr	r0, [pc, #108]	; (8003990 <MX_GPIO_Init+0x134>)
 8003922:	f004 fde1 	bl	80084e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8003926:	2308      	movs	r3, #8
 8003928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800392a:	2301      	movs	r3, #1
 800392c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003932:	2300      	movs	r3, #0
 8003934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8003936:	f107 0314 	add.w	r3, r7, #20
 800393a:	4619      	mov	r1, r3
 800393c:	4812      	ldr	r0, [pc, #72]	; (8003988 <MX_GPIO_Init+0x12c>)
 800393e:	f004 fc23 	bl	8008188 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003942:	2302      	movs	r3, #2
 8003944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003946:	2301      	movs	r3, #1
 8003948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394e:	2300      	movs	r3, #0
 8003950:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003952:	f107 0314 	add.w	r3, r7, #20
 8003956:	4619      	mov	r1, r3
 8003958:	480c      	ldr	r0, [pc, #48]	; (800398c <MX_GPIO_Init+0x130>)
 800395a:	f004 fc15 	bl	8008188 <HAL_GPIO_Init>

  /*Configure GPIO pin : W25qxx_CS_Pin */
  GPIO_InitStruct.Pin = W25qxx_CS_Pin;
 800395e:	2340      	movs	r3, #64	; 0x40
 8003960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003962:	2301      	movs	r3, #1
 8003964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396a:	2300      	movs	r3, #0
 800396c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W25qxx_CS_GPIO_Port, &GPIO_InitStruct);
 800396e:	f107 0314 	add.w	r3, r7, #20
 8003972:	4619      	mov	r1, r3
 8003974:	4806      	ldr	r0, [pc, #24]	; (8003990 <MX_GPIO_Init+0x134>)
 8003976:	f004 fc07 	bl	8008188 <HAL_GPIO_Init>

}
 800397a:	bf00      	nop
 800397c:	3728      	adds	r7, #40	; 0x28
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	58024400 	.word	0x58024400
 8003988:	58021000 	.word	0x58021000
 800398c:	58020000 	.word	0x58020000
 8003990:	58020400 	.word	0x58020400

08003994 <Compass_Calibration>:

/* USER CODE BEGIN 4 */
void Compass_Calibration(uint8_t mag_calibration_enable)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
	if(mag_calibration_enable == 1)
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	f040 80d6 	bne.w	8003b52 <Compass_Calibration+0x1be>
	{
		for(int i =0;i<5;i++)
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	e00b      	b.n	80039c4 <Compass_Calibration+0x30>
		{
			MPU9250_Read_All(&hi2c1);
 80039ac:	486b      	ldr	r0, [pc, #428]	; (8003b5c <Compass_Calibration+0x1c8>)
 80039ae:	f7fd f96d 	bl	8000c8c <MPU9250_Read_All>
			HAL_Delay(1);
 80039b2:	2001      	movs	r0, #1
 80039b4:	f001 fc54 	bl	8005260 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 80039b8:	4869      	ldr	r0, [pc, #420]	; (8003b60 <Compass_Calibration+0x1cc>)
 80039ba:	f7fd fb29 	bl	8001010 <MPU9250_Parsing_NoOffset>
		for(int i =0;i<5;i++)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3301      	adds	r3, #1
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	ddf0      	ble.n	80039ac <Compass_Calibration+0x18>
		}
		MPU9250.Mx_Max = MPU9250.Mx;
 80039ca:	4b65      	ldr	r3, [pc, #404]	; (8003b60 <Compass_Calibration+0x1cc>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	4a64      	ldr	r2, [pc, #400]	; (8003b60 <Compass_Calibration+0x1cc>)
 80039d0:	6593      	str	r3, [r2, #88]	; 0x58
		MPU9250.Mx_Min = MPU9250.Mx;
 80039d2:	4b63      	ldr	r3, [pc, #396]	; (8003b60 <Compass_Calibration+0x1cc>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	4a62      	ldr	r2, [pc, #392]	; (8003b60 <Compass_Calibration+0x1cc>)
 80039d8:	64d3      	str	r3, [r2, #76]	; 0x4c
		MPU9250.My_Max = MPU9250.My;
 80039da:	4b61      	ldr	r3, [pc, #388]	; (8003b60 <Compass_Calibration+0x1cc>)
 80039dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039de:	4a60      	ldr	r2, [pc, #384]	; (8003b60 <Compass_Calibration+0x1cc>)
 80039e0:	65d3      	str	r3, [r2, #92]	; 0x5c
		MPU9250.My_Min = MPU9250.My;
 80039e2:	4b5f      	ldr	r3, [pc, #380]	; (8003b60 <Compass_Calibration+0x1cc>)
 80039e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e6:	4a5e      	ldr	r2, [pc, #376]	; (8003b60 <Compass_Calibration+0x1cc>)
 80039e8:	6513      	str	r3, [r2, #80]	; 0x50
		MPU9250.Mz_Max = MPU9250.Mz;
 80039ea:	4b5d      	ldr	r3, [pc, #372]	; (8003b60 <Compass_Calibration+0x1cc>)
 80039ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ee:	4a5c      	ldr	r2, [pc, #368]	; (8003b60 <Compass_Calibration+0x1cc>)
 80039f0:	6613      	str	r3, [r2, #96]	; 0x60
		MPU9250.Mz_Min = MPU9250.Mz;
 80039f2:	4b5b      	ldr	r3, [pc, #364]	; (8003b60 <Compass_Calibration+0x1cc>)
 80039f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039f6:	4a5a      	ldr	r2, [pc, #360]	; (8003b60 <Compass_Calibration+0x1cc>)
 80039f8:	6553      	str	r3, [r2, #84]	; 0x54

		while(mag_calibration_enable != 0)
 80039fa:	e065      	b.n	8003ac8 <Compass_Calibration+0x134>
		{
			Receive_Command();
 80039fc:	f000 fd52 	bl	80044a4 <Receive_Command>
			MPU9250_Read_All(&hi2c1);
 8003a00:	4856      	ldr	r0, [pc, #344]	; (8003b5c <Compass_Calibration+0x1c8>)
 8003a02:	f7fd f943 	bl	8000c8c <MPU9250_Read_All>
			HAL_Delay(1);
 8003a06:	2001      	movs	r0, #1
 8003a08:	f001 fc2a 	bl	8005260 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 8003a0c:	4854      	ldr	r0, [pc, #336]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a0e:	f7fd faff 	bl	8001010 <MPU9250_Parsing_NoOffset>
			if(MPU9250.Mx > MPU9250.Mx_Max) MPU9250.Mx_Max = MPU9250.Mx;
 8003a12:	4b53      	ldr	r3, [pc, #332]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a14:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8003a18:	4b51      	ldr	r3, [pc, #324]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a1a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a26:	dd03      	ble.n	8003a30 <Compass_Calibration+0x9c>
 8003a28:	4b4d      	ldr	r3, [pc, #308]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2c:	4a4c      	ldr	r2, [pc, #304]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a2e:	6593      	str	r3, [r2, #88]	; 0x58
			if(MPU9250.Mx < MPU9250.Mx_Min) MPU9250.Mx_Min = MPU9250.Mx;
 8003a30:	4b4b      	ldr	r3, [pc, #300]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a32:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8003a36:	4b4a      	ldr	r3, [pc, #296]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a38:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003a3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a44:	d503      	bpl.n	8003a4e <Compass_Calibration+0xba>
 8003a46:	4b46      	ldr	r3, [pc, #280]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	4a45      	ldr	r2, [pc, #276]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a4c:	64d3      	str	r3, [r2, #76]	; 0x4c

			if(MPU9250.My > MPU9250.My_Max) MPU9250.My_Max = MPU9250.My;
 8003a4e:	4b44      	ldr	r3, [pc, #272]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a50:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8003a54:	4b42      	ldr	r3, [pc, #264]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a56:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a62:	dd03      	ble.n	8003a6c <Compass_Calibration+0xd8>
 8003a64:	4b3e      	ldr	r3, [pc, #248]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a68:	4a3d      	ldr	r2, [pc, #244]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a6a:	65d3      	str	r3, [r2, #92]	; 0x5c
			if(MPU9250.My < MPU9250.My_Min) MPU9250.My_Min = MPU9250.My;
 8003a6c:	4b3c      	ldr	r3, [pc, #240]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a6e:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8003a72:	4b3b      	ldr	r3, [pc, #236]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a74:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003a78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a80:	d503      	bpl.n	8003a8a <Compass_Calibration+0xf6>
 8003a82:	4b37      	ldr	r3, [pc, #220]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a86:	4a36      	ldr	r2, [pc, #216]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a88:	6513      	str	r3, [r2, #80]	; 0x50

			if(MPU9250.Mz > MPU9250.Mz_Max) MPU9250.Mz_Max = MPU9250.Mz;
 8003a8a:	4b35      	ldr	r3, [pc, #212]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a8c:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003a90:	4b33      	ldr	r3, [pc, #204]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003a92:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003a96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9e:	dd03      	ble.n	8003aa8 <Compass_Calibration+0x114>
 8003aa0:	4b2f      	ldr	r3, [pc, #188]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003aa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa4:	4a2e      	ldr	r2, [pc, #184]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003aa6:	6613      	str	r3, [r2, #96]	; 0x60
			if(MPU9250.Mz < MPU9250.Mz_Min) MPU9250.Mz_Min = MPU9250.Mz;
 8003aa8:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003aaa:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003aae:	4b2c      	ldr	r3, [pc, #176]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003ab0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abc:	d400      	bmi.n	8003ac0 <Compass_Calibration+0x12c>
 8003abe:	e003      	b.n	8003ac8 <Compass_Calibration+0x134>
 8003ac0:	4b27      	ldr	r3, [pc, #156]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac4:	4a26      	ldr	r2, [pc, #152]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003ac6:	6553      	str	r3, [r2, #84]	; 0x54
		while(mag_calibration_enable != 0)
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d196      	bne.n	80039fc <Compass_Calibration+0x68>
		}
		MPU9250.Mx_Offset = (MPU9250.Mx_Max + MPU9250.Mx_Min) / 2;
 8003ace:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003ad0:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003ad4:	4b22      	ldr	r3, [pc, #136]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003ad6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ade:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003ae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ae6:	4b1e      	ldr	r3, [pc, #120]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003ae8:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		MPU9250.My_Offset = (MPU9250.My_Max + MPU9250.My_Min) / 2;
 8003aec:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003aee:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003af2:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003af4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003afc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003b00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b04:	4b16      	ldr	r3, [pc, #88]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003b06:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		MPU9250.Mz_Offset = (MPU9250.Mz_Max + MPU9250.Mz_Min) / 2;
 8003b0a:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003b0c:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8003b10:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003b12:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003b16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b1a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003b1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b22:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003b24:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

		*(float*)&Mag_Calib[0] = MPU9250.Mx_Offset;
 8003b28:	4a0e      	ldr	r2, [pc, #56]	; (8003b64 <Compass_Calibration+0x1d0>)
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b2e:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[4] = MPU9250.My_Offset;
 8003b30:	4a0d      	ldr	r2, [pc, #52]	; (8003b68 <Compass_Calibration+0x1d4>)
 8003b32:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b36:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[8] = MPU9250.Mz_Offset;
 8003b38:	4a0c      	ldr	r2, [pc, #48]	; (8003b6c <Compass_Calibration+0x1d8>)
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <Compass_Calibration+0x1cc>)
 8003b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b3e:	6013      	str	r3, [r2, #0]

		W25qxx_EraseSector(0);
 8003b40:	2000      	movs	r0, #0
 8003b42:	f001 f89d 	bl	8004c80 <W25qxx_EraseSector>
		W25qxx_WriteSector(Mag_Calib, 0, 0, 12);
 8003b46:	230c      	movs	r3, #12
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	4805      	ldr	r0, [pc, #20]	; (8003b64 <Compass_Calibration+0x1d0>)
 8003b4e:	f001 f989 	bl	8004e64 <W25qxx_WriteSector>
	}
}
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	24000398 	.word	0x24000398
 8003b60:	2400027c 	.word	0x2400027c
 8003b64:	2400074c 	.word	0x2400074c
 8003b68:	24000750 	.word	0x24000750
 8003b6c:	24000754 	.word	0x24000754

08003b70 <ESC_Calibration>:

void ESC_Calibration(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 20000;
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <ESC_Calibration+0x58>)
 8003b76:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003b7a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 20000;
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <ESC_Calibration+0x58>)
 8003b7e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 20000;
 8003b84:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <ESC_Calibration+0x58>)
 8003b86:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003b8a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 20000;
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <ESC_Calibration+0x58>)
 8003b8e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(7000);
 8003b94:	f641 3058 	movw	r0, #7000	; 0x1b58
 8003b98:	f001 fb62 	bl	8005260 <HAL_Delay>
	TIM3->CCR1 = 10000;
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <ESC_Calibration+0x58>)
 8003b9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ba2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 10000;
 8003ba4:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <ESC_Calibration+0x58>)
 8003ba6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003baa:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 10000;
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <ESC_Calibration+0x58>)
 8003bae:	f242 7210 	movw	r2, #10000	; 0x2710
 8003bb2:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 10000;
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <ESC_Calibration+0x58>)
 8003bb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(8000);
 8003bbc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8003bc0:	f001 fb4e 	bl	8005260 <HAL_Delay>
}
 8003bc4:	bf00      	nop
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40000400 	.word	0x40000400

08003bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bd0:	b672      	cpsid	i
}
 8003bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003bd4:	e7fe      	b.n	8003bd4 <Error_Handler+0x8>
	...

08003bd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bde:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <HAL_MspInit+0x30>)
 8003be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003be4:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <HAL_MspInit+0x30>)
 8003be6:	f043 0302 	orr.w	r3, r3, #2
 8003bea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003bee:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_MspInit+0x30>)
 8003bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	58024400 	.word	0x58024400

08003c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b0b8      	sub	sp, #224	; 0xe0
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	60da      	str	r2, [r3, #12]
 8003c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c24:	f107 0310 	add.w	r3, r7, #16
 8003c28:	22bc      	movs	r2, #188	; 0xbc
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f00d fb39 	bl	80112a4 <memset>
  if(hi2c->Instance==I2C1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a3f      	ldr	r2, [pc, #252]	; (8003d34 <HAL_I2C_MspInit+0x128>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d177      	bne.n	8003d2c <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c46:	f107 0310 	add.w	r3, r7, #16
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f007 fe90 	bl	800b970 <HAL_RCCEx_PeriphCLKConfig>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003c56:	f7ff ffb9 	bl	8003bcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c5a:	4b37      	ldr	r3, [pc, #220]	; (8003d38 <HAL_I2C_MspInit+0x12c>)
 8003c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c60:	4a35      	ldr	r2, [pc, #212]	; (8003d38 <HAL_I2C_MspInit+0x12c>)
 8003c62:	f043 0302 	orr.w	r3, r3, #2
 8003c66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c6a:	4b33      	ldr	r3, [pc, #204]	; (8003d38 <HAL_I2C_MspInit+0x12c>)
 8003c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003c78:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c80:	2312      	movs	r3, #18
 8003c82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c92:	2304      	movs	r3, #4
 8003c94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4827      	ldr	r0, [pc, #156]	; (8003d3c <HAL_I2C_MspInit+0x130>)
 8003ca0:	f004 fa72 	bl	8008188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ca4:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <HAL_I2C_MspInit+0x12c>)
 8003ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003caa:	4a23      	ldr	r2, [pc, #140]	; (8003d38 <HAL_I2C_MspInit+0x12c>)
 8003cac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cb0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cb4:	4b20      	ldr	r3, [pc, #128]	; (8003d38 <HAL_I2C_MspInit+0x12c>)
 8003cb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 8003cc2:	4b1f      	ldr	r3, [pc, #124]	; (8003d40 <HAL_I2C_MspInit+0x134>)
 8003cc4:	4a1f      	ldr	r2, [pc, #124]	; (8003d44 <HAL_I2C_MspInit+0x138>)
 8003cc6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <HAL_I2C_MspInit+0x134>)
 8003cca:	2221      	movs	r2, #33	; 0x21
 8003ccc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cce:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <HAL_I2C_MspInit+0x134>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cd4:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <HAL_I2C_MspInit+0x134>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cda:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <HAL_I2C_MspInit+0x134>)
 8003cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ce0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ce2:	4b17      	ldr	r3, [pc, #92]	; (8003d40 <HAL_I2C_MspInit+0x134>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ce8:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <HAL_I2C_MspInit+0x134>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003cee:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <HAL_I2C_MspInit+0x134>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cf4:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <HAL_I2C_MspInit+0x134>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <HAL_I2C_MspInit+0x134>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003d00:	480f      	ldr	r0, [pc, #60]	; (8003d40 <HAL_I2C_MspInit+0x134>)
 8003d02:	f001 fbed 	bl	80054e0 <HAL_DMA_Init>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 8003d0c:	f7ff ff5e 	bl	8003bcc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <HAL_I2C_MspInit+0x134>)
 8003d14:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d16:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <HAL_I2C_MspInit+0x134>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2100      	movs	r1, #0
 8003d20:	201f      	movs	r0, #31
 8003d22:	f001 fba8 	bl	8005476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003d26:	201f      	movs	r0, #31
 8003d28:	f001 fbbf 	bl	80054aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d2c:	bf00      	nop
 8003d2e:	37e0      	adds	r7, #224	; 0xe0
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40005400 	.word	0x40005400
 8003d38:	58024400 	.word	0x58024400
 8003d3c:	58020400 	.word	0x58020400
 8003d40:	240005b8 	.word	0x240005b8
 8003d44:	40020028 	.word	0x40020028

08003d48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b0b8      	sub	sp, #224	; 0xe0
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	60da      	str	r2, [r3, #12]
 8003d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d60:	f107 0310 	add.w	r3, r7, #16
 8003d64:	22bc      	movs	r2, #188	; 0xbc
 8003d66:	2100      	movs	r1, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f00d fa9b 	bl	80112a4 <memset>
  if(hspi->Instance==SPI1)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a25      	ldr	r2, [pc, #148]	; (8003e08 <HAL_SPI_MspInit+0xc0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d142      	bne.n	8003dfe <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d7c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003d7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d82:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d84:	f107 0310 	add.w	r3, r7, #16
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f007 fdf1 	bl	800b970 <HAL_RCCEx_PeriphCLKConfig>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8003d94:	f7ff ff1a 	bl	8003bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d98:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <HAL_SPI_MspInit+0xc4>)
 8003d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d9e:	4a1b      	ldr	r2, [pc, #108]	; (8003e0c <HAL_SPI_MspInit+0xc4>)
 8003da0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003da4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <HAL_SPI_MspInit+0xc4>)
 8003daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <HAL_SPI_MspInit+0xc4>)
 8003db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dbc:	4a13      	ldr	r2, [pc, #76]	; (8003e0c <HAL_SPI_MspInit+0xc4>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dc6:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <HAL_SPI_MspInit+0xc4>)
 8003dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003dd4:	23e0      	movs	r3, #224	; 0xe0
 8003dd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de6:	2300      	movs	r3, #0
 8003de8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003dec:	2305      	movs	r3, #5
 8003dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003df6:	4619      	mov	r1, r3
 8003df8:	4805      	ldr	r0, [pc, #20]	; (8003e10 <HAL_SPI_MspInit+0xc8>)
 8003dfa:	f004 f9c5 	bl	8008188 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003dfe:	bf00      	nop
 8003e00:	37e0      	adds	r7, #224	; 0xe0
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40013000 	.word	0x40013000
 8003e0c:	58024400 	.word	0x58024400
 8003e10:	58020000 	.word	0x58020000

08003e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <HAL_TIM_Base_MspInit+0x84>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d117      	bne.n	8003e56 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e26:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <HAL_TIM_Base_MspInit+0x88>)
 8003e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e2c:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <HAL_TIM_Base_MspInit+0x88>)
 8003e2e:	f043 0302 	orr.w	r3, r3, #2
 8003e32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e36:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <HAL_TIM_Base_MspInit+0x88>)
 8003e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003e44:	2200      	movs	r2, #0
 8003e46:	2100      	movs	r1, #0
 8003e48:	201d      	movs	r0, #29
 8003e4a:	f001 fb14 	bl	8005476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e4e:	201d      	movs	r0, #29
 8003e50:	f001 fb2b 	bl	80054aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003e54:	e01b      	b.n	8003e8e <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM7)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a11      	ldr	r2, [pc, #68]	; (8003ea0 <HAL_TIM_Base_MspInit+0x8c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d116      	bne.n	8003e8e <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e60:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <HAL_TIM_Base_MspInit+0x88>)
 8003e62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e66:	4a0d      	ldr	r2, [pc, #52]	; (8003e9c <HAL_TIM_Base_MspInit+0x88>)
 8003e68:	f043 0320 	orr.w	r3, r3, #32
 8003e6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <HAL_TIM_Base_MspInit+0x88>)
 8003e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	60bb      	str	r3, [r7, #8]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2100      	movs	r1, #0
 8003e82:	2037      	movs	r0, #55	; 0x37
 8003e84:	f001 faf7 	bl	8005476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e88:	2037      	movs	r0, #55	; 0x37
 8003e8a:	f001 fb0e 	bl	80054aa <HAL_NVIC_EnableIRQ>
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	58024400 	.word	0x58024400
 8003ea0:	40001400 	.word	0x40001400

08003ea4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	; 0x28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eac:	f107 0314 	add.w	r3, r7, #20
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	60da      	str	r2, [r3, #12]
 8003eba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a22      	ldr	r2, [pc, #136]	; (8003f4c <HAL_TIM_MspPostInit+0xa8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d13d      	bne.n	8003f42 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec6:	4b22      	ldr	r3, [pc, #136]	; (8003f50 <HAL_TIM_MspPostInit+0xac>)
 8003ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ecc:	4a20      	ldr	r2, [pc, #128]	; (8003f50 <HAL_TIM_MspPostInit+0xac>)
 8003ece:	f043 0302 	orr.w	r3, r3, #2
 8003ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ed6:	4b1e      	ldr	r3, [pc, #120]	; (8003f50 <HAL_TIM_MspPostInit+0xac>)
 8003ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <HAL_TIM_MspPostInit+0xac>)
 8003ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eea:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_TIM_MspPostInit+0xac>)
 8003eec:	f043 0304 	orr.w	r3, r3, #4
 8003ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ef4:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <HAL_TIM_MspPostInit+0xac>)
 8003ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f02:	2303      	movs	r3, #3
 8003f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f06:	2302      	movs	r3, #2
 8003f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f12:	2302      	movs	r3, #2
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f16:	f107 0314 	add.w	r3, r7, #20
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	480d      	ldr	r0, [pc, #52]	; (8003f54 <HAL_TIM_MspPostInit+0xb0>)
 8003f1e:	f004 f933 	bl	8008188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f22:	23c0      	movs	r3, #192	; 0xc0
 8003f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f26:	2302      	movs	r3, #2
 8003f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f32:	2302      	movs	r3, #2
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f36:	f107 0314 	add.w	r3, r7, #20
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4806      	ldr	r0, [pc, #24]	; (8003f58 <HAL_TIM_MspPostInit+0xb4>)
 8003f3e:	f004 f923 	bl	8008188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003f42:	bf00      	nop
 8003f44:	3728      	adds	r7, #40	; 0x28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	58024400 	.word	0x58024400
 8003f54:	58020400 	.word	0x58020400
 8003f58:	58020800 	.word	0x58020800

08003f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b0ba      	sub	sp, #232	; 0xe8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f74:	f107 0318 	add.w	r3, r7, #24
 8003f78:	22bc      	movs	r2, #188	; 0xbc
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f00d f991 	bl	80112a4 <memset>
  if(huart->Instance==USART1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a96      	ldr	r2, [pc, #600]	; (80041e0 <HAL_UART_MspInit+0x284>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	f040 80a7 	bne.w	80040dc <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003f92:	2300      	movs	r3, #0
 8003f94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f98:	f107 0318 	add.w	r3, r7, #24
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f007 fce7 	bl	800b970 <HAL_RCCEx_PeriphCLKConfig>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003fa8:	f7ff fe10 	bl	8003bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fac:	4b8d      	ldr	r3, [pc, #564]	; (80041e4 <HAL_UART_MspInit+0x288>)
 8003fae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fb2:	4a8c      	ldr	r2, [pc, #560]	; (80041e4 <HAL_UART_MspInit+0x288>)
 8003fb4:	f043 0310 	orr.w	r3, r3, #16
 8003fb8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003fbc:	4b89      	ldr	r3, [pc, #548]	; (80041e4 <HAL_UART_MspInit+0x288>)
 8003fbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fca:	4b86      	ldr	r3, [pc, #536]	; (80041e4 <HAL_UART_MspInit+0x288>)
 8003fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fd0:	4a84      	ldr	r2, [pc, #528]	; (80041e4 <HAL_UART_MspInit+0x288>)
 8003fd2:	f043 0302 	orr.w	r3, r3, #2
 8003fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fda:	4b82      	ldr	r3, [pc, #520]	; (80041e4 <HAL_UART_MspInit+0x288>)
 8003fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003fe8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003fec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004002:	2304      	movs	r3, #4
 8004004:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004008:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800400c:	4619      	mov	r1, r3
 800400e:	4876      	ldr	r0, [pc, #472]	; (80041e8 <HAL_UART_MspInit+0x28c>)
 8004010:	f004 f8ba 	bl	8008188 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004014:	4b75      	ldr	r3, [pc, #468]	; (80041ec <HAL_UART_MspInit+0x290>)
 8004016:	4a76      	ldr	r2, [pc, #472]	; (80041f0 <HAL_UART_MspInit+0x294>)
 8004018:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800401a:	4b74      	ldr	r3, [pc, #464]	; (80041ec <HAL_UART_MspInit+0x290>)
 800401c:	2229      	movs	r2, #41	; 0x29
 800401e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004020:	4b72      	ldr	r3, [pc, #456]	; (80041ec <HAL_UART_MspInit+0x290>)
 8004022:	2200      	movs	r2, #0
 8004024:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004026:	4b71      	ldr	r3, [pc, #452]	; (80041ec <HAL_UART_MspInit+0x290>)
 8004028:	2200      	movs	r2, #0
 800402a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800402c:	4b6f      	ldr	r3, [pc, #444]	; (80041ec <HAL_UART_MspInit+0x290>)
 800402e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004032:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004034:	4b6d      	ldr	r3, [pc, #436]	; (80041ec <HAL_UART_MspInit+0x290>)
 8004036:	2200      	movs	r2, #0
 8004038:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800403a:	4b6c      	ldr	r3, [pc, #432]	; (80041ec <HAL_UART_MspInit+0x290>)
 800403c:	2200      	movs	r2, #0
 800403e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004040:	4b6a      	ldr	r3, [pc, #424]	; (80041ec <HAL_UART_MspInit+0x290>)
 8004042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004046:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004048:	4b68      	ldr	r3, [pc, #416]	; (80041ec <HAL_UART_MspInit+0x290>)
 800404a:	2200      	movs	r2, #0
 800404c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800404e:	4b67      	ldr	r3, [pc, #412]	; (80041ec <HAL_UART_MspInit+0x290>)
 8004050:	2200      	movs	r2, #0
 8004052:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004054:	4865      	ldr	r0, [pc, #404]	; (80041ec <HAL_UART_MspInit+0x290>)
 8004056:	f001 fa43 	bl	80054e0 <HAL_DMA_Init>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8004060:	f7ff fdb4 	bl	8003bcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a61      	ldr	r2, [pc, #388]	; (80041ec <HAL_UART_MspInit+0x290>)
 8004068:	67da      	str	r2, [r3, #124]	; 0x7c
 800406a:	4a60      	ldr	r2, [pc, #384]	; (80041ec <HAL_UART_MspInit+0x290>)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8004070:	4b60      	ldr	r3, [pc, #384]	; (80041f4 <HAL_UART_MspInit+0x298>)
 8004072:	4a61      	ldr	r2, [pc, #388]	; (80041f8 <HAL_UART_MspInit+0x29c>)
 8004074:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004076:	4b5f      	ldr	r3, [pc, #380]	; (80041f4 <HAL_UART_MspInit+0x298>)
 8004078:	222a      	movs	r2, #42	; 0x2a
 800407a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800407c:	4b5d      	ldr	r3, [pc, #372]	; (80041f4 <HAL_UART_MspInit+0x298>)
 800407e:	2240      	movs	r2, #64	; 0x40
 8004080:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004082:	4b5c      	ldr	r3, [pc, #368]	; (80041f4 <HAL_UART_MspInit+0x298>)
 8004084:	2200      	movs	r2, #0
 8004086:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004088:	4b5a      	ldr	r3, [pc, #360]	; (80041f4 <HAL_UART_MspInit+0x298>)
 800408a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800408e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004090:	4b58      	ldr	r3, [pc, #352]	; (80041f4 <HAL_UART_MspInit+0x298>)
 8004092:	2200      	movs	r2, #0
 8004094:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004096:	4b57      	ldr	r3, [pc, #348]	; (80041f4 <HAL_UART_MspInit+0x298>)
 8004098:	2200      	movs	r2, #0
 800409a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800409c:	4b55      	ldr	r3, [pc, #340]	; (80041f4 <HAL_UART_MspInit+0x298>)
 800409e:	2200      	movs	r2, #0
 80040a0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80040a2:	4b54      	ldr	r3, [pc, #336]	; (80041f4 <HAL_UART_MspInit+0x298>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040a8:	4b52      	ldr	r3, [pc, #328]	; (80041f4 <HAL_UART_MspInit+0x298>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80040ae:	4851      	ldr	r0, [pc, #324]	; (80041f4 <HAL_UART_MspInit+0x298>)
 80040b0:	f001 fa16 	bl	80054e0 <HAL_DMA_Init>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80040ba:	f7ff fd87 	bl	8003bcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a4c      	ldr	r2, [pc, #304]	; (80041f4 <HAL_UART_MspInit+0x298>)
 80040c2:	679a      	str	r2, [r3, #120]	; 0x78
 80040c4:	4a4b      	ldr	r2, [pc, #300]	; (80041f4 <HAL_UART_MspInit+0x298>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80040ca:	2200      	movs	r2, #0
 80040cc:	2100      	movs	r1, #0
 80040ce:	2025      	movs	r0, #37	; 0x25
 80040d0:	f001 f9d1 	bl	8005476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80040d4:	2025      	movs	r0, #37	; 0x25
 80040d6:	f001 f9e8 	bl	80054aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80040da:	e07c      	b.n	80041d6 <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a46      	ldr	r2, [pc, #280]	; (80041fc <HAL_UART_MspInit+0x2a0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d177      	bne.n	80041d6 <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80040e6:	2302      	movs	r3, #2
 80040e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80040ea:	2300      	movs	r3, #0
 80040ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040f0:	f107 0318 	add.w	r3, r7, #24
 80040f4:	4618      	mov	r0, r3
 80040f6:	f007 fc3b 	bl	800b970 <HAL_RCCEx_PeriphCLKConfig>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8004100:	f7ff fd64 	bl	8003bcc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004104:	4b37      	ldr	r3, [pc, #220]	; (80041e4 <HAL_UART_MspInit+0x288>)
 8004106:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800410a:	4a36      	ldr	r2, [pc, #216]	; (80041e4 <HAL_UART_MspInit+0x288>)
 800410c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004110:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004114:	4b33      	ldr	r3, [pc, #204]	; (80041e4 <HAL_UART_MspInit+0x288>)
 8004116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004122:	4b30      	ldr	r3, [pc, #192]	; (80041e4 <HAL_UART_MspInit+0x288>)
 8004124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004128:	4a2e      	ldr	r2, [pc, #184]	; (80041e4 <HAL_UART_MspInit+0x288>)
 800412a:	f043 0301 	orr.w	r3, r3, #1
 800412e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004132:	4b2c      	ldr	r3, [pc, #176]	; (80041e4 <HAL_UART_MspInit+0x288>)
 8004134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004140:	230c      	movs	r3, #12
 8004142:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004146:	2302      	movs	r3, #2
 8004148:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414c:	2300      	movs	r3, #0
 800414e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004152:	2300      	movs	r3, #0
 8004154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004158:	2307      	movs	r3, #7
 800415a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004162:	4619      	mov	r1, r3
 8004164:	4826      	ldr	r0, [pc, #152]	; (8004200 <HAL_UART_MspInit+0x2a4>)
 8004166:	f004 f80f 	bl	8008188 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream3;
 800416a:	4b26      	ldr	r3, [pc, #152]	; (8004204 <HAL_UART_MspInit+0x2a8>)
 800416c:	4a26      	ldr	r2, [pc, #152]	; (8004208 <HAL_UART_MspInit+0x2ac>)
 800416e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004170:	4b24      	ldr	r3, [pc, #144]	; (8004204 <HAL_UART_MspInit+0x2a8>)
 8004172:	222b      	movs	r2, #43	; 0x2b
 8004174:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004176:	4b23      	ldr	r3, [pc, #140]	; (8004204 <HAL_UART_MspInit+0x2a8>)
 8004178:	2200      	movs	r2, #0
 800417a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800417c:	4b21      	ldr	r3, [pc, #132]	; (8004204 <HAL_UART_MspInit+0x2a8>)
 800417e:	2200      	movs	r2, #0
 8004180:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_DISABLE;
 8004182:	4b20      	ldr	r3, [pc, #128]	; (8004204 <HAL_UART_MspInit+0x2a8>)
 8004184:	2200      	movs	r2, #0
 8004186:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004188:	4b1e      	ldr	r3, [pc, #120]	; (8004204 <HAL_UART_MspInit+0x2a8>)
 800418a:	2200      	movs	r2, #0
 800418c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800418e:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <HAL_UART_MspInit+0x2a8>)
 8004190:	2200      	movs	r2, #0
 8004192:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <HAL_UART_MspInit+0x2a8>)
 8004196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800419a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800419c:	4b19      	ldr	r3, [pc, #100]	; (8004204 <HAL_UART_MspInit+0x2a8>)
 800419e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80041a2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041a4:	4b17      	ldr	r3, [pc, #92]	; (8004204 <HAL_UART_MspInit+0x2a8>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80041aa:	4816      	ldr	r0, [pc, #88]	; (8004204 <HAL_UART_MspInit+0x2a8>)
 80041ac:	f001 f998 	bl	80054e0 <HAL_DMA_Init>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_UART_MspInit+0x25e>
      Error_Handler();
 80041b6:	f7ff fd09 	bl	8003bcc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a11      	ldr	r2, [pc, #68]	; (8004204 <HAL_UART_MspInit+0x2a8>)
 80041be:	67da      	str	r2, [r3, #124]	; 0x7c
 80041c0:	4a10      	ldr	r2, [pc, #64]	; (8004204 <HAL_UART_MspInit+0x2a8>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80041c6:	2200      	movs	r2, #0
 80041c8:	2100      	movs	r1, #0
 80041ca:	2026      	movs	r0, #38	; 0x26
 80041cc:	f001 f953 	bl	8005476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80041d0:	2026      	movs	r0, #38	; 0x26
 80041d2:	f001 f96a 	bl	80054aa <HAL_NVIC_EnableIRQ>
}
 80041d6:	bf00      	nop
 80041d8:	37e8      	adds	r7, #232	; 0xe8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40011000 	.word	0x40011000
 80041e4:	58024400 	.word	0x58024400
 80041e8:	58020400 	.word	0x58020400
 80041ec:	240004a8 	.word	0x240004a8
 80041f0:	40020010 	.word	0x40020010
 80041f4:	24000430 	.word	0x24000430
 80041f8:	40020040 	.word	0x40020040
 80041fc:	40004400 	.word	0x40004400
 8004200:	58020000 	.word	0x58020000
 8004204:	2400031c 	.word	0x2400031c
 8004208:	40020058 	.word	0x40020058

0800420c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8004210:	e7fe      	b.n	8004210 <NMI_Handler+0x4>

08004212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004212:	b480      	push	{r7}
 8004214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004216:	e7fe      	b.n	8004216 <HardFault_Handler+0x4>

08004218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800421c:	e7fe      	b.n	800421c <MemManage_Handler+0x4>

0800421e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800421e:	b480      	push	{r7}
 8004220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004222:	e7fe      	b.n	8004222 <BusFault_Handler+0x4>

08004224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004228:	e7fe      	b.n	8004228 <UsageFault_Handler+0x4>

0800422a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800422a:	b480      	push	{r7}
 800422c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800422e:	bf00      	nop
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800423c:	bf00      	nop
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004246:	b480      	push	{r7}
 8004248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800424a:	bf00      	nop
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004258:	f000 ffe2 	bl	8005220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800425c:	bf00      	nop
 800425e:	bd80      	pop	{r7, pc}

08004260 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004264:	4802      	ldr	r0, [pc, #8]	; (8004270 <DMA1_Stream0_IRQHandler+0x10>)
 8004266:	f002 fc63 	bl	8006b30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	240004a8 	.word	0x240004a8

08004274 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004278:	4802      	ldr	r0, [pc, #8]	; (8004284 <DMA1_Stream1_IRQHandler+0x10>)
 800427a:	f002 fc59 	bl	8006b30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	240005b8 	.word	0x240005b8

08004288 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800428c:	4802      	ldr	r0, [pc, #8]	; (8004298 <DMA1_Stream2_IRQHandler+0x10>)
 800428e:	f002 fc4f 	bl	8006b30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004292:	bf00      	nop
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	24000430 	.word	0x24000430

0800429c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80042a0:	4802      	ldr	r0, [pc, #8]	; (80042ac <DMA1_Stream3_IRQHandler+0x10>)
 80042a2:	f002 fc45 	bl	8006b30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	2400031c 	.word	0x2400031c

080042b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80042b4:	4802      	ldr	r0, [pc, #8]	; (80042c0 <TIM3_IRQHandler+0x10>)
 80042b6:	f00a f9ef 	bl	800e698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80042ba:	bf00      	nop
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	240003e4 	.word	0x240003e4

080042c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80042c8:	4802      	ldr	r0, [pc, #8]	; (80042d4 <I2C1_EV_IRQHandler+0x10>)
 80042ca:	f004 fcdd 	bl	8008c88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80042ce:	bf00      	nop
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	24000398 	.word	0x24000398

080042d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80042dc:	4802      	ldr	r0, [pc, #8]	; (80042e8 <USART1_IRQHandler+0x10>)
 80042de:	f00b fb0f 	bl	800f900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	24000528 	.word	0x24000528

080042ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042f0:	4802      	ldr	r0, [pc, #8]	; (80042fc <USART2_IRQHandler+0x10>)
 80042f2:	f00b fb05 	bl	800f900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	240006bc 	.word	0x240006bc

08004300 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
//			tim1_20ms_count = 0;
//			tim1_20ms_flag = 1;
//		}
//	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004304:	4802      	ldr	r0, [pc, #8]	; (8004310 <TIM7_IRQHandler+0x10>)
 8004306:	f00a f9c7 	bl	800e698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	24000758 	.word	0x24000758

08004314 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
	static unsigned int tim1_2ms_count = 0;
	static unsigned int tim1_10ms_count = 0;
	static unsigned int tim1_20ms_count = 0;

	if(htim->Instance == TIM7)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1a      	ldr	r2, [pc, #104]	; (800438c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d12c      	bne.n	8004380 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		tim1_2ms_count++;
 8004326:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3301      	adds	r3, #1
 800432c:	4a18      	ldr	r2, [pc, #96]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800432e:	6013      	str	r3, [r2, #0]
		if(tim1_2ms_count == 2)
 8004330:	4b17      	ldr	r3, [pc, #92]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d105      	bne.n	8004344 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			tim1_2ms_count = 0;
 8004338:	4b15      	ldr	r3, [pc, #84]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
			tim1_2ms_flag = 1;
 800433e:	4b15      	ldr	r3, [pc, #84]	; (8004394 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]
		}
		tim1_10ms_count++;
 8004344:	4b14      	ldr	r3, [pc, #80]	; (8004398 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3301      	adds	r3, #1
 800434a:	4a13      	ldr	r2, [pc, #76]	; (8004398 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800434c:	6013      	str	r3, [r2, #0]
		if(tim1_10ms_count == 10)
 800434e:	4b12      	ldr	r3, [pc, #72]	; (8004398 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b0a      	cmp	r3, #10
 8004354:	d105      	bne.n	8004362 <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			tim1_10ms_count = 0;
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
			tim1_10ms_flag = 1;
 800435c:	4b0f      	ldr	r3, [pc, #60]	; (800439c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800435e:	2201      	movs	r2, #1
 8004360:	701a      	strb	r2, [r3, #0]
		}
		tim1_20ms_count++;
 8004362:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3301      	adds	r3, #1
 8004368:	4a0d      	ldr	r2, [pc, #52]	; (80043a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800436a:	6013      	str	r3, [r2, #0]
		if(tim1_20ms_count == 20)
 800436c:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b14      	cmp	r3, #20
 8004372:	d105      	bne.n	8004380 <HAL_TIM_PeriodElapsedCallback+0x6c>
		{
			tim1_20ms_count = 0;
 8004374:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
			tim1_20ms_flag = 1;
 800437a:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	40001400 	.word	0x40001400
 8004390:	24000244 	.word	0x24000244
 8004394:	24000239 	.word	0x24000239
 8004398:	24000248 	.word	0x24000248
 800439c:	2400023a 	.word	0x2400023a
 80043a0:	2400024c 	.word	0x2400024c
 80043a4:	2400023b 	.word	0x2400023b

080043a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a33      	ldr	r2, [pc, #204]	; (8004484 <HAL_UART_RxCpltCallback+0xdc>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d103      	bne.n	80043c2 <HAL_UART_RxCpltCallback+0x1a>
	{
		uart1_rx_flag = 1;
 80043ba:	4b33      	ldr	r3, [pc, #204]	; (8004488 <HAL_UART_RxCpltCallback+0xe0>)
 80043bc:	2201      	movs	r2, #1
 80043be:	701a      	strb	r2, [r3, #0]
			ibus_rx_buf[cnt]=uart2_rx_data;
			cnt++;
			break;
		}
	}
}
 80043c0:	e059      	b.n	8004476 <HAL_UART_RxCpltCallback+0xce>
	else if(huart->Instance == USART2)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a31      	ldr	r2, [pc, #196]	; (800448c <HAL_UART_RxCpltCallback+0xe4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d151      	bne.n	8004470 <HAL_UART_RxCpltCallback+0xc8>
		uart2_rx_flag = 1;
 80043cc:	4b30      	ldr	r3, [pc, #192]	; (8004490 <HAL_UART_RxCpltCallback+0xe8>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]
		switch(cnt)
 80043d2:	4b30      	ldr	r3, [pc, #192]	; (8004494 <HAL_UART_RxCpltCallback+0xec>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b1f      	cmp	r3, #31
 80043d8:	d02e      	beq.n	8004438 <HAL_UART_RxCpltCallback+0x90>
 80043da:	2b1f      	cmp	r3, #31
 80043dc:	dc3a      	bgt.n	8004454 <HAL_UART_RxCpltCallback+0xac>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <HAL_UART_RxCpltCallback+0x40>
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d012      	beq.n	800440c <HAL_UART_RxCpltCallback+0x64>
 80043e6:	e035      	b.n	8004454 <HAL_UART_RxCpltCallback+0xac>
			if(uart2_rx_data==0x20)
 80043e8:	4b2b      	ldr	r3, [pc, #172]	; (8004498 <HAL_UART_RxCpltCallback+0xf0>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d141      	bne.n	8004474 <HAL_UART_RxCpltCallback+0xcc>
				ibus_rx_buf[cnt]=uart2_rx_data;
 80043f0:	4b28      	ldr	r3, [pc, #160]	; (8004494 <HAL_UART_RxCpltCallback+0xec>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	4b28      	ldr	r3, [pc, #160]	; (8004498 <HAL_UART_RxCpltCallback+0xf0>)
 80043f8:	7819      	ldrb	r1, [r3, #0]
 80043fa:	4b28      	ldr	r3, [pc, #160]	; (800449c <HAL_UART_RxCpltCallback+0xf4>)
 80043fc:	5499      	strb	r1, [r3, r2]
				cnt++;
 80043fe:	4b25      	ldr	r3, [pc, #148]	; (8004494 <HAL_UART_RxCpltCallback+0xec>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	3301      	adds	r3, #1
 8004404:	b2da      	uxtb	r2, r3
 8004406:	4b23      	ldr	r3, [pc, #140]	; (8004494 <HAL_UART_RxCpltCallback+0xec>)
 8004408:	701a      	strb	r2, [r3, #0]
			break;
 800440a:	e033      	b.n	8004474 <HAL_UART_RxCpltCallback+0xcc>
			if(uart2_rx_data==0x40)
 800440c:	4b22      	ldr	r3, [pc, #136]	; (8004498 <HAL_UART_RxCpltCallback+0xf0>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b40      	cmp	r3, #64	; 0x40
 8004412:	d10d      	bne.n	8004430 <HAL_UART_RxCpltCallback+0x88>
				ibus_rx_buf[cnt]=uart2_rx_data;
 8004414:	4b1f      	ldr	r3, [pc, #124]	; (8004494 <HAL_UART_RxCpltCallback+0xec>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	4b1f      	ldr	r3, [pc, #124]	; (8004498 <HAL_UART_RxCpltCallback+0xf0>)
 800441c:	7819      	ldrb	r1, [r3, #0]
 800441e:	4b1f      	ldr	r3, [pc, #124]	; (800449c <HAL_UART_RxCpltCallback+0xf4>)
 8004420:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004422:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <HAL_UART_RxCpltCallback+0xec>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	b2da      	uxtb	r2, r3
 800442a:	4b1a      	ldr	r3, [pc, #104]	; (8004494 <HAL_UART_RxCpltCallback+0xec>)
 800442c:	701a      	strb	r2, [r3, #0]
			break;
 800442e:	e022      	b.n	8004476 <HAL_UART_RxCpltCallback+0xce>
				cnt=0;
 8004430:	4b18      	ldr	r3, [pc, #96]	; (8004494 <HAL_UART_RxCpltCallback+0xec>)
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]
			break;
 8004436:	e01e      	b.n	8004476 <HAL_UART_RxCpltCallback+0xce>
			ibus_rx_buf[cnt]=uart2_rx_data;
 8004438:	4b16      	ldr	r3, [pc, #88]	; (8004494 <HAL_UART_RxCpltCallback+0xec>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	4b16      	ldr	r3, [pc, #88]	; (8004498 <HAL_UART_RxCpltCallback+0xf0>)
 8004440:	7819      	ldrb	r1, [r3, #0]
 8004442:	4b16      	ldr	r3, [pc, #88]	; (800449c <HAL_UART_RxCpltCallback+0xf4>)
 8004444:	5499      	strb	r1, [r3, r2]
			cnt=0;
 8004446:	4b13      	ldr	r3, [pc, #76]	; (8004494 <HAL_UART_RxCpltCallback+0xec>)
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 800444c:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <HAL_UART_RxCpltCallback+0xf8>)
 800444e:	2201      	movs	r2, #1
 8004450:	701a      	strb	r2, [r3, #0]
			break;
 8004452:	e010      	b.n	8004476 <HAL_UART_RxCpltCallback+0xce>
			ibus_rx_buf[cnt]=uart2_rx_data;
 8004454:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <HAL_UART_RxCpltCallback+0xec>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <HAL_UART_RxCpltCallback+0xf0>)
 800445c:	7819      	ldrb	r1, [r3, #0]
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <HAL_UART_RxCpltCallback+0xf4>)
 8004460:	5499      	strb	r1, [r3, r2]
			cnt++;
 8004462:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <HAL_UART_RxCpltCallback+0xec>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	3301      	adds	r3, #1
 8004468:	b2da      	uxtb	r2, r3
 800446a:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <HAL_UART_RxCpltCallback+0xec>)
 800446c:	701a      	strb	r2, [r3, #0]
			break;
 800446e:	e002      	b.n	8004476 <HAL_UART_RxCpltCallback+0xce>
	}
 8004470:	bf00      	nop
 8004472:	e000      	b.n	8004476 <HAL_UART_RxCpltCallback+0xce>
			break;
 8004474:	bf00      	nop
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40011000 	.word	0x40011000
 8004488:	2400023c 	.word	0x2400023c
 800448c:	40004400 	.word	0x40004400
 8004490:	2400023e 	.word	0x2400023e
 8004494:	24000250 	.word	0x24000250
 8004498:	2400023f 	.word	0x2400023f
 800449c:	240007a8 	.word	0x240007a8
 80044a0:	24000240 	.word	0x24000240

080044a4 <Receive_Command>:

void Receive_Command(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
	if(uart1_rx_flag == 1)
 80044a8:	4b36      	ldr	r3, [pc, #216]	; (8004584 <Receive_Command+0xe0>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d163      	bne.n	8004578 <Receive_Command+0xd4>
	{
		uart1_rx_flag = 0;
 80044b0:	4b34      	ldr	r3, [pc, #208]	; (8004584 <Receive_Command+0xe0>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]

		switch(uart1_rx_data)
 80044b6:	4b34      	ldr	r3, [pc, #208]	; (8004588 <Receive_Command+0xe4>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	2b14      	cmp	r3, #20
 80044be:	d854      	bhi.n	800456a <Receive_Command+0xc6>
 80044c0:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <Receive_Command+0x24>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	0800451d 	.word	0x0800451d
 80044cc:	08004525 	.word	0x08004525
 80044d0:	0800452d 	.word	0x0800452d
 80044d4:	08004535 	.word	0x08004535
 80044d8:	0800453d 	.word	0x0800453d
 80044dc:	08004545 	.word	0x08004545
 80044e0:	0800456b 	.word	0x0800456b
 80044e4:	0800456b 	.word	0x0800456b
 80044e8:	0800456b 	.word	0x0800456b
 80044ec:	0800456b 	.word	0x0800456b
 80044f0:	0800454d 	.word	0x0800454d
 80044f4:	08004555 	.word	0x08004555
 80044f8:	0800456b 	.word	0x0800456b
 80044fc:	0800456b 	.word	0x0800456b
 8004500:	0800456b 	.word	0x0800456b
 8004504:	0800456b 	.word	0x0800456b
 8004508:	0800456b 	.word	0x0800456b
 800450c:	0800456b 	.word	0x0800456b
 8004510:	0800456b 	.word	0x0800456b
 8004514:	0800456b 	.word	0x0800456b
 8004518:	0800455d 	.word	0x0800455d
		{
		case 1: print_mode = 1; break; //Roll, Pitch, Yaw
 800451c:	4b1b      	ldr	r3, [pc, #108]	; (800458c <Receive_Command+0xe8>)
 800451e:	2201      	movs	r2, #1
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	e02a      	b.n	800457a <Receive_Command+0xd6>
		case 2: print_mode = 2; break; //Alt Raw, Alt Filt
 8004524:	4b19      	ldr	r3, [pc, #100]	; (800458c <Receive_Command+0xe8>)
 8004526:	2202      	movs	r2, #2
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	e026      	b.n	800457a <Receive_Command+0xd6>
		case 3: print_mode = 3; break; //Gyro
 800452c:	4b17      	ldr	r3, [pc, #92]	; (800458c <Receive_Command+0xe8>)
 800452e:	2203      	movs	r2, #3
 8004530:	701a      	strb	r2, [r3, #0]
 8004532:	e022      	b.n	800457a <Receive_Command+0xd6>
		case 4: print_mode = 4; break; //Accel
 8004534:	4b15      	ldr	r3, [pc, #84]	; (800458c <Receive_Command+0xe8>)
 8004536:	2204      	movs	r2, #4
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	e01e      	b.n	800457a <Receive_Command+0xd6>
		case 5: print_mode = 5; break; //Mag
 800453c:	4b13      	ldr	r3, [pc, #76]	; (800458c <Receive_Command+0xe8>)
 800453e:	2205      	movs	r2, #5
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	e01a      	b.n	800457a <Receive_Command+0xd6>
		case 6: print_mode = 6; break; //Mag_Offset
 8004544:	4b11      	ldr	r3, [pc, #68]	; (800458c <Receive_Command+0xe8>)
 8004546:	2206      	movs	r2, #6
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	e016      	b.n	800457a <Receive_Command+0xd6>
		case 11: print_mode = 11; break; //Controller Channels
 800454c:	4b0f      	ldr	r3, [pc, #60]	; (800458c <Receive_Command+0xe8>)
 800454e:	220b      	movs	r2, #11
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	e012      	b.n	800457a <Receive_Command+0xd6>
		case 12: print_mode = 12; break; //GPS
 8004554:	4b0d      	ldr	r3, [pc, #52]	; (800458c <Receive_Command+0xe8>)
 8004556:	220c      	movs	r2, #12
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	e00e      	b.n	800457a <Receive_Command+0xd6>
		case 21: mag_calibration_enable = 1; print_mode = 0; break; //Mag Offset
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <Receive_Command+0xec>)
 800455e:	2201      	movs	r2, #1
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	4b0a      	ldr	r3, [pc, #40]	; (800458c <Receive_Command+0xe8>)
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
 8004568:	e007      	b.n	800457a <Receive_Command+0xd6>
		default: mag_calibration_enable = 0; print_mode = 0; break; // Stop Printing
 800456a:	4b09      	ldr	r3, [pc, #36]	; (8004590 <Receive_Command+0xec>)
 800456c:	2200      	movs	r2, #0
 800456e:	701a      	strb	r2, [r3, #0]
 8004570:	4b06      	ldr	r3, [pc, #24]	; (800458c <Receive_Command+0xe8>)
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	e000      	b.n	800457a <Receive_Command+0xd6>
		}
	}
 8004578:	bf00      	nop
}
 800457a:	bf00      	nop
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	2400023c 	.word	0x2400023c
 8004588:	2400023d 	.word	0x2400023d
 800458c:	2400022c 	.word	0x2400022c
 8004590:	2400022d 	.word	0x2400022d

08004594 <Is_iBus_Received>:

int Is_iBus_Received(uint8_t ibus_rx_cplt_flag)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	71fb      	strb	r3, [r7, #7]
	iBus_return = 0;
 800459e:	4b16      	ldr	r3, [pc, #88]	; (80045f8 <Is_iBus_Received+0x64>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]
	if(ibus_rx_cplt_flag==1)
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d120      	bne.n	80045ec <Is_iBus_Received+0x58>
	{
		ibus_rx_cplt_flag=0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	71fb      	strb	r3, [r7, #7]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 80045ae:	2120      	movs	r1, #32
 80045b0:	4812      	ldr	r0, [pc, #72]	; (80045fc <Is_iBus_Received+0x68>)
 80045b2:	f7fc f869 	bl	8000688 <iBus_Check_CHKSUM>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d117      	bne.n	80045ec <Is_iBus_Received+0x58>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80045bc:	4910      	ldr	r1, [pc, #64]	; (8004600 <Is_iBus_Received+0x6c>)
 80045be:	480f      	ldr	r0, [pc, #60]	; (80045fc <Is_iBus_Received+0x68>)
 80045c0:	f7fc f899 	bl	80006f6 <iBus_Parsing>
//			iBus_return = 1;
			if(iBus_isActiveFailSafe(&iBus) == 1)
 80045c4:	480e      	ldr	r0, [pc, #56]	; (8004600 <Is_iBus_Received+0x6c>)
 80045c6:	f7fc f952 	bl	800086e <iBus_isActiveFailSafe>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d105      	bne.n	80045dc <Is_iBus_Received+0x48>
			{
				HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80045d0:	2201      	movs	r2, #1
 80045d2:	2108      	movs	r1, #8
 80045d4:	480b      	ldr	r0, [pc, #44]	; (8004604 <Is_iBus_Received+0x70>)
 80045d6:	f003 ff87 	bl	80084e8 <HAL_GPIO_WritePin>
 80045da:	e007      	b.n	80045ec <Is_iBus_Received+0x58>
			}
			else
			{
				HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80045dc:	2200      	movs	r2, #0
 80045de:	2108      	movs	r1, #8
 80045e0:	4808      	ldr	r0, [pc, #32]	; (8004604 <Is_iBus_Received+0x70>)
 80045e2:	f003 ff81 	bl	80084e8 <HAL_GPIO_WritePin>
				iBus_return = 1;
 80045e6:	4b04      	ldr	r3, [pc, #16]	; (80045f8 <Is_iBus_Received+0x64>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return iBus_return;
 80045ec:	4b02      	ldr	r3, [pc, #8]	; (80045f8 <Is_iBus_Received+0x64>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	24000276 	.word	0x24000276
 80045fc:	240007a8 	.word	0x240007a8
 8004600:	24000260 	.word	0x24000260
 8004604:	58021000 	.word	0x58021000

08004608 <Is_Throttle_Min>:

int Is_Throttle_Min(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
	iBus_return = 0;
 800460c:	4b10      	ldr	r3, [pc, #64]	; (8004650 <Is_Throttle_Min+0x48>)
 800460e:	2200      	movs	r2, #0
 8004610:	701a      	strb	r2, [r3, #0]
	if(ibus_rx_cplt_flag==1)
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <Is_Throttle_Min+0x4c>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d115      	bne.n	8004646 <Is_Throttle_Min+0x3e>
	{
		ibus_rx_cplt_flag=0;
 800461a:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <Is_Throttle_Min+0x4c>)
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 8004620:	2120      	movs	r1, #32
 8004622:	480d      	ldr	r0, [pc, #52]	; (8004658 <Is_Throttle_Min+0x50>)
 8004624:	f7fc f830 	bl	8000688 <iBus_Check_CHKSUM>
 8004628:	4603      	mov	r3, r0
 800462a:	2b01      	cmp	r3, #1
 800462c:	d10b      	bne.n	8004646 <Is_Throttle_Min+0x3e>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800462e:	490b      	ldr	r1, [pc, #44]	; (800465c <Is_Throttle_Min+0x54>)
 8004630:	4809      	ldr	r0, [pc, #36]	; (8004658 <Is_Throttle_Min+0x50>)
 8004632:	f7fc f860 	bl	80006f6 <iBus_Parsing>
			if(iBus.LV < 1025) iBus_return =  1;
 8004636:	4b09      	ldr	r3, [pc, #36]	; (800465c <Is_Throttle_Min+0x54>)
 8004638:	889b      	ldrh	r3, [r3, #4]
 800463a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463e:	d802      	bhi.n	8004646 <Is_Throttle_Min+0x3e>
 8004640:	4b03      	ldr	r3, [pc, #12]	; (8004650 <Is_Throttle_Min+0x48>)
 8004642:	2201      	movs	r2, #1
 8004644:	701a      	strb	r2, [r3, #0]
		}
	}
	return iBus_return;
 8004646:	4b02      	ldr	r3, [pc, #8]	; (8004650 <Is_Throttle_Min+0x48>)
 8004648:	781b      	ldrb	r3, [r3, #0]
}
 800464a:	4618      	mov	r0, r3
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	24000276 	.word	0x24000276
 8004654:	24000240 	.word	0x24000240
 8004658:	240007a8 	.word	0x240007a8
 800465c:	24000260 	.word	0x24000260

08004660 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
	return 1;
 8004664:	2301      	movs	r3, #1
}
 8004666:	4618      	mov	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <_kill>:

int _kill(int pid, int sig)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800467a:	f00c fde9 	bl	8011250 <__errno>
 800467e:	4603      	mov	r3, r0
 8004680:	2216      	movs	r2, #22
 8004682:	601a      	str	r2, [r3, #0]
	return -1;
 8004684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004688:	4618      	mov	r0, r3
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <_exit>:

void _exit (int status)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004698:	f04f 31ff 	mov.w	r1, #4294967295
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ffe7 	bl	8004670 <_kill>
	while (1) {}		/* Make sure we hang here */
 80046a2:	e7fe      	b.n	80046a2 <_exit+0x12>

080046a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	e00a      	b.n	80046cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80046b6:	f3af 8000 	nop.w
 80046ba:	4601      	mov	r1, r0
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	60ba      	str	r2, [r7, #8]
 80046c2:	b2ca      	uxtb	r2, r1
 80046c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	3301      	adds	r3, #1
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	dbf0      	blt.n	80046b6 <_read+0x12>
	}

return len;
 80046d4:	687b      	ldr	r3, [r7, #4]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <_close>:
	}
	return len;
}

int _close(int file)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
	return -1;
 80046e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004706:	605a      	str	r2, [r3, #4]
	return 0;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <_isatty>:

int _isatty(int file)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
	return 1;
 800471e:	2301      	movs	r3, #1
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
	return 0;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004750:	4a14      	ldr	r2, [pc, #80]	; (80047a4 <_sbrk+0x5c>)
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <_sbrk+0x60>)
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800475c:	4b13      	ldr	r3, [pc, #76]	; (80047ac <_sbrk+0x64>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d102      	bne.n	800476a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004764:	4b11      	ldr	r3, [pc, #68]	; (80047ac <_sbrk+0x64>)
 8004766:	4a12      	ldr	r2, [pc, #72]	; (80047b0 <_sbrk+0x68>)
 8004768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800476a:	4b10      	ldr	r3, [pc, #64]	; (80047ac <_sbrk+0x64>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4413      	add	r3, r2
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	429a      	cmp	r2, r3
 8004776:	d207      	bcs.n	8004788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004778:	f00c fd6a 	bl	8011250 <__errno>
 800477c:	4603      	mov	r3, r0
 800477e:	220c      	movs	r2, #12
 8004780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004782:	f04f 33ff 	mov.w	r3, #4294967295
 8004786:	e009      	b.n	800479c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004788:	4b08      	ldr	r3, [pc, #32]	; (80047ac <_sbrk+0x64>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800478e:	4b07      	ldr	r3, [pc, #28]	; (80047ac <_sbrk+0x64>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4413      	add	r3, r2
 8004796:	4a05      	ldr	r2, [pc, #20]	; (80047ac <_sbrk+0x64>)
 8004798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800479a:	68fb      	ldr	r3, [r7, #12]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	24080000 	.word	0x24080000
 80047a8:	00000400 	.word	0x00000400
 80047ac:	24000254 	.word	0x24000254
 80047b0:	24000808 	.word	0x24000808

080047b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80047b8:	4b39      	ldr	r3, [pc, #228]	; (80048a0 <SystemInit+0xec>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047be:	4a38      	ldr	r2, [pc, #224]	; (80048a0 <SystemInit+0xec>)
 80047c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80047c8:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <SystemInit+0xf0>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	2b06      	cmp	r3, #6
 80047d2:	d807      	bhi.n	80047e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80047d4:	4b33      	ldr	r3, [pc, #204]	; (80048a4 <SystemInit+0xf0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f023 030f 	bic.w	r3, r3, #15
 80047dc:	4a31      	ldr	r2, [pc, #196]	; (80048a4 <SystemInit+0xf0>)
 80047de:	f043 0307 	orr.w	r3, r3, #7
 80047e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80047e4:	4b30      	ldr	r3, [pc, #192]	; (80048a8 <SystemInit+0xf4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a2f      	ldr	r2, [pc, #188]	; (80048a8 <SystemInit+0xf4>)
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80047f0:	4b2d      	ldr	r3, [pc, #180]	; (80048a8 <SystemInit+0xf4>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80047f6:	4b2c      	ldr	r3, [pc, #176]	; (80048a8 <SystemInit+0xf4>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	492b      	ldr	r1, [pc, #172]	; (80048a8 <SystemInit+0xf4>)
 80047fc:	4b2b      	ldr	r3, [pc, #172]	; (80048ac <SystemInit+0xf8>)
 80047fe:	4013      	ands	r3, r2
 8004800:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004802:	4b28      	ldr	r3, [pc, #160]	; (80048a4 <SystemInit+0xf0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800480e:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <SystemInit+0xf0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f023 030f 	bic.w	r3, r3, #15
 8004816:	4a23      	ldr	r2, [pc, #140]	; (80048a4 <SystemInit+0xf0>)
 8004818:	f043 0307 	orr.w	r3, r3, #7
 800481c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800481e:	4b22      	ldr	r3, [pc, #136]	; (80048a8 <SystemInit+0xf4>)
 8004820:	2200      	movs	r2, #0
 8004822:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004824:	4b20      	ldr	r3, [pc, #128]	; (80048a8 <SystemInit+0xf4>)
 8004826:	2200      	movs	r2, #0
 8004828:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800482a:	4b1f      	ldr	r3, [pc, #124]	; (80048a8 <SystemInit+0xf4>)
 800482c:	2200      	movs	r2, #0
 800482e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004830:	4b1d      	ldr	r3, [pc, #116]	; (80048a8 <SystemInit+0xf4>)
 8004832:	4a1f      	ldr	r2, [pc, #124]	; (80048b0 <SystemInit+0xfc>)
 8004834:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004836:	4b1c      	ldr	r3, [pc, #112]	; (80048a8 <SystemInit+0xf4>)
 8004838:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <SystemInit+0x100>)
 800483a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800483c:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <SystemInit+0xf4>)
 800483e:	4a1e      	ldr	r2, [pc, #120]	; (80048b8 <SystemInit+0x104>)
 8004840:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004842:	4b19      	ldr	r3, [pc, #100]	; (80048a8 <SystemInit+0xf4>)
 8004844:	2200      	movs	r2, #0
 8004846:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004848:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <SystemInit+0xf4>)
 800484a:	4a1b      	ldr	r2, [pc, #108]	; (80048b8 <SystemInit+0x104>)
 800484c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800484e:	4b16      	ldr	r3, [pc, #88]	; (80048a8 <SystemInit+0xf4>)
 8004850:	2200      	movs	r2, #0
 8004852:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004854:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <SystemInit+0xf4>)
 8004856:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <SystemInit+0x104>)
 8004858:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800485a:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <SystemInit+0xf4>)
 800485c:	2200      	movs	r2, #0
 800485e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004860:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <SystemInit+0xf4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a10      	ldr	r2, [pc, #64]	; (80048a8 <SystemInit+0xf4>)
 8004866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800486a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800486c:	4b0e      	ldr	r3, [pc, #56]	; (80048a8 <SystemInit+0xf4>)
 800486e:	2200      	movs	r2, #0
 8004870:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004872:	4b12      	ldr	r3, [pc, #72]	; (80048bc <SystemInit+0x108>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <SystemInit+0x10c>)
 8004878:	4013      	ands	r3, r2
 800487a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800487e:	d202      	bcs.n	8004886 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004880:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <SystemInit+0x110>)
 8004882:	2201      	movs	r2, #1
 8004884:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <SystemInit+0x114>)
 8004888:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800488c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800488e:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <SystemInit+0xec>)
 8004890:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004894:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004896:	bf00      	nop
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	e000ed00 	.word	0xe000ed00
 80048a4:	52002000 	.word	0x52002000
 80048a8:	58024400 	.word	0x58024400
 80048ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80048b0:	02020200 	.word	0x02020200
 80048b4:	01ff0000 	.word	0x01ff0000
 80048b8:	01010280 	.word	0x01010280
 80048bc:	5c001000 	.word	0x5c001000
 80048c0:	ffff0000 	.word	0xffff0000
 80048c4:	51008108 	.word	0x51008108
 80048c8:	52004000 	.word	0x52004000

080048cc <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	4603      	mov	r3, r0
 80048d4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80048d6:	f107 020f 	add.w	r2, r7, #15
 80048da:	1df9      	adds	r1, r7, #7
 80048dc:	2364      	movs	r3, #100	; 0x64
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	2301      	movs	r3, #1
 80048e2:	4804      	ldr	r0, [pc, #16]	; (80048f4 <W25qxx_Spi+0x28>)
 80048e4:	f009 f88c 	bl	800da00 <HAL_SPI_TransmitReceive>
	return ret;
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	24000630 	.word	0x24000630

080048f8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	2300      	movs	r3, #0
 8004908:	607b      	str	r3, [r7, #4]
 800490a:	2300      	movs	r3, #0
 800490c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800490e:	2200      	movs	r2, #0
 8004910:	2140      	movs	r1, #64	; 0x40
 8004912:	4813      	ldr	r0, [pc, #76]	; (8004960 <W25qxx_ReadID+0x68>)
 8004914:	f003 fde8 	bl	80084e8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004918:	209f      	movs	r0, #159	; 0x9f
 800491a:	f7ff ffd7 	bl	80048cc <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800491e:	20a5      	movs	r0, #165	; 0xa5
 8004920:	f7ff ffd4 	bl	80048cc <W25qxx_Spi>
 8004924:	4603      	mov	r3, r0
 8004926:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004928:	20a5      	movs	r0, #165	; 0xa5
 800492a:	f7ff ffcf 	bl	80048cc <W25qxx_Spi>
 800492e:	4603      	mov	r3, r0
 8004930:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004932:	20a5      	movs	r0, #165	; 0xa5
 8004934:	f7ff ffca 	bl	80048cc <W25qxx_Spi>
 8004938:	4603      	mov	r3, r0
 800493a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800493c:	2201      	movs	r2, #1
 800493e:	2140      	movs	r1, #64	; 0x40
 8004940:	4807      	ldr	r0, [pc, #28]	; (8004960 <W25qxx_ReadID+0x68>)
 8004942:	f003 fdd1 	bl	80084e8 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	041a      	lsls	r2, r3, #16
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	021b      	lsls	r3, r3, #8
 800494e:	4313      	orrs	r3, r2
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
	return Temp;
 8004956:	68fb      	ldr	r3, [r7, #12]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	58020400 	.word	0x58020400

08004964 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004964:	b590      	push	{r4, r7, lr}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800496a:	2200      	movs	r2, #0
 800496c:	2140      	movs	r1, #64	; 0x40
 800496e:	4816      	ldr	r0, [pc, #88]	; (80049c8 <W25qxx_ReadUniqID+0x64>)
 8004970:	f003 fdba 	bl	80084e8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8004974:	204b      	movs	r0, #75	; 0x4b
 8004976:	f7ff ffa9 	bl	80048cc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800497a:	2300      	movs	r3, #0
 800497c:	71fb      	strb	r3, [r7, #7]
 800497e:	e005      	b.n	800498c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004980:	20a5      	movs	r0, #165	; 0xa5
 8004982:	f7ff ffa3 	bl	80048cc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	3301      	adds	r3, #1
 800498a:	71fb      	strb	r3, [r7, #7]
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d9f6      	bls.n	8004980 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8004992:	2300      	movs	r3, #0
 8004994:	71bb      	strb	r3, [r7, #6]
 8004996:	e00b      	b.n	80049b0 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004998:	79bc      	ldrb	r4, [r7, #6]
 800499a:	20a5      	movs	r0, #165	; 0xa5
 800499c:	f7ff ff96 	bl	80048cc <W25qxx_Spi>
 80049a0:	4603      	mov	r3, r0
 80049a2:	461a      	mov	r2, r3
 80049a4:	4b09      	ldr	r3, [pc, #36]	; (80049cc <W25qxx_ReadUniqID+0x68>)
 80049a6:	4423      	add	r3, r4
 80049a8:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80049aa:	79bb      	ldrb	r3, [r7, #6]
 80049ac:	3301      	adds	r3, #1
 80049ae:	71bb      	strb	r3, [r7, #6]
 80049b0:	79bb      	ldrb	r3, [r7, #6]
 80049b2:	2b07      	cmp	r3, #7
 80049b4:	d9f0      	bls.n	8004998 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80049b6:	2201      	movs	r2, #1
 80049b8:	2140      	movs	r1, #64	; 0x40
 80049ba:	4803      	ldr	r0, [pc, #12]	; (80049c8 <W25qxx_ReadUniqID+0x64>)
 80049bc:	f003 fd94 	bl	80084e8 <HAL_GPIO_WritePin>
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd90      	pop	{r4, r7, pc}
 80049c8:	58020400 	.word	0x58020400
 80049cc:	240007c8 	.word	0x240007c8

080049d0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80049d4:	2200      	movs	r2, #0
 80049d6:	2140      	movs	r1, #64	; 0x40
 80049d8:	4807      	ldr	r0, [pc, #28]	; (80049f8 <W25qxx_WriteEnable+0x28>)
 80049da:	f003 fd85 	bl	80084e8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80049de:	2006      	movs	r0, #6
 80049e0:	f7ff ff74 	bl	80048cc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80049e4:	2201      	movs	r2, #1
 80049e6:	2140      	movs	r1, #64	; 0x40
 80049e8:	4803      	ldr	r0, [pc, #12]	; (80049f8 <W25qxx_WriteEnable+0x28>)
 80049ea:	f003 fd7d 	bl	80084e8 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80049ee:	2001      	movs	r0, #1
 80049f0:	f000 fc36 	bl	8005260 <HAL_Delay>
}
 80049f4:	bf00      	nop
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	58020400 	.word	0x58020400

080049fc <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2140      	movs	r1, #64	; 0x40
 8004a0e:	481c      	ldr	r0, [pc, #112]	; (8004a80 <W25qxx_ReadStatusRegister+0x84>)
 8004a10:	f003 fd6a 	bl	80084e8 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d10c      	bne.n	8004a34 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8004a1a:	2005      	movs	r0, #5
 8004a1c:	f7ff ff56 	bl	80048cc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a20:	20a5      	movs	r0, #165	; 0xa5
 8004a22:	f7ff ff53 	bl	80048cc <W25qxx_Spi>
 8004a26:	4603      	mov	r3, r0
 8004a28:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8004a2a:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <W25qxx_ReadStatusRegister+0x88>)
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8004a32:	e01b      	b.n	8004a6c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d10c      	bne.n	8004a54 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8004a3a:	2035      	movs	r0, #53	; 0x35
 8004a3c:	f7ff ff46 	bl	80048cc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a40:	20a5      	movs	r0, #165	; 0xa5
 8004a42:	f7ff ff43 	bl	80048cc <W25qxx_Spi>
 8004a46:	4603      	mov	r3, r0
 8004a48:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8004a4a:	4a0e      	ldr	r2, [pc, #56]	; (8004a84 <W25qxx_ReadStatusRegister+0x88>)
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004a52:	e00b      	b.n	8004a6c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004a54:	2015      	movs	r0, #21
 8004a56:	f7ff ff39 	bl	80048cc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a5a:	20a5      	movs	r0, #165	; 0xa5
 8004a5c:	f7ff ff36 	bl	80048cc <W25qxx_Spi>
 8004a60:	4603      	mov	r3, r0
 8004a62:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004a64:	4a07      	ldr	r2, [pc, #28]	; (8004a84 <W25qxx_ReadStatusRegister+0x88>)
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	2140      	movs	r1, #64	; 0x40
 8004a70:	4803      	ldr	r0, [pc, #12]	; (8004a80 <W25qxx_ReadStatusRegister+0x84>)
 8004a72:	f003 fd39 	bl	80084e8 <HAL_GPIO_WritePin>
	return status;
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	58020400 	.word	0x58020400
 8004a84:	240007c8 	.word	0x240007c8

08004a88 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8004a8c:	2001      	movs	r0, #1
 8004a8e:	f000 fbe7 	bl	8005260 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004a92:	2200      	movs	r2, #0
 8004a94:	2140      	movs	r1, #64	; 0x40
 8004a96:	480f      	ldr	r0, [pc, #60]	; (8004ad4 <W25qxx_WaitForWriteEnd+0x4c>)
 8004a98:	f003 fd26 	bl	80084e8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8004a9c:	2005      	movs	r0, #5
 8004a9e:	f7ff ff15 	bl	80048cc <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004aa2:	20a5      	movs	r0, #165	; 0xa5
 8004aa4:	f7ff ff12 	bl	80048cc <W25qxx_Spi>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	461a      	mov	r2, r3
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <W25qxx_WaitForWriteEnd+0x50>)
 8004aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8004ab2:	2001      	movs	r0, #1
 8004ab4:	f000 fbd4 	bl	8005260 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8004ab8:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <W25qxx_WaitForWriteEnd+0x50>)
 8004aba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1ed      	bne.n	8004aa2 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	2140      	movs	r1, #64	; 0x40
 8004aca:	4802      	ldr	r0, [pc, #8]	; (8004ad4 <W25qxx_WaitForWriteEnd+0x4c>)
 8004acc:	f003 fd0c 	bl	80084e8 <HAL_GPIO_WritePin>
}
 8004ad0:	bf00      	nop
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	58020400 	.word	0x58020400
 8004ad8:	240007c8 	.word	0x240007c8

08004adc <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8004ae2:	4b65      	ldr	r3, [pc, #404]	; (8004c78 <W25qxx_Init+0x19c>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8004aea:	e002      	b.n	8004af2 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004aec:	2001      	movs	r0, #1
 8004aee:	f000 fbb7 	bl	8005260 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8004af2:	f000 fba9 	bl	8005248 <HAL_GetTick>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b63      	cmp	r3, #99	; 0x63
 8004afa:	d9f7      	bls.n	8004aec <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004afc:	2201      	movs	r2, #1
 8004afe:	2140      	movs	r1, #64	; 0x40
 8004b00:	485e      	ldr	r0, [pc, #376]	; (8004c7c <W25qxx_Init+0x1a0>)
 8004b02:	f003 fcf1 	bl	80084e8 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8004b06:	2064      	movs	r0, #100	; 0x64
 8004b08:	f000 fbaa 	bl	8005260 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8004b0c:	f7ff fef4 	bl	80048f8 <W25qxx_ReadID>
 8004b10:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	3b11      	subs	r3, #17
 8004b18:	2b0f      	cmp	r3, #15
 8004b1a:	d86c      	bhi.n	8004bf6 <W25qxx_Init+0x11a>
 8004b1c:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <W25qxx_Init+0x48>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004be9 	.word	0x08004be9
 8004b28:	08004bdb 	.word	0x08004bdb
 8004b2c:	08004bcd 	.word	0x08004bcd
 8004b30:	08004bbf 	.word	0x08004bbf
 8004b34:	08004bb1 	.word	0x08004bb1
 8004b38:	08004ba3 	.word	0x08004ba3
 8004b3c:	08004b95 	.word	0x08004b95
 8004b40:	08004b85 	.word	0x08004b85
 8004b44:	08004b75 	.word	0x08004b75
 8004b48:	08004bf7 	.word	0x08004bf7
 8004b4c:	08004bf7 	.word	0x08004bf7
 8004b50:	08004bf7 	.word	0x08004bf7
 8004b54:	08004bf7 	.word	0x08004bf7
 8004b58:	08004bf7 	.word	0x08004bf7
 8004b5c:	08004bf7 	.word	0x08004bf7
 8004b60:	08004b65 	.word	0x08004b65
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004b64:	4b44      	ldr	r3, [pc, #272]	; (8004c78 <W25qxx_Init+0x19c>)
 8004b66:	220a      	movs	r2, #10
 8004b68:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8004b6a:	4b43      	ldr	r3, [pc, #268]	; (8004c78 <W25qxx_Init+0x19c>)
 8004b6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b70:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8004b72:	e046      	b.n	8004c02 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004b74:	4b40      	ldr	r3, [pc, #256]	; (8004c78 <W25qxx_Init+0x19c>)
 8004b76:	2209      	movs	r2, #9
 8004b78:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004b7a:	4b3f      	ldr	r3, [pc, #252]	; (8004c78 <W25qxx_Init+0x19c>)
 8004b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b80:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8004b82:	e03e      	b.n	8004c02 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004b84:	4b3c      	ldr	r3, [pc, #240]	; (8004c78 <W25qxx_Init+0x19c>)
 8004b86:	2208      	movs	r2, #8
 8004b88:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8004b8a:	4b3b      	ldr	r3, [pc, #236]	; (8004c78 <W25qxx_Init+0x19c>)
 8004b8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b90:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8004b92:	e036      	b.n	8004c02 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8004b94:	4b38      	ldr	r3, [pc, #224]	; (8004c78 <W25qxx_Init+0x19c>)
 8004b96:	2207      	movs	r2, #7
 8004b98:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004b9a:	4b37      	ldr	r3, [pc, #220]	; (8004c78 <W25qxx_Init+0x19c>)
 8004b9c:	2280      	movs	r2, #128	; 0x80
 8004b9e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8004ba0:	e02f      	b.n	8004c02 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004ba2:	4b35      	ldr	r3, [pc, #212]	; (8004c78 <W25qxx_Init+0x19c>)
 8004ba4:	2206      	movs	r2, #6
 8004ba6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004ba8:	4b33      	ldr	r3, [pc, #204]	; (8004c78 <W25qxx_Init+0x19c>)
 8004baa:	2240      	movs	r2, #64	; 0x40
 8004bac:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8004bae:	e028      	b.n	8004c02 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004bb0:	4b31      	ldr	r3, [pc, #196]	; (8004c78 <W25qxx_Init+0x19c>)
 8004bb2:	2205      	movs	r2, #5
 8004bb4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8004bb6:	4b30      	ldr	r3, [pc, #192]	; (8004c78 <W25qxx_Init+0x19c>)
 8004bb8:	2220      	movs	r2, #32
 8004bba:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8004bbc:	e021      	b.n	8004c02 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8004bbe:	4b2e      	ldr	r3, [pc, #184]	; (8004c78 <W25qxx_Init+0x19c>)
 8004bc0:	2204      	movs	r2, #4
 8004bc2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004bc4:	4b2c      	ldr	r3, [pc, #176]	; (8004c78 <W25qxx_Init+0x19c>)
 8004bc6:	2210      	movs	r2, #16
 8004bc8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8004bca:	e01a      	b.n	8004c02 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8004bcc:	4b2a      	ldr	r3, [pc, #168]	; (8004c78 <W25qxx_Init+0x19c>)
 8004bce:	2203      	movs	r2, #3
 8004bd0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004bd2:	4b29      	ldr	r3, [pc, #164]	; (8004c78 <W25qxx_Init+0x19c>)
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8004bd8:	e013      	b.n	8004c02 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004bda:	4b27      	ldr	r3, [pc, #156]	; (8004c78 <W25qxx_Init+0x19c>)
 8004bdc:	2202      	movs	r2, #2
 8004bde:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004be0:	4b25      	ldr	r3, [pc, #148]	; (8004c78 <W25qxx_Init+0x19c>)
 8004be2:	2204      	movs	r2, #4
 8004be4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8004be6:	e00c      	b.n	8004c02 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004be8:	4b23      	ldr	r3, [pc, #140]	; (8004c78 <W25qxx_Init+0x19c>)
 8004bea:	2201      	movs	r2, #1
 8004bec:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004bee:	4b22      	ldr	r3, [pc, #136]	; (8004c78 <W25qxx_Init+0x19c>)
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8004bf4:	e005      	b.n	8004c02 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8004bf6:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <W25qxx_Init+0x19c>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e036      	b.n	8004c70 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8004c02:	4b1d      	ldr	r3, [pc, #116]	; (8004c78 <W25qxx_Init+0x19c>)
 8004c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c08:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004c0a:	4b1b      	ldr	r3, [pc, #108]	; (8004c78 <W25qxx_Init+0x19c>)
 8004c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c10:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004c12:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <W25qxx_Init+0x19c>)
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <W25qxx_Init+0x19c>)
 8004c1a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004c1c:	4b16      	ldr	r3, [pc, #88]	; (8004c78 <W25qxx_Init+0x19c>)
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	4a15      	ldr	r2, [pc, #84]	; (8004c78 <W25qxx_Init+0x19c>)
 8004c22:	6912      	ldr	r2, [r2, #16]
 8004c24:	fb02 f303 	mul.w	r3, r2, r3
 8004c28:	4a13      	ldr	r2, [pc, #76]	; (8004c78 <W25qxx_Init+0x19c>)
 8004c2a:	8952      	ldrh	r2, [r2, #10]
 8004c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c30:	4a11      	ldr	r2, [pc, #68]	; (8004c78 <W25qxx_Init+0x19c>)
 8004c32:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004c34:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <W25qxx_Init+0x19c>)
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	4a0f      	ldr	r2, [pc, #60]	; (8004c78 <W25qxx_Init+0x19c>)
 8004c3c:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004c3e:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <W25qxx_Init+0x19c>)
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	4a0d      	ldr	r2, [pc, #52]	; (8004c78 <W25qxx_Init+0x19c>)
 8004c44:	6912      	ldr	r2, [r2, #16]
 8004c46:	fb02 f303 	mul.w	r3, r2, r3
 8004c4a:	0a9b      	lsrs	r3, r3, #10
 8004c4c:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <W25qxx_Init+0x19c>)
 8004c4e:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8004c50:	f7ff fe88 	bl	8004964 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8004c54:	2001      	movs	r0, #1
 8004c56:	f7ff fed1 	bl	80049fc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004c5a:	2002      	movs	r0, #2
 8004c5c:	f7ff fece 	bl	80049fc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8004c60:	2003      	movs	r0, #3
 8004c62:	f7ff fecb 	bl	80049fc <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8004c66:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <W25qxx_Init+0x19c>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004c6e:	2301      	movs	r3, #1
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	240007c8 	.word	0x240007c8
 8004c7c:	58020400 	.word	0x58020400

08004c80 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004c88:	e002      	b.n	8004c90 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8004c8a:	2001      	movs	r0, #1
 8004c8c:	f000 fae8 	bl	8005260 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004c90:	4b25      	ldr	r3, [pc, #148]	; (8004d28 <W25qxx_EraseSector+0xa8>)
 8004c92:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d0f7      	beq.n	8004c8a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8004c9a:	4b23      	ldr	r3, [pc, #140]	; (8004d28 <W25qxx_EraseSector+0xa8>)
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8004ca2:	f7ff fef1 	bl	8004a88 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8004ca6:	4b20      	ldr	r3, [pc, #128]	; (8004d28 <W25qxx_EraseSector+0xa8>)
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	fb02 f303 	mul.w	r3, r2, r3
 8004cb0:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8004cb2:	f7ff fe8d 	bl	80049d0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2140      	movs	r1, #64	; 0x40
 8004cba:	481c      	ldr	r0, [pc, #112]	; (8004d2c <W25qxx_EraseSector+0xac>)
 8004cbc:	f003 fc14 	bl	80084e8 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004cc0:	4b19      	ldr	r3, [pc, #100]	; (8004d28 <W25qxx_EraseSector+0xa8>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d909      	bls.n	8004cdc <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8004cc8:	2021      	movs	r0, #33	; 0x21
 8004cca:	f7ff fdff 	bl	80048cc <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	0e1b      	lsrs	r3, r3, #24
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff fdf9 	bl	80048cc <W25qxx_Spi>
 8004cda:	e002      	b.n	8004ce2 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8004cdc:	2020      	movs	r0, #32
 8004cde:	f7ff fdf5 	bl	80048cc <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff fdef 	bl	80048cc <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	0a1b      	lsrs	r3, r3, #8
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff fde9 	bl	80048cc <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff fde4 	bl	80048cc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004d04:	2201      	movs	r2, #1
 8004d06:	2140      	movs	r1, #64	; 0x40
 8004d08:	4808      	ldr	r0, [pc, #32]	; (8004d2c <W25qxx_EraseSector+0xac>)
 8004d0a:	f003 fbed 	bl	80084e8 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004d0e:	f7ff febb 	bl	8004a88 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8004d12:	2001      	movs	r0, #1
 8004d14:	f000 faa4 	bl	8005260 <HAL_Delay>
	w25qxx.Lock = 0;
 8004d18:	4b03      	ldr	r3, [pc, #12]	; (8004d28 <W25qxx_EraseSector+0xa8>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	240007c8 	.word	0x240007c8
 8004d2c:	58020400 	.word	0x58020400

08004d30 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004d38:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <W25qxx_SectorToPage+0x28>)
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	fb02 f303 	mul.w	r3, r2, r3
 8004d42:	4a05      	ldr	r2, [pc, #20]	; (8004d58 <W25qxx_SectorToPage+0x28>)
 8004d44:	8952      	ldrh	r2, [r2, #10]
 8004d46:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	240007c8 	.word	0x240007c8

08004d5c <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004d6a:	e002      	b.n	8004d72 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004d6c:	2001      	movs	r0, #1
 8004d6e:	f000 fa77 	bl	8005260 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004d72:	4b39      	ldr	r3, [pc, #228]	; (8004e58 <W25qxx_WritePage+0xfc>)
 8004d74:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d0f7      	beq.n	8004d6c <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8004d7c:	4b36      	ldr	r3, [pc, #216]	; (8004e58 <W25qxx_WritePage+0xfc>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4413      	add	r3, r2
 8004d8a:	4a33      	ldr	r2, [pc, #204]	; (8004e58 <W25qxx_WritePage+0xfc>)
 8004d8c:	8952      	ldrh	r2, [r2, #10]
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d802      	bhi.n	8004d98 <W25qxx_WritePage+0x3c>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d105      	bne.n	8004da4 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004d98:	4b2f      	ldr	r3, [pc, #188]	; (8004e58 <W25qxx_WritePage+0xfc>)
 8004d9a:	895b      	ldrh	r3, [r3, #10]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	4413      	add	r3, r2
 8004daa:	4a2b      	ldr	r2, [pc, #172]	; (8004e58 <W25qxx_WritePage+0xfc>)
 8004dac:	8952      	ldrh	r2, [r2, #10]
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d905      	bls.n	8004dbe <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004db2:	4b29      	ldr	r3, [pc, #164]	; (8004e58 <W25qxx_WritePage+0xfc>)
 8004db4:	895b      	ldrh	r3, [r3, #10]
 8004db6:	461a      	mov	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8004dbe:	f7ff fe63 	bl	8004a88 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8004dc2:	f7ff fe05 	bl	80049d0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2140      	movs	r1, #64	; 0x40
 8004dca:	4824      	ldr	r0, [pc, #144]	; (8004e5c <W25qxx_WritePage+0x100>)
 8004dcc:	f003 fb8c 	bl	80084e8 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004dd0:	4b21      	ldr	r3, [pc, #132]	; (8004e58 <W25qxx_WritePage+0xfc>)
 8004dd2:	895b      	ldrh	r3, [r3, #10]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	fb03 f302 	mul.w	r3, r3, r2
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	4413      	add	r3, r2
 8004de0:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8004de2:	4b1d      	ldr	r3, [pc, #116]	; (8004e58 <W25qxx_WritePage+0xfc>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d909      	bls.n	8004dfe <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8004dea:	2012      	movs	r0, #18
 8004dec:	f7ff fd6e 	bl	80048cc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	0e1b      	lsrs	r3, r3, #24
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff fd68 	bl	80048cc <W25qxx_Spi>
 8004dfc:	e002      	b.n	8004e04 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8004dfe:	2002      	movs	r0, #2
 8004e00:	f7ff fd64 	bl	80048cc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	0c1b      	lsrs	r3, r3, #16
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff fd5e 	bl	80048cc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	0a1b      	lsrs	r3, r3, #8
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff fd58 	bl	80048cc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fd53 	bl	80048cc <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	2364      	movs	r3, #100	; 0x64
 8004e2c:	68f9      	ldr	r1, [r7, #12]
 8004e2e:	480c      	ldr	r0, [pc, #48]	; (8004e60 <W25qxx_WritePage+0x104>)
 8004e30:	f008 fa02 	bl	800d238 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004e34:	2201      	movs	r2, #1
 8004e36:	2140      	movs	r1, #64	; 0x40
 8004e38:	4808      	ldr	r0, [pc, #32]	; (8004e5c <W25qxx_WritePage+0x100>)
 8004e3a:	f003 fb55 	bl	80084e8 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004e3e:	f7ff fe23 	bl	8004a88 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8004e42:	2001      	movs	r0, #1
 8004e44:	f000 fa0c 	bl	8005260 <HAL_Delay>
	w25qxx.Lock = 0;
 8004e48:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <W25qxx_WritePage+0xfc>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004e50:	bf00      	nop
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	240007c8 	.word	0x240007c8
 8004e5c:	58020400 	.word	0x58020400
 8004e60:	24000630 	.word	0x24000630

08004e64 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004e72:	4b2c      	ldr	r3, [pc, #176]	; (8004f24 <W25qxx_WriteSector+0xc0>)
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d802      	bhi.n	8004e82 <W25qxx_WriteSector+0x1e>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d102      	bne.n	8004e88 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004e82:	4b28      	ldr	r3, [pc, #160]	; (8004f24 <W25qxx_WriteSector+0xc0>)
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004e88:	4b26      	ldr	r3, [pc, #152]	; (8004f24 <W25qxx_WriteSector+0xc0>)
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d243      	bcs.n	8004f1a <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	441a      	add	r2, r3
 8004e98:	4b22      	ldr	r3, [pc, #136]	; (8004f24 <W25qxx_WriteSector+0xc0>)
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d905      	bls.n	8004eac <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004ea0:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <W25qxx_WriteSector+0xc0>)
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	e001      	b.n	8004eb0 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004eb0:	68b8      	ldr	r0, [r7, #8]
 8004eb2:	f7ff ff3d 	bl	8004d30 <W25qxx_SectorToPage>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	4b1a      	ldr	r3, [pc, #104]	; (8004f24 <W25qxx_WriteSector+0xc0>)
 8004eba:	895b      	ldrh	r3, [r3, #10]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ec4:	4413      	add	r3, r2
 8004ec6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004ec8:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <W25qxx_WriteSector+0xc0>)
 8004eca:	895b      	ldrh	r3, [r3, #10]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ed4:	fb02 f201 	mul.w	r2, r2, r1
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	69f9      	ldr	r1, [r7, #28]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f7ff ff3a 	bl	8004d5c <W25qxx_WritePage>
		StartPage++;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	3301      	adds	r3, #1
 8004eec:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8004eee:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <W25qxx_WriteSector+0xc0>)
 8004ef0:	895b      	ldrh	r3, [r3, #10]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	1a9a      	subs	r2, r3, r2
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	4413      	add	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <W25qxx_WriteSector+0xc0>)
 8004f00:	895b      	ldrh	r3, [r3, #10]
 8004f02:	461a      	mov	r2, r3
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	dce1      	bgt.n	8004edc <W25qxx_WriteSector+0x78>
 8004f18:	e000      	b.n	8004f1c <W25qxx_WriteSector+0xb8>
		return;
 8004f1a:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8004f1c:	3720      	adds	r7, #32
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	240007c8 	.word	0x240007c8

08004f28 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004f36:	e002      	b.n	8004f3e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004f38:	2001      	movs	r0, #1
 8004f3a:	f000 f991 	bl	8005260 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004f3e:	4b36      	ldr	r3, [pc, #216]	; (8005018 <W25qxx_ReadPage+0xf0>)
 8004f40:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d0f7      	beq.n	8004f38 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004f48:	4b33      	ldr	r3, [pc, #204]	; (8005018 <W25qxx_ReadPage+0xf0>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004f50:	4b31      	ldr	r3, [pc, #196]	; (8005018 <W25qxx_ReadPage+0xf0>)
 8004f52:	895b      	ldrh	r3, [r3, #10]
 8004f54:	461a      	mov	r2, r3
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d802      	bhi.n	8004f62 <W25qxx_ReadPage+0x3a>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d102      	bne.n	8004f68 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8004f62:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <W25qxx_ReadPage+0xf0>)
 8004f64:	895b      	ldrh	r3, [r3, #10]
 8004f66:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	4a2a      	ldr	r2, [pc, #168]	; (8005018 <W25qxx_ReadPage+0xf0>)
 8004f70:	8952      	ldrh	r2, [r2, #10]
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d905      	bls.n	8004f82 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004f76:	4b28      	ldr	r3, [pc, #160]	; (8005018 <W25qxx_ReadPage+0xf0>)
 8004f78:	895b      	ldrh	r3, [r3, #10]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004f82:	4b25      	ldr	r3, [pc, #148]	; (8005018 <W25qxx_ReadPage+0xf0>)
 8004f84:	895b      	ldrh	r3, [r3, #10]
 8004f86:	461a      	mov	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	fb03 f302 	mul.w	r3, r3, r2
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	4413      	add	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004f94:	2200      	movs	r2, #0
 8004f96:	2140      	movs	r1, #64	; 0x40
 8004f98:	4820      	ldr	r0, [pc, #128]	; (800501c <W25qxx_ReadPage+0xf4>)
 8004f9a:	f003 faa5 	bl	80084e8 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004f9e:	4b1e      	ldr	r3, [pc, #120]	; (8005018 <W25qxx_ReadPage+0xf0>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d909      	bls.n	8004fba <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8004fa6:	200c      	movs	r0, #12
 8004fa8:	f7ff fc90 	bl	80048cc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	0e1b      	lsrs	r3, r3, #24
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff fc8a 	bl	80048cc <W25qxx_Spi>
 8004fb8:	e002      	b.n	8004fc0 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8004fba:	200b      	movs	r0, #11
 8004fbc:	f7ff fc86 	bl	80048cc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	0c1b      	lsrs	r3, r3, #16
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fc80 	bl	80048cc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff fc7a 	bl	80048cc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff fc75 	bl	80048cc <W25qxx_Spi>
	W25qxx_Spi(0);
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	f7ff fc72 	bl	80048cc <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	2364      	movs	r3, #100	; 0x64
 8004fee:	68f9      	ldr	r1, [r7, #12]
 8004ff0:	480b      	ldr	r0, [pc, #44]	; (8005020 <W25qxx_ReadPage+0xf8>)
 8004ff2:	f008 fb13 	bl	800d61c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	2140      	movs	r1, #64	; 0x40
 8004ffa:	4808      	ldr	r0, [pc, #32]	; (800501c <W25qxx_ReadPage+0xf4>)
 8004ffc:	f003 fa74 	bl	80084e8 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8005000:	2001      	movs	r0, #1
 8005002:	f000 f92d 	bl	8005260 <HAL_Delay>
	w25qxx.Lock = 0;
 8005006:	4b04      	ldr	r3, [pc, #16]	; (8005018 <W25qxx_ReadPage+0xf0>)
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800500e:	bf00      	nop
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	240007c8 	.word	0x240007c8
 800501c:	58020400 	.word	0x58020400
 8005020:	24000630 	.word	0x24000630

08005024 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8005032:	4b2c      	ldr	r3, [pc, #176]	; (80050e4 <W25qxx_ReadSector+0xc0>)
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d802      	bhi.n	8005042 <W25qxx_ReadSector+0x1e>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d102      	bne.n	8005048 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8005042:	4b28      	ldr	r3, [pc, #160]	; (80050e4 <W25qxx_ReadSector+0xc0>)
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8005048:	4b26      	ldr	r3, [pc, #152]	; (80050e4 <W25qxx_ReadSector+0xc0>)
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	429a      	cmp	r2, r3
 8005050:	d243      	bcs.n	80050da <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	441a      	add	r2, r3
 8005058:	4b22      	ldr	r3, [pc, #136]	; (80050e4 <W25qxx_ReadSector+0xc0>)
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	429a      	cmp	r2, r3
 800505e:	d905      	bls.n	800506c <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8005060:	4b20      	ldr	r3, [pc, #128]	; (80050e4 <W25qxx_ReadSector+0xc0>)
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	e001      	b.n	8005070 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8005070:	68b8      	ldr	r0, [r7, #8]
 8005072:	f7ff fe5d 	bl	8004d30 <W25qxx_SectorToPage>
 8005076:	4602      	mov	r2, r0
 8005078:	4b1a      	ldr	r3, [pc, #104]	; (80050e4 <W25qxx_ReadSector+0xc0>)
 800507a:	895b      	ldrh	r3, [r3, #10]
 800507c:	4619      	mov	r1, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	fbb3 f3f1 	udiv	r3, r3, r1
 8005084:	4413      	add	r3, r2
 8005086:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8005088:	4b16      	ldr	r3, [pc, #88]	; (80050e4 <W25qxx_ReadSector+0xc0>)
 800508a:	895b      	ldrh	r3, [r3, #10]
 800508c:	461a      	mov	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	fbb3 f1f2 	udiv	r1, r3, r2
 8005094:	fb02 f201 	mul.w	r2, r2, r1
 8005098:	1a9b      	subs	r3, r3, r2
 800509a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	69f9      	ldr	r1, [r7, #28]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f7ff ff40 	bl	8004f28 <W25qxx_ReadPage>
		StartPage++;
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	3301      	adds	r3, #1
 80050ac:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80050ae:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <W25qxx_ReadSector+0xc0>)
 80050b0:	895b      	ldrh	r3, [r3, #10]
 80050b2:	461a      	mov	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	1a9a      	subs	r2, r3, r2
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	4413      	add	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80050be:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <W25qxx_ReadSector+0xc0>)
 80050c0:	895b      	ldrh	r3, [r3, #10]
 80050c2:	461a      	mov	r2, r3
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	dce1      	bgt.n	800509c <W25qxx_ReadSector+0x78>
 80050d8:	e000      	b.n	80050dc <W25qxx_ReadSector+0xb8>
		return;
 80050da:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80050dc:	3720      	adds	r7, #32
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	240007c8 	.word	0x240007c8

080050e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80050e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005120 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80050ec:	f7ff fb62 	bl	80047b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050f0:	480c      	ldr	r0, [pc, #48]	; (8005124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80050f2:	490d      	ldr	r1, [pc, #52]	; (8005128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80050f4:	4a0d      	ldr	r2, [pc, #52]	; (800512c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80050f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050f8:	e002      	b.n	8005100 <LoopCopyDataInit>

080050fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050fe:	3304      	adds	r3, #4

08005100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005104:	d3f9      	bcc.n	80050fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005106:	4a0a      	ldr	r2, [pc, #40]	; (8005130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005108:	4c0a      	ldr	r4, [pc, #40]	; (8005134 <LoopFillZerobss+0x22>)
  movs r3, #0
 800510a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800510c:	e001      	b.n	8005112 <LoopFillZerobss>

0800510e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800510e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005110:	3204      	adds	r2, #4

08005112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005114:	d3fb      	bcc.n	800510e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005116:	f00c f8a1 	bl	801125c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800511a:	f7fd fd6f 	bl	8002bfc <main>
  bx  lr
 800511e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005120:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005124:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005128:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 800512c:	08014b30 	.word	0x08014b30
  ldr r2, =_sbss
 8005130:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8005134:	24000804 	.word	0x24000804

08005138 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005138:	e7fe      	b.n	8005138 <ADC3_IRQHandler>
	...

0800513c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005142:	2003      	movs	r0, #3
 8005144:	f000 f98c 	bl	8005460 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005148:	f006 fa3c 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800514c:	4602      	mov	r2, r0
 800514e:	4b15      	ldr	r3, [pc, #84]	; (80051a4 <HAL_Init+0x68>)
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	0a1b      	lsrs	r3, r3, #8
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	4913      	ldr	r1, [pc, #76]	; (80051a8 <HAL_Init+0x6c>)
 800515a:	5ccb      	ldrb	r3, [r1, r3]
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	fa22 f303 	lsr.w	r3, r2, r3
 8005164:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005166:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <HAL_Init+0x68>)
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	4a0e      	ldr	r2, [pc, #56]	; (80051a8 <HAL_Init+0x6c>)
 8005170:	5cd3      	ldrb	r3, [r2, r3]
 8005172:	f003 031f 	and.w	r3, r3, #31
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
 800517c:	4a0b      	ldr	r2, [pc, #44]	; (80051ac <HAL_Init+0x70>)
 800517e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005180:	4a0b      	ldr	r2, [pc, #44]	; (80051b0 <HAL_Init+0x74>)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005186:	200f      	movs	r0, #15
 8005188:	f000 f814 	bl	80051b4 <HAL_InitTick>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e002      	b.n	800519c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005196:	f7fe fd1f 	bl	8003bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	58024400 	.word	0x58024400
 80051a8:	08014654 	.word	0x08014654
 80051ac:	24000018 	.word	0x24000018
 80051b0:	24000014 	.word	0x24000014

080051b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80051bc:	4b15      	ldr	r3, [pc, #84]	; (8005214 <HAL_InitTick+0x60>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e021      	b.n	800520c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80051c8:	4b13      	ldr	r3, [pc, #76]	; (8005218 <HAL_InitTick+0x64>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	4b11      	ldr	r3, [pc, #68]	; (8005214 <HAL_InitTick+0x60>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	4619      	mov	r1, r3
 80051d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80051da:	fbb2 f3f3 	udiv	r3, r2, r3
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 f971 	bl	80054c6 <HAL_SYSTICK_Config>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e00e      	b.n	800520c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b0f      	cmp	r3, #15
 80051f2:	d80a      	bhi.n	800520a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051f4:	2200      	movs	r2, #0
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	f04f 30ff 	mov.w	r0, #4294967295
 80051fc:	f000 f93b 	bl	8005476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005200:	4a06      	ldr	r2, [pc, #24]	; (800521c <HAL_InitTick+0x68>)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	e000      	b.n	800520c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	24000020 	.word	0x24000020
 8005218:	24000014 	.word	0x24000014
 800521c:	2400001c 	.word	0x2400001c

08005220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005224:	4b06      	ldr	r3, [pc, #24]	; (8005240 <HAL_IncTick+0x20>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	4b06      	ldr	r3, [pc, #24]	; (8005244 <HAL_IncTick+0x24>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4413      	add	r3, r2
 8005230:	4a04      	ldr	r2, [pc, #16]	; (8005244 <HAL_IncTick+0x24>)
 8005232:	6013      	str	r3, [r2, #0]
}
 8005234:	bf00      	nop
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	24000020 	.word	0x24000020
 8005244:	240007f0 	.word	0x240007f0

08005248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  return uwTick;
 800524c:	4b03      	ldr	r3, [pc, #12]	; (800525c <HAL_GetTick+0x14>)
 800524e:	681b      	ldr	r3, [r3, #0]
}
 8005250:	4618      	mov	r0, r3
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	240007f0 	.word	0x240007f0

08005260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005268:	f7ff ffee 	bl	8005248 <HAL_GetTick>
 800526c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d005      	beq.n	8005286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800527a:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <HAL_Delay+0x44>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005286:	bf00      	nop
 8005288:	f7ff ffde 	bl	8005248 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	429a      	cmp	r2, r3
 8005296:	d8f7      	bhi.n	8005288 <HAL_Delay+0x28>
  {
  }
}
 8005298:	bf00      	nop
 800529a:	bf00      	nop
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	24000020 	.word	0x24000020

080052a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80052ac:	4b03      	ldr	r3, [pc, #12]	; (80052bc <HAL_GetREVID+0x14>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	0c1b      	lsrs	r3, r3, #16
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	5c001000 	.word	0x5c001000

080052c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052d0:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <__NVIC_SetPriorityGrouping+0x40>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052dc:	4013      	ands	r3, r2
 80052de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80052e8:	4b06      	ldr	r3, [pc, #24]	; (8005304 <__NVIC_SetPriorityGrouping+0x44>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052ee:	4a04      	ldr	r2, [pc, #16]	; (8005300 <__NVIC_SetPriorityGrouping+0x40>)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	60d3      	str	r3, [r2, #12]
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	e000ed00 	.word	0xe000ed00
 8005304:	05fa0000 	.word	0x05fa0000

08005308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800530c:	4b04      	ldr	r3, [pc, #16]	; (8005320 <__NVIC_GetPriorityGrouping+0x18>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	0a1b      	lsrs	r3, r3, #8
 8005312:	f003 0307 	and.w	r3, r3, #7
}
 8005316:	4618      	mov	r0, r3
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	e000ed00 	.word	0xe000ed00

08005324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	4603      	mov	r3, r0
 800532c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800532e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005332:	2b00      	cmp	r3, #0
 8005334:	db0b      	blt.n	800534e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	f003 021f 	and.w	r2, r3, #31
 800533c:	4907      	ldr	r1, [pc, #28]	; (800535c <__NVIC_EnableIRQ+0x38>)
 800533e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	2001      	movs	r0, #1
 8005346:	fa00 f202 	lsl.w	r2, r0, r2
 800534a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	e000e100 	.word	0xe000e100

08005360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	6039      	str	r1, [r7, #0]
 800536a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800536c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005370:	2b00      	cmp	r3, #0
 8005372:	db0a      	blt.n	800538a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	b2da      	uxtb	r2, r3
 8005378:	490c      	ldr	r1, [pc, #48]	; (80053ac <__NVIC_SetPriority+0x4c>)
 800537a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800537e:	0112      	lsls	r2, r2, #4
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	440b      	add	r3, r1
 8005384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005388:	e00a      	b.n	80053a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	b2da      	uxtb	r2, r3
 800538e:	4908      	ldr	r1, [pc, #32]	; (80053b0 <__NVIC_SetPriority+0x50>)
 8005390:	88fb      	ldrh	r3, [r7, #6]
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	3b04      	subs	r3, #4
 8005398:	0112      	lsls	r2, r2, #4
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	440b      	add	r3, r1
 800539e:	761a      	strb	r2, [r3, #24]
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	e000e100 	.word	0xe000e100
 80053b0:	e000ed00 	.word	0xe000ed00

080053b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b089      	sub	sp, #36	; 0x24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f1c3 0307 	rsb	r3, r3, #7
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	bf28      	it	cs
 80053d2:	2304      	movcs	r3, #4
 80053d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	3304      	adds	r3, #4
 80053da:	2b06      	cmp	r3, #6
 80053dc:	d902      	bls.n	80053e4 <NVIC_EncodePriority+0x30>
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	3b03      	subs	r3, #3
 80053e2:	e000      	b.n	80053e6 <NVIC_EncodePriority+0x32>
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053e8:	f04f 32ff 	mov.w	r2, #4294967295
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43da      	mvns	r2, r3
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	401a      	ands	r2, r3
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	fa01 f303 	lsl.w	r3, r1, r3
 8005406:	43d9      	mvns	r1, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800540c:	4313      	orrs	r3, r2
         );
}
 800540e:	4618      	mov	r0, r3
 8005410:	3724      	adds	r7, #36	; 0x24
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3b01      	subs	r3, #1
 8005428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800542c:	d301      	bcc.n	8005432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800542e:	2301      	movs	r3, #1
 8005430:	e00f      	b.n	8005452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005432:	4a0a      	ldr	r2, [pc, #40]	; (800545c <SysTick_Config+0x40>)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3b01      	subs	r3, #1
 8005438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800543a:	210f      	movs	r1, #15
 800543c:	f04f 30ff 	mov.w	r0, #4294967295
 8005440:	f7ff ff8e 	bl	8005360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005444:	4b05      	ldr	r3, [pc, #20]	; (800545c <SysTick_Config+0x40>)
 8005446:	2200      	movs	r2, #0
 8005448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800544a:	4b04      	ldr	r3, [pc, #16]	; (800545c <SysTick_Config+0x40>)
 800544c:	2207      	movs	r2, #7
 800544e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	e000e010 	.word	0xe000e010

08005460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff ff29 	bl	80052c0 <__NVIC_SetPriorityGrouping>
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b086      	sub	sp, #24
 800547a:	af00      	add	r7, sp, #0
 800547c:	4603      	mov	r3, r0
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
 8005482:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005484:	f7ff ff40 	bl	8005308 <__NVIC_GetPriorityGrouping>
 8005488:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	6978      	ldr	r0, [r7, #20]
 8005490:	f7ff ff90 	bl	80053b4 <NVIC_EncodePriority>
 8005494:	4602      	mov	r2, r0
 8005496:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800549a:	4611      	mov	r1, r2
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff ff5f 	bl	8005360 <__NVIC_SetPriority>
}
 80054a2:	bf00      	nop
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	4603      	mov	r3, r0
 80054b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff ff33 	bl	8005324 <__NVIC_EnableIRQ>
}
 80054be:	bf00      	nop
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff ffa4 	bl	800541c <SysTick_Config>
 80054d4:	4603      	mov	r3, r0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80054e8:	f7ff feae 	bl	8005248 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e316      	b.n	8005b26 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a66      	ldr	r2, [pc, #408]	; (8005698 <HAL_DMA_Init+0x1b8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d04a      	beq.n	8005598 <HAL_DMA_Init+0xb8>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a65      	ldr	r2, [pc, #404]	; (800569c <HAL_DMA_Init+0x1bc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d045      	beq.n	8005598 <HAL_DMA_Init+0xb8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a63      	ldr	r2, [pc, #396]	; (80056a0 <HAL_DMA_Init+0x1c0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d040      	beq.n	8005598 <HAL_DMA_Init+0xb8>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a62      	ldr	r2, [pc, #392]	; (80056a4 <HAL_DMA_Init+0x1c4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d03b      	beq.n	8005598 <HAL_DMA_Init+0xb8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a60      	ldr	r2, [pc, #384]	; (80056a8 <HAL_DMA_Init+0x1c8>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d036      	beq.n	8005598 <HAL_DMA_Init+0xb8>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a5f      	ldr	r2, [pc, #380]	; (80056ac <HAL_DMA_Init+0x1cc>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d031      	beq.n	8005598 <HAL_DMA_Init+0xb8>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a5d      	ldr	r2, [pc, #372]	; (80056b0 <HAL_DMA_Init+0x1d0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d02c      	beq.n	8005598 <HAL_DMA_Init+0xb8>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a5c      	ldr	r2, [pc, #368]	; (80056b4 <HAL_DMA_Init+0x1d4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d027      	beq.n	8005598 <HAL_DMA_Init+0xb8>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a5a      	ldr	r2, [pc, #360]	; (80056b8 <HAL_DMA_Init+0x1d8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d022      	beq.n	8005598 <HAL_DMA_Init+0xb8>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a59      	ldr	r2, [pc, #356]	; (80056bc <HAL_DMA_Init+0x1dc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d01d      	beq.n	8005598 <HAL_DMA_Init+0xb8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a57      	ldr	r2, [pc, #348]	; (80056c0 <HAL_DMA_Init+0x1e0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d018      	beq.n	8005598 <HAL_DMA_Init+0xb8>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a56      	ldr	r2, [pc, #344]	; (80056c4 <HAL_DMA_Init+0x1e4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d013      	beq.n	8005598 <HAL_DMA_Init+0xb8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a54      	ldr	r2, [pc, #336]	; (80056c8 <HAL_DMA_Init+0x1e8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00e      	beq.n	8005598 <HAL_DMA_Init+0xb8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a53      	ldr	r2, [pc, #332]	; (80056cc <HAL_DMA_Init+0x1ec>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d009      	beq.n	8005598 <HAL_DMA_Init+0xb8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a51      	ldr	r2, [pc, #324]	; (80056d0 <HAL_DMA_Init+0x1f0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d004      	beq.n	8005598 <HAL_DMA_Init+0xb8>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a50      	ldr	r2, [pc, #320]	; (80056d4 <HAL_DMA_Init+0x1f4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d101      	bne.n	800559c <HAL_DMA_Init+0xbc>
 8005598:	2301      	movs	r3, #1
 800559a:	e000      	b.n	800559e <HAL_DMA_Init+0xbe>
 800559c:	2300      	movs	r3, #0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 813b 	beq.w	800581a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a37      	ldr	r2, [pc, #220]	; (8005698 <HAL_DMA_Init+0x1b8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d04a      	beq.n	8005654 <HAL_DMA_Init+0x174>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a36      	ldr	r2, [pc, #216]	; (800569c <HAL_DMA_Init+0x1bc>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d045      	beq.n	8005654 <HAL_DMA_Init+0x174>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a34      	ldr	r2, [pc, #208]	; (80056a0 <HAL_DMA_Init+0x1c0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d040      	beq.n	8005654 <HAL_DMA_Init+0x174>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a33      	ldr	r2, [pc, #204]	; (80056a4 <HAL_DMA_Init+0x1c4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d03b      	beq.n	8005654 <HAL_DMA_Init+0x174>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a31      	ldr	r2, [pc, #196]	; (80056a8 <HAL_DMA_Init+0x1c8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d036      	beq.n	8005654 <HAL_DMA_Init+0x174>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a30      	ldr	r2, [pc, #192]	; (80056ac <HAL_DMA_Init+0x1cc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d031      	beq.n	8005654 <HAL_DMA_Init+0x174>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a2e      	ldr	r2, [pc, #184]	; (80056b0 <HAL_DMA_Init+0x1d0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d02c      	beq.n	8005654 <HAL_DMA_Init+0x174>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a2d      	ldr	r2, [pc, #180]	; (80056b4 <HAL_DMA_Init+0x1d4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d027      	beq.n	8005654 <HAL_DMA_Init+0x174>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a2b      	ldr	r2, [pc, #172]	; (80056b8 <HAL_DMA_Init+0x1d8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d022      	beq.n	8005654 <HAL_DMA_Init+0x174>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a2a      	ldr	r2, [pc, #168]	; (80056bc <HAL_DMA_Init+0x1dc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d01d      	beq.n	8005654 <HAL_DMA_Init+0x174>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a28      	ldr	r2, [pc, #160]	; (80056c0 <HAL_DMA_Init+0x1e0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d018      	beq.n	8005654 <HAL_DMA_Init+0x174>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a27      	ldr	r2, [pc, #156]	; (80056c4 <HAL_DMA_Init+0x1e4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <HAL_DMA_Init+0x174>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a25      	ldr	r2, [pc, #148]	; (80056c8 <HAL_DMA_Init+0x1e8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00e      	beq.n	8005654 <HAL_DMA_Init+0x174>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a24      	ldr	r2, [pc, #144]	; (80056cc <HAL_DMA_Init+0x1ec>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d009      	beq.n	8005654 <HAL_DMA_Init+0x174>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a22      	ldr	r2, [pc, #136]	; (80056d0 <HAL_DMA_Init+0x1f0>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <HAL_DMA_Init+0x174>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a21      	ldr	r2, [pc, #132]	; (80056d4 <HAL_DMA_Init+0x1f4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d108      	bne.n	8005666 <HAL_DMA_Init+0x186>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0201 	bic.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	e007      	b.n	8005676 <HAL_DMA_Init+0x196>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0201 	bic.w	r2, r2, #1
 8005674:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005676:	e02f      	b.n	80056d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005678:	f7ff fde6 	bl	8005248 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b05      	cmp	r3, #5
 8005684:	d928      	bls.n	80056d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2203      	movs	r2, #3
 8005690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e246      	b.n	8005b26 <HAL_DMA_Init+0x646>
 8005698:	40020010 	.word	0x40020010
 800569c:	40020028 	.word	0x40020028
 80056a0:	40020040 	.word	0x40020040
 80056a4:	40020058 	.word	0x40020058
 80056a8:	40020070 	.word	0x40020070
 80056ac:	40020088 	.word	0x40020088
 80056b0:	400200a0 	.word	0x400200a0
 80056b4:	400200b8 	.word	0x400200b8
 80056b8:	40020410 	.word	0x40020410
 80056bc:	40020428 	.word	0x40020428
 80056c0:	40020440 	.word	0x40020440
 80056c4:	40020458 	.word	0x40020458
 80056c8:	40020470 	.word	0x40020470
 80056cc:	40020488 	.word	0x40020488
 80056d0:	400204a0 	.word	0x400204a0
 80056d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1c8      	bne.n	8005678 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4b83      	ldr	r3, [pc, #524]	; (8005900 <HAL_DMA_Init+0x420>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80056fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800570a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005716:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	2b04      	cmp	r3, #4
 800572a:	d107      	bne.n	800573c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	4313      	orrs	r3, r2
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	4313      	orrs	r3, r2
 800573a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800573c:	4b71      	ldr	r3, [pc, #452]	; (8005904 <HAL_DMA_Init+0x424>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4b71      	ldr	r3, [pc, #452]	; (8005908 <HAL_DMA_Init+0x428>)
 8005742:	4013      	ands	r3, r2
 8005744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005748:	d328      	bcc.n	800579c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b28      	cmp	r3, #40	; 0x28
 8005750:	d903      	bls.n	800575a <HAL_DMA_Init+0x27a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b2e      	cmp	r3, #46	; 0x2e
 8005758:	d917      	bls.n	800578a <HAL_DMA_Init+0x2aa>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b3e      	cmp	r3, #62	; 0x3e
 8005760:	d903      	bls.n	800576a <HAL_DMA_Init+0x28a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b42      	cmp	r3, #66	; 0x42
 8005768:	d90f      	bls.n	800578a <HAL_DMA_Init+0x2aa>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b46      	cmp	r3, #70	; 0x46
 8005770:	d903      	bls.n	800577a <HAL_DMA_Init+0x29a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2b48      	cmp	r3, #72	; 0x48
 8005778:	d907      	bls.n	800578a <HAL_DMA_Init+0x2aa>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b4e      	cmp	r3, #78	; 0x4e
 8005780:	d905      	bls.n	800578e <HAL_DMA_Init+0x2ae>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b52      	cmp	r3, #82	; 0x52
 8005788:	d801      	bhi.n	800578e <HAL_DMA_Init+0x2ae>
 800578a:	2301      	movs	r3, #1
 800578c:	e000      	b.n	8005790 <HAL_DMA_Init+0x2b0>
 800578e:	2300      	movs	r3, #0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800579a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f023 0307 	bic.w	r3, r3, #7
 80057b2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	d117      	bne.n	80057f6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00e      	beq.n	80057f6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f002 fb4b 	bl	8007e74 <DMA_CheckFifoParam>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d008      	beq.n	80057f6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2240      	movs	r2, #64	; 0x40
 80057e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e197      	b.n	8005b26 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f002 fa86 	bl	8007d10 <DMA_CalcBaseAndBitshift>
 8005804:	4603      	mov	r3, r0
 8005806:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	223f      	movs	r2, #63	; 0x3f
 8005812:	409a      	lsls	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	609a      	str	r2, [r3, #8]
 8005818:	e0cd      	b.n	80059b6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a3b      	ldr	r2, [pc, #236]	; (800590c <HAL_DMA_Init+0x42c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d022      	beq.n	800586a <HAL_DMA_Init+0x38a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a39      	ldr	r2, [pc, #228]	; (8005910 <HAL_DMA_Init+0x430>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d01d      	beq.n	800586a <HAL_DMA_Init+0x38a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a38      	ldr	r2, [pc, #224]	; (8005914 <HAL_DMA_Init+0x434>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d018      	beq.n	800586a <HAL_DMA_Init+0x38a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a36      	ldr	r2, [pc, #216]	; (8005918 <HAL_DMA_Init+0x438>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d013      	beq.n	800586a <HAL_DMA_Init+0x38a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a35      	ldr	r2, [pc, #212]	; (800591c <HAL_DMA_Init+0x43c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00e      	beq.n	800586a <HAL_DMA_Init+0x38a>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a33      	ldr	r2, [pc, #204]	; (8005920 <HAL_DMA_Init+0x440>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d009      	beq.n	800586a <HAL_DMA_Init+0x38a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a32      	ldr	r2, [pc, #200]	; (8005924 <HAL_DMA_Init+0x444>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d004      	beq.n	800586a <HAL_DMA_Init+0x38a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a30      	ldr	r2, [pc, #192]	; (8005928 <HAL_DMA_Init+0x448>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d101      	bne.n	800586e <HAL_DMA_Init+0x38e>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <HAL_DMA_Init+0x390>
 800586e:	2300      	movs	r3, #0
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8097 	beq.w	80059a4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a24      	ldr	r2, [pc, #144]	; (800590c <HAL_DMA_Init+0x42c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d021      	beq.n	80058c4 <HAL_DMA_Init+0x3e4>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a22      	ldr	r2, [pc, #136]	; (8005910 <HAL_DMA_Init+0x430>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d01c      	beq.n	80058c4 <HAL_DMA_Init+0x3e4>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a21      	ldr	r2, [pc, #132]	; (8005914 <HAL_DMA_Init+0x434>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d017      	beq.n	80058c4 <HAL_DMA_Init+0x3e4>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1f      	ldr	r2, [pc, #124]	; (8005918 <HAL_DMA_Init+0x438>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d012      	beq.n	80058c4 <HAL_DMA_Init+0x3e4>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1e      	ldr	r2, [pc, #120]	; (800591c <HAL_DMA_Init+0x43c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00d      	beq.n	80058c4 <HAL_DMA_Init+0x3e4>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1c      	ldr	r2, [pc, #112]	; (8005920 <HAL_DMA_Init+0x440>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d008      	beq.n	80058c4 <HAL_DMA_Init+0x3e4>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1b      	ldr	r2, [pc, #108]	; (8005924 <HAL_DMA_Init+0x444>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d003      	beq.n	80058c4 <HAL_DMA_Init+0x3e4>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a19      	ldr	r2, [pc, #100]	; (8005928 <HAL_DMA_Init+0x448>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2202      	movs	r2, #2
 80058d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4b12      	ldr	r3, [pc, #72]	; (800592c <HAL_DMA_Init+0x44c>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b40      	cmp	r3, #64	; 0x40
 80058ec:	d020      	beq.n	8005930 <HAL_DMA_Init+0x450>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2b80      	cmp	r3, #128	; 0x80
 80058f4:	d102      	bne.n	80058fc <HAL_DMA_Init+0x41c>
 80058f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058fa:	e01a      	b.n	8005932 <HAL_DMA_Init+0x452>
 80058fc:	2300      	movs	r3, #0
 80058fe:	e018      	b.n	8005932 <HAL_DMA_Init+0x452>
 8005900:	fe10803f 	.word	0xfe10803f
 8005904:	5c001000 	.word	0x5c001000
 8005908:	ffff0000 	.word	0xffff0000
 800590c:	58025408 	.word	0x58025408
 8005910:	5802541c 	.word	0x5802541c
 8005914:	58025430 	.word	0x58025430
 8005918:	58025444 	.word	0x58025444
 800591c:	58025458 	.word	0x58025458
 8005920:	5802546c 	.word	0x5802546c
 8005924:	58025480 	.word	0x58025480
 8005928:	58025494 	.word	0x58025494
 800592c:	fffe000f 	.word	0xfffe000f
 8005930:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	68d2      	ldr	r2, [r2, #12]
 8005936:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005938:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005940:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005948:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005950:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005958:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005960:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	461a      	mov	r2, r3
 8005976:	4b6e      	ldr	r3, [pc, #440]	; (8005b30 <HAL_DMA_Init+0x650>)
 8005978:	4413      	add	r3, r2
 800597a:	4a6e      	ldr	r2, [pc, #440]	; (8005b34 <HAL_DMA_Init+0x654>)
 800597c:	fba2 2303 	umull	r2, r3, r2, r3
 8005980:	091b      	lsrs	r3, r3, #4
 8005982:	009a      	lsls	r2, r3, #2
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f002 f9c1 	bl	8007d10 <DMA_CalcBaseAndBitshift>
 800598e:	4603      	mov	r3, r0
 8005990:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005996:	f003 031f 	and.w	r3, r3, #31
 800599a:	2201      	movs	r2, #1
 800599c:	409a      	lsls	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	605a      	str	r2, [r3, #4]
 80059a2:	e008      	b.n	80059b6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2240      	movs	r2, #64	; 0x40
 80059a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2203      	movs	r2, #3
 80059ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e0b7      	b.n	8005b26 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a5f      	ldr	r2, [pc, #380]	; (8005b38 <HAL_DMA_Init+0x658>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d072      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a5d      	ldr	r2, [pc, #372]	; (8005b3c <HAL_DMA_Init+0x65c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d06d      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a5c      	ldr	r2, [pc, #368]	; (8005b40 <HAL_DMA_Init+0x660>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d068      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a5a      	ldr	r2, [pc, #360]	; (8005b44 <HAL_DMA_Init+0x664>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d063      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a59      	ldr	r2, [pc, #356]	; (8005b48 <HAL_DMA_Init+0x668>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d05e      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a57      	ldr	r2, [pc, #348]	; (8005b4c <HAL_DMA_Init+0x66c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d059      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a56      	ldr	r2, [pc, #344]	; (8005b50 <HAL_DMA_Init+0x670>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d054      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a54      	ldr	r2, [pc, #336]	; (8005b54 <HAL_DMA_Init+0x674>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d04f      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a53      	ldr	r2, [pc, #332]	; (8005b58 <HAL_DMA_Init+0x678>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d04a      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a51      	ldr	r2, [pc, #324]	; (8005b5c <HAL_DMA_Init+0x67c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d045      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a50      	ldr	r2, [pc, #320]	; (8005b60 <HAL_DMA_Init+0x680>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d040      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a4e      	ldr	r2, [pc, #312]	; (8005b64 <HAL_DMA_Init+0x684>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d03b      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a4d      	ldr	r2, [pc, #308]	; (8005b68 <HAL_DMA_Init+0x688>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d036      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a4b      	ldr	r2, [pc, #300]	; (8005b6c <HAL_DMA_Init+0x68c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d031      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a4a      	ldr	r2, [pc, #296]	; (8005b70 <HAL_DMA_Init+0x690>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d02c      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a48      	ldr	r2, [pc, #288]	; (8005b74 <HAL_DMA_Init+0x694>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d027      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a47      	ldr	r2, [pc, #284]	; (8005b78 <HAL_DMA_Init+0x698>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d022      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a45      	ldr	r2, [pc, #276]	; (8005b7c <HAL_DMA_Init+0x69c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01d      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a44      	ldr	r2, [pc, #272]	; (8005b80 <HAL_DMA_Init+0x6a0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d018      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a42      	ldr	r2, [pc, #264]	; (8005b84 <HAL_DMA_Init+0x6a4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a41      	ldr	r2, [pc, #260]	; (8005b88 <HAL_DMA_Init+0x6a8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00e      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a3f      	ldr	r2, [pc, #252]	; (8005b8c <HAL_DMA_Init+0x6ac>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d009      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a3e      	ldr	r2, [pc, #248]	; (8005b90 <HAL_DMA_Init+0x6b0>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d004      	beq.n	8005aa6 <HAL_DMA_Init+0x5c6>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a3c      	ldr	r2, [pc, #240]	; (8005b94 <HAL_DMA_Init+0x6b4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d101      	bne.n	8005aaa <HAL_DMA_Init+0x5ca>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <HAL_DMA_Init+0x5cc>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d032      	beq.n	8005b16 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f002 fa5b 	bl	8007f6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2b80      	cmp	r3, #128	; 0x80
 8005abc:	d102      	bne.n	8005ac4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ad8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d010      	beq.n	8005b04 <HAL_DMA_Init+0x624>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b08      	cmp	r3, #8
 8005ae8:	d80c      	bhi.n	8005b04 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f002 fad8 	bl	80080a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b00:	605a      	str	r2, [r3, #4]
 8005b02:	e008      	b.n	8005b16 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	a7fdabf8 	.word	0xa7fdabf8
 8005b34:	cccccccd 	.word	0xcccccccd
 8005b38:	40020010 	.word	0x40020010
 8005b3c:	40020028 	.word	0x40020028
 8005b40:	40020040 	.word	0x40020040
 8005b44:	40020058 	.word	0x40020058
 8005b48:	40020070 	.word	0x40020070
 8005b4c:	40020088 	.word	0x40020088
 8005b50:	400200a0 	.word	0x400200a0
 8005b54:	400200b8 	.word	0x400200b8
 8005b58:	40020410 	.word	0x40020410
 8005b5c:	40020428 	.word	0x40020428
 8005b60:	40020440 	.word	0x40020440
 8005b64:	40020458 	.word	0x40020458
 8005b68:	40020470 	.word	0x40020470
 8005b6c:	40020488 	.word	0x40020488
 8005b70:	400204a0 	.word	0x400204a0
 8005b74:	400204b8 	.word	0x400204b8
 8005b78:	58025408 	.word	0x58025408
 8005b7c:	5802541c 	.word	0x5802541c
 8005b80:	58025430 	.word	0x58025430
 8005b84:	58025444 	.word	0x58025444
 8005b88:	58025458 	.word	0x58025458
 8005b8c:	5802546c 	.word	0x5802546c
 8005b90:	58025480 	.word	0x58025480
 8005b94:	58025494 	.word	0x58025494

08005b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e226      	b.n	8006002 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_DMA_Start_IT+0x2a>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e21f      	b.n	8006002 <HAL_DMA_Start_IT+0x46a>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	f040 820a 	bne.w	8005fec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a68      	ldr	r2, [pc, #416]	; (8005d8c <HAL_DMA_Start_IT+0x1f4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d04a      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a66      	ldr	r2, [pc, #408]	; (8005d90 <HAL_DMA_Start_IT+0x1f8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d045      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a65      	ldr	r2, [pc, #404]	; (8005d94 <HAL_DMA_Start_IT+0x1fc>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d040      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a63      	ldr	r2, [pc, #396]	; (8005d98 <HAL_DMA_Start_IT+0x200>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d03b      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a62      	ldr	r2, [pc, #392]	; (8005d9c <HAL_DMA_Start_IT+0x204>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d036      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a60      	ldr	r2, [pc, #384]	; (8005da0 <HAL_DMA_Start_IT+0x208>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d031      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a5f      	ldr	r2, [pc, #380]	; (8005da4 <HAL_DMA_Start_IT+0x20c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d02c      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a5d      	ldr	r2, [pc, #372]	; (8005da8 <HAL_DMA_Start_IT+0x210>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d027      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a5c      	ldr	r2, [pc, #368]	; (8005dac <HAL_DMA_Start_IT+0x214>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d022      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a5a      	ldr	r2, [pc, #360]	; (8005db0 <HAL_DMA_Start_IT+0x218>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d01d      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a59      	ldr	r2, [pc, #356]	; (8005db4 <HAL_DMA_Start_IT+0x21c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d018      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a57      	ldr	r2, [pc, #348]	; (8005db8 <HAL_DMA_Start_IT+0x220>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d013      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a56      	ldr	r2, [pc, #344]	; (8005dbc <HAL_DMA_Start_IT+0x224>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00e      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a54      	ldr	r2, [pc, #336]	; (8005dc0 <HAL_DMA_Start_IT+0x228>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d009      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a53      	ldr	r2, [pc, #332]	; (8005dc4 <HAL_DMA_Start_IT+0x22c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d004      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a51      	ldr	r2, [pc, #324]	; (8005dc8 <HAL_DMA_Start_IT+0x230>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d108      	bne.n	8005c98 <HAL_DMA_Start_IT+0x100>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0201 	bic.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	e007      	b.n	8005ca8 <HAL_DMA_Start_IT+0x110>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	68b9      	ldr	r1, [r7, #8]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f001 fe82 	bl	80079b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a34      	ldr	r2, [pc, #208]	; (8005d8c <HAL_DMA_Start_IT+0x1f4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d04a      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a33      	ldr	r2, [pc, #204]	; (8005d90 <HAL_DMA_Start_IT+0x1f8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d045      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a31      	ldr	r2, [pc, #196]	; (8005d94 <HAL_DMA_Start_IT+0x1fc>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d040      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a30      	ldr	r2, [pc, #192]	; (8005d98 <HAL_DMA_Start_IT+0x200>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d03b      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a2e      	ldr	r2, [pc, #184]	; (8005d9c <HAL_DMA_Start_IT+0x204>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d036      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a2d      	ldr	r2, [pc, #180]	; (8005da0 <HAL_DMA_Start_IT+0x208>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d031      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a2b      	ldr	r2, [pc, #172]	; (8005da4 <HAL_DMA_Start_IT+0x20c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d02c      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a2a      	ldr	r2, [pc, #168]	; (8005da8 <HAL_DMA_Start_IT+0x210>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d027      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a28      	ldr	r2, [pc, #160]	; (8005dac <HAL_DMA_Start_IT+0x214>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d022      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a27      	ldr	r2, [pc, #156]	; (8005db0 <HAL_DMA_Start_IT+0x218>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d01d      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a25      	ldr	r2, [pc, #148]	; (8005db4 <HAL_DMA_Start_IT+0x21c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d018      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a24      	ldr	r2, [pc, #144]	; (8005db8 <HAL_DMA_Start_IT+0x220>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d013      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a22      	ldr	r2, [pc, #136]	; (8005dbc <HAL_DMA_Start_IT+0x224>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00e      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a21      	ldr	r2, [pc, #132]	; (8005dc0 <HAL_DMA_Start_IT+0x228>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d009      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a1f      	ldr	r2, [pc, #124]	; (8005dc4 <HAL_DMA_Start_IT+0x22c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d004      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1e      	ldr	r2, [pc, #120]	; (8005dc8 <HAL_DMA_Start_IT+0x230>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d101      	bne.n	8005d58 <HAL_DMA_Start_IT+0x1c0>
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <HAL_DMA_Start_IT+0x1c2>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d036      	beq.n	8005dcc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f023 021e 	bic.w	r2, r3, #30
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f042 0216 	orr.w	r2, r2, #22
 8005d70:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d03e      	beq.n	8005df8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f042 0208 	orr.w	r2, r2, #8
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e035      	b.n	8005df8 <HAL_DMA_Start_IT+0x260>
 8005d8c:	40020010 	.word	0x40020010
 8005d90:	40020028 	.word	0x40020028
 8005d94:	40020040 	.word	0x40020040
 8005d98:	40020058 	.word	0x40020058
 8005d9c:	40020070 	.word	0x40020070
 8005da0:	40020088 	.word	0x40020088
 8005da4:	400200a0 	.word	0x400200a0
 8005da8:	400200b8 	.word	0x400200b8
 8005dac:	40020410 	.word	0x40020410
 8005db0:	40020428 	.word	0x40020428
 8005db4:	40020440 	.word	0x40020440
 8005db8:	40020458 	.word	0x40020458
 8005dbc:	40020470 	.word	0x40020470
 8005dc0:	40020488 	.word	0x40020488
 8005dc4:	400204a0 	.word	0x400204a0
 8005dc8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f023 020e 	bic.w	r2, r3, #14
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 020a 	orr.w	r2, r2, #10
 8005dde:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d007      	beq.n	8005df8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0204 	orr.w	r2, r2, #4
 8005df6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a83      	ldr	r2, [pc, #524]	; (800600c <HAL_DMA_Start_IT+0x474>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d072      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a82      	ldr	r2, [pc, #520]	; (8006010 <HAL_DMA_Start_IT+0x478>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d06d      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a80      	ldr	r2, [pc, #512]	; (8006014 <HAL_DMA_Start_IT+0x47c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d068      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a7f      	ldr	r2, [pc, #508]	; (8006018 <HAL_DMA_Start_IT+0x480>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d063      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a7d      	ldr	r2, [pc, #500]	; (800601c <HAL_DMA_Start_IT+0x484>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d05e      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a7c      	ldr	r2, [pc, #496]	; (8006020 <HAL_DMA_Start_IT+0x488>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d059      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a7a      	ldr	r2, [pc, #488]	; (8006024 <HAL_DMA_Start_IT+0x48c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d054      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a79      	ldr	r2, [pc, #484]	; (8006028 <HAL_DMA_Start_IT+0x490>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d04f      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a77      	ldr	r2, [pc, #476]	; (800602c <HAL_DMA_Start_IT+0x494>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d04a      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a76      	ldr	r2, [pc, #472]	; (8006030 <HAL_DMA_Start_IT+0x498>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d045      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a74      	ldr	r2, [pc, #464]	; (8006034 <HAL_DMA_Start_IT+0x49c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d040      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a73      	ldr	r2, [pc, #460]	; (8006038 <HAL_DMA_Start_IT+0x4a0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d03b      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a71      	ldr	r2, [pc, #452]	; (800603c <HAL_DMA_Start_IT+0x4a4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d036      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a70      	ldr	r2, [pc, #448]	; (8006040 <HAL_DMA_Start_IT+0x4a8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d031      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a6e      	ldr	r2, [pc, #440]	; (8006044 <HAL_DMA_Start_IT+0x4ac>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d02c      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a6d      	ldr	r2, [pc, #436]	; (8006048 <HAL_DMA_Start_IT+0x4b0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d027      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a6b      	ldr	r2, [pc, #428]	; (800604c <HAL_DMA_Start_IT+0x4b4>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d022      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a6a      	ldr	r2, [pc, #424]	; (8006050 <HAL_DMA_Start_IT+0x4b8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d01d      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a68      	ldr	r2, [pc, #416]	; (8006054 <HAL_DMA_Start_IT+0x4bc>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d018      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a67      	ldr	r2, [pc, #412]	; (8006058 <HAL_DMA_Start_IT+0x4c0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d013      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a65      	ldr	r2, [pc, #404]	; (800605c <HAL_DMA_Start_IT+0x4c4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00e      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a64      	ldr	r2, [pc, #400]	; (8006060 <HAL_DMA_Start_IT+0x4c8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d009      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a62      	ldr	r2, [pc, #392]	; (8006064 <HAL_DMA_Start_IT+0x4cc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a61      	ldr	r2, [pc, #388]	; (8006068 <HAL_DMA_Start_IT+0x4d0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d101      	bne.n	8005eec <HAL_DMA_Start_IT+0x354>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e000      	b.n	8005eee <HAL_DMA_Start_IT+0x356>
 8005eec:	2300      	movs	r3, #0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d01a      	beq.n	8005f28 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d007      	beq.n	8005f10 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f0e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d007      	beq.n	8005f28 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f26:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a37      	ldr	r2, [pc, #220]	; (800600c <HAL_DMA_Start_IT+0x474>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d04a      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a36      	ldr	r2, [pc, #216]	; (8006010 <HAL_DMA_Start_IT+0x478>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d045      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a34      	ldr	r2, [pc, #208]	; (8006014 <HAL_DMA_Start_IT+0x47c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d040      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a33      	ldr	r2, [pc, #204]	; (8006018 <HAL_DMA_Start_IT+0x480>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d03b      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a31      	ldr	r2, [pc, #196]	; (800601c <HAL_DMA_Start_IT+0x484>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d036      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a30      	ldr	r2, [pc, #192]	; (8006020 <HAL_DMA_Start_IT+0x488>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d031      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a2e      	ldr	r2, [pc, #184]	; (8006024 <HAL_DMA_Start_IT+0x48c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d02c      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a2d      	ldr	r2, [pc, #180]	; (8006028 <HAL_DMA_Start_IT+0x490>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d027      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a2b      	ldr	r2, [pc, #172]	; (800602c <HAL_DMA_Start_IT+0x494>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d022      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a2a      	ldr	r2, [pc, #168]	; (8006030 <HAL_DMA_Start_IT+0x498>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d01d      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a28      	ldr	r2, [pc, #160]	; (8006034 <HAL_DMA_Start_IT+0x49c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d018      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a27      	ldr	r2, [pc, #156]	; (8006038 <HAL_DMA_Start_IT+0x4a0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d013      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a25      	ldr	r2, [pc, #148]	; (800603c <HAL_DMA_Start_IT+0x4a4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00e      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a24      	ldr	r2, [pc, #144]	; (8006040 <HAL_DMA_Start_IT+0x4a8>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d009      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a22      	ldr	r2, [pc, #136]	; (8006044 <HAL_DMA_Start_IT+0x4ac>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d004      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a21      	ldr	r2, [pc, #132]	; (8006048 <HAL_DMA_Start_IT+0x4b0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d108      	bne.n	8005fda <HAL_DMA_Start_IT+0x442>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0201 	orr.w	r2, r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	e012      	b.n	8006000 <HAL_DMA_Start_IT+0x468>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0201 	orr.w	r2, r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	e009      	b.n	8006000 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ffa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006000:	7dfb      	ldrb	r3, [r7, #23]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40020010 	.word	0x40020010
 8006010:	40020028 	.word	0x40020028
 8006014:	40020040 	.word	0x40020040
 8006018:	40020058 	.word	0x40020058
 800601c:	40020070 	.word	0x40020070
 8006020:	40020088 	.word	0x40020088
 8006024:	400200a0 	.word	0x400200a0
 8006028:	400200b8 	.word	0x400200b8
 800602c:	40020410 	.word	0x40020410
 8006030:	40020428 	.word	0x40020428
 8006034:	40020440 	.word	0x40020440
 8006038:	40020458 	.word	0x40020458
 800603c:	40020470 	.word	0x40020470
 8006040:	40020488 	.word	0x40020488
 8006044:	400204a0 	.word	0x400204a0
 8006048:	400204b8 	.word	0x400204b8
 800604c:	58025408 	.word	0x58025408
 8006050:	5802541c 	.word	0x5802541c
 8006054:	58025430 	.word	0x58025430
 8006058:	58025444 	.word	0x58025444
 800605c:	58025458 	.word	0x58025458
 8006060:	5802546c 	.word	0x5802546c
 8006064:	58025480 	.word	0x58025480
 8006068:	58025494 	.word	0x58025494

0800606c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006074:	f7ff f8e8 	bl	8005248 <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e2dc      	b.n	800663e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d008      	beq.n	80060a2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2280      	movs	r2, #128	; 0x80
 8006094:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e2cd      	b.n	800663e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a76      	ldr	r2, [pc, #472]	; (8006280 <HAL_DMA_Abort+0x214>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d04a      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a74      	ldr	r2, [pc, #464]	; (8006284 <HAL_DMA_Abort+0x218>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d045      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a73      	ldr	r2, [pc, #460]	; (8006288 <HAL_DMA_Abort+0x21c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d040      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a71      	ldr	r2, [pc, #452]	; (800628c <HAL_DMA_Abort+0x220>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d03b      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a70      	ldr	r2, [pc, #448]	; (8006290 <HAL_DMA_Abort+0x224>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d036      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a6e      	ldr	r2, [pc, #440]	; (8006294 <HAL_DMA_Abort+0x228>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d031      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a6d      	ldr	r2, [pc, #436]	; (8006298 <HAL_DMA_Abort+0x22c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d02c      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a6b      	ldr	r2, [pc, #428]	; (800629c <HAL_DMA_Abort+0x230>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d027      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a6a      	ldr	r2, [pc, #424]	; (80062a0 <HAL_DMA_Abort+0x234>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d022      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a68      	ldr	r2, [pc, #416]	; (80062a4 <HAL_DMA_Abort+0x238>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d01d      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a67      	ldr	r2, [pc, #412]	; (80062a8 <HAL_DMA_Abort+0x23c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d018      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a65      	ldr	r2, [pc, #404]	; (80062ac <HAL_DMA_Abort+0x240>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d013      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a64      	ldr	r2, [pc, #400]	; (80062b0 <HAL_DMA_Abort+0x244>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00e      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a62      	ldr	r2, [pc, #392]	; (80062b4 <HAL_DMA_Abort+0x248>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d009      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a61      	ldr	r2, [pc, #388]	; (80062b8 <HAL_DMA_Abort+0x24c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d004      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a5f      	ldr	r2, [pc, #380]	; (80062bc <HAL_DMA_Abort+0x250>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d101      	bne.n	8006146 <HAL_DMA_Abort+0xda>
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <HAL_DMA_Abort+0xdc>
 8006146:	2300      	movs	r3, #0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d013      	beq.n	8006174 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 021e 	bic.w	r2, r2, #30
 800615a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695a      	ldr	r2, [r3, #20]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800616a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	e00a      	b.n	800618a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 020e 	bic.w	r2, r2, #14
 8006182:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a3c      	ldr	r2, [pc, #240]	; (8006280 <HAL_DMA_Abort+0x214>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d072      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a3a      	ldr	r2, [pc, #232]	; (8006284 <HAL_DMA_Abort+0x218>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d06d      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a39      	ldr	r2, [pc, #228]	; (8006288 <HAL_DMA_Abort+0x21c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d068      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a37      	ldr	r2, [pc, #220]	; (800628c <HAL_DMA_Abort+0x220>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d063      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a36      	ldr	r2, [pc, #216]	; (8006290 <HAL_DMA_Abort+0x224>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d05e      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a34      	ldr	r2, [pc, #208]	; (8006294 <HAL_DMA_Abort+0x228>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d059      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a33      	ldr	r2, [pc, #204]	; (8006298 <HAL_DMA_Abort+0x22c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d054      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a31      	ldr	r2, [pc, #196]	; (800629c <HAL_DMA_Abort+0x230>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d04f      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a30      	ldr	r2, [pc, #192]	; (80062a0 <HAL_DMA_Abort+0x234>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d04a      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a2e      	ldr	r2, [pc, #184]	; (80062a4 <HAL_DMA_Abort+0x238>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d045      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a2d      	ldr	r2, [pc, #180]	; (80062a8 <HAL_DMA_Abort+0x23c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d040      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a2b      	ldr	r2, [pc, #172]	; (80062ac <HAL_DMA_Abort+0x240>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d03b      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a2a      	ldr	r2, [pc, #168]	; (80062b0 <HAL_DMA_Abort+0x244>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d036      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a28      	ldr	r2, [pc, #160]	; (80062b4 <HAL_DMA_Abort+0x248>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d031      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a27      	ldr	r2, [pc, #156]	; (80062b8 <HAL_DMA_Abort+0x24c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d02c      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a25      	ldr	r2, [pc, #148]	; (80062bc <HAL_DMA_Abort+0x250>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d027      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a24      	ldr	r2, [pc, #144]	; (80062c0 <HAL_DMA_Abort+0x254>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d022      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a22      	ldr	r2, [pc, #136]	; (80062c4 <HAL_DMA_Abort+0x258>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d01d      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a21      	ldr	r2, [pc, #132]	; (80062c8 <HAL_DMA_Abort+0x25c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d018      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a1f      	ldr	r2, [pc, #124]	; (80062cc <HAL_DMA_Abort+0x260>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d013      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1e      	ldr	r2, [pc, #120]	; (80062d0 <HAL_DMA_Abort+0x264>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00e      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a1c      	ldr	r2, [pc, #112]	; (80062d4 <HAL_DMA_Abort+0x268>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d009      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1b      	ldr	r2, [pc, #108]	; (80062d8 <HAL_DMA_Abort+0x26c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d004      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a19      	ldr	r2, [pc, #100]	; (80062dc <HAL_DMA_Abort+0x270>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d132      	bne.n	80062e0 <HAL_DMA_Abort+0x274>
 800627a:	2301      	movs	r3, #1
 800627c:	e031      	b.n	80062e2 <HAL_DMA_Abort+0x276>
 800627e:	bf00      	nop
 8006280:	40020010 	.word	0x40020010
 8006284:	40020028 	.word	0x40020028
 8006288:	40020040 	.word	0x40020040
 800628c:	40020058 	.word	0x40020058
 8006290:	40020070 	.word	0x40020070
 8006294:	40020088 	.word	0x40020088
 8006298:	400200a0 	.word	0x400200a0
 800629c:	400200b8 	.word	0x400200b8
 80062a0:	40020410 	.word	0x40020410
 80062a4:	40020428 	.word	0x40020428
 80062a8:	40020440 	.word	0x40020440
 80062ac:	40020458 	.word	0x40020458
 80062b0:	40020470 	.word	0x40020470
 80062b4:	40020488 	.word	0x40020488
 80062b8:	400204a0 	.word	0x400204a0
 80062bc:	400204b8 	.word	0x400204b8
 80062c0:	58025408 	.word	0x58025408
 80062c4:	5802541c 	.word	0x5802541c
 80062c8:	58025430 	.word	0x58025430
 80062cc:	58025444 	.word	0x58025444
 80062d0:	58025458 	.word	0x58025458
 80062d4:	5802546c 	.word	0x5802546c
 80062d8:	58025480 	.word	0x58025480
 80062dc:	58025494 	.word	0x58025494
 80062e0:	2300      	movs	r3, #0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a6d      	ldr	r2, [pc, #436]	; (80064b0 <HAL_DMA_Abort+0x444>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d04a      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a6b      	ldr	r2, [pc, #428]	; (80064b4 <HAL_DMA_Abort+0x448>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d045      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a6a      	ldr	r2, [pc, #424]	; (80064b8 <HAL_DMA_Abort+0x44c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d040      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a68      	ldr	r2, [pc, #416]	; (80064bc <HAL_DMA_Abort+0x450>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d03b      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a67      	ldr	r2, [pc, #412]	; (80064c0 <HAL_DMA_Abort+0x454>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d036      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a65      	ldr	r2, [pc, #404]	; (80064c4 <HAL_DMA_Abort+0x458>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d031      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a64      	ldr	r2, [pc, #400]	; (80064c8 <HAL_DMA_Abort+0x45c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d02c      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a62      	ldr	r2, [pc, #392]	; (80064cc <HAL_DMA_Abort+0x460>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d027      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a61      	ldr	r2, [pc, #388]	; (80064d0 <HAL_DMA_Abort+0x464>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d022      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a5f      	ldr	r2, [pc, #380]	; (80064d4 <HAL_DMA_Abort+0x468>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d01d      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a5e      	ldr	r2, [pc, #376]	; (80064d8 <HAL_DMA_Abort+0x46c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d018      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a5c      	ldr	r2, [pc, #368]	; (80064dc <HAL_DMA_Abort+0x470>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d013      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a5b      	ldr	r2, [pc, #364]	; (80064e0 <HAL_DMA_Abort+0x474>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d00e      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a59      	ldr	r2, [pc, #356]	; (80064e4 <HAL_DMA_Abort+0x478>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d009      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a58      	ldr	r2, [pc, #352]	; (80064e8 <HAL_DMA_Abort+0x47c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d004      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a56      	ldr	r2, [pc, #344]	; (80064ec <HAL_DMA_Abort+0x480>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d108      	bne.n	80063a8 <HAL_DMA_Abort+0x33c>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0201 	bic.w	r2, r2, #1
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	e007      	b.n	80063b8 <HAL_DMA_Abort+0x34c>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0201 	bic.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80063b8:	e013      	b.n	80063e2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063ba:	f7fe ff45 	bl	8005248 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b05      	cmp	r3, #5
 80063c6:	d90c      	bls.n	80063e2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2203      	movs	r2, #3
 80063da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e12d      	b.n	800663e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e5      	bne.n	80063ba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a2f      	ldr	r2, [pc, #188]	; (80064b0 <HAL_DMA_Abort+0x444>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d04a      	beq.n	800648e <HAL_DMA_Abort+0x422>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a2d      	ldr	r2, [pc, #180]	; (80064b4 <HAL_DMA_Abort+0x448>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d045      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a2c      	ldr	r2, [pc, #176]	; (80064b8 <HAL_DMA_Abort+0x44c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d040      	beq.n	800648e <HAL_DMA_Abort+0x422>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a2a      	ldr	r2, [pc, #168]	; (80064bc <HAL_DMA_Abort+0x450>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d03b      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a29      	ldr	r2, [pc, #164]	; (80064c0 <HAL_DMA_Abort+0x454>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d036      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a27      	ldr	r2, [pc, #156]	; (80064c4 <HAL_DMA_Abort+0x458>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d031      	beq.n	800648e <HAL_DMA_Abort+0x422>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a26      	ldr	r2, [pc, #152]	; (80064c8 <HAL_DMA_Abort+0x45c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d02c      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a24      	ldr	r2, [pc, #144]	; (80064cc <HAL_DMA_Abort+0x460>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d027      	beq.n	800648e <HAL_DMA_Abort+0x422>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a23      	ldr	r2, [pc, #140]	; (80064d0 <HAL_DMA_Abort+0x464>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d022      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a21      	ldr	r2, [pc, #132]	; (80064d4 <HAL_DMA_Abort+0x468>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d01d      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a20      	ldr	r2, [pc, #128]	; (80064d8 <HAL_DMA_Abort+0x46c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d018      	beq.n	800648e <HAL_DMA_Abort+0x422>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1e      	ldr	r2, [pc, #120]	; (80064dc <HAL_DMA_Abort+0x470>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d013      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1d      	ldr	r2, [pc, #116]	; (80064e0 <HAL_DMA_Abort+0x474>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00e      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1b      	ldr	r2, [pc, #108]	; (80064e4 <HAL_DMA_Abort+0x478>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d009      	beq.n	800648e <HAL_DMA_Abort+0x422>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1a      	ldr	r2, [pc, #104]	; (80064e8 <HAL_DMA_Abort+0x47c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d004      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a18      	ldr	r2, [pc, #96]	; (80064ec <HAL_DMA_Abort+0x480>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d101      	bne.n	8006492 <HAL_DMA_Abort+0x426>
 800648e:	2301      	movs	r3, #1
 8006490:	e000      	b.n	8006494 <HAL_DMA_Abort+0x428>
 8006492:	2300      	movs	r3, #0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d02b      	beq.n	80064f0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	223f      	movs	r2, #63	; 0x3f
 80064a8:	409a      	lsls	r2, r3
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	609a      	str	r2, [r3, #8]
 80064ae:	e02a      	b.n	8006506 <HAL_DMA_Abort+0x49a>
 80064b0:	40020010 	.word	0x40020010
 80064b4:	40020028 	.word	0x40020028
 80064b8:	40020040 	.word	0x40020040
 80064bc:	40020058 	.word	0x40020058
 80064c0:	40020070 	.word	0x40020070
 80064c4:	40020088 	.word	0x40020088
 80064c8:	400200a0 	.word	0x400200a0
 80064cc:	400200b8 	.word	0x400200b8
 80064d0:	40020410 	.word	0x40020410
 80064d4:	40020428 	.word	0x40020428
 80064d8:	40020440 	.word	0x40020440
 80064dc:	40020458 	.word	0x40020458
 80064e0:	40020470 	.word	0x40020470
 80064e4:	40020488 	.word	0x40020488
 80064e8:	400204a0 	.word	0x400204a0
 80064ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fa:	f003 031f 	and.w	r3, r3, #31
 80064fe:	2201      	movs	r2, #1
 8006500:	409a      	lsls	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a4f      	ldr	r2, [pc, #316]	; (8006648 <HAL_DMA_Abort+0x5dc>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d072      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a4d      	ldr	r2, [pc, #308]	; (800664c <HAL_DMA_Abort+0x5e0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d06d      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a4c      	ldr	r2, [pc, #304]	; (8006650 <HAL_DMA_Abort+0x5e4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d068      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a4a      	ldr	r2, [pc, #296]	; (8006654 <HAL_DMA_Abort+0x5e8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d063      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a49      	ldr	r2, [pc, #292]	; (8006658 <HAL_DMA_Abort+0x5ec>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d05e      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a47      	ldr	r2, [pc, #284]	; (800665c <HAL_DMA_Abort+0x5f0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d059      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a46      	ldr	r2, [pc, #280]	; (8006660 <HAL_DMA_Abort+0x5f4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d054      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a44      	ldr	r2, [pc, #272]	; (8006664 <HAL_DMA_Abort+0x5f8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d04f      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a43      	ldr	r2, [pc, #268]	; (8006668 <HAL_DMA_Abort+0x5fc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d04a      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a41      	ldr	r2, [pc, #260]	; (800666c <HAL_DMA_Abort+0x600>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d045      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a40      	ldr	r2, [pc, #256]	; (8006670 <HAL_DMA_Abort+0x604>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d040      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a3e      	ldr	r2, [pc, #248]	; (8006674 <HAL_DMA_Abort+0x608>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d03b      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a3d      	ldr	r2, [pc, #244]	; (8006678 <HAL_DMA_Abort+0x60c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d036      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a3b      	ldr	r2, [pc, #236]	; (800667c <HAL_DMA_Abort+0x610>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d031      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a3a      	ldr	r2, [pc, #232]	; (8006680 <HAL_DMA_Abort+0x614>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d02c      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a38      	ldr	r2, [pc, #224]	; (8006684 <HAL_DMA_Abort+0x618>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d027      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a37      	ldr	r2, [pc, #220]	; (8006688 <HAL_DMA_Abort+0x61c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d022      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a35      	ldr	r2, [pc, #212]	; (800668c <HAL_DMA_Abort+0x620>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d01d      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a34      	ldr	r2, [pc, #208]	; (8006690 <HAL_DMA_Abort+0x624>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d018      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a32      	ldr	r2, [pc, #200]	; (8006694 <HAL_DMA_Abort+0x628>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d013      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a31      	ldr	r2, [pc, #196]	; (8006698 <HAL_DMA_Abort+0x62c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00e      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a2f      	ldr	r2, [pc, #188]	; (800669c <HAL_DMA_Abort+0x630>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d009      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a2e      	ldr	r2, [pc, #184]	; (80066a0 <HAL_DMA_Abort+0x634>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d004      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a2c      	ldr	r2, [pc, #176]	; (80066a4 <HAL_DMA_Abort+0x638>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d101      	bne.n	80065fa <HAL_DMA_Abort+0x58e>
 80065f6:	2301      	movs	r3, #1
 80065f8:	e000      	b.n	80065fc <HAL_DMA_Abort+0x590>
 80065fa:	2300      	movs	r3, #0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d015      	beq.n	800662c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006608:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00c      	beq.n	800662c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800661c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006620:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800662a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	40020010 	.word	0x40020010
 800664c:	40020028 	.word	0x40020028
 8006650:	40020040 	.word	0x40020040
 8006654:	40020058 	.word	0x40020058
 8006658:	40020070 	.word	0x40020070
 800665c:	40020088 	.word	0x40020088
 8006660:	400200a0 	.word	0x400200a0
 8006664:	400200b8 	.word	0x400200b8
 8006668:	40020410 	.word	0x40020410
 800666c:	40020428 	.word	0x40020428
 8006670:	40020440 	.word	0x40020440
 8006674:	40020458 	.word	0x40020458
 8006678:	40020470 	.word	0x40020470
 800667c:	40020488 	.word	0x40020488
 8006680:	400204a0 	.word	0x400204a0
 8006684:	400204b8 	.word	0x400204b8
 8006688:	58025408 	.word	0x58025408
 800668c:	5802541c 	.word	0x5802541c
 8006690:	58025430 	.word	0x58025430
 8006694:	58025444 	.word	0x58025444
 8006698:	58025458 	.word	0x58025458
 800669c:	5802546c 	.word	0x5802546c
 80066a0:	58025480 	.word	0x58025480
 80066a4:	58025494 	.word	0x58025494

080066a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e205      	b.n	8006ac6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d004      	beq.n	80066d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2280      	movs	r2, #128	; 0x80
 80066ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e1fa      	b.n	8006ac6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a8c      	ldr	r2, [pc, #560]	; (8006908 <HAL_DMA_Abort_IT+0x260>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d04a      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a8b      	ldr	r2, [pc, #556]	; (800690c <HAL_DMA_Abort_IT+0x264>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d045      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a89      	ldr	r2, [pc, #548]	; (8006910 <HAL_DMA_Abort_IT+0x268>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d040      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a88      	ldr	r2, [pc, #544]	; (8006914 <HAL_DMA_Abort_IT+0x26c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d03b      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a86      	ldr	r2, [pc, #536]	; (8006918 <HAL_DMA_Abort_IT+0x270>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d036      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a85      	ldr	r2, [pc, #532]	; (800691c <HAL_DMA_Abort_IT+0x274>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d031      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a83      	ldr	r2, [pc, #524]	; (8006920 <HAL_DMA_Abort_IT+0x278>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d02c      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a82      	ldr	r2, [pc, #520]	; (8006924 <HAL_DMA_Abort_IT+0x27c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d027      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a80      	ldr	r2, [pc, #512]	; (8006928 <HAL_DMA_Abort_IT+0x280>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d022      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a7f      	ldr	r2, [pc, #508]	; (800692c <HAL_DMA_Abort_IT+0x284>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d01d      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a7d      	ldr	r2, [pc, #500]	; (8006930 <HAL_DMA_Abort_IT+0x288>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d018      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a7c      	ldr	r2, [pc, #496]	; (8006934 <HAL_DMA_Abort_IT+0x28c>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d013      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a7a      	ldr	r2, [pc, #488]	; (8006938 <HAL_DMA_Abort_IT+0x290>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d00e      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a79      	ldr	r2, [pc, #484]	; (800693c <HAL_DMA_Abort_IT+0x294>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d009      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a77      	ldr	r2, [pc, #476]	; (8006940 <HAL_DMA_Abort_IT+0x298>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d004      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a76      	ldr	r2, [pc, #472]	; (8006944 <HAL_DMA_Abort_IT+0x29c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d101      	bne.n	8006774 <HAL_DMA_Abort_IT+0xcc>
 8006770:	2301      	movs	r3, #1
 8006772:	e000      	b.n	8006776 <HAL_DMA_Abort_IT+0xce>
 8006774:	2300      	movs	r3, #0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d065      	beq.n	8006846 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2204      	movs	r2, #4
 800677e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a60      	ldr	r2, [pc, #384]	; (8006908 <HAL_DMA_Abort_IT+0x260>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d04a      	beq.n	8006822 <HAL_DMA_Abort_IT+0x17a>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a5e      	ldr	r2, [pc, #376]	; (800690c <HAL_DMA_Abort_IT+0x264>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d045      	beq.n	8006822 <HAL_DMA_Abort_IT+0x17a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a5d      	ldr	r2, [pc, #372]	; (8006910 <HAL_DMA_Abort_IT+0x268>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d040      	beq.n	8006822 <HAL_DMA_Abort_IT+0x17a>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a5b      	ldr	r2, [pc, #364]	; (8006914 <HAL_DMA_Abort_IT+0x26c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d03b      	beq.n	8006822 <HAL_DMA_Abort_IT+0x17a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a5a      	ldr	r2, [pc, #360]	; (8006918 <HAL_DMA_Abort_IT+0x270>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d036      	beq.n	8006822 <HAL_DMA_Abort_IT+0x17a>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a58      	ldr	r2, [pc, #352]	; (800691c <HAL_DMA_Abort_IT+0x274>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d031      	beq.n	8006822 <HAL_DMA_Abort_IT+0x17a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a57      	ldr	r2, [pc, #348]	; (8006920 <HAL_DMA_Abort_IT+0x278>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d02c      	beq.n	8006822 <HAL_DMA_Abort_IT+0x17a>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a55      	ldr	r2, [pc, #340]	; (8006924 <HAL_DMA_Abort_IT+0x27c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d027      	beq.n	8006822 <HAL_DMA_Abort_IT+0x17a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a54      	ldr	r2, [pc, #336]	; (8006928 <HAL_DMA_Abort_IT+0x280>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d022      	beq.n	8006822 <HAL_DMA_Abort_IT+0x17a>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a52      	ldr	r2, [pc, #328]	; (800692c <HAL_DMA_Abort_IT+0x284>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d01d      	beq.n	8006822 <HAL_DMA_Abort_IT+0x17a>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a51      	ldr	r2, [pc, #324]	; (8006930 <HAL_DMA_Abort_IT+0x288>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d018      	beq.n	8006822 <HAL_DMA_Abort_IT+0x17a>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a4f      	ldr	r2, [pc, #316]	; (8006934 <HAL_DMA_Abort_IT+0x28c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d013      	beq.n	8006822 <HAL_DMA_Abort_IT+0x17a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a4e      	ldr	r2, [pc, #312]	; (8006938 <HAL_DMA_Abort_IT+0x290>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d00e      	beq.n	8006822 <HAL_DMA_Abort_IT+0x17a>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a4c      	ldr	r2, [pc, #304]	; (800693c <HAL_DMA_Abort_IT+0x294>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d009      	beq.n	8006822 <HAL_DMA_Abort_IT+0x17a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a4b      	ldr	r2, [pc, #300]	; (8006940 <HAL_DMA_Abort_IT+0x298>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d004      	beq.n	8006822 <HAL_DMA_Abort_IT+0x17a>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a49      	ldr	r2, [pc, #292]	; (8006944 <HAL_DMA_Abort_IT+0x29c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d108      	bne.n	8006834 <HAL_DMA_Abort_IT+0x18c>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 0201 	bic.w	r2, r2, #1
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	e147      	b.n	8006ac4 <HAL_DMA_Abort_IT+0x41c>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0201 	bic.w	r2, r2, #1
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	e13e      	b.n	8006ac4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 020e 	bic.w	r2, r2, #14
 8006854:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a2b      	ldr	r2, [pc, #172]	; (8006908 <HAL_DMA_Abort_IT+0x260>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d04a      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x24e>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a29      	ldr	r2, [pc, #164]	; (800690c <HAL_DMA_Abort_IT+0x264>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d045      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x24e>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a28      	ldr	r2, [pc, #160]	; (8006910 <HAL_DMA_Abort_IT+0x268>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d040      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x24e>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a26      	ldr	r2, [pc, #152]	; (8006914 <HAL_DMA_Abort_IT+0x26c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d03b      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x24e>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a25      	ldr	r2, [pc, #148]	; (8006918 <HAL_DMA_Abort_IT+0x270>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d036      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x24e>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a23      	ldr	r2, [pc, #140]	; (800691c <HAL_DMA_Abort_IT+0x274>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d031      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x24e>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a22      	ldr	r2, [pc, #136]	; (8006920 <HAL_DMA_Abort_IT+0x278>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d02c      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x24e>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a20      	ldr	r2, [pc, #128]	; (8006924 <HAL_DMA_Abort_IT+0x27c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d027      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x24e>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a1f      	ldr	r2, [pc, #124]	; (8006928 <HAL_DMA_Abort_IT+0x280>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d022      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x24e>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a1d      	ldr	r2, [pc, #116]	; (800692c <HAL_DMA_Abort_IT+0x284>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d01d      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x24e>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1c      	ldr	r2, [pc, #112]	; (8006930 <HAL_DMA_Abort_IT+0x288>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d018      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x24e>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1a      	ldr	r2, [pc, #104]	; (8006934 <HAL_DMA_Abort_IT+0x28c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d013      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x24e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a19      	ldr	r2, [pc, #100]	; (8006938 <HAL_DMA_Abort_IT+0x290>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d00e      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x24e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a17      	ldr	r2, [pc, #92]	; (800693c <HAL_DMA_Abort_IT+0x294>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d009      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x24e>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a16      	ldr	r2, [pc, #88]	; (8006940 <HAL_DMA_Abort_IT+0x298>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d004      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x24e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a14      	ldr	r2, [pc, #80]	; (8006944 <HAL_DMA_Abort_IT+0x29c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d128      	bne.n	8006948 <HAL_DMA_Abort_IT+0x2a0>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0201 	bic.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	e027      	b.n	8006958 <HAL_DMA_Abort_IT+0x2b0>
 8006908:	40020010 	.word	0x40020010
 800690c:	40020028 	.word	0x40020028
 8006910:	40020040 	.word	0x40020040
 8006914:	40020058 	.word	0x40020058
 8006918:	40020070 	.word	0x40020070
 800691c:	40020088 	.word	0x40020088
 8006920:	400200a0 	.word	0x400200a0
 8006924:	400200b8 	.word	0x400200b8
 8006928:	40020410 	.word	0x40020410
 800692c:	40020428 	.word	0x40020428
 8006930:	40020440 	.word	0x40020440
 8006934:	40020458 	.word	0x40020458
 8006938:	40020470 	.word	0x40020470
 800693c:	40020488 	.word	0x40020488
 8006940:	400204a0 	.word	0x400204a0
 8006944:	400204b8 	.word	0x400204b8
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0201 	bic.w	r2, r2, #1
 8006956:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a5c      	ldr	r2, [pc, #368]	; (8006ad0 <HAL_DMA_Abort_IT+0x428>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d072      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a5b      	ldr	r2, [pc, #364]	; (8006ad4 <HAL_DMA_Abort_IT+0x42c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d06d      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a59      	ldr	r2, [pc, #356]	; (8006ad8 <HAL_DMA_Abort_IT+0x430>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d068      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a58      	ldr	r2, [pc, #352]	; (8006adc <HAL_DMA_Abort_IT+0x434>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d063      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a56      	ldr	r2, [pc, #344]	; (8006ae0 <HAL_DMA_Abort_IT+0x438>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d05e      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a55      	ldr	r2, [pc, #340]	; (8006ae4 <HAL_DMA_Abort_IT+0x43c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d059      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a53      	ldr	r2, [pc, #332]	; (8006ae8 <HAL_DMA_Abort_IT+0x440>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d054      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a52      	ldr	r2, [pc, #328]	; (8006aec <HAL_DMA_Abort_IT+0x444>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d04f      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a50      	ldr	r2, [pc, #320]	; (8006af0 <HAL_DMA_Abort_IT+0x448>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d04a      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a4f      	ldr	r2, [pc, #316]	; (8006af4 <HAL_DMA_Abort_IT+0x44c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d045      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a4d      	ldr	r2, [pc, #308]	; (8006af8 <HAL_DMA_Abort_IT+0x450>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d040      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a4c      	ldr	r2, [pc, #304]	; (8006afc <HAL_DMA_Abort_IT+0x454>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d03b      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a4a      	ldr	r2, [pc, #296]	; (8006b00 <HAL_DMA_Abort_IT+0x458>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d036      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a49      	ldr	r2, [pc, #292]	; (8006b04 <HAL_DMA_Abort_IT+0x45c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d031      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a47      	ldr	r2, [pc, #284]	; (8006b08 <HAL_DMA_Abort_IT+0x460>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d02c      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a46      	ldr	r2, [pc, #280]	; (8006b0c <HAL_DMA_Abort_IT+0x464>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d027      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a44      	ldr	r2, [pc, #272]	; (8006b10 <HAL_DMA_Abort_IT+0x468>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d022      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a43      	ldr	r2, [pc, #268]	; (8006b14 <HAL_DMA_Abort_IT+0x46c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d01d      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a41      	ldr	r2, [pc, #260]	; (8006b18 <HAL_DMA_Abort_IT+0x470>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d018      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a40      	ldr	r2, [pc, #256]	; (8006b1c <HAL_DMA_Abort_IT+0x474>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d013      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a3e      	ldr	r2, [pc, #248]	; (8006b20 <HAL_DMA_Abort_IT+0x478>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d00e      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a3d      	ldr	r2, [pc, #244]	; (8006b24 <HAL_DMA_Abort_IT+0x47c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d009      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a3b      	ldr	r2, [pc, #236]	; (8006b28 <HAL_DMA_Abort_IT+0x480>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d004      	beq.n	8006a48 <HAL_DMA_Abort_IT+0x3a0>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a3a      	ldr	r2, [pc, #232]	; (8006b2c <HAL_DMA_Abort_IT+0x484>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d101      	bne.n	8006a4c <HAL_DMA_Abort_IT+0x3a4>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <HAL_DMA_Abort_IT+0x3a6>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d028      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a60:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a66:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6c:	f003 031f 	and.w	r3, r3, #31
 8006a70:	2201      	movs	r2, #1
 8006a72:	409a      	lsls	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a80:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00c      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a98:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006aa2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	40020010 	.word	0x40020010
 8006ad4:	40020028 	.word	0x40020028
 8006ad8:	40020040 	.word	0x40020040
 8006adc:	40020058 	.word	0x40020058
 8006ae0:	40020070 	.word	0x40020070
 8006ae4:	40020088 	.word	0x40020088
 8006ae8:	400200a0 	.word	0x400200a0
 8006aec:	400200b8 	.word	0x400200b8
 8006af0:	40020410 	.word	0x40020410
 8006af4:	40020428 	.word	0x40020428
 8006af8:	40020440 	.word	0x40020440
 8006afc:	40020458 	.word	0x40020458
 8006b00:	40020470 	.word	0x40020470
 8006b04:	40020488 	.word	0x40020488
 8006b08:	400204a0 	.word	0x400204a0
 8006b0c:	400204b8 	.word	0x400204b8
 8006b10:	58025408 	.word	0x58025408
 8006b14:	5802541c 	.word	0x5802541c
 8006b18:	58025430 	.word	0x58025430
 8006b1c:	58025444 	.word	0x58025444
 8006b20:	58025458 	.word	0x58025458
 8006b24:	5802546c 	.word	0x5802546c
 8006b28:	58025480 	.word	0x58025480
 8006b2c:	58025494 	.word	0x58025494

08006b30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b08a      	sub	sp, #40	; 0x28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b3c:	4b67      	ldr	r3, [pc, #412]	; (8006cdc <HAL_DMA_IRQHandler+0x1ac>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a67      	ldr	r2, [pc, #412]	; (8006ce0 <HAL_DMA_IRQHandler+0x1b0>)
 8006b42:	fba2 2303 	umull	r2, r3, r2, r3
 8006b46:	0a9b      	lsrs	r3, r3, #10
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b54:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a5f      	ldr	r2, [pc, #380]	; (8006ce4 <HAL_DMA_IRQHandler+0x1b4>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d04a      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xd2>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a5d      	ldr	r2, [pc, #372]	; (8006ce8 <HAL_DMA_IRQHandler+0x1b8>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d045      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xd2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a5c      	ldr	r2, [pc, #368]	; (8006cec <HAL_DMA_IRQHandler+0x1bc>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d040      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xd2>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a5a      	ldr	r2, [pc, #360]	; (8006cf0 <HAL_DMA_IRQHandler+0x1c0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d03b      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xd2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a59      	ldr	r2, [pc, #356]	; (8006cf4 <HAL_DMA_IRQHandler+0x1c4>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d036      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xd2>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a57      	ldr	r2, [pc, #348]	; (8006cf8 <HAL_DMA_IRQHandler+0x1c8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d031      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xd2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a56      	ldr	r2, [pc, #344]	; (8006cfc <HAL_DMA_IRQHandler+0x1cc>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d02c      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xd2>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a54      	ldr	r2, [pc, #336]	; (8006d00 <HAL_DMA_IRQHandler+0x1d0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d027      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xd2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a53      	ldr	r2, [pc, #332]	; (8006d04 <HAL_DMA_IRQHandler+0x1d4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d022      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xd2>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a51      	ldr	r2, [pc, #324]	; (8006d08 <HAL_DMA_IRQHandler+0x1d8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d01d      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xd2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a50      	ldr	r2, [pc, #320]	; (8006d0c <HAL_DMA_IRQHandler+0x1dc>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d018      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xd2>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a4e      	ldr	r2, [pc, #312]	; (8006d10 <HAL_DMA_IRQHandler+0x1e0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d013      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xd2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a4d      	ldr	r2, [pc, #308]	; (8006d14 <HAL_DMA_IRQHandler+0x1e4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00e      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xd2>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a4b      	ldr	r2, [pc, #300]	; (8006d18 <HAL_DMA_IRQHandler+0x1e8>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d009      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xd2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a4a      	ldr	r2, [pc, #296]	; (8006d1c <HAL_DMA_IRQHandler+0x1ec>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d004      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xd2>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a48      	ldr	r2, [pc, #288]	; (8006d20 <HAL_DMA_IRQHandler+0x1f0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d101      	bne.n	8006c06 <HAL_DMA_IRQHandler+0xd6>
 8006c02:	2301      	movs	r3, #1
 8006c04:	e000      	b.n	8006c08 <HAL_DMA_IRQHandler+0xd8>
 8006c06:	2300      	movs	r3, #0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 842b 	beq.w	8007464 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c12:	f003 031f 	and.w	r3, r3, #31
 8006c16:	2208      	movs	r2, #8
 8006c18:	409a      	lsls	r2, r3
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 80a2 	beq.w	8006d68 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a2e      	ldr	r2, [pc, #184]	; (8006ce4 <HAL_DMA_IRQHandler+0x1b4>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d04a      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x194>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a2d      	ldr	r2, [pc, #180]	; (8006ce8 <HAL_DMA_IRQHandler+0x1b8>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d045      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x194>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a2b      	ldr	r2, [pc, #172]	; (8006cec <HAL_DMA_IRQHandler+0x1bc>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d040      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x194>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a2a      	ldr	r2, [pc, #168]	; (8006cf0 <HAL_DMA_IRQHandler+0x1c0>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d03b      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x194>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a28      	ldr	r2, [pc, #160]	; (8006cf4 <HAL_DMA_IRQHandler+0x1c4>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d036      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x194>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a27      	ldr	r2, [pc, #156]	; (8006cf8 <HAL_DMA_IRQHandler+0x1c8>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d031      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x194>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a25      	ldr	r2, [pc, #148]	; (8006cfc <HAL_DMA_IRQHandler+0x1cc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d02c      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x194>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a24      	ldr	r2, [pc, #144]	; (8006d00 <HAL_DMA_IRQHandler+0x1d0>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d027      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x194>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a22      	ldr	r2, [pc, #136]	; (8006d04 <HAL_DMA_IRQHandler+0x1d4>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d022      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x194>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a21      	ldr	r2, [pc, #132]	; (8006d08 <HAL_DMA_IRQHandler+0x1d8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d01d      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x194>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a1f      	ldr	r2, [pc, #124]	; (8006d0c <HAL_DMA_IRQHandler+0x1dc>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d018      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x194>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a1e      	ldr	r2, [pc, #120]	; (8006d10 <HAL_DMA_IRQHandler+0x1e0>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d013      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x194>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a1c      	ldr	r2, [pc, #112]	; (8006d14 <HAL_DMA_IRQHandler+0x1e4>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d00e      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x194>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a1b      	ldr	r2, [pc, #108]	; (8006d18 <HAL_DMA_IRQHandler+0x1e8>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d009      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x194>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a19      	ldr	r2, [pc, #100]	; (8006d1c <HAL_DMA_IRQHandler+0x1ec>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d004      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x194>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a18      	ldr	r2, [pc, #96]	; (8006d20 <HAL_DMA_IRQHandler+0x1f0>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d12f      	bne.n	8006d24 <HAL_DMA_IRQHandler+0x1f4>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0304 	and.w	r3, r3, #4
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	bf14      	ite	ne
 8006cd2:	2301      	movne	r3, #1
 8006cd4:	2300      	moveq	r3, #0
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	e02e      	b.n	8006d38 <HAL_DMA_IRQHandler+0x208>
 8006cda:	bf00      	nop
 8006cdc:	24000014 	.word	0x24000014
 8006ce0:	1b4e81b5 	.word	0x1b4e81b5
 8006ce4:	40020010 	.word	0x40020010
 8006ce8:	40020028 	.word	0x40020028
 8006cec:	40020040 	.word	0x40020040
 8006cf0:	40020058 	.word	0x40020058
 8006cf4:	40020070 	.word	0x40020070
 8006cf8:	40020088 	.word	0x40020088
 8006cfc:	400200a0 	.word	0x400200a0
 8006d00:	400200b8 	.word	0x400200b8
 8006d04:	40020410 	.word	0x40020410
 8006d08:	40020428 	.word	0x40020428
 8006d0c:	40020440 	.word	0x40020440
 8006d10:	40020458 	.word	0x40020458
 8006d14:	40020470 	.word	0x40020470
 8006d18:	40020488 	.word	0x40020488
 8006d1c:	400204a0 	.word	0x400204a0
 8006d20:	400204b8 	.word	0x400204b8
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bf14      	ite	ne
 8006d32:	2301      	movne	r3, #1
 8006d34:	2300      	moveq	r3, #0
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d015      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0204 	bic.w	r2, r2, #4
 8006d4a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d50:	f003 031f 	and.w	r3, r3, #31
 8006d54:	2208      	movs	r2, #8
 8006d56:	409a      	lsls	r2, r3
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d60:	f043 0201 	orr.w	r2, r3, #1
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d6c:	f003 031f 	and.w	r3, r3, #31
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	fa22 f303 	lsr.w	r3, r2, r3
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d06e      	beq.n	8006e5c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a69      	ldr	r2, [pc, #420]	; (8006f28 <HAL_DMA_IRQHandler+0x3f8>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d04a      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x2ee>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a67      	ldr	r2, [pc, #412]	; (8006f2c <HAL_DMA_IRQHandler+0x3fc>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d045      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x2ee>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a66      	ldr	r2, [pc, #408]	; (8006f30 <HAL_DMA_IRQHandler+0x400>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d040      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x2ee>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a64      	ldr	r2, [pc, #400]	; (8006f34 <HAL_DMA_IRQHandler+0x404>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d03b      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x2ee>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a63      	ldr	r2, [pc, #396]	; (8006f38 <HAL_DMA_IRQHandler+0x408>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d036      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x2ee>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a61      	ldr	r2, [pc, #388]	; (8006f3c <HAL_DMA_IRQHandler+0x40c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d031      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x2ee>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a60      	ldr	r2, [pc, #384]	; (8006f40 <HAL_DMA_IRQHandler+0x410>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d02c      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x2ee>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a5e      	ldr	r2, [pc, #376]	; (8006f44 <HAL_DMA_IRQHandler+0x414>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d027      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x2ee>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a5d      	ldr	r2, [pc, #372]	; (8006f48 <HAL_DMA_IRQHandler+0x418>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d022      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x2ee>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a5b      	ldr	r2, [pc, #364]	; (8006f4c <HAL_DMA_IRQHandler+0x41c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d01d      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x2ee>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a5a      	ldr	r2, [pc, #360]	; (8006f50 <HAL_DMA_IRQHandler+0x420>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d018      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x2ee>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a58      	ldr	r2, [pc, #352]	; (8006f54 <HAL_DMA_IRQHandler+0x424>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d013      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x2ee>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a57      	ldr	r2, [pc, #348]	; (8006f58 <HAL_DMA_IRQHandler+0x428>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00e      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x2ee>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a55      	ldr	r2, [pc, #340]	; (8006f5c <HAL_DMA_IRQHandler+0x42c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d009      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x2ee>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a54      	ldr	r2, [pc, #336]	; (8006f60 <HAL_DMA_IRQHandler+0x430>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d004      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x2ee>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a52      	ldr	r2, [pc, #328]	; (8006f64 <HAL_DMA_IRQHandler+0x434>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d10a      	bne.n	8006e34 <HAL_DMA_IRQHandler+0x304>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	bf14      	ite	ne
 8006e2c:	2301      	movne	r3, #1
 8006e2e:	2300      	moveq	r3, #0
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	e003      	b.n	8006e3c <HAL_DMA_IRQHandler+0x30c>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00d      	beq.n	8006e5c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e44:	f003 031f 	and.w	r3, r3, #31
 8006e48:	2201      	movs	r2, #1
 8006e4a:	409a      	lsls	r2, r3
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e54:	f043 0202 	orr.w	r2, r3, #2
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e60:	f003 031f 	and.w	r3, r3, #31
 8006e64:	2204      	movs	r2, #4
 8006e66:	409a      	lsls	r2, r3
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 808f 	beq.w	8006f90 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a2c      	ldr	r2, [pc, #176]	; (8006f28 <HAL_DMA_IRQHandler+0x3f8>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d04a      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x3e2>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a2a      	ldr	r2, [pc, #168]	; (8006f2c <HAL_DMA_IRQHandler+0x3fc>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d045      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x3e2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a29      	ldr	r2, [pc, #164]	; (8006f30 <HAL_DMA_IRQHandler+0x400>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d040      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x3e2>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a27      	ldr	r2, [pc, #156]	; (8006f34 <HAL_DMA_IRQHandler+0x404>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d03b      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x3e2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a26      	ldr	r2, [pc, #152]	; (8006f38 <HAL_DMA_IRQHandler+0x408>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d036      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x3e2>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a24      	ldr	r2, [pc, #144]	; (8006f3c <HAL_DMA_IRQHandler+0x40c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d031      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x3e2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a23      	ldr	r2, [pc, #140]	; (8006f40 <HAL_DMA_IRQHandler+0x410>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d02c      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x3e2>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a21      	ldr	r2, [pc, #132]	; (8006f44 <HAL_DMA_IRQHandler+0x414>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d027      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x3e2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a20      	ldr	r2, [pc, #128]	; (8006f48 <HAL_DMA_IRQHandler+0x418>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d022      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x3e2>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a1e      	ldr	r2, [pc, #120]	; (8006f4c <HAL_DMA_IRQHandler+0x41c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d01d      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x3e2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a1d      	ldr	r2, [pc, #116]	; (8006f50 <HAL_DMA_IRQHandler+0x420>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d018      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x3e2>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a1b      	ldr	r2, [pc, #108]	; (8006f54 <HAL_DMA_IRQHandler+0x424>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d013      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x3e2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a1a      	ldr	r2, [pc, #104]	; (8006f58 <HAL_DMA_IRQHandler+0x428>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d00e      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x3e2>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <HAL_DMA_IRQHandler+0x42c>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d009      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x3e2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a17      	ldr	r2, [pc, #92]	; (8006f60 <HAL_DMA_IRQHandler+0x430>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d004      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x3e2>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a15      	ldr	r2, [pc, #84]	; (8006f64 <HAL_DMA_IRQHandler+0x434>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d12a      	bne.n	8006f68 <HAL_DMA_IRQHandler+0x438>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	bf14      	ite	ne
 8006f20:	2301      	movne	r3, #1
 8006f22:	2300      	moveq	r3, #0
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	e023      	b.n	8006f70 <HAL_DMA_IRQHandler+0x440>
 8006f28:	40020010 	.word	0x40020010
 8006f2c:	40020028 	.word	0x40020028
 8006f30:	40020040 	.word	0x40020040
 8006f34:	40020058 	.word	0x40020058
 8006f38:	40020070 	.word	0x40020070
 8006f3c:	40020088 	.word	0x40020088
 8006f40:	400200a0 	.word	0x400200a0
 8006f44:	400200b8 	.word	0x400200b8
 8006f48:	40020410 	.word	0x40020410
 8006f4c:	40020428 	.word	0x40020428
 8006f50:	40020440 	.word	0x40020440
 8006f54:	40020458 	.word	0x40020458
 8006f58:	40020470 	.word	0x40020470
 8006f5c:	40020488 	.word	0x40020488
 8006f60:	400204a0 	.word	0x400204a0
 8006f64:	400204b8 	.word	0x400204b8
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2300      	movs	r3, #0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00d      	beq.n	8006f90 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f78:	f003 031f 	and.w	r3, r3, #31
 8006f7c:	2204      	movs	r2, #4
 8006f7e:	409a      	lsls	r2, r3
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f88:	f043 0204 	orr.w	r2, r3, #4
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f94:	f003 031f 	and.w	r3, r3, #31
 8006f98:	2210      	movs	r2, #16
 8006f9a:	409a      	lsls	r2, r3
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 80a6 	beq.w	80070f2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a85      	ldr	r2, [pc, #532]	; (80071c0 <HAL_DMA_IRQHandler+0x690>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d04a      	beq.n	8007046 <HAL_DMA_IRQHandler+0x516>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a83      	ldr	r2, [pc, #524]	; (80071c4 <HAL_DMA_IRQHandler+0x694>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d045      	beq.n	8007046 <HAL_DMA_IRQHandler+0x516>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a82      	ldr	r2, [pc, #520]	; (80071c8 <HAL_DMA_IRQHandler+0x698>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d040      	beq.n	8007046 <HAL_DMA_IRQHandler+0x516>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a80      	ldr	r2, [pc, #512]	; (80071cc <HAL_DMA_IRQHandler+0x69c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d03b      	beq.n	8007046 <HAL_DMA_IRQHandler+0x516>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a7f      	ldr	r2, [pc, #508]	; (80071d0 <HAL_DMA_IRQHandler+0x6a0>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d036      	beq.n	8007046 <HAL_DMA_IRQHandler+0x516>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a7d      	ldr	r2, [pc, #500]	; (80071d4 <HAL_DMA_IRQHandler+0x6a4>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d031      	beq.n	8007046 <HAL_DMA_IRQHandler+0x516>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a7c      	ldr	r2, [pc, #496]	; (80071d8 <HAL_DMA_IRQHandler+0x6a8>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d02c      	beq.n	8007046 <HAL_DMA_IRQHandler+0x516>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a7a      	ldr	r2, [pc, #488]	; (80071dc <HAL_DMA_IRQHandler+0x6ac>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d027      	beq.n	8007046 <HAL_DMA_IRQHandler+0x516>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a79      	ldr	r2, [pc, #484]	; (80071e0 <HAL_DMA_IRQHandler+0x6b0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d022      	beq.n	8007046 <HAL_DMA_IRQHandler+0x516>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a77      	ldr	r2, [pc, #476]	; (80071e4 <HAL_DMA_IRQHandler+0x6b4>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d01d      	beq.n	8007046 <HAL_DMA_IRQHandler+0x516>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a76      	ldr	r2, [pc, #472]	; (80071e8 <HAL_DMA_IRQHandler+0x6b8>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d018      	beq.n	8007046 <HAL_DMA_IRQHandler+0x516>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a74      	ldr	r2, [pc, #464]	; (80071ec <HAL_DMA_IRQHandler+0x6bc>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d013      	beq.n	8007046 <HAL_DMA_IRQHandler+0x516>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a73      	ldr	r2, [pc, #460]	; (80071f0 <HAL_DMA_IRQHandler+0x6c0>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d00e      	beq.n	8007046 <HAL_DMA_IRQHandler+0x516>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a71      	ldr	r2, [pc, #452]	; (80071f4 <HAL_DMA_IRQHandler+0x6c4>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d009      	beq.n	8007046 <HAL_DMA_IRQHandler+0x516>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a70      	ldr	r2, [pc, #448]	; (80071f8 <HAL_DMA_IRQHandler+0x6c8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d004      	beq.n	8007046 <HAL_DMA_IRQHandler+0x516>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a6e      	ldr	r2, [pc, #440]	; (80071fc <HAL_DMA_IRQHandler+0x6cc>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d10a      	bne.n	800705c <HAL_DMA_IRQHandler+0x52c>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0308 	and.w	r3, r3, #8
 8007050:	2b00      	cmp	r3, #0
 8007052:	bf14      	ite	ne
 8007054:	2301      	movne	r3, #1
 8007056:	2300      	moveq	r3, #0
 8007058:	b2db      	uxtb	r3, r3
 800705a:	e009      	b.n	8007070 <HAL_DMA_IRQHandler+0x540>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0304 	and.w	r3, r3, #4
 8007066:	2b00      	cmp	r3, #0
 8007068:	bf14      	ite	ne
 800706a:	2301      	movne	r3, #1
 800706c:	2300      	moveq	r3, #0
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d03e      	beq.n	80070f2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007078:	f003 031f 	and.w	r3, r3, #31
 800707c:	2210      	movs	r2, #16
 800707e:	409a      	lsls	r2, r3
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d018      	beq.n	80070c4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d108      	bne.n	80070b2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d024      	beq.n	80070f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	4798      	blx	r3
 80070b0:	e01f      	b.n	80070f2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d01b      	beq.n	80070f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	4798      	blx	r3
 80070c2:	e016      	b.n	80070f2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d107      	bne.n	80070e2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0208 	bic.w	r2, r2, #8
 80070e0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f6:	f003 031f 	and.w	r3, r3, #31
 80070fa:	2220      	movs	r2, #32
 80070fc:	409a      	lsls	r2, r3
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	4013      	ands	r3, r2
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 8110 	beq.w	8007328 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a2c      	ldr	r2, [pc, #176]	; (80071c0 <HAL_DMA_IRQHandler+0x690>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d04a      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x678>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a2b      	ldr	r2, [pc, #172]	; (80071c4 <HAL_DMA_IRQHandler+0x694>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d045      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x678>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a29      	ldr	r2, [pc, #164]	; (80071c8 <HAL_DMA_IRQHandler+0x698>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d040      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x678>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a28      	ldr	r2, [pc, #160]	; (80071cc <HAL_DMA_IRQHandler+0x69c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d03b      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x678>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a26      	ldr	r2, [pc, #152]	; (80071d0 <HAL_DMA_IRQHandler+0x6a0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d036      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x678>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a25      	ldr	r2, [pc, #148]	; (80071d4 <HAL_DMA_IRQHandler+0x6a4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d031      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x678>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a23      	ldr	r2, [pc, #140]	; (80071d8 <HAL_DMA_IRQHandler+0x6a8>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d02c      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x678>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a22      	ldr	r2, [pc, #136]	; (80071dc <HAL_DMA_IRQHandler+0x6ac>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d027      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x678>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a20      	ldr	r2, [pc, #128]	; (80071e0 <HAL_DMA_IRQHandler+0x6b0>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d022      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x678>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a1f      	ldr	r2, [pc, #124]	; (80071e4 <HAL_DMA_IRQHandler+0x6b4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d01d      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x678>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <HAL_DMA_IRQHandler+0x6b8>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d018      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x678>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a1c      	ldr	r2, [pc, #112]	; (80071ec <HAL_DMA_IRQHandler+0x6bc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d013      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x678>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a1a      	ldr	r2, [pc, #104]	; (80071f0 <HAL_DMA_IRQHandler+0x6c0>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d00e      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x678>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a19      	ldr	r2, [pc, #100]	; (80071f4 <HAL_DMA_IRQHandler+0x6c4>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d009      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x678>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a17      	ldr	r2, [pc, #92]	; (80071f8 <HAL_DMA_IRQHandler+0x6c8>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d004      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x678>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a16      	ldr	r2, [pc, #88]	; (80071fc <HAL_DMA_IRQHandler+0x6cc>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d12b      	bne.n	8007200 <HAL_DMA_IRQHandler+0x6d0>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0310 	and.w	r3, r3, #16
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	bf14      	ite	ne
 80071b6:	2301      	movne	r3, #1
 80071b8:	2300      	moveq	r3, #0
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	e02a      	b.n	8007214 <HAL_DMA_IRQHandler+0x6e4>
 80071be:	bf00      	nop
 80071c0:	40020010 	.word	0x40020010
 80071c4:	40020028 	.word	0x40020028
 80071c8:	40020040 	.word	0x40020040
 80071cc:	40020058 	.word	0x40020058
 80071d0:	40020070 	.word	0x40020070
 80071d4:	40020088 	.word	0x40020088
 80071d8:	400200a0 	.word	0x400200a0
 80071dc:	400200b8 	.word	0x400200b8
 80071e0:	40020410 	.word	0x40020410
 80071e4:	40020428 	.word	0x40020428
 80071e8:	40020440 	.word	0x40020440
 80071ec:	40020458 	.word	0x40020458
 80071f0:	40020470 	.word	0x40020470
 80071f4:	40020488 	.word	0x40020488
 80071f8:	400204a0 	.word	0x400204a0
 80071fc:	400204b8 	.word	0x400204b8
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b00      	cmp	r3, #0
 800720c:	bf14      	ite	ne
 800720e:	2301      	movne	r3, #1
 8007210:	2300      	moveq	r3, #0
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 8087 	beq.w	8007328 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800721e:	f003 031f 	and.w	r3, r3, #31
 8007222:	2220      	movs	r2, #32
 8007224:	409a      	lsls	r2, r3
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b04      	cmp	r3, #4
 8007234:	d139      	bne.n	80072aa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 0216 	bic.w	r2, r2, #22
 8007244:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	695a      	ldr	r2, [r3, #20]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007254:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	2b00      	cmp	r3, #0
 800725c:	d103      	bne.n	8007266 <HAL_DMA_IRQHandler+0x736>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007262:	2b00      	cmp	r3, #0
 8007264:	d007      	beq.n	8007276 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0208 	bic.w	r2, r2, #8
 8007274:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800727a:	f003 031f 	and.w	r3, r3, #31
 800727e:	223f      	movs	r2, #63	; 0x3f
 8007280:	409a      	lsls	r2, r3
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 834a 	beq.w	8007934 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	4798      	blx	r3
          }
          return;
 80072a8:	e344      	b.n	8007934 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d018      	beq.n	80072ea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d108      	bne.n	80072d8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d02c      	beq.n	8007328 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	4798      	blx	r3
 80072d6:	e027      	b.n	8007328 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d023      	beq.n	8007328 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	4798      	blx	r3
 80072e8:	e01e      	b.n	8007328 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10f      	bne.n	8007318 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 0210 	bic.w	r2, r2, #16
 8007306:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 8306 	beq.w	800793e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 8088 	beq.w	8007450 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2204      	movs	r2, #4
 8007344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a7a      	ldr	r2, [pc, #488]	; (8007538 <HAL_DMA_IRQHandler+0xa08>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d04a      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x8b8>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a79      	ldr	r2, [pc, #484]	; (800753c <HAL_DMA_IRQHandler+0xa0c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d045      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x8b8>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a77      	ldr	r2, [pc, #476]	; (8007540 <HAL_DMA_IRQHandler+0xa10>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d040      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x8b8>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a76      	ldr	r2, [pc, #472]	; (8007544 <HAL_DMA_IRQHandler+0xa14>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d03b      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x8b8>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a74      	ldr	r2, [pc, #464]	; (8007548 <HAL_DMA_IRQHandler+0xa18>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d036      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x8b8>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a73      	ldr	r2, [pc, #460]	; (800754c <HAL_DMA_IRQHandler+0xa1c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d031      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x8b8>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a71      	ldr	r2, [pc, #452]	; (8007550 <HAL_DMA_IRQHandler+0xa20>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d02c      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x8b8>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a70      	ldr	r2, [pc, #448]	; (8007554 <HAL_DMA_IRQHandler+0xa24>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d027      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x8b8>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a6e      	ldr	r2, [pc, #440]	; (8007558 <HAL_DMA_IRQHandler+0xa28>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d022      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x8b8>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a6d      	ldr	r2, [pc, #436]	; (800755c <HAL_DMA_IRQHandler+0xa2c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d01d      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x8b8>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a6b      	ldr	r2, [pc, #428]	; (8007560 <HAL_DMA_IRQHandler+0xa30>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d018      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x8b8>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a6a      	ldr	r2, [pc, #424]	; (8007564 <HAL_DMA_IRQHandler+0xa34>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d013      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x8b8>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a68      	ldr	r2, [pc, #416]	; (8007568 <HAL_DMA_IRQHandler+0xa38>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d00e      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x8b8>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a67      	ldr	r2, [pc, #412]	; (800756c <HAL_DMA_IRQHandler+0xa3c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d009      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x8b8>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a65      	ldr	r2, [pc, #404]	; (8007570 <HAL_DMA_IRQHandler+0xa40>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d004      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x8b8>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a64      	ldr	r2, [pc, #400]	; (8007574 <HAL_DMA_IRQHandler+0xa44>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d108      	bne.n	80073fa <HAL_DMA_IRQHandler+0x8ca>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0201 	bic.w	r2, r2, #1
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	e007      	b.n	800740a <HAL_DMA_IRQHandler+0x8da>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0201 	bic.w	r2, r2, #1
 8007408:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3301      	adds	r3, #1
 800740e:	60fb      	str	r3, [r7, #12]
 8007410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007412:	429a      	cmp	r2, r3
 8007414:	d307      	bcc.n	8007426 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1f2      	bne.n	800740a <HAL_DMA_IRQHandler+0x8da>
 8007424:	e000      	b.n	8007428 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007426:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d004      	beq.n	8007448 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2203      	movs	r2, #3
 8007442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007446:	e003      	b.n	8007450 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8272 	beq.w	800793e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	4798      	blx	r3
 8007462:	e26c      	b.n	800793e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a43      	ldr	r2, [pc, #268]	; (8007578 <HAL_DMA_IRQHandler+0xa48>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d022      	beq.n	80074b4 <HAL_DMA_IRQHandler+0x984>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a42      	ldr	r2, [pc, #264]	; (800757c <HAL_DMA_IRQHandler+0xa4c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d01d      	beq.n	80074b4 <HAL_DMA_IRQHandler+0x984>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a40      	ldr	r2, [pc, #256]	; (8007580 <HAL_DMA_IRQHandler+0xa50>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d018      	beq.n	80074b4 <HAL_DMA_IRQHandler+0x984>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a3f      	ldr	r2, [pc, #252]	; (8007584 <HAL_DMA_IRQHandler+0xa54>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d013      	beq.n	80074b4 <HAL_DMA_IRQHandler+0x984>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a3d      	ldr	r2, [pc, #244]	; (8007588 <HAL_DMA_IRQHandler+0xa58>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00e      	beq.n	80074b4 <HAL_DMA_IRQHandler+0x984>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a3c      	ldr	r2, [pc, #240]	; (800758c <HAL_DMA_IRQHandler+0xa5c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d009      	beq.n	80074b4 <HAL_DMA_IRQHandler+0x984>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a3a      	ldr	r2, [pc, #232]	; (8007590 <HAL_DMA_IRQHandler+0xa60>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d004      	beq.n	80074b4 <HAL_DMA_IRQHandler+0x984>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a39      	ldr	r2, [pc, #228]	; (8007594 <HAL_DMA_IRQHandler+0xa64>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d101      	bne.n	80074b8 <HAL_DMA_IRQHandler+0x988>
 80074b4:	2301      	movs	r3, #1
 80074b6:	e000      	b.n	80074ba <HAL_DMA_IRQHandler+0x98a>
 80074b8:	2300      	movs	r3, #0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 823f 	beq.w	800793e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074cc:	f003 031f 	and.w	r3, r3, #31
 80074d0:	2204      	movs	r2, #4
 80074d2:	409a      	lsls	r2, r3
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	4013      	ands	r3, r2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 80cd 	beq.w	8007678 <HAL_DMA_IRQHandler+0xb48>
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 80c7 	beq.w	8007678 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ee:	f003 031f 	and.w	r3, r3, #31
 80074f2:	2204      	movs	r2, #4
 80074f4:	409a      	lsls	r2, r3
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d049      	beq.n	8007598 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d109      	bne.n	8007522 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 8210 	beq.w	8007938 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007520:	e20a      	b.n	8007938 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 8206 	beq.w	8007938 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007534:	e200      	b.n	8007938 <HAL_DMA_IRQHandler+0xe08>
 8007536:	bf00      	nop
 8007538:	40020010 	.word	0x40020010
 800753c:	40020028 	.word	0x40020028
 8007540:	40020040 	.word	0x40020040
 8007544:	40020058 	.word	0x40020058
 8007548:	40020070 	.word	0x40020070
 800754c:	40020088 	.word	0x40020088
 8007550:	400200a0 	.word	0x400200a0
 8007554:	400200b8 	.word	0x400200b8
 8007558:	40020410 	.word	0x40020410
 800755c:	40020428 	.word	0x40020428
 8007560:	40020440 	.word	0x40020440
 8007564:	40020458 	.word	0x40020458
 8007568:	40020470 	.word	0x40020470
 800756c:	40020488 	.word	0x40020488
 8007570:	400204a0 	.word	0x400204a0
 8007574:	400204b8 	.word	0x400204b8
 8007578:	58025408 	.word	0x58025408
 800757c:	5802541c 	.word	0x5802541c
 8007580:	58025430 	.word	0x58025430
 8007584:	58025444 	.word	0x58025444
 8007588:	58025458 	.word	0x58025458
 800758c:	5802546c 	.word	0x5802546c
 8007590:	58025480 	.word	0x58025480
 8007594:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f003 0320 	and.w	r3, r3, #32
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d160      	bne.n	8007664 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a8c      	ldr	r2, [pc, #560]	; (80077d8 <HAL_DMA_IRQHandler+0xca8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d04a      	beq.n	8007642 <HAL_DMA_IRQHandler+0xb12>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a8a      	ldr	r2, [pc, #552]	; (80077dc <HAL_DMA_IRQHandler+0xcac>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d045      	beq.n	8007642 <HAL_DMA_IRQHandler+0xb12>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a89      	ldr	r2, [pc, #548]	; (80077e0 <HAL_DMA_IRQHandler+0xcb0>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d040      	beq.n	8007642 <HAL_DMA_IRQHandler+0xb12>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a87      	ldr	r2, [pc, #540]	; (80077e4 <HAL_DMA_IRQHandler+0xcb4>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d03b      	beq.n	8007642 <HAL_DMA_IRQHandler+0xb12>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a86      	ldr	r2, [pc, #536]	; (80077e8 <HAL_DMA_IRQHandler+0xcb8>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d036      	beq.n	8007642 <HAL_DMA_IRQHandler+0xb12>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a84      	ldr	r2, [pc, #528]	; (80077ec <HAL_DMA_IRQHandler+0xcbc>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d031      	beq.n	8007642 <HAL_DMA_IRQHandler+0xb12>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a83      	ldr	r2, [pc, #524]	; (80077f0 <HAL_DMA_IRQHandler+0xcc0>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d02c      	beq.n	8007642 <HAL_DMA_IRQHandler+0xb12>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a81      	ldr	r2, [pc, #516]	; (80077f4 <HAL_DMA_IRQHandler+0xcc4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d027      	beq.n	8007642 <HAL_DMA_IRQHandler+0xb12>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a80      	ldr	r2, [pc, #512]	; (80077f8 <HAL_DMA_IRQHandler+0xcc8>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d022      	beq.n	8007642 <HAL_DMA_IRQHandler+0xb12>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a7e      	ldr	r2, [pc, #504]	; (80077fc <HAL_DMA_IRQHandler+0xccc>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d01d      	beq.n	8007642 <HAL_DMA_IRQHandler+0xb12>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a7d      	ldr	r2, [pc, #500]	; (8007800 <HAL_DMA_IRQHandler+0xcd0>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d018      	beq.n	8007642 <HAL_DMA_IRQHandler+0xb12>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a7b      	ldr	r2, [pc, #492]	; (8007804 <HAL_DMA_IRQHandler+0xcd4>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d013      	beq.n	8007642 <HAL_DMA_IRQHandler+0xb12>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a7a      	ldr	r2, [pc, #488]	; (8007808 <HAL_DMA_IRQHandler+0xcd8>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d00e      	beq.n	8007642 <HAL_DMA_IRQHandler+0xb12>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a78      	ldr	r2, [pc, #480]	; (800780c <HAL_DMA_IRQHandler+0xcdc>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d009      	beq.n	8007642 <HAL_DMA_IRQHandler+0xb12>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a77      	ldr	r2, [pc, #476]	; (8007810 <HAL_DMA_IRQHandler+0xce0>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d004      	beq.n	8007642 <HAL_DMA_IRQHandler+0xb12>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a75      	ldr	r2, [pc, #468]	; (8007814 <HAL_DMA_IRQHandler+0xce4>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d108      	bne.n	8007654 <HAL_DMA_IRQHandler+0xb24>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 0208 	bic.w	r2, r2, #8
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	e007      	b.n	8007664 <HAL_DMA_IRQHandler+0xb34>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 0204 	bic.w	r2, r2, #4
 8007662:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 8165 	beq.w	8007938 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007676:	e15f      	b.n	8007938 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800767c:	f003 031f 	and.w	r3, r3, #31
 8007680:	2202      	movs	r2, #2
 8007682:	409a      	lsls	r2, r3
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	4013      	ands	r3, r2
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 80c5 	beq.w	8007818 <HAL_DMA_IRQHandler+0xce8>
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 80bf 	beq.w	8007818 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800769e:	f003 031f 	and.w	r3, r3, #31
 80076a2:	2202      	movs	r2, #2
 80076a4:	409a      	lsls	r2, r3
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d018      	beq.n	80076e6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d109      	bne.n	80076d2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 813a 	beq.w	800793c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076d0:	e134      	b.n	800793c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f000 8130 	beq.w	800793c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076e4:	e12a      	b.n	800793c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f003 0320 	and.w	r3, r3, #32
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d168      	bne.n	80077c2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a38      	ldr	r2, [pc, #224]	; (80077d8 <HAL_DMA_IRQHandler+0xca8>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d04a      	beq.n	8007790 <HAL_DMA_IRQHandler+0xc60>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a37      	ldr	r2, [pc, #220]	; (80077dc <HAL_DMA_IRQHandler+0xcac>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d045      	beq.n	8007790 <HAL_DMA_IRQHandler+0xc60>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a35      	ldr	r2, [pc, #212]	; (80077e0 <HAL_DMA_IRQHandler+0xcb0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d040      	beq.n	8007790 <HAL_DMA_IRQHandler+0xc60>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a34      	ldr	r2, [pc, #208]	; (80077e4 <HAL_DMA_IRQHandler+0xcb4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d03b      	beq.n	8007790 <HAL_DMA_IRQHandler+0xc60>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a32      	ldr	r2, [pc, #200]	; (80077e8 <HAL_DMA_IRQHandler+0xcb8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d036      	beq.n	8007790 <HAL_DMA_IRQHandler+0xc60>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a31      	ldr	r2, [pc, #196]	; (80077ec <HAL_DMA_IRQHandler+0xcbc>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d031      	beq.n	8007790 <HAL_DMA_IRQHandler+0xc60>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a2f      	ldr	r2, [pc, #188]	; (80077f0 <HAL_DMA_IRQHandler+0xcc0>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d02c      	beq.n	8007790 <HAL_DMA_IRQHandler+0xc60>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a2e      	ldr	r2, [pc, #184]	; (80077f4 <HAL_DMA_IRQHandler+0xcc4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d027      	beq.n	8007790 <HAL_DMA_IRQHandler+0xc60>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a2c      	ldr	r2, [pc, #176]	; (80077f8 <HAL_DMA_IRQHandler+0xcc8>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d022      	beq.n	8007790 <HAL_DMA_IRQHandler+0xc60>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a2b      	ldr	r2, [pc, #172]	; (80077fc <HAL_DMA_IRQHandler+0xccc>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d01d      	beq.n	8007790 <HAL_DMA_IRQHandler+0xc60>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a29      	ldr	r2, [pc, #164]	; (8007800 <HAL_DMA_IRQHandler+0xcd0>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d018      	beq.n	8007790 <HAL_DMA_IRQHandler+0xc60>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a28      	ldr	r2, [pc, #160]	; (8007804 <HAL_DMA_IRQHandler+0xcd4>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d013      	beq.n	8007790 <HAL_DMA_IRQHandler+0xc60>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a26      	ldr	r2, [pc, #152]	; (8007808 <HAL_DMA_IRQHandler+0xcd8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00e      	beq.n	8007790 <HAL_DMA_IRQHandler+0xc60>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a25      	ldr	r2, [pc, #148]	; (800780c <HAL_DMA_IRQHandler+0xcdc>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d009      	beq.n	8007790 <HAL_DMA_IRQHandler+0xc60>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a23      	ldr	r2, [pc, #140]	; (8007810 <HAL_DMA_IRQHandler+0xce0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d004      	beq.n	8007790 <HAL_DMA_IRQHandler+0xc60>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a22      	ldr	r2, [pc, #136]	; (8007814 <HAL_DMA_IRQHandler+0xce4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d108      	bne.n	80077a2 <HAL_DMA_IRQHandler+0xc72>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0214 	bic.w	r2, r2, #20
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	e007      	b.n	80077b2 <HAL_DMA_IRQHandler+0xc82>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 020a 	bic.w	r2, r2, #10
 80077b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f000 80b8 	beq.w	800793c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077d4:	e0b2      	b.n	800793c <HAL_DMA_IRQHandler+0xe0c>
 80077d6:	bf00      	nop
 80077d8:	40020010 	.word	0x40020010
 80077dc:	40020028 	.word	0x40020028
 80077e0:	40020040 	.word	0x40020040
 80077e4:	40020058 	.word	0x40020058
 80077e8:	40020070 	.word	0x40020070
 80077ec:	40020088 	.word	0x40020088
 80077f0:	400200a0 	.word	0x400200a0
 80077f4:	400200b8 	.word	0x400200b8
 80077f8:	40020410 	.word	0x40020410
 80077fc:	40020428 	.word	0x40020428
 8007800:	40020440 	.word	0x40020440
 8007804:	40020458 	.word	0x40020458
 8007808:	40020470 	.word	0x40020470
 800780c:	40020488 	.word	0x40020488
 8007810:	400204a0 	.word	0x400204a0
 8007814:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800781c:	f003 031f 	and.w	r3, r3, #31
 8007820:	2208      	movs	r2, #8
 8007822:	409a      	lsls	r2, r3
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	4013      	ands	r3, r2
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 8088 	beq.w	800793e <HAL_DMA_IRQHandler+0xe0e>
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f003 0308 	and.w	r3, r3, #8
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 8082 	beq.w	800793e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a41      	ldr	r2, [pc, #260]	; (8007944 <HAL_DMA_IRQHandler+0xe14>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d04a      	beq.n	80078da <HAL_DMA_IRQHandler+0xdaa>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a3f      	ldr	r2, [pc, #252]	; (8007948 <HAL_DMA_IRQHandler+0xe18>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d045      	beq.n	80078da <HAL_DMA_IRQHandler+0xdaa>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a3e      	ldr	r2, [pc, #248]	; (800794c <HAL_DMA_IRQHandler+0xe1c>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d040      	beq.n	80078da <HAL_DMA_IRQHandler+0xdaa>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a3c      	ldr	r2, [pc, #240]	; (8007950 <HAL_DMA_IRQHandler+0xe20>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d03b      	beq.n	80078da <HAL_DMA_IRQHandler+0xdaa>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a3b      	ldr	r2, [pc, #236]	; (8007954 <HAL_DMA_IRQHandler+0xe24>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d036      	beq.n	80078da <HAL_DMA_IRQHandler+0xdaa>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a39      	ldr	r2, [pc, #228]	; (8007958 <HAL_DMA_IRQHandler+0xe28>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d031      	beq.n	80078da <HAL_DMA_IRQHandler+0xdaa>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a38      	ldr	r2, [pc, #224]	; (800795c <HAL_DMA_IRQHandler+0xe2c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d02c      	beq.n	80078da <HAL_DMA_IRQHandler+0xdaa>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a36      	ldr	r2, [pc, #216]	; (8007960 <HAL_DMA_IRQHandler+0xe30>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d027      	beq.n	80078da <HAL_DMA_IRQHandler+0xdaa>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a35      	ldr	r2, [pc, #212]	; (8007964 <HAL_DMA_IRQHandler+0xe34>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d022      	beq.n	80078da <HAL_DMA_IRQHandler+0xdaa>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a33      	ldr	r2, [pc, #204]	; (8007968 <HAL_DMA_IRQHandler+0xe38>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d01d      	beq.n	80078da <HAL_DMA_IRQHandler+0xdaa>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a32      	ldr	r2, [pc, #200]	; (800796c <HAL_DMA_IRQHandler+0xe3c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d018      	beq.n	80078da <HAL_DMA_IRQHandler+0xdaa>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a30      	ldr	r2, [pc, #192]	; (8007970 <HAL_DMA_IRQHandler+0xe40>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d013      	beq.n	80078da <HAL_DMA_IRQHandler+0xdaa>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a2f      	ldr	r2, [pc, #188]	; (8007974 <HAL_DMA_IRQHandler+0xe44>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d00e      	beq.n	80078da <HAL_DMA_IRQHandler+0xdaa>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a2d      	ldr	r2, [pc, #180]	; (8007978 <HAL_DMA_IRQHandler+0xe48>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d009      	beq.n	80078da <HAL_DMA_IRQHandler+0xdaa>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a2c      	ldr	r2, [pc, #176]	; (800797c <HAL_DMA_IRQHandler+0xe4c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d004      	beq.n	80078da <HAL_DMA_IRQHandler+0xdaa>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a2a      	ldr	r2, [pc, #168]	; (8007980 <HAL_DMA_IRQHandler+0xe50>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d108      	bne.n	80078ec <HAL_DMA_IRQHandler+0xdbc>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 021c 	bic.w	r2, r2, #28
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	e007      	b.n	80078fc <HAL_DMA_IRQHandler+0xdcc>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 020e 	bic.w	r2, r2, #14
 80078fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007900:	f003 031f 	and.w	r3, r3, #31
 8007904:	2201      	movs	r2, #1
 8007906:	409a      	lsls	r2, r3
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007926:	2b00      	cmp	r3, #0
 8007928:	d009      	beq.n	800793e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
 8007932:	e004      	b.n	800793e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007934:	bf00      	nop
 8007936:	e002      	b.n	800793e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007938:	bf00      	nop
 800793a:	e000      	b.n	800793e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800793c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800793e:	3728      	adds	r7, #40	; 0x28
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	40020010 	.word	0x40020010
 8007948:	40020028 	.word	0x40020028
 800794c:	40020040 	.word	0x40020040
 8007950:	40020058 	.word	0x40020058
 8007954:	40020070 	.word	0x40020070
 8007958:	40020088 	.word	0x40020088
 800795c:	400200a0 	.word	0x400200a0
 8007960:	400200b8 	.word	0x400200b8
 8007964:	40020410 	.word	0x40020410
 8007968:	40020428 	.word	0x40020428
 800796c:	40020440 	.word	0x40020440
 8007970:	40020458 	.word	0x40020458
 8007974:	40020470 	.word	0x40020470
 8007978:	40020488 	.word	0x40020488
 800797c:	400204a0 	.word	0x400204a0
 8007980:	400204b8 	.word	0x400204b8

08007984 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007992:	b2db      	uxtb	r3, r3
}
 8007994:	4618      	mov	r0, r3
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a84      	ldr	r2, [pc, #528]	; (8007be8 <DMA_SetConfig+0x230>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d072      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a82      	ldr	r2, [pc, #520]	; (8007bec <DMA_SetConfig+0x234>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d06d      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a81      	ldr	r2, [pc, #516]	; (8007bf0 <DMA_SetConfig+0x238>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d068      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a7f      	ldr	r2, [pc, #508]	; (8007bf4 <DMA_SetConfig+0x23c>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d063      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a7e      	ldr	r2, [pc, #504]	; (8007bf8 <DMA_SetConfig+0x240>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d05e      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a7c      	ldr	r2, [pc, #496]	; (8007bfc <DMA_SetConfig+0x244>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d059      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a7b      	ldr	r2, [pc, #492]	; (8007c00 <DMA_SetConfig+0x248>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d054      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a79      	ldr	r2, [pc, #484]	; (8007c04 <DMA_SetConfig+0x24c>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d04f      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a78      	ldr	r2, [pc, #480]	; (8007c08 <DMA_SetConfig+0x250>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d04a      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a76      	ldr	r2, [pc, #472]	; (8007c0c <DMA_SetConfig+0x254>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d045      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a75      	ldr	r2, [pc, #468]	; (8007c10 <DMA_SetConfig+0x258>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d040      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a73      	ldr	r2, [pc, #460]	; (8007c14 <DMA_SetConfig+0x25c>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d03b      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a72      	ldr	r2, [pc, #456]	; (8007c18 <DMA_SetConfig+0x260>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d036      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a70      	ldr	r2, [pc, #448]	; (8007c1c <DMA_SetConfig+0x264>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d031      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a6f      	ldr	r2, [pc, #444]	; (8007c20 <DMA_SetConfig+0x268>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d02c      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a6d      	ldr	r2, [pc, #436]	; (8007c24 <DMA_SetConfig+0x26c>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d027      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a6c      	ldr	r2, [pc, #432]	; (8007c28 <DMA_SetConfig+0x270>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d022      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a6a      	ldr	r2, [pc, #424]	; (8007c2c <DMA_SetConfig+0x274>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d01d      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a69      	ldr	r2, [pc, #420]	; (8007c30 <DMA_SetConfig+0x278>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d018      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a67      	ldr	r2, [pc, #412]	; (8007c34 <DMA_SetConfig+0x27c>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d013      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a66      	ldr	r2, [pc, #408]	; (8007c38 <DMA_SetConfig+0x280>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d00e      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a64      	ldr	r2, [pc, #400]	; (8007c3c <DMA_SetConfig+0x284>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d009      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a63      	ldr	r2, [pc, #396]	; (8007c40 <DMA_SetConfig+0x288>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d004      	beq.n	8007ac2 <DMA_SetConfig+0x10a>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a61      	ldr	r2, [pc, #388]	; (8007c44 <DMA_SetConfig+0x28c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d101      	bne.n	8007ac6 <DMA_SetConfig+0x10e>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e000      	b.n	8007ac8 <DMA_SetConfig+0x110>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00d      	beq.n	8007ae8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007ad4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d004      	beq.n	8007ae8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007ae6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a3e      	ldr	r2, [pc, #248]	; (8007be8 <DMA_SetConfig+0x230>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d04a      	beq.n	8007b88 <DMA_SetConfig+0x1d0>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a3d      	ldr	r2, [pc, #244]	; (8007bec <DMA_SetConfig+0x234>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d045      	beq.n	8007b88 <DMA_SetConfig+0x1d0>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a3b      	ldr	r2, [pc, #236]	; (8007bf0 <DMA_SetConfig+0x238>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d040      	beq.n	8007b88 <DMA_SetConfig+0x1d0>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a3a      	ldr	r2, [pc, #232]	; (8007bf4 <DMA_SetConfig+0x23c>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d03b      	beq.n	8007b88 <DMA_SetConfig+0x1d0>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a38      	ldr	r2, [pc, #224]	; (8007bf8 <DMA_SetConfig+0x240>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d036      	beq.n	8007b88 <DMA_SetConfig+0x1d0>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a37      	ldr	r2, [pc, #220]	; (8007bfc <DMA_SetConfig+0x244>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d031      	beq.n	8007b88 <DMA_SetConfig+0x1d0>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a35      	ldr	r2, [pc, #212]	; (8007c00 <DMA_SetConfig+0x248>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d02c      	beq.n	8007b88 <DMA_SetConfig+0x1d0>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a34      	ldr	r2, [pc, #208]	; (8007c04 <DMA_SetConfig+0x24c>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d027      	beq.n	8007b88 <DMA_SetConfig+0x1d0>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a32      	ldr	r2, [pc, #200]	; (8007c08 <DMA_SetConfig+0x250>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d022      	beq.n	8007b88 <DMA_SetConfig+0x1d0>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a31      	ldr	r2, [pc, #196]	; (8007c0c <DMA_SetConfig+0x254>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d01d      	beq.n	8007b88 <DMA_SetConfig+0x1d0>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a2f      	ldr	r2, [pc, #188]	; (8007c10 <DMA_SetConfig+0x258>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d018      	beq.n	8007b88 <DMA_SetConfig+0x1d0>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a2e      	ldr	r2, [pc, #184]	; (8007c14 <DMA_SetConfig+0x25c>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d013      	beq.n	8007b88 <DMA_SetConfig+0x1d0>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a2c      	ldr	r2, [pc, #176]	; (8007c18 <DMA_SetConfig+0x260>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00e      	beq.n	8007b88 <DMA_SetConfig+0x1d0>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a2b      	ldr	r2, [pc, #172]	; (8007c1c <DMA_SetConfig+0x264>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d009      	beq.n	8007b88 <DMA_SetConfig+0x1d0>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a29      	ldr	r2, [pc, #164]	; (8007c20 <DMA_SetConfig+0x268>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d004      	beq.n	8007b88 <DMA_SetConfig+0x1d0>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a28      	ldr	r2, [pc, #160]	; (8007c24 <DMA_SetConfig+0x26c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d101      	bne.n	8007b8c <DMA_SetConfig+0x1d4>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e000      	b.n	8007b8e <DMA_SetConfig+0x1d6>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d05a      	beq.n	8007c48 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b96:	f003 031f 	and.w	r3, r3, #31
 8007b9a:	223f      	movs	r2, #63	; 0x3f
 8007b9c:	409a      	lsls	r2, r3
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007bb0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	2b40      	cmp	r3, #64	; 0x40
 8007bc0:	d108      	bne.n	8007bd4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007bd2:	e087      	b.n	8007ce4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	60da      	str	r2, [r3, #12]
}
 8007be4:	e07e      	b.n	8007ce4 <DMA_SetConfig+0x32c>
 8007be6:	bf00      	nop
 8007be8:	40020010 	.word	0x40020010
 8007bec:	40020028 	.word	0x40020028
 8007bf0:	40020040 	.word	0x40020040
 8007bf4:	40020058 	.word	0x40020058
 8007bf8:	40020070 	.word	0x40020070
 8007bfc:	40020088 	.word	0x40020088
 8007c00:	400200a0 	.word	0x400200a0
 8007c04:	400200b8 	.word	0x400200b8
 8007c08:	40020410 	.word	0x40020410
 8007c0c:	40020428 	.word	0x40020428
 8007c10:	40020440 	.word	0x40020440
 8007c14:	40020458 	.word	0x40020458
 8007c18:	40020470 	.word	0x40020470
 8007c1c:	40020488 	.word	0x40020488
 8007c20:	400204a0 	.word	0x400204a0
 8007c24:	400204b8 	.word	0x400204b8
 8007c28:	58025408 	.word	0x58025408
 8007c2c:	5802541c 	.word	0x5802541c
 8007c30:	58025430 	.word	0x58025430
 8007c34:	58025444 	.word	0x58025444
 8007c38:	58025458 	.word	0x58025458
 8007c3c:	5802546c 	.word	0x5802546c
 8007c40:	58025480 	.word	0x58025480
 8007c44:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a28      	ldr	r2, [pc, #160]	; (8007cf0 <DMA_SetConfig+0x338>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d022      	beq.n	8007c98 <DMA_SetConfig+0x2e0>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a27      	ldr	r2, [pc, #156]	; (8007cf4 <DMA_SetConfig+0x33c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d01d      	beq.n	8007c98 <DMA_SetConfig+0x2e0>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a25      	ldr	r2, [pc, #148]	; (8007cf8 <DMA_SetConfig+0x340>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d018      	beq.n	8007c98 <DMA_SetConfig+0x2e0>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a24      	ldr	r2, [pc, #144]	; (8007cfc <DMA_SetConfig+0x344>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d013      	beq.n	8007c98 <DMA_SetConfig+0x2e0>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a22      	ldr	r2, [pc, #136]	; (8007d00 <DMA_SetConfig+0x348>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00e      	beq.n	8007c98 <DMA_SetConfig+0x2e0>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a21      	ldr	r2, [pc, #132]	; (8007d04 <DMA_SetConfig+0x34c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d009      	beq.n	8007c98 <DMA_SetConfig+0x2e0>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1f      	ldr	r2, [pc, #124]	; (8007d08 <DMA_SetConfig+0x350>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d004      	beq.n	8007c98 <DMA_SetConfig+0x2e0>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1e      	ldr	r2, [pc, #120]	; (8007d0c <DMA_SetConfig+0x354>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d101      	bne.n	8007c9c <DMA_SetConfig+0x2e4>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e000      	b.n	8007c9e <DMA_SetConfig+0x2e6>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d020      	beq.n	8007ce4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ca6:	f003 031f 	and.w	r3, r3, #31
 8007caa:	2201      	movs	r2, #1
 8007cac:	409a      	lsls	r2, r3
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	2b40      	cmp	r3, #64	; 0x40
 8007cc0:	d108      	bne.n	8007cd4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	60da      	str	r2, [r3, #12]
}
 8007cd2:	e007      	b.n	8007ce4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	60da      	str	r2, [r3, #12]
}
 8007ce4:	bf00      	nop
 8007ce6:	371c      	adds	r7, #28
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	58025408 	.word	0x58025408
 8007cf4:	5802541c 	.word	0x5802541c
 8007cf8:	58025430 	.word	0x58025430
 8007cfc:	58025444 	.word	0x58025444
 8007d00:	58025458 	.word	0x58025458
 8007d04:	5802546c 	.word	0x5802546c
 8007d08:	58025480 	.word	0x58025480
 8007d0c:	58025494 	.word	0x58025494

08007d10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a42      	ldr	r2, [pc, #264]	; (8007e28 <DMA_CalcBaseAndBitshift+0x118>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d04a      	beq.n	8007db8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a41      	ldr	r2, [pc, #260]	; (8007e2c <DMA_CalcBaseAndBitshift+0x11c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d045      	beq.n	8007db8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a3f      	ldr	r2, [pc, #252]	; (8007e30 <DMA_CalcBaseAndBitshift+0x120>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d040      	beq.n	8007db8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a3e      	ldr	r2, [pc, #248]	; (8007e34 <DMA_CalcBaseAndBitshift+0x124>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d03b      	beq.n	8007db8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a3c      	ldr	r2, [pc, #240]	; (8007e38 <DMA_CalcBaseAndBitshift+0x128>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d036      	beq.n	8007db8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a3b      	ldr	r2, [pc, #236]	; (8007e3c <DMA_CalcBaseAndBitshift+0x12c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d031      	beq.n	8007db8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a39      	ldr	r2, [pc, #228]	; (8007e40 <DMA_CalcBaseAndBitshift+0x130>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d02c      	beq.n	8007db8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a38      	ldr	r2, [pc, #224]	; (8007e44 <DMA_CalcBaseAndBitshift+0x134>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d027      	beq.n	8007db8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a36      	ldr	r2, [pc, #216]	; (8007e48 <DMA_CalcBaseAndBitshift+0x138>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d022      	beq.n	8007db8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a35      	ldr	r2, [pc, #212]	; (8007e4c <DMA_CalcBaseAndBitshift+0x13c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d01d      	beq.n	8007db8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a33      	ldr	r2, [pc, #204]	; (8007e50 <DMA_CalcBaseAndBitshift+0x140>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d018      	beq.n	8007db8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a32      	ldr	r2, [pc, #200]	; (8007e54 <DMA_CalcBaseAndBitshift+0x144>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d013      	beq.n	8007db8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a30      	ldr	r2, [pc, #192]	; (8007e58 <DMA_CalcBaseAndBitshift+0x148>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00e      	beq.n	8007db8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a2f      	ldr	r2, [pc, #188]	; (8007e5c <DMA_CalcBaseAndBitshift+0x14c>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d009      	beq.n	8007db8 <DMA_CalcBaseAndBitshift+0xa8>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a2d      	ldr	r2, [pc, #180]	; (8007e60 <DMA_CalcBaseAndBitshift+0x150>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d004      	beq.n	8007db8 <DMA_CalcBaseAndBitshift+0xa8>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a2c      	ldr	r2, [pc, #176]	; (8007e64 <DMA_CalcBaseAndBitshift+0x154>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d101      	bne.n	8007dbc <DMA_CalcBaseAndBitshift+0xac>
 8007db8:	2301      	movs	r3, #1
 8007dba:	e000      	b.n	8007dbe <DMA_CalcBaseAndBitshift+0xae>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d024      	beq.n	8007e0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	3b10      	subs	r3, #16
 8007dca:	4a27      	ldr	r2, [pc, #156]	; (8007e68 <DMA_CalcBaseAndBitshift+0x158>)
 8007dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd0:	091b      	lsrs	r3, r3, #4
 8007dd2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f003 0307 	and.w	r3, r3, #7
 8007dda:	4a24      	ldr	r2, [pc, #144]	; (8007e6c <DMA_CalcBaseAndBitshift+0x15c>)
 8007ddc:	5cd3      	ldrb	r3, [r2, r3]
 8007dde:	461a      	mov	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d908      	bls.n	8007dfc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	4b1f      	ldr	r3, [pc, #124]	; (8007e70 <DMA_CalcBaseAndBitshift+0x160>)
 8007df2:	4013      	ands	r3, r2
 8007df4:	1d1a      	adds	r2, r3, #4
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	659a      	str	r2, [r3, #88]	; 0x58
 8007dfa:	e00d      	b.n	8007e18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	4b1b      	ldr	r3, [pc, #108]	; (8007e70 <DMA_CalcBaseAndBitshift+0x160>)
 8007e04:	4013      	ands	r3, r2
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6593      	str	r3, [r2, #88]	; 0x58
 8007e0a:	e005      	b.n	8007e18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	40020010 	.word	0x40020010
 8007e2c:	40020028 	.word	0x40020028
 8007e30:	40020040 	.word	0x40020040
 8007e34:	40020058 	.word	0x40020058
 8007e38:	40020070 	.word	0x40020070
 8007e3c:	40020088 	.word	0x40020088
 8007e40:	400200a0 	.word	0x400200a0
 8007e44:	400200b8 	.word	0x400200b8
 8007e48:	40020410 	.word	0x40020410
 8007e4c:	40020428 	.word	0x40020428
 8007e50:	40020440 	.word	0x40020440
 8007e54:	40020458 	.word	0x40020458
 8007e58:	40020470 	.word	0x40020470
 8007e5c:	40020488 	.word	0x40020488
 8007e60:	400204a0 	.word	0x400204a0
 8007e64:	400204b8 	.word	0x400204b8
 8007e68:	aaaaaaab 	.word	0xaaaaaaab
 8007e6c:	08014664 	.word	0x08014664
 8007e70:	fffffc00 	.word	0xfffffc00

08007e74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d120      	bne.n	8007eca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8c:	2b03      	cmp	r3, #3
 8007e8e:	d858      	bhi.n	8007f42 <DMA_CheckFifoParam+0xce>
 8007e90:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <DMA_CheckFifoParam+0x24>)
 8007e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e96:	bf00      	nop
 8007e98:	08007ea9 	.word	0x08007ea9
 8007e9c:	08007ebb 	.word	0x08007ebb
 8007ea0:	08007ea9 	.word	0x08007ea9
 8007ea4:	08007f43 	.word	0x08007f43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d048      	beq.n	8007f46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007eb8:	e045      	b.n	8007f46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ec2:	d142      	bne.n	8007f4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ec8:	e03f      	b.n	8007f4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ed2:	d123      	bne.n	8007f1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed8:	2b03      	cmp	r3, #3
 8007eda:	d838      	bhi.n	8007f4e <DMA_CheckFifoParam+0xda>
 8007edc:	a201      	add	r2, pc, #4	; (adr r2, 8007ee4 <DMA_CheckFifoParam+0x70>)
 8007ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee2:	bf00      	nop
 8007ee4:	08007ef5 	.word	0x08007ef5
 8007ee8:	08007efb 	.word	0x08007efb
 8007eec:	08007ef5 	.word	0x08007ef5
 8007ef0:	08007f0d 	.word	0x08007f0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	73fb      	strb	r3, [r7, #15]
        break;
 8007ef8:	e030      	b.n	8007f5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d025      	beq.n	8007f52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f0a:	e022      	b.n	8007f52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f14:	d11f      	bne.n	8007f56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f1a:	e01c      	b.n	8007f56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d902      	bls.n	8007f2a <DMA_CheckFifoParam+0xb6>
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d003      	beq.n	8007f30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007f28:	e018      	b.n	8007f5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	73fb      	strb	r3, [r7, #15]
        break;
 8007f2e:	e015      	b.n	8007f5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00e      	beq.n	8007f5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f40:	e00b      	b.n	8007f5a <DMA_CheckFifoParam+0xe6>
        break;
 8007f42:	bf00      	nop
 8007f44:	e00a      	b.n	8007f5c <DMA_CheckFifoParam+0xe8>
        break;
 8007f46:	bf00      	nop
 8007f48:	e008      	b.n	8007f5c <DMA_CheckFifoParam+0xe8>
        break;
 8007f4a:	bf00      	nop
 8007f4c:	e006      	b.n	8007f5c <DMA_CheckFifoParam+0xe8>
        break;
 8007f4e:	bf00      	nop
 8007f50:	e004      	b.n	8007f5c <DMA_CheckFifoParam+0xe8>
        break;
 8007f52:	bf00      	nop
 8007f54:	e002      	b.n	8007f5c <DMA_CheckFifoParam+0xe8>
        break;
 8007f56:	bf00      	nop
 8007f58:	e000      	b.n	8007f5c <DMA_CheckFifoParam+0xe8>
    break;
 8007f5a:	bf00      	nop
    }
  }

  return status;
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop

08007f6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a38      	ldr	r2, [pc, #224]	; (8008060 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d022      	beq.n	8007fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a36      	ldr	r2, [pc, #216]	; (8008064 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d01d      	beq.n	8007fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a35      	ldr	r2, [pc, #212]	; (8008068 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d018      	beq.n	8007fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a33      	ldr	r2, [pc, #204]	; (800806c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d013      	beq.n	8007fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a32      	ldr	r2, [pc, #200]	; (8008070 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d00e      	beq.n	8007fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a30      	ldr	r2, [pc, #192]	; (8008074 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d009      	beq.n	8007fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a2f      	ldr	r2, [pc, #188]	; (8008078 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d004      	beq.n	8007fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a2d      	ldr	r2, [pc, #180]	; (800807c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d101      	bne.n	8007fce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e000      	b.n	8007fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d01a      	beq.n	800800a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	3b08      	subs	r3, #8
 8007fdc:	4a28      	ldr	r2, [pc, #160]	; (8008080 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007fde:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe2:	091b      	lsrs	r3, r3, #4
 8007fe4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	4b26      	ldr	r3, [pc, #152]	; (8008084 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007fea:	4413      	add	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	461a      	mov	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a24      	ldr	r2, [pc, #144]	; (8008088 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007ff8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f003 031f 	and.w	r3, r3, #31
 8008000:	2201      	movs	r2, #1
 8008002:	409a      	lsls	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008008:	e024      	b.n	8008054 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	3b10      	subs	r3, #16
 8008012:	4a1e      	ldr	r2, [pc, #120]	; (800808c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008014:	fba2 2303 	umull	r2, r3, r2, r3
 8008018:	091b      	lsrs	r3, r3, #4
 800801a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	4a1c      	ldr	r2, [pc, #112]	; (8008090 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d806      	bhi.n	8008032 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	4a1b      	ldr	r2, [pc, #108]	; (8008094 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d902      	bls.n	8008032 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3308      	adds	r3, #8
 8008030:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	4b18      	ldr	r3, [pc, #96]	; (8008098 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008036:	4413      	add	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	461a      	mov	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a16      	ldr	r2, [pc, #88]	; (800809c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008044:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f003 031f 	and.w	r3, r3, #31
 800804c:	2201      	movs	r2, #1
 800804e:	409a      	lsls	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008054:	bf00      	nop
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	58025408 	.word	0x58025408
 8008064:	5802541c 	.word	0x5802541c
 8008068:	58025430 	.word	0x58025430
 800806c:	58025444 	.word	0x58025444
 8008070:	58025458 	.word	0x58025458
 8008074:	5802546c 	.word	0x5802546c
 8008078:	58025480 	.word	0x58025480
 800807c:	58025494 	.word	0x58025494
 8008080:	cccccccd 	.word	0xcccccccd
 8008084:	16009600 	.word	0x16009600
 8008088:	58025880 	.word	0x58025880
 800808c:	aaaaaaab 	.word	0xaaaaaaab
 8008090:	400204b8 	.word	0x400204b8
 8008094:	4002040f 	.word	0x4002040f
 8008098:	10008200 	.word	0x10008200
 800809c:	40020880 	.word	0x40020880

080080a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d04a      	beq.n	800814c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2b08      	cmp	r3, #8
 80080ba:	d847      	bhi.n	800814c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a25      	ldr	r2, [pc, #148]	; (8008158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d022      	beq.n	800810c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a24      	ldr	r2, [pc, #144]	; (800815c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d01d      	beq.n	800810c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a22      	ldr	r2, [pc, #136]	; (8008160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d018      	beq.n	800810c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a21      	ldr	r2, [pc, #132]	; (8008164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d013      	beq.n	800810c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a1f      	ldr	r2, [pc, #124]	; (8008168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d00e      	beq.n	800810c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a1e      	ldr	r2, [pc, #120]	; (800816c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d009      	beq.n	800810c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a1c      	ldr	r2, [pc, #112]	; (8008170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d004      	beq.n	800810c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a1b      	ldr	r2, [pc, #108]	; (8008174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d101      	bne.n	8008110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800810c:	2301      	movs	r3, #1
 800810e:	e000      	b.n	8008112 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008110:	2300      	movs	r3, #0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	4b17      	ldr	r3, [pc, #92]	; (8008178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	461a      	mov	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a15      	ldr	r2, [pc, #84]	; (800817c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008128:	671a      	str	r2, [r3, #112]	; 0x70
 800812a:	e009      	b.n	8008140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	4b14      	ldr	r3, [pc, #80]	; (8008180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008130:	4413      	add	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	461a      	mov	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a11      	ldr	r2, [pc, #68]	; (8008184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800813e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	3b01      	subs	r3, #1
 8008144:	2201      	movs	r2, #1
 8008146:	409a      	lsls	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800814c:	bf00      	nop
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	58025408 	.word	0x58025408
 800815c:	5802541c 	.word	0x5802541c
 8008160:	58025430 	.word	0x58025430
 8008164:	58025444 	.word	0x58025444
 8008168:	58025458 	.word	0x58025458
 800816c:	5802546c 	.word	0x5802546c
 8008170:	58025480 	.word	0x58025480
 8008174:	58025494 	.word	0x58025494
 8008178:	1600963f 	.word	0x1600963f
 800817c:	58025940 	.word	0x58025940
 8008180:	1000823f 	.word	0x1000823f
 8008184:	40020940 	.word	0x40020940

08008188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008188:	b480      	push	{r7}
 800818a:	b089      	sub	sp, #36	; 0x24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008192:	2300      	movs	r3, #0
 8008194:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008196:	4b89      	ldr	r3, [pc, #548]	; (80083bc <HAL_GPIO_Init+0x234>)
 8008198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800819a:	e194      	b.n	80084c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	2101      	movs	r1, #1
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	fa01 f303 	lsl.w	r3, r1, r3
 80081a8:	4013      	ands	r3, r2
 80081aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 8186 	beq.w	80084c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d00b      	beq.n	80081d4 <HAL_GPIO_Init+0x4c>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d007      	beq.n	80081d4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80081c8:	2b11      	cmp	r3, #17
 80081ca:	d003      	beq.n	80081d4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	2b12      	cmp	r3, #18
 80081d2:	d130      	bne.n	8008236 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	2203      	movs	r2, #3
 80081e0:	fa02 f303 	lsl.w	r3, r2, r3
 80081e4:	43db      	mvns	r3, r3
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	4013      	ands	r3, r2
 80081ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	68da      	ldr	r2, [r3, #12]
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	fa02 f303 	lsl.w	r3, r2, r3
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800820a:	2201      	movs	r2, #1
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	fa02 f303 	lsl.w	r3, r2, r3
 8008212:	43db      	mvns	r3, r3
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	4013      	ands	r3, r2
 8008218:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	091b      	lsrs	r3, r3, #4
 8008220:	f003 0201 	and.w	r2, r3, #1
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	fa02 f303 	lsl.w	r3, r2, r3
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	4313      	orrs	r3, r2
 800822e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	2203      	movs	r2, #3
 8008242:	fa02 f303 	lsl.w	r3, r2, r3
 8008246:	43db      	mvns	r3, r3
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	4013      	ands	r3, r2
 800824c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	005b      	lsls	r3, r3, #1
 8008256:	fa02 f303 	lsl.w	r3, r2, r3
 800825a:	69ba      	ldr	r2, [r7, #24]
 800825c:	4313      	orrs	r3, r2
 800825e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	2b02      	cmp	r3, #2
 800826c:	d003      	beq.n	8008276 <HAL_GPIO_Init+0xee>
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	2b12      	cmp	r3, #18
 8008274:	d123      	bne.n	80082be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	08da      	lsrs	r2, r3, #3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	3208      	adds	r2, #8
 800827e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	f003 0307 	and.w	r3, r3, #7
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	220f      	movs	r2, #15
 800828e:	fa02 f303 	lsl.w	r3, r2, r3
 8008292:	43db      	mvns	r3, r3
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	4013      	ands	r3, r2
 8008298:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	691a      	ldr	r2, [r3, #16]
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	f003 0307 	and.w	r3, r3, #7
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	fa02 f303 	lsl.w	r3, r2, r3
 80082aa:	69ba      	ldr	r2, [r7, #24]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	08da      	lsrs	r2, r3, #3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3208      	adds	r2, #8
 80082b8:	69b9      	ldr	r1, [r7, #24]
 80082ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	005b      	lsls	r3, r3, #1
 80082c8:	2203      	movs	r2, #3
 80082ca:	fa02 f303 	lsl.w	r3, r2, r3
 80082ce:	43db      	mvns	r3, r3
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	4013      	ands	r3, r2
 80082d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f003 0203 	and.w	r2, r3, #3
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	fa02 f303 	lsl.w	r3, r2, r3
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f000 80e0 	beq.w	80084c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008300:	4b2f      	ldr	r3, [pc, #188]	; (80083c0 <HAL_GPIO_Init+0x238>)
 8008302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008306:	4a2e      	ldr	r2, [pc, #184]	; (80083c0 <HAL_GPIO_Init+0x238>)
 8008308:	f043 0302 	orr.w	r3, r3, #2
 800830c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008310:	4b2b      	ldr	r3, [pc, #172]	; (80083c0 <HAL_GPIO_Init+0x238>)
 8008312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008316:	f003 0302 	and.w	r3, r3, #2
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800831e:	4a29      	ldr	r2, [pc, #164]	; (80083c4 <HAL_GPIO_Init+0x23c>)
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	089b      	lsrs	r3, r3, #2
 8008324:	3302      	adds	r3, #2
 8008326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800832a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	f003 0303 	and.w	r3, r3, #3
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	220f      	movs	r2, #15
 8008336:	fa02 f303 	lsl.w	r3, r2, r3
 800833a:	43db      	mvns	r3, r3
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	4013      	ands	r3, r2
 8008340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a20      	ldr	r2, [pc, #128]	; (80083c8 <HAL_GPIO_Init+0x240>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d052      	beq.n	80083f0 <HAL_GPIO_Init+0x268>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a1f      	ldr	r2, [pc, #124]	; (80083cc <HAL_GPIO_Init+0x244>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d031      	beq.n	80083b6 <HAL_GPIO_Init+0x22e>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a1e      	ldr	r2, [pc, #120]	; (80083d0 <HAL_GPIO_Init+0x248>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d02b      	beq.n	80083b2 <HAL_GPIO_Init+0x22a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a1d      	ldr	r2, [pc, #116]	; (80083d4 <HAL_GPIO_Init+0x24c>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d025      	beq.n	80083ae <HAL_GPIO_Init+0x226>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a1c      	ldr	r2, [pc, #112]	; (80083d8 <HAL_GPIO_Init+0x250>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d01f      	beq.n	80083aa <HAL_GPIO_Init+0x222>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a1b      	ldr	r2, [pc, #108]	; (80083dc <HAL_GPIO_Init+0x254>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d019      	beq.n	80083a6 <HAL_GPIO_Init+0x21e>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a1a      	ldr	r2, [pc, #104]	; (80083e0 <HAL_GPIO_Init+0x258>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d013      	beq.n	80083a2 <HAL_GPIO_Init+0x21a>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a19      	ldr	r2, [pc, #100]	; (80083e4 <HAL_GPIO_Init+0x25c>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d00d      	beq.n	800839e <HAL_GPIO_Init+0x216>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a18      	ldr	r2, [pc, #96]	; (80083e8 <HAL_GPIO_Init+0x260>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d007      	beq.n	800839a <HAL_GPIO_Init+0x212>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a17      	ldr	r2, [pc, #92]	; (80083ec <HAL_GPIO_Init+0x264>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d101      	bne.n	8008396 <HAL_GPIO_Init+0x20e>
 8008392:	2309      	movs	r3, #9
 8008394:	e02d      	b.n	80083f2 <HAL_GPIO_Init+0x26a>
 8008396:	230a      	movs	r3, #10
 8008398:	e02b      	b.n	80083f2 <HAL_GPIO_Init+0x26a>
 800839a:	2308      	movs	r3, #8
 800839c:	e029      	b.n	80083f2 <HAL_GPIO_Init+0x26a>
 800839e:	2307      	movs	r3, #7
 80083a0:	e027      	b.n	80083f2 <HAL_GPIO_Init+0x26a>
 80083a2:	2306      	movs	r3, #6
 80083a4:	e025      	b.n	80083f2 <HAL_GPIO_Init+0x26a>
 80083a6:	2305      	movs	r3, #5
 80083a8:	e023      	b.n	80083f2 <HAL_GPIO_Init+0x26a>
 80083aa:	2304      	movs	r3, #4
 80083ac:	e021      	b.n	80083f2 <HAL_GPIO_Init+0x26a>
 80083ae:	2303      	movs	r3, #3
 80083b0:	e01f      	b.n	80083f2 <HAL_GPIO_Init+0x26a>
 80083b2:	2302      	movs	r3, #2
 80083b4:	e01d      	b.n	80083f2 <HAL_GPIO_Init+0x26a>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e01b      	b.n	80083f2 <HAL_GPIO_Init+0x26a>
 80083ba:	bf00      	nop
 80083bc:	58000080 	.word	0x58000080
 80083c0:	58024400 	.word	0x58024400
 80083c4:	58000400 	.word	0x58000400
 80083c8:	58020000 	.word	0x58020000
 80083cc:	58020400 	.word	0x58020400
 80083d0:	58020800 	.word	0x58020800
 80083d4:	58020c00 	.word	0x58020c00
 80083d8:	58021000 	.word	0x58021000
 80083dc:	58021400 	.word	0x58021400
 80083e0:	58021800 	.word	0x58021800
 80083e4:	58021c00 	.word	0x58021c00
 80083e8:	58022000 	.word	0x58022000
 80083ec:	58022400 	.word	0x58022400
 80083f0:	2300      	movs	r3, #0
 80083f2:	69fa      	ldr	r2, [r7, #28]
 80083f4:	f002 0203 	and.w	r2, r2, #3
 80083f8:	0092      	lsls	r2, r2, #2
 80083fa:	4093      	lsls	r3, r2
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	4313      	orrs	r3, r2
 8008400:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008402:	4938      	ldr	r1, [pc, #224]	; (80084e4 <HAL_GPIO_Init+0x35c>)
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	089b      	lsrs	r3, r3, #2
 8008408:	3302      	adds	r3, #2
 800840a:	69ba      	ldr	r2, [r7, #24]
 800840c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	43db      	mvns	r3, r3
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	4013      	ands	r3, r2
 800841e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	4313      	orrs	r3, r2
 8008432:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	69ba      	ldr	r2, [r7, #24]
 8008438:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	43db      	mvns	r3, r3
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	4013      	ands	r3, r2
 8008448:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	4313      	orrs	r3, r2
 800845c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	69ba      	ldr	r2, [r7, #24]
 8008462:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	43db      	mvns	r3, r3
 8008470:	69ba      	ldr	r2, [r7, #24]
 8008472:	4013      	ands	r3, r2
 8008474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	4313      	orrs	r3, r2
 8008488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800848a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	43db      	mvns	r3, r3
 800849e:	69ba      	ldr	r2, [r7, #24]
 80084a0:	4013      	ands	r3, r2
 80084a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d003      	beq.n	80084b8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80084b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	3301      	adds	r3, #1
 80084c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	fa22 f303 	lsr.w	r3, r2, r3
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f47f ae63 	bne.w	800819c <HAL_GPIO_Init+0x14>
  }
}
 80084d6:	bf00      	nop
 80084d8:	bf00      	nop
 80084da:	3724      	adds	r7, #36	; 0x24
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	58000400 	.word	0x58000400

080084e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	807b      	strh	r3, [r7, #2]
 80084f4:	4613      	mov	r3, r2
 80084f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80084f8:	787b      	ldrb	r3, [r7, #1]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80084fe:	887a      	ldrh	r2, [r7, #2]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008504:	e003      	b.n	800850e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008506:	887b      	ldrh	r3, [r7, #2]
 8008508:	041a      	lsls	r2, r3, #16
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	619a      	str	r2, [r3, #24]
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
	...

0800851c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e07f      	b.n	800862e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d106      	bne.n	8008548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7fb fb62 	bl	8003c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2224      	movs	r2, #36	; 0x24
 800854c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f022 0201 	bic.w	r2, r2, #1
 800855e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800856c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800857c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d107      	bne.n	8008596 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008592:	609a      	str	r2, [r3, #8]
 8008594:	e006      	b.n	80085a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80085a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d104      	bne.n	80085b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6859      	ldr	r1, [r3, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	4b1d      	ldr	r3, [pc, #116]	; (8008638 <HAL_I2C_Init+0x11c>)
 80085c2:	430b      	orrs	r3, r1
 80085c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68da      	ldr	r2, [r3, #12]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	691a      	ldr	r2, [r3, #16]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	ea42 0103 	orr.w	r1, r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	021a      	lsls	r2, r3, #8
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	430a      	orrs	r2, r1
 80085ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	69d9      	ldr	r1, [r3, #28]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a1a      	ldr	r2, [r3, #32]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	430a      	orrs	r2, r1
 80085fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f042 0201 	orr.w	r2, r2, #1
 800860e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2220      	movs	r2, #32
 800861a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	02008000 	.word	0x02008000

0800863c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b088      	sub	sp, #32
 8008640:	af02      	add	r7, sp, #8
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	4608      	mov	r0, r1
 8008646:	4611      	mov	r1, r2
 8008648:	461a      	mov	r2, r3
 800864a:	4603      	mov	r3, r0
 800864c:	817b      	strh	r3, [r7, #10]
 800864e:	460b      	mov	r3, r1
 8008650:	813b      	strh	r3, [r7, #8]
 8008652:	4613      	mov	r3, r2
 8008654:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b20      	cmp	r3, #32
 8008660:	f040 80f9 	bne.w	8008856 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <HAL_I2C_Mem_Write+0x34>
 800866a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800866c:	2b00      	cmp	r3, #0
 800866e:	d105      	bne.n	800867c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008676:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e0ed      	b.n	8008858 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008682:	2b01      	cmp	r3, #1
 8008684:	d101      	bne.n	800868a <HAL_I2C_Mem_Write+0x4e>
 8008686:	2302      	movs	r3, #2
 8008688:	e0e6      	b.n	8008858 <HAL_I2C_Mem_Write+0x21c>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008692:	f7fc fdd9 	bl	8005248 <HAL_GetTick>
 8008696:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	2319      	movs	r3, #25
 800869e:	2201      	movs	r2, #1
 80086a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f001 fee3 	bl	800a470 <I2C_WaitOnFlagUntilTimeout>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e0d1      	b.n	8008858 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2221      	movs	r2, #33	; 0x21
 80086b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2240      	movs	r2, #64	; 0x40
 80086c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6a3a      	ldr	r2, [r7, #32]
 80086ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80086d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086dc:	88f8      	ldrh	r0, [r7, #6]
 80086de:	893a      	ldrh	r2, [r7, #8]
 80086e0:	8979      	ldrh	r1, [r7, #10]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	4603      	mov	r3, r0
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 ff23 	bl	8009538 <I2C_RequestMemoryWrite>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d005      	beq.n	8008704 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e0a9      	b.n	8008858 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008708:	b29b      	uxth	r3, r3
 800870a:	2bff      	cmp	r3, #255	; 0xff
 800870c:	d90e      	bls.n	800872c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	22ff      	movs	r2, #255	; 0xff
 8008712:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008718:	b2da      	uxtb	r2, r3
 800871a:	8979      	ldrh	r1, [r7, #10]
 800871c:	2300      	movs	r3, #0
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f001 ffc5 	bl	800a6b4 <I2C_TransferConfig>
 800872a:	e00f      	b.n	800874c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008730:	b29a      	uxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800873a:	b2da      	uxtb	r2, r3
 800873c:	8979      	ldrh	r1, [r7, #10]
 800873e:	2300      	movs	r3, #0
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f001 ffb4 	bl	800a6b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f001 fecd 	bl	800a4f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e07b      	b.n	8008858 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	781a      	ldrb	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008770:	1c5a      	adds	r2, r3, #1
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800877a:	b29b      	uxth	r3, r3
 800877c:	3b01      	subs	r3, #1
 800877e:	b29a      	uxth	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008788:	3b01      	subs	r3, #1
 800878a:	b29a      	uxth	r2, r3
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008794:	b29b      	uxth	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d034      	beq.n	8008804 <HAL_I2C_Mem_Write+0x1c8>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d130      	bne.n	8008804 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	2200      	movs	r2, #0
 80087aa:	2180      	movs	r1, #128	; 0x80
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f001 fe5f 	bl	800a470 <I2C_WaitOnFlagUntilTimeout>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e04d      	b.n	8008858 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	2bff      	cmp	r3, #255	; 0xff
 80087c4:	d90e      	bls.n	80087e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	22ff      	movs	r2, #255	; 0xff
 80087ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	8979      	ldrh	r1, [r7, #10]
 80087d4:	2300      	movs	r3, #0
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f001 ff69 	bl	800a6b4 <I2C_TransferConfig>
 80087e2:	e00f      	b.n	8008804 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	8979      	ldrh	r1, [r7, #10]
 80087f6:	2300      	movs	r3, #0
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f001 ff58 	bl	800a6b4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008808:	b29b      	uxth	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d19e      	bne.n	800874c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f001 feac 	bl	800a570 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e01a      	b.n	8008858 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2220      	movs	r2, #32
 8008828:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	6859      	ldr	r1, [r3, #4]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	4b0a      	ldr	r3, [pc, #40]	; (8008860 <HAL_I2C_Mem_Write+0x224>)
 8008836:	400b      	ands	r3, r1
 8008838:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2220      	movs	r2, #32
 800883e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	e000      	b.n	8008858 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008856:	2302      	movs	r3, #2
  }
}
 8008858:	4618      	mov	r0, r3
 800885a:	3718      	adds	r7, #24
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	fe00e800 	.word	0xfe00e800

08008864 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b088      	sub	sp, #32
 8008868:	af02      	add	r7, sp, #8
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	4608      	mov	r0, r1
 800886e:	4611      	mov	r1, r2
 8008870:	461a      	mov	r2, r3
 8008872:	4603      	mov	r3, r0
 8008874:	817b      	strh	r3, [r7, #10]
 8008876:	460b      	mov	r3, r1
 8008878:	813b      	strh	r3, [r7, #8]
 800887a:	4613      	mov	r3, r2
 800887c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b20      	cmp	r3, #32
 8008888:	f040 80fd 	bne.w	8008a86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d002      	beq.n	8008898 <HAL_I2C_Mem_Read+0x34>
 8008892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008894:	2b00      	cmp	r3, #0
 8008896:	d105      	bne.n	80088a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800889e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e0f1      	b.n	8008a88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d101      	bne.n	80088b2 <HAL_I2C_Mem_Read+0x4e>
 80088ae:	2302      	movs	r3, #2
 80088b0:	e0ea      	b.n	8008a88 <HAL_I2C_Mem_Read+0x224>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088ba:	f7fc fcc5 	bl	8005248 <HAL_GetTick>
 80088be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	2319      	movs	r3, #25
 80088c6:	2201      	movs	r2, #1
 80088c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f001 fdcf 	bl	800a470 <I2C_WaitOnFlagUntilTimeout>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e0d5      	b.n	8008a88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2222      	movs	r2, #34	; 0x22
 80088e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2240      	movs	r2, #64	; 0x40
 80088e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a3a      	ldr	r2, [r7, #32]
 80088f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80088fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008904:	88f8      	ldrh	r0, [r7, #6]
 8008906:	893a      	ldrh	r2, [r7, #8]
 8008908:	8979      	ldrh	r1, [r7, #10]
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	4603      	mov	r3, r0
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f000 fe63 	bl	80095e0 <I2C_RequestMemoryRead>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d005      	beq.n	800892c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e0ad      	b.n	8008a88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008930:	b29b      	uxth	r3, r3
 8008932:	2bff      	cmp	r3, #255	; 0xff
 8008934:	d90e      	bls.n	8008954 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	22ff      	movs	r2, #255	; 0xff
 800893a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008940:	b2da      	uxtb	r2, r3
 8008942:	8979      	ldrh	r1, [r7, #10]
 8008944:	4b52      	ldr	r3, [pc, #328]	; (8008a90 <HAL_I2C_Mem_Read+0x22c>)
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f001 feb1 	bl	800a6b4 <I2C_TransferConfig>
 8008952:	e00f      	b.n	8008974 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008958:	b29a      	uxth	r2, r3
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008962:	b2da      	uxtb	r2, r3
 8008964:	8979      	ldrh	r1, [r7, #10]
 8008966:	4b4a      	ldr	r3, [pc, #296]	; (8008a90 <HAL_I2C_Mem_Read+0x22c>)
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f001 fea0 	bl	800a6b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897a:	2200      	movs	r2, #0
 800897c:	2104      	movs	r1, #4
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f001 fd76 	bl	800a470 <I2C_WaitOnFlagUntilTimeout>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e07c      	b.n	8008a88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008998:	b2d2      	uxtb	r2, r2
 800899a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	1c5a      	adds	r2, r3, #1
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089aa:	3b01      	subs	r3, #1
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	3b01      	subs	r3, #1
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d034      	beq.n	8008a34 <HAL_I2C_Mem_Read+0x1d0>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d130      	bne.n	8008a34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	2200      	movs	r2, #0
 80089da:	2180      	movs	r1, #128	; 0x80
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f001 fd47 	bl	800a470 <I2C_WaitOnFlagUntilTimeout>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e04d      	b.n	8008a88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	2bff      	cmp	r3, #255	; 0xff
 80089f4:	d90e      	bls.n	8008a14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	22ff      	movs	r2, #255	; 0xff
 80089fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	8979      	ldrh	r1, [r7, #10]
 8008a04:	2300      	movs	r3, #0
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f001 fe51 	bl	800a6b4 <I2C_TransferConfig>
 8008a12:	e00f      	b.n	8008a34 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	8979      	ldrh	r1, [r7, #10]
 8008a26:	2300      	movs	r3, #0
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f001 fe40 	bl	800a6b4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d19a      	bne.n	8008974 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f001 fd94 	bl	800a570 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e01a      	b.n	8008a88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2220      	movs	r2, #32
 8008a58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6859      	ldr	r1, [r3, #4]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	4b0b      	ldr	r3, [pc, #44]	; (8008a94 <HAL_I2C_Mem_Read+0x230>)
 8008a66:	400b      	ands	r3, r1
 8008a68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	e000      	b.n	8008a88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008a86:	2302      	movs	r3, #2
  }
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	80002400 	.word	0x80002400
 8008a94:	fe00e800 	.word	0xfe00e800

08008a98 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b08a      	sub	sp, #40	; 0x28
 8008a9c:	af02      	add	r7, sp, #8
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	817b      	strh	r3, [r7, #10]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	813b      	strh	r3, [r7, #8]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b20      	cmp	r3, #32
 8008abc:	f040 80d5 	bne.w	8008c6a <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <HAL_I2C_Mem_Read_DMA+0x34>
 8008ac6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d105      	bne.n	8008ad8 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ad2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e0c9      	b.n	8008c6c <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ae6:	d101      	bne.n	8008aec <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e0bf      	b.n	8008c6c <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d101      	bne.n	8008afa <HAL_I2C_Mem_Read_DMA+0x62>
 8008af6:	2302      	movs	r3, #2
 8008af8:	e0b8      	b.n	8008c6c <HAL_I2C_Mem_Read_DMA+0x1d4>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b02:	f7fc fba1 	bl	8005248 <HAL_GetTick>
 8008b06:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2222      	movs	r2, #34	; 0x22
 8008b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2240      	movs	r2, #64	; 0x40
 8008b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	4a51      	ldr	r2, [pc, #324]	; (8008c74 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8008b2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	4a51      	ldr	r2, [pc, #324]	; (8008c78 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8008b34:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	2bff      	cmp	r3, #255	; 0xff
 8008b3e:	d906      	bls.n	8008b4e <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	22ff      	movs	r2, #255	; 0xff
 8008b44:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008b46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b4a:	61fb      	str	r3, [r7, #28]
 8008b4c:	e007      	b.n	8008b5e <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008b58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b5c:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008b5e:	88f8      	ldrh	r0, [r7, #6]
 8008b60:	893a      	ldrh	r2, [r7, #8]
 8008b62:	8979      	ldrh	r1, [r7, #10]
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	9301      	str	r3, [sp, #4]
 8008b68:	2319      	movs	r3, #25
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f000 fd36 	bl	80095e0 <I2C_RequestMemoryRead>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d005      	beq.n	8008b86 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e072      	b.n	8008c6c <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d020      	beq.n	8008bd0 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b92:	4a3a      	ldr	r2, [pc, #232]	; (8008c7c <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8008b94:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9a:	4a39      	ldr	r2, [pc, #228]	; (8008c80 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8008b9c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008baa:	2200      	movs	r2, #0
 8008bac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3324      	adds	r3, #36	; 0x24
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bc0:	f7fc ffea 	bl	8005b98 <HAL_DMA_Start_IT>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8008bc8:	7dfb      	ldrb	r3, [r7, #23]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d139      	bne.n	8008c42 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8008bce:	e013      	b.n	8008bf8 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2220      	movs	r2, #32
 8008bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e039      	b.n	8008c6c <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	8979      	ldrh	r1, [r7, #10]
 8008c00:	4b20      	ldr	r3, [pc, #128]	; (8008c84 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f001 fd54 	bl	800a6b4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008c26:	2110      	movs	r1, #16
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f001 fd71 	bl	800a710 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c3c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	e014      	b.n	8008c6c <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2220      	movs	r2, #32
 8008c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c56:	f043 0210 	orr.w	r2, r3, #16
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e000      	b.n	8008c6c <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8008c6a:	2302      	movs	r3, #2
  }
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3720      	adds	r7, #32
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	ffff0000 	.word	0xffff0000
 8008c78:	08008f93 	.word	0x08008f93
 8008c7c:	0800a12f 	.word	0x0800a12f
 8008c80:	0800a1c5 	.word	0x0800a1c5
 8008c84:	80002400 	.word	0x80002400

08008c88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d005      	beq.n	8008cb4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	68f9      	ldr	r1, [r7, #12]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	4798      	blx	r3
  }
}
 8008cb4:	bf00      	nop
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	70fb      	strb	r3, [r7, #3]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d101      	bne.n	8008db0 <I2C_Slave_ISR_IT+0x24>
 8008dac:	2302      	movs	r3, #2
 8008dae:	e0ec      	b.n	8008f8a <I2C_Slave_ISR_IT+0x1fe>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	095b      	lsrs	r3, r3, #5
 8008dbc:	f003 0301 	and.w	r3, r3, #1
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d009      	beq.n	8008dd8 <I2C_Slave_ISR_IT+0x4c>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	095b      	lsrs	r3, r3, #5
 8008dc8:	f003 0301 	and.w	r3, r3, #1
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d003      	beq.n	8008dd8 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008dd0:	6939      	ldr	r1, [r7, #16]
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 fe42 	bl	8009a5c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	091b      	lsrs	r3, r3, #4
 8008ddc:	f003 0301 	and.w	r3, r3, #1
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d04d      	beq.n	8008e80 <I2C_Slave_ISR_IT+0xf4>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	091b      	lsrs	r3, r3, #4
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d047      	beq.n	8008e80 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d128      	bne.n	8008e4c <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b28      	cmp	r3, #40	; 0x28
 8008e04:	d108      	bne.n	8008e18 <I2C_Slave_ISR_IT+0x8c>
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e0c:	d104      	bne.n	8008e18 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008e0e:	6939      	ldr	r1, [r7, #16]
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f001 f81b 	bl	8009e4c <I2C_ITListenCplt>
 8008e16:	e032      	b.n	8008e7e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b29      	cmp	r3, #41	; 0x29
 8008e22:	d10e      	bne.n	8008e42 <I2C_Slave_ISR_IT+0xb6>
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e2a:	d00a      	beq.n	8008e42 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2210      	movs	r2, #16
 8008e32:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f001 f956 	bl	800a0e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fce5 	bl	800980a <I2C_ITSlaveSeqCplt>
 8008e40:	e01d      	b.n	8008e7e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2210      	movs	r2, #16
 8008e48:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008e4a:	e096      	b.n	8008f7a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2210      	movs	r2, #16
 8008e52:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e58:	f043 0204 	orr.w	r2, r3, #4
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d004      	beq.n	8008e70 <I2C_Slave_ISR_IT+0xe4>
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e6c:	f040 8085 	bne.w	8008f7a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e74:	4619      	mov	r1, r3
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f001 f83e 	bl	8009ef8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008e7c:	e07d      	b.n	8008f7a <I2C_Slave_ISR_IT+0x1ee>
 8008e7e:	e07c      	b.n	8008f7a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	089b      	lsrs	r3, r3, #2
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d030      	beq.n	8008eee <I2C_Slave_ISR_IT+0x162>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	089b      	lsrs	r3, r3, #2
 8008e90:	f003 0301 	and.w	r3, r3, #1
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d02a      	beq.n	8008eee <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d018      	beq.n	8008ed4 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	b2d2      	uxtb	r2, r2
 8008eae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb4:	1c5a      	adds	r2, r3, #1
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d14f      	bne.n	8008f7e <I2C_Slave_ISR_IT+0x1f2>
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ee4:	d04b      	beq.n	8008f7e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 fc8f 	bl	800980a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008eec:	e047      	b.n	8008f7e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	08db      	lsrs	r3, r3, #3
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00a      	beq.n	8008f10 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	08db      	lsrs	r3, r3, #3
 8008efe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d004      	beq.n	8008f10 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008f06:	6939      	ldr	r1, [r7, #16]
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 fbbd 	bl	8009688 <I2C_ITAddrCplt>
 8008f0e:	e037      	b.n	8008f80 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	085b      	lsrs	r3, r3, #1
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d031      	beq.n	8008f80 <I2C_Slave_ISR_IT+0x1f4>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	085b      	lsrs	r3, r3, #1
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d02b      	beq.n	8008f80 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d018      	beq.n	8008f64 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f36:	781a      	ldrb	r2, [r3, #0]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	851a      	strh	r2, [r3, #40]	; 0x28
 8008f62:	e00d      	b.n	8008f80 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f6a:	d002      	beq.n	8008f72 <I2C_Slave_ISR_IT+0x1e6>
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d106      	bne.n	8008f80 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f000 fc49 	bl	800980a <I2C_ITSlaveSeqCplt>
 8008f78:	e002      	b.n	8008f80 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008f7a:	bf00      	nop
 8008f7c:	e000      	b.n	8008f80 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008f7e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3718      	adds	r7, #24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b088      	sub	sp, #32
 8008f96:	af02      	add	r7, sp, #8
 8008f98:	60f8      	str	r0, [r7, #12]
 8008f9a:	60b9      	str	r1, [r7, #8]
 8008f9c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d101      	bne.n	8008fac <I2C_Master_ISR_DMA+0x1a>
 8008fa8:	2302      	movs	r3, #2
 8008faa:	e0e1      	b.n	8009170 <I2C_Master_ISR_DMA+0x1de>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	091b      	lsrs	r3, r3, #4
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d017      	beq.n	8008ff0 <I2C_Master_ISR_DMA+0x5e>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	091b      	lsrs	r3, r3, #4
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d011      	beq.n	8008ff0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2210      	movs	r2, #16
 8008fd2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd8:	f043 0204 	orr.w	r2, r3, #4
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008fe0:	2120      	movs	r1, #32
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f001 fb94 	bl	800a710 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f001 f87c 	bl	800a0e6 <I2C_Flush_TXDR>
 8008fee:	e0ba      	b.n	8009166 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	09db      	lsrs	r3, r3, #7
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d072      	beq.n	80090e2 <I2C_Master_ISR_DMA+0x150>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	099b      	lsrs	r3, r3, #6
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b00      	cmp	r3, #0
 8009006:	d06c      	beq.n	80090e2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009016:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800901c:	b29b      	uxth	r3, r3
 800901e:	2b00      	cmp	r3, #0
 8009020:	d04e      	beq.n	80090c0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	b29b      	uxth	r3, r3
 800902a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800902e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009034:	b29b      	uxth	r3, r3
 8009036:	2bff      	cmp	r3, #255	; 0xff
 8009038:	d906      	bls.n	8009048 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	22ff      	movs	r2, #255	; 0xff
 800903e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8009040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009044:	617b      	str	r3, [r7, #20]
 8009046:	e010      	b.n	800906a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800904c:	b29a      	uxth	r2, r3
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009056:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800905a:	d003      	beq.n	8009064 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009060:	617b      	str	r3, [r7, #20]
 8009062:	e002      	b.n	800906a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009068:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800906e:	b2da      	uxtb	r2, r3
 8009070:	8a79      	ldrh	r1, [r7, #18]
 8009072:	2300      	movs	r3, #0
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f001 fb1b 	bl	800a6b4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009082:	b29a      	uxth	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	b29a      	uxth	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b22      	cmp	r3, #34	; 0x22
 800909a:	d108      	bne.n	80090ae <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090aa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80090ac:	e05b      	b.n	8009166 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090bc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80090be:	e052      	b.n	8009166 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090ce:	d003      	beq.n	80090d8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f000 fb5d 	bl	8009790 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80090d6:	e046      	b.n	8009166 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80090d8:	2140      	movs	r1, #64	; 0x40
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f000 ff0c 	bl	8009ef8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80090e0:	e041      	b.n	8009166 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	099b      	lsrs	r3, r3, #6
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d029      	beq.n	8009142 <I2C_Master_ISR_DMA+0x1b0>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	099b      	lsrs	r3, r3, #6
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d023      	beq.n	8009142 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fe:	b29b      	uxth	r3, r3
 8009100:	2b00      	cmp	r3, #0
 8009102:	d119      	bne.n	8009138 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800910e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009112:	d027      	beq.n	8009164 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009118:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800911c:	d108      	bne.n	8009130 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800912c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800912e:	e019      	b.n	8009164 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 fb2d 	bl	8009790 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009136:	e015      	b.n	8009164 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009138:	2140      	movs	r1, #64	; 0x40
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f000 fedc 	bl	8009ef8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009140:	e010      	b.n	8009164 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	095b      	lsrs	r3, r3, #5
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00b      	beq.n	8009166 <I2C_Master_ISR_DMA+0x1d4>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	095b      	lsrs	r3, r3, #5
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	2b00      	cmp	r3, #0
 8009158:	d005      	beq.n	8009166 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800915a:	68b9      	ldr	r1, [r7, #8]
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f000 fbb3 	bl	80098c8 <I2C_ITMasterCplt>
 8009162:	e000      	b.n	8009166 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8009164:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b088      	sub	sp, #32
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009188:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800918a:	2300      	movs	r3, #0
 800918c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009194:	2b01      	cmp	r3, #1
 8009196:	d101      	bne.n	800919c <I2C_Slave_ISR_DMA+0x24>
 8009198:	2302      	movs	r3, #2
 800919a:	e1c8      	b.n	800952e <I2C_Slave_ISR_DMA+0x3b6>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	095b      	lsrs	r3, r3, #5
 80091a8:	f003 0301 	and.w	r3, r3, #1
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d009      	beq.n	80091c4 <I2C_Slave_ISR_DMA+0x4c>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	095b      	lsrs	r3, r3, #5
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d003      	beq.n	80091c4 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80091bc:	68b9      	ldr	r1, [r7, #8]
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f000 fc4c 	bl	8009a5c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	091b      	lsrs	r3, r3, #4
 80091c8:	f003 0301 	and.w	r3, r3, #1
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 8199 	beq.w	8009504 <I2C_Slave_ISR_DMA+0x38c>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	091b      	lsrs	r3, r3, #4
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 8192 	beq.w	8009504 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	0b9b      	lsrs	r3, r3, #14
 80091e4:	f003 0301 	and.w	r3, r3, #1
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d106      	bne.n	80091fa <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	0bdb      	lsrs	r3, r3, #15
 80091f0:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 817e 	beq.w	80094f6 <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d07c      	beq.n	80092fc <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	0bdb      	lsrs	r3, r3, #15
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d076      	beq.n	80092fc <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a8d      	ldr	r2, [pc, #564]	; (800944c <I2C_Slave_ISR_DMA+0x2d4>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d059      	beq.n	80092ce <I2C_Slave_ISR_DMA+0x156>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a8b      	ldr	r2, [pc, #556]	; (8009450 <I2C_Slave_ISR_DMA+0x2d8>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d053      	beq.n	80092ce <I2C_Slave_ISR_DMA+0x156>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a89      	ldr	r2, [pc, #548]	; (8009454 <I2C_Slave_ISR_DMA+0x2dc>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d04d      	beq.n	80092ce <I2C_Slave_ISR_DMA+0x156>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a87      	ldr	r2, [pc, #540]	; (8009458 <I2C_Slave_ISR_DMA+0x2e0>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d047      	beq.n	80092ce <I2C_Slave_ISR_DMA+0x156>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a85      	ldr	r2, [pc, #532]	; (800945c <I2C_Slave_ISR_DMA+0x2e4>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d041      	beq.n	80092ce <I2C_Slave_ISR_DMA+0x156>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a83      	ldr	r2, [pc, #524]	; (8009460 <I2C_Slave_ISR_DMA+0x2e8>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d03b      	beq.n	80092ce <I2C_Slave_ISR_DMA+0x156>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a81      	ldr	r2, [pc, #516]	; (8009464 <I2C_Slave_ISR_DMA+0x2ec>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d035      	beq.n	80092ce <I2C_Slave_ISR_DMA+0x156>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a7f      	ldr	r2, [pc, #508]	; (8009468 <I2C_Slave_ISR_DMA+0x2f0>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d02f      	beq.n	80092ce <I2C_Slave_ISR_DMA+0x156>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a7d      	ldr	r2, [pc, #500]	; (800946c <I2C_Slave_ISR_DMA+0x2f4>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d029      	beq.n	80092ce <I2C_Slave_ISR_DMA+0x156>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a7b      	ldr	r2, [pc, #492]	; (8009470 <I2C_Slave_ISR_DMA+0x2f8>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d023      	beq.n	80092ce <I2C_Slave_ISR_DMA+0x156>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a79      	ldr	r2, [pc, #484]	; (8009474 <I2C_Slave_ISR_DMA+0x2fc>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d01d      	beq.n	80092ce <I2C_Slave_ISR_DMA+0x156>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a77      	ldr	r2, [pc, #476]	; (8009478 <I2C_Slave_ISR_DMA+0x300>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d017      	beq.n	80092ce <I2C_Slave_ISR_DMA+0x156>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a75      	ldr	r2, [pc, #468]	; (800947c <I2C_Slave_ISR_DMA+0x304>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d011      	beq.n	80092ce <I2C_Slave_ISR_DMA+0x156>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a73      	ldr	r2, [pc, #460]	; (8009480 <I2C_Slave_ISR_DMA+0x308>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d00b      	beq.n	80092ce <I2C_Slave_ISR_DMA+0x156>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a71      	ldr	r2, [pc, #452]	; (8009484 <I2C_Slave_ISR_DMA+0x30c>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d005      	beq.n	80092ce <I2C_Slave_ISR_DMA+0x156>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a6f      	ldr	r2, [pc, #444]	; (8009488 <I2C_Slave_ISR_DMA+0x310>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d109      	bne.n	80092e2 <I2C_Slave_ISR_DMA+0x16a>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	bf0c      	ite	eq
 80092da:	2301      	moveq	r3, #1
 80092dc:	2300      	movne	r3, #0
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	e008      	b.n	80092f4 <I2C_Slave_ISR_DMA+0x17c>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	bf0c      	ite	eq
 80092ee:	2301      	moveq	r3, #1
 80092f0:	2300      	movne	r3, #0
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 80092f8:	2301      	movs	r3, #1
 80092fa:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009300:	2b00      	cmp	r3, #0
 8009302:	d07c      	beq.n	80093fe <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	0b9b      	lsrs	r3, r3, #14
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	2b00      	cmp	r3, #0
 800930e:	d076      	beq.n	80093fe <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a4d      	ldr	r2, [pc, #308]	; (800944c <I2C_Slave_ISR_DMA+0x2d4>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d059      	beq.n	80093d0 <I2C_Slave_ISR_DMA+0x258>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a4b      	ldr	r2, [pc, #300]	; (8009450 <I2C_Slave_ISR_DMA+0x2d8>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d053      	beq.n	80093d0 <I2C_Slave_ISR_DMA+0x258>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a49      	ldr	r2, [pc, #292]	; (8009454 <I2C_Slave_ISR_DMA+0x2dc>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d04d      	beq.n	80093d0 <I2C_Slave_ISR_DMA+0x258>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a47      	ldr	r2, [pc, #284]	; (8009458 <I2C_Slave_ISR_DMA+0x2e0>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d047      	beq.n	80093d0 <I2C_Slave_ISR_DMA+0x258>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a45      	ldr	r2, [pc, #276]	; (800945c <I2C_Slave_ISR_DMA+0x2e4>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d041      	beq.n	80093d0 <I2C_Slave_ISR_DMA+0x258>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a43      	ldr	r2, [pc, #268]	; (8009460 <I2C_Slave_ISR_DMA+0x2e8>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d03b      	beq.n	80093d0 <I2C_Slave_ISR_DMA+0x258>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a41      	ldr	r2, [pc, #260]	; (8009464 <I2C_Slave_ISR_DMA+0x2ec>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d035      	beq.n	80093d0 <I2C_Slave_ISR_DMA+0x258>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a3f      	ldr	r2, [pc, #252]	; (8009468 <I2C_Slave_ISR_DMA+0x2f0>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d02f      	beq.n	80093d0 <I2C_Slave_ISR_DMA+0x258>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a3d      	ldr	r2, [pc, #244]	; (800946c <I2C_Slave_ISR_DMA+0x2f4>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d029      	beq.n	80093d0 <I2C_Slave_ISR_DMA+0x258>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a3b      	ldr	r2, [pc, #236]	; (8009470 <I2C_Slave_ISR_DMA+0x2f8>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d023      	beq.n	80093d0 <I2C_Slave_ISR_DMA+0x258>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a39      	ldr	r2, [pc, #228]	; (8009474 <I2C_Slave_ISR_DMA+0x2fc>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d01d      	beq.n	80093d0 <I2C_Slave_ISR_DMA+0x258>
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a37      	ldr	r2, [pc, #220]	; (8009478 <I2C_Slave_ISR_DMA+0x300>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d017      	beq.n	80093d0 <I2C_Slave_ISR_DMA+0x258>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a35      	ldr	r2, [pc, #212]	; (800947c <I2C_Slave_ISR_DMA+0x304>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d011      	beq.n	80093d0 <I2C_Slave_ISR_DMA+0x258>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a33      	ldr	r2, [pc, #204]	; (8009480 <I2C_Slave_ISR_DMA+0x308>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d00b      	beq.n	80093d0 <I2C_Slave_ISR_DMA+0x258>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a31      	ldr	r2, [pc, #196]	; (8009484 <I2C_Slave_ISR_DMA+0x30c>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d005      	beq.n	80093d0 <I2C_Slave_ISR_DMA+0x258>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a2f      	ldr	r2, [pc, #188]	; (8009488 <I2C_Slave_ISR_DMA+0x310>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d109      	bne.n	80093e4 <I2C_Slave_ISR_DMA+0x26c>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	bf0c      	ite	eq
 80093dc:	2301      	moveq	r3, #1
 80093de:	2300      	movne	r3, #0
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	e008      	b.n	80093f6 <I2C_Slave_ISR_DMA+0x27e>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	bf0c      	ite	eq
 80093f0:	2301      	moveq	r3, #1
 80093f2:	2300      	movne	r3, #0
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 80093fa:	2301      	movs	r3, #1
 80093fc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d148      	bne.n	8009496 <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b28      	cmp	r3, #40	; 0x28
 800940e:	d108      	bne.n	8009422 <I2C_Slave_ISR_DMA+0x2aa>
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009416:	d104      	bne.n	8009422 <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009418:	68b9      	ldr	r1, [r7, #8]
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 fd16 	bl	8009e4c <I2C_ITListenCplt>
 8009420:	e068      	b.n	80094f4 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b29      	cmp	r3, #41	; 0x29
 800942c:	d12e      	bne.n	800948c <I2C_Slave_ISR_DMA+0x314>
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009434:	d02a      	beq.n	800948c <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2210      	movs	r2, #16
 800943c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 fe51 	bl	800a0e6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 f9e0 	bl	800980a <I2C_ITSlaveSeqCplt>
 800944a:	e053      	b.n	80094f4 <I2C_Slave_ISR_DMA+0x37c>
 800944c:	40020010 	.word	0x40020010
 8009450:	40020028 	.word	0x40020028
 8009454:	40020040 	.word	0x40020040
 8009458:	40020058 	.word	0x40020058
 800945c:	40020070 	.word	0x40020070
 8009460:	40020088 	.word	0x40020088
 8009464:	400200a0 	.word	0x400200a0
 8009468:	400200b8 	.word	0x400200b8
 800946c:	40020410 	.word	0x40020410
 8009470:	40020428 	.word	0x40020428
 8009474:	40020440 	.word	0x40020440
 8009478:	40020458 	.word	0x40020458
 800947c:	40020470 	.word	0x40020470
 8009480:	40020488 	.word	0x40020488
 8009484:	400204a0 	.word	0x400204a0
 8009488:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2210      	movs	r2, #16
 8009492:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009494:	e034      	b.n	8009500 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2210      	movs	r2, #16
 800949c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a2:	f043 0204 	orr.w	r2, r3, #4
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094b0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d003      	beq.n	80094c0 <I2C_Slave_ISR_DMA+0x348>
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80094be:	d11f      	bne.n	8009500 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	2b21      	cmp	r3, #33	; 0x21
 80094c4:	d002      	beq.n	80094cc <I2C_Slave_ISR_DMA+0x354>
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	2b29      	cmp	r3, #41	; 0x29
 80094ca:	d103      	bne.n	80094d4 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2221      	movs	r2, #33	; 0x21
 80094d0:	631a      	str	r2, [r3, #48]	; 0x30
 80094d2:	e008      	b.n	80094e6 <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
 80094d6:	2b22      	cmp	r3, #34	; 0x22
 80094d8:	d002      	beq.n	80094e0 <I2C_Slave_ISR_DMA+0x368>
 80094da:	7dfb      	ldrb	r3, [r7, #23]
 80094dc:	2b2a      	cmp	r3, #42	; 0x2a
 80094de:	d102      	bne.n	80094e6 <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2222      	movs	r2, #34	; 0x22
 80094e4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ea:	4619      	mov	r1, r3
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 fd03 	bl	8009ef8 <I2C_ITError>
      if (treatdmanack == 1U)
 80094f2:	e005      	b.n	8009500 <I2C_Slave_ISR_DMA+0x388>
 80094f4:	e004      	b.n	8009500 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2210      	movs	r2, #16
 80094fc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80094fe:	e011      	b.n	8009524 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8009500:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009502:	e00f      	b.n	8009524 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	08db      	lsrs	r3, r3, #3
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	2b00      	cmp	r3, #0
 800950e:	d009      	beq.n	8009524 <I2C_Slave_ISR_DMA+0x3ac>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	08db      	lsrs	r3, r3, #3
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	2b00      	cmp	r3, #0
 800951a:	d003      	beq.n	8009524 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800951c:	68b9      	ldr	r1, [r7, #8]
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f000 f8b2 	bl	8009688 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3720      	adds	r7, #32
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop

08009538 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af02      	add	r7, sp, #8
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	4608      	mov	r0, r1
 8009542:	4611      	mov	r1, r2
 8009544:	461a      	mov	r2, r3
 8009546:	4603      	mov	r3, r0
 8009548:	817b      	strh	r3, [r7, #10]
 800954a:	460b      	mov	r3, r1
 800954c:	813b      	strh	r3, [r7, #8]
 800954e:	4613      	mov	r3, r2
 8009550:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009552:	88fb      	ldrh	r3, [r7, #6]
 8009554:	b2da      	uxtb	r2, r3
 8009556:	8979      	ldrh	r1, [r7, #10]
 8009558:	4b20      	ldr	r3, [pc, #128]	; (80095dc <I2C_RequestMemoryWrite+0xa4>)
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f001 f8a7 	bl	800a6b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009566:	69fa      	ldr	r2, [r7, #28]
 8009568:	69b9      	ldr	r1, [r7, #24]
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f000 ffc0 	bl	800a4f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	e02c      	b.n	80095d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800957a:	88fb      	ldrh	r3, [r7, #6]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d105      	bne.n	800958c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009580:	893b      	ldrh	r3, [r7, #8]
 8009582:	b2da      	uxtb	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	629a      	str	r2, [r3, #40]	; 0x28
 800958a:	e015      	b.n	80095b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800958c:	893b      	ldrh	r3, [r7, #8]
 800958e:	0a1b      	lsrs	r3, r3, #8
 8009590:	b29b      	uxth	r3, r3
 8009592:	b2da      	uxtb	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800959a:	69fa      	ldr	r2, [r7, #28]
 800959c:	69b9      	ldr	r1, [r7, #24]
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 ffa6 	bl	800a4f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e012      	b.n	80095d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095ae:	893b      	ldrh	r3, [r7, #8]
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	2200      	movs	r2, #0
 80095c0:	2180      	movs	r1, #128	; 0x80
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f000 ff54 	bl	800a470 <I2C_WaitOnFlagUntilTimeout>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e000      	b.n	80095d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	80002000 	.word	0x80002000

080095e0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af02      	add	r7, sp, #8
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	4608      	mov	r0, r1
 80095ea:	4611      	mov	r1, r2
 80095ec:	461a      	mov	r2, r3
 80095ee:	4603      	mov	r3, r0
 80095f0:	817b      	strh	r3, [r7, #10]
 80095f2:	460b      	mov	r3, r1
 80095f4:	813b      	strh	r3, [r7, #8]
 80095f6:	4613      	mov	r3, r2
 80095f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80095fa:	88fb      	ldrh	r3, [r7, #6]
 80095fc:	b2da      	uxtb	r2, r3
 80095fe:	8979      	ldrh	r1, [r7, #10]
 8009600:	4b20      	ldr	r3, [pc, #128]	; (8009684 <I2C_RequestMemoryRead+0xa4>)
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	2300      	movs	r3, #0
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f001 f854 	bl	800a6b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800960c:	69fa      	ldr	r2, [r7, #28]
 800960e:	69b9      	ldr	r1, [r7, #24]
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f000 ff6d 	bl	800a4f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e02c      	b.n	800967a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009620:	88fb      	ldrh	r3, [r7, #6]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d105      	bne.n	8009632 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009626:	893b      	ldrh	r3, [r7, #8]
 8009628:	b2da      	uxtb	r2, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	629a      	str	r2, [r3, #40]	; 0x28
 8009630:	e015      	b.n	800965e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009632:	893b      	ldrh	r3, [r7, #8]
 8009634:	0a1b      	lsrs	r3, r3, #8
 8009636:	b29b      	uxth	r3, r3
 8009638:	b2da      	uxtb	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009640:	69fa      	ldr	r2, [r7, #28]
 8009642:	69b9      	ldr	r1, [r7, #24]
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 ff53 	bl	800a4f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e012      	b.n	800967a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009654:	893b      	ldrh	r3, [r7, #8]
 8009656:	b2da      	uxtb	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	2200      	movs	r2, #0
 8009666:	2140      	movs	r1, #64	; 0x40
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 ff01 	bl	800a470 <I2C_WaitOnFlagUntilTimeout>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	e000      	b.n	800967a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	80002000 	.word	0x80002000

08009688 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009698:	b2db      	uxtb	r3, r3
 800969a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800969e:	2b28      	cmp	r3, #40	; 0x28
 80096a0:	d16a      	bne.n	8009778 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	0c1b      	lsrs	r3, r3, #16
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	0c1b      	lsrs	r3, r3, #16
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80096c0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096ce:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80096dc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d138      	bne.n	8009758 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80096e6:	897b      	ldrh	r3, [r7, #10]
 80096e8:	09db      	lsrs	r3, r3, #7
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	89bb      	ldrh	r3, [r7, #12]
 80096ee:	4053      	eors	r3, r2
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	f003 0306 	and.w	r3, r3, #6
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d11c      	bne.n	8009734 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80096fa:	897b      	ldrh	r3, [r7, #10]
 80096fc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009702:	1c5a      	adds	r2, r3, #1
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800970c:	2b02      	cmp	r3, #2
 800970e:	d13b      	bne.n	8009788 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2208      	movs	r2, #8
 800971c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009726:	89ba      	ldrh	r2, [r7, #12]
 8009728:	7bfb      	ldrb	r3, [r7, #15]
 800972a:	4619      	mov	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff faed 	bl	8008d0c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009732:	e029      	b.n	8009788 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009734:	893b      	ldrh	r3, [r7, #8]
 8009736:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009738:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f001 f84b 	bl	800a7d8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800974a:	89ba      	ldrh	r2, [r7, #12]
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7ff fadb 	bl	8008d0c <HAL_I2C_AddrCallback>
}
 8009756:	e017      	b.n	8009788 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009758:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f001 f83b 	bl	800a7d8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800976a:	89ba      	ldrh	r2, [r7, #12]
 800976c:	7bfb      	ldrb	r3, [r7, #15]
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7ff facb 	bl	8008d0c <HAL_I2C_AddrCallback>
}
 8009776:	e007      	b.n	8009788 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2208      	movs	r2, #8
 800977e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8009788:	bf00      	nop
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b21      	cmp	r3, #33	; 0x21
 80097aa:	d115      	bne.n	80097d8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2220      	movs	r2, #32
 80097b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2211      	movs	r2, #17
 80097b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80097c0:	2101      	movs	r1, #1
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f001 f808 	bl	800a7d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7ff fa73 	bl	8008cbc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80097d6:	e014      	b.n	8009802 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2220      	movs	r2, #32
 80097dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2212      	movs	r2, #18
 80097e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80097ec:	2102      	movs	r1, #2
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fff2 	bl	800a7d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7ff fa67 	bl	8008cd0 <HAL_I2C_MasterRxCpltCallback>
}
 8009802:	bf00      	nop
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	0b9b      	lsrs	r3, r3, #14
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	2b00      	cmp	r3, #0
 800982c:	d008      	beq.n	8009840 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800983c:	601a      	str	r2, [r3, #0]
 800983e:	e00d      	b.n	800985c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	0bdb      	lsrs	r3, r3, #15
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	2b00      	cmp	r3, #0
 800984a:	d007      	beq.n	800985c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800985a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b29      	cmp	r3, #41	; 0x29
 8009866:	d112      	bne.n	800988e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2228      	movs	r2, #40	; 0x28
 800986c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2221      	movs	r2, #33	; 0x21
 8009874:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009876:	2101      	movs	r1, #1
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 ffad 	bl	800a7d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7ff fa2c 	bl	8008ce4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800988c:	e017      	b.n	80098be <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009894:	b2db      	uxtb	r3, r3
 8009896:	2b2a      	cmp	r3, #42	; 0x2a
 8009898:	d111      	bne.n	80098be <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2228      	movs	r2, #40	; 0x28
 800989e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2222      	movs	r2, #34	; 0x22
 80098a6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80098a8:	2102      	movs	r1, #2
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 ff94 	bl	800a7d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7ff fa1d 	bl	8008cf8 <HAL_I2C_SlaveRxCpltCallback>
}
 80098be:	bf00      	nop
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
	...

080098c8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2220      	movs	r2, #32
 80098dc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b21      	cmp	r3, #33	; 0x21
 80098e8:	d107      	bne.n	80098fa <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80098ea:	2101      	movs	r1, #1
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 ff73 	bl	800a7d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2211      	movs	r2, #17
 80098f6:	631a      	str	r2, [r3, #48]	; 0x30
 80098f8:	e00c      	b.n	8009914 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b22      	cmp	r3, #34	; 0x22
 8009904:	d106      	bne.n	8009914 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009906:	2102      	movs	r1, #2
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 ff65 	bl	800a7d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2212      	movs	r2, #18
 8009912:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6859      	ldr	r1, [r3, #4]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	4b4d      	ldr	r3, [pc, #308]	; (8009a54 <I2C_ITMasterCplt+0x18c>)
 8009920:	400b      	ands	r3, r1
 8009922:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a4a      	ldr	r2, [pc, #296]	; (8009a58 <I2C_ITMasterCplt+0x190>)
 800992e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	091b      	lsrs	r3, r3, #4
 8009934:	f003 0301 	and.w	r3, r3, #1
 8009938:	2b00      	cmp	r3, #0
 800993a:	d009      	beq.n	8009950 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2210      	movs	r2, #16
 8009942:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009948:	f043 0204 	orr.w	r2, r3, #4
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009956:	b2db      	uxtb	r3, r3
 8009958:	2b60      	cmp	r3, #96	; 0x60
 800995a:	d10b      	bne.n	8009974 <I2C_ITMasterCplt+0xac>
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	089b      	lsrs	r3, r3, #2
 8009960:	f003 0301 	and.w	r3, r3, #1
 8009964:	2b00      	cmp	r3, #0
 8009966:	d005      	beq.n	8009974 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	b2db      	uxtb	r3, r3
 8009970:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8009972:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fbb6 	bl	800a0e6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800997e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b60      	cmp	r3, #96	; 0x60
 800998a:	d002      	beq.n	8009992 <I2C_ITMasterCplt+0xca>
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d006      	beq.n	80099a0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009996:	4619      	mov	r1, r3
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 faad 	bl	8009ef8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800999e:	e054      	b.n	8009a4a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b21      	cmp	r3, #33	; 0x21
 80099aa:	d124      	bne.n	80099f6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2220      	movs	r2, #32
 80099b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b40      	cmp	r3, #64	; 0x40
 80099c4:	d10b      	bne.n	80099de <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f7ff f9b0 	bl	8008d3c <HAL_I2C_MemTxCpltCallback>
}
 80099dc:	e035      	b.n	8009a4a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f7ff f964 	bl	8008cbc <HAL_I2C_MasterTxCpltCallback>
}
 80099f4:	e029      	b.n	8009a4a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	2b22      	cmp	r3, #34	; 0x22
 8009a00:	d123      	bne.n	8009a4a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2220      	movs	r2, #32
 8009a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b40      	cmp	r3, #64	; 0x40
 8009a1a:	d10b      	bne.n	8009a34 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff f98f 	bl	8008d50 <HAL_I2C_MemRxCpltCallback>
}
 8009a32:	e00a      	b.n	8009a4a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7ff f943 	bl	8008cd0 <HAL_I2C_MasterRxCpltCallback>
}
 8009a4a:	bf00      	nop
 8009a4c:	3718      	adds	r7, #24
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	fe00e800 	.word	0xfe00e800
 8009a58:	ffff0000 	.word	0xffff0000

08009a5c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a78:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2220      	movs	r2, #32
 8009a80:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009a82:	7bfb      	ldrb	r3, [r7, #15]
 8009a84:	2b21      	cmp	r3, #33	; 0x21
 8009a86:	d002      	beq.n	8009a8e <I2C_ITSlaveCplt+0x32>
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
 8009a8a:	2b29      	cmp	r3, #41	; 0x29
 8009a8c:	d108      	bne.n	8009aa0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009a8e:	f248 0101 	movw	r1, #32769	; 0x8001
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fea0 	bl	800a7d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2221      	movs	r2, #33	; 0x21
 8009a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8009a9e:	e00d      	b.n	8009abc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
 8009aa2:	2b22      	cmp	r3, #34	; 0x22
 8009aa4:	d002      	beq.n	8009aac <I2C_ITSlaveCplt+0x50>
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
 8009aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8009aaa:	d107      	bne.n	8009abc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009aac:	f248 0102 	movw	r1, #32770	; 0x8002
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fe91 	bl	800a7d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2222      	movs	r2, #34	; 0x22
 8009aba:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009aca:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6859      	ldr	r1, [r3, #4]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	4b80      	ldr	r3, [pc, #512]	; (8009cd8 <I2C_ITSlaveCplt+0x27c>)
 8009ad8:	400b      	ands	r3, r1
 8009ada:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 fb02 	bl	800a0e6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	0b9b      	lsrs	r3, r3, #14
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d07a      	beq.n	8009be4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009afc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 8111 	beq.w	8009d2a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a73      	ldr	r2, [pc, #460]	; (8009cdc <I2C_ITSlaveCplt+0x280>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d059      	beq.n	8009bc8 <I2C_ITSlaveCplt+0x16c>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a71      	ldr	r2, [pc, #452]	; (8009ce0 <I2C_ITSlaveCplt+0x284>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d053      	beq.n	8009bc8 <I2C_ITSlaveCplt+0x16c>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a6f      	ldr	r2, [pc, #444]	; (8009ce4 <I2C_ITSlaveCplt+0x288>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d04d      	beq.n	8009bc8 <I2C_ITSlaveCplt+0x16c>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a6d      	ldr	r2, [pc, #436]	; (8009ce8 <I2C_ITSlaveCplt+0x28c>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d047      	beq.n	8009bc8 <I2C_ITSlaveCplt+0x16c>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a6b      	ldr	r2, [pc, #428]	; (8009cec <I2C_ITSlaveCplt+0x290>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d041      	beq.n	8009bc8 <I2C_ITSlaveCplt+0x16c>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a69      	ldr	r2, [pc, #420]	; (8009cf0 <I2C_ITSlaveCplt+0x294>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d03b      	beq.n	8009bc8 <I2C_ITSlaveCplt+0x16c>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a67      	ldr	r2, [pc, #412]	; (8009cf4 <I2C_ITSlaveCplt+0x298>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d035      	beq.n	8009bc8 <I2C_ITSlaveCplt+0x16c>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a65      	ldr	r2, [pc, #404]	; (8009cf8 <I2C_ITSlaveCplt+0x29c>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d02f      	beq.n	8009bc8 <I2C_ITSlaveCplt+0x16c>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a63      	ldr	r2, [pc, #396]	; (8009cfc <I2C_ITSlaveCplt+0x2a0>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d029      	beq.n	8009bc8 <I2C_ITSlaveCplt+0x16c>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a61      	ldr	r2, [pc, #388]	; (8009d00 <I2C_ITSlaveCplt+0x2a4>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d023      	beq.n	8009bc8 <I2C_ITSlaveCplt+0x16c>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a5f      	ldr	r2, [pc, #380]	; (8009d04 <I2C_ITSlaveCplt+0x2a8>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d01d      	beq.n	8009bc8 <I2C_ITSlaveCplt+0x16c>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a5d      	ldr	r2, [pc, #372]	; (8009d08 <I2C_ITSlaveCplt+0x2ac>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d017      	beq.n	8009bc8 <I2C_ITSlaveCplt+0x16c>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a5b      	ldr	r2, [pc, #364]	; (8009d0c <I2C_ITSlaveCplt+0x2b0>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d011      	beq.n	8009bc8 <I2C_ITSlaveCplt+0x16c>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a59      	ldr	r2, [pc, #356]	; (8009d10 <I2C_ITSlaveCplt+0x2b4>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d00b      	beq.n	8009bc8 <I2C_ITSlaveCplt+0x16c>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a57      	ldr	r2, [pc, #348]	; (8009d14 <I2C_ITSlaveCplt+0x2b8>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d005      	beq.n	8009bc8 <I2C_ITSlaveCplt+0x16c>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a55      	ldr	r2, [pc, #340]	; (8009d18 <I2C_ITSlaveCplt+0x2bc>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d105      	bne.n	8009bd4 <I2C_ITSlaveCplt+0x178>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	e004      	b.n	8009bde <I2C_ITSlaveCplt+0x182>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	8553      	strh	r3, [r2, #42]	; 0x2a
 8009be2:	e0a2      	b.n	8009d2a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	0bdb      	lsrs	r3, r3, #15
 8009be8:	f003 0301 	and.w	r3, r3, #1
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 809c 	beq.w	8009d2a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c00:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f000 808f 	beq.w	8009d2a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a32      	ldr	r2, [pc, #200]	; (8009cdc <I2C_ITSlaveCplt+0x280>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d059      	beq.n	8009ccc <I2C_ITSlaveCplt+0x270>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a30      	ldr	r2, [pc, #192]	; (8009ce0 <I2C_ITSlaveCplt+0x284>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d053      	beq.n	8009ccc <I2C_ITSlaveCplt+0x270>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a2e      	ldr	r2, [pc, #184]	; (8009ce4 <I2C_ITSlaveCplt+0x288>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d04d      	beq.n	8009ccc <I2C_ITSlaveCplt+0x270>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a2c      	ldr	r2, [pc, #176]	; (8009ce8 <I2C_ITSlaveCplt+0x28c>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d047      	beq.n	8009ccc <I2C_ITSlaveCplt+0x270>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a2a      	ldr	r2, [pc, #168]	; (8009cec <I2C_ITSlaveCplt+0x290>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d041      	beq.n	8009ccc <I2C_ITSlaveCplt+0x270>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a28      	ldr	r2, [pc, #160]	; (8009cf0 <I2C_ITSlaveCplt+0x294>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d03b      	beq.n	8009ccc <I2C_ITSlaveCplt+0x270>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a26      	ldr	r2, [pc, #152]	; (8009cf4 <I2C_ITSlaveCplt+0x298>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d035      	beq.n	8009ccc <I2C_ITSlaveCplt+0x270>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a24      	ldr	r2, [pc, #144]	; (8009cf8 <I2C_ITSlaveCplt+0x29c>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d02f      	beq.n	8009ccc <I2C_ITSlaveCplt+0x270>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a22      	ldr	r2, [pc, #136]	; (8009cfc <I2C_ITSlaveCplt+0x2a0>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d029      	beq.n	8009ccc <I2C_ITSlaveCplt+0x270>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a20      	ldr	r2, [pc, #128]	; (8009d00 <I2C_ITSlaveCplt+0x2a4>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d023      	beq.n	8009ccc <I2C_ITSlaveCplt+0x270>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a1e      	ldr	r2, [pc, #120]	; (8009d04 <I2C_ITSlaveCplt+0x2a8>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d01d      	beq.n	8009ccc <I2C_ITSlaveCplt+0x270>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a1c      	ldr	r2, [pc, #112]	; (8009d08 <I2C_ITSlaveCplt+0x2ac>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d017      	beq.n	8009ccc <I2C_ITSlaveCplt+0x270>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a1a      	ldr	r2, [pc, #104]	; (8009d0c <I2C_ITSlaveCplt+0x2b0>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d011      	beq.n	8009ccc <I2C_ITSlaveCplt+0x270>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a18      	ldr	r2, [pc, #96]	; (8009d10 <I2C_ITSlaveCplt+0x2b4>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d00b      	beq.n	8009ccc <I2C_ITSlaveCplt+0x270>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a16      	ldr	r2, [pc, #88]	; (8009d14 <I2C_ITSlaveCplt+0x2b8>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d005      	beq.n	8009ccc <I2C_ITSlaveCplt+0x270>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a14      	ldr	r2, [pc, #80]	; (8009d18 <I2C_ITSlaveCplt+0x2bc>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d127      	bne.n	8009d1c <I2C_ITSlaveCplt+0x2c0>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	e026      	b.n	8009d26 <I2C_ITSlaveCplt+0x2ca>
 8009cd8:	fe00e800 	.word	0xfe00e800
 8009cdc:	40020010 	.word	0x40020010
 8009ce0:	40020028 	.word	0x40020028
 8009ce4:	40020040 	.word	0x40020040
 8009ce8:	40020058 	.word	0x40020058
 8009cec:	40020070 	.word	0x40020070
 8009cf0:	40020088 	.word	0x40020088
 8009cf4:	400200a0 	.word	0x400200a0
 8009cf8:	400200b8 	.word	0x400200b8
 8009cfc:	40020410 	.word	0x40020410
 8009d00:	40020428 	.word	0x40020428
 8009d04:	40020440 	.word	0x40020440
 8009d08:	40020458 	.word	0x40020458
 8009d0c:	40020470 	.word	0x40020470
 8009d10:	40020488 	.word	0x40020488
 8009d14:	400204a0 	.word	0x400204a0
 8009d18:	400204b8 	.word	0x400204b8
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	089b      	lsrs	r3, r3, #2
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d020      	beq.n	8009d78 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	f023 0304 	bic.w	r3, r3, #4
 8009d3c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	b2d2      	uxtb	r2, r2
 8009d4a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	1c5a      	adds	r2, r3, #1
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00c      	beq.n	8009d78 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d62:	3b01      	subs	r3, #1
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	3b01      	subs	r3, #1
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d005      	beq.n	8009d8e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d86:	f043 0204 	orr.w	r2, r3, #4
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d010      	beq.n	8009dc6 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f8a4 	bl	8009ef8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b28      	cmp	r3, #40	; 0x28
 8009dba:	d141      	bne.n	8009e40 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009dbc:	6979      	ldr	r1, [r7, #20]
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f844 	bl	8009e4c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009dc4:	e03c      	b.n	8009e40 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009dce:	d014      	beq.n	8009dfa <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff fd1a 	bl	800980a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a1b      	ldr	r2, [pc, #108]	; (8009e48 <I2C_ITSlaveCplt+0x3ec>)
 8009dda:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2220      	movs	r2, #32
 8009de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7fe ff98 	bl	8008d28 <HAL_I2C_ListenCpltCallback>
}
 8009df8:	e022      	b.n	8009e40 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b22      	cmp	r3, #34	; 0x22
 8009e04:	d10e      	bne.n	8009e24 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7fe ff6b 	bl	8008cf8 <HAL_I2C_SlaveRxCpltCallback>
}
 8009e22:	e00d      	b.n	8009e40 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2220      	movs	r2, #32
 8009e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7fe ff52 	bl	8008ce4 <HAL_I2C_SlaveTxCpltCallback>
}
 8009e40:	bf00      	nop
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	ffff0000 	.word	0xffff0000

08009e4c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a26      	ldr	r2, [pc, #152]	; (8009ef4 <I2C_ITListenCplt+0xa8>)
 8009e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2220      	movs	r2, #32
 8009e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	089b      	lsrs	r3, r3, #2
 8009e7c:	f003 0301 	and.w	r3, r3, #1
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d022      	beq.n	8009eca <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	b2d2      	uxtb	r2, r2
 8009e90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e96:	1c5a      	adds	r2, r3, #1
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d012      	beq.n	8009eca <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ec2:	f043 0204 	orr.w	r2, r3, #4
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009eca:	f248 0103 	movw	r1, #32771	; 0x8003
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fc82 	bl	800a7d8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2210      	movs	r2, #16
 8009eda:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7fe ff1f 	bl	8008d28 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009eea:	bf00      	nop
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	ffff0000 	.word	0xffff0000

08009ef8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a5d      	ldr	r2, [pc, #372]	; (800a08c <I2C_ITError+0x194>)
 8009f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	431a      	orrs	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009f2a:	7bfb      	ldrb	r3, [r7, #15]
 8009f2c:	2b28      	cmp	r3, #40	; 0x28
 8009f2e:	d005      	beq.n	8009f3c <I2C_ITError+0x44>
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	2b29      	cmp	r3, #41	; 0x29
 8009f34:	d002      	beq.n	8009f3c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
 8009f38:	2b2a      	cmp	r3, #42	; 0x2a
 8009f3a:	d10b      	bne.n	8009f54 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009f3c:	2103      	movs	r1, #3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fc4a 	bl	800a7d8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2228      	movs	r2, #40	; 0x28
 8009f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a50      	ldr	r2, [pc, #320]	; (800a090 <I2C_ITError+0x198>)
 8009f50:	635a      	str	r2, [r3, #52]	; 0x34
 8009f52:	e011      	b.n	8009f78 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009f54:	f248 0103 	movw	r1, #32771	; 0x8003
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fc3d 	bl	800a7d8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	2b60      	cmp	r3, #96	; 0x60
 8009f68:	d003      	beq.n	8009f72 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2220      	movs	r2, #32
 8009f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f7c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d039      	beq.n	8009ffa <I2C_ITError+0x102>
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	2b11      	cmp	r3, #17
 8009f8a:	d002      	beq.n	8009f92 <I2C_ITError+0x9a>
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	2b21      	cmp	r3, #33	; 0x21
 8009f90:	d133      	bne.n	8009ffa <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fa0:	d107      	bne.n	8009fb2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009fb0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fd fce4 	bl	8007984 <HAL_DMA_GetState>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d017      	beq.n	8009ff2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc6:	4a33      	ldr	r2, [pc, #204]	; (800a094 <I2C_ITError+0x19c>)
 8009fc8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fc fb66 	bl	80066a8 <HAL_DMA_Abort_IT>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d04d      	beq.n	800a07e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009fec:	4610      	mov	r0, r2
 8009fee:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009ff0:	e045      	b.n	800a07e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f850 	bl	800a098 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009ff8:	e041      	b.n	800a07e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d039      	beq.n	800a076 <I2C_ITError+0x17e>
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	2b12      	cmp	r3, #18
 800a006:	d002      	beq.n	800a00e <I2C_ITError+0x116>
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2b22      	cmp	r3, #34	; 0x22
 800a00c:	d133      	bne.n	800a076 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a01c:	d107      	bne.n	800a02e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a02c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a032:	4618      	mov	r0, r3
 800a034:	f7fd fca6 	bl	8007984 <HAL_DMA_GetState>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d017      	beq.n	800a06e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a042:	4a14      	ldr	r2, [pc, #80]	; (800a094 <I2C_ITError+0x19c>)
 800a044:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a052:	4618      	mov	r0, r3
 800a054:	f7fc fb28 	bl	80066a8 <HAL_DMA_Abort_IT>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d011      	beq.n	800a082 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a068:	4610      	mov	r0, r2
 800a06a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a06c:	e009      	b.n	800a082 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f812 	bl	800a098 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a074:	e005      	b.n	800a082 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 f80e 	bl	800a098 <I2C_TreatErrorCallback>
  }
}
 800a07c:	e002      	b.n	800a084 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a07e:	bf00      	nop
 800a080:	e000      	b.n	800a084 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a082:	bf00      	nop
}
 800a084:	bf00      	nop
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	ffff0000 	.word	0xffff0000
 800a090:	08008d8d 	.word	0x08008d8d
 800a094:	0800a435 	.word	0x0800a435

0800a098 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	2b60      	cmp	r3, #96	; 0x60
 800a0aa:	d10e      	bne.n	800a0ca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2220      	movs	r2, #32
 800a0b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7fe fe58 	bl	8008d78 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a0c8:	e009      	b.n	800a0de <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7fe fe43 	bl	8008d64 <HAL_I2C_ErrorCallback>
}
 800a0de:	bf00      	nop
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	f003 0302 	and.w	r3, r3, #2
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d103      	bne.n	800a104 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2200      	movs	r2, #0
 800a102:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d007      	beq.n	800a122 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	699a      	ldr	r2, [r3, #24]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f042 0201 	orr.w	r2, r2, #1
 800a120:	619a      	str	r2, [r3, #24]
  }
}
 800a122:	bf00      	nop
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b084      	sub	sp, #16
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a14a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a150:	b29b      	uxth	r3, r3
 800a152:	2b00      	cmp	r3, #0
 800a154:	d104      	bne.n	800a160 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a156:	2120      	movs	r1, #32
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 fad9 	bl	800a710 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a15e:	e02d      	b.n	800a1bc <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a168:	441a      	add	r2, r3
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a172:	b29b      	uxth	r3, r3
 800a174:	2bff      	cmp	r3, #255	; 0xff
 800a176:	d903      	bls.n	800a180 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	22ff      	movs	r2, #255	; 0xff
 800a17c:	851a      	strh	r2, [r3, #40]	; 0x28
 800a17e:	e004      	b.n	800a18a <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a184:	b29a      	uxth	r2, r3
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3324      	adds	r3, #36	; 0x24
 800a194:	4619      	mov	r1, r3
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19a:	461a      	mov	r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1a0:	f7fb fcfa 	bl	8005b98 <HAL_DMA_Start_IT>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d004      	beq.n	800a1b4 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a1aa:	2110      	movs	r1, #16
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f7ff fea3 	bl	8009ef8 <I2C_ITError>
}
 800a1b2:	e003      	b.n	800a1bc <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a1b4:	2140      	movs	r1, #64	; 0x40
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 faaa 	bl	800a710 <I2C_Enable_IRQ>
}
 800a1bc:	bf00      	nop
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d4:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d076      	beq.n	800a2cc <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a83      	ldr	r2, [pc, #524]	; (800a3f4 <I2C_DMAError+0x230>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d059      	beq.n	800a29e <I2C_DMAError+0xda>
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a81      	ldr	r2, [pc, #516]	; (800a3f8 <I2C_DMAError+0x234>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d053      	beq.n	800a29e <I2C_DMAError+0xda>
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a7f      	ldr	r2, [pc, #508]	; (800a3fc <I2C_DMAError+0x238>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d04d      	beq.n	800a29e <I2C_DMAError+0xda>
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a7d      	ldr	r2, [pc, #500]	; (800a400 <I2C_DMAError+0x23c>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d047      	beq.n	800a29e <I2C_DMAError+0xda>
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a7b      	ldr	r2, [pc, #492]	; (800a404 <I2C_DMAError+0x240>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d041      	beq.n	800a29e <I2C_DMAError+0xda>
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a79      	ldr	r2, [pc, #484]	; (800a408 <I2C_DMAError+0x244>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d03b      	beq.n	800a29e <I2C_DMAError+0xda>
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a77      	ldr	r2, [pc, #476]	; (800a40c <I2C_DMAError+0x248>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d035      	beq.n	800a29e <I2C_DMAError+0xda>
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a75      	ldr	r2, [pc, #468]	; (800a410 <I2C_DMAError+0x24c>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d02f      	beq.n	800a29e <I2C_DMAError+0xda>
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a73      	ldr	r2, [pc, #460]	; (800a414 <I2C_DMAError+0x250>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d029      	beq.n	800a29e <I2C_DMAError+0xda>
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a71      	ldr	r2, [pc, #452]	; (800a418 <I2C_DMAError+0x254>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d023      	beq.n	800a29e <I2C_DMAError+0xda>
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a6f      	ldr	r2, [pc, #444]	; (800a41c <I2C_DMAError+0x258>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d01d      	beq.n	800a29e <I2C_DMAError+0xda>
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a6d      	ldr	r2, [pc, #436]	; (800a420 <I2C_DMAError+0x25c>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d017      	beq.n	800a29e <I2C_DMAError+0xda>
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a6b      	ldr	r2, [pc, #428]	; (800a424 <I2C_DMAError+0x260>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d011      	beq.n	800a29e <I2C_DMAError+0xda>
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a69      	ldr	r2, [pc, #420]	; (800a428 <I2C_DMAError+0x264>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d00b      	beq.n	800a29e <I2C_DMAError+0xda>
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a67      	ldr	r2, [pc, #412]	; (800a42c <I2C_DMAError+0x268>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d005      	beq.n	800a29e <I2C_DMAError+0xda>
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a65      	ldr	r2, [pc, #404]	; (800a430 <I2C_DMAError+0x26c>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d109      	bne.n	800a2b2 <I2C_DMAError+0xee>
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	bf0c      	ite	eq
 800a2aa:	2301      	moveq	r3, #1
 800a2ac:	2300      	movne	r3, #0
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	e008      	b.n	800a2c4 <I2C_DMAError+0x100>
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	bf0c      	ite	eq
 800a2be:	2301      	moveq	r3, #1
 800a2c0:	2300      	movne	r3, #0
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d076      	beq.n	800a3c2 <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a46      	ldr	r2, [pc, #280]	; (800a3f4 <I2C_DMAError+0x230>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d059      	beq.n	800a394 <I2C_DMAError+0x1d0>
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a44      	ldr	r2, [pc, #272]	; (800a3f8 <I2C_DMAError+0x234>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d053      	beq.n	800a394 <I2C_DMAError+0x1d0>
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a42      	ldr	r2, [pc, #264]	; (800a3fc <I2C_DMAError+0x238>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d04d      	beq.n	800a394 <I2C_DMAError+0x1d0>
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a40      	ldr	r2, [pc, #256]	; (800a400 <I2C_DMAError+0x23c>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d047      	beq.n	800a394 <I2C_DMAError+0x1d0>
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a3e      	ldr	r2, [pc, #248]	; (800a404 <I2C_DMAError+0x240>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d041      	beq.n	800a394 <I2C_DMAError+0x1d0>
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a3c      	ldr	r2, [pc, #240]	; (800a408 <I2C_DMAError+0x244>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d03b      	beq.n	800a394 <I2C_DMAError+0x1d0>
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a3a      	ldr	r2, [pc, #232]	; (800a40c <I2C_DMAError+0x248>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d035      	beq.n	800a394 <I2C_DMAError+0x1d0>
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a38      	ldr	r2, [pc, #224]	; (800a410 <I2C_DMAError+0x24c>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d02f      	beq.n	800a394 <I2C_DMAError+0x1d0>
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a36      	ldr	r2, [pc, #216]	; (800a414 <I2C_DMAError+0x250>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d029      	beq.n	800a394 <I2C_DMAError+0x1d0>
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a34      	ldr	r2, [pc, #208]	; (800a418 <I2C_DMAError+0x254>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d023      	beq.n	800a394 <I2C_DMAError+0x1d0>
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a32      	ldr	r2, [pc, #200]	; (800a41c <I2C_DMAError+0x258>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d01d      	beq.n	800a394 <I2C_DMAError+0x1d0>
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a30      	ldr	r2, [pc, #192]	; (800a420 <I2C_DMAError+0x25c>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d017      	beq.n	800a394 <I2C_DMAError+0x1d0>
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a2e      	ldr	r2, [pc, #184]	; (800a424 <I2C_DMAError+0x260>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d011      	beq.n	800a394 <I2C_DMAError+0x1d0>
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a2c      	ldr	r2, [pc, #176]	; (800a428 <I2C_DMAError+0x264>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d00b      	beq.n	800a394 <I2C_DMAError+0x1d0>
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a2a      	ldr	r2, [pc, #168]	; (800a42c <I2C_DMAError+0x268>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d005      	beq.n	800a394 <I2C_DMAError+0x1d0>
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a28      	ldr	r2, [pc, #160]	; (800a430 <I2C_DMAError+0x26c>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d109      	bne.n	800a3a8 <I2C_DMAError+0x1e4>
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	bf0c      	ite	eq
 800a3a0:	2301      	moveq	r3, #1
 800a3a2:	2300      	movne	r3, #0
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	e008      	b.n	800a3ba <I2C_DMAError+0x1f6>
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	bf0c      	ite	eq
 800a3b4:	2301      	moveq	r3, #1
 800a3b6:	2300      	movne	r3, #0
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7fd faec 	bl	80079a0 <HAL_DMA_GetError>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d00e      	beq.n	800a3ec <I2C_DMAError+0x228>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00b      	beq.n	800a3ec <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	685a      	ldr	r2, [r3, #4]
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3e2:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a3e4:	2110      	movs	r1, #16
 800a3e6:	68b8      	ldr	r0, [r7, #8]
 800a3e8:	f7ff fd86 	bl	8009ef8 <I2C_ITError>
  }
}
 800a3ec:	bf00      	nop
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	40020010 	.word	0x40020010
 800a3f8:	40020028 	.word	0x40020028
 800a3fc:	40020040 	.word	0x40020040
 800a400:	40020058 	.word	0x40020058
 800a404:	40020070 	.word	0x40020070
 800a408:	40020088 	.word	0x40020088
 800a40c:	400200a0 	.word	0x400200a0
 800a410:	400200b8 	.word	0x400200b8
 800a414:	40020410 	.word	0x40020410
 800a418:	40020428 	.word	0x40020428
 800a41c:	40020440 	.word	0x40020440
 800a420:	40020458 	.word	0x40020458
 800a424:	40020470 	.word	0x40020470
 800a428:	40020488 	.word	0x40020488
 800a42c:	400204a0 	.word	0x400204a0
 800a430:	400204b8 	.word	0x400204b8

0800a434 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a440:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a446:	2b00      	cmp	r3, #0
 800a448:	d003      	beq.n	800a452 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44e:	2200      	movs	r2, #0
 800a450:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a456:	2b00      	cmp	r3, #0
 800a458:	d003      	beq.n	800a462 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a45e:	2200      	movs	r2, #0
 800a460:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f7ff fe18 	bl	800a098 <I2C_TreatErrorCallback>
}
 800a468:	bf00      	nop
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	603b      	str	r3, [r7, #0]
 800a47c:	4613      	mov	r3, r2
 800a47e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a480:	e022      	b.n	800a4c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a488:	d01e      	beq.n	800a4c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a48a:	f7fa fedd 	bl	8005248 <HAL_GetTick>
 800a48e:	4602      	mov	r2, r0
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	683a      	ldr	r2, [r7, #0]
 800a496:	429a      	cmp	r2, r3
 800a498:	d302      	bcc.n	800a4a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d113      	bne.n	800a4c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4a4:	f043 0220 	orr.w	r2, r3, #32
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2220      	movs	r2, #32
 800a4b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e00f      	b.n	800a4e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	699a      	ldr	r2, [r3, #24]
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	bf0c      	ite	eq
 800a4d8:	2301      	moveq	r3, #1
 800a4da:	2300      	movne	r3, #0
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	461a      	mov	r2, r3
 800a4e0:	79fb      	ldrb	r3, [r7, #7]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d0cd      	beq.n	800a482 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a4fc:	e02c      	b.n	800a558 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	68b9      	ldr	r1, [r7, #8]
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f000 f870 	bl	800a5e8 <I2C_IsAcknowledgeFailed>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e02a      	b.n	800a568 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a518:	d01e      	beq.n	800a558 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a51a:	f7fa fe95 	bl	8005248 <HAL_GetTick>
 800a51e:	4602      	mov	r2, r0
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	1ad3      	subs	r3, r2, r3
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	429a      	cmp	r2, r3
 800a528:	d302      	bcc.n	800a530 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d113      	bne.n	800a558 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a534:	f043 0220 	orr.w	r2, r3, #32
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2220      	movs	r2, #32
 800a540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	e007      	b.n	800a568 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	f003 0302 	and.w	r3, r3, #2
 800a562:	2b02      	cmp	r3, #2
 800a564:	d1cb      	bne.n	800a4fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a57c:	e028      	b.n	800a5d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	68b9      	ldr	r1, [r7, #8]
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f000 f830 	bl	800a5e8 <I2C_IsAcknowledgeFailed>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e026      	b.n	800a5e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a592:	f7fa fe59 	bl	8005248 <HAL_GetTick>
 800a596:	4602      	mov	r2, r0
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	1ad3      	subs	r3, r2, r3
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d302      	bcc.n	800a5a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d113      	bne.n	800a5d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ac:	f043 0220 	orr.w	r2, r3, #32
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2220      	movs	r2, #32
 800a5b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e007      	b.n	800a5e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	699b      	ldr	r3, [r3, #24]
 800a5d6:	f003 0320 	and.w	r3, r3, #32
 800a5da:	2b20      	cmp	r3, #32
 800a5dc:	d1cf      	bne.n	800a57e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	699b      	ldr	r3, [r3, #24]
 800a5fa:	f003 0310 	and.w	r3, r3, #16
 800a5fe:	2b10      	cmp	r3, #16
 800a600:	d151      	bne.n	800a6a6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a602:	e022      	b.n	800a64a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a60a:	d01e      	beq.n	800a64a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a60c:	f7fa fe1c 	bl	8005248 <HAL_GetTick>
 800a610:	4602      	mov	r2, r0
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d302      	bcc.n	800a622 <I2C_IsAcknowledgeFailed+0x3a>
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d113      	bne.n	800a64a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a626:	f043 0220 	orr.w	r2, r3, #32
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2220      	movs	r2, #32
 800a632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	e02e      	b.n	800a6a8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	699b      	ldr	r3, [r3, #24]
 800a650:	f003 0320 	and.w	r3, r3, #32
 800a654:	2b20      	cmp	r3, #32
 800a656:	d1d5      	bne.n	800a604 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2210      	movs	r2, #16
 800a65e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2220      	movs	r2, #32
 800a666:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f7ff fd3c 	bl	800a0e6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	6859      	ldr	r1, [r3, #4]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	4b0d      	ldr	r3, [pc, #52]	; (800a6b0 <I2C_IsAcknowledgeFailed+0xc8>)
 800a67a:	400b      	ands	r3, r1
 800a67c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a682:	f043 0204 	orr.w	r2, r3, #4
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2220      	movs	r2, #32
 800a68e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e000      	b.n	800a6a8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	fe00e800 	.word	0xfe00e800

0800a6b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	607b      	str	r3, [r7, #4]
 800a6be:	460b      	mov	r3, r1
 800a6c0:	817b      	strh	r3, [r7, #10]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	685a      	ldr	r2, [r3, #4]
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	0d5b      	lsrs	r3, r3, #21
 800a6d0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a6d4:	4b0d      	ldr	r3, [pc, #52]	; (800a70c <I2C_TransferConfig+0x58>)
 800a6d6:	430b      	orrs	r3, r1
 800a6d8:	43db      	mvns	r3, r3
 800a6da:	ea02 0103 	and.w	r1, r2, r3
 800a6de:	897b      	ldrh	r3, [r7, #10]
 800a6e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a6e4:	7a7b      	ldrb	r3, [r7, #9]
 800a6e6:	041b      	lsls	r3, r3, #16
 800a6e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a6ec:	431a      	orrs	r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	431a      	orrs	r2, r3
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	431a      	orrs	r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a6fe:	bf00      	nop
 800a700:	3714      	adds	r7, #20
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	03ff63ff 	.word	0x03ff63ff

0800a710 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	460b      	mov	r3, r1
 800a71a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a71c:	2300      	movs	r3, #0
 800a71e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a724:	4a2a      	ldr	r2, [pc, #168]	; (800a7d0 <I2C_Enable_IRQ+0xc0>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d004      	beq.n	800a734 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a72e:	4a29      	ldr	r2, [pc, #164]	; (800a7d4 <I2C_Enable_IRQ+0xc4>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d11d      	bne.n	800a770 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a734:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	da03      	bge.n	800a744 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a742:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a744:	887b      	ldrh	r3, [r7, #2]
 800a746:	2b10      	cmp	r3, #16
 800a748:	d103      	bne.n	800a752 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a750:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a752:	887b      	ldrh	r3, [r7, #2]
 800a754:	2b20      	cmp	r3, #32
 800a756:	d103      	bne.n	800a760 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a75e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a760:	887b      	ldrh	r3, [r7, #2]
 800a762:	2b40      	cmp	r3, #64	; 0x40
 800a764:	d125      	bne.n	800a7b2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a76c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a76e:	e020      	b.n	800a7b2 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a770:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a774:	2b00      	cmp	r3, #0
 800a776:	da03      	bge.n	800a780 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a77e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a780:	887b      	ldrh	r3, [r7, #2]
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	2b00      	cmp	r3, #0
 800a788:	d003      	beq.n	800a792 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800a790:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a792:	887b      	ldrh	r3, [r7, #2]
 800a794:	f003 0302 	and.w	r3, r3, #2
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d003      	beq.n	800a7a4 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800a7a2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a7a4:	887b      	ldrh	r3, [r7, #2]
 800a7a6:	2b20      	cmp	r3, #32
 800a7a8:	d103      	bne.n	800a7b2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f043 0320 	orr.w	r3, r3, #32
 800a7b0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	6819      	ldr	r1, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	430a      	orrs	r2, r1
 800a7c0:	601a      	str	r2, [r3, #0]
}
 800a7c2:	bf00      	nop
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	08008f93 	.word	0x08008f93
 800a7d4:	08009179 	.word	0x08009179

0800a7d8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a7e8:	887b      	ldrh	r3, [r7, #2]
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00f      	beq.n	800a812 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a7f8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a800:	b2db      	uxtb	r3, r3
 800a802:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a806:	2b28      	cmp	r3, #40	; 0x28
 800a808:	d003      	beq.n	800a812 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a810:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a812:	887b      	ldrh	r3, [r7, #2]
 800a814:	f003 0302 	and.w	r3, r3, #2
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00f      	beq.n	800a83c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a822:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a830:	2b28      	cmp	r3, #40	; 0x28
 800a832:	d003      	beq.n	800a83c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a83a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a83c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a840:	2b00      	cmp	r3, #0
 800a842:	da03      	bge.n	800a84c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a84a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a84c:	887b      	ldrh	r3, [r7, #2]
 800a84e:	2b10      	cmp	r3, #16
 800a850:	d103      	bne.n	800a85a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a858:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a85a:	887b      	ldrh	r3, [r7, #2]
 800a85c:	2b20      	cmp	r3, #32
 800a85e:	d103      	bne.n	800a868 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f043 0320 	orr.w	r3, r3, #32
 800a866:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a868:	887b      	ldrh	r3, [r7, #2]
 800a86a:	2b40      	cmp	r3, #64	; 0x40
 800a86c:	d103      	bne.n	800a876 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a874:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	6819      	ldr	r1, [r3, #0]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	43da      	mvns	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	400a      	ands	r2, r1
 800a886:	601a      	str	r2, [r3, #0]
}
 800a888:	bf00      	nop
 800a88a:	3714      	adds	r7, #20
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b20      	cmp	r3, #32
 800a8a8:	d138      	bne.n	800a91c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d101      	bne.n	800a8b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	e032      	b.n	800a91e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2224      	movs	r2, #36	; 0x24
 800a8c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f022 0201 	bic.w	r2, r2, #1
 800a8d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a8e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6819      	ldr	r1, [r3, #0]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	430a      	orrs	r2, r1
 800a8f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f042 0201 	orr.w	r2, r2, #1
 800a906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2220      	movs	r2, #32
 800a90c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	e000      	b.n	800a91e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a91c:	2302      	movs	r3, #2
  }
}
 800a91e:	4618      	mov	r0, r3
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a92a:	b480      	push	{r7}
 800a92c:	b085      	sub	sp, #20
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b20      	cmp	r3, #32
 800a93e:	d139      	bne.n	800a9b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a946:	2b01      	cmp	r3, #1
 800a948:	d101      	bne.n	800a94e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a94a:	2302      	movs	r3, #2
 800a94c:	e033      	b.n	800a9b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2224      	movs	r2, #36	; 0x24
 800a95a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f022 0201 	bic.w	r2, r2, #1
 800a96c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a97c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	021b      	lsls	r3, r3, #8
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	4313      	orrs	r3, r2
 800a986:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f042 0201 	orr.w	r2, r2, #1
 800a99e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2220      	movs	r2, #32
 800a9a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e000      	b.n	800a9b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a9b4:	2302      	movs	r3, #2
  }
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
	...

0800a9c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a9cc:	4b19      	ldr	r3, [pc, #100]	; (800aa34 <HAL_PWREx_ConfigSupply+0x70>)
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	f003 0304 	and.w	r3, r3, #4
 800a9d4:	2b04      	cmp	r3, #4
 800a9d6:	d00a      	beq.n	800a9ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a9d8:	4b16      	ldr	r3, [pc, #88]	; (800aa34 <HAL_PWREx_ConfigSupply+0x70>)
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	f003 0307 	and.w	r3, r3, #7
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d001      	beq.n	800a9ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e01f      	b.n	800aa2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	e01d      	b.n	800aa2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a9ee:	4b11      	ldr	r3, [pc, #68]	; (800aa34 <HAL_PWREx_ConfigSupply+0x70>)
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	f023 0207 	bic.w	r2, r3, #7
 800a9f6:	490f      	ldr	r1, [pc, #60]	; (800aa34 <HAL_PWREx_ConfigSupply+0x70>)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a9fe:	f7fa fc23 	bl	8005248 <HAL_GetTick>
 800aa02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aa04:	e009      	b.n	800aa1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800aa06:	f7fa fc1f 	bl	8005248 <HAL_GetTick>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa14:	d901      	bls.n	800aa1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e007      	b.n	800aa2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aa1a:	4b06      	ldr	r3, [pc, #24]	; (800aa34 <HAL_PWREx_ConfigSupply+0x70>)
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa26:	d1ee      	bne.n	800aa06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	58024800 	.word	0x58024800

0800aa38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b08c      	sub	sp, #48	; 0x30
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d101      	bne.n	800aa4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	e3ff      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0301 	and.w	r3, r3, #1
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f000 8087 	beq.w	800ab66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa58:	4b99      	ldr	r3, [pc, #612]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa60:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa62:	4b97      	ldr	r3, [pc, #604]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800aa64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa66:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aa68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6a:	2b10      	cmp	r3, #16
 800aa6c:	d007      	beq.n	800aa7e <HAL_RCC_OscConfig+0x46>
 800aa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa70:	2b18      	cmp	r3, #24
 800aa72:	d110      	bne.n	800aa96 <HAL_RCC_OscConfig+0x5e>
 800aa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa76:	f003 0303 	and.w	r3, r3, #3
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d10b      	bne.n	800aa96 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa7e:	4b90      	ldr	r3, [pc, #576]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d06c      	beq.n	800ab64 <HAL_RCC_OscConfig+0x12c>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d168      	bne.n	800ab64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e3d9      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa9e:	d106      	bne.n	800aaae <HAL_RCC_OscConfig+0x76>
 800aaa0:	4b87      	ldr	r3, [pc, #540]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a86      	ldr	r2, [pc, #536]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800aaa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aaaa:	6013      	str	r3, [r2, #0]
 800aaac:	e02e      	b.n	800ab0c <HAL_RCC_OscConfig+0xd4>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d10c      	bne.n	800aad0 <HAL_RCC_OscConfig+0x98>
 800aab6:	4b82      	ldr	r3, [pc, #520]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a81      	ldr	r2, [pc, #516]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800aabc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aac0:	6013      	str	r3, [r2, #0]
 800aac2:	4b7f      	ldr	r3, [pc, #508]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a7e      	ldr	r2, [pc, #504]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800aac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aacc:	6013      	str	r3, [r2, #0]
 800aace:	e01d      	b.n	800ab0c <HAL_RCC_OscConfig+0xd4>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aad8:	d10c      	bne.n	800aaf4 <HAL_RCC_OscConfig+0xbc>
 800aada:	4b79      	ldr	r3, [pc, #484]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a78      	ldr	r2, [pc, #480]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800aae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aae4:	6013      	str	r3, [r2, #0]
 800aae6:	4b76      	ldr	r3, [pc, #472]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a75      	ldr	r2, [pc, #468]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800aaec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aaf0:	6013      	str	r3, [r2, #0]
 800aaf2:	e00b      	b.n	800ab0c <HAL_RCC_OscConfig+0xd4>
 800aaf4:	4b72      	ldr	r3, [pc, #456]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a71      	ldr	r2, [pc, #452]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800aafa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aafe:	6013      	str	r3, [r2, #0]
 800ab00:	4b6f      	ldr	r3, [pc, #444]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a6e      	ldr	r2, [pc, #440]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ab06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d013      	beq.n	800ab3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab14:	f7fa fb98 	bl	8005248 <HAL_GetTick>
 800ab18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab1a:	e008      	b.n	800ab2e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab1c:	f7fa fb94 	bl	8005248 <HAL_GetTick>
 800ab20:	4602      	mov	r2, r0
 800ab22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab24:	1ad3      	subs	r3, r2, r3
 800ab26:	2b64      	cmp	r3, #100	; 0x64
 800ab28:	d901      	bls.n	800ab2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ab2a:	2303      	movs	r3, #3
 800ab2c:	e38d      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab2e:	4b64      	ldr	r3, [pc, #400]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d0f0      	beq.n	800ab1c <HAL_RCC_OscConfig+0xe4>
 800ab3a:	e014      	b.n	800ab66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab3c:	f7fa fb84 	bl	8005248 <HAL_GetTick>
 800ab40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab42:	e008      	b.n	800ab56 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab44:	f7fa fb80 	bl	8005248 <HAL_GetTick>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	1ad3      	subs	r3, r2, r3
 800ab4e:	2b64      	cmp	r3, #100	; 0x64
 800ab50:	d901      	bls.n	800ab56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ab52:	2303      	movs	r3, #3
 800ab54:	e379      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab56:	4b5a      	ldr	r3, [pc, #360]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1f0      	bne.n	800ab44 <HAL_RCC_OscConfig+0x10c>
 800ab62:	e000      	b.n	800ab66 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f003 0302 	and.w	r3, r3, #2
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f000 80ae 	beq.w	800acd0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab74:	4b52      	ldr	r3, [pc, #328]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab7e:	4b50      	ldr	r3, [pc, #320]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ab80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab82:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ab84:	6a3b      	ldr	r3, [r7, #32]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d007      	beq.n	800ab9a <HAL_RCC_OscConfig+0x162>
 800ab8a:	6a3b      	ldr	r3, [r7, #32]
 800ab8c:	2b18      	cmp	r3, #24
 800ab8e:	d13a      	bne.n	800ac06 <HAL_RCC_OscConfig+0x1ce>
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	f003 0303 	and.w	r3, r3, #3
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d135      	bne.n	800ac06 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab9a:	4b49      	ldr	r3, [pc, #292]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 0304 	and.w	r3, r3, #4
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d005      	beq.n	800abb2 <HAL_RCC_OscConfig+0x17a>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d101      	bne.n	800abb2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e34b      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abb2:	f7fa fb79 	bl	80052a8 <HAL_GetREVID>
 800abb6:	4603      	mov	r3, r0
 800abb8:	f241 0203 	movw	r2, #4099	; 0x1003
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d817      	bhi.n	800abf0 <HAL_RCC_OscConfig+0x1b8>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	2b40      	cmp	r3, #64	; 0x40
 800abc6:	d108      	bne.n	800abda <HAL_RCC_OscConfig+0x1a2>
 800abc8:	4b3d      	ldr	r3, [pc, #244]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800abd0:	4a3b      	ldr	r2, [pc, #236]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800abd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abd6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800abd8:	e07a      	b.n	800acd0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abda:	4b39      	ldr	r3, [pc, #228]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	031b      	lsls	r3, r3, #12
 800abe8:	4935      	ldr	r1, [pc, #212]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800abea:	4313      	orrs	r3, r2
 800abec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800abee:	e06f      	b.n	800acd0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abf0:	4b33      	ldr	r3, [pc, #204]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	061b      	lsls	r3, r3, #24
 800abfe:	4930      	ldr	r1, [pc, #192]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ac00:	4313      	orrs	r3, r2
 800ac02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac04:	e064      	b.n	800acd0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d045      	beq.n	800ac9a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ac0e:	4b2c      	ldr	r3, [pc, #176]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f023 0219 	bic.w	r2, r3, #25
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	4929      	ldr	r1, [pc, #164]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac20:	f7fa fb12 	bl	8005248 <HAL_GetTick>
 800ac24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac26:	e008      	b.n	800ac3a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac28:	f7fa fb0e 	bl	8005248 <HAL_GetTick>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac30:	1ad3      	subs	r3, r2, r3
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d901      	bls.n	800ac3a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800ac36:	2303      	movs	r3, #3
 800ac38:	e307      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac3a:	4b21      	ldr	r3, [pc, #132]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0304 	and.w	r3, r3, #4
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0f0      	beq.n	800ac28 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac46:	f7fa fb2f 	bl	80052a8 <HAL_GetREVID>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	f241 0203 	movw	r2, #4099	; 0x1003
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d817      	bhi.n	800ac84 <HAL_RCC_OscConfig+0x24c>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	691b      	ldr	r3, [r3, #16]
 800ac58:	2b40      	cmp	r3, #64	; 0x40
 800ac5a:	d108      	bne.n	800ac6e <HAL_RCC_OscConfig+0x236>
 800ac5c:	4b18      	ldr	r3, [pc, #96]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ac64:	4a16      	ldr	r2, [pc, #88]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ac66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac6a:	6053      	str	r3, [r2, #4]
 800ac6c:	e030      	b.n	800acd0 <HAL_RCC_OscConfig+0x298>
 800ac6e:	4b14      	ldr	r3, [pc, #80]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	031b      	lsls	r3, r3, #12
 800ac7c:	4910      	ldr	r1, [pc, #64]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	604b      	str	r3, [r1, #4]
 800ac82:	e025      	b.n	800acd0 <HAL_RCC_OscConfig+0x298>
 800ac84:	4b0e      	ldr	r3, [pc, #56]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	061b      	lsls	r3, r3, #24
 800ac92:	490b      	ldr	r1, [pc, #44]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ac94:	4313      	orrs	r3, r2
 800ac96:	604b      	str	r3, [r1, #4]
 800ac98:	e01a      	b.n	800acd0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac9a:	4b09      	ldr	r3, [pc, #36]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a08      	ldr	r2, [pc, #32]	; (800acc0 <HAL_RCC_OscConfig+0x288>)
 800aca0:	f023 0301 	bic.w	r3, r3, #1
 800aca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aca6:	f7fa facf 	bl	8005248 <HAL_GetTick>
 800acaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800acac:	e00a      	b.n	800acc4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800acae:	f7fa facb 	bl	8005248 <HAL_GetTick>
 800acb2:	4602      	mov	r2, r0
 800acb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb6:	1ad3      	subs	r3, r2, r3
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d903      	bls.n	800acc4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800acbc:	2303      	movs	r3, #3
 800acbe:	e2c4      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
 800acc0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800acc4:	4ba4      	ldr	r3, [pc, #656]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0304 	and.w	r3, r3, #4
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1ee      	bne.n	800acae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 0310 	and.w	r3, r3, #16
 800acd8:	2b00      	cmp	r3, #0
 800acda:	f000 80a9 	beq.w	800ae30 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acde:	4b9e      	ldr	r3, [pc, #632]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ace0:	691b      	ldr	r3, [r3, #16]
 800ace2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ace6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ace8:	4b9b      	ldr	r3, [pc, #620]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800acea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	2b08      	cmp	r3, #8
 800acf2:	d007      	beq.n	800ad04 <HAL_RCC_OscConfig+0x2cc>
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	2b18      	cmp	r3, #24
 800acf8:	d13a      	bne.n	800ad70 <HAL_RCC_OscConfig+0x338>
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	f003 0303 	and.w	r3, r3, #3
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d135      	bne.n	800ad70 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad04:	4b94      	ldr	r3, [pc, #592]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d005      	beq.n	800ad1c <HAL_RCC_OscConfig+0x2e4>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	69db      	ldr	r3, [r3, #28]
 800ad14:	2b80      	cmp	r3, #128	; 0x80
 800ad16:	d001      	beq.n	800ad1c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e296      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad1c:	f7fa fac4 	bl	80052a8 <HAL_GetREVID>
 800ad20:	4603      	mov	r3, r0
 800ad22:	f241 0203 	movw	r2, #4099	; 0x1003
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d817      	bhi.n	800ad5a <HAL_RCC_OscConfig+0x322>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a1b      	ldr	r3, [r3, #32]
 800ad2e:	2b20      	cmp	r3, #32
 800ad30:	d108      	bne.n	800ad44 <HAL_RCC_OscConfig+0x30c>
 800ad32:	4b89      	ldr	r3, [pc, #548]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ad3a:	4a87      	ldr	r2, [pc, #540]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ad3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad42:	e075      	b.n	800ae30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad44:	4b84      	ldr	r3, [pc, #528]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a1b      	ldr	r3, [r3, #32]
 800ad50:	069b      	lsls	r3, r3, #26
 800ad52:	4981      	ldr	r1, [pc, #516]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ad54:	4313      	orrs	r3, r2
 800ad56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad58:	e06a      	b.n	800ae30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad5a:	4b7f      	ldr	r3, [pc, #508]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a1b      	ldr	r3, [r3, #32]
 800ad66:	061b      	lsls	r3, r3, #24
 800ad68:	497b      	ldr	r1, [pc, #492]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad6e:	e05f      	b.n	800ae30 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	69db      	ldr	r3, [r3, #28]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d042      	beq.n	800adfe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ad78:	4b77      	ldr	r3, [pc, #476]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a76      	ldr	r2, [pc, #472]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ad7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad84:	f7fa fa60 	bl	8005248 <HAL_GetTick>
 800ad88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad8a:	e008      	b.n	800ad9e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ad8c:	f7fa fa5c 	bl	8005248 <HAL_GetTick>
 800ad90:	4602      	mov	r2, r0
 800ad92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad94:	1ad3      	subs	r3, r2, r3
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d901      	bls.n	800ad9e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	e255      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad9e:	4b6e      	ldr	r3, [pc, #440]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d0f0      	beq.n	800ad8c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800adaa:	f7fa fa7d 	bl	80052a8 <HAL_GetREVID>
 800adae:	4603      	mov	r3, r0
 800adb0:	f241 0203 	movw	r2, #4099	; 0x1003
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d817      	bhi.n	800ade8 <HAL_RCC_OscConfig+0x3b0>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a1b      	ldr	r3, [r3, #32]
 800adbc:	2b20      	cmp	r3, #32
 800adbe:	d108      	bne.n	800add2 <HAL_RCC_OscConfig+0x39a>
 800adc0:	4b65      	ldr	r3, [pc, #404]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800adc8:	4a63      	ldr	r2, [pc, #396]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800adca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800adce:	6053      	str	r3, [r2, #4]
 800add0:	e02e      	b.n	800ae30 <HAL_RCC_OscConfig+0x3f8>
 800add2:	4b61      	ldr	r3, [pc, #388]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	069b      	lsls	r3, r3, #26
 800ade0:	495d      	ldr	r1, [pc, #372]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ade2:	4313      	orrs	r3, r2
 800ade4:	604b      	str	r3, [r1, #4]
 800ade6:	e023      	b.n	800ae30 <HAL_RCC_OscConfig+0x3f8>
 800ade8:	4b5b      	ldr	r3, [pc, #364]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a1b      	ldr	r3, [r3, #32]
 800adf4:	061b      	lsls	r3, r3, #24
 800adf6:	4958      	ldr	r1, [pc, #352]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800adf8:	4313      	orrs	r3, r2
 800adfa:	60cb      	str	r3, [r1, #12]
 800adfc:	e018      	b.n	800ae30 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800adfe:	4b56      	ldr	r3, [pc, #344]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a55      	ldr	r2, [pc, #340]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ae04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae0a:	f7fa fa1d 	bl	8005248 <HAL_GetTick>
 800ae0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ae10:	e008      	b.n	800ae24 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ae12:	f7fa fa19 	bl	8005248 <HAL_GetTick>
 800ae16:	4602      	mov	r2, r0
 800ae18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d901      	bls.n	800ae24 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800ae20:	2303      	movs	r3, #3
 800ae22:	e212      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ae24:	4b4c      	ldr	r3, [pc, #304]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1f0      	bne.n	800ae12 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 0308 	and.w	r3, r3, #8
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d036      	beq.n	800aeaa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	695b      	ldr	r3, [r3, #20]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d019      	beq.n	800ae78 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae44:	4b44      	ldr	r3, [pc, #272]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ae46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae48:	4a43      	ldr	r2, [pc, #268]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ae4a:	f043 0301 	orr.w	r3, r3, #1
 800ae4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae50:	f7fa f9fa 	bl	8005248 <HAL_GetTick>
 800ae54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ae56:	e008      	b.n	800ae6a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae58:	f7fa f9f6 	bl	8005248 <HAL_GetTick>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d901      	bls.n	800ae6a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800ae66:	2303      	movs	r3, #3
 800ae68:	e1ef      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ae6a:	4b3b      	ldr	r3, [pc, #236]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ae6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae6e:	f003 0302 	and.w	r3, r3, #2
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d0f0      	beq.n	800ae58 <HAL_RCC_OscConfig+0x420>
 800ae76:	e018      	b.n	800aeaa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae78:	4b37      	ldr	r3, [pc, #220]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ae7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae7c:	4a36      	ldr	r2, [pc, #216]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800ae7e:	f023 0301 	bic.w	r3, r3, #1
 800ae82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae84:	f7fa f9e0 	bl	8005248 <HAL_GetTick>
 800ae88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ae8a:	e008      	b.n	800ae9e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae8c:	f7fa f9dc 	bl	8005248 <HAL_GetTick>
 800ae90:	4602      	mov	r2, r0
 800ae92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae94:	1ad3      	subs	r3, r2, r3
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d901      	bls.n	800ae9e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e1d5      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ae9e:	4b2e      	ldr	r3, [pc, #184]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800aea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aea2:	f003 0302 	and.w	r3, r3, #2
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1f0      	bne.n	800ae8c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 0320 	and.w	r3, r3, #32
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d036      	beq.n	800af24 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	699b      	ldr	r3, [r3, #24]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d019      	beq.n	800aef2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aebe:	4b26      	ldr	r3, [pc, #152]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a25      	ldr	r2, [pc, #148]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800aec4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aec8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aeca:	f7fa f9bd 	bl	8005248 <HAL_GetTick>
 800aece:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aed0:	e008      	b.n	800aee4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800aed2:	f7fa f9b9 	bl	8005248 <HAL_GetTick>
 800aed6:	4602      	mov	r2, r0
 800aed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	2b02      	cmp	r3, #2
 800aede:	d901      	bls.n	800aee4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e1b2      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aee4:	4b1c      	ldr	r3, [pc, #112]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d0f0      	beq.n	800aed2 <HAL_RCC_OscConfig+0x49a>
 800aef0:	e018      	b.n	800af24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aef2:	4b19      	ldr	r3, [pc, #100]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a18      	ldr	r2, [pc, #96]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800aef8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aefc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aefe:	f7fa f9a3 	bl	8005248 <HAL_GetTick>
 800af02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800af04:	e008      	b.n	800af18 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800af06:	f7fa f99f 	bl	8005248 <HAL_GetTick>
 800af0a:	4602      	mov	r2, r0
 800af0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0e:	1ad3      	subs	r3, r2, r3
 800af10:	2b02      	cmp	r3, #2
 800af12:	d901      	bls.n	800af18 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800af14:	2303      	movs	r3, #3
 800af16:	e198      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800af18:	4b0f      	ldr	r3, [pc, #60]	; (800af58 <HAL_RCC_OscConfig+0x520>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af20:	2b00      	cmp	r3, #0
 800af22:	d1f0      	bne.n	800af06 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 0304 	and.w	r3, r3, #4
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 8085 	beq.w	800b03c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800af32:	4b0a      	ldr	r3, [pc, #40]	; (800af5c <HAL_RCC_OscConfig+0x524>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a09      	ldr	r2, [pc, #36]	; (800af5c <HAL_RCC_OscConfig+0x524>)
 800af38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af3e:	f7fa f983 	bl	8005248 <HAL_GetTick>
 800af42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af44:	e00c      	b.n	800af60 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800af46:	f7fa f97f 	bl	8005248 <HAL_GetTick>
 800af4a:	4602      	mov	r2, r0
 800af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4e:	1ad3      	subs	r3, r2, r3
 800af50:	2b64      	cmp	r3, #100	; 0x64
 800af52:	d905      	bls.n	800af60 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800af54:	2303      	movs	r3, #3
 800af56:	e178      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
 800af58:	58024400 	.word	0x58024400
 800af5c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af60:	4b96      	ldr	r3, [pc, #600]	; (800b1bc <HAL_RCC_OscConfig+0x784>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d0ec      	beq.n	800af46 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	2b01      	cmp	r3, #1
 800af72:	d106      	bne.n	800af82 <HAL_RCC_OscConfig+0x54a>
 800af74:	4b92      	ldr	r3, [pc, #584]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800af76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af78:	4a91      	ldr	r2, [pc, #580]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800af7a:	f043 0301 	orr.w	r3, r3, #1
 800af7e:	6713      	str	r3, [r2, #112]	; 0x70
 800af80:	e02d      	b.n	800afde <HAL_RCC_OscConfig+0x5a6>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10c      	bne.n	800afa4 <HAL_RCC_OscConfig+0x56c>
 800af8a:	4b8d      	ldr	r3, [pc, #564]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800af8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8e:	4a8c      	ldr	r2, [pc, #560]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800af90:	f023 0301 	bic.w	r3, r3, #1
 800af94:	6713      	str	r3, [r2, #112]	; 0x70
 800af96:	4b8a      	ldr	r3, [pc, #552]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800af98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af9a:	4a89      	ldr	r2, [pc, #548]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800af9c:	f023 0304 	bic.w	r3, r3, #4
 800afa0:	6713      	str	r3, [r2, #112]	; 0x70
 800afa2:	e01c      	b.n	800afde <HAL_RCC_OscConfig+0x5a6>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	2b05      	cmp	r3, #5
 800afaa:	d10c      	bne.n	800afc6 <HAL_RCC_OscConfig+0x58e>
 800afac:	4b84      	ldr	r3, [pc, #528]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800afae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb0:	4a83      	ldr	r2, [pc, #524]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800afb2:	f043 0304 	orr.w	r3, r3, #4
 800afb6:	6713      	str	r3, [r2, #112]	; 0x70
 800afb8:	4b81      	ldr	r3, [pc, #516]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800afba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afbc:	4a80      	ldr	r2, [pc, #512]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800afbe:	f043 0301 	orr.w	r3, r3, #1
 800afc2:	6713      	str	r3, [r2, #112]	; 0x70
 800afc4:	e00b      	b.n	800afde <HAL_RCC_OscConfig+0x5a6>
 800afc6:	4b7e      	ldr	r3, [pc, #504]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800afc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afca:	4a7d      	ldr	r2, [pc, #500]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800afcc:	f023 0301 	bic.w	r3, r3, #1
 800afd0:	6713      	str	r3, [r2, #112]	; 0x70
 800afd2:	4b7b      	ldr	r3, [pc, #492]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800afd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd6:	4a7a      	ldr	r2, [pc, #488]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800afd8:	f023 0304 	bic.w	r3, r3, #4
 800afdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d015      	beq.n	800b012 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afe6:	f7fa f92f 	bl	8005248 <HAL_GetTick>
 800afea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800afec:	e00a      	b.n	800b004 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afee:	f7fa f92b 	bl	8005248 <HAL_GetTick>
 800aff2:	4602      	mov	r2, r0
 800aff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff6:	1ad3      	subs	r3, r2, r3
 800aff8:	f241 3288 	movw	r2, #5000	; 0x1388
 800affc:	4293      	cmp	r3, r2
 800affe:	d901      	bls.n	800b004 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800b000:	2303      	movs	r3, #3
 800b002:	e122      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b004:	4b6e      	ldr	r3, [pc, #440]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b008:	f003 0302 	and.w	r3, r3, #2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d0ee      	beq.n	800afee <HAL_RCC_OscConfig+0x5b6>
 800b010:	e014      	b.n	800b03c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b012:	f7fa f919 	bl	8005248 <HAL_GetTick>
 800b016:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b018:	e00a      	b.n	800b030 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b01a:	f7fa f915 	bl	8005248 <HAL_GetTick>
 800b01e:	4602      	mov	r2, r0
 800b020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b022:	1ad3      	subs	r3, r2, r3
 800b024:	f241 3288 	movw	r2, #5000	; 0x1388
 800b028:	4293      	cmp	r3, r2
 800b02a:	d901      	bls.n	800b030 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800b02c:	2303      	movs	r3, #3
 800b02e:	e10c      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b030:	4b63      	ldr	r3, [pc, #396]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b034:	f003 0302 	and.w	r3, r3, #2
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d1ee      	bne.n	800b01a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b040:	2b00      	cmp	r3, #0
 800b042:	f000 8101 	beq.w	800b248 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b046:	4b5e      	ldr	r3, [pc, #376]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b04e:	2b18      	cmp	r3, #24
 800b050:	f000 80bc 	beq.w	800b1cc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b058:	2b02      	cmp	r3, #2
 800b05a:	f040 8095 	bne.w	800b188 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b05e:	4b58      	ldr	r3, [pc, #352]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a57      	ldr	r2, [pc, #348]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b064:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b06a:	f7fa f8ed 	bl	8005248 <HAL_GetTick>
 800b06e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b070:	e008      	b.n	800b084 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b072:	f7fa f8e9 	bl	8005248 <HAL_GetTick>
 800b076:	4602      	mov	r2, r0
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	2b02      	cmp	r3, #2
 800b07e:	d901      	bls.n	800b084 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800b080:	2303      	movs	r3, #3
 800b082:	e0e2      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b084:	4b4e      	ldr	r3, [pc, #312]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1f0      	bne.n	800b072 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b090:	4b4b      	ldr	r3, [pc, #300]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b094:	4b4b      	ldr	r3, [pc, #300]	; (800b1c4 <HAL_RCC_OscConfig+0x78c>)
 800b096:	4013      	ands	r3, r2
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b0a0:	0112      	lsls	r2, r2, #4
 800b0a2:	430a      	orrs	r2, r1
 800b0a4:	4946      	ldr	r1, [pc, #280]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	628b      	str	r3, [r1, #40]	; 0x28
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	025b      	lsls	r3, r3, #9
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	431a      	orrs	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	041b      	lsls	r3, r3, #16
 800b0c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b0cc:	431a      	orrs	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	061b      	lsls	r3, r3, #24
 800b0d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b0da:	4939      	ldr	r1, [pc, #228]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b0e0:	4b37      	ldr	r3, [pc, #220]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e4:	4a36      	ldr	r2, [pc, #216]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b0e6:	f023 0301 	bic.w	r3, r3, #1
 800b0ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b0ec:	4b34      	ldr	r3, [pc, #208]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b0ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0f0:	4b35      	ldr	r3, [pc, #212]	; (800b1c8 <HAL_RCC_OscConfig+0x790>)
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b0f8:	00d2      	lsls	r2, r2, #3
 800b0fa:	4931      	ldr	r1, [pc, #196]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b100:	4b2f      	ldr	r3, [pc, #188]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b104:	f023 020c 	bic.w	r2, r3, #12
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10c:	492c      	ldr	r1, [pc, #176]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b10e:	4313      	orrs	r3, r2
 800b110:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b112:	4b2b      	ldr	r3, [pc, #172]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b116:	f023 0202 	bic.w	r2, r3, #2
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b11e:	4928      	ldr	r1, [pc, #160]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b120:	4313      	orrs	r3, r2
 800b122:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b124:	4b26      	ldr	r3, [pc, #152]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b128:	4a25      	ldr	r2, [pc, #148]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b12a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b12e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b130:	4b23      	ldr	r3, [pc, #140]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b134:	4a22      	ldr	r2, [pc, #136]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b13a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b13c:	4b20      	ldr	r3, [pc, #128]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b140:	4a1f      	ldr	r2, [pc, #124]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b142:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b148:	4b1d      	ldr	r3, [pc, #116]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14c:	4a1c      	ldr	r2, [pc, #112]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b14e:	f043 0301 	orr.w	r3, r3, #1
 800b152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b154:	4b1a      	ldr	r3, [pc, #104]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a19      	ldr	r2, [pc, #100]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b15a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b15e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b160:	f7fa f872 	bl	8005248 <HAL_GetTick>
 800b164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b166:	e008      	b.n	800b17a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b168:	f7fa f86e 	bl	8005248 <HAL_GetTick>
 800b16c:	4602      	mov	r2, r0
 800b16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b170:	1ad3      	subs	r3, r2, r3
 800b172:	2b02      	cmp	r3, #2
 800b174:	d901      	bls.n	800b17a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800b176:	2303      	movs	r3, #3
 800b178:	e067      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b17a:	4b11      	ldr	r3, [pc, #68]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b182:	2b00      	cmp	r3, #0
 800b184:	d0f0      	beq.n	800b168 <HAL_RCC_OscConfig+0x730>
 800b186:	e05f      	b.n	800b248 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b188:	4b0d      	ldr	r3, [pc, #52]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a0c      	ldr	r2, [pc, #48]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b18e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b194:	f7fa f858 	bl	8005248 <HAL_GetTick>
 800b198:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b19a:	e008      	b.n	800b1ae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b19c:	f7fa f854 	bl	8005248 <HAL_GetTick>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d901      	bls.n	800b1ae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800b1aa:	2303      	movs	r3, #3
 800b1ac:	e04d      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b1ae:	4b04      	ldr	r3, [pc, #16]	; (800b1c0 <HAL_RCC_OscConfig+0x788>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1f0      	bne.n	800b19c <HAL_RCC_OscConfig+0x764>
 800b1ba:	e045      	b.n	800b248 <HAL_RCC_OscConfig+0x810>
 800b1bc:	58024800 	.word	0x58024800
 800b1c0:	58024400 	.word	0x58024400
 800b1c4:	fffffc0c 	.word	0xfffffc0c
 800b1c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b1cc:	4b21      	ldr	r3, [pc, #132]	; (800b254 <HAL_RCC_OscConfig+0x81c>)
 800b1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b1d2:	4b20      	ldr	r3, [pc, #128]	; (800b254 <HAL_RCC_OscConfig+0x81c>)
 800b1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d031      	beq.n	800b244 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	f003 0203 	and.w	r2, r3, #3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d12a      	bne.n	800b244 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	091b      	lsrs	r3, r3, #4
 800b1f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d122      	bne.n	800b244 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b208:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d11a      	bne.n	800b244 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	0a5b      	lsrs	r3, r3, #9
 800b212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b21a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d111      	bne.n	800b244 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	0c1b      	lsrs	r3, r3, #16
 800b224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b22e:	429a      	cmp	r2, r3
 800b230:	d108      	bne.n	800b244 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	0e1b      	lsrs	r3, r3, #24
 800b236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b23e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b240:	429a      	cmp	r2, r3
 800b242:	d001      	beq.n	800b248 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	e000      	b.n	800b24a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3730      	adds	r7, #48	; 0x30
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	58024400 	.word	0x58024400

0800b258 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d101      	bne.n	800b26c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b268:	2301      	movs	r3, #1
 800b26a:	e19c      	b.n	800b5a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b26c:	4b8a      	ldr	r3, [pc, #552]	; (800b498 <HAL_RCC_ClockConfig+0x240>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f003 030f 	and.w	r3, r3, #15
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	429a      	cmp	r2, r3
 800b278:	d910      	bls.n	800b29c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b27a:	4b87      	ldr	r3, [pc, #540]	; (800b498 <HAL_RCC_ClockConfig+0x240>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f023 020f 	bic.w	r2, r3, #15
 800b282:	4985      	ldr	r1, [pc, #532]	; (800b498 <HAL_RCC_ClockConfig+0x240>)
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	4313      	orrs	r3, r2
 800b288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b28a:	4b83      	ldr	r3, [pc, #524]	; (800b498 <HAL_RCC_ClockConfig+0x240>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f003 030f 	and.w	r3, r3, #15
 800b292:	683a      	ldr	r2, [r7, #0]
 800b294:	429a      	cmp	r2, r3
 800b296:	d001      	beq.n	800b29c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	e184      	b.n	800b5a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 0304 	and.w	r3, r3, #4
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d010      	beq.n	800b2ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	691a      	ldr	r2, [r3, #16]
 800b2ac:	4b7b      	ldr	r3, [pc, #492]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b2ae:	699b      	ldr	r3, [r3, #24]
 800b2b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d908      	bls.n	800b2ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b2b8:	4b78      	ldr	r3, [pc, #480]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	4975      	ldr	r1, [pc, #468]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 0308 	and.w	r3, r3, #8
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d010      	beq.n	800b2f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	695a      	ldr	r2, [r3, #20]
 800b2da:	4b70      	ldr	r3, [pc, #448]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b2dc:	69db      	ldr	r3, [r3, #28]
 800b2de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d908      	bls.n	800b2f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b2e6:	4b6d      	ldr	r3, [pc, #436]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b2e8:	69db      	ldr	r3, [r3, #28]
 800b2ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	695b      	ldr	r3, [r3, #20]
 800b2f2:	496a      	ldr	r1, [pc, #424]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f003 0310 	and.w	r3, r3, #16
 800b300:	2b00      	cmp	r3, #0
 800b302:	d010      	beq.n	800b326 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	699a      	ldr	r2, [r3, #24]
 800b308:	4b64      	ldr	r3, [pc, #400]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b30a:	69db      	ldr	r3, [r3, #28]
 800b30c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b310:	429a      	cmp	r2, r3
 800b312:	d908      	bls.n	800b326 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b314:	4b61      	ldr	r3, [pc, #388]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b316:	69db      	ldr	r3, [r3, #28]
 800b318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	495e      	ldr	r1, [pc, #376]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b322:	4313      	orrs	r3, r2
 800b324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 0320 	and.w	r3, r3, #32
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d010      	beq.n	800b354 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	69da      	ldr	r2, [r3, #28]
 800b336:	4b59      	ldr	r3, [pc, #356]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b33e:	429a      	cmp	r2, r3
 800b340:	d908      	bls.n	800b354 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b342:	4b56      	ldr	r3, [pc, #344]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b344:	6a1b      	ldr	r3, [r3, #32]
 800b346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	69db      	ldr	r3, [r3, #28]
 800b34e:	4953      	ldr	r1, [pc, #332]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b350:	4313      	orrs	r3, r2
 800b352:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f003 0302 	and.w	r3, r3, #2
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d010      	beq.n	800b382 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68da      	ldr	r2, [r3, #12]
 800b364:	4b4d      	ldr	r3, [pc, #308]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b366:	699b      	ldr	r3, [r3, #24]
 800b368:	f003 030f 	and.w	r3, r3, #15
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d908      	bls.n	800b382 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b370:	4b4a      	ldr	r3, [pc, #296]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	f023 020f 	bic.w	r2, r3, #15
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	4947      	ldr	r1, [pc, #284]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b37e:	4313      	orrs	r3, r2
 800b380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f003 0301 	and.w	r3, r3, #1
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d055      	beq.n	800b43a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b38e:	4b43      	ldr	r3, [pc, #268]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b390:	699b      	ldr	r3, [r3, #24]
 800b392:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	4940      	ldr	r1, [pc, #256]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b39c:	4313      	orrs	r3, r2
 800b39e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	d107      	bne.n	800b3b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b3a8:	4b3c      	ldr	r3, [pc, #240]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d121      	bne.n	800b3f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e0f6      	b.n	800b5a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	2b03      	cmp	r3, #3
 800b3be:	d107      	bne.n	800b3d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b3c0:	4b36      	ldr	r3, [pc, #216]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d115      	bne.n	800b3f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e0ea      	b.n	800b5a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d107      	bne.n	800b3e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b3d8:	4b30      	ldr	r3, [pc, #192]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d109      	bne.n	800b3f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e0de      	b.n	800b5a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b3e8:	4b2c      	ldr	r3, [pc, #176]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 0304 	and.w	r3, r3, #4
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d101      	bne.n	800b3f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e0d6      	b.n	800b5a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b3f8:	4b28      	ldr	r3, [pc, #160]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	f023 0207 	bic.w	r2, r3, #7
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	4925      	ldr	r1, [pc, #148]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b406:	4313      	orrs	r3, r2
 800b408:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b40a:	f7f9 ff1d 	bl	8005248 <HAL_GetTick>
 800b40e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b410:	e00a      	b.n	800b428 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b412:	f7f9 ff19 	bl	8005248 <HAL_GetTick>
 800b416:	4602      	mov	r2, r0
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b420:	4293      	cmp	r3, r2
 800b422:	d901      	bls.n	800b428 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b424:	2303      	movs	r3, #3
 800b426:	e0be      	b.n	800b5a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b428:	4b1c      	ldr	r3, [pc, #112]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	00db      	lsls	r3, r3, #3
 800b436:	429a      	cmp	r2, r3
 800b438:	d1eb      	bne.n	800b412 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f003 0302 	and.w	r3, r3, #2
 800b442:	2b00      	cmp	r3, #0
 800b444:	d010      	beq.n	800b468 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	68da      	ldr	r2, [r3, #12]
 800b44a:	4b14      	ldr	r3, [pc, #80]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	f003 030f 	and.w	r3, r3, #15
 800b452:	429a      	cmp	r2, r3
 800b454:	d208      	bcs.n	800b468 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b456:	4b11      	ldr	r3, [pc, #68]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b458:	699b      	ldr	r3, [r3, #24]
 800b45a:	f023 020f 	bic.w	r2, r3, #15
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	490e      	ldr	r1, [pc, #56]	; (800b49c <HAL_RCC_ClockConfig+0x244>)
 800b464:	4313      	orrs	r3, r2
 800b466:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b468:	4b0b      	ldr	r3, [pc, #44]	; (800b498 <HAL_RCC_ClockConfig+0x240>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 030f 	and.w	r3, r3, #15
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	429a      	cmp	r2, r3
 800b474:	d214      	bcs.n	800b4a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b476:	4b08      	ldr	r3, [pc, #32]	; (800b498 <HAL_RCC_ClockConfig+0x240>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f023 020f 	bic.w	r2, r3, #15
 800b47e:	4906      	ldr	r1, [pc, #24]	; (800b498 <HAL_RCC_ClockConfig+0x240>)
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	4313      	orrs	r3, r2
 800b484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b486:	4b04      	ldr	r3, [pc, #16]	; (800b498 <HAL_RCC_ClockConfig+0x240>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 030f 	and.w	r3, r3, #15
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	429a      	cmp	r2, r3
 800b492:	d005      	beq.n	800b4a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b494:	2301      	movs	r3, #1
 800b496:	e086      	b.n	800b5a6 <HAL_RCC_ClockConfig+0x34e>
 800b498:	52002000 	.word	0x52002000
 800b49c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 0304 	and.w	r3, r3, #4
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d010      	beq.n	800b4ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	691a      	ldr	r2, [r3, #16]
 800b4b0:	4b3f      	ldr	r3, [pc, #252]	; (800b5b0 <HAL_RCC_ClockConfig+0x358>)
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d208      	bcs.n	800b4ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b4bc:	4b3c      	ldr	r3, [pc, #240]	; (800b5b0 <HAL_RCC_ClockConfig+0x358>)
 800b4be:	699b      	ldr	r3, [r3, #24]
 800b4c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	691b      	ldr	r3, [r3, #16]
 800b4c8:	4939      	ldr	r1, [pc, #228]	; (800b5b0 <HAL_RCC_ClockConfig+0x358>)
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f003 0308 	and.w	r3, r3, #8
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d010      	beq.n	800b4fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	695a      	ldr	r2, [r3, #20]
 800b4de:	4b34      	ldr	r3, [pc, #208]	; (800b5b0 <HAL_RCC_ClockConfig+0x358>)
 800b4e0:	69db      	ldr	r3, [r3, #28]
 800b4e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d208      	bcs.n	800b4fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b4ea:	4b31      	ldr	r3, [pc, #196]	; (800b5b0 <HAL_RCC_ClockConfig+0x358>)
 800b4ec:	69db      	ldr	r3, [r3, #28]
 800b4ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	695b      	ldr	r3, [r3, #20]
 800b4f6:	492e      	ldr	r1, [pc, #184]	; (800b5b0 <HAL_RCC_ClockConfig+0x358>)
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 0310 	and.w	r3, r3, #16
 800b504:	2b00      	cmp	r3, #0
 800b506:	d010      	beq.n	800b52a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	699a      	ldr	r2, [r3, #24]
 800b50c:	4b28      	ldr	r3, [pc, #160]	; (800b5b0 <HAL_RCC_ClockConfig+0x358>)
 800b50e:	69db      	ldr	r3, [r3, #28]
 800b510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b514:	429a      	cmp	r2, r3
 800b516:	d208      	bcs.n	800b52a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b518:	4b25      	ldr	r3, [pc, #148]	; (800b5b0 <HAL_RCC_ClockConfig+0x358>)
 800b51a:	69db      	ldr	r3, [r3, #28]
 800b51c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	699b      	ldr	r3, [r3, #24]
 800b524:	4922      	ldr	r1, [pc, #136]	; (800b5b0 <HAL_RCC_ClockConfig+0x358>)
 800b526:	4313      	orrs	r3, r2
 800b528:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f003 0320 	and.w	r3, r3, #32
 800b532:	2b00      	cmp	r3, #0
 800b534:	d010      	beq.n	800b558 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	69da      	ldr	r2, [r3, #28]
 800b53a:	4b1d      	ldr	r3, [pc, #116]	; (800b5b0 <HAL_RCC_ClockConfig+0x358>)
 800b53c:	6a1b      	ldr	r3, [r3, #32]
 800b53e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b542:	429a      	cmp	r2, r3
 800b544:	d208      	bcs.n	800b558 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b546:	4b1a      	ldr	r3, [pc, #104]	; (800b5b0 <HAL_RCC_ClockConfig+0x358>)
 800b548:	6a1b      	ldr	r3, [r3, #32]
 800b54a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	69db      	ldr	r3, [r3, #28]
 800b552:	4917      	ldr	r1, [pc, #92]	; (800b5b0 <HAL_RCC_ClockConfig+0x358>)
 800b554:	4313      	orrs	r3, r2
 800b556:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b558:	f000 f834 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800b55c:	4602      	mov	r2, r0
 800b55e:	4b14      	ldr	r3, [pc, #80]	; (800b5b0 <HAL_RCC_ClockConfig+0x358>)
 800b560:	699b      	ldr	r3, [r3, #24]
 800b562:	0a1b      	lsrs	r3, r3, #8
 800b564:	f003 030f 	and.w	r3, r3, #15
 800b568:	4912      	ldr	r1, [pc, #72]	; (800b5b4 <HAL_RCC_ClockConfig+0x35c>)
 800b56a:	5ccb      	ldrb	r3, [r1, r3]
 800b56c:	f003 031f 	and.w	r3, r3, #31
 800b570:	fa22 f303 	lsr.w	r3, r2, r3
 800b574:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b576:	4b0e      	ldr	r3, [pc, #56]	; (800b5b0 <HAL_RCC_ClockConfig+0x358>)
 800b578:	699b      	ldr	r3, [r3, #24]
 800b57a:	f003 030f 	and.w	r3, r3, #15
 800b57e:	4a0d      	ldr	r2, [pc, #52]	; (800b5b4 <HAL_RCC_ClockConfig+0x35c>)
 800b580:	5cd3      	ldrb	r3, [r2, r3]
 800b582:	f003 031f 	and.w	r3, r3, #31
 800b586:	693a      	ldr	r2, [r7, #16]
 800b588:	fa22 f303 	lsr.w	r3, r2, r3
 800b58c:	4a0a      	ldr	r2, [pc, #40]	; (800b5b8 <HAL_RCC_ClockConfig+0x360>)
 800b58e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b590:	4a0a      	ldr	r2, [pc, #40]	; (800b5bc <HAL_RCC_ClockConfig+0x364>)
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b596:	4b0a      	ldr	r3, [pc, #40]	; (800b5c0 <HAL_RCC_ClockConfig+0x368>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7f9 fe0a 	bl	80051b4 <HAL_InitTick>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3718      	adds	r7, #24
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	58024400 	.word	0x58024400
 800b5b4:	08014654 	.word	0x08014654
 800b5b8:	24000018 	.word	0x24000018
 800b5bc:	24000014 	.word	0x24000014
 800b5c0:	2400001c 	.word	0x2400001c

0800b5c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b089      	sub	sp, #36	; 0x24
 800b5c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b5ca:	4bb3      	ldr	r3, [pc, #716]	; (800b898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5d2:	2b18      	cmp	r3, #24
 800b5d4:	f200 8155 	bhi.w	800b882 <HAL_RCC_GetSysClockFreq+0x2be>
 800b5d8:	a201      	add	r2, pc, #4	; (adr r2, 800b5e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5de:	bf00      	nop
 800b5e0:	0800b645 	.word	0x0800b645
 800b5e4:	0800b883 	.word	0x0800b883
 800b5e8:	0800b883 	.word	0x0800b883
 800b5ec:	0800b883 	.word	0x0800b883
 800b5f0:	0800b883 	.word	0x0800b883
 800b5f4:	0800b883 	.word	0x0800b883
 800b5f8:	0800b883 	.word	0x0800b883
 800b5fc:	0800b883 	.word	0x0800b883
 800b600:	0800b66b 	.word	0x0800b66b
 800b604:	0800b883 	.word	0x0800b883
 800b608:	0800b883 	.word	0x0800b883
 800b60c:	0800b883 	.word	0x0800b883
 800b610:	0800b883 	.word	0x0800b883
 800b614:	0800b883 	.word	0x0800b883
 800b618:	0800b883 	.word	0x0800b883
 800b61c:	0800b883 	.word	0x0800b883
 800b620:	0800b671 	.word	0x0800b671
 800b624:	0800b883 	.word	0x0800b883
 800b628:	0800b883 	.word	0x0800b883
 800b62c:	0800b883 	.word	0x0800b883
 800b630:	0800b883 	.word	0x0800b883
 800b634:	0800b883 	.word	0x0800b883
 800b638:	0800b883 	.word	0x0800b883
 800b63c:	0800b883 	.word	0x0800b883
 800b640:	0800b677 	.word	0x0800b677
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b644:	4b94      	ldr	r3, [pc, #592]	; (800b898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f003 0320 	and.w	r3, r3, #32
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d009      	beq.n	800b664 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b650:	4b91      	ldr	r3, [pc, #580]	; (800b898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	08db      	lsrs	r3, r3, #3
 800b656:	f003 0303 	and.w	r3, r3, #3
 800b65a:	4a90      	ldr	r2, [pc, #576]	; (800b89c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b65c:	fa22 f303 	lsr.w	r3, r2, r3
 800b660:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b662:	e111      	b.n	800b888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b664:	4b8d      	ldr	r3, [pc, #564]	; (800b89c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b666:	61bb      	str	r3, [r7, #24]
    break;
 800b668:	e10e      	b.n	800b888 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b66a:	4b8d      	ldr	r3, [pc, #564]	; (800b8a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b66c:	61bb      	str	r3, [r7, #24]
    break;
 800b66e:	e10b      	b.n	800b888 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b670:	4b8c      	ldr	r3, [pc, #560]	; (800b8a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b672:	61bb      	str	r3, [r7, #24]
    break;
 800b674:	e108      	b.n	800b888 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b676:	4b88      	ldr	r3, [pc, #544]	; (800b898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b67a:	f003 0303 	and.w	r3, r3, #3
 800b67e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b680:	4b85      	ldr	r3, [pc, #532]	; (800b898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b684:	091b      	lsrs	r3, r3, #4
 800b686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b68a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b68c:	4b82      	ldr	r3, [pc, #520]	; (800b898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b690:	f003 0301 	and.w	r3, r3, #1
 800b694:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b696:	4b80      	ldr	r3, [pc, #512]	; (800b898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b69a:	08db      	lsrs	r3, r3, #3
 800b69c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	fb02 f303 	mul.w	r3, r2, r3
 800b6a6:	ee07 3a90 	vmov	s15, r3
 800b6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f000 80e1 	beq.w	800b87c <HAL_RCC_GetSysClockFreq+0x2b8>
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	f000 8083 	beq.w	800b7c8 <HAL_RCC_GetSysClockFreq+0x204>
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	f200 80a1 	bhi.w	800b80c <HAL_RCC_GetSysClockFreq+0x248>
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d003      	beq.n	800b6d8 <HAL_RCC_GetSysClockFreq+0x114>
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d056      	beq.n	800b784 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b6d6:	e099      	b.n	800b80c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6d8:	4b6f      	ldr	r3, [pc, #444]	; (800b898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f003 0320 	and.w	r3, r3, #32
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d02d      	beq.n	800b740 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b6e4:	4b6c      	ldr	r3, [pc, #432]	; (800b898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	08db      	lsrs	r3, r3, #3
 800b6ea:	f003 0303 	and.w	r3, r3, #3
 800b6ee:	4a6b      	ldr	r2, [pc, #428]	; (800b89c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b6f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	ee07 3a90 	vmov	s15, r3
 800b6fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	ee07 3a90 	vmov	s15, r3
 800b706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b70e:	4b62      	ldr	r3, [pc, #392]	; (800b898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b716:	ee07 3a90 	vmov	s15, r3
 800b71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b71e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b722:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b8a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b72e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b73a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b73e:	e087      	b.n	800b850 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	ee07 3a90 	vmov	s15, r3
 800b746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b74a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b8ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800b74e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b752:	4b51      	ldr	r3, [pc, #324]	; (800b898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b75a:	ee07 3a90 	vmov	s15, r3
 800b75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b762:	ed97 6a02 	vldr	s12, [r7, #8]
 800b766:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b8a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b76a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b76e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b77e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b782:	e065      	b.n	800b850 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	ee07 3a90 	vmov	s15, r3
 800b78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b78e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b8b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b796:	4b40      	ldr	r3, [pc, #256]	; (800b898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b79e:	ee07 3a90 	vmov	s15, r3
 800b7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b8a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7c6:	e043      	b.n	800b850 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	ee07 3a90 	vmov	s15, r3
 800b7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b8b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b7d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7da:	4b2f      	ldr	r3, [pc, #188]	; (800b898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7e2:	ee07 3a90 	vmov	s15, r3
 800b7e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b8a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b802:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b80a:	e021      	b.n	800b850 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	ee07 3a90 	vmov	s15, r3
 800b812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b816:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b8b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b81a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b81e:	4b1e      	ldr	r3, [pc, #120]	; (800b898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b826:	ee07 3a90 	vmov	s15, r3
 800b82a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b82e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b832:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b8a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b83a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b83e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b84a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b84e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b850:	4b11      	ldr	r3, [pc, #68]	; (800b898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b854:	0a5b      	lsrs	r3, r3, #9
 800b856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b85a:	3301      	adds	r3, #1
 800b85c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	ee07 3a90 	vmov	s15, r3
 800b864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b868:	edd7 6a07 	vldr	s13, [r7, #28]
 800b86c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b874:	ee17 3a90 	vmov	r3, s15
 800b878:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b87a:	e005      	b.n	800b888 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b87c:	2300      	movs	r3, #0
 800b87e:	61bb      	str	r3, [r7, #24]
    break;
 800b880:	e002      	b.n	800b888 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b882:	4b07      	ldr	r3, [pc, #28]	; (800b8a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b884:	61bb      	str	r3, [r7, #24]
    break;
 800b886:	bf00      	nop
  }

  return sysclockfreq;
 800b888:	69bb      	ldr	r3, [r7, #24]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3724      	adds	r7, #36	; 0x24
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	58024400 	.word	0x58024400
 800b89c:	03d09000 	.word	0x03d09000
 800b8a0:	003d0900 	.word	0x003d0900
 800b8a4:	017d7840 	.word	0x017d7840
 800b8a8:	46000000 	.word	0x46000000
 800b8ac:	4c742400 	.word	0x4c742400
 800b8b0:	4a742400 	.word	0x4a742400
 800b8b4:	4bbebc20 	.word	0x4bbebc20

0800b8b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b8be:	f7ff fe81 	bl	800b5c4 <HAL_RCC_GetSysClockFreq>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	4b10      	ldr	r3, [pc, #64]	; (800b908 <HAL_RCC_GetHCLKFreq+0x50>)
 800b8c6:	699b      	ldr	r3, [r3, #24]
 800b8c8:	0a1b      	lsrs	r3, r3, #8
 800b8ca:	f003 030f 	and.w	r3, r3, #15
 800b8ce:	490f      	ldr	r1, [pc, #60]	; (800b90c <HAL_RCC_GetHCLKFreq+0x54>)
 800b8d0:	5ccb      	ldrb	r3, [r1, r3]
 800b8d2:	f003 031f 	and.w	r3, r3, #31
 800b8d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b8da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b8dc:	4b0a      	ldr	r3, [pc, #40]	; (800b908 <HAL_RCC_GetHCLKFreq+0x50>)
 800b8de:	699b      	ldr	r3, [r3, #24]
 800b8e0:	f003 030f 	and.w	r3, r3, #15
 800b8e4:	4a09      	ldr	r2, [pc, #36]	; (800b90c <HAL_RCC_GetHCLKFreq+0x54>)
 800b8e6:	5cd3      	ldrb	r3, [r2, r3]
 800b8e8:	f003 031f 	and.w	r3, r3, #31
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b8f2:	4a07      	ldr	r2, [pc, #28]	; (800b910 <HAL_RCC_GetHCLKFreq+0x58>)
 800b8f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b8f6:	4a07      	ldr	r2, [pc, #28]	; (800b914 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b8fc:	4b04      	ldr	r3, [pc, #16]	; (800b910 <HAL_RCC_GetHCLKFreq+0x58>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
}
 800b900:	4618      	mov	r0, r3
 800b902:	3708      	adds	r7, #8
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	58024400 	.word	0x58024400
 800b90c:	08014654 	.word	0x08014654
 800b910:	24000018 	.word	0x24000018
 800b914:	24000014 	.word	0x24000014

0800b918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b91c:	f7ff ffcc 	bl	800b8b8 <HAL_RCC_GetHCLKFreq>
 800b920:	4602      	mov	r2, r0
 800b922:	4b06      	ldr	r3, [pc, #24]	; (800b93c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b924:	69db      	ldr	r3, [r3, #28]
 800b926:	091b      	lsrs	r3, r3, #4
 800b928:	f003 0307 	and.w	r3, r3, #7
 800b92c:	4904      	ldr	r1, [pc, #16]	; (800b940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b92e:	5ccb      	ldrb	r3, [r1, r3]
 800b930:	f003 031f 	and.w	r3, r3, #31
 800b934:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b938:	4618      	mov	r0, r3
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	58024400 	.word	0x58024400
 800b940:	08014654 	.word	0x08014654

0800b944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b948:	f7ff ffb6 	bl	800b8b8 <HAL_RCC_GetHCLKFreq>
 800b94c:	4602      	mov	r2, r0
 800b94e:	4b06      	ldr	r3, [pc, #24]	; (800b968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b950:	69db      	ldr	r3, [r3, #28]
 800b952:	0a1b      	lsrs	r3, r3, #8
 800b954:	f003 0307 	and.w	r3, r3, #7
 800b958:	4904      	ldr	r1, [pc, #16]	; (800b96c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b95a:	5ccb      	ldrb	r3, [r1, r3]
 800b95c:	f003 031f 	and.w	r3, r3, #31
 800b960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b964:	4618      	mov	r0, r3
 800b966:	bd80      	pop	{r7, pc}
 800b968:	58024400 	.word	0x58024400
 800b96c:	08014654 	.word	0x08014654

0800b970 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b086      	sub	sp, #24
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b978:	2300      	movs	r3, #0
 800b97a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b97c:	2300      	movs	r3, #0
 800b97e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d03f      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b990:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b994:	d02a      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b996:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b99a:	d824      	bhi.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b99c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9a0:	d018      	beq.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b9a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9a6:	d81e      	bhi.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d003      	beq.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b9ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9b0:	d007      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b9b2:	e018      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9b4:	4bab      	ldr	r3, [pc, #684]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b8:	4aaa      	ldr	r2, [pc, #680]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b9c0:	e015      	b.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	3304      	adds	r3, #4
 800b9c6:	2102      	movs	r1, #2
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f001 f9cf 	bl	800cd6c <RCCEx_PLL2_Config>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b9d2:	e00c      	b.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	3324      	adds	r3, #36	; 0x24
 800b9d8:	2102      	movs	r1, #2
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f001 fa78 	bl	800ced0 <RCCEx_PLL3_Config>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b9e4:	e003      	b.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	75fb      	strb	r3, [r7, #23]
      break;
 800b9ea:	e000      	b.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b9ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9ee:	7dfb      	ldrb	r3, [r7, #23]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d109      	bne.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b9f4:	4b9b      	ldr	r3, [pc, #620]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba00:	4998      	ldr	r1, [pc, #608]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba02:	4313      	orrs	r3, r2
 800ba04:	650b      	str	r3, [r1, #80]	; 0x50
 800ba06:	e001      	b.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba08:	7dfb      	ldrb	r3, [r7, #23]
 800ba0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d03d      	beq.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba1c:	2b04      	cmp	r3, #4
 800ba1e:	d826      	bhi.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800ba20:	a201      	add	r2, pc, #4	; (adr r2, 800ba28 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800ba22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba26:	bf00      	nop
 800ba28:	0800ba3d 	.word	0x0800ba3d
 800ba2c:	0800ba4b 	.word	0x0800ba4b
 800ba30:	0800ba5d 	.word	0x0800ba5d
 800ba34:	0800ba75 	.word	0x0800ba75
 800ba38:	0800ba75 	.word	0x0800ba75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba3c:	4b89      	ldr	r3, [pc, #548]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba40:	4a88      	ldr	r2, [pc, #544]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba48:	e015      	b.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	2100      	movs	r1, #0
 800ba50:	4618      	mov	r0, r3
 800ba52:	f001 f98b 	bl	800cd6c <RCCEx_PLL2_Config>
 800ba56:	4603      	mov	r3, r0
 800ba58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba5a:	e00c      	b.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	3324      	adds	r3, #36	; 0x24
 800ba60:	2100      	movs	r1, #0
 800ba62:	4618      	mov	r0, r3
 800ba64:	f001 fa34 	bl	800ced0 <RCCEx_PLL3_Config>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba6c:	e003      	b.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	75fb      	strb	r3, [r7, #23]
      break;
 800ba72:	e000      	b.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ba74:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba76:	7dfb      	ldrb	r3, [r7, #23]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d109      	bne.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba7c:	4b79      	ldr	r3, [pc, #484]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba80:	f023 0207 	bic.w	r2, r3, #7
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba88:	4976      	ldr	r1, [pc, #472]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	650b      	str	r3, [r1, #80]	; 0x50
 800ba8e:	e001      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba90:	7dfb      	ldrb	r3, [r7, #23]
 800ba92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d042      	beq.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baa8:	d02b      	beq.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800baaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baae:	d825      	bhi.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bab0:	2bc0      	cmp	r3, #192	; 0xc0
 800bab2:	d028      	beq.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800bab4:	2bc0      	cmp	r3, #192	; 0xc0
 800bab6:	d821      	bhi.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bab8:	2b80      	cmp	r3, #128	; 0x80
 800baba:	d016      	beq.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800babc:	2b80      	cmp	r3, #128	; 0x80
 800babe:	d81d      	bhi.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d002      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800bac4:	2b40      	cmp	r3, #64	; 0x40
 800bac6:	d007      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800bac8:	e018      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baca:	4b66      	ldr	r3, [pc, #408]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bace:	4a65      	ldr	r2, [pc, #404]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bad4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bad6:	e017      	b.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	3304      	adds	r3, #4
 800badc:	2100      	movs	r1, #0
 800bade:	4618      	mov	r0, r3
 800bae0:	f001 f944 	bl	800cd6c <RCCEx_PLL2_Config>
 800bae4:	4603      	mov	r3, r0
 800bae6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bae8:	e00e      	b.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	3324      	adds	r3, #36	; 0x24
 800baee:	2100      	movs	r1, #0
 800baf0:	4618      	mov	r0, r3
 800baf2:	f001 f9ed 	bl	800ced0 <RCCEx_PLL3_Config>
 800baf6:	4603      	mov	r3, r0
 800baf8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bafa:	e005      	b.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	75fb      	strb	r3, [r7, #23]
      break;
 800bb00:	e002      	b.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800bb02:	bf00      	nop
 800bb04:	e000      	b.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800bb06:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb08:	7dfb      	ldrb	r3, [r7, #23]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d109      	bne.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bb0e:	4b55      	ldr	r3, [pc, #340]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb1a:	4952      	ldr	r1, [pc, #328]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	650b      	str	r3, [r1, #80]	; 0x50
 800bb20:	e001      	b.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb22:	7dfb      	ldrb	r3, [r7, #23]
 800bb24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d049      	beq.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bb38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb3c:	d030      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800bb3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb42:	d82a      	bhi.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bb44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb48:	d02c      	beq.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800bb4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb4e:	d824      	bhi.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bb50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb54:	d018      	beq.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800bb56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb5a:	d81e      	bhi.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d003      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800bb60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb64:	d007      	beq.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bb66:	e018      	b.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb68:	4b3e      	ldr	r3, [pc, #248]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb6c:	4a3d      	ldr	r2, [pc, #244]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bb74:	e017      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	3304      	adds	r3, #4
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f001 f8f5 	bl	800cd6c <RCCEx_PLL2_Config>
 800bb82:	4603      	mov	r3, r0
 800bb84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bb86:	e00e      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	3324      	adds	r3, #36	; 0x24
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f001 f99e 	bl	800ced0 <RCCEx_PLL3_Config>
 800bb94:	4603      	mov	r3, r0
 800bb96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bb98:	e005      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	75fb      	strb	r3, [r7, #23]
      break;
 800bb9e:	e002      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bba0:	bf00      	nop
 800bba2:	e000      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bba6:	7dfb      	ldrb	r3, [r7, #23]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d10a      	bne.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bbac:	4b2d      	ldr	r3, [pc, #180]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bbae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbb0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bbba:	492a      	ldr	r1, [pc, #168]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	658b      	str	r3, [r1, #88]	; 0x58
 800bbc0:	e001      	b.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbc2:	7dfb      	ldrb	r3, [r7, #23]
 800bbc4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d04c      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bbd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bbdc:	d030      	beq.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800bbde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bbe2:	d82a      	bhi.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bbe4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bbe8:	d02c      	beq.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800bbea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bbee:	d824      	bhi.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bbf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbf4:	d018      	beq.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800bbf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbfa:	d81e      	bhi.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d003      	beq.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bc00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc04:	d007      	beq.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bc06:	e018      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc08:	4b16      	ldr	r3, [pc, #88]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0c:	4a15      	ldr	r2, [pc, #84]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bc14:	e017      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	3304      	adds	r3, #4
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f001 f8a5 	bl	800cd6c <RCCEx_PLL2_Config>
 800bc22:	4603      	mov	r3, r0
 800bc24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bc26:	e00e      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	3324      	adds	r3, #36	; 0x24
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f001 f94e 	bl	800ced0 <RCCEx_PLL3_Config>
 800bc34:	4603      	mov	r3, r0
 800bc36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bc38:	e005      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	75fb      	strb	r3, [r7, #23]
      break;
 800bc3e:	e002      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800bc40:	bf00      	nop
 800bc42:	e000      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800bc44:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc46:	7dfb      	ldrb	r3, [r7, #23]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10d      	bne.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bc4c:	4b05      	ldr	r3, [pc, #20]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc50:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bc5a:	4902      	ldr	r1, [pc, #8]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	658b      	str	r3, [r1, #88]	; 0x58
 800bc60:	e004      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800bc62:	bf00      	nop
 800bc64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc68:	7dfb      	ldrb	r3, [r7, #23]
 800bc6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d032      	beq.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc7c:	2b30      	cmp	r3, #48	; 0x30
 800bc7e:	d01c      	beq.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800bc80:	2b30      	cmp	r3, #48	; 0x30
 800bc82:	d817      	bhi.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800bc84:	2b20      	cmp	r3, #32
 800bc86:	d00c      	beq.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800bc88:	2b20      	cmp	r3, #32
 800bc8a:	d813      	bhi.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d016      	beq.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800bc90:	2b10      	cmp	r3, #16
 800bc92:	d10f      	bne.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc94:	4baf      	ldr	r3, [pc, #700]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc98:	4aae      	ldr	r2, [pc, #696]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bc9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bca0:	e00e      	b.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	3304      	adds	r3, #4
 800bca6:	2102      	movs	r1, #2
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f001 f85f 	bl	800cd6c <RCCEx_PLL2_Config>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bcb2:	e005      	b.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	75fb      	strb	r3, [r7, #23]
      break;
 800bcb8:	e002      	b.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800bcba:	bf00      	nop
 800bcbc:	e000      	b.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800bcbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bcc0:	7dfb      	ldrb	r3, [r7, #23]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d109      	bne.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bcc6:	4ba3      	ldr	r3, [pc, #652]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bcc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcd2:	49a0      	ldr	r1, [pc, #640]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bcd8:	e001      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcda:	7dfb      	ldrb	r3, [r7, #23]
 800bcdc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d047      	beq.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcf2:	d030      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800bcf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcf8:	d82a      	bhi.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bcfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bcfe:	d02c      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800bd00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bd04:	d824      	bhi.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bd06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd0a:	d018      	beq.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800bd0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd10:	d81e      	bhi.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d003      	beq.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800bd16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd1a:	d007      	beq.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800bd1c:	e018      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd1e:	4b8d      	ldr	r3, [pc, #564]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bd20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd22:	4a8c      	ldr	r2, [pc, #560]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bd24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bd2a:	e017      	b.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	3304      	adds	r3, #4
 800bd30:	2100      	movs	r1, #0
 800bd32:	4618      	mov	r0, r3
 800bd34:	f001 f81a 	bl	800cd6c <RCCEx_PLL2_Config>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bd3c:	e00e      	b.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	3324      	adds	r3, #36	; 0x24
 800bd42:	2100      	movs	r1, #0
 800bd44:	4618      	mov	r0, r3
 800bd46:	f001 f8c3 	bl	800ced0 <RCCEx_PLL3_Config>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bd4e:	e005      	b.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd50:	2301      	movs	r3, #1
 800bd52:	75fb      	strb	r3, [r7, #23]
      break;
 800bd54:	e002      	b.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800bd56:	bf00      	nop
 800bd58:	e000      	b.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800bd5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd5c:	7dfb      	ldrb	r3, [r7, #23]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d109      	bne.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bd62:	4b7c      	ldr	r3, [pc, #496]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bd64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd66:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd6e:	4979      	ldr	r1, [pc, #484]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bd70:	4313      	orrs	r3, r2
 800bd72:	650b      	str	r3, [r1, #80]	; 0x50
 800bd74:	e001      	b.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd76:	7dfb      	ldrb	r3, [r7, #23]
 800bd78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d049      	beq.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd8e:	d02e      	beq.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800bd90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd94:	d828      	bhi.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800bd96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd9a:	d02a      	beq.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800bd9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bda0:	d822      	bhi.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800bda2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bda6:	d026      	beq.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800bda8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bdac:	d81c      	bhi.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800bdae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdb2:	d010      	beq.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800bdb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdb8:	d816      	bhi.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d01d      	beq.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800bdbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdc2:	d111      	bne.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	2101      	movs	r1, #1
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f000 ffce 	bl	800cd6c <RCCEx_PLL2_Config>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bdd4:	e012      	b.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	3324      	adds	r3, #36	; 0x24
 800bdda:	2101      	movs	r1, #1
 800bddc:	4618      	mov	r0, r3
 800bdde:	f001 f877 	bl	800ced0 <RCCEx_PLL3_Config>
 800bde2:	4603      	mov	r3, r0
 800bde4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bde6:	e009      	b.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	75fb      	strb	r3, [r7, #23]
      break;
 800bdec:	e006      	b.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800bdee:	bf00      	nop
 800bdf0:	e004      	b.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800bdf2:	bf00      	nop
 800bdf4:	e002      	b.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800bdf6:	bf00      	nop
 800bdf8:	e000      	b.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800bdfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bdfc:	7dfb      	ldrb	r3, [r7, #23]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d109      	bne.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800be02:	4b54      	ldr	r3, [pc, #336]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800be04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be06:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be0e:	4951      	ldr	r1, [pc, #324]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800be10:	4313      	orrs	r3, r2
 800be12:	650b      	str	r3, [r1, #80]	; 0x50
 800be14:	e001      	b.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be16:	7dfb      	ldrb	r3, [r7, #23]
 800be18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be22:	2b00      	cmp	r3, #0
 800be24:	d04b      	beq.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800be2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be30:	d02e      	beq.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800be32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be36:	d828      	bhi.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800be38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be3c:	d02a      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800be3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be42:	d822      	bhi.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800be44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be48:	d026      	beq.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800be4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be4e:	d81c      	bhi.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800be50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be54:	d010      	beq.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800be56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be5a:	d816      	bhi.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d01d      	beq.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800be60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be64:	d111      	bne.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	3304      	adds	r3, #4
 800be6a:	2101      	movs	r1, #1
 800be6c:	4618      	mov	r0, r3
 800be6e:	f000 ff7d 	bl	800cd6c <RCCEx_PLL2_Config>
 800be72:	4603      	mov	r3, r0
 800be74:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800be76:	e012      	b.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	3324      	adds	r3, #36	; 0x24
 800be7c:	2101      	movs	r1, #1
 800be7e:	4618      	mov	r0, r3
 800be80:	f001 f826 	bl	800ced0 <RCCEx_PLL3_Config>
 800be84:	4603      	mov	r3, r0
 800be86:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800be88:	e009      	b.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	75fb      	strb	r3, [r7, #23]
      break;
 800be8e:	e006      	b.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800be90:	bf00      	nop
 800be92:	e004      	b.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800be94:	bf00      	nop
 800be96:	e002      	b.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800be98:	bf00      	nop
 800be9a:	e000      	b.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800be9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be9e:	7dfb      	ldrb	r3, [r7, #23]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d10a      	bne.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bea4:	4b2b      	ldr	r3, [pc, #172]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bea8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800beb2:	4928      	ldr	r1, [pc, #160]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800beb4:	4313      	orrs	r3, r2
 800beb6:	658b      	str	r3, [r1, #88]	; 0x58
 800beb8:	e001      	b.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beba:	7dfb      	ldrb	r3, [r7, #23]
 800bebc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d02f      	beq.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bed2:	d00e      	beq.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800bed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bed8:	d814      	bhi.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d015      	beq.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800bede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bee2:	d10f      	bne.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bee4:	4b1b      	ldr	r3, [pc, #108]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee8:	4a1a      	ldr	r2, [pc, #104]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800beea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800beee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bef0:	e00c      	b.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	3304      	adds	r3, #4
 800bef6:	2101      	movs	r1, #1
 800bef8:	4618      	mov	r0, r3
 800befa:	f000 ff37 	bl	800cd6c <RCCEx_PLL2_Config>
 800befe:	4603      	mov	r3, r0
 800bf00:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bf02:	e003      	b.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf04:	2301      	movs	r3, #1
 800bf06:	75fb      	strb	r3, [r7, #23]
      break;
 800bf08:	e000      	b.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800bf0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf0c:	7dfb      	ldrb	r3, [r7, #23]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d109      	bne.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bf12:	4b10      	ldr	r3, [pc, #64]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bf14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf1e:	490d      	ldr	r1, [pc, #52]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bf20:	4313      	orrs	r3, r2
 800bf22:	650b      	str	r3, [r1, #80]	; 0x50
 800bf24:	e001      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf26:	7dfb      	ldrb	r3, [r7, #23]
 800bf28:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d033      	beq.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf3a:	2b03      	cmp	r3, #3
 800bf3c:	d81c      	bhi.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800bf3e:	a201      	add	r2, pc, #4	; (adr r2, 800bf44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800bf40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf44:	0800bf7f 	.word	0x0800bf7f
 800bf48:	0800bf59 	.word	0x0800bf59
 800bf4c:	0800bf67 	.word	0x0800bf67
 800bf50:	0800bf7f 	.word	0x0800bf7f
 800bf54:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf58:	4bb8      	ldr	r3, [pc, #736]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bf5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5c:	4ab7      	ldr	r2, [pc, #732]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bf5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bf64:	e00c      	b.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	3304      	adds	r3, #4
 800bf6a:	2102      	movs	r1, #2
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f000 fefd 	bl	800cd6c <RCCEx_PLL2_Config>
 800bf72:	4603      	mov	r3, r0
 800bf74:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bf76:	e003      	b.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	75fb      	strb	r3, [r7, #23]
      break;
 800bf7c:	e000      	b.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800bf7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf80:	7dfb      	ldrb	r3, [r7, #23]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d109      	bne.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bf86:	4bad      	ldr	r3, [pc, #692]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bf88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf8a:	f023 0203 	bic.w	r2, r3, #3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf92:	49aa      	ldr	r1, [pc, #680]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bf94:	4313      	orrs	r3, r2
 800bf96:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bf98:	e001      	b.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf9a:	7dfb      	ldrb	r3, [r7, #23]
 800bf9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f000 8086 	beq.w	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bfac:	4ba4      	ldr	r3, [pc, #656]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4aa3      	ldr	r2, [pc, #652]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bfb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bfb8:	f7f9 f946 	bl	8005248 <HAL_GetTick>
 800bfbc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bfbe:	e009      	b.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bfc0:	f7f9 f942 	bl	8005248 <HAL_GetTick>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	1ad3      	subs	r3, r2, r3
 800bfca:	2b64      	cmp	r3, #100	; 0x64
 800bfcc:	d902      	bls.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800bfce:	2303      	movs	r3, #3
 800bfd0:	75fb      	strb	r3, [r7, #23]
        break;
 800bfd2:	e005      	b.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bfd4:	4b9a      	ldr	r3, [pc, #616]	; (800c240 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d0ef      	beq.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800bfe0:	7dfb      	ldrb	r3, [r7, #23]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d166      	bne.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bfe6:	4b95      	ldr	r3, [pc, #596]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bfe8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bff0:	4053      	eors	r3, r2
 800bff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d013      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bffa:	4b90      	ldr	r3, [pc, #576]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c002:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c004:	4b8d      	ldr	r3, [pc, #564]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c008:	4a8c      	ldr	r2, [pc, #560]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c00a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c00e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c010:	4b8a      	ldr	r3, [pc, #552]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c014:	4a89      	ldr	r2, [pc, #548]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c01a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c01c:	4a87      	ldr	r2, [pc, #540]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c02c:	d115      	bne.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c02e:	f7f9 f90b 	bl	8005248 <HAL_GetTick>
 800c032:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c034:	e00b      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c036:	f7f9 f907 	bl	8005248 <HAL_GetTick>
 800c03a:	4602      	mov	r2, r0
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	f241 3288 	movw	r2, #5000	; 0x1388
 800c044:	4293      	cmp	r3, r2
 800c046:	d902      	bls.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800c048:	2303      	movs	r3, #3
 800c04a:	75fb      	strb	r3, [r7, #23]
            break;
 800c04c:	e005      	b.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c04e:	4b7b      	ldr	r3, [pc, #492]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c052:	f003 0302 	and.w	r3, r3, #2
 800c056:	2b00      	cmp	r3, #0
 800c058:	d0ed      	beq.n	800c036 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800c05a:	7dfb      	ldrb	r3, [r7, #23]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d126      	bne.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c06a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c06e:	d10d      	bne.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800c070:	4b72      	ldr	r3, [pc, #456]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c072:	691b      	ldr	r3, [r3, #16]
 800c074:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c07e:	0919      	lsrs	r1, r3, #4
 800c080:	4b70      	ldr	r3, [pc, #448]	; (800c244 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800c082:	400b      	ands	r3, r1
 800c084:	496d      	ldr	r1, [pc, #436]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c086:	4313      	orrs	r3, r2
 800c088:	610b      	str	r3, [r1, #16]
 800c08a:	e005      	b.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800c08c:	4b6b      	ldr	r3, [pc, #428]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c08e:	691b      	ldr	r3, [r3, #16]
 800c090:	4a6a      	ldr	r2, [pc, #424]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c092:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c096:	6113      	str	r3, [r2, #16]
 800c098:	4b68      	ldr	r3, [pc, #416]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c09a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c0a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c0a6:	4965      	ldr	r1, [pc, #404]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	670b      	str	r3, [r1, #112]	; 0x70
 800c0ac:	e004      	b.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c0ae:	7dfb      	ldrb	r3, [r7, #23]
 800c0b0:	75bb      	strb	r3, [r7, #22]
 800c0b2:	e001      	b.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0b4:	7dfb      	ldrb	r3, [r7, #23]
 800c0b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f003 0301 	and.w	r3, r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d07e      	beq.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0c8:	2b28      	cmp	r3, #40	; 0x28
 800c0ca:	d867      	bhi.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800c0cc:	a201      	add	r2, pc, #4	; (adr r2, 800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800c0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d2:	bf00      	nop
 800c0d4:	0800c1a3 	.word	0x0800c1a3
 800c0d8:	0800c19d 	.word	0x0800c19d
 800c0dc:	0800c19d 	.word	0x0800c19d
 800c0e0:	0800c19d 	.word	0x0800c19d
 800c0e4:	0800c19d 	.word	0x0800c19d
 800c0e8:	0800c19d 	.word	0x0800c19d
 800c0ec:	0800c19d 	.word	0x0800c19d
 800c0f0:	0800c19d 	.word	0x0800c19d
 800c0f4:	0800c179 	.word	0x0800c179
 800c0f8:	0800c19d 	.word	0x0800c19d
 800c0fc:	0800c19d 	.word	0x0800c19d
 800c100:	0800c19d 	.word	0x0800c19d
 800c104:	0800c19d 	.word	0x0800c19d
 800c108:	0800c19d 	.word	0x0800c19d
 800c10c:	0800c19d 	.word	0x0800c19d
 800c110:	0800c19d 	.word	0x0800c19d
 800c114:	0800c18b 	.word	0x0800c18b
 800c118:	0800c19d 	.word	0x0800c19d
 800c11c:	0800c19d 	.word	0x0800c19d
 800c120:	0800c19d 	.word	0x0800c19d
 800c124:	0800c19d 	.word	0x0800c19d
 800c128:	0800c19d 	.word	0x0800c19d
 800c12c:	0800c19d 	.word	0x0800c19d
 800c130:	0800c19d 	.word	0x0800c19d
 800c134:	0800c1a3 	.word	0x0800c1a3
 800c138:	0800c19d 	.word	0x0800c19d
 800c13c:	0800c19d 	.word	0x0800c19d
 800c140:	0800c19d 	.word	0x0800c19d
 800c144:	0800c19d 	.word	0x0800c19d
 800c148:	0800c19d 	.word	0x0800c19d
 800c14c:	0800c19d 	.word	0x0800c19d
 800c150:	0800c19d 	.word	0x0800c19d
 800c154:	0800c1a3 	.word	0x0800c1a3
 800c158:	0800c19d 	.word	0x0800c19d
 800c15c:	0800c19d 	.word	0x0800c19d
 800c160:	0800c19d 	.word	0x0800c19d
 800c164:	0800c19d 	.word	0x0800c19d
 800c168:	0800c19d 	.word	0x0800c19d
 800c16c:	0800c19d 	.word	0x0800c19d
 800c170:	0800c19d 	.word	0x0800c19d
 800c174:	0800c1a3 	.word	0x0800c1a3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	3304      	adds	r3, #4
 800c17c:	2101      	movs	r1, #1
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 fdf4 	bl	800cd6c <RCCEx_PLL2_Config>
 800c184:	4603      	mov	r3, r0
 800c186:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c188:	e00c      	b.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	3324      	adds	r3, #36	; 0x24
 800c18e:	2101      	movs	r1, #1
 800c190:	4618      	mov	r0, r3
 800c192:	f000 fe9d 	bl	800ced0 <RCCEx_PLL3_Config>
 800c196:	4603      	mov	r3, r0
 800c198:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c19a:	e003      	b.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c19c:	2301      	movs	r3, #1
 800c19e:	75fb      	strb	r3, [r7, #23]
      break;
 800c1a0:	e000      	b.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800c1a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1a4:	7dfb      	ldrb	r3, [r7, #23]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d109      	bne.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c1aa:	4b24      	ldr	r3, [pc, #144]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c1ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1b6:	4921      	ldr	r1, [pc, #132]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	654b      	str	r3, [r1, #84]	; 0x54
 800c1bc:	e001      	b.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1be:	7dfb      	ldrb	r3, [r7, #23]
 800c1c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f003 0302 	and.w	r3, r3, #2
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d03e      	beq.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1d2:	2b05      	cmp	r3, #5
 800c1d4:	d820      	bhi.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800c1d6:	a201      	add	r2, pc, #4	; (adr r2, 800c1dc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800c1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1dc:	0800c21f 	.word	0x0800c21f
 800c1e0:	0800c1f5 	.word	0x0800c1f5
 800c1e4:	0800c207 	.word	0x0800c207
 800c1e8:	0800c21f 	.word	0x0800c21f
 800c1ec:	0800c21f 	.word	0x0800c21f
 800c1f0:	0800c21f 	.word	0x0800c21f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	2101      	movs	r1, #1
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f000 fdb6 	bl	800cd6c <RCCEx_PLL2_Config>
 800c200:	4603      	mov	r3, r0
 800c202:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c204:	e00c      	b.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	3324      	adds	r3, #36	; 0x24
 800c20a:	2101      	movs	r1, #1
 800c20c:	4618      	mov	r0, r3
 800c20e:	f000 fe5f 	bl	800ced0 <RCCEx_PLL3_Config>
 800c212:	4603      	mov	r3, r0
 800c214:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c216:	e003      	b.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c218:	2301      	movs	r3, #1
 800c21a:	75fb      	strb	r3, [r7, #23]
      break;
 800c21c:	e000      	b.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800c21e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c220:	7dfb      	ldrb	r3, [r7, #23]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d110      	bne.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c226:	4b05      	ldr	r3, [pc, #20]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c22a:	f023 0207 	bic.w	r2, r3, #7
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c232:	4902      	ldr	r1, [pc, #8]	; (800c23c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c234:	4313      	orrs	r3, r2
 800c236:	654b      	str	r3, [r1, #84]	; 0x54
 800c238:	e008      	b.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800c23a:	bf00      	nop
 800c23c:	58024400 	.word	0x58024400
 800c240:	58024800 	.word	0x58024800
 800c244:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c248:	7dfb      	ldrb	r3, [r7, #23]
 800c24a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f003 0304 	and.w	r3, r3, #4
 800c254:	2b00      	cmp	r3, #0
 800c256:	d039      	beq.n	800c2cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c25e:	2b05      	cmp	r3, #5
 800c260:	d820      	bhi.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800c262:	a201      	add	r2, pc, #4	; (adr r2, 800c268 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800c264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c268:	0800c2ab 	.word	0x0800c2ab
 800c26c:	0800c281 	.word	0x0800c281
 800c270:	0800c293 	.word	0x0800c293
 800c274:	0800c2ab 	.word	0x0800c2ab
 800c278:	0800c2ab 	.word	0x0800c2ab
 800c27c:	0800c2ab 	.word	0x0800c2ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	3304      	adds	r3, #4
 800c284:	2101      	movs	r1, #1
 800c286:	4618      	mov	r0, r3
 800c288:	f000 fd70 	bl	800cd6c <RCCEx_PLL2_Config>
 800c28c:	4603      	mov	r3, r0
 800c28e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c290:	e00c      	b.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	3324      	adds	r3, #36	; 0x24
 800c296:	2101      	movs	r1, #1
 800c298:	4618      	mov	r0, r3
 800c29a:	f000 fe19 	bl	800ced0 <RCCEx_PLL3_Config>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c2a2:	e003      	b.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	75fb      	strb	r3, [r7, #23]
      break;
 800c2a8:	e000      	b.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800c2aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2ac:	7dfb      	ldrb	r3, [r7, #23]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d10a      	bne.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c2b2:	4bb7      	ldr	r3, [pc, #732]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2b6:	f023 0207 	bic.w	r2, r3, #7
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2c0:	49b3      	ldr	r1, [pc, #716]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	658b      	str	r3, [r1, #88]	; 0x58
 800c2c6:	e001      	b.n	800c2cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2c8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f003 0320 	and.w	r3, r3, #32
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d04b      	beq.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2e2:	d02e      	beq.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800c2e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2e8:	d828      	bhi.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c2ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2ee:	d02a      	beq.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800c2f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2f4:	d822      	bhi.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c2f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2fa:	d026      	beq.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c2fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c300:	d81c      	bhi.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c306:	d010      	beq.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800c308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c30c:	d816      	bhi.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d01d      	beq.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c316:	d111      	bne.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	3304      	adds	r3, #4
 800c31c:	2100      	movs	r1, #0
 800c31e:	4618      	mov	r0, r3
 800c320:	f000 fd24 	bl	800cd6c <RCCEx_PLL2_Config>
 800c324:	4603      	mov	r3, r0
 800c326:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c328:	e012      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	3324      	adds	r3, #36	; 0x24
 800c32e:	2102      	movs	r1, #2
 800c330:	4618      	mov	r0, r3
 800c332:	f000 fdcd 	bl	800ced0 <RCCEx_PLL3_Config>
 800c336:	4603      	mov	r3, r0
 800c338:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c33a:	e009      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c33c:	2301      	movs	r3, #1
 800c33e:	75fb      	strb	r3, [r7, #23]
      break;
 800c340:	e006      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c342:	bf00      	nop
 800c344:	e004      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c346:	bf00      	nop
 800c348:	e002      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c34a:	bf00      	nop
 800c34c:	e000      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c34e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c350:	7dfb      	ldrb	r3, [r7, #23]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10a      	bne.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c356:	4b8e      	ldr	r3, [pc, #568]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c35a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c364:	498a      	ldr	r1, [pc, #552]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c366:	4313      	orrs	r3, r2
 800c368:	654b      	str	r3, [r1, #84]	; 0x54
 800c36a:	e001      	b.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c36c:	7dfb      	ldrb	r3, [r7, #23]
 800c36e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d04b      	beq.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c382:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c386:	d02e      	beq.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800c388:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c38c:	d828      	bhi.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c38e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c392:	d02a      	beq.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c398:	d822      	bhi.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c39a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c39e:	d026      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c3a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c3a4:	d81c      	bhi.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c3a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3aa:	d010      	beq.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800c3ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3b0:	d816      	bhi.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d01d      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c3b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3ba:	d111      	bne.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	3304      	adds	r3, #4
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f000 fcd2 	bl	800cd6c <RCCEx_PLL2_Config>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c3cc:	e012      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	3324      	adds	r3, #36	; 0x24
 800c3d2:	2102      	movs	r1, #2
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f000 fd7b 	bl	800ced0 <RCCEx_PLL3_Config>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c3de:	e009      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	75fb      	strb	r3, [r7, #23]
      break;
 800c3e4:	e006      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c3e6:	bf00      	nop
 800c3e8:	e004      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c3ea:	bf00      	nop
 800c3ec:	e002      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c3ee:	bf00      	nop
 800c3f0:	e000      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c3f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3f4:	7dfb      	ldrb	r3, [r7, #23]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d10a      	bne.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c3fa:	4b65      	ldr	r3, [pc, #404]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c3fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c408:	4961      	ldr	r1, [pc, #388]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c40a:	4313      	orrs	r3, r2
 800c40c:	658b      	str	r3, [r1, #88]	; 0x58
 800c40e:	e001      	b.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c410:	7dfb      	ldrb	r3, [r7, #23]
 800c412:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d04b      	beq.n	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c426:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c42a:	d02e      	beq.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800c42c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c430:	d828      	bhi.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c436:	d02a      	beq.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800c438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c43c:	d822      	bhi.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c43e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c442:	d026      	beq.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c444:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c448:	d81c      	bhi.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c44a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c44e:	d010      	beq.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800c450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c454:	d816      	bhi.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c456:	2b00      	cmp	r3, #0
 800c458:	d01d      	beq.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c45a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c45e:	d111      	bne.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	3304      	adds	r3, #4
 800c464:	2100      	movs	r1, #0
 800c466:	4618      	mov	r0, r3
 800c468:	f000 fc80 	bl	800cd6c <RCCEx_PLL2_Config>
 800c46c:	4603      	mov	r3, r0
 800c46e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c470:	e012      	b.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	3324      	adds	r3, #36	; 0x24
 800c476:	2102      	movs	r1, #2
 800c478:	4618      	mov	r0, r3
 800c47a:	f000 fd29 	bl	800ced0 <RCCEx_PLL3_Config>
 800c47e:	4603      	mov	r3, r0
 800c480:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c482:	e009      	b.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c484:	2301      	movs	r3, #1
 800c486:	75fb      	strb	r3, [r7, #23]
      break;
 800c488:	e006      	b.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c48a:	bf00      	nop
 800c48c:	e004      	b.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c48e:	bf00      	nop
 800c490:	e002      	b.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c492:	bf00      	nop
 800c494:	e000      	b.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c496:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c498:	7dfb      	ldrb	r3, [r7, #23]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d10a      	bne.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c49e:	4b3c      	ldr	r3, [pc, #240]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c4a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c4ac:	4938      	ldr	r1, [pc, #224]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	658b      	str	r3, [r1, #88]	; 0x58
 800c4b2:	e001      	b.n	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4b4:	7dfb      	ldrb	r3, [r7, #23]
 800c4b6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f003 0308 	and.w	r3, r3, #8
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d01a      	beq.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4ce:	d10a      	bne.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	3324      	adds	r3, #36	; 0x24
 800c4d4:	2102      	movs	r1, #2
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 fcfa 	bl	800ced0 <RCCEx_PLL3_Config>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d001      	beq.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c4e6:	4b2a      	ldr	r3, [pc, #168]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c4e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4f4:	4926      	ldr	r1, [pc, #152]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f003 0310 	and.w	r3, r3, #16
 800c502:	2b00      	cmp	r3, #0
 800c504:	d01a      	beq.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c50c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c510:	d10a      	bne.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	3324      	adds	r3, #36	; 0x24
 800c516:	2102      	movs	r1, #2
 800c518:	4618      	mov	r0, r3
 800c51a:	f000 fcd9 	bl	800ced0 <RCCEx_PLL3_Config>
 800c51e:	4603      	mov	r3, r0
 800c520:	2b00      	cmp	r3, #0
 800c522:	d001      	beq.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800c524:	2301      	movs	r3, #1
 800c526:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c528:	4b19      	ldr	r3, [pc, #100]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c52a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c52c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c536:	4916      	ldr	r1, [pc, #88]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c538:	4313      	orrs	r3, r2
 800c53a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c544:	2b00      	cmp	r3, #0
 800c546:	d036      	beq.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c54e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c552:	d01f      	beq.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800c554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c558:	d817      	bhi.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d003      	beq.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800c55e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c562:	d009      	beq.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800c564:	e011      	b.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	3304      	adds	r3, #4
 800c56a:	2100      	movs	r1, #0
 800c56c:	4618      	mov	r0, r3
 800c56e:	f000 fbfd 	bl	800cd6c <RCCEx_PLL2_Config>
 800c572:	4603      	mov	r3, r0
 800c574:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c576:	e00e      	b.n	800c596 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	3324      	adds	r3, #36	; 0x24
 800c57c:	2102      	movs	r1, #2
 800c57e:	4618      	mov	r0, r3
 800c580:	f000 fca6 	bl	800ced0 <RCCEx_PLL3_Config>
 800c584:	4603      	mov	r3, r0
 800c586:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c588:	e005      	b.n	800c596 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c58a:	2301      	movs	r3, #1
 800c58c:	75fb      	strb	r3, [r7, #23]
      break;
 800c58e:	e002      	b.n	800c596 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800c590:	58024400 	.word	0x58024400
      break;
 800c594:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c596:	7dfb      	ldrb	r3, [r7, #23]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10a      	bne.n	800c5b2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c59c:	4b93      	ldr	r3, [pc, #588]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c5aa:	4990      	ldr	r1, [pc, #576]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	658b      	str	r3, [r1, #88]	; 0x58
 800c5b0:	e001      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5b2:	7dfb      	ldrb	r3, [r7, #23]
 800c5b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d033      	beq.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c5cc:	d01c      	beq.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800c5ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c5d2:	d816      	bhi.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800c5d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5d8:	d003      	beq.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800c5da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c5de:	d007      	beq.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800c5e0:	e00f      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5e2:	4b82      	ldr	r3, [pc, #520]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e6:	4a81      	ldr	r2, [pc, #516]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c5e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c5ee:	e00c      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	3324      	adds	r3, #36	; 0x24
 800c5f4:	2101      	movs	r1, #1
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f000 fc6a 	bl	800ced0 <RCCEx_PLL3_Config>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c600:	e003      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c602:	2301      	movs	r3, #1
 800c604:	75fb      	strb	r3, [r7, #23]
      break;
 800c606:	e000      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800c608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c60a:	7dfb      	ldrb	r3, [r7, #23]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10a      	bne.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c610:	4b76      	ldr	r3, [pc, #472]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c61e:	4973      	ldr	r1, [pc, #460]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c620:	4313      	orrs	r3, r2
 800c622:	654b      	str	r3, [r1, #84]	; 0x54
 800c624:	e001      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c626:	7dfb      	ldrb	r3, [r7, #23]
 800c628:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c632:	2b00      	cmp	r3, #0
 800c634:	d029      	beq.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d003      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800c63e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c642:	d007      	beq.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800c644:	e00f      	b.n	800c666 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c646:	4b69      	ldr	r3, [pc, #420]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64a:	4a68      	ldr	r2, [pc, #416]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c64c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c650:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c652:	e00b      	b.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	3304      	adds	r3, #4
 800c658:	2102      	movs	r1, #2
 800c65a:	4618      	mov	r0, r3
 800c65c:	f000 fb86 	bl	800cd6c <RCCEx_PLL2_Config>
 800c660:	4603      	mov	r3, r0
 800c662:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c664:	e002      	b.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800c666:	2301      	movs	r3, #1
 800c668:	75fb      	strb	r3, [r7, #23]
      break;
 800c66a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c66c:	7dfb      	ldrb	r3, [r7, #23]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d109      	bne.n	800c686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c672:	4b5e      	ldr	r3, [pc, #376]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c676:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c67e:	495b      	ldr	r1, [pc, #364]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c680:	4313      	orrs	r3, r2
 800c682:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c684:	e001      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c686:	7dfb      	ldrb	r3, [r7, #23]
 800c688:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00a      	beq.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	3324      	adds	r3, #36	; 0x24
 800c69a:	2102      	movs	r1, #2
 800c69c:	4618      	mov	r0, r3
 800c69e:	f000 fc17 	bl	800ced0 <RCCEx_PLL3_Config>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d001      	beq.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d030      	beq.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6c0:	d017      	beq.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800c6c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6c6:	d811      	bhi.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c6c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6cc:	d013      	beq.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c6ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6d2:	d80b      	bhi.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d010      	beq.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c6d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6dc:	d106      	bne.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6de:	4b43      	ldr	r3, [pc, #268]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e2:	4a42      	ldr	r2, [pc, #264]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c6e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c6ea:	e007      	b.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	75fb      	strb	r3, [r7, #23]
      break;
 800c6f0:	e004      	b.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c6f2:	bf00      	nop
 800c6f4:	e002      	b.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c6f6:	bf00      	nop
 800c6f8:	e000      	b.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c6fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6fc:	7dfb      	ldrb	r3, [r7, #23]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d109      	bne.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c702:	4b3a      	ldr	r3, [pc, #232]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c706:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c70e:	4937      	ldr	r1, [pc, #220]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c710:	4313      	orrs	r3, r2
 800c712:	654b      	str	r3, [r1, #84]	; 0x54
 800c714:	e001      	b.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c716:	7dfb      	ldrb	r3, [r7, #23]
 800c718:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c722:	2b00      	cmp	r3, #0
 800c724:	d008      	beq.n	800c738 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c726:	4b31      	ldr	r3, [pc, #196]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c72a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c732:	492e      	ldr	r1, [pc, #184]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c734:	4313      	orrs	r3, r2
 800c736:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c740:	2b00      	cmp	r3, #0
 800c742:	d009      	beq.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c744:	4b29      	ldr	r3, [pc, #164]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c752:	4926      	ldr	r1, [pc, #152]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c754:	4313      	orrs	r3, r2
 800c756:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c760:	2b00      	cmp	r3, #0
 800c762:	d008      	beq.n	800c776 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c764:	4b21      	ldr	r3, [pc, #132]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c768:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c770:	491e      	ldr	r1, [pc, #120]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c772:	4313      	orrs	r3, r2
 800c774:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d00d      	beq.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c782:	4b1a      	ldr	r3, [pc, #104]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	4a19      	ldr	r2, [pc, #100]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c788:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c78c:	6113      	str	r3, [r2, #16]
 800c78e:	4b17      	ldr	r3, [pc, #92]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c790:	691a      	ldr	r2, [r3, #16]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c798:	4914      	ldr	r1, [pc, #80]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c79a:	4313      	orrs	r3, r2
 800c79c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	da08      	bge.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c7a6:	4b11      	ldr	r3, [pc, #68]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c7a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7b2:	490e      	ldr	r1, [pc, #56]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d009      	beq.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c7c4:	4b09      	ldr	r3, [pc, #36]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c7c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7d2:	4906      	ldr	r1, [pc, #24]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c7d8:	7dbb      	ldrb	r3, [r7, #22]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d101      	bne.n	800c7e2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	e000      	b.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800c7e2:	2301      	movs	r3, #1
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3718      	adds	r7, #24
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	58024400 	.word	0x58024400

0800c7f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c7f4:	f7ff f860 	bl	800b8b8 <HAL_RCC_GetHCLKFreq>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	4b06      	ldr	r3, [pc, #24]	; (800c814 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c7fc:	6a1b      	ldr	r3, [r3, #32]
 800c7fe:	091b      	lsrs	r3, r3, #4
 800c800:	f003 0307 	and.w	r3, r3, #7
 800c804:	4904      	ldr	r1, [pc, #16]	; (800c818 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c806:	5ccb      	ldrb	r3, [r1, r3]
 800c808:	f003 031f 	and.w	r3, r3, #31
 800c80c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c810:	4618      	mov	r0, r3
 800c812:	bd80      	pop	{r7, pc}
 800c814:	58024400 	.word	0x58024400
 800c818:	08014654 	.word	0x08014654

0800c81c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b089      	sub	sp, #36	; 0x24
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c824:	4ba1      	ldr	r3, [pc, #644]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c828:	f003 0303 	and.w	r3, r3, #3
 800c82c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c82e:	4b9f      	ldr	r3, [pc, #636]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c832:	0b1b      	lsrs	r3, r3, #12
 800c834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c838:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c83a:	4b9c      	ldr	r3, [pc, #624]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c83e:	091b      	lsrs	r3, r3, #4
 800c840:	f003 0301 	and.w	r3, r3, #1
 800c844:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c846:	4b99      	ldr	r3, [pc, #612]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c84a:	08db      	lsrs	r3, r3, #3
 800c84c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c850:	693a      	ldr	r2, [r7, #16]
 800c852:	fb02 f303 	mul.w	r3, r2, r3
 800c856:	ee07 3a90 	vmov	s15, r3
 800c85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c85e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	2b00      	cmp	r3, #0
 800c866:	f000 8111 	beq.w	800ca8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	f000 8083 	beq.w	800c978 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	2b02      	cmp	r3, #2
 800c876:	f200 80a1 	bhi.w	800c9bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c87a:	69bb      	ldr	r3, [r7, #24]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d003      	beq.n	800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d056      	beq.n	800c934 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c886:	e099      	b.n	800c9bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c888:	4b88      	ldr	r3, [pc, #544]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f003 0320 	and.w	r3, r3, #32
 800c890:	2b00      	cmp	r3, #0
 800c892:	d02d      	beq.n	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c894:	4b85      	ldr	r3, [pc, #532]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	08db      	lsrs	r3, r3, #3
 800c89a:	f003 0303 	and.w	r3, r3, #3
 800c89e:	4a84      	ldr	r2, [pc, #528]	; (800cab0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c8a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c8a4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	ee07 3a90 	vmov	s15, r3
 800c8ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	ee07 3a90 	vmov	s15, r3
 800c8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8be:	4b7b      	ldr	r3, [pc, #492]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8c6:	ee07 3a90 	vmov	s15, r3
 800c8ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c8ee:	e087      	b.n	800ca00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	ee07 3a90 	vmov	s15, r3
 800c8f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cab8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c8fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c902:	4b6a      	ldr	r3, [pc, #424]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c90a:	ee07 3a90 	vmov	s15, r3
 800c90e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c912:	ed97 6a03 	vldr	s12, [r7, #12]
 800c916:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c91a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c91e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c92a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c92e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c932:	e065      	b.n	800ca00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	ee07 3a90 	vmov	s15, r3
 800c93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c93e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cabc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c946:	4b59      	ldr	r3, [pc, #356]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c94a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c94e:	ee07 3a90 	vmov	s15, r3
 800c952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c956:	ed97 6a03 	vldr	s12, [r7, #12]
 800c95a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c95e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c96a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c96e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c972:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c976:	e043      	b.n	800ca00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	ee07 3a90 	vmov	s15, r3
 800c97e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c982:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cac0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c98a:	4b48      	ldr	r3, [pc, #288]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c992:	ee07 3a90 	vmov	s15, r3
 800c996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c99a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c99e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c9ba:	e021      	b.n	800ca00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	ee07 3a90 	vmov	s15, r3
 800c9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cabc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c9ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ce:	4b37      	ldr	r3, [pc, #220]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d6:	ee07 3a90 	vmov	s15, r3
 800c9da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c9fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ca00:	4b2a      	ldr	r3, [pc, #168]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca04:	0a5b      	lsrs	r3, r3, #9
 800ca06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca0a:	ee07 3a90 	vmov	s15, r3
 800ca0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca26:	ee17 2a90 	vmov	r2, s15
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ca2e:	4b1f      	ldr	r3, [pc, #124]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca32:	0c1b      	lsrs	r3, r3, #16
 800ca34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca38:	ee07 3a90 	vmov	s15, r3
 800ca3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca44:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca48:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca54:	ee17 2a90 	vmov	r2, s15
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ca5c:	4b13      	ldr	r3, [pc, #76]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca60:	0e1b      	lsrs	r3, r3, #24
 800ca62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca66:	ee07 3a90 	vmov	s15, r3
 800ca6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca76:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca82:	ee17 2a90 	vmov	r2, s15
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ca8a:	e008      	b.n	800ca9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	609a      	str	r2, [r3, #8]
}
 800ca9e:	bf00      	nop
 800caa0:	3724      	adds	r7, #36	; 0x24
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	58024400 	.word	0x58024400
 800cab0:	03d09000 	.word	0x03d09000
 800cab4:	46000000 	.word	0x46000000
 800cab8:	4c742400 	.word	0x4c742400
 800cabc:	4a742400 	.word	0x4a742400
 800cac0:	4bbebc20 	.word	0x4bbebc20

0800cac4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b089      	sub	sp, #36	; 0x24
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cacc:	4ba1      	ldr	r3, [pc, #644]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cad0:	f003 0303 	and.w	r3, r3, #3
 800cad4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800cad6:	4b9f      	ldr	r3, [pc, #636]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cada:	0d1b      	lsrs	r3, r3, #20
 800cadc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cae0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cae2:	4b9c      	ldr	r3, [pc, #624]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae6:	0a1b      	lsrs	r3, r3, #8
 800cae8:	f003 0301 	and.w	r3, r3, #1
 800caec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800caee:	4b99      	ldr	r3, [pc, #612]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caf2:	08db      	lsrs	r3, r3, #3
 800caf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800caf8:	693a      	ldr	r2, [r7, #16]
 800cafa:	fb02 f303 	mul.w	r3, r2, r3
 800cafe:	ee07 3a90 	vmov	s15, r3
 800cb02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	f000 8111 	beq.w	800cd34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	f000 8083 	beq.w	800cc20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cb1a:	69bb      	ldr	r3, [r7, #24]
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	f200 80a1 	bhi.w	800cc64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d003      	beq.n	800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d056      	beq.n	800cbdc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cb2e:	e099      	b.n	800cc64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb30:	4b88      	ldr	r3, [pc, #544]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f003 0320 	and.w	r3, r3, #32
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d02d      	beq.n	800cb98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cb3c:	4b85      	ldr	r3, [pc, #532]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	08db      	lsrs	r3, r3, #3
 800cb42:	f003 0303 	and.w	r3, r3, #3
 800cb46:	4a84      	ldr	r2, [pc, #528]	; (800cd58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cb48:	fa22 f303 	lsr.w	r3, r2, r3
 800cb4c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	ee07 3a90 	vmov	s15, r3
 800cb54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	ee07 3a90 	vmov	s15, r3
 800cb5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb66:	4b7b      	ldr	r3, [pc, #492]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb6e:	ee07 3a90 	vmov	s15, r3
 800cb72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb76:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cd5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cb96:	e087      	b.n	800cca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	ee07 3a90 	vmov	s15, r3
 800cb9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cba2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cd60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbaa:	4b6a      	ldr	r3, [pc, #424]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbb2:	ee07 3a90 	vmov	s15, r3
 800cbb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbba:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cd5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cbda:	e065      	b.n	800cca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	ee07 3a90 	vmov	s15, r3
 800cbe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbe6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cd64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cbea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbee:	4b59      	ldr	r3, [pc, #356]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbf6:	ee07 3a90 	vmov	s15, r3
 800cbfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc02:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cd5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cc1e:	e043      	b.n	800cca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	ee07 3a90 	vmov	s15, r3
 800cc26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cd68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cc2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc32:	4b48      	ldr	r3, [pc, #288]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc3a:	ee07 3a90 	vmov	s15, r3
 800cc3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc42:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc46:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cd5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cc62:	e021      	b.n	800cca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	ee07 3a90 	vmov	s15, r3
 800cc6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cd64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cc72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc76:	4b37      	ldr	r3, [pc, #220]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc7e:	ee07 3a90 	vmov	s15, r3
 800cc82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc86:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cd5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cca2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cca6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800cca8:	4b2a      	ldr	r3, [pc, #168]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccac:	0a5b      	lsrs	r3, r3, #9
 800ccae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccb2:	ee07 3a90 	vmov	s15, r3
 800ccb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccc2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccce:	ee17 2a90 	vmov	r2, s15
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ccd6:	4b1f      	ldr	r3, [pc, #124]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccda:	0c1b      	lsrs	r3, r3, #16
 800ccdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cce0:	ee07 3a90 	vmov	s15, r3
 800cce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccfc:	ee17 2a90 	vmov	r2, s15
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800cd04:	4b13      	ldr	r3, [pc, #76]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd08:	0e1b      	lsrs	r3, r3, #24
 800cd0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd0e:	ee07 3a90 	vmov	s15, r3
 800cd12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd2a:	ee17 2a90 	vmov	r2, s15
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cd32:	e008      	b.n	800cd46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	609a      	str	r2, [r3, #8]
}
 800cd46:	bf00      	nop
 800cd48:	3724      	adds	r7, #36	; 0x24
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	58024400 	.word	0x58024400
 800cd58:	03d09000 	.word	0x03d09000
 800cd5c:	46000000 	.word	0x46000000
 800cd60:	4c742400 	.word	0x4c742400
 800cd64:	4a742400 	.word	0x4a742400
 800cd68:	4bbebc20 	.word	0x4bbebc20

0800cd6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd76:	2300      	movs	r3, #0
 800cd78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd7a:	4b53      	ldr	r3, [pc, #332]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800cd7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd7e:	f003 0303 	and.w	r3, r3, #3
 800cd82:	2b03      	cmp	r3, #3
 800cd84:	d101      	bne.n	800cd8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cd86:	2301      	movs	r3, #1
 800cd88:	e099      	b.n	800cebe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cd8a:	4b4f      	ldr	r3, [pc, #316]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a4e      	ldr	r2, [pc, #312]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800cd90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cd94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd96:	f7f8 fa57 	bl	8005248 <HAL_GetTick>
 800cd9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd9c:	e008      	b.n	800cdb0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cd9e:	f7f8 fa53 	bl	8005248 <HAL_GetTick>
 800cda2:	4602      	mov	r2, r0
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	d901      	bls.n	800cdb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cdac:	2303      	movs	r3, #3
 800cdae:	e086      	b.n	800cebe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cdb0:	4b45      	ldr	r3, [pc, #276]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d1f0      	bne.n	800cd9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cdbc:	4b42      	ldr	r3, [pc, #264]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800cdbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	031b      	lsls	r3, r3, #12
 800cdca:	493f      	ldr	r1, [pc, #252]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	628b      	str	r3, [r1, #40]	; 0x28
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	3b01      	subs	r3, #1
 800cdd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	689b      	ldr	r3, [r3, #8]
 800cdde:	3b01      	subs	r3, #1
 800cde0:	025b      	lsls	r3, r3, #9
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	431a      	orrs	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	68db      	ldr	r3, [r3, #12]
 800cdea:	3b01      	subs	r3, #1
 800cdec:	041b      	lsls	r3, r3, #16
 800cdee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cdf2:	431a      	orrs	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	691b      	ldr	r3, [r3, #16]
 800cdf8:	3b01      	subs	r3, #1
 800cdfa:	061b      	lsls	r3, r3, #24
 800cdfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ce00:	4931      	ldr	r1, [pc, #196]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce02:	4313      	orrs	r3, r2
 800ce04:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ce06:	4b30      	ldr	r3, [pc, #192]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	695b      	ldr	r3, [r3, #20]
 800ce12:	492d      	ldr	r1, [pc, #180]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce14:	4313      	orrs	r3, r2
 800ce16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ce18:	4b2b      	ldr	r3, [pc, #172]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1c:	f023 0220 	bic.w	r2, r3, #32
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	699b      	ldr	r3, [r3, #24]
 800ce24:	4928      	ldr	r1, [pc, #160]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce26:	4313      	orrs	r3, r2
 800ce28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ce2a:	4b27      	ldr	r3, [pc, #156]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2e:	4a26      	ldr	r2, [pc, #152]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce30:	f023 0310 	bic.w	r3, r3, #16
 800ce34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ce36:	4b24      	ldr	r3, [pc, #144]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce3a:	4b24      	ldr	r3, [pc, #144]	; (800cecc <RCCEx_PLL2_Config+0x160>)
 800ce3c:	4013      	ands	r3, r2
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	69d2      	ldr	r2, [r2, #28]
 800ce42:	00d2      	lsls	r2, r2, #3
 800ce44:	4920      	ldr	r1, [pc, #128]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce46:	4313      	orrs	r3, r2
 800ce48:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ce4a:	4b1f      	ldr	r3, [pc, #124]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce4e:	4a1e      	ldr	r2, [pc, #120]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce50:	f043 0310 	orr.w	r3, r3, #16
 800ce54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d106      	bne.n	800ce6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ce5c:	4b1a      	ldr	r3, [pc, #104]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce60:	4a19      	ldr	r2, [pc, #100]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce66:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce68:	e00f      	b.n	800ce8a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d106      	bne.n	800ce7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ce70:	4b15      	ldr	r3, [pc, #84]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce74:	4a14      	ldr	r2, [pc, #80]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce7c:	e005      	b.n	800ce8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ce7e:	4b12      	ldr	r3, [pc, #72]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce82:	4a11      	ldr	r2, [pc, #68]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ce8a:	4b0f      	ldr	r3, [pc, #60]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	4a0e      	ldr	r2, [pc, #56]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce96:	f7f8 f9d7 	bl	8005248 <HAL_GetTick>
 800ce9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce9c:	e008      	b.n	800ceb0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ce9e:	f7f8 f9d3 	bl	8005248 <HAL_GetTick>
 800cea2:	4602      	mov	r2, r0
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	1ad3      	subs	r3, r2, r3
 800cea8:	2b02      	cmp	r3, #2
 800ceaa:	d901      	bls.n	800ceb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ceac:	2303      	movs	r3, #3
 800ceae:	e006      	b.n	800cebe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ceb0:	4b05      	ldr	r3, [pc, #20]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d0f0      	beq.n	800ce9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cebc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	58024400 	.word	0x58024400
 800cecc:	ffff0007 	.word	0xffff0007

0800ced0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ceda:	2300      	movs	r3, #0
 800cedc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cede:	4b53      	ldr	r3, [pc, #332]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee2:	f003 0303 	and.w	r3, r3, #3
 800cee6:	2b03      	cmp	r3, #3
 800cee8:	d101      	bne.n	800ceee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ceea:	2301      	movs	r3, #1
 800ceec:	e099      	b.n	800d022 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ceee:	4b4f      	ldr	r3, [pc, #316]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a4e      	ldr	r2, [pc, #312]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cefa:	f7f8 f9a5 	bl	8005248 <HAL_GetTick>
 800cefe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cf00:	e008      	b.n	800cf14 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cf02:	f7f8 f9a1 	bl	8005248 <HAL_GetTick>
 800cf06:	4602      	mov	r2, r0
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	1ad3      	subs	r3, r2, r3
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	d901      	bls.n	800cf14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cf10:	2303      	movs	r3, #3
 800cf12:	e086      	b.n	800d022 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cf14:	4b45      	ldr	r3, [pc, #276]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d1f0      	bne.n	800cf02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cf20:	4b42      	ldr	r3, [pc, #264]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf24:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	051b      	lsls	r3, r3, #20
 800cf2e:	493f      	ldr	r1, [pc, #252]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf30:	4313      	orrs	r3, r2
 800cf32:	628b      	str	r3, [r1, #40]	; 0x28
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	689b      	ldr	r3, [r3, #8]
 800cf42:	3b01      	subs	r3, #1
 800cf44:	025b      	lsls	r3, r3, #9
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	431a      	orrs	r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	3b01      	subs	r3, #1
 800cf50:	041b      	lsls	r3, r3, #16
 800cf52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cf56:	431a      	orrs	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	691b      	ldr	r3, [r3, #16]
 800cf5c:	3b01      	subs	r3, #1
 800cf5e:	061b      	lsls	r3, r3, #24
 800cf60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf64:	4931      	ldr	r1, [pc, #196]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf66:	4313      	orrs	r3, r2
 800cf68:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cf6a:	4b30      	ldr	r3, [pc, #192]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	695b      	ldr	r3, [r3, #20]
 800cf76:	492d      	ldr	r1, [pc, #180]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cf7c:	4b2b      	ldr	r3, [pc, #172]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	699b      	ldr	r3, [r3, #24]
 800cf88:	4928      	ldr	r1, [pc, #160]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cf8e:	4b27      	ldr	r3, [pc, #156]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf92:	4a26      	ldr	r2, [pc, #152]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cf9a:	4b24      	ldr	r3, [pc, #144]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf9e:	4b24      	ldr	r3, [pc, #144]	; (800d030 <RCCEx_PLL3_Config+0x160>)
 800cfa0:	4013      	ands	r3, r2
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	69d2      	ldr	r2, [r2, #28]
 800cfa6:	00d2      	lsls	r2, r2, #3
 800cfa8:	4920      	ldr	r1, [pc, #128]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cfae:	4b1f      	ldr	r3, [pc, #124]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb2:	4a1e      	ldr	r2, [pc, #120]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d106      	bne.n	800cfce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cfc0:	4b1a      	ldr	r3, [pc, #104]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc4:	4a19      	ldr	r2, [pc, #100]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cfca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfcc:	e00f      	b.n	800cfee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d106      	bne.n	800cfe2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cfd4:	4b15      	ldr	r3, [pc, #84]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd8:	4a14      	ldr	r2, [pc, #80]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cfde:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfe0:	e005      	b.n	800cfee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cfe2:	4b12      	ldr	r3, [pc, #72]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe6:	4a11      	ldr	r2, [pc, #68]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfe8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cfec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cfee:	4b0f      	ldr	r3, [pc, #60]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4a0e      	ldr	r2, [pc, #56]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cffa:	f7f8 f925 	bl	8005248 <HAL_GetTick>
 800cffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d000:	e008      	b.n	800d014 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d002:	f7f8 f921 	bl	8005248 <HAL_GetTick>
 800d006:	4602      	mov	r2, r0
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	1ad3      	subs	r3, r2, r3
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d901      	bls.n	800d014 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d010:	2303      	movs	r3, #3
 800d012:	e006      	b.n	800d022 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d014:	4b05      	ldr	r3, [pc, #20]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d0f0      	beq.n	800d002 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d020:	7bfb      	ldrb	r3, [r7, #15]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	58024400 	.word	0x58024400
 800d030:	ffff0007 	.word	0xffff0007

0800d034 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800d03c:	2300      	movs	r3, #0
 800d03e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d101      	bne.n	800d04a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800d046:	2301      	movs	r3, #1
 800d048:	e0eb      	b.n	800d222 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a75      	ldr	r2, [pc, #468]	; (800d22c <HAL_SPI_Init+0x1f8>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d00f      	beq.n	800d07a <HAL_SPI_Init+0x46>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4a74      	ldr	r2, [pc, #464]	; (800d230 <HAL_SPI_Init+0x1fc>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d00a      	beq.n	800d07a <HAL_SPI_Init+0x46>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a72      	ldr	r2, [pc, #456]	; (800d234 <HAL_SPI_Init+0x200>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d005      	beq.n	800d07a <HAL_SPI_Init+0x46>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	2b0f      	cmp	r3, #15
 800d074:	d901      	bls.n	800d07a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	e0d3      	b.n	800d222 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f001 f87a 	bl	800e174 <SPI_GetPacketSize>
 800d080:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4a69      	ldr	r2, [pc, #420]	; (800d22c <HAL_SPI_Init+0x1f8>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d00c      	beq.n	800d0a6 <HAL_SPI_Init+0x72>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a67      	ldr	r2, [pc, #412]	; (800d230 <HAL_SPI_Init+0x1fc>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d007      	beq.n	800d0a6 <HAL_SPI_Init+0x72>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a66      	ldr	r2, [pc, #408]	; (800d234 <HAL_SPI_Init+0x200>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d002      	beq.n	800d0a6 <HAL_SPI_Init+0x72>
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	2b08      	cmp	r3, #8
 800d0a4:	d811      	bhi.n	800d0ca <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d0aa:	4a60      	ldr	r2, [pc, #384]	; (800d22c <HAL_SPI_Init+0x1f8>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d009      	beq.n	800d0c4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a5e      	ldr	r2, [pc, #376]	; (800d230 <HAL_SPI_Init+0x1fc>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d004      	beq.n	800d0c4 <HAL_SPI_Init+0x90>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a5d      	ldr	r2, [pc, #372]	; (800d234 <HAL_SPI_Init+0x200>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d104      	bne.n	800d0ce <HAL_SPI_Init+0x9a>
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	2b10      	cmp	r3, #16
 800d0c8:	d901      	bls.n	800d0ce <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e0a9      	b.n	800d222 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d106      	bne.n	800d0e8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7f6 fe30 	bl	8003d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2202      	movs	r2, #2
 800d0ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f022 0201 	bic.w	r2, r2, #1
 800d0fe:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	699b      	ldr	r3, [r3, #24]
 800d104:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d108:	d119      	bne.n	800d13e <HAL_SPI_Init+0x10a>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d112:	d103      	bne.n	800d11c <HAL_SPI_Init+0xe8>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d008      	beq.n	800d12e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d120:	2b00      	cmp	r3, #0
 800d122:	d10c      	bne.n	800d13e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d12c:	d107      	bne.n	800d13e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d13c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	69da      	ldr	r2, [r3, #28]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d146:	431a      	orrs	r2, r3
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	431a      	orrs	r2, r3
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d150:	ea42 0103 	orr.w	r1, r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	68da      	ldr	r2, [r3, #12]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	430a      	orrs	r2, r1
 800d15e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d168:	431a      	orrs	r2, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d16e:	431a      	orrs	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	699b      	ldr	r3, [r3, #24]
 800d174:	431a      	orrs	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	431a      	orrs	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	695b      	ldr	r3, [r3, #20]
 800d180:	431a      	orrs	r2, r3
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6a1b      	ldr	r3, [r3, #32]
 800d186:	431a      	orrs	r2, r3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	431a      	orrs	r2, r3
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d192:	431a      	orrs	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	431a      	orrs	r2, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d19e:	ea42 0103 	orr.w	r1, r2, r3
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	430a      	orrs	r2, r1
 800d1ac:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d113      	bne.n	800d1de <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1c8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	689b      	ldr	r3, [r3, #8]
 800d1d0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d1dc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f022 0201 	bic.w	r2, r2, #1
 800d1ec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d00a      	beq.n	800d210 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	430a      	orrs	r2, r1
 800d20e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2200      	movs	r2, #0
 800d214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2201      	movs	r2, #1
 800d21c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d220:	2300      	movs	r3, #0
}
 800d222:	4618      	mov	r0, r3
 800d224:	3710      	adds	r7, #16
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	40013000 	.word	0x40013000
 800d230:	40003800 	.word	0x40003800
 800d234:	40003c00 	.word	0x40003c00

0800d238 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b08a      	sub	sp, #40	; 0x28
 800d23c:	af02      	add	r7, sp, #8
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	603b      	str	r3, [r7, #0]
 800d244:	4613      	mov	r3, r2
 800d246:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	3320      	adds	r3, #32
 800d24e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d250:	2300      	movs	r3, #0
 800d252:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d101      	bne.n	800d262 <HAL_SPI_Transmit+0x2a>
 800d25e:	2302      	movs	r3, #2
 800d260:	e1d7      	b.n	800d612 <HAL_SPI_Transmit+0x3da>
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2201      	movs	r2, #1
 800d266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d26a:	f7f7 ffed 	bl	8005248 <HAL_GetTick>
 800d26e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d276:	b2db      	uxtb	r3, r3
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d007      	beq.n	800d28c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d27c:	2302      	movs	r3, #2
 800d27e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2200      	movs	r2, #0
 800d284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d288:	7efb      	ldrb	r3, [r7, #27]
 800d28a:	e1c2      	b.n	800d612 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d002      	beq.n	800d298 <HAL_SPI_Transmit+0x60>
 800d292:	88fb      	ldrh	r3, [r7, #6]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d107      	bne.n	800d2a8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d298:	2301      	movs	r3, #1
 800d29a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d2a4:	7efb      	ldrb	r3, [r7, #27]
 800d2a6:	e1b4      	b.n	800d612 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2203      	movs	r2, #3
 800d2ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	68ba      	ldr	r2, [r7, #8]
 800d2bc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	88fa      	ldrh	r2, [r7, #6]
 800d2c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	88fa      	ldrh	r2, [r7, #6]
 800d2ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d2f8:	d107      	bne.n	800d30a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d308:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	685a      	ldr	r2, [r3, #4]
 800d310:	4b96      	ldr	r3, [pc, #600]	; (800d56c <HAL_SPI_Transmit+0x334>)
 800d312:	4013      	ands	r3, r2
 800d314:	88f9      	ldrh	r1, [r7, #6]
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	6812      	ldr	r2, [r2, #0]
 800d31a:	430b      	orrs	r3, r1
 800d31c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f042 0201 	orr.w	r2, r2, #1
 800d32c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d336:	d107      	bne.n	800d348 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d346:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	68db      	ldr	r3, [r3, #12]
 800d34c:	2b0f      	cmp	r3, #15
 800d34e:	d947      	bls.n	800d3e0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d350:	e03f      	b.n	800d3d2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	695b      	ldr	r3, [r3, #20]
 800d358:	f003 0302 	and.w	r3, r3, #2
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	d114      	bne.n	800d38a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	6812      	ldr	r2, [r2, #0]
 800d36a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d370:	1d1a      	adds	r2, r3, #4
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	3b01      	subs	r3, #1
 800d380:	b29a      	uxth	r2, r3
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d388:	e023      	b.n	800d3d2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d38a:	f7f7 ff5d 	bl	8005248 <HAL_GetTick>
 800d38e:	4602      	mov	r2, r0
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	1ad3      	subs	r3, r2, r3
 800d394:	683a      	ldr	r2, [r7, #0]
 800d396:	429a      	cmp	r2, r3
 800d398:	d803      	bhi.n	800d3a2 <HAL_SPI_Transmit+0x16a>
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3a0:	d102      	bne.n	800d3a8 <HAL_SPI_Transmit+0x170>
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d114      	bne.n	800d3d2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d3a8:	68f8      	ldr	r0, [r7, #12]
 800d3aa:	f000 fe15 	bl	800dfd8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	e11f      	b.n	800d612 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d1b9      	bne.n	800d352 <HAL_SPI_Transmit+0x11a>
 800d3de:	e0f2      	b.n	800d5c6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	2b07      	cmp	r3, #7
 800d3e6:	f240 80e7 	bls.w	800d5b8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d3ea:	e05d      	b.n	800d4a8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	695b      	ldr	r3, [r3, #20]
 800d3f2:	f003 0302 	and.w	r3, r3, #2
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	d132      	bne.n	800d460 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d400:	b29b      	uxth	r3, r3
 800d402:	2b01      	cmp	r3, #1
 800d404:	d918      	bls.n	800d438 <HAL_SPI_Transmit+0x200>
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d014      	beq.n	800d438 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	6812      	ldr	r2, [r2, #0]
 800d418:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d41e:	1d1a      	adds	r2, r3, #4
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	3b02      	subs	r3, #2
 800d42e:	b29a      	uxth	r2, r3
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d436:	e037      	b.n	800d4a8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d43c:	881a      	ldrh	r2, [r3, #0]
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d446:	1c9a      	adds	r2, r3, #2
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d452:	b29b      	uxth	r3, r3
 800d454:	3b01      	subs	r3, #1
 800d456:	b29a      	uxth	r2, r3
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d45e:	e023      	b.n	800d4a8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d460:	f7f7 fef2 	bl	8005248 <HAL_GetTick>
 800d464:	4602      	mov	r2, r0
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	1ad3      	subs	r3, r2, r3
 800d46a:	683a      	ldr	r2, [r7, #0]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d803      	bhi.n	800d478 <HAL_SPI_Transmit+0x240>
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d476:	d102      	bne.n	800d47e <HAL_SPI_Transmit+0x246>
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d114      	bne.n	800d4a8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f000 fdaa 	bl	800dfd8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2200      	movs	r2, #0
 800d488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d492:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2201      	movs	r2, #1
 800d4a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e0b4      	b.n	800d612 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d19b      	bne.n	800d3ec <HAL_SPI_Transmit+0x1b4>
 800d4b4:	e087      	b.n	800d5c6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	695b      	ldr	r3, [r3, #20]
 800d4bc:	f003 0302 	and.w	r3, r3, #2
 800d4c0:	2b02      	cmp	r3, #2
 800d4c2:	d155      	bne.n	800d570 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	2b03      	cmp	r3, #3
 800d4ce:	d918      	bls.n	800d502 <HAL_SPI_Transmit+0x2ca>
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4d4:	2b40      	cmp	r3, #64	; 0x40
 800d4d6:	d914      	bls.n	800d502 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	6812      	ldr	r2, [r2, #0]
 800d4e2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4e8:	1d1a      	adds	r2, r3, #4
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	3b04      	subs	r3, #4
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d500:	e05a      	b.n	800d5b8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d508:	b29b      	uxth	r3, r3
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d917      	bls.n	800d53e <HAL_SPI_Transmit+0x306>
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d512:	2b00      	cmp	r3, #0
 800d514:	d013      	beq.n	800d53e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d51a:	881a      	ldrh	r2, [r3, #0]
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d524:	1c9a      	adds	r2, r3, #2
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d530:	b29b      	uxth	r3, r3
 800d532:	3b02      	subs	r3, #2
 800d534:	b29a      	uxth	r2, r3
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d53c:	e03c      	b.n	800d5b8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	3320      	adds	r3, #32
 800d548:	7812      	ldrb	r2, [r2, #0]
 800d54a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d550:	1c5a      	adds	r2, r3, #1
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	3b01      	subs	r3, #1
 800d560:	b29a      	uxth	r2, r3
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d568:	e026      	b.n	800d5b8 <HAL_SPI_Transmit+0x380>
 800d56a:	bf00      	nop
 800d56c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d570:	f7f7 fe6a 	bl	8005248 <HAL_GetTick>
 800d574:	4602      	mov	r2, r0
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	683a      	ldr	r2, [r7, #0]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d803      	bhi.n	800d588 <HAL_SPI_Transmit+0x350>
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d586:	d102      	bne.n	800d58e <HAL_SPI_Transmit+0x356>
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d114      	bne.n	800d5b8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	f000 fd22 	bl	800dfd8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2200      	movs	r2, #0
 800d598:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e02c      	b.n	800d612 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	f47f af78 	bne.w	800d4b6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	9300      	str	r3, [sp, #0]
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	2108      	movs	r1, #8
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f000 fda1 	bl	800e118 <SPI_WaitOnFlagUntilTimeout>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d007      	beq.n	800d5ec <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5e2:	f043 0220 	orr.w	r2, r3, #32
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d5ec:	68f8      	ldr	r0, [r7, #12]
 800d5ee:	f000 fcf3 	bl	800dfd8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d001      	beq.n	800d610 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800d60c:	2301      	movs	r3, #1
 800d60e:	e000      	b.n	800d612 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800d610:	7efb      	ldrb	r3, [r7, #27]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3720      	adds	r7, #32
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop

0800d61c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b08a      	sub	sp, #40	; 0x28
 800d620:	af02      	add	r7, sp, #8
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	603b      	str	r3, [r7, #0]
 800d628:	4613      	mov	r3, r2
 800d62a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d62c:	2300      	movs	r3, #0
 800d62e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	3330      	adds	r3, #48	; 0x30
 800d636:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d640:	d112      	bne.n	800d668 <HAL_SPI_Receive+0x4c>
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	689b      	ldr	r3, [r3, #8]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d10e      	bne.n	800d668 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2204      	movs	r2, #4
 800d64e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d652:	88fa      	ldrh	r2, [r7, #6]
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	9300      	str	r3, [sp, #0]
 800d658:	4613      	mov	r3, r2
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	68b9      	ldr	r1, [r7, #8]
 800d65e:	68f8      	ldr	r0, [r7, #12]
 800d660:	f000 f9ce 	bl	800da00 <HAL_SPI_TransmitReceive>
 800d664:	4603      	mov	r3, r0
 800d666:	e1c7      	b.n	800d9f8 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d66e:	2b01      	cmp	r3, #1
 800d670:	d101      	bne.n	800d676 <HAL_SPI_Receive+0x5a>
 800d672:	2302      	movs	r3, #2
 800d674:	e1c0      	b.n	800d9f8 <HAL_SPI_Receive+0x3dc>
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2201      	movs	r2, #1
 800d67a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d67e:	f7f7 fde3 	bl	8005248 <HAL_GetTick>
 800d682:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d007      	beq.n	800d6a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800d690:	2302      	movs	r3, #2
 800d692:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2200      	movs	r2, #0
 800d698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d69c:	7ffb      	ldrb	r3, [r7, #31]
 800d69e:	e1ab      	b.n	800d9f8 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d002      	beq.n	800d6ac <HAL_SPI_Receive+0x90>
 800d6a6:	88fb      	ldrh	r3, [r7, #6]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d107      	bne.n	800d6bc <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d6b8:	7ffb      	ldrb	r3, [r7, #31]
 800d6ba:	e19d      	b.n	800d9f8 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2204      	movs	r2, #4
 800d6c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	68ba      	ldr	r2, [r7, #8]
 800d6d0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	88fa      	ldrh	r2, [r7, #6]
 800d6d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	88fa      	ldrh	r2, [r7, #6]
 800d6de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2200      	movs	r2, #0
 800d702:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d70c:	d107      	bne.n	800d71e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	681a      	ldr	r2, [r3, #0]
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d71c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	685a      	ldr	r2, [r3, #4]
 800d724:	4b94      	ldr	r3, [pc, #592]	; (800d978 <HAL_SPI_Receive+0x35c>)
 800d726:	4013      	ands	r3, r2
 800d728:	88f9      	ldrh	r1, [r7, #6]
 800d72a:	68fa      	ldr	r2, [r7, #12]
 800d72c:	6812      	ldr	r2, [r2, #0]
 800d72e:	430b      	orrs	r3, r1
 800d730:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	681a      	ldr	r2, [r3, #0]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f042 0201 	orr.w	r2, r2, #1
 800d740:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d74a:	d107      	bne.n	800d75c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d75a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	2b0f      	cmp	r3, #15
 800d762:	d948      	bls.n	800d7f6 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d764:	e040      	b.n	800d7e8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	695a      	ldr	r2, [r3, #20]
 800d76c:	f248 0308 	movw	r3, #32776	; 0x8008
 800d770:	4013      	ands	r3, r2
 800d772:	2b00      	cmp	r3, #0
 800d774:	d014      	beq.n	800d7a0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d77e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d780:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d786:	1d1a      	adds	r2, r3, #4
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d792:	b29b      	uxth	r3, r3
 800d794:	3b01      	subs	r3, #1
 800d796:	b29a      	uxth	r2, r3
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d79e:	e023      	b.n	800d7e8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7a0:	f7f7 fd52 	bl	8005248 <HAL_GetTick>
 800d7a4:	4602      	mov	r2, r0
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	1ad3      	subs	r3, r2, r3
 800d7aa:	683a      	ldr	r2, [r7, #0]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d803      	bhi.n	800d7b8 <HAL_SPI_Receive+0x19c>
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b6:	d102      	bne.n	800d7be <HAL_SPI_Receive+0x1a2>
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d114      	bne.n	800d7e8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d7be:	68f8      	ldr	r0, [r7, #12]
 800d7c0:	f000 fc0a 	bl	800dfd8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e107      	b.n	800d9f8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d1b8      	bne.n	800d766 <HAL_SPI_Receive+0x14a>
 800d7f4:	e0ed      	b.n	800d9d2 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	2b07      	cmp	r3, #7
 800d7fc:	f240 80e2 	bls.w	800d9c4 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d800:	e05b      	b.n	800d8ba <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	695b      	ldr	r3, [r3, #20]
 800d808:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d030      	beq.n	800d872 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	695b      	ldr	r3, [r3, #20]
 800d816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d014      	beq.n	800d848 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d826:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d828:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d82e:	1d1a      	adds	r2, r3, #4
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	3b02      	subs	r3, #2
 800d83e:	b29a      	uxth	r2, r3
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d846:	e038      	b.n	800d8ba <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d84c:	69ba      	ldr	r2, [r7, #24]
 800d84e:	8812      	ldrh	r2, [r2, #0]
 800d850:	b292      	uxth	r2, r2
 800d852:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d858:	1c9a      	adds	r2, r3, #2
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d864:	b29b      	uxth	r3, r3
 800d866:	3b01      	subs	r3, #1
 800d868:	b29a      	uxth	r2, r3
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d870:	e023      	b.n	800d8ba <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d872:	f7f7 fce9 	bl	8005248 <HAL_GetTick>
 800d876:	4602      	mov	r2, r0
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	1ad3      	subs	r3, r2, r3
 800d87c:	683a      	ldr	r2, [r7, #0]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d803      	bhi.n	800d88a <HAL_SPI_Receive+0x26e>
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d888:	d102      	bne.n	800d890 <HAL_SPI_Receive+0x274>
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d114      	bne.n	800d8ba <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d890:	68f8      	ldr	r0, [r7, #12]
 800d892:	f000 fba1 	bl	800dfd8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2200      	movs	r2, #0
 800d89a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e09e      	b.n	800d9f8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d19d      	bne.n	800d802 <HAL_SPI_Receive+0x1e6>
 800d8c6:	e084      	b.n	800d9d2 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	695b      	ldr	r3, [r3, #20]
 800d8ce:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d052      	beq.n	800d97c <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	695b      	ldr	r3, [r3, #20]
 800d8dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d014      	beq.n	800d90e <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d8ee:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8f4:	1d1a      	adds	r2, r3, #4
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d900:	b29b      	uxth	r3, r3
 800d902:	3b04      	subs	r3, #4
 800d904:	b29a      	uxth	r2, r3
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d90c:	e05a      	b.n	800d9c4 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	695b      	ldr	r3, [r3, #20]
 800d914:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d91c:	d914      	bls.n	800d948 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d922:	69ba      	ldr	r2, [r7, #24]
 800d924:	8812      	ldrh	r2, [r2, #0]
 800d926:	b292      	uxth	r2, r2
 800d928:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d92e:	1c9a      	adds	r2, r3, #2
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	3b02      	subs	r3, #2
 800d93e:	b29a      	uxth	r2, r3
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d946:	e03d      	b.n	800d9c4 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d954:	7812      	ldrb	r2, [r2, #0]
 800d956:	b2d2      	uxtb	r2, r2
 800d958:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d95e:	1c5a      	adds	r2, r3, #1
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	3b01      	subs	r3, #1
 800d96e:	b29a      	uxth	r2, r3
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d976:	e025      	b.n	800d9c4 <HAL_SPI_Receive+0x3a8>
 800d978:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d97c:	f7f7 fc64 	bl	8005248 <HAL_GetTick>
 800d980:	4602      	mov	r2, r0
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	1ad3      	subs	r3, r2, r3
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d803      	bhi.n	800d994 <HAL_SPI_Receive+0x378>
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d992:	d102      	bne.n	800d99a <HAL_SPI_Receive+0x37e>
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d114      	bne.n	800d9c4 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d99a:	68f8      	ldr	r0, [r7, #12]
 800d99c:	f000 fb1c 	bl	800dfd8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e019      	b.n	800d9f8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	f47f af7b 	bne.w	800d8c8 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d9d2:	68f8      	ldr	r0, [r7, #12]
 800d9d4:	f000 fb00 	bl	800dfd8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d001      	beq.n	800d9f6 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e000      	b.n	800d9f8 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800d9f6:	7ffb      	ldrb	r3, [r7, #31]
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3720      	adds	r7, #32
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b08e      	sub	sp, #56	; 0x38
 800da04:	af02      	add	r7, sp, #8
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
 800da0c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800da0e:	2300      	movs	r3, #0
 800da10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	3320      	adds	r3, #32
 800da1a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	3330      	adds	r3, #48	; 0x30
 800da22:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da2a:	2b01      	cmp	r3, #1
 800da2c:	d101      	bne.n	800da32 <HAL_SPI_TransmitReceive+0x32>
 800da2e:	2302      	movs	r3, #2
 800da30:	e2ce      	b.n	800dfd0 <HAL_SPI_TransmitReceive+0x5d0>
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2201      	movs	r2, #1
 800da36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800da3a:	f7f7 fc05 	bl	8005248 <HAL_GetTick>
 800da3e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800da40:	887b      	ldrh	r3, [r7, #2]
 800da42:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800da44:	887b      	ldrh	r3, [r7, #2]
 800da46:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800da4e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800da56:	7efb      	ldrb	r3, [r7, #27]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d014      	beq.n	800da86 <HAL_SPI_TransmitReceive+0x86>
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da62:	d106      	bne.n	800da72 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	689b      	ldr	r3, [r3, #8]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d102      	bne.n	800da72 <HAL_SPI_TransmitReceive+0x72>
 800da6c:	7efb      	ldrb	r3, [r7, #27]
 800da6e:	2b04      	cmp	r3, #4
 800da70:	d009      	beq.n	800da86 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800da72:	2302      	movs	r3, #2
 800da74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2200      	movs	r2, #0
 800da7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800da80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da84:	e2a4      	b.n	800dfd0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d005      	beq.n	800da98 <HAL_SPI_TransmitReceive+0x98>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d002      	beq.n	800da98 <HAL_SPI_TransmitReceive+0x98>
 800da92:	887b      	ldrh	r3, [r7, #2]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d109      	bne.n	800daac <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800da98:	2301      	movs	r3, #1
 800da9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800daa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800daaa:	e291      	b.n	800dfd0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	2b04      	cmp	r3, #4
 800dab6:	d003      	beq.n	800dac0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2205      	movs	r2, #5
 800dabc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2200      	movs	r2, #0
 800dac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	687a      	ldr	r2, [r7, #4]
 800dacc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	887a      	ldrh	r2, [r7, #2]
 800dad2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	887a      	ldrh	r2, [r7, #2]
 800dada:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	68ba      	ldr	r2, [r7, #8]
 800dae2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	887a      	ldrh	r2, [r7, #2]
 800dae8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	887a      	ldrh	r2, [r7, #2]
 800daf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2200      	movs	r2, #0
 800daf8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2200      	movs	r2, #0
 800dafe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	685a      	ldr	r2, [r3, #4]
 800db06:	4b9f      	ldr	r3, [pc, #636]	; (800dd84 <HAL_SPI_TransmitReceive+0x384>)
 800db08:	4013      	ands	r3, r2
 800db0a:	8879      	ldrh	r1, [r7, #2]
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	6812      	ldr	r2, [r2, #0]
 800db10:	430b      	orrs	r3, r1
 800db12:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f042 0201 	orr.w	r2, r2, #1
 800db22:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db2c:	d107      	bne.n	800db3e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	2b0f      	cmp	r3, #15
 800db44:	d970      	bls.n	800dc28 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800db46:	e068      	b.n	800dc1a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	695b      	ldr	r3, [r3, #20]
 800db4e:	f003 0302 	and.w	r3, r3, #2
 800db52:	2b02      	cmp	r3, #2
 800db54:	d11a      	bne.n	800db8c <HAL_SPI_TransmitReceive+0x18c>
 800db56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d017      	beq.n	800db8c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	6812      	ldr	r2, [r2, #0]
 800db66:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db6c:	1d1a      	adds	r2, r3, #4
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db78:	b29b      	uxth	r3, r3
 800db7a:	3b01      	subs	r3, #1
 800db7c:	b29a      	uxth	r2, r3
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	695a      	ldr	r2, [r3, #20]
 800db92:	f248 0308 	movw	r3, #32776	; 0x8008
 800db96:	4013      	ands	r3, r2
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d01a      	beq.n	800dbd2 <HAL_SPI_TransmitReceive+0x1d2>
 800db9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d017      	beq.n	800dbd2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681a      	ldr	r2, [r3, #0]
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbaa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dbac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbb2:	1d1a      	adds	r2, r3, #4
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbd0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dbd2:	f7f7 fb39 	bl	8005248 <HAL_GetTick>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	1ad3      	subs	r3, r2, r3
 800dbdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d803      	bhi.n	800dbea <HAL_SPI_TransmitReceive+0x1ea>
 800dbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbe8:	d102      	bne.n	800dbf0 <HAL_SPI_TransmitReceive+0x1f0>
 800dbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d114      	bne.n	800dc1a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	f000 f9f1 	bl	800dfd8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2201      	movs	r2, #1
 800dc12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800dc16:	2301      	movs	r3, #1
 800dc18:	e1da      	b.n	800dfd0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dc1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d193      	bne.n	800db48 <HAL_SPI_TransmitReceive+0x148>
 800dc20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d190      	bne.n	800db48 <HAL_SPI_TransmitReceive+0x148>
 800dc26:	e1ac      	b.n	800df82 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	68db      	ldr	r3, [r3, #12]
 800dc2c:	2b07      	cmp	r3, #7
 800dc2e:	f240 81a0 	bls.w	800df72 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dc32:	e0a9      	b.n	800dd88 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	695b      	ldr	r3, [r3, #20]
 800dc3a:	f003 0302 	and.w	r3, r3, #2
 800dc3e:	2b02      	cmp	r3, #2
 800dc40:	d139      	bne.n	800dcb6 <HAL_SPI_TransmitReceive+0x2b6>
 800dc42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d036      	beq.n	800dcb6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dc48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d91c      	bls.n	800dc88 <HAL_SPI_TransmitReceive+0x288>
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d018      	beq.n	800dc88 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	6812      	ldr	r2, [r2, #0]
 800dc60:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc66:	1d1a      	adds	r2, r3, #4
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	3b02      	subs	r3, #2
 800dc76:	b29a      	uxth	r2, r3
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc84:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dc86:	e016      	b.n	800dcb6 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc8c:	881a      	ldrh	r2, [r3, #0]
 800dc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc90:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc96:	1c9a      	adds	r2, r3, #2
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	3b01      	subs	r3, #1
 800dca6:	b29a      	uxth	r2, r3
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	695b      	ldr	r3, [r3, #20]
 800dcbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d03a      	beq.n	800dd3a <HAL_SPI_TransmitReceive+0x33a>
 800dcc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d037      	beq.n	800dd3a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	695b      	ldr	r3, [r3, #20]
 800dcd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d018      	beq.n	800dd0a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681a      	ldr	r2, [r3, #0]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dce0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dce2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dce8:	1d1a      	adds	r2, r3, #4
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	3b02      	subs	r3, #2
 800dcf8:	b29a      	uxth	r2, r3
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd06:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800dd08:	e017      	b.n	800dd3a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd0e:	6a3a      	ldr	r2, [r7, #32]
 800dd10:	8812      	ldrh	r2, [r2, #0]
 800dd12:	b292      	uxth	r2, r2
 800dd14:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd1a:	1c9a      	adds	r2, r3, #2
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	3b01      	subs	r3, #1
 800dd2a:	b29a      	uxth	r2, r3
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd38:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd3a:	f7f7 fa85 	bl	8005248 <HAL_GetTick>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	1ad3      	subs	r3, r2, r3
 800dd44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d803      	bhi.n	800dd52 <HAL_SPI_TransmitReceive+0x352>
 800dd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd50:	d102      	bne.n	800dd58 <HAL_SPI_TransmitReceive+0x358>
 800dd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d117      	bne.n	800dd88 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f000 f93d 	bl	800dfd8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2200      	movs	r2, #0
 800dd62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2201      	movs	r2, #1
 800dd7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e126      	b.n	800dfd0 <HAL_SPI_TransmitReceive+0x5d0>
 800dd82:	bf00      	nop
 800dd84:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dd88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	f47f af52 	bne.w	800dc34 <HAL_SPI_TransmitReceive+0x234>
 800dd90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	f47f af4e 	bne.w	800dc34 <HAL_SPI_TransmitReceive+0x234>
 800dd98:	e0f3      	b.n	800df82 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	695b      	ldr	r3, [r3, #20]
 800dda0:	f003 0302 	and.w	r3, r3, #2
 800dda4:	2b02      	cmp	r3, #2
 800dda6:	d15a      	bne.n	800de5e <HAL_SPI_TransmitReceive+0x45e>
 800dda8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d057      	beq.n	800de5e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ddae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ddb0:	2b03      	cmp	r3, #3
 800ddb2:	d91c      	bls.n	800ddee <HAL_SPI_TransmitReceive+0x3ee>
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddb8:	2b40      	cmp	r3, #64	; 0x40
 800ddba:	d918      	bls.n	800ddee <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	6812      	ldr	r2, [r2, #0]
 800ddc6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddcc:	1d1a      	adds	r2, r3, #4
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	3b04      	subs	r3, #4
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ddec:	e037      	b.n	800de5e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ddee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d91b      	bls.n	800de2c <HAL_SPI_TransmitReceive+0x42c>
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d017      	beq.n	800de2c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de00:	881a      	ldrh	r2, [r3, #0]
 800de02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de04:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de0a:	1c9a      	adds	r2, r3, #2
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de16:	b29b      	uxth	r3, r3
 800de18:	3b02      	subs	r3, #2
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de28:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800de2a:	e018      	b.n	800de5e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	3320      	adds	r3, #32
 800de36:	7812      	ldrb	r2, [r2, #0]
 800de38:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de3e:	1c5a      	adds	r2, r3, #1
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	3b01      	subs	r3, #1
 800de4e:	b29a      	uxth	r2, r3
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	695b      	ldr	r3, [r3, #20]
 800de64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d05e      	beq.n	800df2a <HAL_SPI_TransmitReceive+0x52a>
 800de6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d05b      	beq.n	800df2a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	695b      	ldr	r3, [r3, #20]
 800de78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d018      	beq.n	800deb2 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681a      	ldr	r2, [r3, #0]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800de8a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de90:	1d1a      	adds	r2, r3, #4
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	3b04      	subs	r3, #4
 800dea0:	b29a      	uxth	r2, r3
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800deae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800deb0:	e03b      	b.n	800df2a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	695b      	ldr	r3, [r3, #20]
 800deb8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800debc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dec0:	d918      	bls.n	800def4 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dec6:	6a3a      	ldr	r2, [r7, #32]
 800dec8:	8812      	ldrh	r2, [r2, #0]
 800deca:	b292      	uxth	r2, r2
 800decc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ded2:	1c9a      	adds	r2, r3, #2
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dede:	b29b      	uxth	r3, r3
 800dee0:	3b02      	subs	r3, #2
 800dee2:	b29a      	uxth	r2, r3
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800def0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800def2:	e01a      	b.n	800df2a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df00:	7812      	ldrb	r2, [r2, #0]
 800df02:	b2d2      	uxtb	r2, r2
 800df04:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df0a:	1c5a      	adds	r2, r3, #1
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df16:	b29b      	uxth	r3, r3
 800df18:	3b01      	subs	r3, #1
 800df1a:	b29a      	uxth	r2, r3
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df28:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df2a:	f7f7 f98d 	bl	8005248 <HAL_GetTick>
 800df2e:	4602      	mov	r2, r0
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	1ad3      	subs	r3, r2, r3
 800df34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df36:	429a      	cmp	r2, r3
 800df38:	d803      	bhi.n	800df42 <HAL_SPI_TransmitReceive+0x542>
 800df3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df40:	d102      	bne.n	800df48 <HAL_SPI_TransmitReceive+0x548>
 800df42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df44:	2b00      	cmp	r3, #0
 800df46:	d114      	bne.n	800df72 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f000 f845 	bl	800dfd8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2200      	movs	r2, #0
 800df52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2201      	movs	r2, #1
 800df6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800df6e:	2301      	movs	r3, #1
 800df70:	e02e      	b.n	800dfd0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800df72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800df74:	2b00      	cmp	r3, #0
 800df76:	f47f af10 	bne.w	800dd9a <HAL_SPI_TransmitReceive+0x39a>
 800df7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	f47f af0c 	bne.w	800dd9a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800df82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	2200      	movs	r2, #0
 800df8a:	2108      	movs	r1, #8
 800df8c:	68f8      	ldr	r0, [r7, #12]
 800df8e:	f000 f8c3 	bl	800e118 <SPI_WaitOnFlagUntilTimeout>
 800df92:	4603      	mov	r3, r0
 800df94:	2b00      	cmp	r3, #0
 800df96:	d007      	beq.n	800dfa8 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df9e:	f043 0220 	orr.w	r2, r3, #32
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f000 f815 	bl	800dfd8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2201      	movs	r2, #1
 800dfba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d001      	beq.n	800dfcc <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800dfc8:	2301      	movs	r3, #1
 800dfca:	e001      	b.n	800dfd0 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800dfcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3730      	adds	r7, #48	; 0x30
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b085      	sub	sp, #20
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	695b      	ldr	r3, [r3, #20]
 800dfe6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	699a      	ldr	r2, [r3, #24]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f042 0208 	orr.w	r2, r2, #8
 800dff6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	699a      	ldr	r2, [r3, #24]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f042 0210 	orr.w	r2, r2, #16
 800e006:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	681a      	ldr	r2, [r3, #0]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f022 0201 	bic.w	r2, r2, #1
 800e016:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	6919      	ldr	r1, [r3, #16]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	4b3c      	ldr	r3, [pc, #240]	; (800e114 <SPI_CloseTransfer+0x13c>)
 800e024:	400b      	ands	r3, r1
 800e026:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	689a      	ldr	r2, [r3, #8]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e036:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	2b04      	cmp	r3, #4
 800e042:	d014      	beq.n	800e06e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f003 0320 	and.w	r3, r3, #32
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d00f      	beq.n	800e06e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e054:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	699a      	ldr	r2, [r3, #24]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f042 0220 	orr.w	r2, r2, #32
 800e06c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e074:	b2db      	uxtb	r3, r3
 800e076:	2b03      	cmp	r3, #3
 800e078:	d014      	beq.n	800e0a4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00f      	beq.n	800e0a4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e08a:	f043 0204 	orr.w	r2, r3, #4
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	699a      	ldr	r2, [r3, #24]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e0a2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d00f      	beq.n	800e0ce <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0b4:	f043 0201 	orr.w	r2, r3, #1
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	699a      	ldr	r2, [r3, #24]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e0cc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d00f      	beq.n	800e0f8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0de:	f043 0208 	orr.w	r2, r3, #8
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	699a      	ldr	r2, [r3, #24]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e0f6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2200      	movs	r2, #0
 800e104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e108:	bf00      	nop
 800e10a:	3714      	adds	r7, #20
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr
 800e114:	fffffc90 	.word	0xfffffc90

0800e118 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	603b      	str	r3, [r7, #0]
 800e124:	4613      	mov	r3, r2
 800e126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e128:	e010      	b.n	800e14c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e12a:	f7f7 f88d 	bl	8005248 <HAL_GetTick>
 800e12e:	4602      	mov	r2, r0
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	1ad3      	subs	r3, r2, r3
 800e134:	69ba      	ldr	r2, [r7, #24]
 800e136:	429a      	cmp	r2, r3
 800e138:	d803      	bhi.n	800e142 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e13a:	69bb      	ldr	r3, [r7, #24]
 800e13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e140:	d102      	bne.n	800e148 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d101      	bne.n	800e14c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e148:	2303      	movs	r3, #3
 800e14a:	e00f      	b.n	800e16c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	695a      	ldr	r2, [r3, #20]
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	4013      	ands	r3, r2
 800e156:	68ba      	ldr	r2, [r7, #8]
 800e158:	429a      	cmp	r2, r3
 800e15a:	bf0c      	ite	eq
 800e15c:	2301      	moveq	r3, #1
 800e15e:	2300      	movne	r3, #0
 800e160:	b2db      	uxtb	r3, r3
 800e162:	461a      	mov	r2, r3
 800e164:	79fb      	ldrb	r3, [r7, #7]
 800e166:	429a      	cmp	r2, r3
 800e168:	d0df      	beq.n	800e12a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e16a:	2300      	movs	r3, #0
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3710      	adds	r7, #16
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e174:	b480      	push	{r7}
 800e176:	b085      	sub	sp, #20
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e180:	095b      	lsrs	r3, r3, #5
 800e182:	3301      	adds	r3, #1
 800e184:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	3301      	adds	r3, #1
 800e18c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	3307      	adds	r3, #7
 800e192:	08db      	lsrs	r3, r3, #3
 800e194:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	68fa      	ldr	r2, [r7, #12]
 800e19a:	fb02 f303 	mul.w	r3, r2, r3
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3714      	adds	r7, #20
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr

0800e1aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b082      	sub	sp, #8
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d101      	bne.n	800e1bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	e049      	b.n	800e250 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d106      	bne.n	800e1d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f7f5 fe1f 	bl	8003e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2202      	movs	r2, #2
 800e1da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	3304      	adds	r3, #4
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	4610      	mov	r0, r2
 800e1ea:	f000 fda1 	bl	800ed30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2201      	movs	r2, #1
 800e202:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2201      	movs	r2, #1
 800e20a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2201      	movs	r2, #1
 800e212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2201      	movs	r2, #1
 800e21a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2201      	movs	r2, #1
 800e222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2201      	movs	r2, #1
 800e22a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2201      	movs	r2, #1
 800e232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2201      	movs	r2, #1
 800e23a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2201      	movs	r2, #1
 800e242:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2201      	movs	r2, #1
 800e24a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e24e:	2300      	movs	r3, #0
}
 800e250:	4618      	mov	r0, r3
 800e252:	3708      	adds	r7, #8
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e258:	b480      	push	{r7}
 800e25a:	b085      	sub	sp, #20
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e266:	b2db      	uxtb	r3, r3
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d001      	beq.n	800e270 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	e04f      	b.n	800e310 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2202      	movs	r2, #2
 800e274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	68da      	ldr	r2, [r3, #12]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f042 0201 	orr.w	r2, r2, #1
 800e286:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4a23      	ldr	r2, [pc, #140]	; (800e31c <HAL_TIM_Base_Start_IT+0xc4>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d01d      	beq.n	800e2ce <HAL_TIM_Base_Start_IT+0x76>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e29a:	d018      	beq.n	800e2ce <HAL_TIM_Base_Start_IT+0x76>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a1f      	ldr	r2, [pc, #124]	; (800e320 <HAL_TIM_Base_Start_IT+0xc8>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d013      	beq.n	800e2ce <HAL_TIM_Base_Start_IT+0x76>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4a1e      	ldr	r2, [pc, #120]	; (800e324 <HAL_TIM_Base_Start_IT+0xcc>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d00e      	beq.n	800e2ce <HAL_TIM_Base_Start_IT+0x76>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4a1c      	ldr	r2, [pc, #112]	; (800e328 <HAL_TIM_Base_Start_IT+0xd0>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d009      	beq.n	800e2ce <HAL_TIM_Base_Start_IT+0x76>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4a1b      	ldr	r2, [pc, #108]	; (800e32c <HAL_TIM_Base_Start_IT+0xd4>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d004      	beq.n	800e2ce <HAL_TIM_Base_Start_IT+0x76>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4a19      	ldr	r2, [pc, #100]	; (800e330 <HAL_TIM_Base_Start_IT+0xd8>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d115      	bne.n	800e2fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	689a      	ldr	r2, [r3, #8]
 800e2d4:	4b17      	ldr	r3, [pc, #92]	; (800e334 <HAL_TIM_Base_Start_IT+0xdc>)
 800e2d6:	4013      	ands	r3, r2
 800e2d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2b06      	cmp	r3, #6
 800e2de:	d015      	beq.n	800e30c <HAL_TIM_Base_Start_IT+0xb4>
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2e6:	d011      	beq.n	800e30c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f042 0201 	orr.w	r2, r2, #1
 800e2f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2f8:	e008      	b.n	800e30c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f042 0201 	orr.w	r2, r2, #1
 800e308:	601a      	str	r2, [r3, #0]
 800e30a:	e000      	b.n	800e30e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e30c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e30e:	2300      	movs	r3, #0
}
 800e310:	4618      	mov	r0, r3
 800e312:	3714      	adds	r7, #20
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr
 800e31c:	40010000 	.word	0x40010000
 800e320:	40000400 	.word	0x40000400
 800e324:	40000800 	.word	0x40000800
 800e328:	40000c00 	.word	0x40000c00
 800e32c:	40010400 	.word	0x40010400
 800e330:	40001800 	.word	0x40001800
 800e334:	00010007 	.word	0x00010007

0800e338 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d101      	bne.n	800e34a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e346:	2301      	movs	r3, #1
 800e348:	e049      	b.n	800e3de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e350:	b2db      	uxtb	r3, r3
 800e352:	2b00      	cmp	r3, #0
 800e354:	d106      	bne.n	800e364 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2200      	movs	r2, #0
 800e35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 f841 	bl	800e3e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2202      	movs	r2, #2
 800e368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	3304      	adds	r3, #4
 800e374:	4619      	mov	r1, r3
 800e376:	4610      	mov	r0, r2
 800e378:	f000 fcda 	bl	800ed30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2201      	movs	r2, #1
 800e380:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2201      	movs	r2, #1
 800e388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2201      	movs	r2, #1
 800e390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2201      	movs	r2, #1
 800e398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2201      	movs	r2, #1
 800e3a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2201      	movs	r2, #1
 800e3c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e3dc:	2300      	movs	r3, #0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3708      	adds	r7, #8
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}

0800e3e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e3e6:	b480      	push	{r7}
 800e3e8:	b083      	sub	sp, #12
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e3ee:	bf00      	nop
 800e3f0:	370c      	adds	r7, #12
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f8:	4770      	bx	lr
	...

0800e3fc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d109      	bne.n	800e420 <HAL_TIM_PWM_Start_IT+0x24>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e412:	b2db      	uxtb	r3, r3
 800e414:	2b01      	cmp	r3, #1
 800e416:	bf14      	ite	ne
 800e418:	2301      	movne	r3, #1
 800e41a:	2300      	moveq	r3, #0
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	e03c      	b.n	800e49a <HAL_TIM_PWM_Start_IT+0x9e>
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	2b04      	cmp	r3, #4
 800e424:	d109      	bne.n	800e43a <HAL_TIM_PWM_Start_IT+0x3e>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	2b01      	cmp	r3, #1
 800e430:	bf14      	ite	ne
 800e432:	2301      	movne	r3, #1
 800e434:	2300      	moveq	r3, #0
 800e436:	b2db      	uxtb	r3, r3
 800e438:	e02f      	b.n	800e49a <HAL_TIM_PWM_Start_IT+0x9e>
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	2b08      	cmp	r3, #8
 800e43e:	d109      	bne.n	800e454 <HAL_TIM_PWM_Start_IT+0x58>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e446:	b2db      	uxtb	r3, r3
 800e448:	2b01      	cmp	r3, #1
 800e44a:	bf14      	ite	ne
 800e44c:	2301      	movne	r3, #1
 800e44e:	2300      	moveq	r3, #0
 800e450:	b2db      	uxtb	r3, r3
 800e452:	e022      	b.n	800e49a <HAL_TIM_PWM_Start_IT+0x9e>
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	2b0c      	cmp	r3, #12
 800e458:	d109      	bne.n	800e46e <HAL_TIM_PWM_Start_IT+0x72>
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e460:	b2db      	uxtb	r3, r3
 800e462:	2b01      	cmp	r3, #1
 800e464:	bf14      	ite	ne
 800e466:	2301      	movne	r3, #1
 800e468:	2300      	moveq	r3, #0
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	e015      	b.n	800e49a <HAL_TIM_PWM_Start_IT+0x9e>
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	2b10      	cmp	r3, #16
 800e472:	d109      	bne.n	800e488 <HAL_TIM_PWM_Start_IT+0x8c>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e47a:	b2db      	uxtb	r3, r3
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	bf14      	ite	ne
 800e480:	2301      	movne	r3, #1
 800e482:	2300      	moveq	r3, #0
 800e484:	b2db      	uxtb	r3, r3
 800e486:	e008      	b.n	800e49a <HAL_TIM_PWM_Start_IT+0x9e>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	2b01      	cmp	r3, #1
 800e492:	bf14      	ite	ne
 800e494:	2301      	movne	r3, #1
 800e496:	2300      	moveq	r3, #0
 800e498:	b2db      	uxtb	r3, r3
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d001      	beq.n	800e4a2 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	e0e2      	b.n	800e668 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d104      	bne.n	800e4b2 <HAL_TIM_PWM_Start_IT+0xb6>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2202      	movs	r2, #2
 800e4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e4b0:	e023      	b.n	800e4fa <HAL_TIM_PWM_Start_IT+0xfe>
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	2b04      	cmp	r3, #4
 800e4b6:	d104      	bne.n	800e4c2 <HAL_TIM_PWM_Start_IT+0xc6>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2202      	movs	r2, #2
 800e4bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e4c0:	e01b      	b.n	800e4fa <HAL_TIM_PWM_Start_IT+0xfe>
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b08      	cmp	r3, #8
 800e4c6:	d104      	bne.n	800e4d2 <HAL_TIM_PWM_Start_IT+0xd6>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2202      	movs	r2, #2
 800e4cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e4d0:	e013      	b.n	800e4fa <HAL_TIM_PWM_Start_IT+0xfe>
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	2b0c      	cmp	r3, #12
 800e4d6:	d104      	bne.n	800e4e2 <HAL_TIM_PWM_Start_IT+0xe6>
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2202      	movs	r2, #2
 800e4dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e4e0:	e00b      	b.n	800e4fa <HAL_TIM_PWM_Start_IT+0xfe>
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	2b10      	cmp	r3, #16
 800e4e6:	d104      	bne.n	800e4f2 <HAL_TIM_PWM_Start_IT+0xf6>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2202      	movs	r2, #2
 800e4ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e4f0:	e003      	b.n	800e4fa <HAL_TIM_PWM_Start_IT+0xfe>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2202      	movs	r2, #2
 800e4f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	2b0c      	cmp	r3, #12
 800e4fe:	d841      	bhi.n	800e584 <HAL_TIM_PWM_Start_IT+0x188>
 800e500:	a201      	add	r2, pc, #4	; (adr r2, 800e508 <HAL_TIM_PWM_Start_IT+0x10c>)
 800e502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e506:	bf00      	nop
 800e508:	0800e53d 	.word	0x0800e53d
 800e50c:	0800e585 	.word	0x0800e585
 800e510:	0800e585 	.word	0x0800e585
 800e514:	0800e585 	.word	0x0800e585
 800e518:	0800e54f 	.word	0x0800e54f
 800e51c:	0800e585 	.word	0x0800e585
 800e520:	0800e585 	.word	0x0800e585
 800e524:	0800e585 	.word	0x0800e585
 800e528:	0800e561 	.word	0x0800e561
 800e52c:	0800e585 	.word	0x0800e585
 800e530:	0800e585 	.word	0x0800e585
 800e534:	0800e585 	.word	0x0800e585
 800e538:	0800e573 	.word	0x0800e573
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	68da      	ldr	r2, [r3, #12]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f042 0202 	orr.w	r2, r2, #2
 800e54a:	60da      	str	r2, [r3, #12]
      break;
 800e54c:	e01b      	b.n	800e586 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	68da      	ldr	r2, [r3, #12]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f042 0204 	orr.w	r2, r2, #4
 800e55c:	60da      	str	r2, [r3, #12]
      break;
 800e55e:	e012      	b.n	800e586 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	68da      	ldr	r2, [r3, #12]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f042 0208 	orr.w	r2, r2, #8
 800e56e:	60da      	str	r2, [r3, #12]
      break;
 800e570:	e009      	b.n	800e586 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	68da      	ldr	r2, [r3, #12]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f042 0210 	orr.w	r2, r2, #16
 800e580:	60da      	str	r2, [r3, #12]
      break;
 800e582:	e000      	b.n	800e586 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 800e584:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	2201      	movs	r2, #1
 800e58c:	6839      	ldr	r1, [r7, #0]
 800e58e:	4618      	mov	r0, r3
 800e590:	f000 ffd4 	bl	800f53c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4a35      	ldr	r2, [pc, #212]	; (800e670 <HAL_TIM_PWM_Start_IT+0x274>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d013      	beq.n	800e5c6 <HAL_TIM_PWM_Start_IT+0x1ca>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	4a34      	ldr	r2, [pc, #208]	; (800e674 <HAL_TIM_PWM_Start_IT+0x278>)
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	d00e      	beq.n	800e5c6 <HAL_TIM_PWM_Start_IT+0x1ca>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a32      	ldr	r2, [pc, #200]	; (800e678 <HAL_TIM_PWM_Start_IT+0x27c>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d009      	beq.n	800e5c6 <HAL_TIM_PWM_Start_IT+0x1ca>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	4a31      	ldr	r2, [pc, #196]	; (800e67c <HAL_TIM_PWM_Start_IT+0x280>)
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	d004      	beq.n	800e5c6 <HAL_TIM_PWM_Start_IT+0x1ca>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a2f      	ldr	r2, [pc, #188]	; (800e680 <HAL_TIM_PWM_Start_IT+0x284>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d101      	bne.n	800e5ca <HAL_TIM_PWM_Start_IT+0x1ce>
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e000      	b.n	800e5cc <HAL_TIM_PWM_Start_IT+0x1d0>
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d007      	beq.n	800e5e0 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e5de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4a22      	ldr	r2, [pc, #136]	; (800e670 <HAL_TIM_PWM_Start_IT+0x274>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d01d      	beq.n	800e626 <HAL_TIM_PWM_Start_IT+0x22a>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5f2:	d018      	beq.n	800e626 <HAL_TIM_PWM_Start_IT+0x22a>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a22      	ldr	r2, [pc, #136]	; (800e684 <HAL_TIM_PWM_Start_IT+0x288>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d013      	beq.n	800e626 <HAL_TIM_PWM_Start_IT+0x22a>
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4a21      	ldr	r2, [pc, #132]	; (800e688 <HAL_TIM_PWM_Start_IT+0x28c>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d00e      	beq.n	800e626 <HAL_TIM_PWM_Start_IT+0x22a>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a1f      	ldr	r2, [pc, #124]	; (800e68c <HAL_TIM_PWM_Start_IT+0x290>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d009      	beq.n	800e626 <HAL_TIM_PWM_Start_IT+0x22a>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4a17      	ldr	r2, [pc, #92]	; (800e674 <HAL_TIM_PWM_Start_IT+0x278>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d004      	beq.n	800e626 <HAL_TIM_PWM_Start_IT+0x22a>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4a1b      	ldr	r2, [pc, #108]	; (800e690 <HAL_TIM_PWM_Start_IT+0x294>)
 800e622:	4293      	cmp	r3, r2
 800e624:	d115      	bne.n	800e652 <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	689a      	ldr	r2, [r3, #8]
 800e62c:	4b19      	ldr	r3, [pc, #100]	; (800e694 <HAL_TIM_PWM_Start_IT+0x298>)
 800e62e:	4013      	ands	r3, r2
 800e630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2b06      	cmp	r3, #6
 800e636:	d015      	beq.n	800e664 <HAL_TIM_PWM_Start_IT+0x268>
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e63e:	d011      	beq.n	800e664 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	681a      	ldr	r2, [r3, #0]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f042 0201 	orr.w	r2, r2, #1
 800e64e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e650:	e008      	b.n	800e664 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f042 0201 	orr.w	r2, r2, #1
 800e660:	601a      	str	r2, [r3, #0]
 800e662:	e000      	b.n	800e666 <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e664:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	40010000 	.word	0x40010000
 800e674:	40010400 	.word	0x40010400
 800e678:	40014000 	.word	0x40014000
 800e67c:	40014400 	.word	0x40014400
 800e680:	40014800 	.word	0x40014800
 800e684:	40000400 	.word	0x40000400
 800e688:	40000800 	.word	0x40000800
 800e68c:	40000c00 	.word	0x40000c00
 800e690:	40001800 	.word	0x40001800
 800e694:	00010007 	.word	0x00010007

0800e698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	691b      	ldr	r3, [r3, #16]
 800e6a6:	f003 0302 	and.w	r3, r3, #2
 800e6aa:	2b02      	cmp	r3, #2
 800e6ac:	d122      	bne.n	800e6f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	68db      	ldr	r3, [r3, #12]
 800e6b4:	f003 0302 	and.w	r3, r3, #2
 800e6b8:	2b02      	cmp	r3, #2
 800e6ba:	d11b      	bne.n	800e6f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f06f 0202 	mvn.w	r2, #2
 800e6c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	699b      	ldr	r3, [r3, #24]
 800e6d2:	f003 0303 	and.w	r3, r3, #3
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d003      	beq.n	800e6e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 fb0a 	bl	800ecf4 <HAL_TIM_IC_CaptureCallback>
 800e6e0:	e005      	b.n	800e6ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 fafc 	bl	800ece0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f000 fb0d 	bl	800ed08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	691b      	ldr	r3, [r3, #16]
 800e6fa:	f003 0304 	and.w	r3, r3, #4
 800e6fe:	2b04      	cmp	r3, #4
 800e700:	d122      	bne.n	800e748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	f003 0304 	and.w	r3, r3, #4
 800e70c:	2b04      	cmp	r3, #4
 800e70e:	d11b      	bne.n	800e748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f06f 0204 	mvn.w	r2, #4
 800e718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2202      	movs	r2, #2
 800e71e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	699b      	ldr	r3, [r3, #24]
 800e726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d003      	beq.n	800e736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f000 fae0 	bl	800ecf4 <HAL_TIM_IC_CaptureCallback>
 800e734:	e005      	b.n	800e742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f000 fad2 	bl	800ece0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 fae3 	bl	800ed08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2200      	movs	r2, #0
 800e746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	691b      	ldr	r3, [r3, #16]
 800e74e:	f003 0308 	and.w	r3, r3, #8
 800e752:	2b08      	cmp	r3, #8
 800e754:	d122      	bne.n	800e79c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	f003 0308 	and.w	r3, r3, #8
 800e760:	2b08      	cmp	r3, #8
 800e762:	d11b      	bne.n	800e79c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f06f 0208 	mvn.w	r2, #8
 800e76c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2204      	movs	r2, #4
 800e772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	69db      	ldr	r3, [r3, #28]
 800e77a:	f003 0303 	and.w	r3, r3, #3
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d003      	beq.n	800e78a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f000 fab6 	bl	800ecf4 <HAL_TIM_IC_CaptureCallback>
 800e788:	e005      	b.n	800e796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f000 faa8 	bl	800ece0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f000 fab9 	bl	800ed08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2200      	movs	r2, #0
 800e79a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	691b      	ldr	r3, [r3, #16]
 800e7a2:	f003 0310 	and.w	r3, r3, #16
 800e7a6:	2b10      	cmp	r3, #16
 800e7a8:	d122      	bne.n	800e7f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	f003 0310 	and.w	r3, r3, #16
 800e7b4:	2b10      	cmp	r3, #16
 800e7b6:	d11b      	bne.n	800e7f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f06f 0210 	mvn.w	r2, #16
 800e7c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2208      	movs	r2, #8
 800e7c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	69db      	ldr	r3, [r3, #28]
 800e7ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d003      	beq.n	800e7de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 fa8c 	bl	800ecf4 <HAL_TIM_IC_CaptureCallback>
 800e7dc:	e005      	b.n	800e7ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f000 fa7e 	bl	800ece0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f000 fa8f 	bl	800ed08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	691b      	ldr	r3, [r3, #16]
 800e7f6:	f003 0301 	and.w	r3, r3, #1
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	d10e      	bne.n	800e81c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	68db      	ldr	r3, [r3, #12]
 800e804:	f003 0301 	and.w	r3, r3, #1
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d107      	bne.n	800e81c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f06f 0201 	mvn.w	r2, #1
 800e814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f7f5 fd7c 	bl	8004314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	691b      	ldr	r3, [r3, #16]
 800e822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e826:	2b80      	cmp	r3, #128	; 0x80
 800e828:	d10e      	bne.n	800e848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	68db      	ldr	r3, [r3, #12]
 800e830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e834:	2b80      	cmp	r3, #128	; 0x80
 800e836:	d107      	bne.n	800e848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f000 ff32 	bl	800f6ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	691b      	ldr	r3, [r3, #16]
 800e84e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e856:	d10e      	bne.n	800e876 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e862:	2b80      	cmp	r3, #128	; 0x80
 800e864:	d107      	bne.n	800e876 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e86e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 ff25 	bl	800f6c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	691b      	ldr	r3, [r3, #16]
 800e87c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e880:	2b40      	cmp	r3, #64	; 0x40
 800e882:	d10e      	bne.n	800e8a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	68db      	ldr	r3, [r3, #12]
 800e88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e88e:	2b40      	cmp	r3, #64	; 0x40
 800e890:	d107      	bne.n	800e8a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e89a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f000 fa3d 	bl	800ed1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	691b      	ldr	r3, [r3, #16]
 800e8a8:	f003 0320 	and.w	r3, r3, #32
 800e8ac:	2b20      	cmp	r3, #32
 800e8ae:	d10e      	bne.n	800e8ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	68db      	ldr	r3, [r3, #12]
 800e8b6:	f003 0320 	and.w	r3, r3, #32
 800e8ba:	2b20      	cmp	r3, #32
 800e8bc:	d107      	bne.n	800e8ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f06f 0220 	mvn.w	r2, #32
 800e8c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f000 fee5 	bl	800f698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e8ce:	bf00      	nop
 800e8d0:	3708      	adds	r7, #8
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
	...

0800e8d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8ea:	2b01      	cmp	r3, #1
 800e8ec:	d101      	bne.n	800e8f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e8ee:	2302      	movs	r3, #2
 800e8f0:	e0fd      	b.n	800eaee <HAL_TIM_PWM_ConfigChannel+0x216>
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2b14      	cmp	r3, #20
 800e8fe:	f200 80f0 	bhi.w	800eae2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800e902:	a201      	add	r2, pc, #4	; (adr r2, 800e908 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800e904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e908:	0800e95d 	.word	0x0800e95d
 800e90c:	0800eae3 	.word	0x0800eae3
 800e910:	0800eae3 	.word	0x0800eae3
 800e914:	0800eae3 	.word	0x0800eae3
 800e918:	0800e99d 	.word	0x0800e99d
 800e91c:	0800eae3 	.word	0x0800eae3
 800e920:	0800eae3 	.word	0x0800eae3
 800e924:	0800eae3 	.word	0x0800eae3
 800e928:	0800e9df 	.word	0x0800e9df
 800e92c:	0800eae3 	.word	0x0800eae3
 800e930:	0800eae3 	.word	0x0800eae3
 800e934:	0800eae3 	.word	0x0800eae3
 800e938:	0800ea1f 	.word	0x0800ea1f
 800e93c:	0800eae3 	.word	0x0800eae3
 800e940:	0800eae3 	.word	0x0800eae3
 800e944:	0800eae3 	.word	0x0800eae3
 800e948:	0800ea61 	.word	0x0800ea61
 800e94c:	0800eae3 	.word	0x0800eae3
 800e950:	0800eae3 	.word	0x0800eae3
 800e954:	0800eae3 	.word	0x0800eae3
 800e958:	0800eaa1 	.word	0x0800eaa1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	68b9      	ldr	r1, [r7, #8]
 800e962:	4618      	mov	r0, r3
 800e964:	f000 fa7e 	bl	800ee64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	699a      	ldr	r2, [r3, #24]
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f042 0208 	orr.w	r2, r2, #8
 800e976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	699a      	ldr	r2, [r3, #24]
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f022 0204 	bic.w	r2, r2, #4
 800e986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	6999      	ldr	r1, [r3, #24]
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	691a      	ldr	r2, [r3, #16]
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	430a      	orrs	r2, r1
 800e998:	619a      	str	r2, [r3, #24]
      break;
 800e99a:	e0a3      	b.n	800eae4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	68b9      	ldr	r1, [r7, #8]
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f000 faee 	bl	800ef84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	699a      	ldr	r2, [r3, #24]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e9b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	699a      	ldr	r2, [r3, #24]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e9c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	6999      	ldr	r1, [r3, #24]
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	691b      	ldr	r3, [r3, #16]
 800e9d2:	021a      	lsls	r2, r3, #8
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	430a      	orrs	r2, r1
 800e9da:	619a      	str	r2, [r3, #24]
      break;
 800e9dc:	e082      	b.n	800eae4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	68b9      	ldr	r1, [r7, #8]
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f000 fb57 	bl	800f098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	69da      	ldr	r2, [r3, #28]
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f042 0208 	orr.w	r2, r2, #8
 800e9f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	69da      	ldr	r2, [r3, #28]
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f022 0204 	bic.w	r2, r2, #4
 800ea08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	69d9      	ldr	r1, [r3, #28]
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	691a      	ldr	r2, [r3, #16]
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	430a      	orrs	r2, r1
 800ea1a:	61da      	str	r2, [r3, #28]
      break;
 800ea1c:	e062      	b.n	800eae4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	68b9      	ldr	r1, [r7, #8]
 800ea24:	4618      	mov	r0, r3
 800ea26:	f000 fbbd 	bl	800f1a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	69da      	ldr	r2, [r3, #28]
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	69da      	ldr	r2, [r3, #28]
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	69d9      	ldr	r1, [r3, #28]
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	691b      	ldr	r3, [r3, #16]
 800ea54:	021a      	lsls	r2, r3, #8
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	430a      	orrs	r2, r1
 800ea5c:	61da      	str	r2, [r3, #28]
      break;
 800ea5e:	e041      	b.n	800eae4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	68b9      	ldr	r1, [r7, #8]
 800ea66:	4618      	mov	r0, r3
 800ea68:	f000 fc04 	bl	800f274 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f042 0208 	orr.w	r2, r2, #8
 800ea7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f022 0204 	bic.w	r2, r2, #4
 800ea8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	691a      	ldr	r2, [r3, #16]
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	430a      	orrs	r2, r1
 800ea9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ea9e:	e021      	b.n	800eae4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	68b9      	ldr	r1, [r7, #8]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f000 fc46 	bl	800f338 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eaba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eaca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	691b      	ldr	r3, [r3, #16]
 800ead6:	021a      	lsls	r2, r3, #8
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	430a      	orrs	r2, r1
 800eade:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800eae0:	e000      	b.n	800eae4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800eae2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2200      	movs	r2, #0
 800eae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eaec:	2300      	movs	r3, #0
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3710      	adds	r7, #16
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop

0800eaf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb08:	2b01      	cmp	r3, #1
 800eb0a:	d101      	bne.n	800eb10 <HAL_TIM_ConfigClockSource+0x18>
 800eb0c:	2302      	movs	r3, #2
 800eb0e:	e0db      	b.n	800ecc8 <HAL_TIM_ConfigClockSource+0x1d0>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2201      	movs	r2, #1
 800eb14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2202      	movs	r2, #2
 800eb1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	689b      	ldr	r3, [r3, #8]
 800eb26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	4b69      	ldr	r3, [pc, #420]	; (800ecd0 <HAL_TIM_ConfigClockSource+0x1d8>)
 800eb2c:	4013      	ands	r3, r2
 800eb2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800eb36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	68fa      	ldr	r2, [r7, #12]
 800eb3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	4a63      	ldr	r2, [pc, #396]	; (800ecd4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800eb46:	4293      	cmp	r3, r2
 800eb48:	f000 80a9 	beq.w	800ec9e <HAL_TIM_ConfigClockSource+0x1a6>
 800eb4c:	4a61      	ldr	r2, [pc, #388]	; (800ecd4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	f200 80ae 	bhi.w	800ecb0 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb54:	4a60      	ldr	r2, [pc, #384]	; (800ecd8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800eb56:	4293      	cmp	r3, r2
 800eb58:	f000 80a1 	beq.w	800ec9e <HAL_TIM_ConfigClockSource+0x1a6>
 800eb5c:	4a5e      	ldr	r2, [pc, #376]	; (800ecd8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	f200 80a6 	bhi.w	800ecb0 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb64:	4a5d      	ldr	r2, [pc, #372]	; (800ecdc <HAL_TIM_ConfigClockSource+0x1e4>)
 800eb66:	4293      	cmp	r3, r2
 800eb68:	f000 8099 	beq.w	800ec9e <HAL_TIM_ConfigClockSource+0x1a6>
 800eb6c:	4a5b      	ldr	r2, [pc, #364]	; (800ecdc <HAL_TIM_ConfigClockSource+0x1e4>)
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	f200 809e 	bhi.w	800ecb0 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800eb78:	f000 8091 	beq.w	800ec9e <HAL_TIM_ConfigClockSource+0x1a6>
 800eb7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800eb80:	f200 8096 	bhi.w	800ecb0 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb88:	f000 8089 	beq.w	800ec9e <HAL_TIM_ConfigClockSource+0x1a6>
 800eb8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb90:	f200 808e 	bhi.w	800ecb0 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb98:	d03e      	beq.n	800ec18 <HAL_TIM_ConfigClockSource+0x120>
 800eb9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb9e:	f200 8087 	bhi.w	800ecb0 <HAL_TIM_ConfigClockSource+0x1b8>
 800eba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eba6:	f000 8085 	beq.w	800ecb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebae:	d87f      	bhi.n	800ecb0 <HAL_TIM_ConfigClockSource+0x1b8>
 800ebb0:	2b70      	cmp	r3, #112	; 0x70
 800ebb2:	d01a      	beq.n	800ebea <HAL_TIM_ConfigClockSource+0xf2>
 800ebb4:	2b70      	cmp	r3, #112	; 0x70
 800ebb6:	d87b      	bhi.n	800ecb0 <HAL_TIM_ConfigClockSource+0x1b8>
 800ebb8:	2b60      	cmp	r3, #96	; 0x60
 800ebba:	d050      	beq.n	800ec5e <HAL_TIM_ConfigClockSource+0x166>
 800ebbc:	2b60      	cmp	r3, #96	; 0x60
 800ebbe:	d877      	bhi.n	800ecb0 <HAL_TIM_ConfigClockSource+0x1b8>
 800ebc0:	2b50      	cmp	r3, #80	; 0x50
 800ebc2:	d03c      	beq.n	800ec3e <HAL_TIM_ConfigClockSource+0x146>
 800ebc4:	2b50      	cmp	r3, #80	; 0x50
 800ebc6:	d873      	bhi.n	800ecb0 <HAL_TIM_ConfigClockSource+0x1b8>
 800ebc8:	2b40      	cmp	r3, #64	; 0x40
 800ebca:	d058      	beq.n	800ec7e <HAL_TIM_ConfigClockSource+0x186>
 800ebcc:	2b40      	cmp	r3, #64	; 0x40
 800ebce:	d86f      	bhi.n	800ecb0 <HAL_TIM_ConfigClockSource+0x1b8>
 800ebd0:	2b30      	cmp	r3, #48	; 0x30
 800ebd2:	d064      	beq.n	800ec9e <HAL_TIM_ConfigClockSource+0x1a6>
 800ebd4:	2b30      	cmp	r3, #48	; 0x30
 800ebd6:	d86b      	bhi.n	800ecb0 <HAL_TIM_ConfigClockSource+0x1b8>
 800ebd8:	2b20      	cmp	r3, #32
 800ebda:	d060      	beq.n	800ec9e <HAL_TIM_ConfigClockSource+0x1a6>
 800ebdc:	2b20      	cmp	r3, #32
 800ebde:	d867      	bhi.n	800ecb0 <HAL_TIM_ConfigClockSource+0x1b8>
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d05c      	beq.n	800ec9e <HAL_TIM_ConfigClockSource+0x1a6>
 800ebe4:	2b10      	cmp	r3, #16
 800ebe6:	d05a      	beq.n	800ec9e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ebe8:	e062      	b.n	800ecb0 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6818      	ldr	r0, [r3, #0]
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	6899      	ldr	r1, [r3, #8]
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	685a      	ldr	r2, [r3, #4]
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	68db      	ldr	r3, [r3, #12]
 800ebfa:	f000 fc7f 	bl	800f4fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ec0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	609a      	str	r2, [r3, #8]
      break;
 800ec16:	e04e      	b.n	800ecb6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6818      	ldr	r0, [r3, #0]
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	6899      	ldr	r1, [r3, #8]
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	685a      	ldr	r2, [r3, #4]
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	f000 fc68 	bl	800f4fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	689a      	ldr	r2, [r3, #8]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ec3a:	609a      	str	r2, [r3, #8]
      break;
 800ec3c:	e03b      	b.n	800ecb6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6818      	ldr	r0, [r3, #0]
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	6859      	ldr	r1, [r3, #4]
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	f000 fbd8 	bl	800f400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	2150      	movs	r1, #80	; 0x50
 800ec56:	4618      	mov	r0, r3
 800ec58:	f000 fc32 	bl	800f4c0 <TIM_ITRx_SetConfig>
      break;
 800ec5c:	e02b      	b.n	800ecb6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6818      	ldr	r0, [r3, #0]
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	6859      	ldr	r1, [r3, #4]
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	68db      	ldr	r3, [r3, #12]
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	f000 fbf7 	bl	800f45e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	2160      	movs	r1, #96	; 0x60
 800ec76:	4618      	mov	r0, r3
 800ec78:	f000 fc22 	bl	800f4c0 <TIM_ITRx_SetConfig>
      break;
 800ec7c:	e01b      	b.n	800ecb6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6818      	ldr	r0, [r3, #0]
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	6859      	ldr	r1, [r3, #4]
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	68db      	ldr	r3, [r3, #12]
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	f000 fbb8 	bl	800f400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	2140      	movs	r1, #64	; 0x40
 800ec96:	4618      	mov	r0, r3
 800ec98:	f000 fc12 	bl	800f4c0 <TIM_ITRx_SetConfig>
      break;
 800ec9c:	e00b      	b.n	800ecb6 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	4619      	mov	r1, r3
 800eca8:	4610      	mov	r0, r2
 800ecaa:	f000 fc09 	bl	800f4c0 <TIM_ITRx_SetConfig>
        break;
 800ecae:	e002      	b.n	800ecb6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800ecb0:	bf00      	nop
 800ecb2:	e000      	b.n	800ecb6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800ecb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2201      	movs	r2, #1
 800ecba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ecc6:	2300      	movs	r3, #0
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3710      	adds	r7, #16
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	ffceff88 	.word	0xffceff88
 800ecd4:	00100040 	.word	0x00100040
 800ecd8:	00100030 	.word	0x00100030
 800ecdc:	00100020 	.word	0x00100020

0800ece0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b083      	sub	sp, #12
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ece8:	bf00      	nop
 800ecea:	370c      	adds	r7, #12
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr

0800ecf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ecfc:	bf00      	nop
 800ecfe:	370c      	adds	r7, #12
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ed10:	bf00      	nop
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr

0800ed1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b083      	sub	sp, #12
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ed24:	bf00      	nop
 800ed26:	370c      	adds	r7, #12
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b085      	sub	sp, #20
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	4a40      	ldr	r2, [pc, #256]	; (800ee44 <TIM_Base_SetConfig+0x114>)
 800ed44:	4293      	cmp	r3, r2
 800ed46:	d013      	beq.n	800ed70 <TIM_Base_SetConfig+0x40>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed4e:	d00f      	beq.n	800ed70 <TIM_Base_SetConfig+0x40>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	4a3d      	ldr	r2, [pc, #244]	; (800ee48 <TIM_Base_SetConfig+0x118>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d00b      	beq.n	800ed70 <TIM_Base_SetConfig+0x40>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	4a3c      	ldr	r2, [pc, #240]	; (800ee4c <TIM_Base_SetConfig+0x11c>)
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d007      	beq.n	800ed70 <TIM_Base_SetConfig+0x40>
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	4a3b      	ldr	r2, [pc, #236]	; (800ee50 <TIM_Base_SetConfig+0x120>)
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d003      	beq.n	800ed70 <TIM_Base_SetConfig+0x40>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	4a3a      	ldr	r2, [pc, #232]	; (800ee54 <TIM_Base_SetConfig+0x124>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d108      	bne.n	800ed82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	685b      	ldr	r3, [r3, #4]
 800ed7c:	68fa      	ldr	r2, [r7, #12]
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	4a2f      	ldr	r2, [pc, #188]	; (800ee44 <TIM_Base_SetConfig+0x114>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d01f      	beq.n	800edca <TIM_Base_SetConfig+0x9a>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed90:	d01b      	beq.n	800edca <TIM_Base_SetConfig+0x9a>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4a2c      	ldr	r2, [pc, #176]	; (800ee48 <TIM_Base_SetConfig+0x118>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d017      	beq.n	800edca <TIM_Base_SetConfig+0x9a>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	4a2b      	ldr	r2, [pc, #172]	; (800ee4c <TIM_Base_SetConfig+0x11c>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d013      	beq.n	800edca <TIM_Base_SetConfig+0x9a>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4a2a      	ldr	r2, [pc, #168]	; (800ee50 <TIM_Base_SetConfig+0x120>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d00f      	beq.n	800edca <TIM_Base_SetConfig+0x9a>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	4a29      	ldr	r2, [pc, #164]	; (800ee54 <TIM_Base_SetConfig+0x124>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d00b      	beq.n	800edca <TIM_Base_SetConfig+0x9a>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	4a28      	ldr	r2, [pc, #160]	; (800ee58 <TIM_Base_SetConfig+0x128>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d007      	beq.n	800edca <TIM_Base_SetConfig+0x9a>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	4a27      	ldr	r2, [pc, #156]	; (800ee5c <TIM_Base_SetConfig+0x12c>)
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d003      	beq.n	800edca <TIM_Base_SetConfig+0x9a>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	4a26      	ldr	r2, [pc, #152]	; (800ee60 <TIM_Base_SetConfig+0x130>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d108      	bne.n	800eddc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800edd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	68fa      	ldr	r2, [r7, #12]
 800edd8:	4313      	orrs	r3, r2
 800edda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	695b      	ldr	r3, [r3, #20]
 800ede6:	4313      	orrs	r3, r2
 800ede8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	689a      	ldr	r2, [r3, #8]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	4a10      	ldr	r2, [pc, #64]	; (800ee44 <TIM_Base_SetConfig+0x114>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d00f      	beq.n	800ee28 <TIM_Base_SetConfig+0xf8>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	4a12      	ldr	r2, [pc, #72]	; (800ee54 <TIM_Base_SetConfig+0x124>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d00b      	beq.n	800ee28 <TIM_Base_SetConfig+0xf8>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	4a11      	ldr	r2, [pc, #68]	; (800ee58 <TIM_Base_SetConfig+0x128>)
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d007      	beq.n	800ee28 <TIM_Base_SetConfig+0xf8>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	4a10      	ldr	r2, [pc, #64]	; (800ee5c <TIM_Base_SetConfig+0x12c>)
 800ee1c:	4293      	cmp	r3, r2
 800ee1e:	d003      	beq.n	800ee28 <TIM_Base_SetConfig+0xf8>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	4a0f      	ldr	r2, [pc, #60]	; (800ee60 <TIM_Base_SetConfig+0x130>)
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d103      	bne.n	800ee30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	691a      	ldr	r2, [r3, #16]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2201      	movs	r2, #1
 800ee34:	615a      	str	r2, [r3, #20]
}
 800ee36:	bf00      	nop
 800ee38:	3714      	adds	r7, #20
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee40:	4770      	bx	lr
 800ee42:	bf00      	nop
 800ee44:	40010000 	.word	0x40010000
 800ee48:	40000400 	.word	0x40000400
 800ee4c:	40000800 	.word	0x40000800
 800ee50:	40000c00 	.word	0x40000c00
 800ee54:	40010400 	.word	0x40010400
 800ee58:	40014000 	.word	0x40014000
 800ee5c:	40014400 	.word	0x40014400
 800ee60:	40014800 	.word	0x40014800

0800ee64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b087      	sub	sp, #28
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6a1b      	ldr	r3, [r3, #32]
 800ee72:	f023 0201 	bic.w	r2, r3, #1
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6a1b      	ldr	r3, [r3, #32]
 800ee7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	699b      	ldr	r3, [r3, #24]
 800ee8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ee8c:	68fa      	ldr	r2, [r7, #12]
 800ee8e:	4b37      	ldr	r3, [pc, #220]	; (800ef6c <TIM_OC1_SetConfig+0x108>)
 800ee90:	4013      	ands	r3, r2
 800ee92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f023 0303 	bic.w	r3, r3, #3
 800ee9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	68fa      	ldr	r2, [r7, #12]
 800eea2:	4313      	orrs	r3, r2
 800eea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	f023 0302 	bic.w	r3, r3, #2
 800eeac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	689b      	ldr	r3, [r3, #8]
 800eeb2:	697a      	ldr	r2, [r7, #20]
 800eeb4:	4313      	orrs	r3, r2
 800eeb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	4a2d      	ldr	r2, [pc, #180]	; (800ef70 <TIM_OC1_SetConfig+0x10c>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d00f      	beq.n	800eee0 <TIM_OC1_SetConfig+0x7c>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	4a2c      	ldr	r2, [pc, #176]	; (800ef74 <TIM_OC1_SetConfig+0x110>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d00b      	beq.n	800eee0 <TIM_OC1_SetConfig+0x7c>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4a2b      	ldr	r2, [pc, #172]	; (800ef78 <TIM_OC1_SetConfig+0x114>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d007      	beq.n	800eee0 <TIM_OC1_SetConfig+0x7c>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4a2a      	ldr	r2, [pc, #168]	; (800ef7c <TIM_OC1_SetConfig+0x118>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d003      	beq.n	800eee0 <TIM_OC1_SetConfig+0x7c>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	4a29      	ldr	r2, [pc, #164]	; (800ef80 <TIM_OC1_SetConfig+0x11c>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d10c      	bne.n	800eefa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	f023 0308 	bic.w	r3, r3, #8
 800eee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	697a      	ldr	r2, [r7, #20]
 800eeee:	4313      	orrs	r3, r2
 800eef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	f023 0304 	bic.w	r3, r3, #4
 800eef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4a1c      	ldr	r2, [pc, #112]	; (800ef70 <TIM_OC1_SetConfig+0x10c>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d00f      	beq.n	800ef22 <TIM_OC1_SetConfig+0xbe>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	4a1b      	ldr	r2, [pc, #108]	; (800ef74 <TIM_OC1_SetConfig+0x110>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d00b      	beq.n	800ef22 <TIM_OC1_SetConfig+0xbe>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	4a1a      	ldr	r2, [pc, #104]	; (800ef78 <TIM_OC1_SetConfig+0x114>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d007      	beq.n	800ef22 <TIM_OC1_SetConfig+0xbe>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	4a19      	ldr	r2, [pc, #100]	; (800ef7c <TIM_OC1_SetConfig+0x118>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d003      	beq.n	800ef22 <TIM_OC1_SetConfig+0xbe>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	4a18      	ldr	r2, [pc, #96]	; (800ef80 <TIM_OC1_SetConfig+0x11c>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d111      	bne.n	800ef46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ef30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	695b      	ldr	r3, [r3, #20]
 800ef36:	693a      	ldr	r2, [r7, #16]
 800ef38:	4313      	orrs	r3, r2
 800ef3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	699b      	ldr	r3, [r3, #24]
 800ef40:	693a      	ldr	r2, [r7, #16]
 800ef42:	4313      	orrs	r3, r2
 800ef44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	693a      	ldr	r2, [r7, #16]
 800ef4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	68fa      	ldr	r2, [r7, #12]
 800ef50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	685a      	ldr	r2, [r3, #4]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	697a      	ldr	r2, [r7, #20]
 800ef5e:	621a      	str	r2, [r3, #32]
}
 800ef60:	bf00      	nop
 800ef62:	371c      	adds	r7, #28
 800ef64:	46bd      	mov	sp, r7
 800ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6a:	4770      	bx	lr
 800ef6c:	fffeff8f 	.word	0xfffeff8f
 800ef70:	40010000 	.word	0x40010000
 800ef74:	40010400 	.word	0x40010400
 800ef78:	40014000 	.word	0x40014000
 800ef7c:	40014400 	.word	0x40014400
 800ef80:	40014800 	.word	0x40014800

0800ef84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b087      	sub	sp, #28
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6a1b      	ldr	r3, [r3, #32]
 800ef92:	f023 0210 	bic.w	r2, r3, #16
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6a1b      	ldr	r3, [r3, #32]
 800ef9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	699b      	ldr	r3, [r3, #24]
 800efaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800efac:	68fa      	ldr	r2, [r7, #12]
 800efae:	4b34      	ldr	r3, [pc, #208]	; (800f080 <TIM_OC2_SetConfig+0xfc>)
 800efb0:	4013      	ands	r3, r2
 800efb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800efba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	021b      	lsls	r3, r3, #8
 800efc2:	68fa      	ldr	r2, [r7, #12]
 800efc4:	4313      	orrs	r3, r2
 800efc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	f023 0320 	bic.w	r3, r3, #32
 800efce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	689b      	ldr	r3, [r3, #8]
 800efd4:	011b      	lsls	r3, r3, #4
 800efd6:	697a      	ldr	r2, [r7, #20]
 800efd8:	4313      	orrs	r3, r2
 800efda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	4a29      	ldr	r2, [pc, #164]	; (800f084 <TIM_OC2_SetConfig+0x100>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d003      	beq.n	800efec <TIM_OC2_SetConfig+0x68>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	4a28      	ldr	r2, [pc, #160]	; (800f088 <TIM_OC2_SetConfig+0x104>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d10d      	bne.n	800f008 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	68db      	ldr	r3, [r3, #12]
 800eff8:	011b      	lsls	r3, r3, #4
 800effa:	697a      	ldr	r2, [r7, #20]
 800effc:	4313      	orrs	r3, r2
 800effe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f006:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	4a1e      	ldr	r2, [pc, #120]	; (800f084 <TIM_OC2_SetConfig+0x100>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d00f      	beq.n	800f030 <TIM_OC2_SetConfig+0xac>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	4a1d      	ldr	r2, [pc, #116]	; (800f088 <TIM_OC2_SetConfig+0x104>)
 800f014:	4293      	cmp	r3, r2
 800f016:	d00b      	beq.n	800f030 <TIM_OC2_SetConfig+0xac>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	4a1c      	ldr	r2, [pc, #112]	; (800f08c <TIM_OC2_SetConfig+0x108>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d007      	beq.n	800f030 <TIM_OC2_SetConfig+0xac>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	4a1b      	ldr	r2, [pc, #108]	; (800f090 <TIM_OC2_SetConfig+0x10c>)
 800f024:	4293      	cmp	r3, r2
 800f026:	d003      	beq.n	800f030 <TIM_OC2_SetConfig+0xac>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	4a1a      	ldr	r2, [pc, #104]	; (800f094 <TIM_OC2_SetConfig+0x110>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d113      	bne.n	800f058 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f03e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	695b      	ldr	r3, [r3, #20]
 800f044:	009b      	lsls	r3, r3, #2
 800f046:	693a      	ldr	r2, [r7, #16]
 800f048:	4313      	orrs	r3, r2
 800f04a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	699b      	ldr	r3, [r3, #24]
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	693a      	ldr	r2, [r7, #16]
 800f054:	4313      	orrs	r3, r2
 800f056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	693a      	ldr	r2, [r7, #16]
 800f05c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	685a      	ldr	r2, [r3, #4]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	697a      	ldr	r2, [r7, #20]
 800f070:	621a      	str	r2, [r3, #32]
}
 800f072:	bf00      	nop
 800f074:	371c      	adds	r7, #28
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr
 800f07e:	bf00      	nop
 800f080:	feff8fff 	.word	0xfeff8fff
 800f084:	40010000 	.word	0x40010000
 800f088:	40010400 	.word	0x40010400
 800f08c:	40014000 	.word	0x40014000
 800f090:	40014400 	.word	0x40014400
 800f094:	40014800 	.word	0x40014800

0800f098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f098:	b480      	push	{r7}
 800f09a:	b087      	sub	sp, #28
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6a1b      	ldr	r3, [r3, #32]
 800f0a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6a1b      	ldr	r3, [r3, #32]
 800f0b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	69db      	ldr	r3, [r3, #28]
 800f0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f023 0303 	bic.w	r3, r3, #3
 800f0ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f0e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	689b      	ldr	r3, [r3, #8]
 800f0e6:	021b      	lsls	r3, r3, #8
 800f0e8:	697a      	ldr	r2, [r7, #20]
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	4a27      	ldr	r2, [pc, #156]	; (800f190 <TIM_OC3_SetConfig+0xf8>)
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	d003      	beq.n	800f0fe <TIM_OC3_SetConfig+0x66>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	4a26      	ldr	r2, [pc, #152]	; (800f194 <TIM_OC3_SetConfig+0xfc>)
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	d10d      	bne.n	800f11a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	021b      	lsls	r3, r3, #8
 800f10c:	697a      	ldr	r2, [r7, #20]
 800f10e:	4313      	orrs	r3, r2
 800f110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	4a1c      	ldr	r2, [pc, #112]	; (800f190 <TIM_OC3_SetConfig+0xf8>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d00f      	beq.n	800f142 <TIM_OC3_SetConfig+0xaa>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	4a1b      	ldr	r2, [pc, #108]	; (800f194 <TIM_OC3_SetConfig+0xfc>)
 800f126:	4293      	cmp	r3, r2
 800f128:	d00b      	beq.n	800f142 <TIM_OC3_SetConfig+0xaa>
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	4a1a      	ldr	r2, [pc, #104]	; (800f198 <TIM_OC3_SetConfig+0x100>)
 800f12e:	4293      	cmp	r3, r2
 800f130:	d007      	beq.n	800f142 <TIM_OC3_SetConfig+0xaa>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4a19      	ldr	r2, [pc, #100]	; (800f19c <TIM_OC3_SetConfig+0x104>)
 800f136:	4293      	cmp	r3, r2
 800f138:	d003      	beq.n	800f142 <TIM_OC3_SetConfig+0xaa>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4a18      	ldr	r2, [pc, #96]	; (800f1a0 <TIM_OC3_SetConfig+0x108>)
 800f13e:	4293      	cmp	r3, r2
 800f140:	d113      	bne.n	800f16a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	695b      	ldr	r3, [r3, #20]
 800f156:	011b      	lsls	r3, r3, #4
 800f158:	693a      	ldr	r2, [r7, #16]
 800f15a:	4313      	orrs	r3, r2
 800f15c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	699b      	ldr	r3, [r3, #24]
 800f162:	011b      	lsls	r3, r3, #4
 800f164:	693a      	ldr	r2, [r7, #16]
 800f166:	4313      	orrs	r3, r2
 800f168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	693a      	ldr	r2, [r7, #16]
 800f16e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	68fa      	ldr	r2, [r7, #12]
 800f174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	685a      	ldr	r2, [r3, #4]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	697a      	ldr	r2, [r7, #20]
 800f182:	621a      	str	r2, [r3, #32]
}
 800f184:	bf00      	nop
 800f186:	371c      	adds	r7, #28
 800f188:	46bd      	mov	sp, r7
 800f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18e:	4770      	bx	lr
 800f190:	40010000 	.word	0x40010000
 800f194:	40010400 	.word	0x40010400
 800f198:	40014000 	.word	0x40014000
 800f19c:	40014400 	.word	0x40014400
 800f1a0:	40014800 	.word	0x40014800

0800f1a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b087      	sub	sp, #28
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6a1b      	ldr	r3, [r3, #32]
 800f1b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6a1b      	ldr	r3, [r3, #32]
 800f1be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	69db      	ldr	r3, [r3, #28]
 800f1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f1da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	021b      	lsls	r3, r3, #8
 800f1e2:	68fa      	ldr	r2, [r7, #12]
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f1ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	689b      	ldr	r3, [r3, #8]
 800f1f4:	031b      	lsls	r3, r3, #12
 800f1f6:	693a      	ldr	r2, [r7, #16]
 800f1f8:	4313      	orrs	r3, r2
 800f1fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	4a18      	ldr	r2, [pc, #96]	; (800f260 <TIM_OC4_SetConfig+0xbc>)
 800f200:	4293      	cmp	r3, r2
 800f202:	d00f      	beq.n	800f224 <TIM_OC4_SetConfig+0x80>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	4a17      	ldr	r2, [pc, #92]	; (800f264 <TIM_OC4_SetConfig+0xc0>)
 800f208:	4293      	cmp	r3, r2
 800f20a:	d00b      	beq.n	800f224 <TIM_OC4_SetConfig+0x80>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	4a16      	ldr	r2, [pc, #88]	; (800f268 <TIM_OC4_SetConfig+0xc4>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d007      	beq.n	800f224 <TIM_OC4_SetConfig+0x80>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	4a15      	ldr	r2, [pc, #84]	; (800f26c <TIM_OC4_SetConfig+0xc8>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d003      	beq.n	800f224 <TIM_OC4_SetConfig+0x80>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	4a14      	ldr	r2, [pc, #80]	; (800f270 <TIM_OC4_SetConfig+0xcc>)
 800f220:	4293      	cmp	r3, r2
 800f222:	d109      	bne.n	800f238 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f22a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	695b      	ldr	r3, [r3, #20]
 800f230:	019b      	lsls	r3, r3, #6
 800f232:	697a      	ldr	r2, [r7, #20]
 800f234:	4313      	orrs	r3, r2
 800f236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	697a      	ldr	r2, [r7, #20]
 800f23c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	68fa      	ldr	r2, [r7, #12]
 800f242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	685a      	ldr	r2, [r3, #4]
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	693a      	ldr	r2, [r7, #16]
 800f250:	621a      	str	r2, [r3, #32]
}
 800f252:	bf00      	nop
 800f254:	371c      	adds	r7, #28
 800f256:	46bd      	mov	sp, r7
 800f258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25c:	4770      	bx	lr
 800f25e:	bf00      	nop
 800f260:	40010000 	.word	0x40010000
 800f264:	40010400 	.word	0x40010400
 800f268:	40014000 	.word	0x40014000
 800f26c:	40014400 	.word	0x40014400
 800f270:	40014800 	.word	0x40014800

0800f274 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f274:	b480      	push	{r7}
 800f276:	b087      	sub	sp, #28
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6a1b      	ldr	r3, [r3, #32]
 800f282:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6a1b      	ldr	r3, [r3, #32]
 800f28e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	68fa      	ldr	r2, [r7, #12]
 800f2aa:	4313      	orrs	r3, r2
 800f2ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f2b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	041b      	lsls	r3, r3, #16
 800f2bc:	693a      	ldr	r2, [r7, #16]
 800f2be:	4313      	orrs	r3, r2
 800f2c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	4a17      	ldr	r2, [pc, #92]	; (800f324 <TIM_OC5_SetConfig+0xb0>)
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	d00f      	beq.n	800f2ea <TIM_OC5_SetConfig+0x76>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	4a16      	ldr	r2, [pc, #88]	; (800f328 <TIM_OC5_SetConfig+0xb4>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d00b      	beq.n	800f2ea <TIM_OC5_SetConfig+0x76>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	4a15      	ldr	r2, [pc, #84]	; (800f32c <TIM_OC5_SetConfig+0xb8>)
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	d007      	beq.n	800f2ea <TIM_OC5_SetConfig+0x76>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4a14      	ldr	r2, [pc, #80]	; (800f330 <TIM_OC5_SetConfig+0xbc>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d003      	beq.n	800f2ea <TIM_OC5_SetConfig+0x76>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4a13      	ldr	r2, [pc, #76]	; (800f334 <TIM_OC5_SetConfig+0xc0>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d109      	bne.n	800f2fe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f2f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	695b      	ldr	r3, [r3, #20]
 800f2f6:	021b      	lsls	r3, r3, #8
 800f2f8:	697a      	ldr	r2, [r7, #20]
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	697a      	ldr	r2, [r7, #20]
 800f302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	68fa      	ldr	r2, [r7, #12]
 800f308:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	685a      	ldr	r2, [r3, #4]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	693a      	ldr	r2, [r7, #16]
 800f316:	621a      	str	r2, [r3, #32]
}
 800f318:	bf00      	nop
 800f31a:	371c      	adds	r7, #28
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr
 800f324:	40010000 	.word	0x40010000
 800f328:	40010400 	.word	0x40010400
 800f32c:	40014000 	.word	0x40014000
 800f330:	40014400 	.word	0x40014400
 800f334:	40014800 	.word	0x40014800

0800f338 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f338:	b480      	push	{r7}
 800f33a:	b087      	sub	sp, #28
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6a1b      	ldr	r3, [r3, #32]
 800f346:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6a1b      	ldr	r3, [r3, #32]
 800f352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	021b      	lsls	r3, r3, #8
 800f36e:	68fa      	ldr	r2, [r7, #12]
 800f370:	4313      	orrs	r3, r2
 800f372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f37a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	689b      	ldr	r3, [r3, #8]
 800f380:	051b      	lsls	r3, r3, #20
 800f382:	693a      	ldr	r2, [r7, #16]
 800f384:	4313      	orrs	r3, r2
 800f386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	4a18      	ldr	r2, [pc, #96]	; (800f3ec <TIM_OC6_SetConfig+0xb4>)
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d00f      	beq.n	800f3b0 <TIM_OC6_SetConfig+0x78>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	4a17      	ldr	r2, [pc, #92]	; (800f3f0 <TIM_OC6_SetConfig+0xb8>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d00b      	beq.n	800f3b0 <TIM_OC6_SetConfig+0x78>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	4a16      	ldr	r2, [pc, #88]	; (800f3f4 <TIM_OC6_SetConfig+0xbc>)
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d007      	beq.n	800f3b0 <TIM_OC6_SetConfig+0x78>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	4a15      	ldr	r2, [pc, #84]	; (800f3f8 <TIM_OC6_SetConfig+0xc0>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d003      	beq.n	800f3b0 <TIM_OC6_SetConfig+0x78>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	4a14      	ldr	r2, [pc, #80]	; (800f3fc <TIM_OC6_SetConfig+0xc4>)
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	d109      	bne.n	800f3c4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f3b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	695b      	ldr	r3, [r3, #20]
 800f3bc:	029b      	lsls	r3, r3, #10
 800f3be:	697a      	ldr	r2, [r7, #20]
 800f3c0:	4313      	orrs	r3, r2
 800f3c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	697a      	ldr	r2, [r7, #20]
 800f3c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	68fa      	ldr	r2, [r7, #12]
 800f3ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	685a      	ldr	r2, [r3, #4]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	693a      	ldr	r2, [r7, #16]
 800f3dc:	621a      	str	r2, [r3, #32]
}
 800f3de:	bf00      	nop
 800f3e0:	371c      	adds	r7, #28
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e8:	4770      	bx	lr
 800f3ea:	bf00      	nop
 800f3ec:	40010000 	.word	0x40010000
 800f3f0:	40010400 	.word	0x40010400
 800f3f4:	40014000 	.word	0x40014000
 800f3f8:	40014400 	.word	0x40014400
 800f3fc:	40014800 	.word	0x40014800

0800f400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f400:	b480      	push	{r7}
 800f402:	b087      	sub	sp, #28
 800f404:	af00      	add	r7, sp, #0
 800f406:	60f8      	str	r0, [r7, #12]
 800f408:	60b9      	str	r1, [r7, #8]
 800f40a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	6a1b      	ldr	r3, [r3, #32]
 800f410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	6a1b      	ldr	r3, [r3, #32]
 800f416:	f023 0201 	bic.w	r2, r3, #1
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	699b      	ldr	r3, [r3, #24]
 800f422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f42a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	011b      	lsls	r3, r3, #4
 800f430:	693a      	ldr	r2, [r7, #16]
 800f432:	4313      	orrs	r3, r2
 800f434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	f023 030a 	bic.w	r3, r3, #10
 800f43c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f43e:	697a      	ldr	r2, [r7, #20]
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	4313      	orrs	r3, r2
 800f444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	693a      	ldr	r2, [r7, #16]
 800f44a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	697a      	ldr	r2, [r7, #20]
 800f450:	621a      	str	r2, [r3, #32]
}
 800f452:	bf00      	nop
 800f454:	371c      	adds	r7, #28
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr

0800f45e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f45e:	b480      	push	{r7}
 800f460:	b087      	sub	sp, #28
 800f462:	af00      	add	r7, sp, #0
 800f464:	60f8      	str	r0, [r7, #12]
 800f466:	60b9      	str	r1, [r7, #8]
 800f468:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	6a1b      	ldr	r3, [r3, #32]
 800f46e:	f023 0210 	bic.w	r2, r3, #16
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	699b      	ldr	r3, [r3, #24]
 800f47a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6a1b      	ldr	r3, [r3, #32]
 800f480:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f488:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	031b      	lsls	r3, r3, #12
 800f48e:	697a      	ldr	r2, [r7, #20]
 800f490:	4313      	orrs	r3, r2
 800f492:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f49a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	011b      	lsls	r3, r3, #4
 800f4a0:	693a      	ldr	r2, [r7, #16]
 800f4a2:	4313      	orrs	r3, r2
 800f4a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	697a      	ldr	r2, [r7, #20]
 800f4aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	693a      	ldr	r2, [r7, #16]
 800f4b0:	621a      	str	r2, [r3, #32]
}
 800f4b2:	bf00      	nop
 800f4b4:	371c      	adds	r7, #28
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4bc:	4770      	bx	lr
	...

0800f4c0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b085      	sub	sp, #20
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	689b      	ldr	r3, [r3, #8]
 800f4ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	4b09      	ldr	r3, [pc, #36]	; (800f4f8 <TIM_ITRx_SetConfig+0x38>)
 800f4d4:	4013      	ands	r3, r2
 800f4d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f4d8:	683a      	ldr	r2, [r7, #0]
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	4313      	orrs	r3, r2
 800f4de:	f043 0307 	orr.w	r3, r3, #7
 800f4e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	68fa      	ldr	r2, [r7, #12]
 800f4e8:	609a      	str	r2, [r3, #8]
}
 800f4ea:	bf00      	nop
 800f4ec:	3714      	adds	r7, #20
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr
 800f4f6:	bf00      	nop
 800f4f8:	ffcfff8f 	.word	0xffcfff8f

0800f4fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b087      	sub	sp, #28
 800f500:	af00      	add	r7, sp, #0
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	60b9      	str	r1, [r7, #8]
 800f506:	607a      	str	r2, [r7, #4]
 800f508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	689b      	ldr	r3, [r3, #8]
 800f50e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	021a      	lsls	r2, r3, #8
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	431a      	orrs	r2, r3
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	4313      	orrs	r3, r2
 800f524:	697a      	ldr	r2, [r7, #20]
 800f526:	4313      	orrs	r3, r2
 800f528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	697a      	ldr	r2, [r7, #20]
 800f52e:	609a      	str	r2, [r3, #8]
}
 800f530:	bf00      	nop
 800f532:	371c      	adds	r7, #28
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr

0800f53c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f53c:	b480      	push	{r7}
 800f53e:	b087      	sub	sp, #28
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	f003 031f 	and.w	r3, r3, #31
 800f54e:	2201      	movs	r2, #1
 800f550:	fa02 f303 	lsl.w	r3, r2, r3
 800f554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	6a1a      	ldr	r2, [r3, #32]
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	43db      	mvns	r3, r3
 800f55e:	401a      	ands	r2, r3
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	6a1a      	ldr	r2, [r3, #32]
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	f003 031f 	and.w	r3, r3, #31
 800f56e:	6879      	ldr	r1, [r7, #4]
 800f570:	fa01 f303 	lsl.w	r3, r1, r3
 800f574:	431a      	orrs	r2, r3
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	621a      	str	r2, [r3, #32]
}
 800f57a:	bf00      	nop
 800f57c:	371c      	adds	r7, #28
 800f57e:	46bd      	mov	sp, r7
 800f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f584:	4770      	bx	lr
	...

0800f588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f588:	b480      	push	{r7}
 800f58a:	b085      	sub	sp, #20
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d101      	bne.n	800f5a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f59c:	2302      	movs	r3, #2
 800f59e:	e068      	b.n	800f672 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2202      	movs	r2, #2
 800f5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	689b      	ldr	r3, [r3, #8]
 800f5be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	4a2e      	ldr	r2, [pc, #184]	; (800f680 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d004      	beq.n	800f5d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	4a2d      	ldr	r2, [pc, #180]	; (800f684 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d108      	bne.n	800f5e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f5da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	4313      	orrs	r3, r2
 800f5e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	68fa      	ldr	r2, [r7, #12]
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	68fa      	ldr	r2, [r7, #12]
 800f5fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	4a1e      	ldr	r2, [pc, #120]	; (800f680 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d01d      	beq.n	800f646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f612:	d018      	beq.n	800f646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	4a1b      	ldr	r2, [pc, #108]	; (800f688 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d013      	beq.n	800f646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	4a1a      	ldr	r2, [pc, #104]	; (800f68c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f624:	4293      	cmp	r3, r2
 800f626:	d00e      	beq.n	800f646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4a18      	ldr	r2, [pc, #96]	; (800f690 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d009      	beq.n	800f646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	4a13      	ldr	r2, [pc, #76]	; (800f684 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f638:	4293      	cmp	r3, r2
 800f63a:	d004      	beq.n	800f646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	4a14      	ldr	r2, [pc, #80]	; (800f694 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d10c      	bne.n	800f660 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f64c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	689b      	ldr	r3, [r3, #8]
 800f652:	68ba      	ldr	r2, [r7, #8]
 800f654:	4313      	orrs	r3, r2
 800f656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	68ba      	ldr	r2, [r7, #8]
 800f65e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2201      	movs	r2, #1
 800f664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2200      	movs	r2, #0
 800f66c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f670:	2300      	movs	r3, #0
}
 800f672:	4618      	mov	r0, r3
 800f674:	3714      	adds	r7, #20
 800f676:	46bd      	mov	sp, r7
 800f678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67c:	4770      	bx	lr
 800f67e:	bf00      	nop
 800f680:	40010000 	.word	0x40010000
 800f684:	40010400 	.word	0x40010400
 800f688:	40000400 	.word	0x40000400
 800f68c:	40000800 	.word	0x40000800
 800f690:	40000c00 	.word	0x40000c00
 800f694:	40001800 	.word	0x40001800

0800f698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f6a0:	bf00      	nop
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f6b4:	bf00      	nop
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f6c8:	bf00      	nop
 800f6ca:	370c      	adds	r7, #12
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d101      	bne.n	800f6e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	e042      	b.n	800f76c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d106      	bne.n	800f6fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f7f4 fc2f 	bl	8003f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2224      	movs	r2, #36	; 0x24
 800f702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	681a      	ldr	r2, [r3, #0]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	f022 0201 	bic.w	r2, r2, #1
 800f714:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f000 fbe0 	bl	800fedc <UART_SetConfig>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b01      	cmp	r3, #1
 800f720:	d101      	bne.n	800f726 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f722:	2301      	movs	r3, #1
 800f724:	e022      	b.n	800f76c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d002      	beq.n	800f734 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f001 f934 	bl	801099c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	685a      	ldr	r2, [r3, #4]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	689a      	ldr	r2, [r3, #8]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	681a      	ldr	r2, [r3, #0]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f042 0201 	orr.w	r2, r2, #1
 800f762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f001 f9bb 	bl	8010ae0 <UART_CheckIdleState>
 800f76a:	4603      	mov	r3, r0
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3708      	adds	r7, #8
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	60f8      	str	r0, [r7, #12]
 800f77c:	60b9      	str	r1, [r7, #8]
 800f77e:	4613      	mov	r3, r2
 800f780:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f788:	2b20      	cmp	r3, #32
 800f78a:	d168      	bne.n	800f85e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d002      	beq.n	800f798 <HAL_UART_Transmit_DMA+0x24>
 800f792:	88fb      	ldrh	r3, [r7, #6]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d101      	bne.n	800f79c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800f798:	2301      	movs	r3, #1
 800f79a:	e061      	b.n	800f860 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d101      	bne.n	800f7aa <HAL_UART_Transmit_DMA+0x36>
 800f7a6:	2302      	movs	r3, #2
 800f7a8:	e05a      	b.n	800f860 <HAL_UART_Transmit_DMA+0xec>
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	68ba      	ldr	r2, [r7, #8]
 800f7b6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	88fa      	ldrh	r2, [r7, #6]
 800f7bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	88fa      	ldrh	r2, [r7, #6]
 800f7c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2221      	movs	r2, #33	; 0x21
 800f7d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d02c      	beq.n	800f83a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7e4:	4a20      	ldr	r2, [pc, #128]	; (800f868 <HAL_UART_Transmit_DMA+0xf4>)
 800f7e6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7ec:	4a1f      	ldr	r2, [pc, #124]	; (800f86c <HAL_UART_Transmit_DMA+0xf8>)
 800f7ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7f4:	4a1e      	ldr	r2, [pc, #120]	; (800f870 <HAL_UART_Transmit_DMA+0xfc>)
 800f7f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f808:	4619      	mov	r1, r3
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	3328      	adds	r3, #40	; 0x28
 800f810:	461a      	mov	r2, r3
 800f812:	88fb      	ldrh	r3, [r7, #6]
 800f814:	f7f6 f9c0 	bl	8005b98 <HAL_DMA_Start_IT>
 800f818:	4603      	mov	r3, r0
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d00d      	beq.n	800f83a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2210      	movs	r2, #16
 800f822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2200      	movs	r2, #0
 800f82a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2220      	movs	r2, #32
 800f832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800f836:	2301      	movs	r3, #1
 800f838:	e012      	b.n	800f860 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	2240      	movs	r2, #64	; 0x40
 800f840:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	2200      	movs	r2, #0
 800f846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	689a      	ldr	r2, [r3, #8]
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f858:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800f85a:	2300      	movs	r3, #0
 800f85c:	e000      	b.n	800f860 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800f85e:	2302      	movs	r3, #2
  }
}
 800f860:	4618      	mov	r0, r3
 800f862:	3710      	adds	r7, #16
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}
 800f868:	08010df5 	.word	0x08010df5
 800f86c:	08010e45 	.word	0x08010e45
 800f870:	08010f2f 	.word	0x08010f2f

0800f874 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b084      	sub	sp, #16
 800f878:	af00      	add	r7, sp, #0
 800f87a:	60f8      	str	r0, [r7, #12]
 800f87c:	60b9      	str	r1, [r7, #8]
 800f87e:	4613      	mov	r3, r2
 800f880:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f888:	2b20      	cmp	r3, #32
 800f88a:	d131      	bne.n	800f8f0 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d002      	beq.n	800f898 <HAL_UART_Receive_DMA+0x24>
 800f892:	88fb      	ldrh	r3, [r7, #6]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d101      	bne.n	800f89c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f898:	2301      	movs	r3, #1
 800f89a:	e02a      	b.n	800f8f2 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f8a2:	2b01      	cmp	r3, #1
 800f8a4:	d101      	bne.n	800f8aa <HAL_UART_Receive_DMA+0x36>
 800f8a6:	2302      	movs	r3, #2
 800f8a8:	e023      	b.n	800f8f2 <HAL_UART_Receive_DMA+0x7e>
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	4a0f      	ldr	r2, [pc, #60]	; (800f8fc <HAL_UART_Receive_DMA+0x88>)
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	d00e      	beq.n	800f8e0 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d007      	beq.n	800f8e0 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f8de:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f8e0:	88fb      	ldrh	r3, [r7, #6]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	68b9      	ldr	r1, [r7, #8]
 800f8e6:	68f8      	ldr	r0, [r7, #12]
 800f8e8:	f001 f9c6 	bl	8010c78 <UART_Start_Receive_DMA>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	e000      	b.n	800f8f2 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800f8f0:	2302      	movs	r3, #2
  }
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3710      	adds	r7, #16
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	bf00      	nop
 800f8fc:	58000c00 	.word	0x58000c00

0800f900 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b088      	sub	sp, #32
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	69db      	ldr	r3, [r3, #28]
 800f90e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	689b      	ldr	r3, [r3, #8]
 800f91e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f920:	69fa      	ldr	r2, [r7, #28]
 800f922:	f640 030f 	movw	r3, #2063	; 0x80f
 800f926:	4013      	ands	r3, r2
 800f928:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d118      	bne.n	800f962 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	f003 0320 	and.w	r3, r3, #32
 800f936:	2b00      	cmp	r3, #0
 800f938:	d013      	beq.n	800f962 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f93a:	69bb      	ldr	r3, [r7, #24]
 800f93c:	f003 0320 	and.w	r3, r3, #32
 800f940:	2b00      	cmp	r3, #0
 800f942:	d104      	bne.n	800f94e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d009      	beq.n	800f962 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f952:	2b00      	cmp	r3, #0
 800f954:	f000 8282 	beq.w	800fe5c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	4798      	blx	r3
      }
      return;
 800f960:	e27c      	b.n	800fe5c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	2b00      	cmp	r3, #0
 800f966:	f000 80ef 	beq.w	800fb48 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f96a:	697a      	ldr	r2, [r7, #20]
 800f96c:	4b73      	ldr	r3, [pc, #460]	; (800fb3c <HAL_UART_IRQHandler+0x23c>)
 800f96e:	4013      	ands	r3, r2
 800f970:	2b00      	cmp	r3, #0
 800f972:	d105      	bne.n	800f980 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f974:	69ba      	ldr	r2, [r7, #24]
 800f976:	4b72      	ldr	r3, [pc, #456]	; (800fb40 <HAL_UART_IRQHandler+0x240>)
 800f978:	4013      	ands	r3, r2
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	f000 80e4 	beq.w	800fb48 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f980:	69fb      	ldr	r3, [r7, #28]
 800f982:	f003 0301 	and.w	r3, r3, #1
 800f986:	2b00      	cmp	r3, #0
 800f988:	d010      	beq.n	800f9ac <HAL_UART_IRQHandler+0xac>
 800f98a:	69bb      	ldr	r3, [r7, #24]
 800f98c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f990:	2b00      	cmp	r3, #0
 800f992:	d00b      	beq.n	800f9ac <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2201      	movs	r2, #1
 800f99a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9a2:	f043 0201 	orr.w	r2, r3, #1
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	f003 0302 	and.w	r3, r3, #2
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d010      	beq.n	800f9d8 <HAL_UART_IRQHandler+0xd8>
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	f003 0301 	and.w	r3, r3, #1
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d00b      	beq.n	800f9d8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	2202      	movs	r2, #2
 800f9c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9ce:	f043 0204 	orr.w	r2, r3, #4
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	f003 0304 	and.w	r3, r3, #4
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d010      	beq.n	800fa04 <HAL_UART_IRQHandler+0x104>
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	f003 0301 	and.w	r3, r3, #1
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d00b      	beq.n	800fa04 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	2204      	movs	r2, #4
 800f9f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9fa:	f043 0202 	orr.w	r2, r3, #2
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	f003 0308 	and.w	r3, r3, #8
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d015      	beq.n	800fa3a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fa0e:	69bb      	ldr	r3, [r7, #24]
 800fa10:	f003 0320 	and.w	r3, r3, #32
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d104      	bne.n	800fa22 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fa18:	697a      	ldr	r2, [r7, #20]
 800fa1a:	4b48      	ldr	r3, [pc, #288]	; (800fb3c <HAL_UART_IRQHandler+0x23c>)
 800fa1c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d00b      	beq.n	800fa3a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	2208      	movs	r2, #8
 800fa28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa30:	f043 0208 	orr.w	r2, r3, #8
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fa3a:	69fb      	ldr	r3, [r7, #28]
 800fa3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d011      	beq.n	800fa68 <HAL_UART_IRQHandler+0x168>
 800fa44:	69bb      	ldr	r3, [r7, #24]
 800fa46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d00c      	beq.n	800fa68 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa5e:	f043 0220 	orr.w	r2, r3, #32
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	f000 81f6 	beq.w	800fe60 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	f003 0320 	and.w	r3, r3, #32
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d011      	beq.n	800faa2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	f003 0320 	and.w	r3, r3, #32
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d104      	bne.n	800fa92 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d007      	beq.n	800faa2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d003      	beq.n	800faa2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800faa8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	689b      	ldr	r3, [r3, #8]
 800fab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fab4:	2b40      	cmp	r3, #64	; 0x40
 800fab6:	d004      	beq.n	800fac2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d031      	beq.n	800fb26 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f001 f964 	bl	8010d90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	689b      	ldr	r3, [r3, #8]
 800face:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fad2:	2b40      	cmp	r3, #64	; 0x40
 800fad4:	d123      	bne.n	800fb1e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	689a      	ldr	r2, [r3, #8]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fae4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faea:	2b00      	cmp	r3, #0
 800faec:	d013      	beq.n	800fb16 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faf2:	4a14      	ldr	r2, [pc, #80]	; (800fb44 <HAL_UART_IRQHandler+0x244>)
 800faf4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7f6 fdd4 	bl	80066a8 <HAL_DMA_Abort_IT>
 800fb00:	4603      	mov	r3, r0
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d017      	beq.n	800fb36 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb0c:	687a      	ldr	r2, [r7, #4]
 800fb0e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800fb10:	4610      	mov	r0, r2
 800fb12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb14:	e00f      	b.n	800fb36 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 f9ca 	bl	800feb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb1c:	e00b      	b.n	800fb36 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f000 f9c6 	bl	800feb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb24:	e007      	b.n	800fb36 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 f9c2 	bl	800feb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800fb34:	e194      	b.n	800fe60 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb36:	bf00      	nop
    return;
 800fb38:	e192      	b.n	800fe60 <HAL_UART_IRQHandler+0x560>
 800fb3a:	bf00      	nop
 800fb3c:	10000001 	.word	0x10000001
 800fb40:	04000120 	.word	0x04000120
 800fb44:	08010faf 	.word	0x08010faf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb4c:	2b01      	cmp	r3, #1
 800fb4e:	f040 810f 	bne.w	800fd70 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fb52:	69fb      	ldr	r3, [r7, #28]
 800fb54:	f003 0310 	and.w	r3, r3, #16
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	f000 8109 	beq.w	800fd70 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	f003 0310 	and.w	r3, r3, #16
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	f000 8103 	beq.w	800fd70 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	2210      	movs	r2, #16
 800fb70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	689b      	ldr	r3, [r3, #8]
 800fb78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb7c:	2b40      	cmp	r3, #64	; 0x40
 800fb7e:	f040 80bb 	bne.w	800fcf8 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a96      	ldr	r2, [pc, #600]	; (800fde4 <HAL_UART_IRQHandler+0x4e4>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d059      	beq.n	800fc42 <HAL_UART_IRQHandler+0x342>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	4a94      	ldr	r2, [pc, #592]	; (800fde8 <HAL_UART_IRQHandler+0x4e8>)
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d053      	beq.n	800fc42 <HAL_UART_IRQHandler+0x342>
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	4a92      	ldr	r2, [pc, #584]	; (800fdec <HAL_UART_IRQHandler+0x4ec>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d04d      	beq.n	800fc42 <HAL_UART_IRQHandler+0x342>
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	4a90      	ldr	r2, [pc, #576]	; (800fdf0 <HAL_UART_IRQHandler+0x4f0>)
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d047      	beq.n	800fc42 <HAL_UART_IRQHandler+0x342>
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	4a8e      	ldr	r2, [pc, #568]	; (800fdf4 <HAL_UART_IRQHandler+0x4f4>)
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d041      	beq.n	800fc42 <HAL_UART_IRQHandler+0x342>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	4a8c      	ldr	r2, [pc, #560]	; (800fdf8 <HAL_UART_IRQHandler+0x4f8>)
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	d03b      	beq.n	800fc42 <HAL_UART_IRQHandler+0x342>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4a8a      	ldr	r2, [pc, #552]	; (800fdfc <HAL_UART_IRQHandler+0x4fc>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d035      	beq.n	800fc42 <HAL_UART_IRQHandler+0x342>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	4a88      	ldr	r2, [pc, #544]	; (800fe00 <HAL_UART_IRQHandler+0x500>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d02f      	beq.n	800fc42 <HAL_UART_IRQHandler+0x342>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	4a86      	ldr	r2, [pc, #536]	; (800fe04 <HAL_UART_IRQHandler+0x504>)
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d029      	beq.n	800fc42 <HAL_UART_IRQHandler+0x342>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	4a84      	ldr	r2, [pc, #528]	; (800fe08 <HAL_UART_IRQHandler+0x508>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d023      	beq.n	800fc42 <HAL_UART_IRQHandler+0x342>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	4a82      	ldr	r2, [pc, #520]	; (800fe0c <HAL_UART_IRQHandler+0x50c>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d01d      	beq.n	800fc42 <HAL_UART_IRQHandler+0x342>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	4a80      	ldr	r2, [pc, #512]	; (800fe10 <HAL_UART_IRQHandler+0x510>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d017      	beq.n	800fc42 <HAL_UART_IRQHandler+0x342>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	4a7e      	ldr	r2, [pc, #504]	; (800fe14 <HAL_UART_IRQHandler+0x514>)
 800fc1a:	4293      	cmp	r3, r2
 800fc1c:	d011      	beq.n	800fc42 <HAL_UART_IRQHandler+0x342>
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	4a7c      	ldr	r2, [pc, #496]	; (800fe18 <HAL_UART_IRQHandler+0x518>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d00b      	beq.n	800fc42 <HAL_UART_IRQHandler+0x342>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4a7a      	ldr	r2, [pc, #488]	; (800fe1c <HAL_UART_IRQHandler+0x51c>)
 800fc32:	4293      	cmp	r3, r2
 800fc34:	d005      	beq.n	800fc42 <HAL_UART_IRQHandler+0x342>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	4a78      	ldr	r2, [pc, #480]	; (800fe20 <HAL_UART_IRQHandler+0x520>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d105      	bne.n	800fc4e <HAL_UART_IRQHandler+0x34e>
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	e004      	b.n	800fc58 <HAL_UART_IRQHandler+0x358>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800fc5a:	893b      	ldrh	r3, [r7, #8]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	f000 8101 	beq.w	800fe64 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fc68:	893a      	ldrh	r2, [r7, #8]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	f080 80fa 	bcs.w	800fe64 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	893a      	ldrh	r2, [r7, #8]
 800fc74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc7c:	69db      	ldr	r3, [r3, #28]
 800fc7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc82:	d02b      	beq.n	800fcdc <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	681a      	ldr	r2, [r3, #0]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fc92:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	689a      	ldr	r2, [r3, #8]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	f022 0201 	bic.w	r2, r2, #1
 800fca2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	689a      	ldr	r2, [r3, #8]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fcb2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2220      	movs	r2, #32
 800fcb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	681a      	ldr	r2, [r3, #0]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	f022 0210 	bic.w	r2, r2, #16
 800fcd0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7f6 f9c8 	bl	800606c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fce8:	b29b      	uxth	r3, r3
 800fcea:	1ad3      	subs	r3, r2, r3
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	4619      	mov	r1, r3
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f000 f8e7 	bl	800fec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fcf6:	e0b5      	b.n	800fe64 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	1ad3      	subs	r3, r2, r3
 800fd08:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd10:	b29b      	uxth	r3, r3
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	f000 80a8 	beq.w	800fe68 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800fd18:	897b      	ldrh	r3, [r7, #10]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	f000 80a4 	beq.w	800fe68 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	681a      	ldr	r2, [r3, #0]
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fd2e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	6899      	ldr	r1, [r3, #8]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681a      	ldr	r2, [r3, #0]
 800fd3a:	4b3a      	ldr	r3, [pc, #232]	; (800fe24 <HAL_UART_IRQHandler+0x524>)
 800fd3c:	400b      	ands	r3, r1
 800fd3e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2220      	movs	r2, #32
 800fd44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	681a      	ldr	r2, [r3, #0]
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f022 0210 	bic.w	r2, r2, #16
 800fd62:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fd64:	897b      	ldrh	r3, [r7, #10]
 800fd66:	4619      	mov	r1, r3
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 f8ab 	bl	800fec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fd6e:	e07b      	b.n	800fe68 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fd70:	69fb      	ldr	r3, [r7, #28]
 800fd72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d00d      	beq.n	800fd96 <HAL_UART_IRQHandler+0x496>
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d008      	beq.n	800fd96 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fd8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f001 f93d 	bl	801100e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fd94:	e06b      	b.n	800fe6e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fd96:	69fb      	ldr	r3, [r7, #28]
 800fd98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d012      	beq.n	800fdc6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fda0:	69bb      	ldr	r3, [r7, #24]
 800fda2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d104      	bne.n	800fdb4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d008      	beq.n	800fdc6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d057      	beq.n	800fe6c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	4798      	blx	r3
    }
    return;
 800fdc4:	e052      	b.n	800fe6c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d02b      	beq.n	800fe28 <HAL_UART_IRQHandler+0x528>
 800fdd0:	69bb      	ldr	r3, [r7, #24]
 800fdd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d026      	beq.n	800fe28 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f001 f8fd 	bl	8010fda <UART_EndTransmit_IT>
    return;
 800fde0:	e045      	b.n	800fe6e <HAL_UART_IRQHandler+0x56e>
 800fde2:	bf00      	nop
 800fde4:	40020010 	.word	0x40020010
 800fde8:	40020028 	.word	0x40020028
 800fdec:	40020040 	.word	0x40020040
 800fdf0:	40020058 	.word	0x40020058
 800fdf4:	40020070 	.word	0x40020070
 800fdf8:	40020088 	.word	0x40020088
 800fdfc:	400200a0 	.word	0x400200a0
 800fe00:	400200b8 	.word	0x400200b8
 800fe04:	40020410 	.word	0x40020410
 800fe08:	40020428 	.word	0x40020428
 800fe0c:	40020440 	.word	0x40020440
 800fe10:	40020458 	.word	0x40020458
 800fe14:	40020470 	.word	0x40020470
 800fe18:	40020488 	.word	0x40020488
 800fe1c:	400204a0 	.word	0x400204a0
 800fe20:	400204b8 	.word	0x400204b8
 800fe24:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d008      	beq.n	800fe44 <HAL_UART_IRQHandler+0x544>
 800fe32:	69bb      	ldr	r3, [r7, #24]
 800fe34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d003      	beq.n	800fe44 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f001 f8fa 	bl	8011036 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe42:	e014      	b.n	800fe6e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fe44:	69fb      	ldr	r3, [r7, #28]
 800fe46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d00f      	beq.n	800fe6e <HAL_UART_IRQHandler+0x56e>
 800fe4e:	69bb      	ldr	r3, [r7, #24]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	da0c      	bge.n	800fe6e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f001 f8e4 	bl	8011022 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe5a:	e008      	b.n	800fe6e <HAL_UART_IRQHandler+0x56e>
      return;
 800fe5c:	bf00      	nop
 800fe5e:	e006      	b.n	800fe6e <HAL_UART_IRQHandler+0x56e>
    return;
 800fe60:	bf00      	nop
 800fe62:	e004      	b.n	800fe6e <HAL_UART_IRQHandler+0x56e>
      return;
 800fe64:	bf00      	nop
 800fe66:	e002      	b.n	800fe6e <HAL_UART_IRQHandler+0x56e>
      return;
 800fe68:	bf00      	nop
 800fe6a:	e000      	b.n	800fe6e <HAL_UART_IRQHandler+0x56e>
    return;
 800fe6c:	bf00      	nop
  }
}
 800fe6e:	3720      	adds	r7, #32
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fe7c:	bf00      	nop
 800fe7e:	370c      	adds	r7, #12
 800fe80:	46bd      	mov	sp, r7
 800fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe86:	4770      	bx	lr

0800fe88 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b083      	sub	sp, #12
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800fe90:	bf00      	nop
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fea4:	bf00      	nop
 800fea6:	370c      	adds	r7, #12
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr

0800feb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800feb0:	b480      	push	{r7}
 800feb2:	b083      	sub	sp, #12
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800feb8:	bf00      	nop
 800feba:	370c      	adds	r7, #12
 800febc:	46bd      	mov	sp, r7
 800febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec2:	4770      	bx	lr

0800fec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	460b      	mov	r3, r1
 800fece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fed0:	bf00      	nop
 800fed2:	370c      	adds	r7, #12
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr

0800fedc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fedc:	b5b0      	push	{r4, r5, r7, lr}
 800fede:	b08e      	sub	sp, #56	; 0x38
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fee4:	2300      	movs	r3, #0
 800fee6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	689a      	ldr	r2, [r3, #8]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	691b      	ldr	r3, [r3, #16]
 800fef2:	431a      	orrs	r2, r3
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	695b      	ldr	r3, [r3, #20]
 800fef8:	431a      	orrs	r2, r3
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	69db      	ldr	r3, [r3, #28]
 800fefe:	4313      	orrs	r3, r2
 800ff00:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	681a      	ldr	r2, [r3, #0]
 800ff08:	4bbf      	ldr	r3, [pc, #764]	; (8010208 <UART_SetConfig+0x32c>)
 800ff0a:	4013      	ands	r3, r2
 800ff0c:	687a      	ldr	r2, [r7, #4]
 800ff0e:	6812      	ldr	r2, [r2, #0]
 800ff10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff12:	430b      	orrs	r3, r1
 800ff14:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	685b      	ldr	r3, [r3, #4]
 800ff1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	68da      	ldr	r2, [r3, #12]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	430a      	orrs	r2, r1
 800ff2a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	699b      	ldr	r3, [r3, #24]
 800ff30:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	4ab5      	ldr	r2, [pc, #724]	; (801020c <UART_SetConfig+0x330>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d004      	beq.n	800ff46 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6a1b      	ldr	r3, [r3, #32]
 800ff40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff42:	4313      	orrs	r3, r2
 800ff44:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	689a      	ldr	r2, [r3, #8]
 800ff4c:	4bb0      	ldr	r3, [pc, #704]	; (8010210 <UART_SetConfig+0x334>)
 800ff4e:	4013      	ands	r3, r2
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	6812      	ldr	r2, [r2, #0]
 800ff54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff56:	430b      	orrs	r3, r1
 800ff58:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff60:	f023 010f 	bic.w	r1, r3, #15
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	430a      	orrs	r2, r1
 800ff6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	4aa7      	ldr	r2, [pc, #668]	; (8010214 <UART_SetConfig+0x338>)
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d176      	bne.n	8010068 <UART_SetConfig+0x18c>
 800ff7a:	4ba7      	ldr	r3, [pc, #668]	; (8010218 <UART_SetConfig+0x33c>)
 800ff7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ff82:	2b28      	cmp	r3, #40	; 0x28
 800ff84:	d86c      	bhi.n	8010060 <UART_SetConfig+0x184>
 800ff86:	a201      	add	r2, pc, #4	; (adr r2, 800ff8c <UART_SetConfig+0xb0>)
 800ff88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff8c:	08010031 	.word	0x08010031
 800ff90:	08010061 	.word	0x08010061
 800ff94:	08010061 	.word	0x08010061
 800ff98:	08010061 	.word	0x08010061
 800ff9c:	08010061 	.word	0x08010061
 800ffa0:	08010061 	.word	0x08010061
 800ffa4:	08010061 	.word	0x08010061
 800ffa8:	08010061 	.word	0x08010061
 800ffac:	08010039 	.word	0x08010039
 800ffb0:	08010061 	.word	0x08010061
 800ffb4:	08010061 	.word	0x08010061
 800ffb8:	08010061 	.word	0x08010061
 800ffbc:	08010061 	.word	0x08010061
 800ffc0:	08010061 	.word	0x08010061
 800ffc4:	08010061 	.word	0x08010061
 800ffc8:	08010061 	.word	0x08010061
 800ffcc:	08010041 	.word	0x08010041
 800ffd0:	08010061 	.word	0x08010061
 800ffd4:	08010061 	.word	0x08010061
 800ffd8:	08010061 	.word	0x08010061
 800ffdc:	08010061 	.word	0x08010061
 800ffe0:	08010061 	.word	0x08010061
 800ffe4:	08010061 	.word	0x08010061
 800ffe8:	08010061 	.word	0x08010061
 800ffec:	08010049 	.word	0x08010049
 800fff0:	08010061 	.word	0x08010061
 800fff4:	08010061 	.word	0x08010061
 800fff8:	08010061 	.word	0x08010061
 800fffc:	08010061 	.word	0x08010061
 8010000:	08010061 	.word	0x08010061
 8010004:	08010061 	.word	0x08010061
 8010008:	08010061 	.word	0x08010061
 801000c:	08010051 	.word	0x08010051
 8010010:	08010061 	.word	0x08010061
 8010014:	08010061 	.word	0x08010061
 8010018:	08010061 	.word	0x08010061
 801001c:	08010061 	.word	0x08010061
 8010020:	08010061 	.word	0x08010061
 8010024:	08010061 	.word	0x08010061
 8010028:	08010061 	.word	0x08010061
 801002c:	08010059 	.word	0x08010059
 8010030:	2301      	movs	r3, #1
 8010032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010036:	e222      	b.n	801047e <UART_SetConfig+0x5a2>
 8010038:	2304      	movs	r3, #4
 801003a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801003e:	e21e      	b.n	801047e <UART_SetConfig+0x5a2>
 8010040:	2308      	movs	r3, #8
 8010042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010046:	e21a      	b.n	801047e <UART_SetConfig+0x5a2>
 8010048:	2310      	movs	r3, #16
 801004a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801004e:	e216      	b.n	801047e <UART_SetConfig+0x5a2>
 8010050:	2320      	movs	r3, #32
 8010052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010056:	e212      	b.n	801047e <UART_SetConfig+0x5a2>
 8010058:	2340      	movs	r3, #64	; 0x40
 801005a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801005e:	e20e      	b.n	801047e <UART_SetConfig+0x5a2>
 8010060:	2380      	movs	r3, #128	; 0x80
 8010062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010066:	e20a      	b.n	801047e <UART_SetConfig+0x5a2>
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	4a6b      	ldr	r2, [pc, #428]	; (801021c <UART_SetConfig+0x340>)
 801006e:	4293      	cmp	r3, r2
 8010070:	d130      	bne.n	80100d4 <UART_SetConfig+0x1f8>
 8010072:	4b69      	ldr	r3, [pc, #420]	; (8010218 <UART_SetConfig+0x33c>)
 8010074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010076:	f003 0307 	and.w	r3, r3, #7
 801007a:	2b05      	cmp	r3, #5
 801007c:	d826      	bhi.n	80100cc <UART_SetConfig+0x1f0>
 801007e:	a201      	add	r2, pc, #4	; (adr r2, 8010084 <UART_SetConfig+0x1a8>)
 8010080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010084:	0801009d 	.word	0x0801009d
 8010088:	080100a5 	.word	0x080100a5
 801008c:	080100ad 	.word	0x080100ad
 8010090:	080100b5 	.word	0x080100b5
 8010094:	080100bd 	.word	0x080100bd
 8010098:	080100c5 	.word	0x080100c5
 801009c:	2300      	movs	r3, #0
 801009e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100a2:	e1ec      	b.n	801047e <UART_SetConfig+0x5a2>
 80100a4:	2304      	movs	r3, #4
 80100a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100aa:	e1e8      	b.n	801047e <UART_SetConfig+0x5a2>
 80100ac:	2308      	movs	r3, #8
 80100ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100b2:	e1e4      	b.n	801047e <UART_SetConfig+0x5a2>
 80100b4:	2310      	movs	r3, #16
 80100b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ba:	e1e0      	b.n	801047e <UART_SetConfig+0x5a2>
 80100bc:	2320      	movs	r3, #32
 80100be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100c2:	e1dc      	b.n	801047e <UART_SetConfig+0x5a2>
 80100c4:	2340      	movs	r3, #64	; 0x40
 80100c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ca:	e1d8      	b.n	801047e <UART_SetConfig+0x5a2>
 80100cc:	2380      	movs	r3, #128	; 0x80
 80100ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100d2:	e1d4      	b.n	801047e <UART_SetConfig+0x5a2>
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	4a51      	ldr	r2, [pc, #324]	; (8010220 <UART_SetConfig+0x344>)
 80100da:	4293      	cmp	r3, r2
 80100dc:	d130      	bne.n	8010140 <UART_SetConfig+0x264>
 80100de:	4b4e      	ldr	r3, [pc, #312]	; (8010218 <UART_SetConfig+0x33c>)
 80100e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100e2:	f003 0307 	and.w	r3, r3, #7
 80100e6:	2b05      	cmp	r3, #5
 80100e8:	d826      	bhi.n	8010138 <UART_SetConfig+0x25c>
 80100ea:	a201      	add	r2, pc, #4	; (adr r2, 80100f0 <UART_SetConfig+0x214>)
 80100ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f0:	08010109 	.word	0x08010109
 80100f4:	08010111 	.word	0x08010111
 80100f8:	08010119 	.word	0x08010119
 80100fc:	08010121 	.word	0x08010121
 8010100:	08010129 	.word	0x08010129
 8010104:	08010131 	.word	0x08010131
 8010108:	2300      	movs	r3, #0
 801010a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801010e:	e1b6      	b.n	801047e <UART_SetConfig+0x5a2>
 8010110:	2304      	movs	r3, #4
 8010112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010116:	e1b2      	b.n	801047e <UART_SetConfig+0x5a2>
 8010118:	2308      	movs	r3, #8
 801011a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801011e:	e1ae      	b.n	801047e <UART_SetConfig+0x5a2>
 8010120:	2310      	movs	r3, #16
 8010122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010126:	e1aa      	b.n	801047e <UART_SetConfig+0x5a2>
 8010128:	2320      	movs	r3, #32
 801012a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801012e:	e1a6      	b.n	801047e <UART_SetConfig+0x5a2>
 8010130:	2340      	movs	r3, #64	; 0x40
 8010132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010136:	e1a2      	b.n	801047e <UART_SetConfig+0x5a2>
 8010138:	2380      	movs	r3, #128	; 0x80
 801013a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801013e:	e19e      	b.n	801047e <UART_SetConfig+0x5a2>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	4a37      	ldr	r2, [pc, #220]	; (8010224 <UART_SetConfig+0x348>)
 8010146:	4293      	cmp	r3, r2
 8010148:	d130      	bne.n	80101ac <UART_SetConfig+0x2d0>
 801014a:	4b33      	ldr	r3, [pc, #204]	; (8010218 <UART_SetConfig+0x33c>)
 801014c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801014e:	f003 0307 	and.w	r3, r3, #7
 8010152:	2b05      	cmp	r3, #5
 8010154:	d826      	bhi.n	80101a4 <UART_SetConfig+0x2c8>
 8010156:	a201      	add	r2, pc, #4	; (adr r2, 801015c <UART_SetConfig+0x280>)
 8010158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801015c:	08010175 	.word	0x08010175
 8010160:	0801017d 	.word	0x0801017d
 8010164:	08010185 	.word	0x08010185
 8010168:	0801018d 	.word	0x0801018d
 801016c:	08010195 	.word	0x08010195
 8010170:	0801019d 	.word	0x0801019d
 8010174:	2300      	movs	r3, #0
 8010176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801017a:	e180      	b.n	801047e <UART_SetConfig+0x5a2>
 801017c:	2304      	movs	r3, #4
 801017e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010182:	e17c      	b.n	801047e <UART_SetConfig+0x5a2>
 8010184:	2308      	movs	r3, #8
 8010186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801018a:	e178      	b.n	801047e <UART_SetConfig+0x5a2>
 801018c:	2310      	movs	r3, #16
 801018e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010192:	e174      	b.n	801047e <UART_SetConfig+0x5a2>
 8010194:	2320      	movs	r3, #32
 8010196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801019a:	e170      	b.n	801047e <UART_SetConfig+0x5a2>
 801019c:	2340      	movs	r3, #64	; 0x40
 801019e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101a2:	e16c      	b.n	801047e <UART_SetConfig+0x5a2>
 80101a4:	2380      	movs	r3, #128	; 0x80
 80101a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101aa:	e168      	b.n	801047e <UART_SetConfig+0x5a2>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	4a1d      	ldr	r2, [pc, #116]	; (8010228 <UART_SetConfig+0x34c>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d142      	bne.n	801023c <UART_SetConfig+0x360>
 80101b6:	4b18      	ldr	r3, [pc, #96]	; (8010218 <UART_SetConfig+0x33c>)
 80101b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101ba:	f003 0307 	and.w	r3, r3, #7
 80101be:	2b05      	cmp	r3, #5
 80101c0:	d838      	bhi.n	8010234 <UART_SetConfig+0x358>
 80101c2:	a201      	add	r2, pc, #4	; (adr r2, 80101c8 <UART_SetConfig+0x2ec>)
 80101c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101c8:	080101e1 	.word	0x080101e1
 80101cc:	080101e9 	.word	0x080101e9
 80101d0:	080101f1 	.word	0x080101f1
 80101d4:	080101f9 	.word	0x080101f9
 80101d8:	08010201 	.word	0x08010201
 80101dc:	0801022d 	.word	0x0801022d
 80101e0:	2300      	movs	r3, #0
 80101e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101e6:	e14a      	b.n	801047e <UART_SetConfig+0x5a2>
 80101e8:	2304      	movs	r3, #4
 80101ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101ee:	e146      	b.n	801047e <UART_SetConfig+0x5a2>
 80101f0:	2308      	movs	r3, #8
 80101f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101f6:	e142      	b.n	801047e <UART_SetConfig+0x5a2>
 80101f8:	2310      	movs	r3, #16
 80101fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101fe:	e13e      	b.n	801047e <UART_SetConfig+0x5a2>
 8010200:	2320      	movs	r3, #32
 8010202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010206:	e13a      	b.n	801047e <UART_SetConfig+0x5a2>
 8010208:	cfff69f3 	.word	0xcfff69f3
 801020c:	58000c00 	.word	0x58000c00
 8010210:	11fff4ff 	.word	0x11fff4ff
 8010214:	40011000 	.word	0x40011000
 8010218:	58024400 	.word	0x58024400
 801021c:	40004400 	.word	0x40004400
 8010220:	40004800 	.word	0x40004800
 8010224:	40004c00 	.word	0x40004c00
 8010228:	40005000 	.word	0x40005000
 801022c:	2340      	movs	r3, #64	; 0x40
 801022e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010232:	e124      	b.n	801047e <UART_SetConfig+0x5a2>
 8010234:	2380      	movs	r3, #128	; 0x80
 8010236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801023a:	e120      	b.n	801047e <UART_SetConfig+0x5a2>
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4acc      	ldr	r2, [pc, #816]	; (8010574 <UART_SetConfig+0x698>)
 8010242:	4293      	cmp	r3, r2
 8010244:	d176      	bne.n	8010334 <UART_SetConfig+0x458>
 8010246:	4bcc      	ldr	r3, [pc, #816]	; (8010578 <UART_SetConfig+0x69c>)
 8010248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801024a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801024e:	2b28      	cmp	r3, #40	; 0x28
 8010250:	d86c      	bhi.n	801032c <UART_SetConfig+0x450>
 8010252:	a201      	add	r2, pc, #4	; (adr r2, 8010258 <UART_SetConfig+0x37c>)
 8010254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010258:	080102fd 	.word	0x080102fd
 801025c:	0801032d 	.word	0x0801032d
 8010260:	0801032d 	.word	0x0801032d
 8010264:	0801032d 	.word	0x0801032d
 8010268:	0801032d 	.word	0x0801032d
 801026c:	0801032d 	.word	0x0801032d
 8010270:	0801032d 	.word	0x0801032d
 8010274:	0801032d 	.word	0x0801032d
 8010278:	08010305 	.word	0x08010305
 801027c:	0801032d 	.word	0x0801032d
 8010280:	0801032d 	.word	0x0801032d
 8010284:	0801032d 	.word	0x0801032d
 8010288:	0801032d 	.word	0x0801032d
 801028c:	0801032d 	.word	0x0801032d
 8010290:	0801032d 	.word	0x0801032d
 8010294:	0801032d 	.word	0x0801032d
 8010298:	0801030d 	.word	0x0801030d
 801029c:	0801032d 	.word	0x0801032d
 80102a0:	0801032d 	.word	0x0801032d
 80102a4:	0801032d 	.word	0x0801032d
 80102a8:	0801032d 	.word	0x0801032d
 80102ac:	0801032d 	.word	0x0801032d
 80102b0:	0801032d 	.word	0x0801032d
 80102b4:	0801032d 	.word	0x0801032d
 80102b8:	08010315 	.word	0x08010315
 80102bc:	0801032d 	.word	0x0801032d
 80102c0:	0801032d 	.word	0x0801032d
 80102c4:	0801032d 	.word	0x0801032d
 80102c8:	0801032d 	.word	0x0801032d
 80102cc:	0801032d 	.word	0x0801032d
 80102d0:	0801032d 	.word	0x0801032d
 80102d4:	0801032d 	.word	0x0801032d
 80102d8:	0801031d 	.word	0x0801031d
 80102dc:	0801032d 	.word	0x0801032d
 80102e0:	0801032d 	.word	0x0801032d
 80102e4:	0801032d 	.word	0x0801032d
 80102e8:	0801032d 	.word	0x0801032d
 80102ec:	0801032d 	.word	0x0801032d
 80102f0:	0801032d 	.word	0x0801032d
 80102f4:	0801032d 	.word	0x0801032d
 80102f8:	08010325 	.word	0x08010325
 80102fc:	2301      	movs	r3, #1
 80102fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010302:	e0bc      	b.n	801047e <UART_SetConfig+0x5a2>
 8010304:	2304      	movs	r3, #4
 8010306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801030a:	e0b8      	b.n	801047e <UART_SetConfig+0x5a2>
 801030c:	2308      	movs	r3, #8
 801030e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010312:	e0b4      	b.n	801047e <UART_SetConfig+0x5a2>
 8010314:	2310      	movs	r3, #16
 8010316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801031a:	e0b0      	b.n	801047e <UART_SetConfig+0x5a2>
 801031c:	2320      	movs	r3, #32
 801031e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010322:	e0ac      	b.n	801047e <UART_SetConfig+0x5a2>
 8010324:	2340      	movs	r3, #64	; 0x40
 8010326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801032a:	e0a8      	b.n	801047e <UART_SetConfig+0x5a2>
 801032c:	2380      	movs	r3, #128	; 0x80
 801032e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010332:	e0a4      	b.n	801047e <UART_SetConfig+0x5a2>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	4a90      	ldr	r2, [pc, #576]	; (801057c <UART_SetConfig+0x6a0>)
 801033a:	4293      	cmp	r3, r2
 801033c:	d130      	bne.n	80103a0 <UART_SetConfig+0x4c4>
 801033e:	4b8e      	ldr	r3, [pc, #568]	; (8010578 <UART_SetConfig+0x69c>)
 8010340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010342:	f003 0307 	and.w	r3, r3, #7
 8010346:	2b05      	cmp	r3, #5
 8010348:	d826      	bhi.n	8010398 <UART_SetConfig+0x4bc>
 801034a:	a201      	add	r2, pc, #4	; (adr r2, 8010350 <UART_SetConfig+0x474>)
 801034c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010350:	08010369 	.word	0x08010369
 8010354:	08010371 	.word	0x08010371
 8010358:	08010379 	.word	0x08010379
 801035c:	08010381 	.word	0x08010381
 8010360:	08010389 	.word	0x08010389
 8010364:	08010391 	.word	0x08010391
 8010368:	2300      	movs	r3, #0
 801036a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801036e:	e086      	b.n	801047e <UART_SetConfig+0x5a2>
 8010370:	2304      	movs	r3, #4
 8010372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010376:	e082      	b.n	801047e <UART_SetConfig+0x5a2>
 8010378:	2308      	movs	r3, #8
 801037a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801037e:	e07e      	b.n	801047e <UART_SetConfig+0x5a2>
 8010380:	2310      	movs	r3, #16
 8010382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010386:	e07a      	b.n	801047e <UART_SetConfig+0x5a2>
 8010388:	2320      	movs	r3, #32
 801038a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801038e:	e076      	b.n	801047e <UART_SetConfig+0x5a2>
 8010390:	2340      	movs	r3, #64	; 0x40
 8010392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010396:	e072      	b.n	801047e <UART_SetConfig+0x5a2>
 8010398:	2380      	movs	r3, #128	; 0x80
 801039a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801039e:	e06e      	b.n	801047e <UART_SetConfig+0x5a2>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	4a76      	ldr	r2, [pc, #472]	; (8010580 <UART_SetConfig+0x6a4>)
 80103a6:	4293      	cmp	r3, r2
 80103a8:	d130      	bne.n	801040c <UART_SetConfig+0x530>
 80103aa:	4b73      	ldr	r3, [pc, #460]	; (8010578 <UART_SetConfig+0x69c>)
 80103ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103ae:	f003 0307 	and.w	r3, r3, #7
 80103b2:	2b05      	cmp	r3, #5
 80103b4:	d826      	bhi.n	8010404 <UART_SetConfig+0x528>
 80103b6:	a201      	add	r2, pc, #4	; (adr r2, 80103bc <UART_SetConfig+0x4e0>)
 80103b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103bc:	080103d5 	.word	0x080103d5
 80103c0:	080103dd 	.word	0x080103dd
 80103c4:	080103e5 	.word	0x080103e5
 80103c8:	080103ed 	.word	0x080103ed
 80103cc:	080103f5 	.word	0x080103f5
 80103d0:	080103fd 	.word	0x080103fd
 80103d4:	2300      	movs	r3, #0
 80103d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103da:	e050      	b.n	801047e <UART_SetConfig+0x5a2>
 80103dc:	2304      	movs	r3, #4
 80103de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103e2:	e04c      	b.n	801047e <UART_SetConfig+0x5a2>
 80103e4:	2308      	movs	r3, #8
 80103e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103ea:	e048      	b.n	801047e <UART_SetConfig+0x5a2>
 80103ec:	2310      	movs	r3, #16
 80103ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103f2:	e044      	b.n	801047e <UART_SetConfig+0x5a2>
 80103f4:	2320      	movs	r3, #32
 80103f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103fa:	e040      	b.n	801047e <UART_SetConfig+0x5a2>
 80103fc:	2340      	movs	r3, #64	; 0x40
 80103fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010402:	e03c      	b.n	801047e <UART_SetConfig+0x5a2>
 8010404:	2380      	movs	r3, #128	; 0x80
 8010406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801040a:	e038      	b.n	801047e <UART_SetConfig+0x5a2>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4a5c      	ldr	r2, [pc, #368]	; (8010584 <UART_SetConfig+0x6a8>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d130      	bne.n	8010478 <UART_SetConfig+0x59c>
 8010416:	4b58      	ldr	r3, [pc, #352]	; (8010578 <UART_SetConfig+0x69c>)
 8010418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801041a:	f003 0307 	and.w	r3, r3, #7
 801041e:	2b05      	cmp	r3, #5
 8010420:	d826      	bhi.n	8010470 <UART_SetConfig+0x594>
 8010422:	a201      	add	r2, pc, #4	; (adr r2, 8010428 <UART_SetConfig+0x54c>)
 8010424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010428:	08010441 	.word	0x08010441
 801042c:	08010449 	.word	0x08010449
 8010430:	08010451 	.word	0x08010451
 8010434:	08010459 	.word	0x08010459
 8010438:	08010461 	.word	0x08010461
 801043c:	08010469 	.word	0x08010469
 8010440:	2302      	movs	r3, #2
 8010442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010446:	e01a      	b.n	801047e <UART_SetConfig+0x5a2>
 8010448:	2304      	movs	r3, #4
 801044a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801044e:	e016      	b.n	801047e <UART_SetConfig+0x5a2>
 8010450:	2308      	movs	r3, #8
 8010452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010456:	e012      	b.n	801047e <UART_SetConfig+0x5a2>
 8010458:	2310      	movs	r3, #16
 801045a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801045e:	e00e      	b.n	801047e <UART_SetConfig+0x5a2>
 8010460:	2320      	movs	r3, #32
 8010462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010466:	e00a      	b.n	801047e <UART_SetConfig+0x5a2>
 8010468:	2340      	movs	r3, #64	; 0x40
 801046a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801046e:	e006      	b.n	801047e <UART_SetConfig+0x5a2>
 8010470:	2380      	movs	r3, #128	; 0x80
 8010472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010476:	e002      	b.n	801047e <UART_SetConfig+0x5a2>
 8010478:	2380      	movs	r3, #128	; 0x80
 801047a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	4a40      	ldr	r2, [pc, #256]	; (8010584 <UART_SetConfig+0x6a8>)
 8010484:	4293      	cmp	r3, r2
 8010486:	f040 80ef 	bne.w	8010668 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801048a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801048e:	2b20      	cmp	r3, #32
 8010490:	dc46      	bgt.n	8010520 <UART_SetConfig+0x644>
 8010492:	2b02      	cmp	r3, #2
 8010494:	f2c0 8081 	blt.w	801059a <UART_SetConfig+0x6be>
 8010498:	3b02      	subs	r3, #2
 801049a:	2b1e      	cmp	r3, #30
 801049c:	d87d      	bhi.n	801059a <UART_SetConfig+0x6be>
 801049e:	a201      	add	r2, pc, #4	; (adr r2, 80104a4 <UART_SetConfig+0x5c8>)
 80104a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104a4:	08010527 	.word	0x08010527
 80104a8:	0801059b 	.word	0x0801059b
 80104ac:	0801052f 	.word	0x0801052f
 80104b0:	0801059b 	.word	0x0801059b
 80104b4:	0801059b 	.word	0x0801059b
 80104b8:	0801059b 	.word	0x0801059b
 80104bc:	0801053f 	.word	0x0801053f
 80104c0:	0801059b 	.word	0x0801059b
 80104c4:	0801059b 	.word	0x0801059b
 80104c8:	0801059b 	.word	0x0801059b
 80104cc:	0801059b 	.word	0x0801059b
 80104d0:	0801059b 	.word	0x0801059b
 80104d4:	0801059b 	.word	0x0801059b
 80104d8:	0801059b 	.word	0x0801059b
 80104dc:	0801054f 	.word	0x0801054f
 80104e0:	0801059b 	.word	0x0801059b
 80104e4:	0801059b 	.word	0x0801059b
 80104e8:	0801059b 	.word	0x0801059b
 80104ec:	0801059b 	.word	0x0801059b
 80104f0:	0801059b 	.word	0x0801059b
 80104f4:	0801059b 	.word	0x0801059b
 80104f8:	0801059b 	.word	0x0801059b
 80104fc:	0801059b 	.word	0x0801059b
 8010500:	0801059b 	.word	0x0801059b
 8010504:	0801059b 	.word	0x0801059b
 8010508:	0801059b 	.word	0x0801059b
 801050c:	0801059b 	.word	0x0801059b
 8010510:	0801059b 	.word	0x0801059b
 8010514:	0801059b 	.word	0x0801059b
 8010518:	0801059b 	.word	0x0801059b
 801051c:	0801058d 	.word	0x0801058d
 8010520:	2b40      	cmp	r3, #64	; 0x40
 8010522:	d036      	beq.n	8010592 <UART_SetConfig+0x6b6>
 8010524:	e039      	b.n	801059a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010526:	f7fc f963 	bl	800c7f0 <HAL_RCCEx_GetD3PCLK1Freq>
 801052a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801052c:	e03b      	b.n	80105a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801052e:	f107 0314 	add.w	r3, r7, #20
 8010532:	4618      	mov	r0, r3
 8010534:	f7fc f972 	bl	800c81c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010538:	69bb      	ldr	r3, [r7, #24]
 801053a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801053c:	e033      	b.n	80105a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801053e:	f107 0308 	add.w	r3, r7, #8
 8010542:	4618      	mov	r0, r3
 8010544:	f7fc fabe 	bl	800cac4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801054c:	e02b      	b.n	80105a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801054e:	4b0a      	ldr	r3, [pc, #40]	; (8010578 <UART_SetConfig+0x69c>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	f003 0320 	and.w	r3, r3, #32
 8010556:	2b00      	cmp	r3, #0
 8010558:	d009      	beq.n	801056e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801055a:	4b07      	ldr	r3, [pc, #28]	; (8010578 <UART_SetConfig+0x69c>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	08db      	lsrs	r3, r3, #3
 8010560:	f003 0303 	and.w	r3, r3, #3
 8010564:	4a08      	ldr	r2, [pc, #32]	; (8010588 <UART_SetConfig+0x6ac>)
 8010566:	fa22 f303 	lsr.w	r3, r2, r3
 801056a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801056c:	e01b      	b.n	80105a6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 801056e:	4b06      	ldr	r3, [pc, #24]	; (8010588 <UART_SetConfig+0x6ac>)
 8010570:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010572:	e018      	b.n	80105a6 <UART_SetConfig+0x6ca>
 8010574:	40011400 	.word	0x40011400
 8010578:	58024400 	.word	0x58024400
 801057c:	40007800 	.word	0x40007800
 8010580:	40007c00 	.word	0x40007c00
 8010584:	58000c00 	.word	0x58000c00
 8010588:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801058c:	4bc4      	ldr	r3, [pc, #784]	; (80108a0 <UART_SetConfig+0x9c4>)
 801058e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010590:	e009      	b.n	80105a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010596:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010598:	e005      	b.n	80105a6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 801059a:	2300      	movs	r3, #0
 801059c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801059e:	2301      	movs	r3, #1
 80105a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80105a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80105a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	f000 81da 	beq.w	8010962 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105b2:	4abc      	ldr	r2, [pc, #752]	; (80108a4 <UART_SetConfig+0x9c8>)
 80105b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105b8:	461a      	mov	r2, r3
 80105ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80105c0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	685a      	ldr	r2, [r3, #4]
 80105c6:	4613      	mov	r3, r2
 80105c8:	005b      	lsls	r3, r3, #1
 80105ca:	4413      	add	r3, r2
 80105cc:	6a3a      	ldr	r2, [r7, #32]
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d305      	bcc.n	80105de <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80105d8:	6a3a      	ldr	r2, [r7, #32]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d903      	bls.n	80105e6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80105de:	2301      	movs	r3, #1
 80105e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80105e4:	e1bd      	b.n	8010962 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80105e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e8:	4618      	mov	r0, r3
 80105ea:	f04f 0100 	mov.w	r1, #0
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105f2:	4aac      	ldr	r2, [pc, #688]	; (80108a4 <UART_SetConfig+0x9c8>)
 80105f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105f8:	b29a      	uxth	r2, r3
 80105fa:	f04f 0300 	mov.w	r3, #0
 80105fe:	f7ef fec7 	bl	8000390 <__aeabi_uldivmod>
 8010602:	4602      	mov	r2, r0
 8010604:	460b      	mov	r3, r1
 8010606:	4610      	mov	r0, r2
 8010608:	4619      	mov	r1, r3
 801060a:	f04f 0200 	mov.w	r2, #0
 801060e:	f04f 0300 	mov.w	r3, #0
 8010612:	020b      	lsls	r3, r1, #8
 8010614:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010618:	0202      	lsls	r2, r0, #8
 801061a:	6879      	ldr	r1, [r7, #4]
 801061c:	6849      	ldr	r1, [r1, #4]
 801061e:	0849      	lsrs	r1, r1, #1
 8010620:	4608      	mov	r0, r1
 8010622:	f04f 0100 	mov.w	r1, #0
 8010626:	1814      	adds	r4, r2, r0
 8010628:	eb43 0501 	adc.w	r5, r3, r1
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	685b      	ldr	r3, [r3, #4]
 8010630:	461a      	mov	r2, r3
 8010632:	f04f 0300 	mov.w	r3, #0
 8010636:	4620      	mov	r0, r4
 8010638:	4629      	mov	r1, r5
 801063a:	f7ef fea9 	bl	8000390 <__aeabi_uldivmod>
 801063e:	4602      	mov	r2, r0
 8010640:	460b      	mov	r3, r1
 8010642:	4613      	mov	r3, r2
 8010644:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801064c:	d308      	bcc.n	8010660 <UART_SetConfig+0x784>
 801064e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010654:	d204      	bcs.n	8010660 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801065c:	60da      	str	r2, [r3, #12]
 801065e:	e180      	b.n	8010962 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8010660:	2301      	movs	r3, #1
 8010662:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010666:	e17c      	b.n	8010962 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	69db      	ldr	r3, [r3, #28]
 801066c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010670:	f040 80bf 	bne.w	80107f2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8010674:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010678:	2b20      	cmp	r3, #32
 801067a:	dc49      	bgt.n	8010710 <UART_SetConfig+0x834>
 801067c:	2b00      	cmp	r3, #0
 801067e:	db7c      	blt.n	801077a <UART_SetConfig+0x89e>
 8010680:	2b20      	cmp	r3, #32
 8010682:	d87a      	bhi.n	801077a <UART_SetConfig+0x89e>
 8010684:	a201      	add	r2, pc, #4	; (adr r2, 801068c <UART_SetConfig+0x7b0>)
 8010686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801068a:	bf00      	nop
 801068c:	08010717 	.word	0x08010717
 8010690:	0801071f 	.word	0x0801071f
 8010694:	0801077b 	.word	0x0801077b
 8010698:	0801077b 	.word	0x0801077b
 801069c:	08010727 	.word	0x08010727
 80106a0:	0801077b 	.word	0x0801077b
 80106a4:	0801077b 	.word	0x0801077b
 80106a8:	0801077b 	.word	0x0801077b
 80106ac:	08010737 	.word	0x08010737
 80106b0:	0801077b 	.word	0x0801077b
 80106b4:	0801077b 	.word	0x0801077b
 80106b8:	0801077b 	.word	0x0801077b
 80106bc:	0801077b 	.word	0x0801077b
 80106c0:	0801077b 	.word	0x0801077b
 80106c4:	0801077b 	.word	0x0801077b
 80106c8:	0801077b 	.word	0x0801077b
 80106cc:	08010747 	.word	0x08010747
 80106d0:	0801077b 	.word	0x0801077b
 80106d4:	0801077b 	.word	0x0801077b
 80106d8:	0801077b 	.word	0x0801077b
 80106dc:	0801077b 	.word	0x0801077b
 80106e0:	0801077b 	.word	0x0801077b
 80106e4:	0801077b 	.word	0x0801077b
 80106e8:	0801077b 	.word	0x0801077b
 80106ec:	0801077b 	.word	0x0801077b
 80106f0:	0801077b 	.word	0x0801077b
 80106f4:	0801077b 	.word	0x0801077b
 80106f8:	0801077b 	.word	0x0801077b
 80106fc:	0801077b 	.word	0x0801077b
 8010700:	0801077b 	.word	0x0801077b
 8010704:	0801077b 	.word	0x0801077b
 8010708:	0801077b 	.word	0x0801077b
 801070c:	0801076d 	.word	0x0801076d
 8010710:	2b40      	cmp	r3, #64	; 0x40
 8010712:	d02e      	beq.n	8010772 <UART_SetConfig+0x896>
 8010714:	e031      	b.n	801077a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010716:	f7fb f8ff 	bl	800b918 <HAL_RCC_GetPCLK1Freq>
 801071a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801071c:	e033      	b.n	8010786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801071e:	f7fb f911 	bl	800b944 <HAL_RCC_GetPCLK2Freq>
 8010722:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010724:	e02f      	b.n	8010786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010726:	f107 0314 	add.w	r3, r7, #20
 801072a:	4618      	mov	r0, r3
 801072c:	f7fc f876 	bl	800c81c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010730:	69bb      	ldr	r3, [r7, #24]
 8010732:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010734:	e027      	b.n	8010786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010736:	f107 0308 	add.w	r3, r7, #8
 801073a:	4618      	mov	r0, r3
 801073c:	f7fc f9c2 	bl	800cac4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010744:	e01f      	b.n	8010786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010746:	4b58      	ldr	r3, [pc, #352]	; (80108a8 <UART_SetConfig+0x9cc>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	f003 0320 	and.w	r3, r3, #32
 801074e:	2b00      	cmp	r3, #0
 8010750:	d009      	beq.n	8010766 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010752:	4b55      	ldr	r3, [pc, #340]	; (80108a8 <UART_SetConfig+0x9cc>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	08db      	lsrs	r3, r3, #3
 8010758:	f003 0303 	and.w	r3, r3, #3
 801075c:	4a53      	ldr	r2, [pc, #332]	; (80108ac <UART_SetConfig+0x9d0>)
 801075e:	fa22 f303 	lsr.w	r3, r2, r3
 8010762:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010764:	e00f      	b.n	8010786 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8010766:	4b51      	ldr	r3, [pc, #324]	; (80108ac <UART_SetConfig+0x9d0>)
 8010768:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801076a:	e00c      	b.n	8010786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801076c:	4b4c      	ldr	r3, [pc, #304]	; (80108a0 <UART_SetConfig+0x9c4>)
 801076e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010770:	e009      	b.n	8010786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010776:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010778:	e005      	b.n	8010786 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 801077a:	2300      	movs	r3, #0
 801077c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801077e:	2301      	movs	r3, #1
 8010780:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010784:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010788:	2b00      	cmp	r3, #0
 801078a:	f000 80ea 	beq.w	8010962 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010792:	4a44      	ldr	r2, [pc, #272]	; (80108a4 <UART_SetConfig+0x9c8>)
 8010794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010798:	461a      	mov	r2, r3
 801079a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079c:	fbb3 f3f2 	udiv	r3, r3, r2
 80107a0:	005a      	lsls	r2, r3, #1
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	085b      	lsrs	r3, r3, #1
 80107a8:	441a      	add	r2, r3
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80107b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b8:	2b0f      	cmp	r3, #15
 80107ba:	d916      	bls.n	80107ea <UART_SetConfig+0x90e>
 80107bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107c2:	d212      	bcs.n	80107ea <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80107c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c6:	b29b      	uxth	r3, r3
 80107c8:	f023 030f 	bic.w	r3, r3, #15
 80107cc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80107ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d0:	085b      	lsrs	r3, r3, #1
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	f003 0307 	and.w	r3, r3, #7
 80107d8:	b29a      	uxth	r2, r3
 80107da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80107dc:	4313      	orrs	r3, r2
 80107de:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80107e6:	60da      	str	r2, [r3, #12]
 80107e8:	e0bb      	b.n	8010962 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80107ea:	2301      	movs	r3, #1
 80107ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80107f0:	e0b7      	b.n	8010962 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80107f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80107f6:	2b20      	cmp	r3, #32
 80107f8:	dc4a      	bgt.n	8010890 <UART_SetConfig+0x9b4>
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	f2c0 8086 	blt.w	801090c <UART_SetConfig+0xa30>
 8010800:	2b20      	cmp	r3, #32
 8010802:	f200 8083 	bhi.w	801090c <UART_SetConfig+0xa30>
 8010806:	a201      	add	r2, pc, #4	; (adr r2, 801080c <UART_SetConfig+0x930>)
 8010808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801080c:	08010897 	.word	0x08010897
 8010810:	080108b1 	.word	0x080108b1
 8010814:	0801090d 	.word	0x0801090d
 8010818:	0801090d 	.word	0x0801090d
 801081c:	080108b9 	.word	0x080108b9
 8010820:	0801090d 	.word	0x0801090d
 8010824:	0801090d 	.word	0x0801090d
 8010828:	0801090d 	.word	0x0801090d
 801082c:	080108c9 	.word	0x080108c9
 8010830:	0801090d 	.word	0x0801090d
 8010834:	0801090d 	.word	0x0801090d
 8010838:	0801090d 	.word	0x0801090d
 801083c:	0801090d 	.word	0x0801090d
 8010840:	0801090d 	.word	0x0801090d
 8010844:	0801090d 	.word	0x0801090d
 8010848:	0801090d 	.word	0x0801090d
 801084c:	080108d9 	.word	0x080108d9
 8010850:	0801090d 	.word	0x0801090d
 8010854:	0801090d 	.word	0x0801090d
 8010858:	0801090d 	.word	0x0801090d
 801085c:	0801090d 	.word	0x0801090d
 8010860:	0801090d 	.word	0x0801090d
 8010864:	0801090d 	.word	0x0801090d
 8010868:	0801090d 	.word	0x0801090d
 801086c:	0801090d 	.word	0x0801090d
 8010870:	0801090d 	.word	0x0801090d
 8010874:	0801090d 	.word	0x0801090d
 8010878:	0801090d 	.word	0x0801090d
 801087c:	0801090d 	.word	0x0801090d
 8010880:	0801090d 	.word	0x0801090d
 8010884:	0801090d 	.word	0x0801090d
 8010888:	0801090d 	.word	0x0801090d
 801088c:	080108ff 	.word	0x080108ff
 8010890:	2b40      	cmp	r3, #64	; 0x40
 8010892:	d037      	beq.n	8010904 <UART_SetConfig+0xa28>
 8010894:	e03a      	b.n	801090c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010896:	f7fb f83f 	bl	800b918 <HAL_RCC_GetPCLK1Freq>
 801089a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801089c:	e03c      	b.n	8010918 <UART_SetConfig+0xa3c>
 801089e:	bf00      	nop
 80108a0:	003d0900 	.word	0x003d0900
 80108a4:	0801466c 	.word	0x0801466c
 80108a8:	58024400 	.word	0x58024400
 80108ac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80108b0:	f7fb f848 	bl	800b944 <HAL_RCC_GetPCLK2Freq>
 80108b4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80108b6:	e02f      	b.n	8010918 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80108b8:	f107 0314 	add.w	r3, r7, #20
 80108bc:	4618      	mov	r0, r3
 80108be:	f7fb ffad 	bl	800c81c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80108c2:	69bb      	ldr	r3, [r7, #24]
 80108c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108c6:	e027      	b.n	8010918 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80108c8:	f107 0308 	add.w	r3, r7, #8
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fc f8f9 	bl	800cac4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108d6:	e01f      	b.n	8010918 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80108d8:	4b2c      	ldr	r3, [pc, #176]	; (801098c <UART_SetConfig+0xab0>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	f003 0320 	and.w	r3, r3, #32
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d009      	beq.n	80108f8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80108e4:	4b29      	ldr	r3, [pc, #164]	; (801098c <UART_SetConfig+0xab0>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	08db      	lsrs	r3, r3, #3
 80108ea:	f003 0303 	and.w	r3, r3, #3
 80108ee:	4a28      	ldr	r2, [pc, #160]	; (8010990 <UART_SetConfig+0xab4>)
 80108f0:	fa22 f303 	lsr.w	r3, r2, r3
 80108f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80108f6:	e00f      	b.n	8010918 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80108f8:	4b25      	ldr	r3, [pc, #148]	; (8010990 <UART_SetConfig+0xab4>)
 80108fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108fc:	e00c      	b.n	8010918 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80108fe:	4b25      	ldr	r3, [pc, #148]	; (8010994 <UART_SetConfig+0xab8>)
 8010900:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010902:	e009      	b.n	8010918 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010904:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010908:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801090a:	e005      	b.n	8010918 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 801090c:	2300      	movs	r3, #0
 801090e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010910:	2301      	movs	r3, #1
 8010912:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010916:	bf00      	nop
    }

    if (pclk != 0U)
 8010918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801091a:	2b00      	cmp	r3, #0
 801091c:	d021      	beq.n	8010962 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010922:	4a1d      	ldr	r2, [pc, #116]	; (8010998 <UART_SetConfig+0xabc>)
 8010924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010928:	461a      	mov	r2, r3
 801092a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801092c:	fbb3 f2f2 	udiv	r2, r3, r2
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	085b      	lsrs	r3, r3, #1
 8010936:	441a      	add	r2, r3
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	685b      	ldr	r3, [r3, #4]
 801093c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010940:	b29b      	uxth	r3, r3
 8010942:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010946:	2b0f      	cmp	r3, #15
 8010948:	d908      	bls.n	801095c <UART_SetConfig+0xa80>
 801094a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010950:	d204      	bcs.n	801095c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010958:	60da      	str	r2, [r3, #12]
 801095a:	e002      	b.n	8010962 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 801095c:	2301      	movs	r3, #1
 801095e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2201      	movs	r2, #1
 8010966:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2201      	movs	r2, #1
 801096e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2200      	movs	r2, #0
 8010976:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2200      	movs	r2, #0
 801097c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801097e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8010982:	4618      	mov	r0, r3
 8010984:	3738      	adds	r7, #56	; 0x38
 8010986:	46bd      	mov	sp, r7
 8010988:	bdb0      	pop	{r4, r5, r7, pc}
 801098a:	bf00      	nop
 801098c:	58024400 	.word	0x58024400
 8010990:	03d09000 	.word	0x03d09000
 8010994:	003d0900 	.word	0x003d0900
 8010998:	0801466c 	.word	0x0801466c

0801099c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801099c:	b480      	push	{r7}
 801099e:	b083      	sub	sp, #12
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109a8:	f003 0301 	and.w	r3, r3, #1
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d00a      	beq.n	80109c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	430a      	orrs	r2, r1
 80109c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109ca:	f003 0302 	and.w	r3, r3, #2
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d00a      	beq.n	80109e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	685b      	ldr	r3, [r3, #4]
 80109d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	430a      	orrs	r2, r1
 80109e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109ec:	f003 0304 	and.w	r3, r3, #4
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d00a      	beq.n	8010a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	685b      	ldr	r3, [r3, #4]
 80109fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	430a      	orrs	r2, r1
 8010a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a0e:	f003 0308 	and.w	r3, r3, #8
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d00a      	beq.n	8010a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	685b      	ldr	r3, [r3, #4]
 8010a1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	430a      	orrs	r2, r1
 8010a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a30:	f003 0310 	and.w	r3, r3, #16
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d00a      	beq.n	8010a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	689b      	ldr	r3, [r3, #8]
 8010a3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	430a      	orrs	r2, r1
 8010a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a52:	f003 0320 	and.w	r3, r3, #32
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d00a      	beq.n	8010a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	689b      	ldr	r3, [r3, #8]
 8010a60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	430a      	orrs	r2, r1
 8010a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d01a      	beq.n	8010ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	685b      	ldr	r3, [r3, #4]
 8010a82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	430a      	orrs	r2, r1
 8010a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a9a:	d10a      	bne.n	8010ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	685b      	ldr	r3, [r3, #4]
 8010aa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	430a      	orrs	r2, r1
 8010ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d00a      	beq.n	8010ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	685b      	ldr	r3, [r3, #4]
 8010ac4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	430a      	orrs	r2, r1
 8010ad2:	605a      	str	r2, [r3, #4]
  }
}
 8010ad4:	bf00      	nop
 8010ad6:	370c      	adds	r7, #12
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ade:	4770      	bx	lr

08010ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b086      	sub	sp, #24
 8010ae4:	af02      	add	r7, sp, #8
 8010ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2200      	movs	r2, #0
 8010aec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010af0:	f7f4 fbaa 	bl	8005248 <HAL_GetTick>
 8010af4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f003 0308 	and.w	r3, r3, #8
 8010b00:	2b08      	cmp	r3, #8
 8010b02:	d10e      	bne.n	8010b22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010b04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010b08:	9300      	str	r3, [sp, #0]
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f000 f82f 	bl	8010b76 <UART_WaitOnFlagUntilTimeout>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d001      	beq.n	8010b22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010b1e:	2303      	movs	r3, #3
 8010b20:	e025      	b.n	8010b6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f003 0304 	and.w	r3, r3, #4
 8010b2c:	2b04      	cmp	r3, #4
 8010b2e:	d10e      	bne.n	8010b4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010b34:	9300      	str	r3, [sp, #0]
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f000 f819 	bl	8010b76 <UART_WaitOnFlagUntilTimeout>
 8010b44:	4603      	mov	r3, r0
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d001      	beq.n	8010b4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010b4a:	2303      	movs	r3, #3
 8010b4c:	e00f      	b.n	8010b6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2220      	movs	r2, #32
 8010b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2220      	movs	r2, #32
 8010b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2200      	movs	r2, #0
 8010b62:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2200      	movs	r2, #0
 8010b68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010b6c:	2300      	movs	r3, #0
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3710      	adds	r7, #16
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}

08010b76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b76:	b580      	push	{r7, lr}
 8010b78:	b084      	sub	sp, #16
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	60f8      	str	r0, [r7, #12]
 8010b7e:	60b9      	str	r1, [r7, #8]
 8010b80:	603b      	str	r3, [r7, #0]
 8010b82:	4613      	mov	r3, r2
 8010b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b86:	e062      	b.n	8010c4e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b88:	69bb      	ldr	r3, [r7, #24]
 8010b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b8e:	d05e      	beq.n	8010c4e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b90:	f7f4 fb5a 	bl	8005248 <HAL_GetTick>
 8010b94:	4602      	mov	r2, r0
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	1ad3      	subs	r3, r2, r3
 8010b9a:	69ba      	ldr	r2, [r7, #24]
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	d302      	bcc.n	8010ba6 <UART_WaitOnFlagUntilTimeout+0x30>
 8010ba0:	69bb      	ldr	r3, [r7, #24]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d11d      	bne.n	8010be2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010bb4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	689a      	ldr	r2, [r3, #8]
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	f022 0201 	bic.w	r2, r2, #1
 8010bc4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	2220      	movs	r2, #32
 8010bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	2220      	movs	r2, #32
 8010bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2200      	movs	r2, #0
 8010bda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010bde:	2303      	movs	r3, #3
 8010be0:	e045      	b.n	8010c6e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	f003 0304 	and.w	r3, r3, #4
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d02e      	beq.n	8010c4e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	69db      	ldr	r3, [r3, #28]
 8010bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010bfe:	d126      	bne.n	8010c4e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010c08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	681a      	ldr	r2, [r3, #0]
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010c18:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	689a      	ldr	r2, [r3, #8]
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	f022 0201 	bic.w	r2, r2, #1
 8010c28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	2220      	movs	r2, #32
 8010c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	2220      	movs	r2, #32
 8010c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	2220      	movs	r2, #32
 8010c3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	2200      	movs	r2, #0
 8010c46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010c4a:	2303      	movs	r3, #3
 8010c4c:	e00f      	b.n	8010c6e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	69da      	ldr	r2, [r3, #28]
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	4013      	ands	r3, r2
 8010c58:	68ba      	ldr	r2, [r7, #8]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	bf0c      	ite	eq
 8010c5e:	2301      	moveq	r3, #1
 8010c60:	2300      	movne	r3, #0
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	461a      	mov	r2, r3
 8010c66:	79fb      	ldrb	r3, [r7, #7]
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d08d      	beq.n	8010b88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010c6c:	2300      	movs	r3, #0
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3710      	adds	r7, #16
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}
	...

08010c78 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b084      	sub	sp, #16
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	60f8      	str	r0, [r7, #12]
 8010c80:	60b9      	str	r1, [r7, #8]
 8010c82:	4613      	mov	r3, r2
 8010c84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	68ba      	ldr	r2, [r7, #8]
 8010c8a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	88fa      	ldrh	r2, [r7, #6]
 8010c90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	2200      	movs	r2, #0
 8010c98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	2222      	movs	r2, #34	; 0x22
 8010ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d02c      	beq.n	8010d06 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010cb0:	4a25      	ldr	r2, [pc, #148]	; (8010d48 <UART_Start_Receive_DMA+0xd0>)
 8010cb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010cb8:	4a24      	ldr	r2, [pc, #144]	; (8010d4c <UART_Start_Receive_DMA+0xd4>)
 8010cba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010cc0:	4a23      	ldr	r2, [pc, #140]	; (8010d50 <UART_Start_Receive_DMA+0xd8>)
 8010cc2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010cc8:	2200      	movs	r2, #0
 8010cca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	3324      	adds	r3, #36	; 0x24
 8010cd6:	4619      	mov	r1, r3
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cdc:	461a      	mov	r2, r3
 8010cde:	88fb      	ldrh	r3, [r7, #6]
 8010ce0:	f7f4 ff5a 	bl	8005b98 <HAL_DMA_Start_IT>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d00d      	beq.n	8010d06 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	2210      	movs	r2, #16
 8010cee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	2220      	movs	r2, #32
 8010cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8010d02:	2301      	movs	r3, #1
 8010d04:	e01c      	b.n	8010d40 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	2200      	movs	r2, #0
 8010d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	681a      	ldr	r2, [r3, #0]
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010d1c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	689a      	ldr	r2, [r3, #8]
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	f042 0201 	orr.w	r2, r2, #1
 8010d2c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	689a      	ldr	r2, [r3, #8]
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010d3c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8010d3e:	2300      	movs	r3, #0
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	3710      	adds	r7, #16
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	08010e61 	.word	0x08010e61
 8010d4c:	08010ef7 	.word	0x08010ef7
 8010d50:	08010f2f 	.word	0x08010f2f

08010d54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b083      	sub	sp, #12
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	681a      	ldr	r2, [r3, #0]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010d6a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	689a      	ldr	r2, [r3, #8]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010d7a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2220      	movs	r2, #32
 8010d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8010d84:	bf00      	nop
 8010d86:	370c      	adds	r7, #12
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8e:	4770      	bx	lr

08010d90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010d90:	b480      	push	{r7}
 8010d92:	b083      	sub	sp, #12
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	681a      	ldr	r2, [r3, #0]
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010da6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	6899      	ldr	r1, [r3, #8]
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	4b0f      	ldr	r3, [pc, #60]	; (8010df0 <UART_EndRxTransfer+0x60>)
 8010db4:	400b      	ands	r3, r1
 8010db6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dbc:	2b01      	cmp	r3, #1
 8010dbe:	d107      	bne.n	8010dd0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	681a      	ldr	r2, [r3, #0]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	f022 0210 	bic.w	r2, r2, #16
 8010dce:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2220      	movs	r2, #32
 8010dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2200      	movs	r2, #0
 8010de2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010de4:	bf00      	nop
 8010de6:	370c      	adds	r7, #12
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr
 8010df0:	effffffe 	.word	0xeffffffe

08010df4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b084      	sub	sp, #16
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e00:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	69db      	ldr	r3, [r3, #28]
 8010e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e0a:	d014      	beq.n	8010e36 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	2200      	movs	r2, #0
 8010e10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	689a      	ldr	r2, [r3, #8]
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010e22:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	681a      	ldr	r2, [r3, #0]
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010e32:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010e34:	e002      	b.n	8010e3c <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8010e36:	68f8      	ldr	r0, [r7, #12]
 8010e38:	f7ff f81c 	bl	800fe74 <HAL_UART_TxCpltCallback>
}
 8010e3c:	bf00      	nop
 8010e3e:	3710      	adds	r7, #16
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}

08010e44 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b084      	sub	sp, #16
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e50:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010e52:	68f8      	ldr	r0, [r7, #12]
 8010e54:	f7ff f818 	bl	800fe88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e58:	bf00      	nop
 8010e5a:	3710      	adds	r7, #16
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b084      	sub	sp, #16
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e6c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	69db      	ldr	r3, [r3, #28]
 8010e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e76:	d02b      	beq.n	8010ed0 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	681a      	ldr	r2, [r3, #0]
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010e8e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	689a      	ldr	r2, [r3, #8]
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	f022 0201 	bic.w	r2, r2, #1
 8010e9e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	689a      	ldr	r2, [r3, #8]
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010eae:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2220      	movs	r2, #32
 8010eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ebc:	2b01      	cmp	r3, #1
 8010ebe:	d107      	bne.n	8010ed0 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	681a      	ldr	r2, [r3, #0]
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f022 0210 	bic.w	r2, r2, #16
 8010ece:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d107      	bne.n	8010ee8 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010ede:	4619      	mov	r1, r3
 8010ee0:	68f8      	ldr	r0, [r7, #12]
 8010ee2:	f7fe ffef 	bl	800fec4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010ee6:	e002      	b.n	8010eee <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8010ee8:	68f8      	ldr	r0, [r7, #12]
 8010eea:	f7f3 fa5d 	bl	80043a8 <HAL_UART_RxCpltCallback>
}
 8010eee:	bf00      	nop
 8010ef0:	3710      	adds	r7, #16
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}

08010ef6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010ef6:	b580      	push	{r7, lr}
 8010ef8:	b084      	sub	sp, #16
 8010efa:	af00      	add	r7, sp, #0
 8010efc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f02:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f08:	2b01      	cmp	r3, #1
 8010f0a:	d109      	bne.n	8010f20 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010f12:	085b      	lsrs	r3, r3, #1
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	4619      	mov	r1, r3
 8010f18:	68f8      	ldr	r0, [r7, #12]
 8010f1a:	f7fe ffd3 	bl	800fec4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010f1e:	e002      	b.n	8010f26 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8010f20:	68f8      	ldr	r0, [r7, #12]
 8010f22:	f7fe ffbb 	bl	800fe9c <HAL_UART_RxHalfCpltCallback>
}
 8010f26:	bf00      	nop
 8010f28:	3710      	adds	r7, #16
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}

08010f2e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010f2e:	b580      	push	{r7, lr}
 8010f30:	b086      	sub	sp, #24
 8010f32:	af00      	add	r7, sp, #0
 8010f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f3a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f42:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f4a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	689b      	ldr	r3, [r3, #8]
 8010f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f56:	2b80      	cmp	r3, #128	; 0x80
 8010f58:	d109      	bne.n	8010f6e <UART_DMAError+0x40>
 8010f5a:	693b      	ldr	r3, [r7, #16]
 8010f5c:	2b21      	cmp	r3, #33	; 0x21
 8010f5e:	d106      	bne.n	8010f6e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	2200      	movs	r2, #0
 8010f64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010f68:	6978      	ldr	r0, [r7, #20]
 8010f6a:	f7ff fef3 	bl	8010d54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	689b      	ldr	r3, [r3, #8]
 8010f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f78:	2b40      	cmp	r3, #64	; 0x40
 8010f7a:	d109      	bne.n	8010f90 <UART_DMAError+0x62>
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2b22      	cmp	r3, #34	; 0x22
 8010f80:	d106      	bne.n	8010f90 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	2200      	movs	r2, #0
 8010f86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010f8a:	6978      	ldr	r0, [r7, #20]
 8010f8c:	f7ff ff00 	bl	8010d90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f96:	f043 0210 	orr.w	r2, r3, #16
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010fa0:	6978      	ldr	r0, [r7, #20]
 8010fa2:	f7fe ff85 	bl	800feb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010fa6:	bf00      	nop
 8010fa8:	3718      	adds	r7, #24
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}

08010fae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010fae:	b580      	push	{r7, lr}
 8010fb0:	b084      	sub	sp, #16
 8010fb2:	af00      	add	r7, sp, #0
 8010fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010fcc:	68f8      	ldr	r0, [r7, #12]
 8010fce:	f7fe ff6f 	bl	800feb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010fd2:	bf00      	nop
 8010fd4:	3710      	adds	r7, #16
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}

08010fda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010fda:	b580      	push	{r7, lr}
 8010fdc:	b082      	sub	sp, #8
 8010fde:	af00      	add	r7, sp, #0
 8010fe0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	681a      	ldr	r2, [r3, #0]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010ff0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2220      	movs	r2, #32
 8010ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f7fe ff37 	bl	800fe74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011006:	bf00      	nop
 8011008:	3708      	adds	r7, #8
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}

0801100e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801100e:	b480      	push	{r7}
 8011010:	b083      	sub	sp, #12
 8011012:	af00      	add	r7, sp, #0
 8011014:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011016:	bf00      	nop
 8011018:	370c      	adds	r7, #12
 801101a:	46bd      	mov	sp, r7
 801101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011020:	4770      	bx	lr

08011022 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011022:	b480      	push	{r7}
 8011024:	b083      	sub	sp, #12
 8011026:	af00      	add	r7, sp, #0
 8011028:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801102a:	bf00      	nop
 801102c:	370c      	adds	r7, #12
 801102e:	46bd      	mov	sp, r7
 8011030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011034:	4770      	bx	lr

08011036 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011036:	b480      	push	{r7}
 8011038:	b083      	sub	sp, #12
 801103a:	af00      	add	r7, sp, #0
 801103c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801103e:	bf00      	nop
 8011040:	370c      	adds	r7, #12
 8011042:	46bd      	mov	sp, r7
 8011044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011048:	4770      	bx	lr

0801104a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801104a:	b480      	push	{r7}
 801104c:	b085      	sub	sp, #20
 801104e:	af00      	add	r7, sp, #0
 8011050:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011058:	2b01      	cmp	r3, #1
 801105a:	d101      	bne.n	8011060 <HAL_UARTEx_DisableFifoMode+0x16>
 801105c:	2302      	movs	r3, #2
 801105e:	e027      	b.n	80110b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2201      	movs	r2, #1
 8011064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2224      	movs	r2, #36	; 0x24
 801106c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	681a      	ldr	r2, [r3, #0]
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	f022 0201 	bic.w	r2, r2, #1
 8011086:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801108e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2200      	movs	r2, #0
 8011094:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	68fa      	ldr	r2, [r7, #12]
 801109c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2220      	movs	r2, #32
 80110a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2200      	movs	r2, #0
 80110aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80110ae:	2300      	movs	r3, #0
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	3714      	adds	r7, #20
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr

080110bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b084      	sub	sp, #16
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80110cc:	2b01      	cmp	r3, #1
 80110ce:	d101      	bne.n	80110d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80110d0:	2302      	movs	r3, #2
 80110d2:	e02d      	b.n	8011130 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2201      	movs	r2, #1
 80110d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2224      	movs	r2, #36	; 0x24
 80110e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	681a      	ldr	r2, [r3, #0]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	f022 0201 	bic.w	r2, r2, #1
 80110fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	689b      	ldr	r3, [r3, #8]
 8011102:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	683a      	ldr	r2, [r7, #0]
 801110c:	430a      	orrs	r2, r1
 801110e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f000 f84f 	bl	80111b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	68fa      	ldr	r2, [r7, #12]
 801111c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2220      	movs	r2, #32
 8011122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2200      	movs	r2, #0
 801112a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801112e:	2300      	movs	r3, #0
}
 8011130:	4618      	mov	r0, r3
 8011132:	3710      	adds	r7, #16
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b084      	sub	sp, #16
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011148:	2b01      	cmp	r3, #1
 801114a:	d101      	bne.n	8011150 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801114c:	2302      	movs	r3, #2
 801114e:	e02d      	b.n	80111ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2201      	movs	r2, #1
 8011154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2224      	movs	r2, #36	; 0x24
 801115c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	681a      	ldr	r2, [r3, #0]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f022 0201 	bic.w	r2, r2, #1
 8011176:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	689b      	ldr	r3, [r3, #8]
 801117e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	683a      	ldr	r2, [r7, #0]
 8011188:	430a      	orrs	r2, r1
 801118a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f000 f811 	bl	80111b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	68fa      	ldr	r2, [r7, #12]
 8011198:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2220      	movs	r2, #32
 801119e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2200      	movs	r2, #0
 80111a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80111aa:	2300      	movs	r3, #0
}
 80111ac:	4618      	mov	r0, r3
 80111ae:	3710      	adds	r7, #16
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}

080111b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80111b4:	b480      	push	{r7}
 80111b6:	b085      	sub	sp, #20
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d108      	bne.n	80111d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2201      	movs	r2, #1
 80111c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2201      	movs	r2, #1
 80111d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80111d4:	e031      	b.n	801123a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80111d6:	2310      	movs	r3, #16
 80111d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80111da:	2310      	movs	r3, #16
 80111dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	689b      	ldr	r3, [r3, #8]
 80111e4:	0e5b      	lsrs	r3, r3, #25
 80111e6:	b2db      	uxtb	r3, r3
 80111e8:	f003 0307 	and.w	r3, r3, #7
 80111ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	689b      	ldr	r3, [r3, #8]
 80111f4:	0f5b      	lsrs	r3, r3, #29
 80111f6:	b2db      	uxtb	r3, r3
 80111f8:	f003 0307 	and.w	r3, r3, #7
 80111fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111fe:	7bbb      	ldrb	r3, [r7, #14]
 8011200:	7b3a      	ldrb	r2, [r7, #12]
 8011202:	4911      	ldr	r1, [pc, #68]	; (8011248 <UARTEx_SetNbDataToProcess+0x94>)
 8011204:	5c8a      	ldrb	r2, [r1, r2]
 8011206:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801120a:	7b3a      	ldrb	r2, [r7, #12]
 801120c:	490f      	ldr	r1, [pc, #60]	; (801124c <UARTEx_SetNbDataToProcess+0x98>)
 801120e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011210:	fb93 f3f2 	sdiv	r3, r3, r2
 8011214:	b29a      	uxth	r2, r3
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801121c:	7bfb      	ldrb	r3, [r7, #15]
 801121e:	7b7a      	ldrb	r2, [r7, #13]
 8011220:	4909      	ldr	r1, [pc, #36]	; (8011248 <UARTEx_SetNbDataToProcess+0x94>)
 8011222:	5c8a      	ldrb	r2, [r1, r2]
 8011224:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011228:	7b7a      	ldrb	r2, [r7, #13]
 801122a:	4908      	ldr	r1, [pc, #32]	; (801124c <UARTEx_SetNbDataToProcess+0x98>)
 801122c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801122e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011232:	b29a      	uxth	r2, r3
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801123a:	bf00      	nop
 801123c:	3714      	adds	r7, #20
 801123e:	46bd      	mov	sp, r7
 8011240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011244:	4770      	bx	lr
 8011246:	bf00      	nop
 8011248:	08014684 	.word	0x08014684
 801124c:	0801468c 	.word	0x0801468c

08011250 <__errno>:
 8011250:	4b01      	ldr	r3, [pc, #4]	; (8011258 <__errno+0x8>)
 8011252:	6818      	ldr	r0, [r3, #0]
 8011254:	4770      	bx	lr
 8011256:	bf00      	nop
 8011258:	24000024 	.word	0x24000024

0801125c <__libc_init_array>:
 801125c:	b570      	push	{r4, r5, r6, lr}
 801125e:	4d0d      	ldr	r5, [pc, #52]	; (8011294 <__libc_init_array+0x38>)
 8011260:	4c0d      	ldr	r4, [pc, #52]	; (8011298 <__libc_init_array+0x3c>)
 8011262:	1b64      	subs	r4, r4, r5
 8011264:	10a4      	asrs	r4, r4, #2
 8011266:	2600      	movs	r6, #0
 8011268:	42a6      	cmp	r6, r4
 801126a:	d109      	bne.n	8011280 <__libc_init_array+0x24>
 801126c:	4d0b      	ldr	r5, [pc, #44]	; (801129c <__libc_init_array+0x40>)
 801126e:	4c0c      	ldr	r4, [pc, #48]	; (80112a0 <__libc_init_array+0x44>)
 8011270:	f003 f994 	bl	801459c <_init>
 8011274:	1b64      	subs	r4, r4, r5
 8011276:	10a4      	asrs	r4, r4, #2
 8011278:	2600      	movs	r6, #0
 801127a:	42a6      	cmp	r6, r4
 801127c:	d105      	bne.n	801128a <__libc_init_array+0x2e>
 801127e:	bd70      	pop	{r4, r5, r6, pc}
 8011280:	f855 3b04 	ldr.w	r3, [r5], #4
 8011284:	4798      	blx	r3
 8011286:	3601      	adds	r6, #1
 8011288:	e7ee      	b.n	8011268 <__libc_init_array+0xc>
 801128a:	f855 3b04 	ldr.w	r3, [r5], #4
 801128e:	4798      	blx	r3
 8011290:	3601      	adds	r6, #1
 8011292:	e7f2      	b.n	801127a <__libc_init_array+0x1e>
 8011294:	08014b28 	.word	0x08014b28
 8011298:	08014b28 	.word	0x08014b28
 801129c:	08014b28 	.word	0x08014b28
 80112a0:	08014b2c 	.word	0x08014b2c

080112a4 <memset>:
 80112a4:	4402      	add	r2, r0
 80112a6:	4603      	mov	r3, r0
 80112a8:	4293      	cmp	r3, r2
 80112aa:	d100      	bne.n	80112ae <memset+0xa>
 80112ac:	4770      	bx	lr
 80112ae:	f803 1b01 	strb.w	r1, [r3], #1
 80112b2:	e7f9      	b.n	80112a8 <memset+0x4>

080112b4 <__cvt>:
 80112b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112b6:	ed2d 8b02 	vpush	{d8}
 80112ba:	eeb0 8b40 	vmov.f64	d8, d0
 80112be:	b085      	sub	sp, #20
 80112c0:	4617      	mov	r7, r2
 80112c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80112c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80112c6:	ee18 2a90 	vmov	r2, s17
 80112ca:	f025 0520 	bic.w	r5, r5, #32
 80112ce:	2a00      	cmp	r2, #0
 80112d0:	bfb6      	itet	lt
 80112d2:	222d      	movlt	r2, #45	; 0x2d
 80112d4:	2200      	movge	r2, #0
 80112d6:	eeb1 8b40 	vneglt.f64	d8, d0
 80112da:	2d46      	cmp	r5, #70	; 0x46
 80112dc:	460c      	mov	r4, r1
 80112de:	701a      	strb	r2, [r3, #0]
 80112e0:	d004      	beq.n	80112ec <__cvt+0x38>
 80112e2:	2d45      	cmp	r5, #69	; 0x45
 80112e4:	d100      	bne.n	80112e8 <__cvt+0x34>
 80112e6:	3401      	adds	r4, #1
 80112e8:	2102      	movs	r1, #2
 80112ea:	e000      	b.n	80112ee <__cvt+0x3a>
 80112ec:	2103      	movs	r1, #3
 80112ee:	ab03      	add	r3, sp, #12
 80112f0:	9301      	str	r3, [sp, #4]
 80112f2:	ab02      	add	r3, sp, #8
 80112f4:	9300      	str	r3, [sp, #0]
 80112f6:	4622      	mov	r2, r4
 80112f8:	4633      	mov	r3, r6
 80112fa:	eeb0 0b48 	vmov.f64	d0, d8
 80112fe:	f000 fdf7 	bl	8011ef0 <_dtoa_r>
 8011302:	2d47      	cmp	r5, #71	; 0x47
 8011304:	d109      	bne.n	801131a <__cvt+0x66>
 8011306:	07fb      	lsls	r3, r7, #31
 8011308:	d407      	bmi.n	801131a <__cvt+0x66>
 801130a:	9b03      	ldr	r3, [sp, #12]
 801130c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801130e:	1a1b      	subs	r3, r3, r0
 8011310:	6013      	str	r3, [r2, #0]
 8011312:	b005      	add	sp, #20
 8011314:	ecbd 8b02 	vpop	{d8}
 8011318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801131a:	2d46      	cmp	r5, #70	; 0x46
 801131c:	eb00 0204 	add.w	r2, r0, r4
 8011320:	d10c      	bne.n	801133c <__cvt+0x88>
 8011322:	7803      	ldrb	r3, [r0, #0]
 8011324:	2b30      	cmp	r3, #48	; 0x30
 8011326:	d107      	bne.n	8011338 <__cvt+0x84>
 8011328:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011330:	bf1c      	itt	ne
 8011332:	f1c4 0401 	rsbne	r4, r4, #1
 8011336:	6034      	strne	r4, [r6, #0]
 8011338:	6833      	ldr	r3, [r6, #0]
 801133a:	441a      	add	r2, r3
 801133c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011344:	bf08      	it	eq
 8011346:	9203      	streq	r2, [sp, #12]
 8011348:	2130      	movs	r1, #48	; 0x30
 801134a:	9b03      	ldr	r3, [sp, #12]
 801134c:	4293      	cmp	r3, r2
 801134e:	d2dc      	bcs.n	801130a <__cvt+0x56>
 8011350:	1c5c      	adds	r4, r3, #1
 8011352:	9403      	str	r4, [sp, #12]
 8011354:	7019      	strb	r1, [r3, #0]
 8011356:	e7f8      	b.n	801134a <__cvt+0x96>

08011358 <__exponent>:
 8011358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801135a:	4603      	mov	r3, r0
 801135c:	2900      	cmp	r1, #0
 801135e:	bfb8      	it	lt
 8011360:	4249      	neglt	r1, r1
 8011362:	f803 2b02 	strb.w	r2, [r3], #2
 8011366:	bfb4      	ite	lt
 8011368:	222d      	movlt	r2, #45	; 0x2d
 801136a:	222b      	movge	r2, #43	; 0x2b
 801136c:	2909      	cmp	r1, #9
 801136e:	7042      	strb	r2, [r0, #1]
 8011370:	dd2a      	ble.n	80113c8 <__exponent+0x70>
 8011372:	f10d 0407 	add.w	r4, sp, #7
 8011376:	46a4      	mov	ip, r4
 8011378:	270a      	movs	r7, #10
 801137a:	46a6      	mov	lr, r4
 801137c:	460a      	mov	r2, r1
 801137e:	fb91 f6f7 	sdiv	r6, r1, r7
 8011382:	fb07 1516 	mls	r5, r7, r6, r1
 8011386:	3530      	adds	r5, #48	; 0x30
 8011388:	2a63      	cmp	r2, #99	; 0x63
 801138a:	f104 34ff 	add.w	r4, r4, #4294967295
 801138e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011392:	4631      	mov	r1, r6
 8011394:	dcf1      	bgt.n	801137a <__exponent+0x22>
 8011396:	3130      	adds	r1, #48	; 0x30
 8011398:	f1ae 0502 	sub.w	r5, lr, #2
 801139c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80113a0:	1c44      	adds	r4, r0, #1
 80113a2:	4629      	mov	r1, r5
 80113a4:	4561      	cmp	r1, ip
 80113a6:	d30a      	bcc.n	80113be <__exponent+0x66>
 80113a8:	f10d 0209 	add.w	r2, sp, #9
 80113ac:	eba2 020e 	sub.w	r2, r2, lr
 80113b0:	4565      	cmp	r5, ip
 80113b2:	bf88      	it	hi
 80113b4:	2200      	movhi	r2, #0
 80113b6:	4413      	add	r3, r2
 80113b8:	1a18      	subs	r0, r3, r0
 80113ba:	b003      	add	sp, #12
 80113bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80113c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80113c6:	e7ed      	b.n	80113a4 <__exponent+0x4c>
 80113c8:	2330      	movs	r3, #48	; 0x30
 80113ca:	3130      	adds	r1, #48	; 0x30
 80113cc:	7083      	strb	r3, [r0, #2]
 80113ce:	70c1      	strb	r1, [r0, #3]
 80113d0:	1d03      	adds	r3, r0, #4
 80113d2:	e7f1      	b.n	80113b8 <__exponent+0x60>
 80113d4:	0000      	movs	r0, r0
	...

080113d8 <_printf_float>:
 80113d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113dc:	b08b      	sub	sp, #44	; 0x2c
 80113de:	460c      	mov	r4, r1
 80113e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80113e4:	4616      	mov	r6, r2
 80113e6:	461f      	mov	r7, r3
 80113e8:	4605      	mov	r5, r0
 80113ea:	f001 fcbb 	bl	8012d64 <_localeconv_r>
 80113ee:	f8d0 b000 	ldr.w	fp, [r0]
 80113f2:	4658      	mov	r0, fp
 80113f4:	f7ee ff74 	bl	80002e0 <strlen>
 80113f8:	2300      	movs	r3, #0
 80113fa:	9308      	str	r3, [sp, #32]
 80113fc:	f8d8 3000 	ldr.w	r3, [r8]
 8011400:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011404:	6822      	ldr	r2, [r4, #0]
 8011406:	3307      	adds	r3, #7
 8011408:	f023 0307 	bic.w	r3, r3, #7
 801140c:	f103 0108 	add.w	r1, r3, #8
 8011410:	f8c8 1000 	str.w	r1, [r8]
 8011414:	4682      	mov	sl, r0
 8011416:	e9d3 0100 	ldrd	r0, r1, [r3]
 801141a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801141e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011680 <_printf_float+0x2a8>
 8011422:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011426:	eeb0 6bc0 	vabs.f64	d6, d0
 801142a:	eeb4 6b47 	vcmp.f64	d6, d7
 801142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011432:	dd24      	ble.n	801147e <_printf_float+0xa6>
 8011434:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801143c:	d502      	bpl.n	8011444 <_printf_float+0x6c>
 801143e:	232d      	movs	r3, #45	; 0x2d
 8011440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011444:	4b90      	ldr	r3, [pc, #576]	; (8011688 <_printf_float+0x2b0>)
 8011446:	4891      	ldr	r0, [pc, #580]	; (801168c <_printf_float+0x2b4>)
 8011448:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801144c:	bf94      	ite	ls
 801144e:	4698      	movls	r8, r3
 8011450:	4680      	movhi	r8, r0
 8011452:	2303      	movs	r3, #3
 8011454:	6123      	str	r3, [r4, #16]
 8011456:	f022 0204 	bic.w	r2, r2, #4
 801145a:	2300      	movs	r3, #0
 801145c:	6022      	str	r2, [r4, #0]
 801145e:	9304      	str	r3, [sp, #16]
 8011460:	9700      	str	r7, [sp, #0]
 8011462:	4633      	mov	r3, r6
 8011464:	aa09      	add	r2, sp, #36	; 0x24
 8011466:	4621      	mov	r1, r4
 8011468:	4628      	mov	r0, r5
 801146a:	f000 f9d3 	bl	8011814 <_printf_common>
 801146e:	3001      	adds	r0, #1
 8011470:	f040 808a 	bne.w	8011588 <_printf_float+0x1b0>
 8011474:	f04f 30ff 	mov.w	r0, #4294967295
 8011478:	b00b      	add	sp, #44	; 0x2c
 801147a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801147e:	eeb4 0b40 	vcmp.f64	d0, d0
 8011482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011486:	d709      	bvc.n	801149c <_printf_float+0xc4>
 8011488:	ee10 3a90 	vmov	r3, s1
 801148c:	2b00      	cmp	r3, #0
 801148e:	bfbc      	itt	lt
 8011490:	232d      	movlt	r3, #45	; 0x2d
 8011492:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011496:	487e      	ldr	r0, [pc, #504]	; (8011690 <_printf_float+0x2b8>)
 8011498:	4b7e      	ldr	r3, [pc, #504]	; (8011694 <_printf_float+0x2bc>)
 801149a:	e7d5      	b.n	8011448 <_printf_float+0x70>
 801149c:	6863      	ldr	r3, [r4, #4]
 801149e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80114a2:	9104      	str	r1, [sp, #16]
 80114a4:	1c59      	adds	r1, r3, #1
 80114a6:	d13c      	bne.n	8011522 <_printf_float+0x14a>
 80114a8:	2306      	movs	r3, #6
 80114aa:	6063      	str	r3, [r4, #4]
 80114ac:	2300      	movs	r3, #0
 80114ae:	9303      	str	r3, [sp, #12]
 80114b0:	ab08      	add	r3, sp, #32
 80114b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80114b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80114ba:	ab07      	add	r3, sp, #28
 80114bc:	6861      	ldr	r1, [r4, #4]
 80114be:	9300      	str	r3, [sp, #0]
 80114c0:	6022      	str	r2, [r4, #0]
 80114c2:	f10d 031b 	add.w	r3, sp, #27
 80114c6:	4628      	mov	r0, r5
 80114c8:	f7ff fef4 	bl	80112b4 <__cvt>
 80114cc:	9b04      	ldr	r3, [sp, #16]
 80114ce:	9907      	ldr	r1, [sp, #28]
 80114d0:	2b47      	cmp	r3, #71	; 0x47
 80114d2:	4680      	mov	r8, r0
 80114d4:	d108      	bne.n	80114e8 <_printf_float+0x110>
 80114d6:	1cc8      	adds	r0, r1, #3
 80114d8:	db02      	blt.n	80114e0 <_printf_float+0x108>
 80114da:	6863      	ldr	r3, [r4, #4]
 80114dc:	4299      	cmp	r1, r3
 80114de:	dd41      	ble.n	8011564 <_printf_float+0x18c>
 80114e0:	f1a9 0902 	sub.w	r9, r9, #2
 80114e4:	fa5f f989 	uxtb.w	r9, r9
 80114e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80114ec:	d820      	bhi.n	8011530 <_printf_float+0x158>
 80114ee:	3901      	subs	r1, #1
 80114f0:	464a      	mov	r2, r9
 80114f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80114f6:	9107      	str	r1, [sp, #28]
 80114f8:	f7ff ff2e 	bl	8011358 <__exponent>
 80114fc:	9a08      	ldr	r2, [sp, #32]
 80114fe:	9004      	str	r0, [sp, #16]
 8011500:	1813      	adds	r3, r2, r0
 8011502:	2a01      	cmp	r2, #1
 8011504:	6123      	str	r3, [r4, #16]
 8011506:	dc02      	bgt.n	801150e <_printf_float+0x136>
 8011508:	6822      	ldr	r2, [r4, #0]
 801150a:	07d2      	lsls	r2, r2, #31
 801150c:	d501      	bpl.n	8011512 <_printf_float+0x13a>
 801150e:	3301      	adds	r3, #1
 8011510:	6123      	str	r3, [r4, #16]
 8011512:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d0a2      	beq.n	8011460 <_printf_float+0x88>
 801151a:	232d      	movs	r3, #45	; 0x2d
 801151c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011520:	e79e      	b.n	8011460 <_printf_float+0x88>
 8011522:	9904      	ldr	r1, [sp, #16]
 8011524:	2947      	cmp	r1, #71	; 0x47
 8011526:	d1c1      	bne.n	80114ac <_printf_float+0xd4>
 8011528:	2b00      	cmp	r3, #0
 801152a:	d1bf      	bne.n	80114ac <_printf_float+0xd4>
 801152c:	2301      	movs	r3, #1
 801152e:	e7bc      	b.n	80114aa <_printf_float+0xd2>
 8011530:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011534:	d118      	bne.n	8011568 <_printf_float+0x190>
 8011536:	2900      	cmp	r1, #0
 8011538:	6863      	ldr	r3, [r4, #4]
 801153a:	dd0b      	ble.n	8011554 <_printf_float+0x17c>
 801153c:	6121      	str	r1, [r4, #16]
 801153e:	b913      	cbnz	r3, 8011546 <_printf_float+0x16e>
 8011540:	6822      	ldr	r2, [r4, #0]
 8011542:	07d0      	lsls	r0, r2, #31
 8011544:	d502      	bpl.n	801154c <_printf_float+0x174>
 8011546:	3301      	adds	r3, #1
 8011548:	440b      	add	r3, r1
 801154a:	6123      	str	r3, [r4, #16]
 801154c:	2300      	movs	r3, #0
 801154e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011550:	9304      	str	r3, [sp, #16]
 8011552:	e7de      	b.n	8011512 <_printf_float+0x13a>
 8011554:	b913      	cbnz	r3, 801155c <_printf_float+0x184>
 8011556:	6822      	ldr	r2, [r4, #0]
 8011558:	07d2      	lsls	r2, r2, #31
 801155a:	d501      	bpl.n	8011560 <_printf_float+0x188>
 801155c:	3302      	adds	r3, #2
 801155e:	e7f4      	b.n	801154a <_printf_float+0x172>
 8011560:	2301      	movs	r3, #1
 8011562:	e7f2      	b.n	801154a <_printf_float+0x172>
 8011564:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011568:	9b08      	ldr	r3, [sp, #32]
 801156a:	4299      	cmp	r1, r3
 801156c:	db05      	blt.n	801157a <_printf_float+0x1a2>
 801156e:	6823      	ldr	r3, [r4, #0]
 8011570:	6121      	str	r1, [r4, #16]
 8011572:	07d8      	lsls	r0, r3, #31
 8011574:	d5ea      	bpl.n	801154c <_printf_float+0x174>
 8011576:	1c4b      	adds	r3, r1, #1
 8011578:	e7e7      	b.n	801154a <_printf_float+0x172>
 801157a:	2900      	cmp	r1, #0
 801157c:	bfd4      	ite	le
 801157e:	f1c1 0202 	rsble	r2, r1, #2
 8011582:	2201      	movgt	r2, #1
 8011584:	4413      	add	r3, r2
 8011586:	e7e0      	b.n	801154a <_printf_float+0x172>
 8011588:	6823      	ldr	r3, [r4, #0]
 801158a:	055a      	lsls	r2, r3, #21
 801158c:	d407      	bmi.n	801159e <_printf_float+0x1c6>
 801158e:	6923      	ldr	r3, [r4, #16]
 8011590:	4642      	mov	r2, r8
 8011592:	4631      	mov	r1, r6
 8011594:	4628      	mov	r0, r5
 8011596:	47b8      	blx	r7
 8011598:	3001      	adds	r0, #1
 801159a:	d12a      	bne.n	80115f2 <_printf_float+0x21a>
 801159c:	e76a      	b.n	8011474 <_printf_float+0x9c>
 801159e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80115a2:	f240 80e2 	bls.w	801176a <_printf_float+0x392>
 80115a6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80115aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80115ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b2:	d133      	bne.n	801161c <_printf_float+0x244>
 80115b4:	4a38      	ldr	r2, [pc, #224]	; (8011698 <_printf_float+0x2c0>)
 80115b6:	2301      	movs	r3, #1
 80115b8:	4631      	mov	r1, r6
 80115ba:	4628      	mov	r0, r5
 80115bc:	47b8      	blx	r7
 80115be:	3001      	adds	r0, #1
 80115c0:	f43f af58 	beq.w	8011474 <_printf_float+0x9c>
 80115c4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	db02      	blt.n	80115d2 <_printf_float+0x1fa>
 80115cc:	6823      	ldr	r3, [r4, #0]
 80115ce:	07d8      	lsls	r0, r3, #31
 80115d0:	d50f      	bpl.n	80115f2 <_printf_float+0x21a>
 80115d2:	4653      	mov	r3, sl
 80115d4:	465a      	mov	r2, fp
 80115d6:	4631      	mov	r1, r6
 80115d8:	4628      	mov	r0, r5
 80115da:	47b8      	blx	r7
 80115dc:	3001      	adds	r0, #1
 80115de:	f43f af49 	beq.w	8011474 <_printf_float+0x9c>
 80115e2:	f04f 0800 	mov.w	r8, #0
 80115e6:	f104 091a 	add.w	r9, r4, #26
 80115ea:	9b08      	ldr	r3, [sp, #32]
 80115ec:	3b01      	subs	r3, #1
 80115ee:	4543      	cmp	r3, r8
 80115f0:	dc09      	bgt.n	8011606 <_printf_float+0x22e>
 80115f2:	6823      	ldr	r3, [r4, #0]
 80115f4:	079b      	lsls	r3, r3, #30
 80115f6:	f100 8108 	bmi.w	801180a <_printf_float+0x432>
 80115fa:	68e0      	ldr	r0, [r4, #12]
 80115fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115fe:	4298      	cmp	r0, r3
 8011600:	bfb8      	it	lt
 8011602:	4618      	movlt	r0, r3
 8011604:	e738      	b.n	8011478 <_printf_float+0xa0>
 8011606:	2301      	movs	r3, #1
 8011608:	464a      	mov	r2, r9
 801160a:	4631      	mov	r1, r6
 801160c:	4628      	mov	r0, r5
 801160e:	47b8      	blx	r7
 8011610:	3001      	adds	r0, #1
 8011612:	f43f af2f 	beq.w	8011474 <_printf_float+0x9c>
 8011616:	f108 0801 	add.w	r8, r8, #1
 801161a:	e7e6      	b.n	80115ea <_printf_float+0x212>
 801161c:	9b07      	ldr	r3, [sp, #28]
 801161e:	2b00      	cmp	r3, #0
 8011620:	dc3c      	bgt.n	801169c <_printf_float+0x2c4>
 8011622:	4a1d      	ldr	r2, [pc, #116]	; (8011698 <_printf_float+0x2c0>)
 8011624:	2301      	movs	r3, #1
 8011626:	4631      	mov	r1, r6
 8011628:	4628      	mov	r0, r5
 801162a:	47b8      	blx	r7
 801162c:	3001      	adds	r0, #1
 801162e:	f43f af21 	beq.w	8011474 <_printf_float+0x9c>
 8011632:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011636:	4313      	orrs	r3, r2
 8011638:	d102      	bne.n	8011640 <_printf_float+0x268>
 801163a:	6823      	ldr	r3, [r4, #0]
 801163c:	07d9      	lsls	r1, r3, #31
 801163e:	d5d8      	bpl.n	80115f2 <_printf_float+0x21a>
 8011640:	4653      	mov	r3, sl
 8011642:	465a      	mov	r2, fp
 8011644:	4631      	mov	r1, r6
 8011646:	4628      	mov	r0, r5
 8011648:	47b8      	blx	r7
 801164a:	3001      	adds	r0, #1
 801164c:	f43f af12 	beq.w	8011474 <_printf_float+0x9c>
 8011650:	f04f 0900 	mov.w	r9, #0
 8011654:	f104 0a1a 	add.w	sl, r4, #26
 8011658:	9b07      	ldr	r3, [sp, #28]
 801165a:	425b      	negs	r3, r3
 801165c:	454b      	cmp	r3, r9
 801165e:	dc01      	bgt.n	8011664 <_printf_float+0x28c>
 8011660:	9b08      	ldr	r3, [sp, #32]
 8011662:	e795      	b.n	8011590 <_printf_float+0x1b8>
 8011664:	2301      	movs	r3, #1
 8011666:	4652      	mov	r2, sl
 8011668:	4631      	mov	r1, r6
 801166a:	4628      	mov	r0, r5
 801166c:	47b8      	blx	r7
 801166e:	3001      	adds	r0, #1
 8011670:	f43f af00 	beq.w	8011474 <_printf_float+0x9c>
 8011674:	f109 0901 	add.w	r9, r9, #1
 8011678:	e7ee      	b.n	8011658 <_printf_float+0x280>
 801167a:	bf00      	nop
 801167c:	f3af 8000 	nop.w
 8011680:	ffffffff 	.word	0xffffffff
 8011684:	7fefffff 	.word	0x7fefffff
 8011688:	08014698 	.word	0x08014698
 801168c:	0801469c 	.word	0x0801469c
 8011690:	080146a4 	.word	0x080146a4
 8011694:	080146a0 	.word	0x080146a0
 8011698:	080146a8 	.word	0x080146a8
 801169c:	9a08      	ldr	r2, [sp, #32]
 801169e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80116a0:	429a      	cmp	r2, r3
 80116a2:	bfa8      	it	ge
 80116a4:	461a      	movge	r2, r3
 80116a6:	2a00      	cmp	r2, #0
 80116a8:	4691      	mov	r9, r2
 80116aa:	dc38      	bgt.n	801171e <_printf_float+0x346>
 80116ac:	2300      	movs	r3, #0
 80116ae:	9305      	str	r3, [sp, #20]
 80116b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80116b4:	f104 021a 	add.w	r2, r4, #26
 80116b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80116ba:	9905      	ldr	r1, [sp, #20]
 80116bc:	9304      	str	r3, [sp, #16]
 80116be:	eba3 0309 	sub.w	r3, r3, r9
 80116c2:	428b      	cmp	r3, r1
 80116c4:	dc33      	bgt.n	801172e <_printf_float+0x356>
 80116c6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80116ca:	429a      	cmp	r2, r3
 80116cc:	db3c      	blt.n	8011748 <_printf_float+0x370>
 80116ce:	6823      	ldr	r3, [r4, #0]
 80116d0:	07da      	lsls	r2, r3, #31
 80116d2:	d439      	bmi.n	8011748 <_printf_float+0x370>
 80116d4:	9a08      	ldr	r2, [sp, #32]
 80116d6:	9b04      	ldr	r3, [sp, #16]
 80116d8:	9907      	ldr	r1, [sp, #28]
 80116da:	1ad3      	subs	r3, r2, r3
 80116dc:	eba2 0901 	sub.w	r9, r2, r1
 80116e0:	4599      	cmp	r9, r3
 80116e2:	bfa8      	it	ge
 80116e4:	4699      	movge	r9, r3
 80116e6:	f1b9 0f00 	cmp.w	r9, #0
 80116ea:	dc35      	bgt.n	8011758 <_printf_float+0x380>
 80116ec:	f04f 0800 	mov.w	r8, #0
 80116f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80116f4:	f104 0a1a 	add.w	sl, r4, #26
 80116f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80116fc:	1a9b      	subs	r3, r3, r2
 80116fe:	eba3 0309 	sub.w	r3, r3, r9
 8011702:	4543      	cmp	r3, r8
 8011704:	f77f af75 	ble.w	80115f2 <_printf_float+0x21a>
 8011708:	2301      	movs	r3, #1
 801170a:	4652      	mov	r2, sl
 801170c:	4631      	mov	r1, r6
 801170e:	4628      	mov	r0, r5
 8011710:	47b8      	blx	r7
 8011712:	3001      	adds	r0, #1
 8011714:	f43f aeae 	beq.w	8011474 <_printf_float+0x9c>
 8011718:	f108 0801 	add.w	r8, r8, #1
 801171c:	e7ec      	b.n	80116f8 <_printf_float+0x320>
 801171e:	4613      	mov	r3, r2
 8011720:	4631      	mov	r1, r6
 8011722:	4642      	mov	r2, r8
 8011724:	4628      	mov	r0, r5
 8011726:	47b8      	blx	r7
 8011728:	3001      	adds	r0, #1
 801172a:	d1bf      	bne.n	80116ac <_printf_float+0x2d4>
 801172c:	e6a2      	b.n	8011474 <_printf_float+0x9c>
 801172e:	2301      	movs	r3, #1
 8011730:	4631      	mov	r1, r6
 8011732:	4628      	mov	r0, r5
 8011734:	9204      	str	r2, [sp, #16]
 8011736:	47b8      	blx	r7
 8011738:	3001      	adds	r0, #1
 801173a:	f43f ae9b 	beq.w	8011474 <_printf_float+0x9c>
 801173e:	9b05      	ldr	r3, [sp, #20]
 8011740:	9a04      	ldr	r2, [sp, #16]
 8011742:	3301      	adds	r3, #1
 8011744:	9305      	str	r3, [sp, #20]
 8011746:	e7b7      	b.n	80116b8 <_printf_float+0x2e0>
 8011748:	4653      	mov	r3, sl
 801174a:	465a      	mov	r2, fp
 801174c:	4631      	mov	r1, r6
 801174e:	4628      	mov	r0, r5
 8011750:	47b8      	blx	r7
 8011752:	3001      	adds	r0, #1
 8011754:	d1be      	bne.n	80116d4 <_printf_float+0x2fc>
 8011756:	e68d      	b.n	8011474 <_printf_float+0x9c>
 8011758:	9a04      	ldr	r2, [sp, #16]
 801175a:	464b      	mov	r3, r9
 801175c:	4442      	add	r2, r8
 801175e:	4631      	mov	r1, r6
 8011760:	4628      	mov	r0, r5
 8011762:	47b8      	blx	r7
 8011764:	3001      	adds	r0, #1
 8011766:	d1c1      	bne.n	80116ec <_printf_float+0x314>
 8011768:	e684      	b.n	8011474 <_printf_float+0x9c>
 801176a:	9a08      	ldr	r2, [sp, #32]
 801176c:	2a01      	cmp	r2, #1
 801176e:	dc01      	bgt.n	8011774 <_printf_float+0x39c>
 8011770:	07db      	lsls	r3, r3, #31
 8011772:	d537      	bpl.n	80117e4 <_printf_float+0x40c>
 8011774:	2301      	movs	r3, #1
 8011776:	4642      	mov	r2, r8
 8011778:	4631      	mov	r1, r6
 801177a:	4628      	mov	r0, r5
 801177c:	47b8      	blx	r7
 801177e:	3001      	adds	r0, #1
 8011780:	f43f ae78 	beq.w	8011474 <_printf_float+0x9c>
 8011784:	4653      	mov	r3, sl
 8011786:	465a      	mov	r2, fp
 8011788:	4631      	mov	r1, r6
 801178a:	4628      	mov	r0, r5
 801178c:	47b8      	blx	r7
 801178e:	3001      	adds	r0, #1
 8011790:	f43f ae70 	beq.w	8011474 <_printf_float+0x9c>
 8011794:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011798:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117a0:	d01b      	beq.n	80117da <_printf_float+0x402>
 80117a2:	9b08      	ldr	r3, [sp, #32]
 80117a4:	f108 0201 	add.w	r2, r8, #1
 80117a8:	3b01      	subs	r3, #1
 80117aa:	4631      	mov	r1, r6
 80117ac:	4628      	mov	r0, r5
 80117ae:	47b8      	blx	r7
 80117b0:	3001      	adds	r0, #1
 80117b2:	d10e      	bne.n	80117d2 <_printf_float+0x3fa>
 80117b4:	e65e      	b.n	8011474 <_printf_float+0x9c>
 80117b6:	2301      	movs	r3, #1
 80117b8:	464a      	mov	r2, r9
 80117ba:	4631      	mov	r1, r6
 80117bc:	4628      	mov	r0, r5
 80117be:	47b8      	blx	r7
 80117c0:	3001      	adds	r0, #1
 80117c2:	f43f ae57 	beq.w	8011474 <_printf_float+0x9c>
 80117c6:	f108 0801 	add.w	r8, r8, #1
 80117ca:	9b08      	ldr	r3, [sp, #32]
 80117cc:	3b01      	subs	r3, #1
 80117ce:	4543      	cmp	r3, r8
 80117d0:	dcf1      	bgt.n	80117b6 <_printf_float+0x3de>
 80117d2:	9b04      	ldr	r3, [sp, #16]
 80117d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80117d8:	e6db      	b.n	8011592 <_printf_float+0x1ba>
 80117da:	f04f 0800 	mov.w	r8, #0
 80117de:	f104 091a 	add.w	r9, r4, #26
 80117e2:	e7f2      	b.n	80117ca <_printf_float+0x3f2>
 80117e4:	2301      	movs	r3, #1
 80117e6:	4642      	mov	r2, r8
 80117e8:	e7df      	b.n	80117aa <_printf_float+0x3d2>
 80117ea:	2301      	movs	r3, #1
 80117ec:	464a      	mov	r2, r9
 80117ee:	4631      	mov	r1, r6
 80117f0:	4628      	mov	r0, r5
 80117f2:	47b8      	blx	r7
 80117f4:	3001      	adds	r0, #1
 80117f6:	f43f ae3d 	beq.w	8011474 <_printf_float+0x9c>
 80117fa:	f108 0801 	add.w	r8, r8, #1
 80117fe:	68e3      	ldr	r3, [r4, #12]
 8011800:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011802:	1a5b      	subs	r3, r3, r1
 8011804:	4543      	cmp	r3, r8
 8011806:	dcf0      	bgt.n	80117ea <_printf_float+0x412>
 8011808:	e6f7      	b.n	80115fa <_printf_float+0x222>
 801180a:	f04f 0800 	mov.w	r8, #0
 801180e:	f104 0919 	add.w	r9, r4, #25
 8011812:	e7f4      	b.n	80117fe <_printf_float+0x426>

08011814 <_printf_common>:
 8011814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011818:	4616      	mov	r6, r2
 801181a:	4699      	mov	r9, r3
 801181c:	688a      	ldr	r2, [r1, #8]
 801181e:	690b      	ldr	r3, [r1, #16]
 8011820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011824:	4293      	cmp	r3, r2
 8011826:	bfb8      	it	lt
 8011828:	4613      	movlt	r3, r2
 801182a:	6033      	str	r3, [r6, #0]
 801182c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011830:	4607      	mov	r7, r0
 8011832:	460c      	mov	r4, r1
 8011834:	b10a      	cbz	r2, 801183a <_printf_common+0x26>
 8011836:	3301      	adds	r3, #1
 8011838:	6033      	str	r3, [r6, #0]
 801183a:	6823      	ldr	r3, [r4, #0]
 801183c:	0699      	lsls	r1, r3, #26
 801183e:	bf42      	ittt	mi
 8011840:	6833      	ldrmi	r3, [r6, #0]
 8011842:	3302      	addmi	r3, #2
 8011844:	6033      	strmi	r3, [r6, #0]
 8011846:	6825      	ldr	r5, [r4, #0]
 8011848:	f015 0506 	ands.w	r5, r5, #6
 801184c:	d106      	bne.n	801185c <_printf_common+0x48>
 801184e:	f104 0a19 	add.w	sl, r4, #25
 8011852:	68e3      	ldr	r3, [r4, #12]
 8011854:	6832      	ldr	r2, [r6, #0]
 8011856:	1a9b      	subs	r3, r3, r2
 8011858:	42ab      	cmp	r3, r5
 801185a:	dc26      	bgt.n	80118aa <_printf_common+0x96>
 801185c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011860:	1e13      	subs	r3, r2, #0
 8011862:	6822      	ldr	r2, [r4, #0]
 8011864:	bf18      	it	ne
 8011866:	2301      	movne	r3, #1
 8011868:	0692      	lsls	r2, r2, #26
 801186a:	d42b      	bmi.n	80118c4 <_printf_common+0xb0>
 801186c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011870:	4649      	mov	r1, r9
 8011872:	4638      	mov	r0, r7
 8011874:	47c0      	blx	r8
 8011876:	3001      	adds	r0, #1
 8011878:	d01e      	beq.n	80118b8 <_printf_common+0xa4>
 801187a:	6823      	ldr	r3, [r4, #0]
 801187c:	68e5      	ldr	r5, [r4, #12]
 801187e:	6832      	ldr	r2, [r6, #0]
 8011880:	f003 0306 	and.w	r3, r3, #6
 8011884:	2b04      	cmp	r3, #4
 8011886:	bf08      	it	eq
 8011888:	1aad      	subeq	r5, r5, r2
 801188a:	68a3      	ldr	r3, [r4, #8]
 801188c:	6922      	ldr	r2, [r4, #16]
 801188e:	bf0c      	ite	eq
 8011890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011894:	2500      	movne	r5, #0
 8011896:	4293      	cmp	r3, r2
 8011898:	bfc4      	itt	gt
 801189a:	1a9b      	subgt	r3, r3, r2
 801189c:	18ed      	addgt	r5, r5, r3
 801189e:	2600      	movs	r6, #0
 80118a0:	341a      	adds	r4, #26
 80118a2:	42b5      	cmp	r5, r6
 80118a4:	d11a      	bne.n	80118dc <_printf_common+0xc8>
 80118a6:	2000      	movs	r0, #0
 80118a8:	e008      	b.n	80118bc <_printf_common+0xa8>
 80118aa:	2301      	movs	r3, #1
 80118ac:	4652      	mov	r2, sl
 80118ae:	4649      	mov	r1, r9
 80118b0:	4638      	mov	r0, r7
 80118b2:	47c0      	blx	r8
 80118b4:	3001      	adds	r0, #1
 80118b6:	d103      	bne.n	80118c0 <_printf_common+0xac>
 80118b8:	f04f 30ff 	mov.w	r0, #4294967295
 80118bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118c0:	3501      	adds	r5, #1
 80118c2:	e7c6      	b.n	8011852 <_printf_common+0x3e>
 80118c4:	18e1      	adds	r1, r4, r3
 80118c6:	1c5a      	adds	r2, r3, #1
 80118c8:	2030      	movs	r0, #48	; 0x30
 80118ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80118ce:	4422      	add	r2, r4
 80118d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80118d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80118d8:	3302      	adds	r3, #2
 80118da:	e7c7      	b.n	801186c <_printf_common+0x58>
 80118dc:	2301      	movs	r3, #1
 80118de:	4622      	mov	r2, r4
 80118e0:	4649      	mov	r1, r9
 80118e2:	4638      	mov	r0, r7
 80118e4:	47c0      	blx	r8
 80118e6:	3001      	adds	r0, #1
 80118e8:	d0e6      	beq.n	80118b8 <_printf_common+0xa4>
 80118ea:	3601      	adds	r6, #1
 80118ec:	e7d9      	b.n	80118a2 <_printf_common+0x8e>
	...

080118f0 <_printf_i>:
 80118f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80118f4:	460c      	mov	r4, r1
 80118f6:	4691      	mov	r9, r2
 80118f8:	7e27      	ldrb	r7, [r4, #24]
 80118fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80118fc:	2f78      	cmp	r7, #120	; 0x78
 80118fe:	4680      	mov	r8, r0
 8011900:	469a      	mov	sl, r3
 8011902:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011906:	d807      	bhi.n	8011918 <_printf_i+0x28>
 8011908:	2f62      	cmp	r7, #98	; 0x62
 801190a:	d80a      	bhi.n	8011922 <_printf_i+0x32>
 801190c:	2f00      	cmp	r7, #0
 801190e:	f000 80d8 	beq.w	8011ac2 <_printf_i+0x1d2>
 8011912:	2f58      	cmp	r7, #88	; 0x58
 8011914:	f000 80a3 	beq.w	8011a5e <_printf_i+0x16e>
 8011918:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801191c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011920:	e03a      	b.n	8011998 <_printf_i+0xa8>
 8011922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011926:	2b15      	cmp	r3, #21
 8011928:	d8f6      	bhi.n	8011918 <_printf_i+0x28>
 801192a:	a001      	add	r0, pc, #4	; (adr r0, 8011930 <_printf_i+0x40>)
 801192c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011930:	08011989 	.word	0x08011989
 8011934:	0801199d 	.word	0x0801199d
 8011938:	08011919 	.word	0x08011919
 801193c:	08011919 	.word	0x08011919
 8011940:	08011919 	.word	0x08011919
 8011944:	08011919 	.word	0x08011919
 8011948:	0801199d 	.word	0x0801199d
 801194c:	08011919 	.word	0x08011919
 8011950:	08011919 	.word	0x08011919
 8011954:	08011919 	.word	0x08011919
 8011958:	08011919 	.word	0x08011919
 801195c:	08011aa9 	.word	0x08011aa9
 8011960:	080119cd 	.word	0x080119cd
 8011964:	08011a8b 	.word	0x08011a8b
 8011968:	08011919 	.word	0x08011919
 801196c:	08011919 	.word	0x08011919
 8011970:	08011acb 	.word	0x08011acb
 8011974:	08011919 	.word	0x08011919
 8011978:	080119cd 	.word	0x080119cd
 801197c:	08011919 	.word	0x08011919
 8011980:	08011919 	.word	0x08011919
 8011984:	08011a93 	.word	0x08011a93
 8011988:	680b      	ldr	r3, [r1, #0]
 801198a:	1d1a      	adds	r2, r3, #4
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	600a      	str	r2, [r1, #0]
 8011990:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011998:	2301      	movs	r3, #1
 801199a:	e0a3      	b.n	8011ae4 <_printf_i+0x1f4>
 801199c:	6825      	ldr	r5, [r4, #0]
 801199e:	6808      	ldr	r0, [r1, #0]
 80119a0:	062e      	lsls	r6, r5, #24
 80119a2:	f100 0304 	add.w	r3, r0, #4
 80119a6:	d50a      	bpl.n	80119be <_printf_i+0xce>
 80119a8:	6805      	ldr	r5, [r0, #0]
 80119aa:	600b      	str	r3, [r1, #0]
 80119ac:	2d00      	cmp	r5, #0
 80119ae:	da03      	bge.n	80119b8 <_printf_i+0xc8>
 80119b0:	232d      	movs	r3, #45	; 0x2d
 80119b2:	426d      	negs	r5, r5
 80119b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119b8:	485e      	ldr	r0, [pc, #376]	; (8011b34 <_printf_i+0x244>)
 80119ba:	230a      	movs	r3, #10
 80119bc:	e019      	b.n	80119f2 <_printf_i+0x102>
 80119be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80119c2:	6805      	ldr	r5, [r0, #0]
 80119c4:	600b      	str	r3, [r1, #0]
 80119c6:	bf18      	it	ne
 80119c8:	b22d      	sxthne	r5, r5
 80119ca:	e7ef      	b.n	80119ac <_printf_i+0xbc>
 80119cc:	680b      	ldr	r3, [r1, #0]
 80119ce:	6825      	ldr	r5, [r4, #0]
 80119d0:	1d18      	adds	r0, r3, #4
 80119d2:	6008      	str	r0, [r1, #0]
 80119d4:	0628      	lsls	r0, r5, #24
 80119d6:	d501      	bpl.n	80119dc <_printf_i+0xec>
 80119d8:	681d      	ldr	r5, [r3, #0]
 80119da:	e002      	b.n	80119e2 <_printf_i+0xf2>
 80119dc:	0669      	lsls	r1, r5, #25
 80119de:	d5fb      	bpl.n	80119d8 <_printf_i+0xe8>
 80119e0:	881d      	ldrh	r5, [r3, #0]
 80119e2:	4854      	ldr	r0, [pc, #336]	; (8011b34 <_printf_i+0x244>)
 80119e4:	2f6f      	cmp	r7, #111	; 0x6f
 80119e6:	bf0c      	ite	eq
 80119e8:	2308      	moveq	r3, #8
 80119ea:	230a      	movne	r3, #10
 80119ec:	2100      	movs	r1, #0
 80119ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80119f2:	6866      	ldr	r6, [r4, #4]
 80119f4:	60a6      	str	r6, [r4, #8]
 80119f6:	2e00      	cmp	r6, #0
 80119f8:	bfa2      	ittt	ge
 80119fa:	6821      	ldrge	r1, [r4, #0]
 80119fc:	f021 0104 	bicge.w	r1, r1, #4
 8011a00:	6021      	strge	r1, [r4, #0]
 8011a02:	b90d      	cbnz	r5, 8011a08 <_printf_i+0x118>
 8011a04:	2e00      	cmp	r6, #0
 8011a06:	d04d      	beq.n	8011aa4 <_printf_i+0x1b4>
 8011a08:	4616      	mov	r6, r2
 8011a0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8011a0e:	fb03 5711 	mls	r7, r3, r1, r5
 8011a12:	5dc7      	ldrb	r7, [r0, r7]
 8011a14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011a18:	462f      	mov	r7, r5
 8011a1a:	42bb      	cmp	r3, r7
 8011a1c:	460d      	mov	r5, r1
 8011a1e:	d9f4      	bls.n	8011a0a <_printf_i+0x11a>
 8011a20:	2b08      	cmp	r3, #8
 8011a22:	d10b      	bne.n	8011a3c <_printf_i+0x14c>
 8011a24:	6823      	ldr	r3, [r4, #0]
 8011a26:	07df      	lsls	r7, r3, #31
 8011a28:	d508      	bpl.n	8011a3c <_printf_i+0x14c>
 8011a2a:	6923      	ldr	r3, [r4, #16]
 8011a2c:	6861      	ldr	r1, [r4, #4]
 8011a2e:	4299      	cmp	r1, r3
 8011a30:	bfde      	ittt	le
 8011a32:	2330      	movle	r3, #48	; 0x30
 8011a34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011a38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011a3c:	1b92      	subs	r2, r2, r6
 8011a3e:	6122      	str	r2, [r4, #16]
 8011a40:	f8cd a000 	str.w	sl, [sp]
 8011a44:	464b      	mov	r3, r9
 8011a46:	aa03      	add	r2, sp, #12
 8011a48:	4621      	mov	r1, r4
 8011a4a:	4640      	mov	r0, r8
 8011a4c:	f7ff fee2 	bl	8011814 <_printf_common>
 8011a50:	3001      	adds	r0, #1
 8011a52:	d14c      	bne.n	8011aee <_printf_i+0x1fe>
 8011a54:	f04f 30ff 	mov.w	r0, #4294967295
 8011a58:	b004      	add	sp, #16
 8011a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a5e:	4835      	ldr	r0, [pc, #212]	; (8011b34 <_printf_i+0x244>)
 8011a60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011a64:	6823      	ldr	r3, [r4, #0]
 8011a66:	680e      	ldr	r6, [r1, #0]
 8011a68:	061f      	lsls	r7, r3, #24
 8011a6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8011a6e:	600e      	str	r6, [r1, #0]
 8011a70:	d514      	bpl.n	8011a9c <_printf_i+0x1ac>
 8011a72:	07d9      	lsls	r1, r3, #31
 8011a74:	bf44      	itt	mi
 8011a76:	f043 0320 	orrmi.w	r3, r3, #32
 8011a7a:	6023      	strmi	r3, [r4, #0]
 8011a7c:	b91d      	cbnz	r5, 8011a86 <_printf_i+0x196>
 8011a7e:	6823      	ldr	r3, [r4, #0]
 8011a80:	f023 0320 	bic.w	r3, r3, #32
 8011a84:	6023      	str	r3, [r4, #0]
 8011a86:	2310      	movs	r3, #16
 8011a88:	e7b0      	b.n	80119ec <_printf_i+0xfc>
 8011a8a:	6823      	ldr	r3, [r4, #0]
 8011a8c:	f043 0320 	orr.w	r3, r3, #32
 8011a90:	6023      	str	r3, [r4, #0]
 8011a92:	2378      	movs	r3, #120	; 0x78
 8011a94:	4828      	ldr	r0, [pc, #160]	; (8011b38 <_printf_i+0x248>)
 8011a96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011a9a:	e7e3      	b.n	8011a64 <_printf_i+0x174>
 8011a9c:	065e      	lsls	r6, r3, #25
 8011a9e:	bf48      	it	mi
 8011aa0:	b2ad      	uxthmi	r5, r5
 8011aa2:	e7e6      	b.n	8011a72 <_printf_i+0x182>
 8011aa4:	4616      	mov	r6, r2
 8011aa6:	e7bb      	b.n	8011a20 <_printf_i+0x130>
 8011aa8:	680b      	ldr	r3, [r1, #0]
 8011aaa:	6826      	ldr	r6, [r4, #0]
 8011aac:	6960      	ldr	r0, [r4, #20]
 8011aae:	1d1d      	adds	r5, r3, #4
 8011ab0:	600d      	str	r5, [r1, #0]
 8011ab2:	0635      	lsls	r5, r6, #24
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	d501      	bpl.n	8011abc <_printf_i+0x1cc>
 8011ab8:	6018      	str	r0, [r3, #0]
 8011aba:	e002      	b.n	8011ac2 <_printf_i+0x1d2>
 8011abc:	0671      	lsls	r1, r6, #25
 8011abe:	d5fb      	bpl.n	8011ab8 <_printf_i+0x1c8>
 8011ac0:	8018      	strh	r0, [r3, #0]
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	6123      	str	r3, [r4, #16]
 8011ac6:	4616      	mov	r6, r2
 8011ac8:	e7ba      	b.n	8011a40 <_printf_i+0x150>
 8011aca:	680b      	ldr	r3, [r1, #0]
 8011acc:	1d1a      	adds	r2, r3, #4
 8011ace:	600a      	str	r2, [r1, #0]
 8011ad0:	681e      	ldr	r6, [r3, #0]
 8011ad2:	6862      	ldr	r2, [r4, #4]
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	f7ee fc0a 	bl	80002f0 <memchr>
 8011adc:	b108      	cbz	r0, 8011ae2 <_printf_i+0x1f2>
 8011ade:	1b80      	subs	r0, r0, r6
 8011ae0:	6060      	str	r0, [r4, #4]
 8011ae2:	6863      	ldr	r3, [r4, #4]
 8011ae4:	6123      	str	r3, [r4, #16]
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011aec:	e7a8      	b.n	8011a40 <_printf_i+0x150>
 8011aee:	6923      	ldr	r3, [r4, #16]
 8011af0:	4632      	mov	r2, r6
 8011af2:	4649      	mov	r1, r9
 8011af4:	4640      	mov	r0, r8
 8011af6:	47d0      	blx	sl
 8011af8:	3001      	adds	r0, #1
 8011afa:	d0ab      	beq.n	8011a54 <_printf_i+0x164>
 8011afc:	6823      	ldr	r3, [r4, #0]
 8011afe:	079b      	lsls	r3, r3, #30
 8011b00:	d413      	bmi.n	8011b2a <_printf_i+0x23a>
 8011b02:	68e0      	ldr	r0, [r4, #12]
 8011b04:	9b03      	ldr	r3, [sp, #12]
 8011b06:	4298      	cmp	r0, r3
 8011b08:	bfb8      	it	lt
 8011b0a:	4618      	movlt	r0, r3
 8011b0c:	e7a4      	b.n	8011a58 <_printf_i+0x168>
 8011b0e:	2301      	movs	r3, #1
 8011b10:	4632      	mov	r2, r6
 8011b12:	4649      	mov	r1, r9
 8011b14:	4640      	mov	r0, r8
 8011b16:	47d0      	blx	sl
 8011b18:	3001      	adds	r0, #1
 8011b1a:	d09b      	beq.n	8011a54 <_printf_i+0x164>
 8011b1c:	3501      	adds	r5, #1
 8011b1e:	68e3      	ldr	r3, [r4, #12]
 8011b20:	9903      	ldr	r1, [sp, #12]
 8011b22:	1a5b      	subs	r3, r3, r1
 8011b24:	42ab      	cmp	r3, r5
 8011b26:	dcf2      	bgt.n	8011b0e <_printf_i+0x21e>
 8011b28:	e7eb      	b.n	8011b02 <_printf_i+0x212>
 8011b2a:	2500      	movs	r5, #0
 8011b2c:	f104 0619 	add.w	r6, r4, #25
 8011b30:	e7f5      	b.n	8011b1e <_printf_i+0x22e>
 8011b32:	bf00      	nop
 8011b34:	080146aa 	.word	0x080146aa
 8011b38:	080146bb 	.word	0x080146bb

08011b3c <iprintf>:
 8011b3c:	b40f      	push	{r0, r1, r2, r3}
 8011b3e:	4b0a      	ldr	r3, [pc, #40]	; (8011b68 <iprintf+0x2c>)
 8011b40:	b513      	push	{r0, r1, r4, lr}
 8011b42:	681c      	ldr	r4, [r3, #0]
 8011b44:	b124      	cbz	r4, 8011b50 <iprintf+0x14>
 8011b46:	69a3      	ldr	r3, [r4, #24]
 8011b48:	b913      	cbnz	r3, 8011b50 <iprintf+0x14>
 8011b4a:	4620      	mov	r0, r4
 8011b4c:	f001 f86c 	bl	8012c28 <__sinit>
 8011b50:	ab05      	add	r3, sp, #20
 8011b52:	9a04      	ldr	r2, [sp, #16]
 8011b54:	68a1      	ldr	r1, [r4, #8]
 8011b56:	9301      	str	r3, [sp, #4]
 8011b58:	4620      	mov	r0, r4
 8011b5a:	f001 fde7 	bl	801372c <_vfiprintf_r>
 8011b5e:	b002      	add	sp, #8
 8011b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b64:	b004      	add	sp, #16
 8011b66:	4770      	bx	lr
 8011b68:	24000024 	.word	0x24000024

08011b6c <_puts_r>:
 8011b6c:	b570      	push	{r4, r5, r6, lr}
 8011b6e:	460e      	mov	r6, r1
 8011b70:	4605      	mov	r5, r0
 8011b72:	b118      	cbz	r0, 8011b7c <_puts_r+0x10>
 8011b74:	6983      	ldr	r3, [r0, #24]
 8011b76:	b90b      	cbnz	r3, 8011b7c <_puts_r+0x10>
 8011b78:	f001 f856 	bl	8012c28 <__sinit>
 8011b7c:	69ab      	ldr	r3, [r5, #24]
 8011b7e:	68ac      	ldr	r4, [r5, #8]
 8011b80:	b913      	cbnz	r3, 8011b88 <_puts_r+0x1c>
 8011b82:	4628      	mov	r0, r5
 8011b84:	f001 f850 	bl	8012c28 <__sinit>
 8011b88:	4b2c      	ldr	r3, [pc, #176]	; (8011c3c <_puts_r+0xd0>)
 8011b8a:	429c      	cmp	r4, r3
 8011b8c:	d120      	bne.n	8011bd0 <_puts_r+0x64>
 8011b8e:	686c      	ldr	r4, [r5, #4]
 8011b90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b92:	07db      	lsls	r3, r3, #31
 8011b94:	d405      	bmi.n	8011ba2 <_puts_r+0x36>
 8011b96:	89a3      	ldrh	r3, [r4, #12]
 8011b98:	0598      	lsls	r0, r3, #22
 8011b9a:	d402      	bmi.n	8011ba2 <_puts_r+0x36>
 8011b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b9e:	f001 f8e6 	bl	8012d6e <__retarget_lock_acquire_recursive>
 8011ba2:	89a3      	ldrh	r3, [r4, #12]
 8011ba4:	0719      	lsls	r1, r3, #28
 8011ba6:	d51d      	bpl.n	8011be4 <_puts_r+0x78>
 8011ba8:	6923      	ldr	r3, [r4, #16]
 8011baa:	b1db      	cbz	r3, 8011be4 <_puts_r+0x78>
 8011bac:	3e01      	subs	r6, #1
 8011bae:	68a3      	ldr	r3, [r4, #8]
 8011bb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011bb4:	3b01      	subs	r3, #1
 8011bb6:	60a3      	str	r3, [r4, #8]
 8011bb8:	bb39      	cbnz	r1, 8011c0a <_puts_r+0x9e>
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	da38      	bge.n	8011c30 <_puts_r+0xc4>
 8011bbe:	4622      	mov	r2, r4
 8011bc0:	210a      	movs	r1, #10
 8011bc2:	4628      	mov	r0, r5
 8011bc4:	f000 f848 	bl	8011c58 <__swbuf_r>
 8011bc8:	3001      	adds	r0, #1
 8011bca:	d011      	beq.n	8011bf0 <_puts_r+0x84>
 8011bcc:	250a      	movs	r5, #10
 8011bce:	e011      	b.n	8011bf4 <_puts_r+0x88>
 8011bd0:	4b1b      	ldr	r3, [pc, #108]	; (8011c40 <_puts_r+0xd4>)
 8011bd2:	429c      	cmp	r4, r3
 8011bd4:	d101      	bne.n	8011bda <_puts_r+0x6e>
 8011bd6:	68ac      	ldr	r4, [r5, #8]
 8011bd8:	e7da      	b.n	8011b90 <_puts_r+0x24>
 8011bda:	4b1a      	ldr	r3, [pc, #104]	; (8011c44 <_puts_r+0xd8>)
 8011bdc:	429c      	cmp	r4, r3
 8011bde:	bf08      	it	eq
 8011be0:	68ec      	ldreq	r4, [r5, #12]
 8011be2:	e7d5      	b.n	8011b90 <_puts_r+0x24>
 8011be4:	4621      	mov	r1, r4
 8011be6:	4628      	mov	r0, r5
 8011be8:	f000 f888 	bl	8011cfc <__swsetup_r>
 8011bec:	2800      	cmp	r0, #0
 8011bee:	d0dd      	beq.n	8011bac <_puts_r+0x40>
 8011bf0:	f04f 35ff 	mov.w	r5, #4294967295
 8011bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011bf6:	07da      	lsls	r2, r3, #31
 8011bf8:	d405      	bmi.n	8011c06 <_puts_r+0x9a>
 8011bfa:	89a3      	ldrh	r3, [r4, #12]
 8011bfc:	059b      	lsls	r3, r3, #22
 8011bfe:	d402      	bmi.n	8011c06 <_puts_r+0x9a>
 8011c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c02:	f001 f8b5 	bl	8012d70 <__retarget_lock_release_recursive>
 8011c06:	4628      	mov	r0, r5
 8011c08:	bd70      	pop	{r4, r5, r6, pc}
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	da04      	bge.n	8011c18 <_puts_r+0xac>
 8011c0e:	69a2      	ldr	r2, [r4, #24]
 8011c10:	429a      	cmp	r2, r3
 8011c12:	dc06      	bgt.n	8011c22 <_puts_r+0xb6>
 8011c14:	290a      	cmp	r1, #10
 8011c16:	d004      	beq.n	8011c22 <_puts_r+0xb6>
 8011c18:	6823      	ldr	r3, [r4, #0]
 8011c1a:	1c5a      	adds	r2, r3, #1
 8011c1c:	6022      	str	r2, [r4, #0]
 8011c1e:	7019      	strb	r1, [r3, #0]
 8011c20:	e7c5      	b.n	8011bae <_puts_r+0x42>
 8011c22:	4622      	mov	r2, r4
 8011c24:	4628      	mov	r0, r5
 8011c26:	f000 f817 	bl	8011c58 <__swbuf_r>
 8011c2a:	3001      	adds	r0, #1
 8011c2c:	d1bf      	bne.n	8011bae <_puts_r+0x42>
 8011c2e:	e7df      	b.n	8011bf0 <_puts_r+0x84>
 8011c30:	6823      	ldr	r3, [r4, #0]
 8011c32:	250a      	movs	r5, #10
 8011c34:	1c5a      	adds	r2, r3, #1
 8011c36:	6022      	str	r2, [r4, #0]
 8011c38:	701d      	strb	r5, [r3, #0]
 8011c3a:	e7db      	b.n	8011bf4 <_puts_r+0x88>
 8011c3c:	08014780 	.word	0x08014780
 8011c40:	080147a0 	.word	0x080147a0
 8011c44:	08014760 	.word	0x08014760

08011c48 <puts>:
 8011c48:	4b02      	ldr	r3, [pc, #8]	; (8011c54 <puts+0xc>)
 8011c4a:	4601      	mov	r1, r0
 8011c4c:	6818      	ldr	r0, [r3, #0]
 8011c4e:	f7ff bf8d 	b.w	8011b6c <_puts_r>
 8011c52:	bf00      	nop
 8011c54:	24000024 	.word	0x24000024

08011c58 <__swbuf_r>:
 8011c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c5a:	460e      	mov	r6, r1
 8011c5c:	4614      	mov	r4, r2
 8011c5e:	4605      	mov	r5, r0
 8011c60:	b118      	cbz	r0, 8011c6a <__swbuf_r+0x12>
 8011c62:	6983      	ldr	r3, [r0, #24]
 8011c64:	b90b      	cbnz	r3, 8011c6a <__swbuf_r+0x12>
 8011c66:	f000 ffdf 	bl	8012c28 <__sinit>
 8011c6a:	4b21      	ldr	r3, [pc, #132]	; (8011cf0 <__swbuf_r+0x98>)
 8011c6c:	429c      	cmp	r4, r3
 8011c6e:	d12b      	bne.n	8011cc8 <__swbuf_r+0x70>
 8011c70:	686c      	ldr	r4, [r5, #4]
 8011c72:	69a3      	ldr	r3, [r4, #24]
 8011c74:	60a3      	str	r3, [r4, #8]
 8011c76:	89a3      	ldrh	r3, [r4, #12]
 8011c78:	071a      	lsls	r2, r3, #28
 8011c7a:	d52f      	bpl.n	8011cdc <__swbuf_r+0x84>
 8011c7c:	6923      	ldr	r3, [r4, #16]
 8011c7e:	b36b      	cbz	r3, 8011cdc <__swbuf_r+0x84>
 8011c80:	6923      	ldr	r3, [r4, #16]
 8011c82:	6820      	ldr	r0, [r4, #0]
 8011c84:	1ac0      	subs	r0, r0, r3
 8011c86:	6963      	ldr	r3, [r4, #20]
 8011c88:	b2f6      	uxtb	r6, r6
 8011c8a:	4283      	cmp	r3, r0
 8011c8c:	4637      	mov	r7, r6
 8011c8e:	dc04      	bgt.n	8011c9a <__swbuf_r+0x42>
 8011c90:	4621      	mov	r1, r4
 8011c92:	4628      	mov	r0, r5
 8011c94:	f000 ff34 	bl	8012b00 <_fflush_r>
 8011c98:	bb30      	cbnz	r0, 8011ce8 <__swbuf_r+0x90>
 8011c9a:	68a3      	ldr	r3, [r4, #8]
 8011c9c:	3b01      	subs	r3, #1
 8011c9e:	60a3      	str	r3, [r4, #8]
 8011ca0:	6823      	ldr	r3, [r4, #0]
 8011ca2:	1c5a      	adds	r2, r3, #1
 8011ca4:	6022      	str	r2, [r4, #0]
 8011ca6:	701e      	strb	r6, [r3, #0]
 8011ca8:	6963      	ldr	r3, [r4, #20]
 8011caa:	3001      	adds	r0, #1
 8011cac:	4283      	cmp	r3, r0
 8011cae:	d004      	beq.n	8011cba <__swbuf_r+0x62>
 8011cb0:	89a3      	ldrh	r3, [r4, #12]
 8011cb2:	07db      	lsls	r3, r3, #31
 8011cb4:	d506      	bpl.n	8011cc4 <__swbuf_r+0x6c>
 8011cb6:	2e0a      	cmp	r6, #10
 8011cb8:	d104      	bne.n	8011cc4 <__swbuf_r+0x6c>
 8011cba:	4621      	mov	r1, r4
 8011cbc:	4628      	mov	r0, r5
 8011cbe:	f000 ff1f 	bl	8012b00 <_fflush_r>
 8011cc2:	b988      	cbnz	r0, 8011ce8 <__swbuf_r+0x90>
 8011cc4:	4638      	mov	r0, r7
 8011cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cc8:	4b0a      	ldr	r3, [pc, #40]	; (8011cf4 <__swbuf_r+0x9c>)
 8011cca:	429c      	cmp	r4, r3
 8011ccc:	d101      	bne.n	8011cd2 <__swbuf_r+0x7a>
 8011cce:	68ac      	ldr	r4, [r5, #8]
 8011cd0:	e7cf      	b.n	8011c72 <__swbuf_r+0x1a>
 8011cd2:	4b09      	ldr	r3, [pc, #36]	; (8011cf8 <__swbuf_r+0xa0>)
 8011cd4:	429c      	cmp	r4, r3
 8011cd6:	bf08      	it	eq
 8011cd8:	68ec      	ldreq	r4, [r5, #12]
 8011cda:	e7ca      	b.n	8011c72 <__swbuf_r+0x1a>
 8011cdc:	4621      	mov	r1, r4
 8011cde:	4628      	mov	r0, r5
 8011ce0:	f000 f80c 	bl	8011cfc <__swsetup_r>
 8011ce4:	2800      	cmp	r0, #0
 8011ce6:	d0cb      	beq.n	8011c80 <__swbuf_r+0x28>
 8011ce8:	f04f 37ff 	mov.w	r7, #4294967295
 8011cec:	e7ea      	b.n	8011cc4 <__swbuf_r+0x6c>
 8011cee:	bf00      	nop
 8011cf0:	08014780 	.word	0x08014780
 8011cf4:	080147a0 	.word	0x080147a0
 8011cf8:	08014760 	.word	0x08014760

08011cfc <__swsetup_r>:
 8011cfc:	4b32      	ldr	r3, [pc, #200]	; (8011dc8 <__swsetup_r+0xcc>)
 8011cfe:	b570      	push	{r4, r5, r6, lr}
 8011d00:	681d      	ldr	r5, [r3, #0]
 8011d02:	4606      	mov	r6, r0
 8011d04:	460c      	mov	r4, r1
 8011d06:	b125      	cbz	r5, 8011d12 <__swsetup_r+0x16>
 8011d08:	69ab      	ldr	r3, [r5, #24]
 8011d0a:	b913      	cbnz	r3, 8011d12 <__swsetup_r+0x16>
 8011d0c:	4628      	mov	r0, r5
 8011d0e:	f000 ff8b 	bl	8012c28 <__sinit>
 8011d12:	4b2e      	ldr	r3, [pc, #184]	; (8011dcc <__swsetup_r+0xd0>)
 8011d14:	429c      	cmp	r4, r3
 8011d16:	d10f      	bne.n	8011d38 <__swsetup_r+0x3c>
 8011d18:	686c      	ldr	r4, [r5, #4]
 8011d1a:	89a3      	ldrh	r3, [r4, #12]
 8011d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d20:	0719      	lsls	r1, r3, #28
 8011d22:	d42c      	bmi.n	8011d7e <__swsetup_r+0x82>
 8011d24:	06dd      	lsls	r5, r3, #27
 8011d26:	d411      	bmi.n	8011d4c <__swsetup_r+0x50>
 8011d28:	2309      	movs	r3, #9
 8011d2a:	6033      	str	r3, [r6, #0]
 8011d2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011d30:	81a3      	strh	r3, [r4, #12]
 8011d32:	f04f 30ff 	mov.w	r0, #4294967295
 8011d36:	e03e      	b.n	8011db6 <__swsetup_r+0xba>
 8011d38:	4b25      	ldr	r3, [pc, #148]	; (8011dd0 <__swsetup_r+0xd4>)
 8011d3a:	429c      	cmp	r4, r3
 8011d3c:	d101      	bne.n	8011d42 <__swsetup_r+0x46>
 8011d3e:	68ac      	ldr	r4, [r5, #8]
 8011d40:	e7eb      	b.n	8011d1a <__swsetup_r+0x1e>
 8011d42:	4b24      	ldr	r3, [pc, #144]	; (8011dd4 <__swsetup_r+0xd8>)
 8011d44:	429c      	cmp	r4, r3
 8011d46:	bf08      	it	eq
 8011d48:	68ec      	ldreq	r4, [r5, #12]
 8011d4a:	e7e6      	b.n	8011d1a <__swsetup_r+0x1e>
 8011d4c:	0758      	lsls	r0, r3, #29
 8011d4e:	d512      	bpl.n	8011d76 <__swsetup_r+0x7a>
 8011d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d52:	b141      	cbz	r1, 8011d66 <__swsetup_r+0x6a>
 8011d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d58:	4299      	cmp	r1, r3
 8011d5a:	d002      	beq.n	8011d62 <__swsetup_r+0x66>
 8011d5c:	4630      	mov	r0, r6
 8011d5e:	f001 fc11 	bl	8013584 <_free_r>
 8011d62:	2300      	movs	r3, #0
 8011d64:	6363      	str	r3, [r4, #52]	; 0x34
 8011d66:	89a3      	ldrh	r3, [r4, #12]
 8011d68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d6c:	81a3      	strh	r3, [r4, #12]
 8011d6e:	2300      	movs	r3, #0
 8011d70:	6063      	str	r3, [r4, #4]
 8011d72:	6923      	ldr	r3, [r4, #16]
 8011d74:	6023      	str	r3, [r4, #0]
 8011d76:	89a3      	ldrh	r3, [r4, #12]
 8011d78:	f043 0308 	orr.w	r3, r3, #8
 8011d7c:	81a3      	strh	r3, [r4, #12]
 8011d7e:	6923      	ldr	r3, [r4, #16]
 8011d80:	b94b      	cbnz	r3, 8011d96 <__swsetup_r+0x9a>
 8011d82:	89a3      	ldrh	r3, [r4, #12]
 8011d84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d8c:	d003      	beq.n	8011d96 <__swsetup_r+0x9a>
 8011d8e:	4621      	mov	r1, r4
 8011d90:	4630      	mov	r0, r6
 8011d92:	f001 f813 	bl	8012dbc <__smakebuf_r>
 8011d96:	89a0      	ldrh	r0, [r4, #12]
 8011d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d9c:	f010 0301 	ands.w	r3, r0, #1
 8011da0:	d00a      	beq.n	8011db8 <__swsetup_r+0xbc>
 8011da2:	2300      	movs	r3, #0
 8011da4:	60a3      	str	r3, [r4, #8]
 8011da6:	6963      	ldr	r3, [r4, #20]
 8011da8:	425b      	negs	r3, r3
 8011daa:	61a3      	str	r3, [r4, #24]
 8011dac:	6923      	ldr	r3, [r4, #16]
 8011dae:	b943      	cbnz	r3, 8011dc2 <__swsetup_r+0xc6>
 8011db0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011db4:	d1ba      	bne.n	8011d2c <__swsetup_r+0x30>
 8011db6:	bd70      	pop	{r4, r5, r6, pc}
 8011db8:	0781      	lsls	r1, r0, #30
 8011dba:	bf58      	it	pl
 8011dbc:	6963      	ldrpl	r3, [r4, #20]
 8011dbe:	60a3      	str	r3, [r4, #8]
 8011dc0:	e7f4      	b.n	8011dac <__swsetup_r+0xb0>
 8011dc2:	2000      	movs	r0, #0
 8011dc4:	e7f7      	b.n	8011db6 <__swsetup_r+0xba>
 8011dc6:	bf00      	nop
 8011dc8:	24000024 	.word	0x24000024
 8011dcc:	08014780 	.word	0x08014780
 8011dd0:	080147a0 	.word	0x080147a0
 8011dd4:	08014760 	.word	0x08014760

08011dd8 <quorem>:
 8011dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ddc:	6903      	ldr	r3, [r0, #16]
 8011dde:	690c      	ldr	r4, [r1, #16]
 8011de0:	42a3      	cmp	r3, r4
 8011de2:	4607      	mov	r7, r0
 8011de4:	f2c0 8081 	blt.w	8011eea <quorem+0x112>
 8011de8:	3c01      	subs	r4, #1
 8011dea:	f101 0814 	add.w	r8, r1, #20
 8011dee:	f100 0514 	add.w	r5, r0, #20
 8011df2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011df6:	9301      	str	r3, [sp, #4]
 8011df8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011dfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e00:	3301      	adds	r3, #1
 8011e02:	429a      	cmp	r2, r3
 8011e04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011e08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011e0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011e10:	d331      	bcc.n	8011e76 <quorem+0x9e>
 8011e12:	f04f 0e00 	mov.w	lr, #0
 8011e16:	4640      	mov	r0, r8
 8011e18:	46ac      	mov	ip, r5
 8011e1a:	46f2      	mov	sl, lr
 8011e1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011e20:	b293      	uxth	r3, r2
 8011e22:	fb06 e303 	mla	r3, r6, r3, lr
 8011e26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	ebaa 0303 	sub.w	r3, sl, r3
 8011e30:	0c12      	lsrs	r2, r2, #16
 8011e32:	f8dc a000 	ldr.w	sl, [ip]
 8011e36:	fb06 e202 	mla	r2, r6, r2, lr
 8011e3a:	fa13 f38a 	uxtah	r3, r3, sl
 8011e3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011e42:	fa1f fa82 	uxth.w	sl, r2
 8011e46:	f8dc 2000 	ldr.w	r2, [ip]
 8011e4a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011e4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e52:	b29b      	uxth	r3, r3
 8011e54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e58:	4581      	cmp	r9, r0
 8011e5a:	f84c 3b04 	str.w	r3, [ip], #4
 8011e5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011e62:	d2db      	bcs.n	8011e1c <quorem+0x44>
 8011e64:	f855 300b 	ldr.w	r3, [r5, fp]
 8011e68:	b92b      	cbnz	r3, 8011e76 <quorem+0x9e>
 8011e6a:	9b01      	ldr	r3, [sp, #4]
 8011e6c:	3b04      	subs	r3, #4
 8011e6e:	429d      	cmp	r5, r3
 8011e70:	461a      	mov	r2, r3
 8011e72:	d32e      	bcc.n	8011ed2 <quorem+0xfa>
 8011e74:	613c      	str	r4, [r7, #16]
 8011e76:	4638      	mov	r0, r7
 8011e78:	f001 fa74 	bl	8013364 <__mcmp>
 8011e7c:	2800      	cmp	r0, #0
 8011e7e:	db24      	blt.n	8011eca <quorem+0xf2>
 8011e80:	3601      	adds	r6, #1
 8011e82:	4628      	mov	r0, r5
 8011e84:	f04f 0c00 	mov.w	ip, #0
 8011e88:	f858 2b04 	ldr.w	r2, [r8], #4
 8011e8c:	f8d0 e000 	ldr.w	lr, [r0]
 8011e90:	b293      	uxth	r3, r2
 8011e92:	ebac 0303 	sub.w	r3, ip, r3
 8011e96:	0c12      	lsrs	r2, r2, #16
 8011e98:	fa13 f38e 	uxtah	r3, r3, lr
 8011e9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011ea0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011ea4:	b29b      	uxth	r3, r3
 8011ea6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011eaa:	45c1      	cmp	r9, r8
 8011eac:	f840 3b04 	str.w	r3, [r0], #4
 8011eb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011eb4:	d2e8      	bcs.n	8011e88 <quorem+0xb0>
 8011eb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011eba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ebe:	b922      	cbnz	r2, 8011eca <quorem+0xf2>
 8011ec0:	3b04      	subs	r3, #4
 8011ec2:	429d      	cmp	r5, r3
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	d30a      	bcc.n	8011ede <quorem+0x106>
 8011ec8:	613c      	str	r4, [r7, #16]
 8011eca:	4630      	mov	r0, r6
 8011ecc:	b003      	add	sp, #12
 8011ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ed2:	6812      	ldr	r2, [r2, #0]
 8011ed4:	3b04      	subs	r3, #4
 8011ed6:	2a00      	cmp	r2, #0
 8011ed8:	d1cc      	bne.n	8011e74 <quorem+0x9c>
 8011eda:	3c01      	subs	r4, #1
 8011edc:	e7c7      	b.n	8011e6e <quorem+0x96>
 8011ede:	6812      	ldr	r2, [r2, #0]
 8011ee0:	3b04      	subs	r3, #4
 8011ee2:	2a00      	cmp	r2, #0
 8011ee4:	d1f0      	bne.n	8011ec8 <quorem+0xf0>
 8011ee6:	3c01      	subs	r4, #1
 8011ee8:	e7eb      	b.n	8011ec2 <quorem+0xea>
 8011eea:	2000      	movs	r0, #0
 8011eec:	e7ee      	b.n	8011ecc <quorem+0xf4>
	...

08011ef0 <_dtoa_r>:
 8011ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef4:	ec59 8b10 	vmov	r8, r9, d0
 8011ef8:	b095      	sub	sp, #84	; 0x54
 8011efa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011efc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8011efe:	9107      	str	r1, [sp, #28]
 8011f00:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8011f04:	4606      	mov	r6, r0
 8011f06:	9209      	str	r2, [sp, #36]	; 0x24
 8011f08:	9310      	str	r3, [sp, #64]	; 0x40
 8011f0a:	b975      	cbnz	r5, 8011f2a <_dtoa_r+0x3a>
 8011f0c:	2010      	movs	r0, #16
 8011f0e:	f000 ff95 	bl	8012e3c <malloc>
 8011f12:	4602      	mov	r2, r0
 8011f14:	6270      	str	r0, [r6, #36]	; 0x24
 8011f16:	b920      	cbnz	r0, 8011f22 <_dtoa_r+0x32>
 8011f18:	4bab      	ldr	r3, [pc, #684]	; (80121c8 <_dtoa_r+0x2d8>)
 8011f1a:	21ea      	movs	r1, #234	; 0xea
 8011f1c:	48ab      	ldr	r0, [pc, #684]	; (80121cc <_dtoa_r+0x2dc>)
 8011f1e:	f001 fd9b 	bl	8013a58 <__assert_func>
 8011f22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011f26:	6005      	str	r5, [r0, #0]
 8011f28:	60c5      	str	r5, [r0, #12]
 8011f2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011f2c:	6819      	ldr	r1, [r3, #0]
 8011f2e:	b151      	cbz	r1, 8011f46 <_dtoa_r+0x56>
 8011f30:	685a      	ldr	r2, [r3, #4]
 8011f32:	604a      	str	r2, [r1, #4]
 8011f34:	2301      	movs	r3, #1
 8011f36:	4093      	lsls	r3, r2
 8011f38:	608b      	str	r3, [r1, #8]
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	f000 ffd4 	bl	8012ee8 <_Bfree>
 8011f40:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011f42:	2200      	movs	r2, #0
 8011f44:	601a      	str	r2, [r3, #0]
 8011f46:	f1b9 0300 	subs.w	r3, r9, #0
 8011f4a:	bfbb      	ittet	lt
 8011f4c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011f50:	9303      	strlt	r3, [sp, #12]
 8011f52:	2300      	movge	r3, #0
 8011f54:	2201      	movlt	r2, #1
 8011f56:	bfac      	ite	ge
 8011f58:	6023      	strge	r3, [r4, #0]
 8011f5a:	6022      	strlt	r2, [r4, #0]
 8011f5c:	4b9c      	ldr	r3, [pc, #624]	; (80121d0 <_dtoa_r+0x2e0>)
 8011f5e:	9c03      	ldr	r4, [sp, #12]
 8011f60:	43a3      	bics	r3, r4
 8011f62:	d11a      	bne.n	8011f9a <_dtoa_r+0xaa>
 8011f64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011f66:	f242 730f 	movw	r3, #9999	; 0x270f
 8011f6a:	6013      	str	r3, [r2, #0]
 8011f6c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011f70:	ea53 0308 	orrs.w	r3, r3, r8
 8011f74:	f000 8512 	beq.w	801299c <_dtoa_r+0xaac>
 8011f78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011f7a:	b953      	cbnz	r3, 8011f92 <_dtoa_r+0xa2>
 8011f7c:	4b95      	ldr	r3, [pc, #596]	; (80121d4 <_dtoa_r+0x2e4>)
 8011f7e:	e01f      	b.n	8011fc0 <_dtoa_r+0xd0>
 8011f80:	4b95      	ldr	r3, [pc, #596]	; (80121d8 <_dtoa_r+0x2e8>)
 8011f82:	9300      	str	r3, [sp, #0]
 8011f84:	3308      	adds	r3, #8
 8011f86:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011f88:	6013      	str	r3, [r2, #0]
 8011f8a:	9800      	ldr	r0, [sp, #0]
 8011f8c:	b015      	add	sp, #84	; 0x54
 8011f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f92:	4b90      	ldr	r3, [pc, #576]	; (80121d4 <_dtoa_r+0x2e4>)
 8011f94:	9300      	str	r3, [sp, #0]
 8011f96:	3303      	adds	r3, #3
 8011f98:	e7f5      	b.n	8011f86 <_dtoa_r+0x96>
 8011f9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fa6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011faa:	d10b      	bne.n	8011fc4 <_dtoa_r+0xd4>
 8011fac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011fae:	2301      	movs	r3, #1
 8011fb0:	6013      	str	r3, [r2, #0]
 8011fb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	f000 84ee 	beq.w	8012996 <_dtoa_r+0xaa6>
 8011fba:	4888      	ldr	r0, [pc, #544]	; (80121dc <_dtoa_r+0x2ec>)
 8011fbc:	6018      	str	r0, [r3, #0]
 8011fbe:	1e43      	subs	r3, r0, #1
 8011fc0:	9300      	str	r3, [sp, #0]
 8011fc2:	e7e2      	b.n	8011f8a <_dtoa_r+0x9a>
 8011fc4:	a913      	add	r1, sp, #76	; 0x4c
 8011fc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011fca:	aa12      	add	r2, sp, #72	; 0x48
 8011fcc:	4630      	mov	r0, r6
 8011fce:	f001 fa6d 	bl	80134ac <__d2b>
 8011fd2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8011fd6:	4605      	mov	r5, r0
 8011fd8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011fda:	2900      	cmp	r1, #0
 8011fdc:	d047      	beq.n	801206e <_dtoa_r+0x17e>
 8011fde:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011fe0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011fe4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011fe8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8011fec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011ff0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011ff4:	2400      	movs	r4, #0
 8011ff6:	ec43 2b16 	vmov	d6, r2, r3
 8011ffa:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011ffe:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80121b0 <_dtoa_r+0x2c0>
 8012002:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012006:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80121b8 <_dtoa_r+0x2c8>
 801200a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801200e:	eeb0 7b46 	vmov.f64	d7, d6
 8012012:	ee06 1a90 	vmov	s13, r1
 8012016:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801201a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80121c0 <_dtoa_r+0x2d0>
 801201e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012022:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012026:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801202a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801202e:	ee16 ba90 	vmov	fp, s13
 8012032:	9411      	str	r4, [sp, #68]	; 0x44
 8012034:	d508      	bpl.n	8012048 <_dtoa_r+0x158>
 8012036:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801203a:	eeb4 6b47 	vcmp.f64	d6, d7
 801203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012042:	bf18      	it	ne
 8012044:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012048:	f1bb 0f16 	cmp.w	fp, #22
 801204c:	d832      	bhi.n	80120b4 <_dtoa_r+0x1c4>
 801204e:	4b64      	ldr	r3, [pc, #400]	; (80121e0 <_dtoa_r+0x2f0>)
 8012050:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012054:	ed93 7b00 	vldr	d7, [r3]
 8012058:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801205c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012064:	d501      	bpl.n	801206a <_dtoa_r+0x17a>
 8012066:	f10b 3bff 	add.w	fp, fp, #4294967295
 801206a:	2300      	movs	r3, #0
 801206c:	e023      	b.n	80120b6 <_dtoa_r+0x1c6>
 801206e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012070:	4401      	add	r1, r0
 8012072:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012076:	2b20      	cmp	r3, #32
 8012078:	bfc3      	ittte	gt
 801207a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801207e:	fa04 f303 	lslgt.w	r3, r4, r3
 8012082:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012086:	f1c3 0320 	rsble	r3, r3, #32
 801208a:	bfc6      	itte	gt
 801208c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012090:	ea43 0308 	orrgt.w	r3, r3, r8
 8012094:	fa08 f303 	lslle.w	r3, r8, r3
 8012098:	ee07 3a90 	vmov	s15, r3
 801209c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80120a0:	3901      	subs	r1, #1
 80120a2:	ed8d 7b00 	vstr	d7, [sp]
 80120a6:	9c01      	ldr	r4, [sp, #4]
 80120a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80120b0:	2401      	movs	r4, #1
 80120b2:	e7a0      	b.n	8011ff6 <_dtoa_r+0x106>
 80120b4:	2301      	movs	r3, #1
 80120b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80120b8:	1a43      	subs	r3, r0, r1
 80120ba:	1e5a      	subs	r2, r3, #1
 80120bc:	bf45      	ittet	mi
 80120be:	f1c3 0301 	rsbmi	r3, r3, #1
 80120c2:	9305      	strmi	r3, [sp, #20]
 80120c4:	2300      	movpl	r3, #0
 80120c6:	2300      	movmi	r3, #0
 80120c8:	9206      	str	r2, [sp, #24]
 80120ca:	bf54      	ite	pl
 80120cc:	9305      	strpl	r3, [sp, #20]
 80120ce:	9306      	strmi	r3, [sp, #24]
 80120d0:	f1bb 0f00 	cmp.w	fp, #0
 80120d4:	db18      	blt.n	8012108 <_dtoa_r+0x218>
 80120d6:	9b06      	ldr	r3, [sp, #24]
 80120d8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80120dc:	445b      	add	r3, fp
 80120de:	9306      	str	r3, [sp, #24]
 80120e0:	2300      	movs	r3, #0
 80120e2:	9a07      	ldr	r2, [sp, #28]
 80120e4:	2a09      	cmp	r2, #9
 80120e6:	d849      	bhi.n	801217c <_dtoa_r+0x28c>
 80120e8:	2a05      	cmp	r2, #5
 80120ea:	bfc4      	itt	gt
 80120ec:	3a04      	subgt	r2, #4
 80120ee:	9207      	strgt	r2, [sp, #28]
 80120f0:	9a07      	ldr	r2, [sp, #28]
 80120f2:	f1a2 0202 	sub.w	r2, r2, #2
 80120f6:	bfcc      	ite	gt
 80120f8:	2400      	movgt	r4, #0
 80120fa:	2401      	movle	r4, #1
 80120fc:	2a03      	cmp	r2, #3
 80120fe:	d848      	bhi.n	8012192 <_dtoa_r+0x2a2>
 8012100:	e8df f002 	tbb	[pc, r2]
 8012104:	3a2c2e0b 	.word	0x3a2c2e0b
 8012108:	9b05      	ldr	r3, [sp, #20]
 801210a:	2200      	movs	r2, #0
 801210c:	eba3 030b 	sub.w	r3, r3, fp
 8012110:	9305      	str	r3, [sp, #20]
 8012112:	920e      	str	r2, [sp, #56]	; 0x38
 8012114:	f1cb 0300 	rsb	r3, fp, #0
 8012118:	e7e3      	b.n	80120e2 <_dtoa_r+0x1f2>
 801211a:	2200      	movs	r2, #0
 801211c:	9208      	str	r2, [sp, #32]
 801211e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012120:	2a00      	cmp	r2, #0
 8012122:	dc39      	bgt.n	8012198 <_dtoa_r+0x2a8>
 8012124:	f04f 0a01 	mov.w	sl, #1
 8012128:	46d1      	mov	r9, sl
 801212a:	4652      	mov	r2, sl
 801212c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012130:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8012132:	2100      	movs	r1, #0
 8012134:	6079      	str	r1, [r7, #4]
 8012136:	2004      	movs	r0, #4
 8012138:	f100 0c14 	add.w	ip, r0, #20
 801213c:	4594      	cmp	ip, r2
 801213e:	6879      	ldr	r1, [r7, #4]
 8012140:	d92f      	bls.n	80121a2 <_dtoa_r+0x2b2>
 8012142:	4630      	mov	r0, r6
 8012144:	930c      	str	r3, [sp, #48]	; 0x30
 8012146:	f000 fe8f 	bl	8012e68 <_Balloc>
 801214a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801214c:	9000      	str	r0, [sp, #0]
 801214e:	4602      	mov	r2, r0
 8012150:	2800      	cmp	r0, #0
 8012152:	d149      	bne.n	80121e8 <_dtoa_r+0x2f8>
 8012154:	4b23      	ldr	r3, [pc, #140]	; (80121e4 <_dtoa_r+0x2f4>)
 8012156:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801215a:	e6df      	b.n	8011f1c <_dtoa_r+0x2c>
 801215c:	2201      	movs	r2, #1
 801215e:	e7dd      	b.n	801211c <_dtoa_r+0x22c>
 8012160:	2200      	movs	r2, #0
 8012162:	9208      	str	r2, [sp, #32]
 8012164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012166:	eb0b 0a02 	add.w	sl, fp, r2
 801216a:	f10a 0901 	add.w	r9, sl, #1
 801216e:	464a      	mov	r2, r9
 8012170:	2a01      	cmp	r2, #1
 8012172:	bfb8      	it	lt
 8012174:	2201      	movlt	r2, #1
 8012176:	e7db      	b.n	8012130 <_dtoa_r+0x240>
 8012178:	2201      	movs	r2, #1
 801217a:	e7f2      	b.n	8012162 <_dtoa_r+0x272>
 801217c:	2401      	movs	r4, #1
 801217e:	2200      	movs	r2, #0
 8012180:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012184:	f04f 3aff 	mov.w	sl, #4294967295
 8012188:	2100      	movs	r1, #0
 801218a:	46d1      	mov	r9, sl
 801218c:	2212      	movs	r2, #18
 801218e:	9109      	str	r1, [sp, #36]	; 0x24
 8012190:	e7ce      	b.n	8012130 <_dtoa_r+0x240>
 8012192:	2201      	movs	r2, #1
 8012194:	9208      	str	r2, [sp, #32]
 8012196:	e7f5      	b.n	8012184 <_dtoa_r+0x294>
 8012198:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801219c:	46d1      	mov	r9, sl
 801219e:	4652      	mov	r2, sl
 80121a0:	e7c6      	b.n	8012130 <_dtoa_r+0x240>
 80121a2:	3101      	adds	r1, #1
 80121a4:	6079      	str	r1, [r7, #4]
 80121a6:	0040      	lsls	r0, r0, #1
 80121a8:	e7c6      	b.n	8012138 <_dtoa_r+0x248>
 80121aa:	bf00      	nop
 80121ac:	f3af 8000 	nop.w
 80121b0:	636f4361 	.word	0x636f4361
 80121b4:	3fd287a7 	.word	0x3fd287a7
 80121b8:	8b60c8b3 	.word	0x8b60c8b3
 80121bc:	3fc68a28 	.word	0x3fc68a28
 80121c0:	509f79fb 	.word	0x509f79fb
 80121c4:	3fd34413 	.word	0x3fd34413
 80121c8:	080146d9 	.word	0x080146d9
 80121cc:	080146f0 	.word	0x080146f0
 80121d0:	7ff00000 	.word	0x7ff00000
 80121d4:	080146d5 	.word	0x080146d5
 80121d8:	080146cc 	.word	0x080146cc
 80121dc:	080146a9 	.word	0x080146a9
 80121e0:	08014848 	.word	0x08014848
 80121e4:	0801474f 	.word	0x0801474f
 80121e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80121ea:	9900      	ldr	r1, [sp, #0]
 80121ec:	6011      	str	r1, [r2, #0]
 80121ee:	f1b9 0f0e 	cmp.w	r9, #14
 80121f2:	d872      	bhi.n	80122da <_dtoa_r+0x3ea>
 80121f4:	2c00      	cmp	r4, #0
 80121f6:	d070      	beq.n	80122da <_dtoa_r+0x3ea>
 80121f8:	f1bb 0f00 	cmp.w	fp, #0
 80121fc:	f340 80a6 	ble.w	801234c <_dtoa_r+0x45c>
 8012200:	49ca      	ldr	r1, [pc, #808]	; (801252c <_dtoa_r+0x63c>)
 8012202:	f00b 020f 	and.w	r2, fp, #15
 8012206:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801220a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801220e:	ed92 7b00 	vldr	d7, [r2]
 8012212:	ea4f 112b 	mov.w	r1, fp, asr #4
 8012216:	f000 808d 	beq.w	8012334 <_dtoa_r+0x444>
 801221a:	4ac5      	ldr	r2, [pc, #788]	; (8012530 <_dtoa_r+0x640>)
 801221c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8012220:	ed92 6b08 	vldr	d6, [r2, #32]
 8012224:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8012228:	ed8d 6b02 	vstr	d6, [sp, #8]
 801222c:	f001 010f 	and.w	r1, r1, #15
 8012230:	2203      	movs	r2, #3
 8012232:	48bf      	ldr	r0, [pc, #764]	; (8012530 <_dtoa_r+0x640>)
 8012234:	2900      	cmp	r1, #0
 8012236:	d17f      	bne.n	8012338 <_dtoa_r+0x448>
 8012238:	ed9d 6b02 	vldr	d6, [sp, #8]
 801223c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012240:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012244:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012246:	2900      	cmp	r1, #0
 8012248:	f000 80b2 	beq.w	80123b0 <_dtoa_r+0x4c0>
 801224c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012250:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012254:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801225c:	f140 80a8 	bpl.w	80123b0 <_dtoa_r+0x4c0>
 8012260:	f1b9 0f00 	cmp.w	r9, #0
 8012264:	f000 80a4 	beq.w	80123b0 <_dtoa_r+0x4c0>
 8012268:	f1ba 0f00 	cmp.w	sl, #0
 801226c:	dd31      	ble.n	80122d2 <_dtoa_r+0x3e2>
 801226e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012272:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012276:	ed8d 7b02 	vstr	d7, [sp, #8]
 801227a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801227e:	3201      	adds	r2, #1
 8012280:	4650      	mov	r0, sl
 8012282:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012286:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801228a:	ee07 2a90 	vmov	s15, r2
 801228e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012292:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012296:	ed8d 5b02 	vstr	d5, [sp, #8]
 801229a:	9c03      	ldr	r4, [sp, #12]
 801229c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80122a0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80122a4:	2800      	cmp	r0, #0
 80122a6:	f040 8086 	bne.w	80123b6 <_dtoa_r+0x4c6>
 80122aa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80122ae:	ee36 6b47 	vsub.f64	d6, d6, d7
 80122b2:	ec42 1b17 	vmov	d7, r1, r2
 80122b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80122ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122be:	f300 8272 	bgt.w	80127a6 <_dtoa_r+0x8b6>
 80122c2:	eeb1 7b47 	vneg.f64	d7, d7
 80122c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80122ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ce:	f100 8267 	bmi.w	80127a0 <_dtoa_r+0x8b0>
 80122d2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80122d6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80122da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80122dc:	2a00      	cmp	r2, #0
 80122de:	f2c0 8129 	blt.w	8012534 <_dtoa_r+0x644>
 80122e2:	f1bb 0f0e 	cmp.w	fp, #14
 80122e6:	f300 8125 	bgt.w	8012534 <_dtoa_r+0x644>
 80122ea:	4b90      	ldr	r3, [pc, #576]	; (801252c <_dtoa_r+0x63c>)
 80122ec:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80122f0:	ed93 6b00 	vldr	d6, [r3]
 80122f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	f280 80c3 	bge.w	8012482 <_dtoa_r+0x592>
 80122fc:	f1b9 0f00 	cmp.w	r9, #0
 8012300:	f300 80bf 	bgt.w	8012482 <_dtoa_r+0x592>
 8012304:	f040 824c 	bne.w	80127a0 <_dtoa_r+0x8b0>
 8012308:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801230c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012310:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012314:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801231c:	464c      	mov	r4, r9
 801231e:	464f      	mov	r7, r9
 8012320:	f280 8222 	bge.w	8012768 <_dtoa_r+0x878>
 8012324:	f8dd 8000 	ldr.w	r8, [sp]
 8012328:	2331      	movs	r3, #49	; 0x31
 801232a:	f808 3b01 	strb.w	r3, [r8], #1
 801232e:	f10b 0b01 	add.w	fp, fp, #1
 8012332:	e21e      	b.n	8012772 <_dtoa_r+0x882>
 8012334:	2202      	movs	r2, #2
 8012336:	e77c      	b.n	8012232 <_dtoa_r+0x342>
 8012338:	07cc      	lsls	r4, r1, #31
 801233a:	d504      	bpl.n	8012346 <_dtoa_r+0x456>
 801233c:	ed90 6b00 	vldr	d6, [r0]
 8012340:	3201      	adds	r2, #1
 8012342:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012346:	1049      	asrs	r1, r1, #1
 8012348:	3008      	adds	r0, #8
 801234a:	e773      	b.n	8012234 <_dtoa_r+0x344>
 801234c:	d02e      	beq.n	80123ac <_dtoa_r+0x4bc>
 801234e:	f1cb 0100 	rsb	r1, fp, #0
 8012352:	4a76      	ldr	r2, [pc, #472]	; (801252c <_dtoa_r+0x63c>)
 8012354:	f001 000f 	and.w	r0, r1, #15
 8012358:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801235c:	ed92 7b00 	vldr	d7, [r2]
 8012360:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8012364:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012368:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801236c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8012370:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8012374:	486e      	ldr	r0, [pc, #440]	; (8012530 <_dtoa_r+0x640>)
 8012376:	1109      	asrs	r1, r1, #4
 8012378:	2400      	movs	r4, #0
 801237a:	2202      	movs	r2, #2
 801237c:	b939      	cbnz	r1, 801238e <_dtoa_r+0x49e>
 801237e:	2c00      	cmp	r4, #0
 8012380:	f43f af60 	beq.w	8012244 <_dtoa_r+0x354>
 8012384:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012388:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801238c:	e75a      	b.n	8012244 <_dtoa_r+0x354>
 801238e:	07cf      	lsls	r7, r1, #31
 8012390:	d509      	bpl.n	80123a6 <_dtoa_r+0x4b6>
 8012392:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8012396:	ed90 7b00 	vldr	d7, [r0]
 801239a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801239e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80123a2:	3201      	adds	r2, #1
 80123a4:	2401      	movs	r4, #1
 80123a6:	1049      	asrs	r1, r1, #1
 80123a8:	3008      	adds	r0, #8
 80123aa:	e7e7      	b.n	801237c <_dtoa_r+0x48c>
 80123ac:	2202      	movs	r2, #2
 80123ae:	e749      	b.n	8012244 <_dtoa_r+0x354>
 80123b0:	465f      	mov	r7, fp
 80123b2:	4648      	mov	r0, r9
 80123b4:	e765      	b.n	8012282 <_dtoa_r+0x392>
 80123b6:	ec42 1b17 	vmov	d7, r1, r2
 80123ba:	4a5c      	ldr	r2, [pc, #368]	; (801252c <_dtoa_r+0x63c>)
 80123bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80123c0:	ed12 4b02 	vldr	d4, [r2, #-8]
 80123c4:	9a00      	ldr	r2, [sp, #0]
 80123c6:	1814      	adds	r4, r2, r0
 80123c8:	9a08      	ldr	r2, [sp, #32]
 80123ca:	b352      	cbz	r2, 8012422 <_dtoa_r+0x532>
 80123cc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80123d0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80123d4:	f8dd 8000 	ldr.w	r8, [sp]
 80123d8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80123dc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80123e0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80123e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80123e8:	ee14 2a90 	vmov	r2, s9
 80123ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80123f0:	3230      	adds	r2, #48	; 0x30
 80123f2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80123f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80123fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123fe:	f808 2b01 	strb.w	r2, [r8], #1
 8012402:	d439      	bmi.n	8012478 <_dtoa_r+0x588>
 8012404:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012408:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801240c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012410:	d472      	bmi.n	80124f8 <_dtoa_r+0x608>
 8012412:	45a0      	cmp	r8, r4
 8012414:	f43f af5d 	beq.w	80122d2 <_dtoa_r+0x3e2>
 8012418:	ee27 7b03 	vmul.f64	d7, d7, d3
 801241c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012420:	e7e0      	b.n	80123e4 <_dtoa_r+0x4f4>
 8012422:	f8dd 8000 	ldr.w	r8, [sp]
 8012426:	ee27 7b04 	vmul.f64	d7, d7, d4
 801242a:	4621      	mov	r1, r4
 801242c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012430:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012434:	ee14 2a90 	vmov	r2, s9
 8012438:	3230      	adds	r2, #48	; 0x30
 801243a:	f808 2b01 	strb.w	r2, [r8], #1
 801243e:	45a0      	cmp	r8, r4
 8012440:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012444:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012448:	d118      	bne.n	801247c <_dtoa_r+0x58c>
 801244a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801244e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012452:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801245a:	dc4d      	bgt.n	80124f8 <_dtoa_r+0x608>
 801245c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012460:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012468:	f57f af33 	bpl.w	80122d2 <_dtoa_r+0x3e2>
 801246c:	4688      	mov	r8, r1
 801246e:	3901      	subs	r1, #1
 8012470:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012474:	2b30      	cmp	r3, #48	; 0x30
 8012476:	d0f9      	beq.n	801246c <_dtoa_r+0x57c>
 8012478:	46bb      	mov	fp, r7
 801247a:	e02a      	b.n	80124d2 <_dtoa_r+0x5e2>
 801247c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012480:	e7d6      	b.n	8012430 <_dtoa_r+0x540>
 8012482:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012486:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801248a:	f8dd 8000 	ldr.w	r8, [sp]
 801248e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012492:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012496:	ee15 3a10 	vmov	r3, s10
 801249a:	3330      	adds	r3, #48	; 0x30
 801249c:	f808 3b01 	strb.w	r3, [r8], #1
 80124a0:	9b00      	ldr	r3, [sp, #0]
 80124a2:	eba8 0303 	sub.w	r3, r8, r3
 80124a6:	4599      	cmp	r9, r3
 80124a8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80124ac:	eea3 7b46 	vfms.f64	d7, d3, d6
 80124b0:	d133      	bne.n	801251a <_dtoa_r+0x62a>
 80124b2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80124b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80124ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124be:	dc1a      	bgt.n	80124f6 <_dtoa_r+0x606>
 80124c0:	eeb4 7b46 	vcmp.f64	d7, d6
 80124c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124c8:	d103      	bne.n	80124d2 <_dtoa_r+0x5e2>
 80124ca:	ee15 3a10 	vmov	r3, s10
 80124ce:	07d9      	lsls	r1, r3, #31
 80124d0:	d411      	bmi.n	80124f6 <_dtoa_r+0x606>
 80124d2:	4629      	mov	r1, r5
 80124d4:	4630      	mov	r0, r6
 80124d6:	f000 fd07 	bl	8012ee8 <_Bfree>
 80124da:	2300      	movs	r3, #0
 80124dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80124de:	f888 3000 	strb.w	r3, [r8]
 80124e2:	f10b 0301 	add.w	r3, fp, #1
 80124e6:	6013      	str	r3, [r2, #0]
 80124e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	f43f ad4d 	beq.w	8011f8a <_dtoa_r+0x9a>
 80124f0:	f8c3 8000 	str.w	r8, [r3]
 80124f4:	e549      	b.n	8011f8a <_dtoa_r+0x9a>
 80124f6:	465f      	mov	r7, fp
 80124f8:	4643      	mov	r3, r8
 80124fa:	4698      	mov	r8, r3
 80124fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012500:	2a39      	cmp	r2, #57	; 0x39
 8012502:	d106      	bne.n	8012512 <_dtoa_r+0x622>
 8012504:	9a00      	ldr	r2, [sp, #0]
 8012506:	429a      	cmp	r2, r3
 8012508:	d1f7      	bne.n	80124fa <_dtoa_r+0x60a>
 801250a:	9900      	ldr	r1, [sp, #0]
 801250c:	2230      	movs	r2, #48	; 0x30
 801250e:	3701      	adds	r7, #1
 8012510:	700a      	strb	r2, [r1, #0]
 8012512:	781a      	ldrb	r2, [r3, #0]
 8012514:	3201      	adds	r2, #1
 8012516:	701a      	strb	r2, [r3, #0]
 8012518:	e7ae      	b.n	8012478 <_dtoa_r+0x588>
 801251a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801251e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012526:	d1b2      	bne.n	801248e <_dtoa_r+0x59e>
 8012528:	e7d3      	b.n	80124d2 <_dtoa_r+0x5e2>
 801252a:	bf00      	nop
 801252c:	08014848 	.word	0x08014848
 8012530:	08014820 	.word	0x08014820
 8012534:	9908      	ldr	r1, [sp, #32]
 8012536:	2900      	cmp	r1, #0
 8012538:	f000 80d1 	beq.w	80126de <_dtoa_r+0x7ee>
 801253c:	9907      	ldr	r1, [sp, #28]
 801253e:	2901      	cmp	r1, #1
 8012540:	f300 80b4 	bgt.w	80126ac <_dtoa_r+0x7bc>
 8012544:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012546:	2900      	cmp	r1, #0
 8012548:	f000 80ac 	beq.w	80126a4 <_dtoa_r+0x7b4>
 801254c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012550:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012554:	461c      	mov	r4, r3
 8012556:	930a      	str	r3, [sp, #40]	; 0x28
 8012558:	9b05      	ldr	r3, [sp, #20]
 801255a:	4413      	add	r3, r2
 801255c:	9305      	str	r3, [sp, #20]
 801255e:	9b06      	ldr	r3, [sp, #24]
 8012560:	2101      	movs	r1, #1
 8012562:	4413      	add	r3, r2
 8012564:	4630      	mov	r0, r6
 8012566:	9306      	str	r3, [sp, #24]
 8012568:	f000 fd7a 	bl	8013060 <__i2b>
 801256c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801256e:	4607      	mov	r7, r0
 8012570:	f1b8 0f00 	cmp.w	r8, #0
 8012574:	dd0d      	ble.n	8012592 <_dtoa_r+0x6a2>
 8012576:	9a06      	ldr	r2, [sp, #24]
 8012578:	2a00      	cmp	r2, #0
 801257a:	dd0a      	ble.n	8012592 <_dtoa_r+0x6a2>
 801257c:	4542      	cmp	r2, r8
 801257e:	9905      	ldr	r1, [sp, #20]
 8012580:	bfa8      	it	ge
 8012582:	4642      	movge	r2, r8
 8012584:	1a89      	subs	r1, r1, r2
 8012586:	9105      	str	r1, [sp, #20]
 8012588:	9906      	ldr	r1, [sp, #24]
 801258a:	eba8 0802 	sub.w	r8, r8, r2
 801258e:	1a8a      	subs	r2, r1, r2
 8012590:	9206      	str	r2, [sp, #24]
 8012592:	b303      	cbz	r3, 80125d6 <_dtoa_r+0x6e6>
 8012594:	9a08      	ldr	r2, [sp, #32]
 8012596:	2a00      	cmp	r2, #0
 8012598:	f000 80a6 	beq.w	80126e8 <_dtoa_r+0x7f8>
 801259c:	2c00      	cmp	r4, #0
 801259e:	dd13      	ble.n	80125c8 <_dtoa_r+0x6d8>
 80125a0:	4639      	mov	r1, r7
 80125a2:	4622      	mov	r2, r4
 80125a4:	4630      	mov	r0, r6
 80125a6:	930c      	str	r3, [sp, #48]	; 0x30
 80125a8:	f000 fe16 	bl	80131d8 <__pow5mult>
 80125ac:	462a      	mov	r2, r5
 80125ae:	4601      	mov	r1, r0
 80125b0:	4607      	mov	r7, r0
 80125b2:	4630      	mov	r0, r6
 80125b4:	f000 fd6a 	bl	801308c <__multiply>
 80125b8:	4629      	mov	r1, r5
 80125ba:	900a      	str	r0, [sp, #40]	; 0x28
 80125bc:	4630      	mov	r0, r6
 80125be:	f000 fc93 	bl	8012ee8 <_Bfree>
 80125c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80125c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125c6:	4615      	mov	r5, r2
 80125c8:	1b1a      	subs	r2, r3, r4
 80125ca:	d004      	beq.n	80125d6 <_dtoa_r+0x6e6>
 80125cc:	4629      	mov	r1, r5
 80125ce:	4630      	mov	r0, r6
 80125d0:	f000 fe02 	bl	80131d8 <__pow5mult>
 80125d4:	4605      	mov	r5, r0
 80125d6:	2101      	movs	r1, #1
 80125d8:	4630      	mov	r0, r6
 80125da:	f000 fd41 	bl	8013060 <__i2b>
 80125de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	4604      	mov	r4, r0
 80125e4:	f340 8082 	ble.w	80126ec <_dtoa_r+0x7fc>
 80125e8:	461a      	mov	r2, r3
 80125ea:	4601      	mov	r1, r0
 80125ec:	4630      	mov	r0, r6
 80125ee:	f000 fdf3 	bl	80131d8 <__pow5mult>
 80125f2:	9b07      	ldr	r3, [sp, #28]
 80125f4:	2b01      	cmp	r3, #1
 80125f6:	4604      	mov	r4, r0
 80125f8:	dd7b      	ble.n	80126f2 <_dtoa_r+0x802>
 80125fa:	2300      	movs	r3, #0
 80125fc:	930a      	str	r3, [sp, #40]	; 0x28
 80125fe:	6922      	ldr	r2, [r4, #16]
 8012600:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012604:	6910      	ldr	r0, [r2, #16]
 8012606:	f000 fcdb 	bl	8012fc0 <__hi0bits>
 801260a:	f1c0 0020 	rsb	r0, r0, #32
 801260e:	9b06      	ldr	r3, [sp, #24]
 8012610:	4418      	add	r0, r3
 8012612:	f010 001f 	ands.w	r0, r0, #31
 8012616:	f000 808d 	beq.w	8012734 <_dtoa_r+0x844>
 801261a:	f1c0 0220 	rsb	r2, r0, #32
 801261e:	2a04      	cmp	r2, #4
 8012620:	f340 8086 	ble.w	8012730 <_dtoa_r+0x840>
 8012624:	f1c0 001c 	rsb	r0, r0, #28
 8012628:	9b05      	ldr	r3, [sp, #20]
 801262a:	4403      	add	r3, r0
 801262c:	9305      	str	r3, [sp, #20]
 801262e:	9b06      	ldr	r3, [sp, #24]
 8012630:	4403      	add	r3, r0
 8012632:	4480      	add	r8, r0
 8012634:	9306      	str	r3, [sp, #24]
 8012636:	9b05      	ldr	r3, [sp, #20]
 8012638:	2b00      	cmp	r3, #0
 801263a:	dd05      	ble.n	8012648 <_dtoa_r+0x758>
 801263c:	4629      	mov	r1, r5
 801263e:	461a      	mov	r2, r3
 8012640:	4630      	mov	r0, r6
 8012642:	f000 fe23 	bl	801328c <__lshift>
 8012646:	4605      	mov	r5, r0
 8012648:	9b06      	ldr	r3, [sp, #24]
 801264a:	2b00      	cmp	r3, #0
 801264c:	dd05      	ble.n	801265a <_dtoa_r+0x76a>
 801264e:	4621      	mov	r1, r4
 8012650:	461a      	mov	r2, r3
 8012652:	4630      	mov	r0, r6
 8012654:	f000 fe1a 	bl	801328c <__lshift>
 8012658:	4604      	mov	r4, r0
 801265a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801265c:	2b00      	cmp	r3, #0
 801265e:	d06b      	beq.n	8012738 <_dtoa_r+0x848>
 8012660:	4621      	mov	r1, r4
 8012662:	4628      	mov	r0, r5
 8012664:	f000 fe7e 	bl	8013364 <__mcmp>
 8012668:	2800      	cmp	r0, #0
 801266a:	da65      	bge.n	8012738 <_dtoa_r+0x848>
 801266c:	2300      	movs	r3, #0
 801266e:	4629      	mov	r1, r5
 8012670:	220a      	movs	r2, #10
 8012672:	4630      	mov	r0, r6
 8012674:	f000 fc5a 	bl	8012f2c <__multadd>
 8012678:	9b08      	ldr	r3, [sp, #32]
 801267a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801267e:	4605      	mov	r5, r0
 8012680:	2b00      	cmp	r3, #0
 8012682:	f000 8192 	beq.w	80129aa <_dtoa_r+0xaba>
 8012686:	4639      	mov	r1, r7
 8012688:	2300      	movs	r3, #0
 801268a:	220a      	movs	r2, #10
 801268c:	4630      	mov	r0, r6
 801268e:	f000 fc4d 	bl	8012f2c <__multadd>
 8012692:	f1ba 0f00 	cmp.w	sl, #0
 8012696:	4607      	mov	r7, r0
 8012698:	f300 808e 	bgt.w	80127b8 <_dtoa_r+0x8c8>
 801269c:	9b07      	ldr	r3, [sp, #28]
 801269e:	2b02      	cmp	r3, #2
 80126a0:	dc51      	bgt.n	8012746 <_dtoa_r+0x856>
 80126a2:	e089      	b.n	80127b8 <_dtoa_r+0x8c8>
 80126a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80126a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80126aa:	e751      	b.n	8012550 <_dtoa_r+0x660>
 80126ac:	f109 34ff 	add.w	r4, r9, #4294967295
 80126b0:	42a3      	cmp	r3, r4
 80126b2:	bfbf      	itttt	lt
 80126b4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80126b6:	1ae3      	sublt	r3, r4, r3
 80126b8:	18d2      	addlt	r2, r2, r3
 80126ba:	4613      	movlt	r3, r2
 80126bc:	bfb7      	itett	lt
 80126be:	930e      	strlt	r3, [sp, #56]	; 0x38
 80126c0:	1b1c      	subge	r4, r3, r4
 80126c2:	4623      	movlt	r3, r4
 80126c4:	2400      	movlt	r4, #0
 80126c6:	f1b9 0f00 	cmp.w	r9, #0
 80126ca:	bfb5      	itete	lt
 80126cc:	9a05      	ldrlt	r2, [sp, #20]
 80126ce:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80126d2:	eba2 0809 	sublt.w	r8, r2, r9
 80126d6:	464a      	movge	r2, r9
 80126d8:	bfb8      	it	lt
 80126da:	2200      	movlt	r2, #0
 80126dc:	e73b      	b.n	8012556 <_dtoa_r+0x666>
 80126de:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80126e2:	9f08      	ldr	r7, [sp, #32]
 80126e4:	461c      	mov	r4, r3
 80126e6:	e743      	b.n	8012570 <_dtoa_r+0x680>
 80126e8:	461a      	mov	r2, r3
 80126ea:	e76f      	b.n	80125cc <_dtoa_r+0x6dc>
 80126ec:	9b07      	ldr	r3, [sp, #28]
 80126ee:	2b01      	cmp	r3, #1
 80126f0:	dc18      	bgt.n	8012724 <_dtoa_r+0x834>
 80126f2:	9b02      	ldr	r3, [sp, #8]
 80126f4:	b9b3      	cbnz	r3, 8012724 <_dtoa_r+0x834>
 80126f6:	9b03      	ldr	r3, [sp, #12]
 80126f8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80126fc:	b9a2      	cbnz	r2, 8012728 <_dtoa_r+0x838>
 80126fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012702:	0d12      	lsrs	r2, r2, #20
 8012704:	0512      	lsls	r2, r2, #20
 8012706:	b18a      	cbz	r2, 801272c <_dtoa_r+0x83c>
 8012708:	9b05      	ldr	r3, [sp, #20]
 801270a:	3301      	adds	r3, #1
 801270c:	9305      	str	r3, [sp, #20]
 801270e:	9b06      	ldr	r3, [sp, #24]
 8012710:	3301      	adds	r3, #1
 8012712:	9306      	str	r3, [sp, #24]
 8012714:	2301      	movs	r3, #1
 8012716:	930a      	str	r3, [sp, #40]	; 0x28
 8012718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801271a:	2b00      	cmp	r3, #0
 801271c:	f47f af6f 	bne.w	80125fe <_dtoa_r+0x70e>
 8012720:	2001      	movs	r0, #1
 8012722:	e774      	b.n	801260e <_dtoa_r+0x71e>
 8012724:	2300      	movs	r3, #0
 8012726:	e7f6      	b.n	8012716 <_dtoa_r+0x826>
 8012728:	9b02      	ldr	r3, [sp, #8]
 801272a:	e7f4      	b.n	8012716 <_dtoa_r+0x826>
 801272c:	920a      	str	r2, [sp, #40]	; 0x28
 801272e:	e7f3      	b.n	8012718 <_dtoa_r+0x828>
 8012730:	d081      	beq.n	8012636 <_dtoa_r+0x746>
 8012732:	4610      	mov	r0, r2
 8012734:	301c      	adds	r0, #28
 8012736:	e777      	b.n	8012628 <_dtoa_r+0x738>
 8012738:	f1b9 0f00 	cmp.w	r9, #0
 801273c:	dc37      	bgt.n	80127ae <_dtoa_r+0x8be>
 801273e:	9b07      	ldr	r3, [sp, #28]
 8012740:	2b02      	cmp	r3, #2
 8012742:	dd34      	ble.n	80127ae <_dtoa_r+0x8be>
 8012744:	46ca      	mov	sl, r9
 8012746:	f1ba 0f00 	cmp.w	sl, #0
 801274a:	d10d      	bne.n	8012768 <_dtoa_r+0x878>
 801274c:	4621      	mov	r1, r4
 801274e:	4653      	mov	r3, sl
 8012750:	2205      	movs	r2, #5
 8012752:	4630      	mov	r0, r6
 8012754:	f000 fbea 	bl	8012f2c <__multadd>
 8012758:	4601      	mov	r1, r0
 801275a:	4604      	mov	r4, r0
 801275c:	4628      	mov	r0, r5
 801275e:	f000 fe01 	bl	8013364 <__mcmp>
 8012762:	2800      	cmp	r0, #0
 8012764:	f73f adde 	bgt.w	8012324 <_dtoa_r+0x434>
 8012768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801276a:	f8dd 8000 	ldr.w	r8, [sp]
 801276e:	ea6f 0b03 	mvn.w	fp, r3
 8012772:	f04f 0900 	mov.w	r9, #0
 8012776:	4621      	mov	r1, r4
 8012778:	4630      	mov	r0, r6
 801277a:	f000 fbb5 	bl	8012ee8 <_Bfree>
 801277e:	2f00      	cmp	r7, #0
 8012780:	f43f aea7 	beq.w	80124d2 <_dtoa_r+0x5e2>
 8012784:	f1b9 0f00 	cmp.w	r9, #0
 8012788:	d005      	beq.n	8012796 <_dtoa_r+0x8a6>
 801278a:	45b9      	cmp	r9, r7
 801278c:	d003      	beq.n	8012796 <_dtoa_r+0x8a6>
 801278e:	4649      	mov	r1, r9
 8012790:	4630      	mov	r0, r6
 8012792:	f000 fba9 	bl	8012ee8 <_Bfree>
 8012796:	4639      	mov	r1, r7
 8012798:	4630      	mov	r0, r6
 801279a:	f000 fba5 	bl	8012ee8 <_Bfree>
 801279e:	e698      	b.n	80124d2 <_dtoa_r+0x5e2>
 80127a0:	2400      	movs	r4, #0
 80127a2:	4627      	mov	r7, r4
 80127a4:	e7e0      	b.n	8012768 <_dtoa_r+0x878>
 80127a6:	46bb      	mov	fp, r7
 80127a8:	4604      	mov	r4, r0
 80127aa:	4607      	mov	r7, r0
 80127ac:	e5ba      	b.n	8012324 <_dtoa_r+0x434>
 80127ae:	9b08      	ldr	r3, [sp, #32]
 80127b0:	46ca      	mov	sl, r9
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	f000 8100 	beq.w	80129b8 <_dtoa_r+0xac8>
 80127b8:	f1b8 0f00 	cmp.w	r8, #0
 80127bc:	dd05      	ble.n	80127ca <_dtoa_r+0x8da>
 80127be:	4639      	mov	r1, r7
 80127c0:	4642      	mov	r2, r8
 80127c2:	4630      	mov	r0, r6
 80127c4:	f000 fd62 	bl	801328c <__lshift>
 80127c8:	4607      	mov	r7, r0
 80127ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d05d      	beq.n	801288c <_dtoa_r+0x99c>
 80127d0:	6879      	ldr	r1, [r7, #4]
 80127d2:	4630      	mov	r0, r6
 80127d4:	f000 fb48 	bl	8012e68 <_Balloc>
 80127d8:	4680      	mov	r8, r0
 80127da:	b928      	cbnz	r0, 80127e8 <_dtoa_r+0x8f8>
 80127dc:	4b82      	ldr	r3, [pc, #520]	; (80129e8 <_dtoa_r+0xaf8>)
 80127de:	4602      	mov	r2, r0
 80127e0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80127e4:	f7ff bb9a 	b.w	8011f1c <_dtoa_r+0x2c>
 80127e8:	693a      	ldr	r2, [r7, #16]
 80127ea:	3202      	adds	r2, #2
 80127ec:	0092      	lsls	r2, r2, #2
 80127ee:	f107 010c 	add.w	r1, r7, #12
 80127f2:	300c      	adds	r0, #12
 80127f4:	f000 fb2a 	bl	8012e4c <memcpy>
 80127f8:	2201      	movs	r2, #1
 80127fa:	4641      	mov	r1, r8
 80127fc:	4630      	mov	r0, r6
 80127fe:	f000 fd45 	bl	801328c <__lshift>
 8012802:	9b00      	ldr	r3, [sp, #0]
 8012804:	3301      	adds	r3, #1
 8012806:	9305      	str	r3, [sp, #20]
 8012808:	9b00      	ldr	r3, [sp, #0]
 801280a:	4453      	add	r3, sl
 801280c:	9309      	str	r3, [sp, #36]	; 0x24
 801280e:	9b02      	ldr	r3, [sp, #8]
 8012810:	f003 0301 	and.w	r3, r3, #1
 8012814:	46b9      	mov	r9, r7
 8012816:	9308      	str	r3, [sp, #32]
 8012818:	4607      	mov	r7, r0
 801281a:	9b05      	ldr	r3, [sp, #20]
 801281c:	4621      	mov	r1, r4
 801281e:	3b01      	subs	r3, #1
 8012820:	4628      	mov	r0, r5
 8012822:	9302      	str	r3, [sp, #8]
 8012824:	f7ff fad8 	bl	8011dd8 <quorem>
 8012828:	4603      	mov	r3, r0
 801282a:	3330      	adds	r3, #48	; 0x30
 801282c:	9006      	str	r0, [sp, #24]
 801282e:	4649      	mov	r1, r9
 8012830:	4628      	mov	r0, r5
 8012832:	930a      	str	r3, [sp, #40]	; 0x28
 8012834:	f000 fd96 	bl	8013364 <__mcmp>
 8012838:	463a      	mov	r2, r7
 801283a:	4682      	mov	sl, r0
 801283c:	4621      	mov	r1, r4
 801283e:	4630      	mov	r0, r6
 8012840:	f000 fdac 	bl	801339c <__mdiff>
 8012844:	68c2      	ldr	r2, [r0, #12]
 8012846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012848:	4680      	mov	r8, r0
 801284a:	bb0a      	cbnz	r2, 8012890 <_dtoa_r+0x9a0>
 801284c:	4601      	mov	r1, r0
 801284e:	4628      	mov	r0, r5
 8012850:	f000 fd88 	bl	8013364 <__mcmp>
 8012854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012856:	4602      	mov	r2, r0
 8012858:	4641      	mov	r1, r8
 801285a:	4630      	mov	r0, r6
 801285c:	920e      	str	r2, [sp, #56]	; 0x38
 801285e:	930a      	str	r3, [sp, #40]	; 0x28
 8012860:	f000 fb42 	bl	8012ee8 <_Bfree>
 8012864:	9b07      	ldr	r3, [sp, #28]
 8012866:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012868:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801286c:	ea43 0102 	orr.w	r1, r3, r2
 8012870:	9b08      	ldr	r3, [sp, #32]
 8012872:	430b      	orrs	r3, r1
 8012874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012876:	d10d      	bne.n	8012894 <_dtoa_r+0x9a4>
 8012878:	2b39      	cmp	r3, #57	; 0x39
 801287a:	d029      	beq.n	80128d0 <_dtoa_r+0x9e0>
 801287c:	f1ba 0f00 	cmp.w	sl, #0
 8012880:	dd01      	ble.n	8012886 <_dtoa_r+0x996>
 8012882:	9b06      	ldr	r3, [sp, #24]
 8012884:	3331      	adds	r3, #49	; 0x31
 8012886:	9a02      	ldr	r2, [sp, #8]
 8012888:	7013      	strb	r3, [r2, #0]
 801288a:	e774      	b.n	8012776 <_dtoa_r+0x886>
 801288c:	4638      	mov	r0, r7
 801288e:	e7b8      	b.n	8012802 <_dtoa_r+0x912>
 8012890:	2201      	movs	r2, #1
 8012892:	e7e1      	b.n	8012858 <_dtoa_r+0x968>
 8012894:	f1ba 0f00 	cmp.w	sl, #0
 8012898:	db06      	blt.n	80128a8 <_dtoa_r+0x9b8>
 801289a:	9907      	ldr	r1, [sp, #28]
 801289c:	ea41 0a0a 	orr.w	sl, r1, sl
 80128a0:	9908      	ldr	r1, [sp, #32]
 80128a2:	ea5a 0101 	orrs.w	r1, sl, r1
 80128a6:	d120      	bne.n	80128ea <_dtoa_r+0x9fa>
 80128a8:	2a00      	cmp	r2, #0
 80128aa:	ddec      	ble.n	8012886 <_dtoa_r+0x996>
 80128ac:	4629      	mov	r1, r5
 80128ae:	2201      	movs	r2, #1
 80128b0:	4630      	mov	r0, r6
 80128b2:	9305      	str	r3, [sp, #20]
 80128b4:	f000 fcea 	bl	801328c <__lshift>
 80128b8:	4621      	mov	r1, r4
 80128ba:	4605      	mov	r5, r0
 80128bc:	f000 fd52 	bl	8013364 <__mcmp>
 80128c0:	2800      	cmp	r0, #0
 80128c2:	9b05      	ldr	r3, [sp, #20]
 80128c4:	dc02      	bgt.n	80128cc <_dtoa_r+0x9dc>
 80128c6:	d1de      	bne.n	8012886 <_dtoa_r+0x996>
 80128c8:	07da      	lsls	r2, r3, #31
 80128ca:	d5dc      	bpl.n	8012886 <_dtoa_r+0x996>
 80128cc:	2b39      	cmp	r3, #57	; 0x39
 80128ce:	d1d8      	bne.n	8012882 <_dtoa_r+0x992>
 80128d0:	9a02      	ldr	r2, [sp, #8]
 80128d2:	2339      	movs	r3, #57	; 0x39
 80128d4:	7013      	strb	r3, [r2, #0]
 80128d6:	4643      	mov	r3, r8
 80128d8:	4698      	mov	r8, r3
 80128da:	3b01      	subs	r3, #1
 80128dc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80128e0:	2a39      	cmp	r2, #57	; 0x39
 80128e2:	d051      	beq.n	8012988 <_dtoa_r+0xa98>
 80128e4:	3201      	adds	r2, #1
 80128e6:	701a      	strb	r2, [r3, #0]
 80128e8:	e745      	b.n	8012776 <_dtoa_r+0x886>
 80128ea:	2a00      	cmp	r2, #0
 80128ec:	dd03      	ble.n	80128f6 <_dtoa_r+0xa06>
 80128ee:	2b39      	cmp	r3, #57	; 0x39
 80128f0:	d0ee      	beq.n	80128d0 <_dtoa_r+0x9e0>
 80128f2:	3301      	adds	r3, #1
 80128f4:	e7c7      	b.n	8012886 <_dtoa_r+0x996>
 80128f6:	9a05      	ldr	r2, [sp, #20]
 80128f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80128fa:	f802 3c01 	strb.w	r3, [r2, #-1]
 80128fe:	428a      	cmp	r2, r1
 8012900:	d02b      	beq.n	801295a <_dtoa_r+0xa6a>
 8012902:	4629      	mov	r1, r5
 8012904:	2300      	movs	r3, #0
 8012906:	220a      	movs	r2, #10
 8012908:	4630      	mov	r0, r6
 801290a:	f000 fb0f 	bl	8012f2c <__multadd>
 801290e:	45b9      	cmp	r9, r7
 8012910:	4605      	mov	r5, r0
 8012912:	f04f 0300 	mov.w	r3, #0
 8012916:	f04f 020a 	mov.w	r2, #10
 801291a:	4649      	mov	r1, r9
 801291c:	4630      	mov	r0, r6
 801291e:	d107      	bne.n	8012930 <_dtoa_r+0xa40>
 8012920:	f000 fb04 	bl	8012f2c <__multadd>
 8012924:	4681      	mov	r9, r0
 8012926:	4607      	mov	r7, r0
 8012928:	9b05      	ldr	r3, [sp, #20]
 801292a:	3301      	adds	r3, #1
 801292c:	9305      	str	r3, [sp, #20]
 801292e:	e774      	b.n	801281a <_dtoa_r+0x92a>
 8012930:	f000 fafc 	bl	8012f2c <__multadd>
 8012934:	4639      	mov	r1, r7
 8012936:	4681      	mov	r9, r0
 8012938:	2300      	movs	r3, #0
 801293a:	220a      	movs	r2, #10
 801293c:	4630      	mov	r0, r6
 801293e:	f000 faf5 	bl	8012f2c <__multadd>
 8012942:	4607      	mov	r7, r0
 8012944:	e7f0      	b.n	8012928 <_dtoa_r+0xa38>
 8012946:	f1ba 0f00 	cmp.w	sl, #0
 801294a:	9a00      	ldr	r2, [sp, #0]
 801294c:	bfcc      	ite	gt
 801294e:	46d0      	movgt	r8, sl
 8012950:	f04f 0801 	movle.w	r8, #1
 8012954:	4490      	add	r8, r2
 8012956:	f04f 0900 	mov.w	r9, #0
 801295a:	4629      	mov	r1, r5
 801295c:	2201      	movs	r2, #1
 801295e:	4630      	mov	r0, r6
 8012960:	9302      	str	r3, [sp, #8]
 8012962:	f000 fc93 	bl	801328c <__lshift>
 8012966:	4621      	mov	r1, r4
 8012968:	4605      	mov	r5, r0
 801296a:	f000 fcfb 	bl	8013364 <__mcmp>
 801296e:	2800      	cmp	r0, #0
 8012970:	dcb1      	bgt.n	80128d6 <_dtoa_r+0x9e6>
 8012972:	d102      	bne.n	801297a <_dtoa_r+0xa8a>
 8012974:	9b02      	ldr	r3, [sp, #8]
 8012976:	07db      	lsls	r3, r3, #31
 8012978:	d4ad      	bmi.n	80128d6 <_dtoa_r+0x9e6>
 801297a:	4643      	mov	r3, r8
 801297c:	4698      	mov	r8, r3
 801297e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012982:	2a30      	cmp	r2, #48	; 0x30
 8012984:	d0fa      	beq.n	801297c <_dtoa_r+0xa8c>
 8012986:	e6f6      	b.n	8012776 <_dtoa_r+0x886>
 8012988:	9a00      	ldr	r2, [sp, #0]
 801298a:	429a      	cmp	r2, r3
 801298c:	d1a4      	bne.n	80128d8 <_dtoa_r+0x9e8>
 801298e:	f10b 0b01 	add.w	fp, fp, #1
 8012992:	2331      	movs	r3, #49	; 0x31
 8012994:	e778      	b.n	8012888 <_dtoa_r+0x998>
 8012996:	4b15      	ldr	r3, [pc, #84]	; (80129ec <_dtoa_r+0xafc>)
 8012998:	f7ff bb12 	b.w	8011fc0 <_dtoa_r+0xd0>
 801299c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801299e:	2b00      	cmp	r3, #0
 80129a0:	f47f aaee 	bne.w	8011f80 <_dtoa_r+0x90>
 80129a4:	4b12      	ldr	r3, [pc, #72]	; (80129f0 <_dtoa_r+0xb00>)
 80129a6:	f7ff bb0b 	b.w	8011fc0 <_dtoa_r+0xd0>
 80129aa:	f1ba 0f00 	cmp.w	sl, #0
 80129ae:	dc03      	bgt.n	80129b8 <_dtoa_r+0xac8>
 80129b0:	9b07      	ldr	r3, [sp, #28]
 80129b2:	2b02      	cmp	r3, #2
 80129b4:	f73f aec7 	bgt.w	8012746 <_dtoa_r+0x856>
 80129b8:	f8dd 8000 	ldr.w	r8, [sp]
 80129bc:	4621      	mov	r1, r4
 80129be:	4628      	mov	r0, r5
 80129c0:	f7ff fa0a 	bl	8011dd8 <quorem>
 80129c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80129c8:	f808 3b01 	strb.w	r3, [r8], #1
 80129cc:	9a00      	ldr	r2, [sp, #0]
 80129ce:	eba8 0202 	sub.w	r2, r8, r2
 80129d2:	4592      	cmp	sl, r2
 80129d4:	ddb7      	ble.n	8012946 <_dtoa_r+0xa56>
 80129d6:	4629      	mov	r1, r5
 80129d8:	2300      	movs	r3, #0
 80129da:	220a      	movs	r2, #10
 80129dc:	4630      	mov	r0, r6
 80129de:	f000 faa5 	bl	8012f2c <__multadd>
 80129e2:	4605      	mov	r5, r0
 80129e4:	e7ea      	b.n	80129bc <_dtoa_r+0xacc>
 80129e6:	bf00      	nop
 80129e8:	0801474f 	.word	0x0801474f
 80129ec:	080146a8 	.word	0x080146a8
 80129f0:	080146cc 	.word	0x080146cc

080129f4 <__sflush_r>:
 80129f4:	898a      	ldrh	r2, [r1, #12]
 80129f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129fa:	4605      	mov	r5, r0
 80129fc:	0710      	lsls	r0, r2, #28
 80129fe:	460c      	mov	r4, r1
 8012a00:	d458      	bmi.n	8012ab4 <__sflush_r+0xc0>
 8012a02:	684b      	ldr	r3, [r1, #4]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	dc05      	bgt.n	8012a14 <__sflush_r+0x20>
 8012a08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	dc02      	bgt.n	8012a14 <__sflush_r+0x20>
 8012a0e:	2000      	movs	r0, #0
 8012a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012a16:	2e00      	cmp	r6, #0
 8012a18:	d0f9      	beq.n	8012a0e <__sflush_r+0x1a>
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012a20:	682f      	ldr	r7, [r5, #0]
 8012a22:	602b      	str	r3, [r5, #0]
 8012a24:	d032      	beq.n	8012a8c <__sflush_r+0x98>
 8012a26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012a28:	89a3      	ldrh	r3, [r4, #12]
 8012a2a:	075a      	lsls	r2, r3, #29
 8012a2c:	d505      	bpl.n	8012a3a <__sflush_r+0x46>
 8012a2e:	6863      	ldr	r3, [r4, #4]
 8012a30:	1ac0      	subs	r0, r0, r3
 8012a32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a34:	b10b      	cbz	r3, 8012a3a <__sflush_r+0x46>
 8012a36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012a38:	1ac0      	subs	r0, r0, r3
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	4602      	mov	r2, r0
 8012a3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012a40:	6a21      	ldr	r1, [r4, #32]
 8012a42:	4628      	mov	r0, r5
 8012a44:	47b0      	blx	r6
 8012a46:	1c43      	adds	r3, r0, #1
 8012a48:	89a3      	ldrh	r3, [r4, #12]
 8012a4a:	d106      	bne.n	8012a5a <__sflush_r+0x66>
 8012a4c:	6829      	ldr	r1, [r5, #0]
 8012a4e:	291d      	cmp	r1, #29
 8012a50:	d82c      	bhi.n	8012aac <__sflush_r+0xb8>
 8012a52:	4a2a      	ldr	r2, [pc, #168]	; (8012afc <__sflush_r+0x108>)
 8012a54:	40ca      	lsrs	r2, r1
 8012a56:	07d6      	lsls	r6, r2, #31
 8012a58:	d528      	bpl.n	8012aac <__sflush_r+0xb8>
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	6062      	str	r2, [r4, #4]
 8012a5e:	04d9      	lsls	r1, r3, #19
 8012a60:	6922      	ldr	r2, [r4, #16]
 8012a62:	6022      	str	r2, [r4, #0]
 8012a64:	d504      	bpl.n	8012a70 <__sflush_r+0x7c>
 8012a66:	1c42      	adds	r2, r0, #1
 8012a68:	d101      	bne.n	8012a6e <__sflush_r+0x7a>
 8012a6a:	682b      	ldr	r3, [r5, #0]
 8012a6c:	b903      	cbnz	r3, 8012a70 <__sflush_r+0x7c>
 8012a6e:	6560      	str	r0, [r4, #84]	; 0x54
 8012a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a72:	602f      	str	r7, [r5, #0]
 8012a74:	2900      	cmp	r1, #0
 8012a76:	d0ca      	beq.n	8012a0e <__sflush_r+0x1a>
 8012a78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a7c:	4299      	cmp	r1, r3
 8012a7e:	d002      	beq.n	8012a86 <__sflush_r+0x92>
 8012a80:	4628      	mov	r0, r5
 8012a82:	f000 fd7f 	bl	8013584 <_free_r>
 8012a86:	2000      	movs	r0, #0
 8012a88:	6360      	str	r0, [r4, #52]	; 0x34
 8012a8a:	e7c1      	b.n	8012a10 <__sflush_r+0x1c>
 8012a8c:	6a21      	ldr	r1, [r4, #32]
 8012a8e:	2301      	movs	r3, #1
 8012a90:	4628      	mov	r0, r5
 8012a92:	47b0      	blx	r6
 8012a94:	1c41      	adds	r1, r0, #1
 8012a96:	d1c7      	bne.n	8012a28 <__sflush_r+0x34>
 8012a98:	682b      	ldr	r3, [r5, #0]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d0c4      	beq.n	8012a28 <__sflush_r+0x34>
 8012a9e:	2b1d      	cmp	r3, #29
 8012aa0:	d001      	beq.n	8012aa6 <__sflush_r+0xb2>
 8012aa2:	2b16      	cmp	r3, #22
 8012aa4:	d101      	bne.n	8012aaa <__sflush_r+0xb6>
 8012aa6:	602f      	str	r7, [r5, #0]
 8012aa8:	e7b1      	b.n	8012a0e <__sflush_r+0x1a>
 8012aaa:	89a3      	ldrh	r3, [r4, #12]
 8012aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ab0:	81a3      	strh	r3, [r4, #12]
 8012ab2:	e7ad      	b.n	8012a10 <__sflush_r+0x1c>
 8012ab4:	690f      	ldr	r7, [r1, #16]
 8012ab6:	2f00      	cmp	r7, #0
 8012ab8:	d0a9      	beq.n	8012a0e <__sflush_r+0x1a>
 8012aba:	0793      	lsls	r3, r2, #30
 8012abc:	680e      	ldr	r6, [r1, #0]
 8012abe:	bf08      	it	eq
 8012ac0:	694b      	ldreq	r3, [r1, #20]
 8012ac2:	600f      	str	r7, [r1, #0]
 8012ac4:	bf18      	it	ne
 8012ac6:	2300      	movne	r3, #0
 8012ac8:	eba6 0807 	sub.w	r8, r6, r7
 8012acc:	608b      	str	r3, [r1, #8]
 8012ace:	f1b8 0f00 	cmp.w	r8, #0
 8012ad2:	dd9c      	ble.n	8012a0e <__sflush_r+0x1a>
 8012ad4:	6a21      	ldr	r1, [r4, #32]
 8012ad6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012ad8:	4643      	mov	r3, r8
 8012ada:	463a      	mov	r2, r7
 8012adc:	4628      	mov	r0, r5
 8012ade:	47b0      	blx	r6
 8012ae0:	2800      	cmp	r0, #0
 8012ae2:	dc06      	bgt.n	8012af2 <__sflush_r+0xfe>
 8012ae4:	89a3      	ldrh	r3, [r4, #12]
 8012ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012aea:	81a3      	strh	r3, [r4, #12]
 8012aec:	f04f 30ff 	mov.w	r0, #4294967295
 8012af0:	e78e      	b.n	8012a10 <__sflush_r+0x1c>
 8012af2:	4407      	add	r7, r0
 8012af4:	eba8 0800 	sub.w	r8, r8, r0
 8012af8:	e7e9      	b.n	8012ace <__sflush_r+0xda>
 8012afa:	bf00      	nop
 8012afc:	20400001 	.word	0x20400001

08012b00 <_fflush_r>:
 8012b00:	b538      	push	{r3, r4, r5, lr}
 8012b02:	690b      	ldr	r3, [r1, #16]
 8012b04:	4605      	mov	r5, r0
 8012b06:	460c      	mov	r4, r1
 8012b08:	b913      	cbnz	r3, 8012b10 <_fflush_r+0x10>
 8012b0a:	2500      	movs	r5, #0
 8012b0c:	4628      	mov	r0, r5
 8012b0e:	bd38      	pop	{r3, r4, r5, pc}
 8012b10:	b118      	cbz	r0, 8012b1a <_fflush_r+0x1a>
 8012b12:	6983      	ldr	r3, [r0, #24]
 8012b14:	b90b      	cbnz	r3, 8012b1a <_fflush_r+0x1a>
 8012b16:	f000 f887 	bl	8012c28 <__sinit>
 8012b1a:	4b14      	ldr	r3, [pc, #80]	; (8012b6c <_fflush_r+0x6c>)
 8012b1c:	429c      	cmp	r4, r3
 8012b1e:	d11b      	bne.n	8012b58 <_fflush_r+0x58>
 8012b20:	686c      	ldr	r4, [r5, #4]
 8012b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d0ef      	beq.n	8012b0a <_fflush_r+0xa>
 8012b2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012b2c:	07d0      	lsls	r0, r2, #31
 8012b2e:	d404      	bmi.n	8012b3a <_fflush_r+0x3a>
 8012b30:	0599      	lsls	r1, r3, #22
 8012b32:	d402      	bmi.n	8012b3a <_fflush_r+0x3a>
 8012b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b36:	f000 f91a 	bl	8012d6e <__retarget_lock_acquire_recursive>
 8012b3a:	4628      	mov	r0, r5
 8012b3c:	4621      	mov	r1, r4
 8012b3e:	f7ff ff59 	bl	80129f4 <__sflush_r>
 8012b42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b44:	07da      	lsls	r2, r3, #31
 8012b46:	4605      	mov	r5, r0
 8012b48:	d4e0      	bmi.n	8012b0c <_fflush_r+0xc>
 8012b4a:	89a3      	ldrh	r3, [r4, #12]
 8012b4c:	059b      	lsls	r3, r3, #22
 8012b4e:	d4dd      	bmi.n	8012b0c <_fflush_r+0xc>
 8012b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b52:	f000 f90d 	bl	8012d70 <__retarget_lock_release_recursive>
 8012b56:	e7d9      	b.n	8012b0c <_fflush_r+0xc>
 8012b58:	4b05      	ldr	r3, [pc, #20]	; (8012b70 <_fflush_r+0x70>)
 8012b5a:	429c      	cmp	r4, r3
 8012b5c:	d101      	bne.n	8012b62 <_fflush_r+0x62>
 8012b5e:	68ac      	ldr	r4, [r5, #8]
 8012b60:	e7df      	b.n	8012b22 <_fflush_r+0x22>
 8012b62:	4b04      	ldr	r3, [pc, #16]	; (8012b74 <_fflush_r+0x74>)
 8012b64:	429c      	cmp	r4, r3
 8012b66:	bf08      	it	eq
 8012b68:	68ec      	ldreq	r4, [r5, #12]
 8012b6a:	e7da      	b.n	8012b22 <_fflush_r+0x22>
 8012b6c:	08014780 	.word	0x08014780
 8012b70:	080147a0 	.word	0x080147a0
 8012b74:	08014760 	.word	0x08014760

08012b78 <std>:
 8012b78:	2300      	movs	r3, #0
 8012b7a:	b510      	push	{r4, lr}
 8012b7c:	4604      	mov	r4, r0
 8012b7e:	e9c0 3300 	strd	r3, r3, [r0]
 8012b82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b86:	6083      	str	r3, [r0, #8]
 8012b88:	8181      	strh	r1, [r0, #12]
 8012b8a:	6643      	str	r3, [r0, #100]	; 0x64
 8012b8c:	81c2      	strh	r2, [r0, #14]
 8012b8e:	6183      	str	r3, [r0, #24]
 8012b90:	4619      	mov	r1, r3
 8012b92:	2208      	movs	r2, #8
 8012b94:	305c      	adds	r0, #92	; 0x5c
 8012b96:	f7fe fb85 	bl	80112a4 <memset>
 8012b9a:	4b05      	ldr	r3, [pc, #20]	; (8012bb0 <std+0x38>)
 8012b9c:	6263      	str	r3, [r4, #36]	; 0x24
 8012b9e:	4b05      	ldr	r3, [pc, #20]	; (8012bb4 <std+0x3c>)
 8012ba0:	62a3      	str	r3, [r4, #40]	; 0x28
 8012ba2:	4b05      	ldr	r3, [pc, #20]	; (8012bb8 <std+0x40>)
 8012ba4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012ba6:	4b05      	ldr	r3, [pc, #20]	; (8012bbc <std+0x44>)
 8012ba8:	6224      	str	r4, [r4, #32]
 8012baa:	6323      	str	r3, [r4, #48]	; 0x30
 8012bac:	bd10      	pop	{r4, pc}
 8012bae:	bf00      	nop
 8012bb0:	080139ad 	.word	0x080139ad
 8012bb4:	080139cf 	.word	0x080139cf
 8012bb8:	08013a07 	.word	0x08013a07
 8012bbc:	08013a2b 	.word	0x08013a2b

08012bc0 <_cleanup_r>:
 8012bc0:	4901      	ldr	r1, [pc, #4]	; (8012bc8 <_cleanup_r+0x8>)
 8012bc2:	f000 b8af 	b.w	8012d24 <_fwalk_reent>
 8012bc6:	bf00      	nop
 8012bc8:	08012b01 	.word	0x08012b01

08012bcc <__sfmoreglue>:
 8012bcc:	b570      	push	{r4, r5, r6, lr}
 8012bce:	1e4a      	subs	r2, r1, #1
 8012bd0:	2568      	movs	r5, #104	; 0x68
 8012bd2:	4355      	muls	r5, r2
 8012bd4:	460e      	mov	r6, r1
 8012bd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012bda:	f000 fd23 	bl	8013624 <_malloc_r>
 8012bde:	4604      	mov	r4, r0
 8012be0:	b140      	cbz	r0, 8012bf4 <__sfmoreglue+0x28>
 8012be2:	2100      	movs	r1, #0
 8012be4:	e9c0 1600 	strd	r1, r6, [r0]
 8012be8:	300c      	adds	r0, #12
 8012bea:	60a0      	str	r0, [r4, #8]
 8012bec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012bf0:	f7fe fb58 	bl	80112a4 <memset>
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	bd70      	pop	{r4, r5, r6, pc}

08012bf8 <__sfp_lock_acquire>:
 8012bf8:	4801      	ldr	r0, [pc, #4]	; (8012c00 <__sfp_lock_acquire+0x8>)
 8012bfa:	f000 b8b8 	b.w	8012d6e <__retarget_lock_acquire_recursive>
 8012bfe:	bf00      	nop
 8012c00:	240007fc 	.word	0x240007fc

08012c04 <__sfp_lock_release>:
 8012c04:	4801      	ldr	r0, [pc, #4]	; (8012c0c <__sfp_lock_release+0x8>)
 8012c06:	f000 b8b3 	b.w	8012d70 <__retarget_lock_release_recursive>
 8012c0a:	bf00      	nop
 8012c0c:	240007fc 	.word	0x240007fc

08012c10 <__sinit_lock_acquire>:
 8012c10:	4801      	ldr	r0, [pc, #4]	; (8012c18 <__sinit_lock_acquire+0x8>)
 8012c12:	f000 b8ac 	b.w	8012d6e <__retarget_lock_acquire_recursive>
 8012c16:	bf00      	nop
 8012c18:	240007f7 	.word	0x240007f7

08012c1c <__sinit_lock_release>:
 8012c1c:	4801      	ldr	r0, [pc, #4]	; (8012c24 <__sinit_lock_release+0x8>)
 8012c1e:	f000 b8a7 	b.w	8012d70 <__retarget_lock_release_recursive>
 8012c22:	bf00      	nop
 8012c24:	240007f7 	.word	0x240007f7

08012c28 <__sinit>:
 8012c28:	b510      	push	{r4, lr}
 8012c2a:	4604      	mov	r4, r0
 8012c2c:	f7ff fff0 	bl	8012c10 <__sinit_lock_acquire>
 8012c30:	69a3      	ldr	r3, [r4, #24]
 8012c32:	b11b      	cbz	r3, 8012c3c <__sinit+0x14>
 8012c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c38:	f7ff bff0 	b.w	8012c1c <__sinit_lock_release>
 8012c3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012c40:	6523      	str	r3, [r4, #80]	; 0x50
 8012c42:	4b13      	ldr	r3, [pc, #76]	; (8012c90 <__sinit+0x68>)
 8012c44:	4a13      	ldr	r2, [pc, #76]	; (8012c94 <__sinit+0x6c>)
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	62a2      	str	r2, [r4, #40]	; 0x28
 8012c4a:	42a3      	cmp	r3, r4
 8012c4c:	bf04      	itt	eq
 8012c4e:	2301      	moveq	r3, #1
 8012c50:	61a3      	streq	r3, [r4, #24]
 8012c52:	4620      	mov	r0, r4
 8012c54:	f000 f820 	bl	8012c98 <__sfp>
 8012c58:	6060      	str	r0, [r4, #4]
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	f000 f81c 	bl	8012c98 <__sfp>
 8012c60:	60a0      	str	r0, [r4, #8]
 8012c62:	4620      	mov	r0, r4
 8012c64:	f000 f818 	bl	8012c98 <__sfp>
 8012c68:	2200      	movs	r2, #0
 8012c6a:	60e0      	str	r0, [r4, #12]
 8012c6c:	2104      	movs	r1, #4
 8012c6e:	6860      	ldr	r0, [r4, #4]
 8012c70:	f7ff ff82 	bl	8012b78 <std>
 8012c74:	68a0      	ldr	r0, [r4, #8]
 8012c76:	2201      	movs	r2, #1
 8012c78:	2109      	movs	r1, #9
 8012c7a:	f7ff ff7d 	bl	8012b78 <std>
 8012c7e:	68e0      	ldr	r0, [r4, #12]
 8012c80:	2202      	movs	r2, #2
 8012c82:	2112      	movs	r1, #18
 8012c84:	f7ff ff78 	bl	8012b78 <std>
 8012c88:	2301      	movs	r3, #1
 8012c8a:	61a3      	str	r3, [r4, #24]
 8012c8c:	e7d2      	b.n	8012c34 <__sinit+0xc>
 8012c8e:	bf00      	nop
 8012c90:	08014694 	.word	0x08014694
 8012c94:	08012bc1 	.word	0x08012bc1

08012c98 <__sfp>:
 8012c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c9a:	4607      	mov	r7, r0
 8012c9c:	f7ff ffac 	bl	8012bf8 <__sfp_lock_acquire>
 8012ca0:	4b1e      	ldr	r3, [pc, #120]	; (8012d1c <__sfp+0x84>)
 8012ca2:	681e      	ldr	r6, [r3, #0]
 8012ca4:	69b3      	ldr	r3, [r6, #24]
 8012ca6:	b913      	cbnz	r3, 8012cae <__sfp+0x16>
 8012ca8:	4630      	mov	r0, r6
 8012caa:	f7ff ffbd 	bl	8012c28 <__sinit>
 8012cae:	3648      	adds	r6, #72	; 0x48
 8012cb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012cb4:	3b01      	subs	r3, #1
 8012cb6:	d503      	bpl.n	8012cc0 <__sfp+0x28>
 8012cb8:	6833      	ldr	r3, [r6, #0]
 8012cba:	b30b      	cbz	r3, 8012d00 <__sfp+0x68>
 8012cbc:	6836      	ldr	r6, [r6, #0]
 8012cbe:	e7f7      	b.n	8012cb0 <__sfp+0x18>
 8012cc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012cc4:	b9d5      	cbnz	r5, 8012cfc <__sfp+0x64>
 8012cc6:	4b16      	ldr	r3, [pc, #88]	; (8012d20 <__sfp+0x88>)
 8012cc8:	60e3      	str	r3, [r4, #12]
 8012cca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012cce:	6665      	str	r5, [r4, #100]	; 0x64
 8012cd0:	f000 f84c 	bl	8012d6c <__retarget_lock_init_recursive>
 8012cd4:	f7ff ff96 	bl	8012c04 <__sfp_lock_release>
 8012cd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012cdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012ce0:	6025      	str	r5, [r4, #0]
 8012ce2:	61a5      	str	r5, [r4, #24]
 8012ce4:	2208      	movs	r2, #8
 8012ce6:	4629      	mov	r1, r5
 8012ce8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012cec:	f7fe fada 	bl	80112a4 <memset>
 8012cf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012cf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cfc:	3468      	adds	r4, #104	; 0x68
 8012cfe:	e7d9      	b.n	8012cb4 <__sfp+0x1c>
 8012d00:	2104      	movs	r1, #4
 8012d02:	4638      	mov	r0, r7
 8012d04:	f7ff ff62 	bl	8012bcc <__sfmoreglue>
 8012d08:	4604      	mov	r4, r0
 8012d0a:	6030      	str	r0, [r6, #0]
 8012d0c:	2800      	cmp	r0, #0
 8012d0e:	d1d5      	bne.n	8012cbc <__sfp+0x24>
 8012d10:	f7ff ff78 	bl	8012c04 <__sfp_lock_release>
 8012d14:	230c      	movs	r3, #12
 8012d16:	603b      	str	r3, [r7, #0]
 8012d18:	e7ee      	b.n	8012cf8 <__sfp+0x60>
 8012d1a:	bf00      	nop
 8012d1c:	08014694 	.word	0x08014694
 8012d20:	ffff0001 	.word	0xffff0001

08012d24 <_fwalk_reent>:
 8012d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d28:	4606      	mov	r6, r0
 8012d2a:	4688      	mov	r8, r1
 8012d2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012d30:	2700      	movs	r7, #0
 8012d32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d36:	f1b9 0901 	subs.w	r9, r9, #1
 8012d3a:	d505      	bpl.n	8012d48 <_fwalk_reent+0x24>
 8012d3c:	6824      	ldr	r4, [r4, #0]
 8012d3e:	2c00      	cmp	r4, #0
 8012d40:	d1f7      	bne.n	8012d32 <_fwalk_reent+0xe>
 8012d42:	4638      	mov	r0, r7
 8012d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d48:	89ab      	ldrh	r3, [r5, #12]
 8012d4a:	2b01      	cmp	r3, #1
 8012d4c:	d907      	bls.n	8012d5e <_fwalk_reent+0x3a>
 8012d4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d52:	3301      	adds	r3, #1
 8012d54:	d003      	beq.n	8012d5e <_fwalk_reent+0x3a>
 8012d56:	4629      	mov	r1, r5
 8012d58:	4630      	mov	r0, r6
 8012d5a:	47c0      	blx	r8
 8012d5c:	4307      	orrs	r7, r0
 8012d5e:	3568      	adds	r5, #104	; 0x68
 8012d60:	e7e9      	b.n	8012d36 <_fwalk_reent+0x12>
	...

08012d64 <_localeconv_r>:
 8012d64:	4800      	ldr	r0, [pc, #0]	; (8012d68 <_localeconv_r+0x4>)
 8012d66:	4770      	bx	lr
 8012d68:	24000178 	.word	0x24000178

08012d6c <__retarget_lock_init_recursive>:
 8012d6c:	4770      	bx	lr

08012d6e <__retarget_lock_acquire_recursive>:
 8012d6e:	4770      	bx	lr

08012d70 <__retarget_lock_release_recursive>:
 8012d70:	4770      	bx	lr

08012d72 <__swhatbuf_r>:
 8012d72:	b570      	push	{r4, r5, r6, lr}
 8012d74:	460e      	mov	r6, r1
 8012d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d7a:	2900      	cmp	r1, #0
 8012d7c:	b096      	sub	sp, #88	; 0x58
 8012d7e:	4614      	mov	r4, r2
 8012d80:	461d      	mov	r5, r3
 8012d82:	da07      	bge.n	8012d94 <__swhatbuf_r+0x22>
 8012d84:	2300      	movs	r3, #0
 8012d86:	602b      	str	r3, [r5, #0]
 8012d88:	89b3      	ldrh	r3, [r6, #12]
 8012d8a:	061a      	lsls	r2, r3, #24
 8012d8c:	d410      	bmi.n	8012db0 <__swhatbuf_r+0x3e>
 8012d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d92:	e00e      	b.n	8012db2 <__swhatbuf_r+0x40>
 8012d94:	466a      	mov	r2, sp
 8012d96:	f000 fe9f 	bl	8013ad8 <_fstat_r>
 8012d9a:	2800      	cmp	r0, #0
 8012d9c:	dbf2      	blt.n	8012d84 <__swhatbuf_r+0x12>
 8012d9e:	9a01      	ldr	r2, [sp, #4]
 8012da0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012da4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012da8:	425a      	negs	r2, r3
 8012daa:	415a      	adcs	r2, r3
 8012dac:	602a      	str	r2, [r5, #0]
 8012dae:	e7ee      	b.n	8012d8e <__swhatbuf_r+0x1c>
 8012db0:	2340      	movs	r3, #64	; 0x40
 8012db2:	2000      	movs	r0, #0
 8012db4:	6023      	str	r3, [r4, #0]
 8012db6:	b016      	add	sp, #88	; 0x58
 8012db8:	bd70      	pop	{r4, r5, r6, pc}
	...

08012dbc <__smakebuf_r>:
 8012dbc:	898b      	ldrh	r3, [r1, #12]
 8012dbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012dc0:	079d      	lsls	r5, r3, #30
 8012dc2:	4606      	mov	r6, r0
 8012dc4:	460c      	mov	r4, r1
 8012dc6:	d507      	bpl.n	8012dd8 <__smakebuf_r+0x1c>
 8012dc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012dcc:	6023      	str	r3, [r4, #0]
 8012dce:	6123      	str	r3, [r4, #16]
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	6163      	str	r3, [r4, #20]
 8012dd4:	b002      	add	sp, #8
 8012dd6:	bd70      	pop	{r4, r5, r6, pc}
 8012dd8:	ab01      	add	r3, sp, #4
 8012dda:	466a      	mov	r2, sp
 8012ddc:	f7ff ffc9 	bl	8012d72 <__swhatbuf_r>
 8012de0:	9900      	ldr	r1, [sp, #0]
 8012de2:	4605      	mov	r5, r0
 8012de4:	4630      	mov	r0, r6
 8012de6:	f000 fc1d 	bl	8013624 <_malloc_r>
 8012dea:	b948      	cbnz	r0, 8012e00 <__smakebuf_r+0x44>
 8012dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012df0:	059a      	lsls	r2, r3, #22
 8012df2:	d4ef      	bmi.n	8012dd4 <__smakebuf_r+0x18>
 8012df4:	f023 0303 	bic.w	r3, r3, #3
 8012df8:	f043 0302 	orr.w	r3, r3, #2
 8012dfc:	81a3      	strh	r3, [r4, #12]
 8012dfe:	e7e3      	b.n	8012dc8 <__smakebuf_r+0xc>
 8012e00:	4b0d      	ldr	r3, [pc, #52]	; (8012e38 <__smakebuf_r+0x7c>)
 8012e02:	62b3      	str	r3, [r6, #40]	; 0x28
 8012e04:	89a3      	ldrh	r3, [r4, #12]
 8012e06:	6020      	str	r0, [r4, #0]
 8012e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e0c:	81a3      	strh	r3, [r4, #12]
 8012e0e:	9b00      	ldr	r3, [sp, #0]
 8012e10:	6163      	str	r3, [r4, #20]
 8012e12:	9b01      	ldr	r3, [sp, #4]
 8012e14:	6120      	str	r0, [r4, #16]
 8012e16:	b15b      	cbz	r3, 8012e30 <__smakebuf_r+0x74>
 8012e18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e1c:	4630      	mov	r0, r6
 8012e1e:	f000 fe6d 	bl	8013afc <_isatty_r>
 8012e22:	b128      	cbz	r0, 8012e30 <__smakebuf_r+0x74>
 8012e24:	89a3      	ldrh	r3, [r4, #12]
 8012e26:	f023 0303 	bic.w	r3, r3, #3
 8012e2a:	f043 0301 	orr.w	r3, r3, #1
 8012e2e:	81a3      	strh	r3, [r4, #12]
 8012e30:	89a0      	ldrh	r0, [r4, #12]
 8012e32:	4305      	orrs	r5, r0
 8012e34:	81a5      	strh	r5, [r4, #12]
 8012e36:	e7cd      	b.n	8012dd4 <__smakebuf_r+0x18>
 8012e38:	08012bc1 	.word	0x08012bc1

08012e3c <malloc>:
 8012e3c:	4b02      	ldr	r3, [pc, #8]	; (8012e48 <malloc+0xc>)
 8012e3e:	4601      	mov	r1, r0
 8012e40:	6818      	ldr	r0, [r3, #0]
 8012e42:	f000 bbef 	b.w	8013624 <_malloc_r>
 8012e46:	bf00      	nop
 8012e48:	24000024 	.word	0x24000024

08012e4c <memcpy>:
 8012e4c:	440a      	add	r2, r1
 8012e4e:	4291      	cmp	r1, r2
 8012e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8012e54:	d100      	bne.n	8012e58 <memcpy+0xc>
 8012e56:	4770      	bx	lr
 8012e58:	b510      	push	{r4, lr}
 8012e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e62:	4291      	cmp	r1, r2
 8012e64:	d1f9      	bne.n	8012e5a <memcpy+0xe>
 8012e66:	bd10      	pop	{r4, pc}

08012e68 <_Balloc>:
 8012e68:	b570      	push	{r4, r5, r6, lr}
 8012e6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012e6c:	4604      	mov	r4, r0
 8012e6e:	460d      	mov	r5, r1
 8012e70:	b976      	cbnz	r6, 8012e90 <_Balloc+0x28>
 8012e72:	2010      	movs	r0, #16
 8012e74:	f7ff ffe2 	bl	8012e3c <malloc>
 8012e78:	4602      	mov	r2, r0
 8012e7a:	6260      	str	r0, [r4, #36]	; 0x24
 8012e7c:	b920      	cbnz	r0, 8012e88 <_Balloc+0x20>
 8012e7e:	4b18      	ldr	r3, [pc, #96]	; (8012ee0 <_Balloc+0x78>)
 8012e80:	4818      	ldr	r0, [pc, #96]	; (8012ee4 <_Balloc+0x7c>)
 8012e82:	2166      	movs	r1, #102	; 0x66
 8012e84:	f000 fde8 	bl	8013a58 <__assert_func>
 8012e88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e8c:	6006      	str	r6, [r0, #0]
 8012e8e:	60c6      	str	r6, [r0, #12]
 8012e90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012e92:	68f3      	ldr	r3, [r6, #12]
 8012e94:	b183      	cbz	r3, 8012eb8 <_Balloc+0x50>
 8012e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e98:	68db      	ldr	r3, [r3, #12]
 8012e9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012e9e:	b9b8      	cbnz	r0, 8012ed0 <_Balloc+0x68>
 8012ea0:	2101      	movs	r1, #1
 8012ea2:	fa01 f605 	lsl.w	r6, r1, r5
 8012ea6:	1d72      	adds	r2, r6, #5
 8012ea8:	0092      	lsls	r2, r2, #2
 8012eaa:	4620      	mov	r0, r4
 8012eac:	f000 fb5a 	bl	8013564 <_calloc_r>
 8012eb0:	b160      	cbz	r0, 8012ecc <_Balloc+0x64>
 8012eb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012eb6:	e00e      	b.n	8012ed6 <_Balloc+0x6e>
 8012eb8:	2221      	movs	r2, #33	; 0x21
 8012eba:	2104      	movs	r1, #4
 8012ebc:	4620      	mov	r0, r4
 8012ebe:	f000 fb51 	bl	8013564 <_calloc_r>
 8012ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ec4:	60f0      	str	r0, [r6, #12]
 8012ec6:	68db      	ldr	r3, [r3, #12]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d1e4      	bne.n	8012e96 <_Balloc+0x2e>
 8012ecc:	2000      	movs	r0, #0
 8012ece:	bd70      	pop	{r4, r5, r6, pc}
 8012ed0:	6802      	ldr	r2, [r0, #0]
 8012ed2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012edc:	e7f7      	b.n	8012ece <_Balloc+0x66>
 8012ede:	bf00      	nop
 8012ee0:	080146d9 	.word	0x080146d9
 8012ee4:	080147c0 	.word	0x080147c0

08012ee8 <_Bfree>:
 8012ee8:	b570      	push	{r4, r5, r6, lr}
 8012eea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012eec:	4605      	mov	r5, r0
 8012eee:	460c      	mov	r4, r1
 8012ef0:	b976      	cbnz	r6, 8012f10 <_Bfree+0x28>
 8012ef2:	2010      	movs	r0, #16
 8012ef4:	f7ff ffa2 	bl	8012e3c <malloc>
 8012ef8:	4602      	mov	r2, r0
 8012efa:	6268      	str	r0, [r5, #36]	; 0x24
 8012efc:	b920      	cbnz	r0, 8012f08 <_Bfree+0x20>
 8012efe:	4b09      	ldr	r3, [pc, #36]	; (8012f24 <_Bfree+0x3c>)
 8012f00:	4809      	ldr	r0, [pc, #36]	; (8012f28 <_Bfree+0x40>)
 8012f02:	218a      	movs	r1, #138	; 0x8a
 8012f04:	f000 fda8 	bl	8013a58 <__assert_func>
 8012f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012f0c:	6006      	str	r6, [r0, #0]
 8012f0e:	60c6      	str	r6, [r0, #12]
 8012f10:	b13c      	cbz	r4, 8012f22 <_Bfree+0x3a>
 8012f12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012f14:	6862      	ldr	r2, [r4, #4]
 8012f16:	68db      	ldr	r3, [r3, #12]
 8012f18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012f1c:	6021      	str	r1, [r4, #0]
 8012f1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012f22:	bd70      	pop	{r4, r5, r6, pc}
 8012f24:	080146d9 	.word	0x080146d9
 8012f28:	080147c0 	.word	0x080147c0

08012f2c <__multadd>:
 8012f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f30:	690e      	ldr	r6, [r1, #16]
 8012f32:	4607      	mov	r7, r0
 8012f34:	4698      	mov	r8, r3
 8012f36:	460c      	mov	r4, r1
 8012f38:	f101 0014 	add.w	r0, r1, #20
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	6805      	ldr	r5, [r0, #0]
 8012f40:	b2a9      	uxth	r1, r5
 8012f42:	fb02 8101 	mla	r1, r2, r1, r8
 8012f46:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012f4a:	0c2d      	lsrs	r5, r5, #16
 8012f4c:	fb02 c505 	mla	r5, r2, r5, ip
 8012f50:	b289      	uxth	r1, r1
 8012f52:	3301      	adds	r3, #1
 8012f54:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012f58:	429e      	cmp	r6, r3
 8012f5a:	f840 1b04 	str.w	r1, [r0], #4
 8012f5e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012f62:	dcec      	bgt.n	8012f3e <__multadd+0x12>
 8012f64:	f1b8 0f00 	cmp.w	r8, #0
 8012f68:	d022      	beq.n	8012fb0 <__multadd+0x84>
 8012f6a:	68a3      	ldr	r3, [r4, #8]
 8012f6c:	42b3      	cmp	r3, r6
 8012f6e:	dc19      	bgt.n	8012fa4 <__multadd+0x78>
 8012f70:	6861      	ldr	r1, [r4, #4]
 8012f72:	4638      	mov	r0, r7
 8012f74:	3101      	adds	r1, #1
 8012f76:	f7ff ff77 	bl	8012e68 <_Balloc>
 8012f7a:	4605      	mov	r5, r0
 8012f7c:	b928      	cbnz	r0, 8012f8a <__multadd+0x5e>
 8012f7e:	4602      	mov	r2, r0
 8012f80:	4b0d      	ldr	r3, [pc, #52]	; (8012fb8 <__multadd+0x8c>)
 8012f82:	480e      	ldr	r0, [pc, #56]	; (8012fbc <__multadd+0x90>)
 8012f84:	21b5      	movs	r1, #181	; 0xb5
 8012f86:	f000 fd67 	bl	8013a58 <__assert_func>
 8012f8a:	6922      	ldr	r2, [r4, #16]
 8012f8c:	3202      	adds	r2, #2
 8012f8e:	f104 010c 	add.w	r1, r4, #12
 8012f92:	0092      	lsls	r2, r2, #2
 8012f94:	300c      	adds	r0, #12
 8012f96:	f7ff ff59 	bl	8012e4c <memcpy>
 8012f9a:	4621      	mov	r1, r4
 8012f9c:	4638      	mov	r0, r7
 8012f9e:	f7ff ffa3 	bl	8012ee8 <_Bfree>
 8012fa2:	462c      	mov	r4, r5
 8012fa4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012fa8:	3601      	adds	r6, #1
 8012faa:	f8c3 8014 	str.w	r8, [r3, #20]
 8012fae:	6126      	str	r6, [r4, #16]
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fb6:	bf00      	nop
 8012fb8:	0801474f 	.word	0x0801474f
 8012fbc:	080147c0 	.word	0x080147c0

08012fc0 <__hi0bits>:
 8012fc0:	0c03      	lsrs	r3, r0, #16
 8012fc2:	041b      	lsls	r3, r3, #16
 8012fc4:	b9d3      	cbnz	r3, 8012ffc <__hi0bits+0x3c>
 8012fc6:	0400      	lsls	r0, r0, #16
 8012fc8:	2310      	movs	r3, #16
 8012fca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012fce:	bf04      	itt	eq
 8012fd0:	0200      	lsleq	r0, r0, #8
 8012fd2:	3308      	addeq	r3, #8
 8012fd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012fd8:	bf04      	itt	eq
 8012fda:	0100      	lsleq	r0, r0, #4
 8012fdc:	3304      	addeq	r3, #4
 8012fde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012fe2:	bf04      	itt	eq
 8012fe4:	0080      	lsleq	r0, r0, #2
 8012fe6:	3302      	addeq	r3, #2
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	db05      	blt.n	8012ff8 <__hi0bits+0x38>
 8012fec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012ff0:	f103 0301 	add.w	r3, r3, #1
 8012ff4:	bf08      	it	eq
 8012ff6:	2320      	moveq	r3, #32
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	4770      	bx	lr
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	e7e4      	b.n	8012fca <__hi0bits+0xa>

08013000 <__lo0bits>:
 8013000:	6803      	ldr	r3, [r0, #0]
 8013002:	f013 0207 	ands.w	r2, r3, #7
 8013006:	4601      	mov	r1, r0
 8013008:	d00b      	beq.n	8013022 <__lo0bits+0x22>
 801300a:	07da      	lsls	r2, r3, #31
 801300c:	d424      	bmi.n	8013058 <__lo0bits+0x58>
 801300e:	0798      	lsls	r0, r3, #30
 8013010:	bf49      	itett	mi
 8013012:	085b      	lsrmi	r3, r3, #1
 8013014:	089b      	lsrpl	r3, r3, #2
 8013016:	2001      	movmi	r0, #1
 8013018:	600b      	strmi	r3, [r1, #0]
 801301a:	bf5c      	itt	pl
 801301c:	600b      	strpl	r3, [r1, #0]
 801301e:	2002      	movpl	r0, #2
 8013020:	4770      	bx	lr
 8013022:	b298      	uxth	r0, r3
 8013024:	b9b0      	cbnz	r0, 8013054 <__lo0bits+0x54>
 8013026:	0c1b      	lsrs	r3, r3, #16
 8013028:	2010      	movs	r0, #16
 801302a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801302e:	bf04      	itt	eq
 8013030:	0a1b      	lsreq	r3, r3, #8
 8013032:	3008      	addeq	r0, #8
 8013034:	071a      	lsls	r2, r3, #28
 8013036:	bf04      	itt	eq
 8013038:	091b      	lsreq	r3, r3, #4
 801303a:	3004      	addeq	r0, #4
 801303c:	079a      	lsls	r2, r3, #30
 801303e:	bf04      	itt	eq
 8013040:	089b      	lsreq	r3, r3, #2
 8013042:	3002      	addeq	r0, #2
 8013044:	07da      	lsls	r2, r3, #31
 8013046:	d403      	bmi.n	8013050 <__lo0bits+0x50>
 8013048:	085b      	lsrs	r3, r3, #1
 801304a:	f100 0001 	add.w	r0, r0, #1
 801304e:	d005      	beq.n	801305c <__lo0bits+0x5c>
 8013050:	600b      	str	r3, [r1, #0]
 8013052:	4770      	bx	lr
 8013054:	4610      	mov	r0, r2
 8013056:	e7e8      	b.n	801302a <__lo0bits+0x2a>
 8013058:	2000      	movs	r0, #0
 801305a:	4770      	bx	lr
 801305c:	2020      	movs	r0, #32
 801305e:	4770      	bx	lr

08013060 <__i2b>:
 8013060:	b510      	push	{r4, lr}
 8013062:	460c      	mov	r4, r1
 8013064:	2101      	movs	r1, #1
 8013066:	f7ff feff 	bl	8012e68 <_Balloc>
 801306a:	4602      	mov	r2, r0
 801306c:	b928      	cbnz	r0, 801307a <__i2b+0x1a>
 801306e:	4b05      	ldr	r3, [pc, #20]	; (8013084 <__i2b+0x24>)
 8013070:	4805      	ldr	r0, [pc, #20]	; (8013088 <__i2b+0x28>)
 8013072:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013076:	f000 fcef 	bl	8013a58 <__assert_func>
 801307a:	2301      	movs	r3, #1
 801307c:	6144      	str	r4, [r0, #20]
 801307e:	6103      	str	r3, [r0, #16]
 8013080:	bd10      	pop	{r4, pc}
 8013082:	bf00      	nop
 8013084:	0801474f 	.word	0x0801474f
 8013088:	080147c0 	.word	0x080147c0

0801308c <__multiply>:
 801308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013090:	4614      	mov	r4, r2
 8013092:	690a      	ldr	r2, [r1, #16]
 8013094:	6923      	ldr	r3, [r4, #16]
 8013096:	429a      	cmp	r2, r3
 8013098:	bfb8      	it	lt
 801309a:	460b      	movlt	r3, r1
 801309c:	460d      	mov	r5, r1
 801309e:	bfbc      	itt	lt
 80130a0:	4625      	movlt	r5, r4
 80130a2:	461c      	movlt	r4, r3
 80130a4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80130a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80130ac:	68ab      	ldr	r3, [r5, #8]
 80130ae:	6869      	ldr	r1, [r5, #4]
 80130b0:	eb0a 0709 	add.w	r7, sl, r9
 80130b4:	42bb      	cmp	r3, r7
 80130b6:	b085      	sub	sp, #20
 80130b8:	bfb8      	it	lt
 80130ba:	3101      	addlt	r1, #1
 80130bc:	f7ff fed4 	bl	8012e68 <_Balloc>
 80130c0:	b930      	cbnz	r0, 80130d0 <__multiply+0x44>
 80130c2:	4602      	mov	r2, r0
 80130c4:	4b42      	ldr	r3, [pc, #264]	; (80131d0 <__multiply+0x144>)
 80130c6:	4843      	ldr	r0, [pc, #268]	; (80131d4 <__multiply+0x148>)
 80130c8:	f240 115d 	movw	r1, #349	; 0x15d
 80130cc:	f000 fcc4 	bl	8013a58 <__assert_func>
 80130d0:	f100 0614 	add.w	r6, r0, #20
 80130d4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80130d8:	4633      	mov	r3, r6
 80130da:	2200      	movs	r2, #0
 80130dc:	4543      	cmp	r3, r8
 80130de:	d31e      	bcc.n	801311e <__multiply+0x92>
 80130e0:	f105 0c14 	add.w	ip, r5, #20
 80130e4:	f104 0314 	add.w	r3, r4, #20
 80130e8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80130ec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80130f0:	9202      	str	r2, [sp, #8]
 80130f2:	ebac 0205 	sub.w	r2, ip, r5
 80130f6:	3a15      	subs	r2, #21
 80130f8:	f022 0203 	bic.w	r2, r2, #3
 80130fc:	3204      	adds	r2, #4
 80130fe:	f105 0115 	add.w	r1, r5, #21
 8013102:	458c      	cmp	ip, r1
 8013104:	bf38      	it	cc
 8013106:	2204      	movcc	r2, #4
 8013108:	9201      	str	r2, [sp, #4]
 801310a:	9a02      	ldr	r2, [sp, #8]
 801310c:	9303      	str	r3, [sp, #12]
 801310e:	429a      	cmp	r2, r3
 8013110:	d808      	bhi.n	8013124 <__multiply+0x98>
 8013112:	2f00      	cmp	r7, #0
 8013114:	dc55      	bgt.n	80131c2 <__multiply+0x136>
 8013116:	6107      	str	r7, [r0, #16]
 8013118:	b005      	add	sp, #20
 801311a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801311e:	f843 2b04 	str.w	r2, [r3], #4
 8013122:	e7db      	b.n	80130dc <__multiply+0x50>
 8013124:	f8b3 a000 	ldrh.w	sl, [r3]
 8013128:	f1ba 0f00 	cmp.w	sl, #0
 801312c:	d020      	beq.n	8013170 <__multiply+0xe4>
 801312e:	f105 0e14 	add.w	lr, r5, #20
 8013132:	46b1      	mov	r9, r6
 8013134:	2200      	movs	r2, #0
 8013136:	f85e 4b04 	ldr.w	r4, [lr], #4
 801313a:	f8d9 b000 	ldr.w	fp, [r9]
 801313e:	b2a1      	uxth	r1, r4
 8013140:	fa1f fb8b 	uxth.w	fp, fp
 8013144:	fb0a b101 	mla	r1, sl, r1, fp
 8013148:	4411      	add	r1, r2
 801314a:	f8d9 2000 	ldr.w	r2, [r9]
 801314e:	0c24      	lsrs	r4, r4, #16
 8013150:	0c12      	lsrs	r2, r2, #16
 8013152:	fb0a 2404 	mla	r4, sl, r4, r2
 8013156:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801315a:	b289      	uxth	r1, r1
 801315c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013160:	45f4      	cmp	ip, lr
 8013162:	f849 1b04 	str.w	r1, [r9], #4
 8013166:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801316a:	d8e4      	bhi.n	8013136 <__multiply+0xaa>
 801316c:	9901      	ldr	r1, [sp, #4]
 801316e:	5072      	str	r2, [r6, r1]
 8013170:	9a03      	ldr	r2, [sp, #12]
 8013172:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013176:	3304      	adds	r3, #4
 8013178:	f1b9 0f00 	cmp.w	r9, #0
 801317c:	d01f      	beq.n	80131be <__multiply+0x132>
 801317e:	6834      	ldr	r4, [r6, #0]
 8013180:	f105 0114 	add.w	r1, r5, #20
 8013184:	46b6      	mov	lr, r6
 8013186:	f04f 0a00 	mov.w	sl, #0
 801318a:	880a      	ldrh	r2, [r1, #0]
 801318c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013190:	fb09 b202 	mla	r2, r9, r2, fp
 8013194:	4492      	add	sl, r2
 8013196:	b2a4      	uxth	r4, r4
 8013198:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801319c:	f84e 4b04 	str.w	r4, [lr], #4
 80131a0:	f851 4b04 	ldr.w	r4, [r1], #4
 80131a4:	f8be 2000 	ldrh.w	r2, [lr]
 80131a8:	0c24      	lsrs	r4, r4, #16
 80131aa:	fb09 2404 	mla	r4, r9, r4, r2
 80131ae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80131b2:	458c      	cmp	ip, r1
 80131b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80131b8:	d8e7      	bhi.n	801318a <__multiply+0xfe>
 80131ba:	9a01      	ldr	r2, [sp, #4]
 80131bc:	50b4      	str	r4, [r6, r2]
 80131be:	3604      	adds	r6, #4
 80131c0:	e7a3      	b.n	801310a <__multiply+0x7e>
 80131c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d1a5      	bne.n	8013116 <__multiply+0x8a>
 80131ca:	3f01      	subs	r7, #1
 80131cc:	e7a1      	b.n	8013112 <__multiply+0x86>
 80131ce:	bf00      	nop
 80131d0:	0801474f 	.word	0x0801474f
 80131d4:	080147c0 	.word	0x080147c0

080131d8 <__pow5mult>:
 80131d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131dc:	4615      	mov	r5, r2
 80131de:	f012 0203 	ands.w	r2, r2, #3
 80131e2:	4606      	mov	r6, r0
 80131e4:	460f      	mov	r7, r1
 80131e6:	d007      	beq.n	80131f8 <__pow5mult+0x20>
 80131e8:	4c25      	ldr	r4, [pc, #148]	; (8013280 <__pow5mult+0xa8>)
 80131ea:	3a01      	subs	r2, #1
 80131ec:	2300      	movs	r3, #0
 80131ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80131f2:	f7ff fe9b 	bl	8012f2c <__multadd>
 80131f6:	4607      	mov	r7, r0
 80131f8:	10ad      	asrs	r5, r5, #2
 80131fa:	d03d      	beq.n	8013278 <__pow5mult+0xa0>
 80131fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80131fe:	b97c      	cbnz	r4, 8013220 <__pow5mult+0x48>
 8013200:	2010      	movs	r0, #16
 8013202:	f7ff fe1b 	bl	8012e3c <malloc>
 8013206:	4602      	mov	r2, r0
 8013208:	6270      	str	r0, [r6, #36]	; 0x24
 801320a:	b928      	cbnz	r0, 8013218 <__pow5mult+0x40>
 801320c:	4b1d      	ldr	r3, [pc, #116]	; (8013284 <__pow5mult+0xac>)
 801320e:	481e      	ldr	r0, [pc, #120]	; (8013288 <__pow5mult+0xb0>)
 8013210:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013214:	f000 fc20 	bl	8013a58 <__assert_func>
 8013218:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801321c:	6004      	str	r4, [r0, #0]
 801321e:	60c4      	str	r4, [r0, #12]
 8013220:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013224:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013228:	b94c      	cbnz	r4, 801323e <__pow5mult+0x66>
 801322a:	f240 2171 	movw	r1, #625	; 0x271
 801322e:	4630      	mov	r0, r6
 8013230:	f7ff ff16 	bl	8013060 <__i2b>
 8013234:	2300      	movs	r3, #0
 8013236:	f8c8 0008 	str.w	r0, [r8, #8]
 801323a:	4604      	mov	r4, r0
 801323c:	6003      	str	r3, [r0, #0]
 801323e:	f04f 0900 	mov.w	r9, #0
 8013242:	07eb      	lsls	r3, r5, #31
 8013244:	d50a      	bpl.n	801325c <__pow5mult+0x84>
 8013246:	4639      	mov	r1, r7
 8013248:	4622      	mov	r2, r4
 801324a:	4630      	mov	r0, r6
 801324c:	f7ff ff1e 	bl	801308c <__multiply>
 8013250:	4639      	mov	r1, r7
 8013252:	4680      	mov	r8, r0
 8013254:	4630      	mov	r0, r6
 8013256:	f7ff fe47 	bl	8012ee8 <_Bfree>
 801325a:	4647      	mov	r7, r8
 801325c:	106d      	asrs	r5, r5, #1
 801325e:	d00b      	beq.n	8013278 <__pow5mult+0xa0>
 8013260:	6820      	ldr	r0, [r4, #0]
 8013262:	b938      	cbnz	r0, 8013274 <__pow5mult+0x9c>
 8013264:	4622      	mov	r2, r4
 8013266:	4621      	mov	r1, r4
 8013268:	4630      	mov	r0, r6
 801326a:	f7ff ff0f 	bl	801308c <__multiply>
 801326e:	6020      	str	r0, [r4, #0]
 8013270:	f8c0 9000 	str.w	r9, [r0]
 8013274:	4604      	mov	r4, r0
 8013276:	e7e4      	b.n	8013242 <__pow5mult+0x6a>
 8013278:	4638      	mov	r0, r7
 801327a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801327e:	bf00      	nop
 8013280:	08014910 	.word	0x08014910
 8013284:	080146d9 	.word	0x080146d9
 8013288:	080147c0 	.word	0x080147c0

0801328c <__lshift>:
 801328c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013290:	460c      	mov	r4, r1
 8013292:	6849      	ldr	r1, [r1, #4]
 8013294:	6923      	ldr	r3, [r4, #16]
 8013296:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801329a:	68a3      	ldr	r3, [r4, #8]
 801329c:	4607      	mov	r7, r0
 801329e:	4691      	mov	r9, r2
 80132a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80132a4:	f108 0601 	add.w	r6, r8, #1
 80132a8:	42b3      	cmp	r3, r6
 80132aa:	db0b      	blt.n	80132c4 <__lshift+0x38>
 80132ac:	4638      	mov	r0, r7
 80132ae:	f7ff fddb 	bl	8012e68 <_Balloc>
 80132b2:	4605      	mov	r5, r0
 80132b4:	b948      	cbnz	r0, 80132ca <__lshift+0x3e>
 80132b6:	4602      	mov	r2, r0
 80132b8:	4b28      	ldr	r3, [pc, #160]	; (801335c <__lshift+0xd0>)
 80132ba:	4829      	ldr	r0, [pc, #164]	; (8013360 <__lshift+0xd4>)
 80132bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80132c0:	f000 fbca 	bl	8013a58 <__assert_func>
 80132c4:	3101      	adds	r1, #1
 80132c6:	005b      	lsls	r3, r3, #1
 80132c8:	e7ee      	b.n	80132a8 <__lshift+0x1c>
 80132ca:	2300      	movs	r3, #0
 80132cc:	f100 0114 	add.w	r1, r0, #20
 80132d0:	f100 0210 	add.w	r2, r0, #16
 80132d4:	4618      	mov	r0, r3
 80132d6:	4553      	cmp	r3, sl
 80132d8:	db33      	blt.n	8013342 <__lshift+0xb6>
 80132da:	6920      	ldr	r0, [r4, #16]
 80132dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80132e0:	f104 0314 	add.w	r3, r4, #20
 80132e4:	f019 091f 	ands.w	r9, r9, #31
 80132e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80132ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80132f0:	d02b      	beq.n	801334a <__lshift+0xbe>
 80132f2:	f1c9 0e20 	rsb	lr, r9, #32
 80132f6:	468a      	mov	sl, r1
 80132f8:	2200      	movs	r2, #0
 80132fa:	6818      	ldr	r0, [r3, #0]
 80132fc:	fa00 f009 	lsl.w	r0, r0, r9
 8013300:	4302      	orrs	r2, r0
 8013302:	f84a 2b04 	str.w	r2, [sl], #4
 8013306:	f853 2b04 	ldr.w	r2, [r3], #4
 801330a:	459c      	cmp	ip, r3
 801330c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013310:	d8f3      	bhi.n	80132fa <__lshift+0x6e>
 8013312:	ebac 0304 	sub.w	r3, ip, r4
 8013316:	3b15      	subs	r3, #21
 8013318:	f023 0303 	bic.w	r3, r3, #3
 801331c:	3304      	adds	r3, #4
 801331e:	f104 0015 	add.w	r0, r4, #21
 8013322:	4584      	cmp	ip, r0
 8013324:	bf38      	it	cc
 8013326:	2304      	movcc	r3, #4
 8013328:	50ca      	str	r2, [r1, r3]
 801332a:	b10a      	cbz	r2, 8013330 <__lshift+0xa4>
 801332c:	f108 0602 	add.w	r6, r8, #2
 8013330:	3e01      	subs	r6, #1
 8013332:	4638      	mov	r0, r7
 8013334:	612e      	str	r6, [r5, #16]
 8013336:	4621      	mov	r1, r4
 8013338:	f7ff fdd6 	bl	8012ee8 <_Bfree>
 801333c:	4628      	mov	r0, r5
 801333e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013342:	f842 0f04 	str.w	r0, [r2, #4]!
 8013346:	3301      	adds	r3, #1
 8013348:	e7c5      	b.n	80132d6 <__lshift+0x4a>
 801334a:	3904      	subs	r1, #4
 801334c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013350:	f841 2f04 	str.w	r2, [r1, #4]!
 8013354:	459c      	cmp	ip, r3
 8013356:	d8f9      	bhi.n	801334c <__lshift+0xc0>
 8013358:	e7ea      	b.n	8013330 <__lshift+0xa4>
 801335a:	bf00      	nop
 801335c:	0801474f 	.word	0x0801474f
 8013360:	080147c0 	.word	0x080147c0

08013364 <__mcmp>:
 8013364:	b530      	push	{r4, r5, lr}
 8013366:	6902      	ldr	r2, [r0, #16]
 8013368:	690c      	ldr	r4, [r1, #16]
 801336a:	1b12      	subs	r2, r2, r4
 801336c:	d10e      	bne.n	801338c <__mcmp+0x28>
 801336e:	f100 0314 	add.w	r3, r0, #20
 8013372:	3114      	adds	r1, #20
 8013374:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013378:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801337c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013380:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013384:	42a5      	cmp	r5, r4
 8013386:	d003      	beq.n	8013390 <__mcmp+0x2c>
 8013388:	d305      	bcc.n	8013396 <__mcmp+0x32>
 801338a:	2201      	movs	r2, #1
 801338c:	4610      	mov	r0, r2
 801338e:	bd30      	pop	{r4, r5, pc}
 8013390:	4283      	cmp	r3, r0
 8013392:	d3f3      	bcc.n	801337c <__mcmp+0x18>
 8013394:	e7fa      	b.n	801338c <__mcmp+0x28>
 8013396:	f04f 32ff 	mov.w	r2, #4294967295
 801339a:	e7f7      	b.n	801338c <__mcmp+0x28>

0801339c <__mdiff>:
 801339c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133a0:	460c      	mov	r4, r1
 80133a2:	4606      	mov	r6, r0
 80133a4:	4611      	mov	r1, r2
 80133a6:	4620      	mov	r0, r4
 80133a8:	4617      	mov	r7, r2
 80133aa:	f7ff ffdb 	bl	8013364 <__mcmp>
 80133ae:	1e05      	subs	r5, r0, #0
 80133b0:	d110      	bne.n	80133d4 <__mdiff+0x38>
 80133b2:	4629      	mov	r1, r5
 80133b4:	4630      	mov	r0, r6
 80133b6:	f7ff fd57 	bl	8012e68 <_Balloc>
 80133ba:	b930      	cbnz	r0, 80133ca <__mdiff+0x2e>
 80133bc:	4b39      	ldr	r3, [pc, #228]	; (80134a4 <__mdiff+0x108>)
 80133be:	4602      	mov	r2, r0
 80133c0:	f240 2132 	movw	r1, #562	; 0x232
 80133c4:	4838      	ldr	r0, [pc, #224]	; (80134a8 <__mdiff+0x10c>)
 80133c6:	f000 fb47 	bl	8013a58 <__assert_func>
 80133ca:	2301      	movs	r3, #1
 80133cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80133d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133d4:	bfa4      	itt	ge
 80133d6:	463b      	movge	r3, r7
 80133d8:	4627      	movge	r7, r4
 80133da:	4630      	mov	r0, r6
 80133dc:	6879      	ldr	r1, [r7, #4]
 80133de:	bfa6      	itte	ge
 80133e0:	461c      	movge	r4, r3
 80133e2:	2500      	movge	r5, #0
 80133e4:	2501      	movlt	r5, #1
 80133e6:	f7ff fd3f 	bl	8012e68 <_Balloc>
 80133ea:	b920      	cbnz	r0, 80133f6 <__mdiff+0x5a>
 80133ec:	4b2d      	ldr	r3, [pc, #180]	; (80134a4 <__mdiff+0x108>)
 80133ee:	4602      	mov	r2, r0
 80133f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80133f4:	e7e6      	b.n	80133c4 <__mdiff+0x28>
 80133f6:	693e      	ldr	r6, [r7, #16]
 80133f8:	60c5      	str	r5, [r0, #12]
 80133fa:	6925      	ldr	r5, [r4, #16]
 80133fc:	f107 0114 	add.w	r1, r7, #20
 8013400:	f104 0914 	add.w	r9, r4, #20
 8013404:	f100 0e14 	add.w	lr, r0, #20
 8013408:	f107 0210 	add.w	r2, r7, #16
 801340c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013410:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013414:	46f2      	mov	sl, lr
 8013416:	2700      	movs	r7, #0
 8013418:	f859 3b04 	ldr.w	r3, [r9], #4
 801341c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013420:	fa1f f883 	uxth.w	r8, r3
 8013424:	fa17 f78b 	uxtah	r7, r7, fp
 8013428:	0c1b      	lsrs	r3, r3, #16
 801342a:	eba7 0808 	sub.w	r8, r7, r8
 801342e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013432:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013436:	fa1f f888 	uxth.w	r8, r8
 801343a:	141f      	asrs	r7, r3, #16
 801343c:	454d      	cmp	r5, r9
 801343e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013442:	f84a 3b04 	str.w	r3, [sl], #4
 8013446:	d8e7      	bhi.n	8013418 <__mdiff+0x7c>
 8013448:	1b2b      	subs	r3, r5, r4
 801344a:	3b15      	subs	r3, #21
 801344c:	f023 0303 	bic.w	r3, r3, #3
 8013450:	3304      	adds	r3, #4
 8013452:	3415      	adds	r4, #21
 8013454:	42a5      	cmp	r5, r4
 8013456:	bf38      	it	cc
 8013458:	2304      	movcc	r3, #4
 801345a:	4419      	add	r1, r3
 801345c:	4473      	add	r3, lr
 801345e:	469e      	mov	lr, r3
 8013460:	460d      	mov	r5, r1
 8013462:	4565      	cmp	r5, ip
 8013464:	d30e      	bcc.n	8013484 <__mdiff+0xe8>
 8013466:	f10c 0203 	add.w	r2, ip, #3
 801346a:	1a52      	subs	r2, r2, r1
 801346c:	f022 0203 	bic.w	r2, r2, #3
 8013470:	3903      	subs	r1, #3
 8013472:	458c      	cmp	ip, r1
 8013474:	bf38      	it	cc
 8013476:	2200      	movcc	r2, #0
 8013478:	441a      	add	r2, r3
 801347a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801347e:	b17b      	cbz	r3, 80134a0 <__mdiff+0x104>
 8013480:	6106      	str	r6, [r0, #16]
 8013482:	e7a5      	b.n	80133d0 <__mdiff+0x34>
 8013484:	f855 8b04 	ldr.w	r8, [r5], #4
 8013488:	fa17 f488 	uxtah	r4, r7, r8
 801348c:	1422      	asrs	r2, r4, #16
 801348e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013492:	b2a4      	uxth	r4, r4
 8013494:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013498:	f84e 4b04 	str.w	r4, [lr], #4
 801349c:	1417      	asrs	r7, r2, #16
 801349e:	e7e0      	b.n	8013462 <__mdiff+0xc6>
 80134a0:	3e01      	subs	r6, #1
 80134a2:	e7ea      	b.n	801347a <__mdiff+0xde>
 80134a4:	0801474f 	.word	0x0801474f
 80134a8:	080147c0 	.word	0x080147c0

080134ac <__d2b>:
 80134ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80134b0:	4689      	mov	r9, r1
 80134b2:	2101      	movs	r1, #1
 80134b4:	ec57 6b10 	vmov	r6, r7, d0
 80134b8:	4690      	mov	r8, r2
 80134ba:	f7ff fcd5 	bl	8012e68 <_Balloc>
 80134be:	4604      	mov	r4, r0
 80134c0:	b930      	cbnz	r0, 80134d0 <__d2b+0x24>
 80134c2:	4602      	mov	r2, r0
 80134c4:	4b25      	ldr	r3, [pc, #148]	; (801355c <__d2b+0xb0>)
 80134c6:	4826      	ldr	r0, [pc, #152]	; (8013560 <__d2b+0xb4>)
 80134c8:	f240 310a 	movw	r1, #778	; 0x30a
 80134cc:	f000 fac4 	bl	8013a58 <__assert_func>
 80134d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80134d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80134d8:	bb35      	cbnz	r5, 8013528 <__d2b+0x7c>
 80134da:	2e00      	cmp	r6, #0
 80134dc:	9301      	str	r3, [sp, #4]
 80134de:	d028      	beq.n	8013532 <__d2b+0x86>
 80134e0:	4668      	mov	r0, sp
 80134e2:	9600      	str	r6, [sp, #0]
 80134e4:	f7ff fd8c 	bl	8013000 <__lo0bits>
 80134e8:	9900      	ldr	r1, [sp, #0]
 80134ea:	b300      	cbz	r0, 801352e <__d2b+0x82>
 80134ec:	9a01      	ldr	r2, [sp, #4]
 80134ee:	f1c0 0320 	rsb	r3, r0, #32
 80134f2:	fa02 f303 	lsl.w	r3, r2, r3
 80134f6:	430b      	orrs	r3, r1
 80134f8:	40c2      	lsrs	r2, r0
 80134fa:	6163      	str	r3, [r4, #20]
 80134fc:	9201      	str	r2, [sp, #4]
 80134fe:	9b01      	ldr	r3, [sp, #4]
 8013500:	61a3      	str	r3, [r4, #24]
 8013502:	2b00      	cmp	r3, #0
 8013504:	bf14      	ite	ne
 8013506:	2202      	movne	r2, #2
 8013508:	2201      	moveq	r2, #1
 801350a:	6122      	str	r2, [r4, #16]
 801350c:	b1d5      	cbz	r5, 8013544 <__d2b+0x98>
 801350e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013512:	4405      	add	r5, r0
 8013514:	f8c9 5000 	str.w	r5, [r9]
 8013518:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801351c:	f8c8 0000 	str.w	r0, [r8]
 8013520:	4620      	mov	r0, r4
 8013522:	b003      	add	sp, #12
 8013524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801352c:	e7d5      	b.n	80134da <__d2b+0x2e>
 801352e:	6161      	str	r1, [r4, #20]
 8013530:	e7e5      	b.n	80134fe <__d2b+0x52>
 8013532:	a801      	add	r0, sp, #4
 8013534:	f7ff fd64 	bl	8013000 <__lo0bits>
 8013538:	9b01      	ldr	r3, [sp, #4]
 801353a:	6163      	str	r3, [r4, #20]
 801353c:	2201      	movs	r2, #1
 801353e:	6122      	str	r2, [r4, #16]
 8013540:	3020      	adds	r0, #32
 8013542:	e7e3      	b.n	801350c <__d2b+0x60>
 8013544:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013548:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801354c:	f8c9 0000 	str.w	r0, [r9]
 8013550:	6918      	ldr	r0, [r3, #16]
 8013552:	f7ff fd35 	bl	8012fc0 <__hi0bits>
 8013556:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801355a:	e7df      	b.n	801351c <__d2b+0x70>
 801355c:	0801474f 	.word	0x0801474f
 8013560:	080147c0 	.word	0x080147c0

08013564 <_calloc_r>:
 8013564:	b513      	push	{r0, r1, r4, lr}
 8013566:	434a      	muls	r2, r1
 8013568:	4611      	mov	r1, r2
 801356a:	9201      	str	r2, [sp, #4]
 801356c:	f000 f85a 	bl	8013624 <_malloc_r>
 8013570:	4604      	mov	r4, r0
 8013572:	b118      	cbz	r0, 801357c <_calloc_r+0x18>
 8013574:	9a01      	ldr	r2, [sp, #4]
 8013576:	2100      	movs	r1, #0
 8013578:	f7fd fe94 	bl	80112a4 <memset>
 801357c:	4620      	mov	r0, r4
 801357e:	b002      	add	sp, #8
 8013580:	bd10      	pop	{r4, pc}
	...

08013584 <_free_r>:
 8013584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013586:	2900      	cmp	r1, #0
 8013588:	d048      	beq.n	801361c <_free_r+0x98>
 801358a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801358e:	9001      	str	r0, [sp, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	f1a1 0404 	sub.w	r4, r1, #4
 8013596:	bfb8      	it	lt
 8013598:	18e4      	addlt	r4, r4, r3
 801359a:	f000 fae3 	bl	8013b64 <__malloc_lock>
 801359e:	4a20      	ldr	r2, [pc, #128]	; (8013620 <_free_r+0x9c>)
 80135a0:	9801      	ldr	r0, [sp, #4]
 80135a2:	6813      	ldr	r3, [r2, #0]
 80135a4:	4615      	mov	r5, r2
 80135a6:	b933      	cbnz	r3, 80135b6 <_free_r+0x32>
 80135a8:	6063      	str	r3, [r4, #4]
 80135aa:	6014      	str	r4, [r2, #0]
 80135ac:	b003      	add	sp, #12
 80135ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135b2:	f000 badd 	b.w	8013b70 <__malloc_unlock>
 80135b6:	42a3      	cmp	r3, r4
 80135b8:	d90b      	bls.n	80135d2 <_free_r+0x4e>
 80135ba:	6821      	ldr	r1, [r4, #0]
 80135bc:	1862      	adds	r2, r4, r1
 80135be:	4293      	cmp	r3, r2
 80135c0:	bf04      	itt	eq
 80135c2:	681a      	ldreq	r2, [r3, #0]
 80135c4:	685b      	ldreq	r3, [r3, #4]
 80135c6:	6063      	str	r3, [r4, #4]
 80135c8:	bf04      	itt	eq
 80135ca:	1852      	addeq	r2, r2, r1
 80135cc:	6022      	streq	r2, [r4, #0]
 80135ce:	602c      	str	r4, [r5, #0]
 80135d0:	e7ec      	b.n	80135ac <_free_r+0x28>
 80135d2:	461a      	mov	r2, r3
 80135d4:	685b      	ldr	r3, [r3, #4]
 80135d6:	b10b      	cbz	r3, 80135dc <_free_r+0x58>
 80135d8:	42a3      	cmp	r3, r4
 80135da:	d9fa      	bls.n	80135d2 <_free_r+0x4e>
 80135dc:	6811      	ldr	r1, [r2, #0]
 80135de:	1855      	adds	r5, r2, r1
 80135e0:	42a5      	cmp	r5, r4
 80135e2:	d10b      	bne.n	80135fc <_free_r+0x78>
 80135e4:	6824      	ldr	r4, [r4, #0]
 80135e6:	4421      	add	r1, r4
 80135e8:	1854      	adds	r4, r2, r1
 80135ea:	42a3      	cmp	r3, r4
 80135ec:	6011      	str	r1, [r2, #0]
 80135ee:	d1dd      	bne.n	80135ac <_free_r+0x28>
 80135f0:	681c      	ldr	r4, [r3, #0]
 80135f2:	685b      	ldr	r3, [r3, #4]
 80135f4:	6053      	str	r3, [r2, #4]
 80135f6:	4421      	add	r1, r4
 80135f8:	6011      	str	r1, [r2, #0]
 80135fa:	e7d7      	b.n	80135ac <_free_r+0x28>
 80135fc:	d902      	bls.n	8013604 <_free_r+0x80>
 80135fe:	230c      	movs	r3, #12
 8013600:	6003      	str	r3, [r0, #0]
 8013602:	e7d3      	b.n	80135ac <_free_r+0x28>
 8013604:	6825      	ldr	r5, [r4, #0]
 8013606:	1961      	adds	r1, r4, r5
 8013608:	428b      	cmp	r3, r1
 801360a:	bf04      	itt	eq
 801360c:	6819      	ldreq	r1, [r3, #0]
 801360e:	685b      	ldreq	r3, [r3, #4]
 8013610:	6063      	str	r3, [r4, #4]
 8013612:	bf04      	itt	eq
 8013614:	1949      	addeq	r1, r1, r5
 8013616:	6021      	streq	r1, [r4, #0]
 8013618:	6054      	str	r4, [r2, #4]
 801361a:	e7c7      	b.n	80135ac <_free_r+0x28>
 801361c:	b003      	add	sp, #12
 801361e:	bd30      	pop	{r4, r5, pc}
 8013620:	24000258 	.word	0x24000258

08013624 <_malloc_r>:
 8013624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013626:	1ccd      	adds	r5, r1, #3
 8013628:	f025 0503 	bic.w	r5, r5, #3
 801362c:	3508      	adds	r5, #8
 801362e:	2d0c      	cmp	r5, #12
 8013630:	bf38      	it	cc
 8013632:	250c      	movcc	r5, #12
 8013634:	2d00      	cmp	r5, #0
 8013636:	4606      	mov	r6, r0
 8013638:	db01      	blt.n	801363e <_malloc_r+0x1a>
 801363a:	42a9      	cmp	r1, r5
 801363c:	d903      	bls.n	8013646 <_malloc_r+0x22>
 801363e:	230c      	movs	r3, #12
 8013640:	6033      	str	r3, [r6, #0]
 8013642:	2000      	movs	r0, #0
 8013644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013646:	f000 fa8d 	bl	8013b64 <__malloc_lock>
 801364a:	4921      	ldr	r1, [pc, #132]	; (80136d0 <_malloc_r+0xac>)
 801364c:	680a      	ldr	r2, [r1, #0]
 801364e:	4614      	mov	r4, r2
 8013650:	b99c      	cbnz	r4, 801367a <_malloc_r+0x56>
 8013652:	4f20      	ldr	r7, [pc, #128]	; (80136d4 <_malloc_r+0xb0>)
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	b923      	cbnz	r3, 8013662 <_malloc_r+0x3e>
 8013658:	4621      	mov	r1, r4
 801365a:	4630      	mov	r0, r6
 801365c:	f000 f996 	bl	801398c <_sbrk_r>
 8013660:	6038      	str	r0, [r7, #0]
 8013662:	4629      	mov	r1, r5
 8013664:	4630      	mov	r0, r6
 8013666:	f000 f991 	bl	801398c <_sbrk_r>
 801366a:	1c43      	adds	r3, r0, #1
 801366c:	d123      	bne.n	80136b6 <_malloc_r+0x92>
 801366e:	230c      	movs	r3, #12
 8013670:	6033      	str	r3, [r6, #0]
 8013672:	4630      	mov	r0, r6
 8013674:	f000 fa7c 	bl	8013b70 <__malloc_unlock>
 8013678:	e7e3      	b.n	8013642 <_malloc_r+0x1e>
 801367a:	6823      	ldr	r3, [r4, #0]
 801367c:	1b5b      	subs	r3, r3, r5
 801367e:	d417      	bmi.n	80136b0 <_malloc_r+0x8c>
 8013680:	2b0b      	cmp	r3, #11
 8013682:	d903      	bls.n	801368c <_malloc_r+0x68>
 8013684:	6023      	str	r3, [r4, #0]
 8013686:	441c      	add	r4, r3
 8013688:	6025      	str	r5, [r4, #0]
 801368a:	e004      	b.n	8013696 <_malloc_r+0x72>
 801368c:	6863      	ldr	r3, [r4, #4]
 801368e:	42a2      	cmp	r2, r4
 8013690:	bf0c      	ite	eq
 8013692:	600b      	streq	r3, [r1, #0]
 8013694:	6053      	strne	r3, [r2, #4]
 8013696:	4630      	mov	r0, r6
 8013698:	f000 fa6a 	bl	8013b70 <__malloc_unlock>
 801369c:	f104 000b 	add.w	r0, r4, #11
 80136a0:	1d23      	adds	r3, r4, #4
 80136a2:	f020 0007 	bic.w	r0, r0, #7
 80136a6:	1ac2      	subs	r2, r0, r3
 80136a8:	d0cc      	beq.n	8013644 <_malloc_r+0x20>
 80136aa:	1a1b      	subs	r3, r3, r0
 80136ac:	50a3      	str	r3, [r4, r2]
 80136ae:	e7c9      	b.n	8013644 <_malloc_r+0x20>
 80136b0:	4622      	mov	r2, r4
 80136b2:	6864      	ldr	r4, [r4, #4]
 80136b4:	e7cc      	b.n	8013650 <_malloc_r+0x2c>
 80136b6:	1cc4      	adds	r4, r0, #3
 80136b8:	f024 0403 	bic.w	r4, r4, #3
 80136bc:	42a0      	cmp	r0, r4
 80136be:	d0e3      	beq.n	8013688 <_malloc_r+0x64>
 80136c0:	1a21      	subs	r1, r4, r0
 80136c2:	4630      	mov	r0, r6
 80136c4:	f000 f962 	bl	801398c <_sbrk_r>
 80136c8:	3001      	adds	r0, #1
 80136ca:	d1dd      	bne.n	8013688 <_malloc_r+0x64>
 80136cc:	e7cf      	b.n	801366e <_malloc_r+0x4a>
 80136ce:	bf00      	nop
 80136d0:	24000258 	.word	0x24000258
 80136d4:	2400025c 	.word	0x2400025c

080136d8 <__sfputc_r>:
 80136d8:	6893      	ldr	r3, [r2, #8]
 80136da:	3b01      	subs	r3, #1
 80136dc:	2b00      	cmp	r3, #0
 80136de:	b410      	push	{r4}
 80136e0:	6093      	str	r3, [r2, #8]
 80136e2:	da08      	bge.n	80136f6 <__sfputc_r+0x1e>
 80136e4:	6994      	ldr	r4, [r2, #24]
 80136e6:	42a3      	cmp	r3, r4
 80136e8:	db01      	blt.n	80136ee <__sfputc_r+0x16>
 80136ea:	290a      	cmp	r1, #10
 80136ec:	d103      	bne.n	80136f6 <__sfputc_r+0x1e>
 80136ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136f2:	f7fe bab1 	b.w	8011c58 <__swbuf_r>
 80136f6:	6813      	ldr	r3, [r2, #0]
 80136f8:	1c58      	adds	r0, r3, #1
 80136fa:	6010      	str	r0, [r2, #0]
 80136fc:	7019      	strb	r1, [r3, #0]
 80136fe:	4608      	mov	r0, r1
 8013700:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013704:	4770      	bx	lr

08013706 <__sfputs_r>:
 8013706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013708:	4606      	mov	r6, r0
 801370a:	460f      	mov	r7, r1
 801370c:	4614      	mov	r4, r2
 801370e:	18d5      	adds	r5, r2, r3
 8013710:	42ac      	cmp	r4, r5
 8013712:	d101      	bne.n	8013718 <__sfputs_r+0x12>
 8013714:	2000      	movs	r0, #0
 8013716:	e007      	b.n	8013728 <__sfputs_r+0x22>
 8013718:	f814 1b01 	ldrb.w	r1, [r4], #1
 801371c:	463a      	mov	r2, r7
 801371e:	4630      	mov	r0, r6
 8013720:	f7ff ffda 	bl	80136d8 <__sfputc_r>
 8013724:	1c43      	adds	r3, r0, #1
 8013726:	d1f3      	bne.n	8013710 <__sfputs_r+0xa>
 8013728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801372c <_vfiprintf_r>:
 801372c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013730:	460d      	mov	r5, r1
 8013732:	b09d      	sub	sp, #116	; 0x74
 8013734:	4614      	mov	r4, r2
 8013736:	4698      	mov	r8, r3
 8013738:	4606      	mov	r6, r0
 801373a:	b118      	cbz	r0, 8013744 <_vfiprintf_r+0x18>
 801373c:	6983      	ldr	r3, [r0, #24]
 801373e:	b90b      	cbnz	r3, 8013744 <_vfiprintf_r+0x18>
 8013740:	f7ff fa72 	bl	8012c28 <__sinit>
 8013744:	4b89      	ldr	r3, [pc, #548]	; (801396c <_vfiprintf_r+0x240>)
 8013746:	429d      	cmp	r5, r3
 8013748:	d11b      	bne.n	8013782 <_vfiprintf_r+0x56>
 801374a:	6875      	ldr	r5, [r6, #4]
 801374c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801374e:	07d9      	lsls	r1, r3, #31
 8013750:	d405      	bmi.n	801375e <_vfiprintf_r+0x32>
 8013752:	89ab      	ldrh	r3, [r5, #12]
 8013754:	059a      	lsls	r2, r3, #22
 8013756:	d402      	bmi.n	801375e <_vfiprintf_r+0x32>
 8013758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801375a:	f7ff fb08 	bl	8012d6e <__retarget_lock_acquire_recursive>
 801375e:	89ab      	ldrh	r3, [r5, #12]
 8013760:	071b      	lsls	r3, r3, #28
 8013762:	d501      	bpl.n	8013768 <_vfiprintf_r+0x3c>
 8013764:	692b      	ldr	r3, [r5, #16]
 8013766:	b9eb      	cbnz	r3, 80137a4 <_vfiprintf_r+0x78>
 8013768:	4629      	mov	r1, r5
 801376a:	4630      	mov	r0, r6
 801376c:	f7fe fac6 	bl	8011cfc <__swsetup_r>
 8013770:	b1c0      	cbz	r0, 80137a4 <_vfiprintf_r+0x78>
 8013772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013774:	07dc      	lsls	r4, r3, #31
 8013776:	d50e      	bpl.n	8013796 <_vfiprintf_r+0x6a>
 8013778:	f04f 30ff 	mov.w	r0, #4294967295
 801377c:	b01d      	add	sp, #116	; 0x74
 801377e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013782:	4b7b      	ldr	r3, [pc, #492]	; (8013970 <_vfiprintf_r+0x244>)
 8013784:	429d      	cmp	r5, r3
 8013786:	d101      	bne.n	801378c <_vfiprintf_r+0x60>
 8013788:	68b5      	ldr	r5, [r6, #8]
 801378a:	e7df      	b.n	801374c <_vfiprintf_r+0x20>
 801378c:	4b79      	ldr	r3, [pc, #484]	; (8013974 <_vfiprintf_r+0x248>)
 801378e:	429d      	cmp	r5, r3
 8013790:	bf08      	it	eq
 8013792:	68f5      	ldreq	r5, [r6, #12]
 8013794:	e7da      	b.n	801374c <_vfiprintf_r+0x20>
 8013796:	89ab      	ldrh	r3, [r5, #12]
 8013798:	0598      	lsls	r0, r3, #22
 801379a:	d4ed      	bmi.n	8013778 <_vfiprintf_r+0x4c>
 801379c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801379e:	f7ff fae7 	bl	8012d70 <__retarget_lock_release_recursive>
 80137a2:	e7e9      	b.n	8013778 <_vfiprintf_r+0x4c>
 80137a4:	2300      	movs	r3, #0
 80137a6:	9309      	str	r3, [sp, #36]	; 0x24
 80137a8:	2320      	movs	r3, #32
 80137aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80137ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80137b2:	2330      	movs	r3, #48	; 0x30
 80137b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013978 <_vfiprintf_r+0x24c>
 80137b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80137bc:	f04f 0901 	mov.w	r9, #1
 80137c0:	4623      	mov	r3, r4
 80137c2:	469a      	mov	sl, r3
 80137c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137c8:	b10a      	cbz	r2, 80137ce <_vfiprintf_r+0xa2>
 80137ca:	2a25      	cmp	r2, #37	; 0x25
 80137cc:	d1f9      	bne.n	80137c2 <_vfiprintf_r+0x96>
 80137ce:	ebba 0b04 	subs.w	fp, sl, r4
 80137d2:	d00b      	beq.n	80137ec <_vfiprintf_r+0xc0>
 80137d4:	465b      	mov	r3, fp
 80137d6:	4622      	mov	r2, r4
 80137d8:	4629      	mov	r1, r5
 80137da:	4630      	mov	r0, r6
 80137dc:	f7ff ff93 	bl	8013706 <__sfputs_r>
 80137e0:	3001      	adds	r0, #1
 80137e2:	f000 80aa 	beq.w	801393a <_vfiprintf_r+0x20e>
 80137e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137e8:	445a      	add	r2, fp
 80137ea:	9209      	str	r2, [sp, #36]	; 0x24
 80137ec:	f89a 3000 	ldrb.w	r3, [sl]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	f000 80a2 	beq.w	801393a <_vfiprintf_r+0x20e>
 80137f6:	2300      	movs	r3, #0
 80137f8:	f04f 32ff 	mov.w	r2, #4294967295
 80137fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013800:	f10a 0a01 	add.w	sl, sl, #1
 8013804:	9304      	str	r3, [sp, #16]
 8013806:	9307      	str	r3, [sp, #28]
 8013808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801380c:	931a      	str	r3, [sp, #104]	; 0x68
 801380e:	4654      	mov	r4, sl
 8013810:	2205      	movs	r2, #5
 8013812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013816:	4858      	ldr	r0, [pc, #352]	; (8013978 <_vfiprintf_r+0x24c>)
 8013818:	f7ec fd6a 	bl	80002f0 <memchr>
 801381c:	9a04      	ldr	r2, [sp, #16]
 801381e:	b9d8      	cbnz	r0, 8013858 <_vfiprintf_r+0x12c>
 8013820:	06d1      	lsls	r1, r2, #27
 8013822:	bf44      	itt	mi
 8013824:	2320      	movmi	r3, #32
 8013826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801382a:	0713      	lsls	r3, r2, #28
 801382c:	bf44      	itt	mi
 801382e:	232b      	movmi	r3, #43	; 0x2b
 8013830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013834:	f89a 3000 	ldrb.w	r3, [sl]
 8013838:	2b2a      	cmp	r3, #42	; 0x2a
 801383a:	d015      	beq.n	8013868 <_vfiprintf_r+0x13c>
 801383c:	9a07      	ldr	r2, [sp, #28]
 801383e:	4654      	mov	r4, sl
 8013840:	2000      	movs	r0, #0
 8013842:	f04f 0c0a 	mov.w	ip, #10
 8013846:	4621      	mov	r1, r4
 8013848:	f811 3b01 	ldrb.w	r3, [r1], #1
 801384c:	3b30      	subs	r3, #48	; 0x30
 801384e:	2b09      	cmp	r3, #9
 8013850:	d94e      	bls.n	80138f0 <_vfiprintf_r+0x1c4>
 8013852:	b1b0      	cbz	r0, 8013882 <_vfiprintf_r+0x156>
 8013854:	9207      	str	r2, [sp, #28]
 8013856:	e014      	b.n	8013882 <_vfiprintf_r+0x156>
 8013858:	eba0 0308 	sub.w	r3, r0, r8
 801385c:	fa09 f303 	lsl.w	r3, r9, r3
 8013860:	4313      	orrs	r3, r2
 8013862:	9304      	str	r3, [sp, #16]
 8013864:	46a2      	mov	sl, r4
 8013866:	e7d2      	b.n	801380e <_vfiprintf_r+0xe2>
 8013868:	9b03      	ldr	r3, [sp, #12]
 801386a:	1d19      	adds	r1, r3, #4
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	9103      	str	r1, [sp, #12]
 8013870:	2b00      	cmp	r3, #0
 8013872:	bfbb      	ittet	lt
 8013874:	425b      	neglt	r3, r3
 8013876:	f042 0202 	orrlt.w	r2, r2, #2
 801387a:	9307      	strge	r3, [sp, #28]
 801387c:	9307      	strlt	r3, [sp, #28]
 801387e:	bfb8      	it	lt
 8013880:	9204      	strlt	r2, [sp, #16]
 8013882:	7823      	ldrb	r3, [r4, #0]
 8013884:	2b2e      	cmp	r3, #46	; 0x2e
 8013886:	d10c      	bne.n	80138a2 <_vfiprintf_r+0x176>
 8013888:	7863      	ldrb	r3, [r4, #1]
 801388a:	2b2a      	cmp	r3, #42	; 0x2a
 801388c:	d135      	bne.n	80138fa <_vfiprintf_r+0x1ce>
 801388e:	9b03      	ldr	r3, [sp, #12]
 8013890:	1d1a      	adds	r2, r3, #4
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	9203      	str	r2, [sp, #12]
 8013896:	2b00      	cmp	r3, #0
 8013898:	bfb8      	it	lt
 801389a:	f04f 33ff 	movlt.w	r3, #4294967295
 801389e:	3402      	adds	r4, #2
 80138a0:	9305      	str	r3, [sp, #20]
 80138a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013988 <_vfiprintf_r+0x25c>
 80138a6:	7821      	ldrb	r1, [r4, #0]
 80138a8:	2203      	movs	r2, #3
 80138aa:	4650      	mov	r0, sl
 80138ac:	f7ec fd20 	bl	80002f0 <memchr>
 80138b0:	b140      	cbz	r0, 80138c4 <_vfiprintf_r+0x198>
 80138b2:	2340      	movs	r3, #64	; 0x40
 80138b4:	eba0 000a 	sub.w	r0, r0, sl
 80138b8:	fa03 f000 	lsl.w	r0, r3, r0
 80138bc:	9b04      	ldr	r3, [sp, #16]
 80138be:	4303      	orrs	r3, r0
 80138c0:	3401      	adds	r4, #1
 80138c2:	9304      	str	r3, [sp, #16]
 80138c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138c8:	482c      	ldr	r0, [pc, #176]	; (801397c <_vfiprintf_r+0x250>)
 80138ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80138ce:	2206      	movs	r2, #6
 80138d0:	f7ec fd0e 	bl	80002f0 <memchr>
 80138d4:	2800      	cmp	r0, #0
 80138d6:	d03f      	beq.n	8013958 <_vfiprintf_r+0x22c>
 80138d8:	4b29      	ldr	r3, [pc, #164]	; (8013980 <_vfiprintf_r+0x254>)
 80138da:	bb1b      	cbnz	r3, 8013924 <_vfiprintf_r+0x1f8>
 80138dc:	9b03      	ldr	r3, [sp, #12]
 80138de:	3307      	adds	r3, #7
 80138e0:	f023 0307 	bic.w	r3, r3, #7
 80138e4:	3308      	adds	r3, #8
 80138e6:	9303      	str	r3, [sp, #12]
 80138e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138ea:	443b      	add	r3, r7
 80138ec:	9309      	str	r3, [sp, #36]	; 0x24
 80138ee:	e767      	b.n	80137c0 <_vfiprintf_r+0x94>
 80138f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80138f4:	460c      	mov	r4, r1
 80138f6:	2001      	movs	r0, #1
 80138f8:	e7a5      	b.n	8013846 <_vfiprintf_r+0x11a>
 80138fa:	2300      	movs	r3, #0
 80138fc:	3401      	adds	r4, #1
 80138fe:	9305      	str	r3, [sp, #20]
 8013900:	4619      	mov	r1, r3
 8013902:	f04f 0c0a 	mov.w	ip, #10
 8013906:	4620      	mov	r0, r4
 8013908:	f810 2b01 	ldrb.w	r2, [r0], #1
 801390c:	3a30      	subs	r2, #48	; 0x30
 801390e:	2a09      	cmp	r2, #9
 8013910:	d903      	bls.n	801391a <_vfiprintf_r+0x1ee>
 8013912:	2b00      	cmp	r3, #0
 8013914:	d0c5      	beq.n	80138a2 <_vfiprintf_r+0x176>
 8013916:	9105      	str	r1, [sp, #20]
 8013918:	e7c3      	b.n	80138a2 <_vfiprintf_r+0x176>
 801391a:	fb0c 2101 	mla	r1, ip, r1, r2
 801391e:	4604      	mov	r4, r0
 8013920:	2301      	movs	r3, #1
 8013922:	e7f0      	b.n	8013906 <_vfiprintf_r+0x1da>
 8013924:	ab03      	add	r3, sp, #12
 8013926:	9300      	str	r3, [sp, #0]
 8013928:	462a      	mov	r2, r5
 801392a:	4b16      	ldr	r3, [pc, #88]	; (8013984 <_vfiprintf_r+0x258>)
 801392c:	a904      	add	r1, sp, #16
 801392e:	4630      	mov	r0, r6
 8013930:	f7fd fd52 	bl	80113d8 <_printf_float>
 8013934:	4607      	mov	r7, r0
 8013936:	1c78      	adds	r0, r7, #1
 8013938:	d1d6      	bne.n	80138e8 <_vfiprintf_r+0x1bc>
 801393a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801393c:	07d9      	lsls	r1, r3, #31
 801393e:	d405      	bmi.n	801394c <_vfiprintf_r+0x220>
 8013940:	89ab      	ldrh	r3, [r5, #12]
 8013942:	059a      	lsls	r2, r3, #22
 8013944:	d402      	bmi.n	801394c <_vfiprintf_r+0x220>
 8013946:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013948:	f7ff fa12 	bl	8012d70 <__retarget_lock_release_recursive>
 801394c:	89ab      	ldrh	r3, [r5, #12]
 801394e:	065b      	lsls	r3, r3, #25
 8013950:	f53f af12 	bmi.w	8013778 <_vfiprintf_r+0x4c>
 8013954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013956:	e711      	b.n	801377c <_vfiprintf_r+0x50>
 8013958:	ab03      	add	r3, sp, #12
 801395a:	9300      	str	r3, [sp, #0]
 801395c:	462a      	mov	r2, r5
 801395e:	4b09      	ldr	r3, [pc, #36]	; (8013984 <_vfiprintf_r+0x258>)
 8013960:	a904      	add	r1, sp, #16
 8013962:	4630      	mov	r0, r6
 8013964:	f7fd ffc4 	bl	80118f0 <_printf_i>
 8013968:	e7e4      	b.n	8013934 <_vfiprintf_r+0x208>
 801396a:	bf00      	nop
 801396c:	08014780 	.word	0x08014780
 8013970:	080147a0 	.word	0x080147a0
 8013974:	08014760 	.word	0x08014760
 8013978:	0801491c 	.word	0x0801491c
 801397c:	08014926 	.word	0x08014926
 8013980:	080113d9 	.word	0x080113d9
 8013984:	08013707 	.word	0x08013707
 8013988:	08014922 	.word	0x08014922

0801398c <_sbrk_r>:
 801398c:	b538      	push	{r3, r4, r5, lr}
 801398e:	4d06      	ldr	r5, [pc, #24]	; (80139a8 <_sbrk_r+0x1c>)
 8013990:	2300      	movs	r3, #0
 8013992:	4604      	mov	r4, r0
 8013994:	4608      	mov	r0, r1
 8013996:	602b      	str	r3, [r5, #0]
 8013998:	f7f0 fed6 	bl	8004748 <_sbrk>
 801399c:	1c43      	adds	r3, r0, #1
 801399e:	d102      	bne.n	80139a6 <_sbrk_r+0x1a>
 80139a0:	682b      	ldr	r3, [r5, #0]
 80139a2:	b103      	cbz	r3, 80139a6 <_sbrk_r+0x1a>
 80139a4:	6023      	str	r3, [r4, #0]
 80139a6:	bd38      	pop	{r3, r4, r5, pc}
 80139a8:	24000800 	.word	0x24000800

080139ac <__sread>:
 80139ac:	b510      	push	{r4, lr}
 80139ae:	460c      	mov	r4, r1
 80139b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139b4:	f000 f8e2 	bl	8013b7c <_read_r>
 80139b8:	2800      	cmp	r0, #0
 80139ba:	bfab      	itete	ge
 80139bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80139be:	89a3      	ldrhlt	r3, [r4, #12]
 80139c0:	181b      	addge	r3, r3, r0
 80139c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80139c6:	bfac      	ite	ge
 80139c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80139ca:	81a3      	strhlt	r3, [r4, #12]
 80139cc:	bd10      	pop	{r4, pc}

080139ce <__swrite>:
 80139ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139d2:	461f      	mov	r7, r3
 80139d4:	898b      	ldrh	r3, [r1, #12]
 80139d6:	05db      	lsls	r3, r3, #23
 80139d8:	4605      	mov	r5, r0
 80139da:	460c      	mov	r4, r1
 80139dc:	4616      	mov	r6, r2
 80139de:	d505      	bpl.n	80139ec <__swrite+0x1e>
 80139e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139e4:	2302      	movs	r3, #2
 80139e6:	2200      	movs	r2, #0
 80139e8:	f000 f898 	bl	8013b1c <_lseek_r>
 80139ec:	89a3      	ldrh	r3, [r4, #12]
 80139ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80139f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80139f6:	81a3      	strh	r3, [r4, #12]
 80139f8:	4632      	mov	r2, r6
 80139fa:	463b      	mov	r3, r7
 80139fc:	4628      	mov	r0, r5
 80139fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a02:	f000 b817 	b.w	8013a34 <_write_r>

08013a06 <__sseek>:
 8013a06:	b510      	push	{r4, lr}
 8013a08:	460c      	mov	r4, r1
 8013a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a0e:	f000 f885 	bl	8013b1c <_lseek_r>
 8013a12:	1c43      	adds	r3, r0, #1
 8013a14:	89a3      	ldrh	r3, [r4, #12]
 8013a16:	bf15      	itete	ne
 8013a18:	6560      	strne	r0, [r4, #84]	; 0x54
 8013a1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013a1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013a22:	81a3      	strheq	r3, [r4, #12]
 8013a24:	bf18      	it	ne
 8013a26:	81a3      	strhne	r3, [r4, #12]
 8013a28:	bd10      	pop	{r4, pc}

08013a2a <__sclose>:
 8013a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a2e:	f000 b831 	b.w	8013a94 <_close_r>
	...

08013a34 <_write_r>:
 8013a34:	b538      	push	{r3, r4, r5, lr}
 8013a36:	4d07      	ldr	r5, [pc, #28]	; (8013a54 <_write_r+0x20>)
 8013a38:	4604      	mov	r4, r0
 8013a3a:	4608      	mov	r0, r1
 8013a3c:	4611      	mov	r1, r2
 8013a3e:	2200      	movs	r2, #0
 8013a40:	602a      	str	r2, [r5, #0]
 8013a42:	461a      	mov	r2, r3
 8013a44:	f7ef f8c6 	bl	8002bd4 <_write>
 8013a48:	1c43      	adds	r3, r0, #1
 8013a4a:	d102      	bne.n	8013a52 <_write_r+0x1e>
 8013a4c:	682b      	ldr	r3, [r5, #0]
 8013a4e:	b103      	cbz	r3, 8013a52 <_write_r+0x1e>
 8013a50:	6023      	str	r3, [r4, #0]
 8013a52:	bd38      	pop	{r3, r4, r5, pc}
 8013a54:	24000800 	.word	0x24000800

08013a58 <__assert_func>:
 8013a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013a5a:	4614      	mov	r4, r2
 8013a5c:	461a      	mov	r2, r3
 8013a5e:	4b09      	ldr	r3, [pc, #36]	; (8013a84 <__assert_func+0x2c>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	4605      	mov	r5, r0
 8013a64:	68d8      	ldr	r0, [r3, #12]
 8013a66:	b14c      	cbz	r4, 8013a7c <__assert_func+0x24>
 8013a68:	4b07      	ldr	r3, [pc, #28]	; (8013a88 <__assert_func+0x30>)
 8013a6a:	9100      	str	r1, [sp, #0]
 8013a6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013a70:	4906      	ldr	r1, [pc, #24]	; (8013a8c <__assert_func+0x34>)
 8013a72:	462b      	mov	r3, r5
 8013a74:	f000 f81e 	bl	8013ab4 <fiprintf>
 8013a78:	f000 f89f 	bl	8013bba <abort>
 8013a7c:	4b04      	ldr	r3, [pc, #16]	; (8013a90 <__assert_func+0x38>)
 8013a7e:	461c      	mov	r4, r3
 8013a80:	e7f3      	b.n	8013a6a <__assert_func+0x12>
 8013a82:	bf00      	nop
 8013a84:	24000024 	.word	0x24000024
 8013a88:	0801492d 	.word	0x0801492d
 8013a8c:	0801493a 	.word	0x0801493a
 8013a90:	08014968 	.word	0x08014968

08013a94 <_close_r>:
 8013a94:	b538      	push	{r3, r4, r5, lr}
 8013a96:	4d06      	ldr	r5, [pc, #24]	; (8013ab0 <_close_r+0x1c>)
 8013a98:	2300      	movs	r3, #0
 8013a9a:	4604      	mov	r4, r0
 8013a9c:	4608      	mov	r0, r1
 8013a9e:	602b      	str	r3, [r5, #0]
 8013aa0:	f7f0 fe1d 	bl	80046de <_close>
 8013aa4:	1c43      	adds	r3, r0, #1
 8013aa6:	d102      	bne.n	8013aae <_close_r+0x1a>
 8013aa8:	682b      	ldr	r3, [r5, #0]
 8013aaa:	b103      	cbz	r3, 8013aae <_close_r+0x1a>
 8013aac:	6023      	str	r3, [r4, #0]
 8013aae:	bd38      	pop	{r3, r4, r5, pc}
 8013ab0:	24000800 	.word	0x24000800

08013ab4 <fiprintf>:
 8013ab4:	b40e      	push	{r1, r2, r3}
 8013ab6:	b503      	push	{r0, r1, lr}
 8013ab8:	4601      	mov	r1, r0
 8013aba:	ab03      	add	r3, sp, #12
 8013abc:	4805      	ldr	r0, [pc, #20]	; (8013ad4 <fiprintf+0x20>)
 8013abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ac2:	6800      	ldr	r0, [r0, #0]
 8013ac4:	9301      	str	r3, [sp, #4]
 8013ac6:	f7ff fe31 	bl	801372c <_vfiprintf_r>
 8013aca:	b002      	add	sp, #8
 8013acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ad0:	b003      	add	sp, #12
 8013ad2:	4770      	bx	lr
 8013ad4:	24000024 	.word	0x24000024

08013ad8 <_fstat_r>:
 8013ad8:	b538      	push	{r3, r4, r5, lr}
 8013ada:	4d07      	ldr	r5, [pc, #28]	; (8013af8 <_fstat_r+0x20>)
 8013adc:	2300      	movs	r3, #0
 8013ade:	4604      	mov	r4, r0
 8013ae0:	4608      	mov	r0, r1
 8013ae2:	4611      	mov	r1, r2
 8013ae4:	602b      	str	r3, [r5, #0]
 8013ae6:	f7f0 fe06 	bl	80046f6 <_fstat>
 8013aea:	1c43      	adds	r3, r0, #1
 8013aec:	d102      	bne.n	8013af4 <_fstat_r+0x1c>
 8013aee:	682b      	ldr	r3, [r5, #0]
 8013af0:	b103      	cbz	r3, 8013af4 <_fstat_r+0x1c>
 8013af2:	6023      	str	r3, [r4, #0]
 8013af4:	bd38      	pop	{r3, r4, r5, pc}
 8013af6:	bf00      	nop
 8013af8:	24000800 	.word	0x24000800

08013afc <_isatty_r>:
 8013afc:	b538      	push	{r3, r4, r5, lr}
 8013afe:	4d06      	ldr	r5, [pc, #24]	; (8013b18 <_isatty_r+0x1c>)
 8013b00:	2300      	movs	r3, #0
 8013b02:	4604      	mov	r4, r0
 8013b04:	4608      	mov	r0, r1
 8013b06:	602b      	str	r3, [r5, #0]
 8013b08:	f7f0 fe05 	bl	8004716 <_isatty>
 8013b0c:	1c43      	adds	r3, r0, #1
 8013b0e:	d102      	bne.n	8013b16 <_isatty_r+0x1a>
 8013b10:	682b      	ldr	r3, [r5, #0]
 8013b12:	b103      	cbz	r3, 8013b16 <_isatty_r+0x1a>
 8013b14:	6023      	str	r3, [r4, #0]
 8013b16:	bd38      	pop	{r3, r4, r5, pc}
 8013b18:	24000800 	.word	0x24000800

08013b1c <_lseek_r>:
 8013b1c:	b538      	push	{r3, r4, r5, lr}
 8013b1e:	4d07      	ldr	r5, [pc, #28]	; (8013b3c <_lseek_r+0x20>)
 8013b20:	4604      	mov	r4, r0
 8013b22:	4608      	mov	r0, r1
 8013b24:	4611      	mov	r1, r2
 8013b26:	2200      	movs	r2, #0
 8013b28:	602a      	str	r2, [r5, #0]
 8013b2a:	461a      	mov	r2, r3
 8013b2c:	f7f0 fdfe 	bl	800472c <_lseek>
 8013b30:	1c43      	adds	r3, r0, #1
 8013b32:	d102      	bne.n	8013b3a <_lseek_r+0x1e>
 8013b34:	682b      	ldr	r3, [r5, #0]
 8013b36:	b103      	cbz	r3, 8013b3a <_lseek_r+0x1e>
 8013b38:	6023      	str	r3, [r4, #0]
 8013b3a:	bd38      	pop	{r3, r4, r5, pc}
 8013b3c:	24000800 	.word	0x24000800

08013b40 <__ascii_mbtowc>:
 8013b40:	b082      	sub	sp, #8
 8013b42:	b901      	cbnz	r1, 8013b46 <__ascii_mbtowc+0x6>
 8013b44:	a901      	add	r1, sp, #4
 8013b46:	b142      	cbz	r2, 8013b5a <__ascii_mbtowc+0x1a>
 8013b48:	b14b      	cbz	r3, 8013b5e <__ascii_mbtowc+0x1e>
 8013b4a:	7813      	ldrb	r3, [r2, #0]
 8013b4c:	600b      	str	r3, [r1, #0]
 8013b4e:	7812      	ldrb	r2, [r2, #0]
 8013b50:	1e10      	subs	r0, r2, #0
 8013b52:	bf18      	it	ne
 8013b54:	2001      	movne	r0, #1
 8013b56:	b002      	add	sp, #8
 8013b58:	4770      	bx	lr
 8013b5a:	4610      	mov	r0, r2
 8013b5c:	e7fb      	b.n	8013b56 <__ascii_mbtowc+0x16>
 8013b5e:	f06f 0001 	mvn.w	r0, #1
 8013b62:	e7f8      	b.n	8013b56 <__ascii_mbtowc+0x16>

08013b64 <__malloc_lock>:
 8013b64:	4801      	ldr	r0, [pc, #4]	; (8013b6c <__malloc_lock+0x8>)
 8013b66:	f7ff b902 	b.w	8012d6e <__retarget_lock_acquire_recursive>
 8013b6a:	bf00      	nop
 8013b6c:	240007f8 	.word	0x240007f8

08013b70 <__malloc_unlock>:
 8013b70:	4801      	ldr	r0, [pc, #4]	; (8013b78 <__malloc_unlock+0x8>)
 8013b72:	f7ff b8fd 	b.w	8012d70 <__retarget_lock_release_recursive>
 8013b76:	bf00      	nop
 8013b78:	240007f8 	.word	0x240007f8

08013b7c <_read_r>:
 8013b7c:	b538      	push	{r3, r4, r5, lr}
 8013b7e:	4d07      	ldr	r5, [pc, #28]	; (8013b9c <_read_r+0x20>)
 8013b80:	4604      	mov	r4, r0
 8013b82:	4608      	mov	r0, r1
 8013b84:	4611      	mov	r1, r2
 8013b86:	2200      	movs	r2, #0
 8013b88:	602a      	str	r2, [r5, #0]
 8013b8a:	461a      	mov	r2, r3
 8013b8c:	f7f0 fd8a 	bl	80046a4 <_read>
 8013b90:	1c43      	adds	r3, r0, #1
 8013b92:	d102      	bne.n	8013b9a <_read_r+0x1e>
 8013b94:	682b      	ldr	r3, [r5, #0]
 8013b96:	b103      	cbz	r3, 8013b9a <_read_r+0x1e>
 8013b98:	6023      	str	r3, [r4, #0]
 8013b9a:	bd38      	pop	{r3, r4, r5, pc}
 8013b9c:	24000800 	.word	0x24000800

08013ba0 <__ascii_wctomb>:
 8013ba0:	b149      	cbz	r1, 8013bb6 <__ascii_wctomb+0x16>
 8013ba2:	2aff      	cmp	r2, #255	; 0xff
 8013ba4:	bf85      	ittet	hi
 8013ba6:	238a      	movhi	r3, #138	; 0x8a
 8013ba8:	6003      	strhi	r3, [r0, #0]
 8013baa:	700a      	strbls	r2, [r1, #0]
 8013bac:	f04f 30ff 	movhi.w	r0, #4294967295
 8013bb0:	bf98      	it	ls
 8013bb2:	2001      	movls	r0, #1
 8013bb4:	4770      	bx	lr
 8013bb6:	4608      	mov	r0, r1
 8013bb8:	4770      	bx	lr

08013bba <abort>:
 8013bba:	b508      	push	{r3, lr}
 8013bbc:	2006      	movs	r0, #6
 8013bbe:	f000 f82b 	bl	8013c18 <raise>
 8013bc2:	2001      	movs	r0, #1
 8013bc4:	f7f0 fd64 	bl	8004690 <_exit>

08013bc8 <_raise_r>:
 8013bc8:	291f      	cmp	r1, #31
 8013bca:	b538      	push	{r3, r4, r5, lr}
 8013bcc:	4604      	mov	r4, r0
 8013bce:	460d      	mov	r5, r1
 8013bd0:	d904      	bls.n	8013bdc <_raise_r+0x14>
 8013bd2:	2316      	movs	r3, #22
 8013bd4:	6003      	str	r3, [r0, #0]
 8013bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8013bda:	bd38      	pop	{r3, r4, r5, pc}
 8013bdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013bde:	b112      	cbz	r2, 8013be6 <_raise_r+0x1e>
 8013be0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013be4:	b94b      	cbnz	r3, 8013bfa <_raise_r+0x32>
 8013be6:	4620      	mov	r0, r4
 8013be8:	f000 f830 	bl	8013c4c <_getpid_r>
 8013bec:	462a      	mov	r2, r5
 8013bee:	4601      	mov	r1, r0
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bf6:	f000 b817 	b.w	8013c28 <_kill_r>
 8013bfa:	2b01      	cmp	r3, #1
 8013bfc:	d00a      	beq.n	8013c14 <_raise_r+0x4c>
 8013bfe:	1c59      	adds	r1, r3, #1
 8013c00:	d103      	bne.n	8013c0a <_raise_r+0x42>
 8013c02:	2316      	movs	r3, #22
 8013c04:	6003      	str	r3, [r0, #0]
 8013c06:	2001      	movs	r0, #1
 8013c08:	e7e7      	b.n	8013bda <_raise_r+0x12>
 8013c0a:	2400      	movs	r4, #0
 8013c0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013c10:	4628      	mov	r0, r5
 8013c12:	4798      	blx	r3
 8013c14:	2000      	movs	r0, #0
 8013c16:	e7e0      	b.n	8013bda <_raise_r+0x12>

08013c18 <raise>:
 8013c18:	4b02      	ldr	r3, [pc, #8]	; (8013c24 <raise+0xc>)
 8013c1a:	4601      	mov	r1, r0
 8013c1c:	6818      	ldr	r0, [r3, #0]
 8013c1e:	f7ff bfd3 	b.w	8013bc8 <_raise_r>
 8013c22:	bf00      	nop
 8013c24:	24000024 	.word	0x24000024

08013c28 <_kill_r>:
 8013c28:	b538      	push	{r3, r4, r5, lr}
 8013c2a:	4d07      	ldr	r5, [pc, #28]	; (8013c48 <_kill_r+0x20>)
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	4604      	mov	r4, r0
 8013c30:	4608      	mov	r0, r1
 8013c32:	4611      	mov	r1, r2
 8013c34:	602b      	str	r3, [r5, #0]
 8013c36:	f7f0 fd1b 	bl	8004670 <_kill>
 8013c3a:	1c43      	adds	r3, r0, #1
 8013c3c:	d102      	bne.n	8013c44 <_kill_r+0x1c>
 8013c3e:	682b      	ldr	r3, [r5, #0]
 8013c40:	b103      	cbz	r3, 8013c44 <_kill_r+0x1c>
 8013c42:	6023      	str	r3, [r4, #0]
 8013c44:	bd38      	pop	{r3, r4, r5, pc}
 8013c46:	bf00      	nop
 8013c48:	24000800 	.word	0x24000800

08013c4c <_getpid_r>:
 8013c4c:	f7f0 bd08 	b.w	8004660 <_getpid>

08013c50 <atan2>:
 8013c50:	f000 b862 	b.w	8013d18 <__ieee754_atan2>
 8013c54:	0000      	movs	r0, r0
	...

08013c58 <sqrt>:
 8013c58:	b508      	push	{r3, lr}
 8013c5a:	ed2d 8b04 	vpush	{d8-d9}
 8013c5e:	eeb0 8b40 	vmov.f64	d8, d0
 8013c62:	f000 f927 	bl	8013eb4 <__ieee754_sqrt>
 8013c66:	4b10      	ldr	r3, [pc, #64]	; (8013ca8 <sqrt+0x50>)
 8013c68:	f993 3000 	ldrsb.w	r3, [r3]
 8013c6c:	3301      	adds	r3, #1
 8013c6e:	d011      	beq.n	8013c94 <sqrt+0x3c>
 8013c70:	eeb4 8b48 	vcmp.f64	d8, d8
 8013c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c78:	d60c      	bvs.n	8013c94 <sqrt+0x3c>
 8013c7a:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8013ca0 <sqrt+0x48>
 8013c7e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8013c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c86:	d505      	bpl.n	8013c94 <sqrt+0x3c>
 8013c88:	f7fd fae2 	bl	8011250 <__errno>
 8013c8c:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8013c90:	2321      	movs	r3, #33	; 0x21
 8013c92:	6003      	str	r3, [r0, #0]
 8013c94:	ecbd 8b04 	vpop	{d8-d9}
 8013c98:	bd08      	pop	{r3, pc}
 8013c9a:	bf00      	nop
 8013c9c:	f3af 8000 	nop.w
	...
 8013ca8:	240001f4 	.word	0x240001f4

08013cac <asinf>:
 8013cac:	b508      	push	{r3, lr}
 8013cae:	ed2d 8b02 	vpush	{d8}
 8013cb2:	eeb0 8a40 	vmov.f32	s16, s0
 8013cb6:	f000 f901 	bl	8013ebc <__ieee754_asinf>
 8013cba:	4b13      	ldr	r3, [pc, #76]	; (8013d08 <asinf+0x5c>)
 8013cbc:	f993 3000 	ldrsb.w	r3, [r3]
 8013cc0:	3301      	adds	r3, #1
 8013cc2:	eef0 8a40 	vmov.f32	s17, s0
 8013cc6:	d01a      	beq.n	8013cfe <asinf+0x52>
 8013cc8:	eeb4 8a48 	vcmp.f32	s16, s16
 8013ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd0:	d615      	bvs.n	8013cfe <asinf+0x52>
 8013cd2:	eeb0 0a48 	vmov.f32	s0, s16
 8013cd6:	f000 fc53 	bl	8014580 <fabsf>
 8013cda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013cde:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ce6:	dd0a      	ble.n	8013cfe <asinf+0x52>
 8013ce8:	f7fd fab2 	bl	8011250 <__errno>
 8013cec:	ecbd 8b02 	vpop	{d8}
 8013cf0:	2321      	movs	r3, #33	; 0x21
 8013cf2:	6003      	str	r3, [r0, #0]
 8013cf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013cf8:	4804      	ldr	r0, [pc, #16]	; (8013d0c <asinf+0x60>)
 8013cfa:	f000 bc49 	b.w	8014590 <nanf>
 8013cfe:	eeb0 0a68 	vmov.f32	s0, s17
 8013d02:	ecbd 8b02 	vpop	{d8}
 8013d06:	bd08      	pop	{r3, pc}
 8013d08:	240001f4 	.word	0x240001f4
 8013d0c:	08014968 	.word	0x08014968

08013d10 <atan2f>:
 8013d10:	f000 b9ba 	b.w	8014088 <__ieee754_atan2f>
 8013d14:	0000      	movs	r0, r0
	...

08013d18 <__ieee754_atan2>:
 8013d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d1a:	ee11 6a10 	vmov	r6, s2
 8013d1e:	ee11 0a90 	vmov	r0, s3
 8013d22:	4273      	negs	r3, r6
 8013d24:	4f60      	ldr	r7, [pc, #384]	; (8013ea8 <__ieee754_atan2+0x190>)
 8013d26:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8013d2a:	4333      	orrs	r3, r6
 8013d2c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013d30:	42bb      	cmp	r3, r7
 8013d32:	ed8d 0b00 	vstr	d0, [sp]
 8013d36:	d80b      	bhi.n	8013d50 <__ieee754_atan2+0x38>
 8013d38:	e9dd c500 	ldrd	ip, r5, [sp]
 8013d3c:	f1cc 0100 	rsb	r1, ip, #0
 8013d40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013d44:	ea41 010c 	orr.w	r1, r1, ip
 8013d48:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8013d4c:	42b9      	cmp	r1, r7
 8013d4e:	d906      	bls.n	8013d5e <__ieee754_atan2+0x46>
 8013d50:	ed9d 7b00 	vldr	d7, [sp]
 8013d54:	ee37 7b01 	vadd.f64	d7, d7, d1
 8013d58:	ed8d 7b00 	vstr	d7, [sp]
 8013d5c:	e054      	b.n	8013e08 <__ieee754_atan2+0xf0>
 8013d5e:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8013d62:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8013d66:	4331      	orrs	r1, r6
 8013d68:	d104      	bne.n	8013d74 <__ieee754_atan2+0x5c>
 8013d6a:	b003      	add	sp, #12
 8013d6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013d70:	f000 ba2e 	b.w	80141d0 <atan>
 8013d74:	1784      	asrs	r4, r0, #30
 8013d76:	f004 0402 	and.w	r4, r4, #2
 8013d7a:	ea53 010c 	orrs.w	r1, r3, ip
 8013d7e:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8013d82:	d109      	bne.n	8013d98 <__ieee754_atan2+0x80>
 8013d84:	2c02      	cmp	r4, #2
 8013d86:	d069      	beq.n	8013e5c <__ieee754_atan2+0x144>
 8013d88:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8013e70 <__ieee754_atan2+0x158>
 8013d8c:	ed9d 6b00 	vldr	d6, [sp]
 8013d90:	2c03      	cmp	r4, #3
 8013d92:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8013d96:	e7df      	b.n	8013d58 <__ieee754_atan2+0x40>
 8013d98:	ea52 0106 	orrs.w	r1, r2, r6
 8013d9c:	d107      	bne.n	8013dae <__ieee754_atan2+0x96>
 8013d9e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8013e78 <__ieee754_atan2+0x160>
 8013da2:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8013e80 <__ieee754_atan2+0x168>
 8013da6:	2d00      	cmp	r5, #0
 8013da8:	fe26 7b07 	vselge.f64	d7, d6, d7
 8013dac:	e7d4      	b.n	8013d58 <__ieee754_atan2+0x40>
 8013dae:	42ba      	cmp	r2, r7
 8013db0:	d10f      	bne.n	8013dd2 <__ieee754_atan2+0xba>
 8013db2:	4293      	cmp	r3, r2
 8013db4:	f104 34ff 	add.w	r4, r4, #4294967295
 8013db8:	d107      	bne.n	8013dca <__ieee754_atan2+0xb2>
 8013dba:	2c02      	cmp	r4, #2
 8013dbc:	d851      	bhi.n	8013e62 <__ieee754_atan2+0x14a>
 8013dbe:	4b3b      	ldr	r3, [pc, #236]	; (8013eac <__ieee754_atan2+0x194>)
 8013dc0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013dc4:	ed94 7b00 	vldr	d7, [r4]
 8013dc8:	e7c6      	b.n	8013d58 <__ieee754_atan2+0x40>
 8013dca:	2c02      	cmp	r4, #2
 8013dcc:	d84c      	bhi.n	8013e68 <__ieee754_atan2+0x150>
 8013dce:	4b38      	ldr	r3, [pc, #224]	; (8013eb0 <__ieee754_atan2+0x198>)
 8013dd0:	e7f6      	b.n	8013dc0 <__ieee754_atan2+0xa8>
 8013dd2:	42bb      	cmp	r3, r7
 8013dd4:	d0e3      	beq.n	8013d9e <__ieee754_atan2+0x86>
 8013dd6:	1a9b      	subs	r3, r3, r2
 8013dd8:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8013ddc:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013de0:	da16      	bge.n	8013e10 <__ieee754_atan2+0xf8>
 8013de2:	2800      	cmp	r0, #0
 8013de4:	da01      	bge.n	8013dea <__ieee754_atan2+0xd2>
 8013de6:	323c      	adds	r2, #60	; 0x3c
 8013de8:	db17      	blt.n	8013e1a <__ieee754_atan2+0x102>
 8013dea:	ed9d 7b00 	vldr	d7, [sp]
 8013dee:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8013df2:	f000 fae7 	bl	80143c4 <fabs>
 8013df6:	f000 f9eb 	bl	80141d0 <atan>
 8013dfa:	ed8d 0b00 	vstr	d0, [sp]
 8013dfe:	2c01      	cmp	r4, #1
 8013e00:	d00e      	beq.n	8013e20 <__ieee754_atan2+0x108>
 8013e02:	2c02      	cmp	r4, #2
 8013e04:	d014      	beq.n	8013e30 <__ieee754_atan2+0x118>
 8013e06:	b9f4      	cbnz	r4, 8013e46 <__ieee754_atan2+0x12e>
 8013e08:	ed9d 0b00 	vldr	d0, [sp]
 8013e0c:	b003      	add	sp, #12
 8013e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e10:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8013e78 <__ieee754_atan2+0x160>
 8013e14:	ed8d 7b00 	vstr	d7, [sp]
 8013e18:	e7f1      	b.n	8013dfe <__ieee754_atan2+0xe6>
 8013e1a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8013e88 <__ieee754_atan2+0x170>
 8013e1e:	e7f9      	b.n	8013e14 <__ieee754_atan2+0xfc>
 8013e20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013e24:	9901      	ldr	r1, [sp, #4]
 8013e26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e2a:	e9cd 2300 	strd	r2, r3, [sp]
 8013e2e:	e7eb      	b.n	8013e08 <__ieee754_atan2+0xf0>
 8013e30:	ed9d 6b00 	vldr	d6, [sp]
 8013e34:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8013e90 <__ieee754_atan2+0x178>
 8013e38:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013e3c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8013e98 <__ieee754_atan2+0x180>
 8013e40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013e44:	e788      	b.n	8013d58 <__ieee754_atan2+0x40>
 8013e46:	ed9d 6b00 	vldr	d6, [sp]
 8013e4a:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8013e90 <__ieee754_atan2+0x178>
 8013e4e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013e52:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8013e98 <__ieee754_atan2+0x180>
 8013e56:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013e5a:	e77d      	b.n	8013d58 <__ieee754_atan2+0x40>
 8013e5c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013e98 <__ieee754_atan2+0x180>
 8013e60:	e77a      	b.n	8013d58 <__ieee754_atan2+0x40>
 8013e62:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8013ea0 <__ieee754_atan2+0x188>
 8013e66:	e777      	b.n	8013d58 <__ieee754_atan2+0x40>
 8013e68:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8013e88 <__ieee754_atan2+0x170>
 8013e6c:	e774      	b.n	8013d58 <__ieee754_atan2+0x40>
 8013e6e:	bf00      	nop
 8013e70:	54442d18 	.word	0x54442d18
 8013e74:	c00921fb 	.word	0xc00921fb
 8013e78:	54442d18 	.word	0x54442d18
 8013e7c:	3ff921fb 	.word	0x3ff921fb
 8013e80:	54442d18 	.word	0x54442d18
 8013e84:	bff921fb 	.word	0xbff921fb
	...
 8013e90:	33145c07 	.word	0x33145c07
 8013e94:	3ca1a626 	.word	0x3ca1a626
 8013e98:	54442d18 	.word	0x54442d18
 8013e9c:	400921fb 	.word	0x400921fb
 8013ea0:	54442d18 	.word	0x54442d18
 8013ea4:	3fe921fb 	.word	0x3fe921fb
 8013ea8:	7ff00000 	.word	0x7ff00000
 8013eac:	08014a78 	.word	0x08014a78
 8013eb0:	08014a90 	.word	0x08014a90

08013eb4 <__ieee754_sqrt>:
 8013eb4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8013eb8:	4770      	bx	lr
	...

08013ebc <__ieee754_asinf>:
 8013ebc:	b538      	push	{r3, r4, r5, lr}
 8013ebe:	ee10 5a10 	vmov	r5, s0
 8013ec2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013ec6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013eca:	ed2d 8b04 	vpush	{d8-d9}
 8013ece:	d10c      	bne.n	8013eea <__ieee754_asinf+0x2e>
 8013ed0:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8014048 <__ieee754_asinf+0x18c>
 8013ed4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801404c <__ieee754_asinf+0x190>
 8013ed8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013edc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8013ee4:	ecbd 8b04 	vpop	{d8-d9}
 8013ee8:	bd38      	pop	{r3, r4, r5, pc}
 8013eea:	dd04      	ble.n	8013ef6 <__ieee754_asinf+0x3a>
 8013eec:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013ef0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013ef4:	e7f6      	b.n	8013ee4 <__ieee754_asinf+0x28>
 8013ef6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013efa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013efe:	da0b      	bge.n	8013f18 <__ieee754_asinf+0x5c>
 8013f00:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8013f04:	da52      	bge.n	8013fac <__ieee754_asinf+0xf0>
 8013f06:	eddf 7a52 	vldr	s15, [pc, #328]	; 8014050 <__ieee754_asinf+0x194>
 8013f0a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013f0e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f16:	dce5      	bgt.n	8013ee4 <__ieee754_asinf+0x28>
 8013f18:	f000 fb32 	bl	8014580 <fabsf>
 8013f1c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8013f20:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8013f24:	ee20 8a08 	vmul.f32	s16, s0, s16
 8013f28:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8014054 <__ieee754_asinf+0x198>
 8013f2c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8014058 <__ieee754_asinf+0x19c>
 8013f30:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801405c <__ieee754_asinf+0x1a0>
 8013f34:	eea8 7a27 	vfma.f32	s14, s16, s15
 8013f38:	eddf 7a49 	vldr	s15, [pc, #292]	; 8014060 <__ieee754_asinf+0x1a4>
 8013f3c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013f40:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8014064 <__ieee754_asinf+0x1a8>
 8013f44:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013f48:	eddf 7a47 	vldr	s15, [pc, #284]	; 8014068 <__ieee754_asinf+0x1ac>
 8013f4c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013f50:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801406c <__ieee754_asinf+0x1b0>
 8013f54:	eea7 9a88 	vfma.f32	s18, s15, s16
 8013f58:	eddf 7a45 	vldr	s15, [pc, #276]	; 8014070 <__ieee754_asinf+0x1b4>
 8013f5c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8013f60:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8014074 <__ieee754_asinf+0x1b8>
 8013f64:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013f68:	eddf 7a43 	vldr	s15, [pc, #268]	; 8014078 <__ieee754_asinf+0x1bc>
 8013f6c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013f70:	eeb0 0a48 	vmov.f32	s0, s16
 8013f74:	eee7 8a88 	vfma.f32	s17, s15, s16
 8013f78:	f000 f924 	bl	80141c4 <__ieee754_sqrtf>
 8013f7c:	4b3f      	ldr	r3, [pc, #252]	; (801407c <__ieee754_asinf+0x1c0>)
 8013f7e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8013f82:	429c      	cmp	r4, r3
 8013f84:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8013f88:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013f8c:	dd3d      	ble.n	801400a <__ieee754_asinf+0x14e>
 8013f8e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8013f92:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8014080 <__ieee754_asinf+0x1c4>
 8013f96:	eee0 7a26 	vfma.f32	s15, s0, s13
 8013f9a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801404c <__ieee754_asinf+0x190>
 8013f9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013fa2:	2d00      	cmp	r5, #0
 8013fa4:	bfd8      	it	le
 8013fa6:	eeb1 0a40 	vnegle.f32	s0, s0
 8013faa:	e79b      	b.n	8013ee4 <__ieee754_asinf+0x28>
 8013fac:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013fb0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8014054 <__ieee754_asinf+0x198>
 8013fb4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8014058 <__ieee754_asinf+0x19c>
 8013fb8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801406c <__ieee754_asinf+0x1b0>
 8013fbc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013fc0:	eddf 6a27 	vldr	s13, [pc, #156]	; 8014060 <__ieee754_asinf+0x1a4>
 8013fc4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013fc8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8014064 <__ieee754_asinf+0x1a8>
 8013fcc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013fd0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8014068 <__ieee754_asinf+0x1ac>
 8013fd4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013fd8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801405c <__ieee754_asinf+0x1a0>
 8013fdc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013fe0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8014070 <__ieee754_asinf+0x1b4>
 8013fe4:	eee7 6a86 	vfma.f32	s13, s15, s12
 8013fe8:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8014074 <__ieee754_asinf+0x1b8>
 8013fec:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013ff0:	eddf 6a21 	vldr	s13, [pc, #132]	; 8014078 <__ieee754_asinf+0x1bc>
 8013ff4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013ffc:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8014000:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8014004:	eea0 0a27 	vfma.f32	s0, s0, s15
 8014008:	e76c      	b.n	8013ee4 <__ieee754_asinf+0x28>
 801400a:	ee10 3a10 	vmov	r3, s0
 801400e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014012:	f023 030f 	bic.w	r3, r3, #15
 8014016:	ee07 3a10 	vmov	s14, r3
 801401a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801401e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014022:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014026:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801402a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8014048 <__ieee754_asinf+0x18c>
 801402e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8014032:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8014036:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8014084 <__ieee754_asinf+0x1c8>
 801403a:	eeb0 6a40 	vmov.f32	s12, s0
 801403e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014042:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014046:	e7aa      	b.n	8013f9e <__ieee754_asinf+0xe2>
 8014048:	b33bbd2e 	.word	0xb33bbd2e
 801404c:	3fc90fdb 	.word	0x3fc90fdb
 8014050:	7149f2ca 	.word	0x7149f2ca
 8014054:	3811ef08 	.word	0x3811ef08
 8014058:	3a4f7f04 	.word	0x3a4f7f04
 801405c:	3e2aaaab 	.word	0x3e2aaaab
 8014060:	bd241146 	.word	0xbd241146
 8014064:	3e4e0aa8 	.word	0x3e4e0aa8
 8014068:	bea6b090 	.word	0xbea6b090
 801406c:	3d9dc62e 	.word	0x3d9dc62e
 8014070:	bf303361 	.word	0xbf303361
 8014074:	4001572d 	.word	0x4001572d
 8014078:	c019d139 	.word	0xc019d139
 801407c:	3f799999 	.word	0x3f799999
 8014080:	333bbd2e 	.word	0x333bbd2e
 8014084:	3f490fdb 	.word	0x3f490fdb

08014088 <__ieee754_atan2f>:
 8014088:	ee10 2a90 	vmov	r2, s1
 801408c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014090:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014094:	b510      	push	{r4, lr}
 8014096:	eef0 7a40 	vmov.f32	s15, s0
 801409a:	dc06      	bgt.n	80140aa <__ieee754_atan2f+0x22>
 801409c:	ee10 0a10 	vmov	r0, s0
 80140a0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80140a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80140a8:	dd04      	ble.n	80140b4 <__ieee754_atan2f+0x2c>
 80140aa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80140ae:	eeb0 0a67 	vmov.f32	s0, s15
 80140b2:	bd10      	pop	{r4, pc}
 80140b4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80140b8:	d103      	bne.n	80140c2 <__ieee754_atan2f+0x3a>
 80140ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140be:	f000 b98b 	b.w	80143d8 <atanf>
 80140c2:	1794      	asrs	r4, r2, #30
 80140c4:	f004 0402 	and.w	r4, r4, #2
 80140c8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80140cc:	b93b      	cbnz	r3, 80140de <__ieee754_atan2f+0x56>
 80140ce:	2c02      	cmp	r4, #2
 80140d0:	d05c      	beq.n	801418c <__ieee754_atan2f+0x104>
 80140d2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80141a0 <__ieee754_atan2f+0x118>
 80140d6:	2c03      	cmp	r4, #3
 80140d8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80140dc:	e7e7      	b.n	80140ae <__ieee754_atan2f+0x26>
 80140de:	b939      	cbnz	r1, 80140f0 <__ieee754_atan2f+0x68>
 80140e0:	eddf 7a30 	vldr	s15, [pc, #192]	; 80141a4 <__ieee754_atan2f+0x11c>
 80140e4:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80141a8 <__ieee754_atan2f+0x120>
 80140e8:	2800      	cmp	r0, #0
 80140ea:	fe67 7a80 	vselge.f32	s15, s15, s0
 80140ee:	e7de      	b.n	80140ae <__ieee754_atan2f+0x26>
 80140f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80140f4:	d110      	bne.n	8014118 <__ieee754_atan2f+0x90>
 80140f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80140fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80140fe:	d107      	bne.n	8014110 <__ieee754_atan2f+0x88>
 8014100:	2c02      	cmp	r4, #2
 8014102:	d846      	bhi.n	8014192 <__ieee754_atan2f+0x10a>
 8014104:	4b29      	ldr	r3, [pc, #164]	; (80141ac <__ieee754_atan2f+0x124>)
 8014106:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801410a:	edd4 7a00 	vldr	s15, [r4]
 801410e:	e7ce      	b.n	80140ae <__ieee754_atan2f+0x26>
 8014110:	2c02      	cmp	r4, #2
 8014112:	d841      	bhi.n	8014198 <__ieee754_atan2f+0x110>
 8014114:	4b26      	ldr	r3, [pc, #152]	; (80141b0 <__ieee754_atan2f+0x128>)
 8014116:	e7f6      	b.n	8014106 <__ieee754_atan2f+0x7e>
 8014118:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801411c:	d0e0      	beq.n	80140e0 <__ieee754_atan2f+0x58>
 801411e:	1a5b      	subs	r3, r3, r1
 8014120:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8014124:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8014128:	da1a      	bge.n	8014160 <__ieee754_atan2f+0xd8>
 801412a:	2a00      	cmp	r2, #0
 801412c:	da01      	bge.n	8014132 <__ieee754_atan2f+0xaa>
 801412e:	313c      	adds	r1, #60	; 0x3c
 8014130:	db19      	blt.n	8014166 <__ieee754_atan2f+0xde>
 8014132:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8014136:	f000 fa23 	bl	8014580 <fabsf>
 801413a:	f000 f94d 	bl	80143d8 <atanf>
 801413e:	eef0 7a40 	vmov.f32	s15, s0
 8014142:	2c01      	cmp	r4, #1
 8014144:	d012      	beq.n	801416c <__ieee754_atan2f+0xe4>
 8014146:	2c02      	cmp	r4, #2
 8014148:	d017      	beq.n	801417a <__ieee754_atan2f+0xf2>
 801414a:	2c00      	cmp	r4, #0
 801414c:	d0af      	beq.n	80140ae <__ieee754_atan2f+0x26>
 801414e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80141b4 <__ieee754_atan2f+0x12c>
 8014152:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014156:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80141b8 <__ieee754_atan2f+0x130>
 801415a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801415e:	e7a6      	b.n	80140ae <__ieee754_atan2f+0x26>
 8014160:	eddf 7a10 	vldr	s15, [pc, #64]	; 80141a4 <__ieee754_atan2f+0x11c>
 8014164:	e7ed      	b.n	8014142 <__ieee754_atan2f+0xba>
 8014166:	eddf 7a15 	vldr	s15, [pc, #84]	; 80141bc <__ieee754_atan2f+0x134>
 801416a:	e7ea      	b.n	8014142 <__ieee754_atan2f+0xba>
 801416c:	ee17 3a90 	vmov	r3, s15
 8014170:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014174:	ee07 3a90 	vmov	s15, r3
 8014178:	e799      	b.n	80140ae <__ieee754_atan2f+0x26>
 801417a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80141b4 <__ieee754_atan2f+0x12c>
 801417e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014182:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80141b8 <__ieee754_atan2f+0x130>
 8014186:	ee70 7a67 	vsub.f32	s15, s0, s15
 801418a:	e790      	b.n	80140ae <__ieee754_atan2f+0x26>
 801418c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80141b8 <__ieee754_atan2f+0x130>
 8014190:	e78d      	b.n	80140ae <__ieee754_atan2f+0x26>
 8014192:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80141c0 <__ieee754_atan2f+0x138>
 8014196:	e78a      	b.n	80140ae <__ieee754_atan2f+0x26>
 8014198:	eddf 7a08 	vldr	s15, [pc, #32]	; 80141bc <__ieee754_atan2f+0x134>
 801419c:	e787      	b.n	80140ae <__ieee754_atan2f+0x26>
 801419e:	bf00      	nop
 80141a0:	c0490fdb 	.word	0xc0490fdb
 80141a4:	3fc90fdb 	.word	0x3fc90fdb
 80141a8:	bfc90fdb 	.word	0xbfc90fdb
 80141ac:	08014aa8 	.word	0x08014aa8
 80141b0:	08014ab4 	.word	0x08014ab4
 80141b4:	33bbbd2e 	.word	0x33bbbd2e
 80141b8:	40490fdb 	.word	0x40490fdb
 80141bc:	00000000 	.word	0x00000000
 80141c0:	3f490fdb 	.word	0x3f490fdb

080141c4 <__ieee754_sqrtf>:
 80141c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80141c8:	4770      	bx	lr
 80141ca:	0000      	movs	r0, r0
 80141cc:	0000      	movs	r0, r0
	...

080141d0 <atan>:
 80141d0:	b538      	push	{r3, r4, r5, lr}
 80141d2:	eeb0 7b40 	vmov.f64	d7, d0
 80141d6:	ee17 5a90 	vmov	r5, s15
 80141da:	4b73      	ldr	r3, [pc, #460]	; (80143a8 <atan+0x1d8>)
 80141dc:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80141e0:	429c      	cmp	r4, r3
 80141e2:	dd13      	ble.n	801420c <atan+0x3c>
 80141e4:	4b71      	ldr	r3, [pc, #452]	; (80143ac <atan+0x1dc>)
 80141e6:	429c      	cmp	r4, r3
 80141e8:	dc03      	bgt.n	80141f2 <atan+0x22>
 80141ea:	d107      	bne.n	80141fc <atan+0x2c>
 80141ec:	ee10 3a10 	vmov	r3, s0
 80141f0:	b123      	cbz	r3, 80141fc <atan+0x2c>
 80141f2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80141f6:	eeb0 0b47 	vmov.f64	d0, d7
 80141fa:	bd38      	pop	{r3, r4, r5, pc}
 80141fc:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8014338 <atan+0x168>
 8014200:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8014340 <atan+0x170>
 8014204:	2d00      	cmp	r5, #0
 8014206:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801420a:	e7f4      	b.n	80141f6 <atan+0x26>
 801420c:	4b68      	ldr	r3, [pc, #416]	; (80143b0 <atan+0x1e0>)
 801420e:	429c      	cmp	r4, r3
 8014210:	dc11      	bgt.n	8014236 <atan+0x66>
 8014212:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8014216:	429c      	cmp	r4, r3
 8014218:	dc0a      	bgt.n	8014230 <atan+0x60>
 801421a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 801421e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8014348 <atan+0x178>
 8014222:	ee30 6b06 	vadd.f64	d6, d0, d6
 8014226:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801422a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801422e:	dce2      	bgt.n	80141f6 <atan+0x26>
 8014230:	f04f 33ff 	mov.w	r3, #4294967295
 8014234:	e013      	b.n	801425e <atan+0x8e>
 8014236:	f000 f8c5 	bl	80143c4 <fabs>
 801423a:	4b5e      	ldr	r3, [pc, #376]	; (80143b4 <atan+0x1e4>)
 801423c:	429c      	cmp	r4, r3
 801423e:	dc4f      	bgt.n	80142e0 <atan+0x110>
 8014240:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8014244:	429c      	cmp	r4, r3
 8014246:	dc41      	bgt.n	80142cc <atan+0xfc>
 8014248:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801424c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8014250:	2300      	movs	r3, #0
 8014252:	eea0 6b07 	vfma.f64	d6, d0, d7
 8014256:	ee30 0b07 	vadd.f64	d0, d0, d7
 801425a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801425e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014350 <atan+0x180>
 8014262:	ee27 4b07 	vmul.f64	d4, d7, d7
 8014266:	ee24 5b04 	vmul.f64	d5, d4, d4
 801426a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014358 <atan+0x188>
 801426e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8014272:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8014360 <atan+0x190>
 8014276:	eea3 6b05 	vfma.f64	d6, d3, d5
 801427a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014368 <atan+0x198>
 801427e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8014282:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8014370 <atan+0x1a0>
 8014286:	eea3 6b05 	vfma.f64	d6, d3, d5
 801428a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014378 <atan+0x1a8>
 801428e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8014380 <atan+0x1b0>
 8014292:	eea6 3b05 	vfma.f64	d3, d6, d5
 8014296:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014388 <atan+0x1b8>
 801429a:	eea5 2b06 	vfma.f64	d2, d5, d6
 801429e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014390 <atan+0x1c0>
 80142a2:	eea2 6b05 	vfma.f64	d6, d2, d5
 80142a6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8014398 <atan+0x1c8>
 80142aa:	eea6 2b05 	vfma.f64	d2, d6, d5
 80142ae:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80143a0 <atan+0x1d0>
 80142b2:	1c5a      	adds	r2, r3, #1
 80142b4:	eea2 6b05 	vfma.f64	d6, d2, d5
 80142b8:	ee26 6b05 	vmul.f64	d6, d6, d5
 80142bc:	eea3 6b04 	vfma.f64	d6, d3, d4
 80142c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80142c4:	d121      	bne.n	801430a <atan+0x13a>
 80142c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80142ca:	e794      	b.n	80141f6 <atan+0x26>
 80142cc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80142d0:	2301      	movs	r3, #1
 80142d2:	ee30 6b47 	vsub.f64	d6, d0, d7
 80142d6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80142da:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80142de:	e7be      	b.n	801425e <atan+0x8e>
 80142e0:	4b35      	ldr	r3, [pc, #212]	; (80143b8 <atan+0x1e8>)
 80142e2:	429c      	cmp	r4, r3
 80142e4:	da0b      	bge.n	80142fe <atan+0x12e>
 80142e6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80142ea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80142ee:	ee30 5b47 	vsub.f64	d5, d0, d7
 80142f2:	eea0 6b07 	vfma.f64	d6, d0, d7
 80142f6:	2302      	movs	r3, #2
 80142f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80142fc:	e7af      	b.n	801425e <atan+0x8e>
 80142fe:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8014302:	2303      	movs	r3, #3
 8014304:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014308:	e7a9      	b.n	801425e <atan+0x8e>
 801430a:	4a2c      	ldr	r2, [pc, #176]	; (80143bc <atan+0x1ec>)
 801430c:	492c      	ldr	r1, [pc, #176]	; (80143c0 <atan+0x1f0>)
 801430e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014312:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8014316:	ed93 5b00 	vldr	d5, [r3]
 801431a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801431e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014322:	ed92 6b00 	vldr	d6, [r2]
 8014326:	2d00      	cmp	r5, #0
 8014328:	ee36 7b47 	vsub.f64	d7, d6, d7
 801432c:	bfb8      	it	lt
 801432e:	eeb1 7b47 	vneglt.f64	d7, d7
 8014332:	e760      	b.n	80141f6 <atan+0x26>
 8014334:	f3af 8000 	nop.w
 8014338:	54442d18 	.word	0x54442d18
 801433c:	3ff921fb 	.word	0x3ff921fb
 8014340:	54442d18 	.word	0x54442d18
 8014344:	bff921fb 	.word	0xbff921fb
 8014348:	8800759c 	.word	0x8800759c
 801434c:	7e37e43c 	.word	0x7e37e43c
 8014350:	e322da11 	.word	0xe322da11
 8014354:	3f90ad3a 	.word	0x3f90ad3a
 8014358:	24760deb 	.word	0x24760deb
 801435c:	3fa97b4b 	.word	0x3fa97b4b
 8014360:	a0d03d51 	.word	0xa0d03d51
 8014364:	3fb10d66 	.word	0x3fb10d66
 8014368:	c54c206e 	.word	0xc54c206e
 801436c:	3fb745cd 	.word	0x3fb745cd
 8014370:	920083ff 	.word	0x920083ff
 8014374:	3fc24924 	.word	0x3fc24924
 8014378:	5555550d 	.word	0x5555550d
 801437c:	3fd55555 	.word	0x3fd55555
 8014380:	52defd9a 	.word	0x52defd9a
 8014384:	bfadde2d 	.word	0xbfadde2d
 8014388:	2c6a6c2f 	.word	0x2c6a6c2f
 801438c:	bfa2b444 	.word	0xbfa2b444
 8014390:	af749a6d 	.word	0xaf749a6d
 8014394:	bfb3b0f2 	.word	0xbfb3b0f2
 8014398:	fe231671 	.word	0xfe231671
 801439c:	bfbc71c6 	.word	0xbfbc71c6
 80143a0:	9998ebc4 	.word	0x9998ebc4
 80143a4:	bfc99999 	.word	0xbfc99999
 80143a8:	440fffff 	.word	0x440fffff
 80143ac:	7ff00000 	.word	0x7ff00000
 80143b0:	3fdbffff 	.word	0x3fdbffff
 80143b4:	3ff2ffff 	.word	0x3ff2ffff
 80143b8:	40038000 	.word	0x40038000
 80143bc:	08014ac0 	.word	0x08014ac0
 80143c0:	08014ae0 	.word	0x08014ae0

080143c4 <fabs>:
 80143c4:	ec51 0b10 	vmov	r0, r1, d0
 80143c8:	ee10 2a10 	vmov	r2, s0
 80143cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80143d0:	ec43 2b10 	vmov	d0, r2, r3
 80143d4:	4770      	bx	lr
	...

080143d8 <atanf>:
 80143d8:	b538      	push	{r3, r4, r5, lr}
 80143da:	ee10 5a10 	vmov	r5, s0
 80143de:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80143e2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80143e6:	eef0 7a40 	vmov.f32	s15, s0
 80143ea:	db0f      	blt.n	801440c <atanf+0x34>
 80143ec:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80143f0:	dd04      	ble.n	80143fc <atanf+0x24>
 80143f2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80143f6:	eeb0 0a67 	vmov.f32	s0, s15
 80143fa:	bd38      	pop	{r3, r4, r5, pc}
 80143fc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014534 <atanf+0x15c>
 8014400:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8014538 <atanf+0x160>
 8014404:	2d00      	cmp	r5, #0
 8014406:	fe77 7a80 	vselgt.f32	s15, s15, s0
 801440a:	e7f4      	b.n	80143f6 <atanf+0x1e>
 801440c:	4b4b      	ldr	r3, [pc, #300]	; (801453c <atanf+0x164>)
 801440e:	429c      	cmp	r4, r3
 8014410:	dc10      	bgt.n	8014434 <atanf+0x5c>
 8014412:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8014416:	da0a      	bge.n	801442e <atanf+0x56>
 8014418:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014540 <atanf+0x168>
 801441c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014420:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014424:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801442c:	dce3      	bgt.n	80143f6 <atanf+0x1e>
 801442e:	f04f 33ff 	mov.w	r3, #4294967295
 8014432:	e013      	b.n	801445c <atanf+0x84>
 8014434:	f000 f8a4 	bl	8014580 <fabsf>
 8014438:	4b42      	ldr	r3, [pc, #264]	; (8014544 <atanf+0x16c>)
 801443a:	429c      	cmp	r4, r3
 801443c:	dc4f      	bgt.n	80144de <atanf+0x106>
 801443e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014442:	429c      	cmp	r4, r3
 8014444:	dc41      	bgt.n	80144ca <atanf+0xf2>
 8014446:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801444a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801444e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014452:	2300      	movs	r3, #0
 8014454:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014458:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801445c:	1c5a      	adds	r2, r3, #1
 801445e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014462:	eddf 5a39 	vldr	s11, [pc, #228]	; 8014548 <atanf+0x170>
 8014466:	ed9f 6a39 	vldr	s12, [pc, #228]	; 801454c <atanf+0x174>
 801446a:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8014550 <atanf+0x178>
 801446e:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8014554 <atanf+0x17c>
 8014472:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014476:	eea7 6a25 	vfma.f32	s12, s14, s11
 801447a:	eddf 5a37 	vldr	s11, [pc, #220]	; 8014558 <atanf+0x180>
 801447e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014482:	ed9f 6a36 	vldr	s12, [pc, #216]	; 801455c <atanf+0x184>
 8014486:	eea5 6a87 	vfma.f32	s12, s11, s14
 801448a:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014560 <atanf+0x188>
 801448e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014492:	ed9f 6a34 	vldr	s12, [pc, #208]	; 8014564 <atanf+0x18c>
 8014496:	eea5 6a87 	vfma.f32	s12, s11, s14
 801449a:	eddf 5a33 	vldr	s11, [pc, #204]	; 8014568 <atanf+0x190>
 801449e:	eee7 5a05 	vfma.f32	s11, s14, s10
 80144a2:	ed9f 5a32 	vldr	s10, [pc, #200]	; 801456c <atanf+0x194>
 80144a6:	eea5 5a87 	vfma.f32	s10, s11, s14
 80144aa:	eddf 5a31 	vldr	s11, [pc, #196]	; 8014570 <atanf+0x198>
 80144ae:	eee5 5a07 	vfma.f32	s11, s10, s14
 80144b2:	eea5 0a87 	vfma.f32	s0, s11, s14
 80144b6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80144ba:	eea6 0a26 	vfma.f32	s0, s12, s13
 80144be:	ee27 0a80 	vmul.f32	s0, s15, s0
 80144c2:	d121      	bne.n	8014508 <atanf+0x130>
 80144c4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80144c8:	e795      	b.n	80143f6 <atanf+0x1e>
 80144ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80144ce:	ee30 7a67 	vsub.f32	s14, s0, s15
 80144d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80144d6:	2301      	movs	r3, #1
 80144d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80144dc:	e7be      	b.n	801445c <atanf+0x84>
 80144de:	4b25      	ldr	r3, [pc, #148]	; (8014574 <atanf+0x19c>)
 80144e0:	429c      	cmp	r4, r3
 80144e2:	dc0b      	bgt.n	80144fc <atanf+0x124>
 80144e4:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80144e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80144ec:	eea0 7a27 	vfma.f32	s14, s0, s15
 80144f0:	2302      	movs	r3, #2
 80144f2:	ee70 6a67 	vsub.f32	s13, s0, s15
 80144f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80144fa:	e7af      	b.n	801445c <atanf+0x84>
 80144fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014500:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014504:	2303      	movs	r3, #3
 8014506:	e7a9      	b.n	801445c <atanf+0x84>
 8014508:	4a1b      	ldr	r2, [pc, #108]	; (8014578 <atanf+0x1a0>)
 801450a:	491c      	ldr	r1, [pc, #112]	; (801457c <atanf+0x1a4>)
 801450c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014510:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014514:	ed93 7a00 	vldr	s14, [r3]
 8014518:	ee30 0a47 	vsub.f32	s0, s0, s14
 801451c:	2d00      	cmp	r5, #0
 801451e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014522:	ed92 0a00 	vldr	s0, [r2]
 8014526:	ee70 7a67 	vsub.f32	s15, s0, s15
 801452a:	bfb8      	it	lt
 801452c:	eef1 7a67 	vneglt.f32	s15, s15
 8014530:	e761      	b.n	80143f6 <atanf+0x1e>
 8014532:	bf00      	nop
 8014534:	3fc90fdb 	.word	0x3fc90fdb
 8014538:	bfc90fdb 	.word	0xbfc90fdb
 801453c:	3edfffff 	.word	0x3edfffff
 8014540:	7149f2ca 	.word	0x7149f2ca
 8014544:	3f97ffff 	.word	0x3f97ffff
 8014548:	3c8569d7 	.word	0x3c8569d7
 801454c:	3d4bda59 	.word	0x3d4bda59
 8014550:	bd15a221 	.word	0xbd15a221
 8014554:	be4ccccd 	.word	0xbe4ccccd
 8014558:	3d886b35 	.word	0x3d886b35
 801455c:	3dba2e6e 	.word	0x3dba2e6e
 8014560:	3e124925 	.word	0x3e124925
 8014564:	3eaaaaab 	.word	0x3eaaaaab
 8014568:	bd6ef16b 	.word	0xbd6ef16b
 801456c:	bd9d8795 	.word	0xbd9d8795
 8014570:	bde38e38 	.word	0xbde38e38
 8014574:	401bffff 	.word	0x401bffff
 8014578:	08014b00 	.word	0x08014b00
 801457c:	08014b10 	.word	0x08014b10

08014580 <fabsf>:
 8014580:	ee10 3a10 	vmov	r3, s0
 8014584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014588:	ee00 3a10 	vmov	s0, r3
 801458c:	4770      	bx	lr
	...

08014590 <nanf>:
 8014590:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014598 <nanf+0x8>
 8014594:	4770      	bx	lr
 8014596:	bf00      	nop
 8014598:	7fc00000 	.word	0x7fc00000

0801459c <_init>:
 801459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801459e:	bf00      	nop
 80145a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145a2:	bc08      	pop	{r3}
 80145a4:	469e      	mov	lr, r3
 80145a6:	4770      	bx	lr

080145a8 <_fini>:
 80145a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145aa:	bf00      	nop
 80145ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145ae:	bc08      	pop	{r3}
 80145b0:	469e      	mov	lr, r3
 80145b2:	4770      	bx	lr
