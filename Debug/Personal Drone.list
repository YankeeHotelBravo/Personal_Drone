
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014b54  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08014df8  08014df8  00024df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015360  08015360  00025360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015368  08015368  00025368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801536c  0801536c  0002536c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  24000000  08015370  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000bb8  240001f8  08015568  000301f8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000db0  08015568  00030db0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c2c0  00000000  00000000  00030226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004683  00000000  00000000  0005c4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001838  00000000  00000000  00060b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001718  00000000  00000000  000623a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039524  00000000  00000000  00063ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020005  00000000  00000000  0009cfe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016886e  00000000  00000000  000bcfe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00225857  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007800  00000000  00000000  002258ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014ddc 	.word	0x08014ddc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	08014ddc 	.word	0x08014ddc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <iBus_Check_CHKSUM>:
uint8_t iBus_return;
uint8_t iBus_failsafe;
uint8_t motor_arming_flag = 0;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000698:	81fb      	strh	r3, [r7, #14]

	for(int i=0; i<len-2;i++)
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	e00a      	b.n	80006b6 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	89fa      	ldrh	r2, [r7, #14]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2;i++)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	3301      	adds	r3, #1
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	3b02      	subs	r3, #2
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbef      	blt.n	80006a0 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8) && data[31]);
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	321e      	adds	r2, #30
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d10b      	bne.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d006      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	331f      	adds	r3, #31
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <iBus_Check_CHKSUM+0x60>
 80006e6:	2300      	movs	r3, #0
 80006e8:	b2db      	uxtb	r3, r3

}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0FFF;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3302      	adds	r3, #2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b21a      	sxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3303      	adds	r3, #3
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21b      	sxth	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b21b      	sxth	r3, r3
 8000716:	b29b      	uxth	r3, r3
 8000718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0FFF;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3304      	adds	r3, #4
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b21a      	sxth	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3305      	adds	r3, #5
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29b      	uxth	r3, r3
 800073a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800073e:	b29a      	uxth	r2, r3
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0FFF;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3306      	adds	r3, #6
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b21a      	sxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3307      	adds	r3, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	b21b      	sxth	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b21b      	sxth	r3, r3
 800075a:	b29b      	uxth	r3, r3
 800075c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000760:	b29a      	uxth	r2, r3
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0FFF;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3308      	adds	r3, #8
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b21a      	sxth	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3309      	adds	r3, #9
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21b      	sxth	r3, r3
 800077c:	b29b      	uxth	r3, r3
 800077e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000782:	b29a      	uxth	r2, r3
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0FFF;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	330a      	adds	r3, #10
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b21a      	sxth	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	330b      	adds	r3, #11
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21b      	sxth	r3, r3
 800079a:	4313      	orrs	r3, r2
 800079c:	b21b      	sxth	r3, r3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	811a      	strh	r2, [r3, #8]
	iBus->SwB = (data[12] | data[13]<<8) & 0x0FFF;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	330c      	adds	r3, #12
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	330d      	adds	r3, #13
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	815a      	strh	r2, [r3, #10]
	iBus->VrA = (data[14] | data[15]<<8) & 0x0FFF;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	330e      	adds	r3, #14
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	330f      	adds	r3, #15
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	821a      	strh	r2, [r3, #16]
	iBus->VrB = (data[16] | data[17]<<8) & 0x0FFF;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3310      	adds	r3, #16
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3311      	adds	r3, #17
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	b21b      	sxth	r3, r3
 8000804:	b29b      	uxth	r3, r3
 8000806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800080a:	b29a      	uxth	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	825a      	strh	r2, [r3, #18]
	iBus->SwC = (data[18] | data[19]<<8) & 0x0FFF;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3312      	adds	r3, #18
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b21a      	sxth	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3313      	adds	r3, #19
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	b29b      	uxth	r3, r3
 8000828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800082c:	b29a      	uxth	r2, r3
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	819a      	strh	r2, [r3, #12]
	iBus->SwD = (data[20] | data[21]<<8) & 0x0FFF;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3314      	adds	r3, #20
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b21a      	sxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3315      	adds	r3, #21
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21b      	sxth	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	b21b      	sxth	r3, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800084e:	b29a      	uxth	r2, r3
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	81da      	strh	r2, [r3, #14]

	iBus->FailSafe = (data[13] >> 4);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	330d      	adds	r3, #13
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	091b      	lsrs	r3, r3, #4
 800085c:	b2da      	uxtb	r2, r3
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	751a      	strb	r2, [r3, #20]
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <iBus_isActiveFailSafe>:

unsigned char iBus_isActiveFailSafe(FSiA6B_iBus* iBus)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7d1b      	ldrb	r3, [r3, #20]
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af04      	add	r7, sp, #16
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	4608      	mov	r0, r1
 800089a:	4611      	mov	r1, r2
 800089c:	461a      	mov	r2, r3
 800089e:	4603      	mov	r3, r0
 80008a0:	70fb      	strb	r3, [r7, #3]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70bb      	strb	r3, [r7, #2]
 80008a6:	4613      	mov	r3, r2
 80008a8:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 80008aa:	78fb      	ldrb	r3, [r7, #3]
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d81b      	bhi.n	80008e8 <MPU9250_Init+0x58>
 80008b0:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <MPU9250_Init+0x28>)
 80008b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b6:	bf00      	nop
 80008b8:	080008c9 	.word	0x080008c9
 80008bc:	080008d1 	.word	0x080008d1
 80008c0:	080008d9 	.word	0x080008d9
 80008c4:	080008e1 	.word	0x080008e1
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 80008c8:	4b5d      	ldr	r3, [pc, #372]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008ca:	4a5e      	ldr	r2, [pc, #376]	; (8000a44 <MPU9250_Init+0x1b4>)
 80008cc:	601a      	str	r2, [r3, #0]
		break;
 80008ce:	e00c      	b.n	80008ea <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80008d0:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008d2:	4a5d      	ldr	r2, [pc, #372]	; (8000a48 <MPU9250_Init+0x1b8>)
 80008d4:	601a      	str	r2, [r3, #0]
		break;
 80008d6:	e008      	b.n	80008ea <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80008d8:	4b59      	ldr	r3, [pc, #356]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008da:	4a5c      	ldr	r2, [pc, #368]	; (8000a4c <MPU9250_Init+0x1bc>)
 80008dc:	601a      	str	r2, [r3, #0]
		break;
 80008de:	e004      	b.n	80008ea <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80008e0:	4b57      	ldr	r3, [pc, #348]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008e2:	4a5b      	ldr	r2, [pc, #364]	; (8000a50 <MPU9250_Init+0x1c0>)
 80008e4:	601a      	str	r2, [r3, #0]
		break;
 80008e6:	e000      	b.n	80008ea <MPU9250_Init+0x5a>
	default:
		break;
 80008e8:	bf00      	nop
	}

	switch(Acc_FS)
 80008ea:	78bb      	ldrb	r3, [r7, #2]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d81f      	bhi.n	8000930 <MPU9250_Init+0xa0>
 80008f0:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <MPU9250_Init+0x68>)
 80008f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f6:	bf00      	nop
 80008f8:	08000909 	.word	0x08000909
 80008fc:	08000913 	.word	0x08000913
 8000900:	0800091d 	.word	0x0800091d
 8000904:	08000927 	.word	0x08000927
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 8000908:	4b52      	ldr	r3, [pc, #328]	; (8000a54 <MPU9250_Init+0x1c4>)
 800090a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800090e:	601a      	str	r2, [r3, #0]
		break;
 8000910:	e00f      	b.n	8000932 <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 8000912:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <MPU9250_Init+0x1c4>)
 8000914:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000918:	601a      	str	r2, [r3, #0]
		break;
 800091a:	e00a      	b.n	8000932 <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 800091c:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <MPU9250_Init+0x1c4>)
 800091e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000922:	601a      	str	r2, [r3, #0]
		break;
 8000924:	e005      	b.n	8000932 <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 8000926:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <MPU9250_Init+0x1c4>)
 8000928:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800092c:	601a      	str	r2, [r3, #0]
		break;
 800092e:	e000      	b.n	8000932 <MPU9250_Init+0xa2>
	default:
		break;
 8000930:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 8000932:	2364      	movs	r3, #100	; 0x64
 8000934:	9302      	str	r3, [sp, #8]
 8000936:	2301      	movs	r3, #1
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <MPU9250_Init+0x1c8>)
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2301      	movs	r3, #1
 8000940:	2275      	movs	r2, #117	; 0x75
 8000942:	21d0      	movs	r1, #208	; 0xd0
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f008 fbad 	bl	80090a4 <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 800094a:	4b43      	ldr	r3, [pc, #268]	; (8000a58 <MPU9250_Init+0x1c8>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b71      	cmp	r3, #113	; 0x71
 8000950:	d171      	bne.n	8000a36 <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 8000952:	4b42      	ldr	r3, [pc, #264]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000958:	2364      	movs	r3, #100	; 0x64
 800095a:	9302      	str	r3, [sp, #8]
 800095c:	2301      	movs	r3, #1
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	4b3e      	ldr	r3, [pc, #248]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2301      	movs	r3, #1
 8000966:	2219      	movs	r2, #25
 8000968:	21d0      	movs	r1, #208	; 0xd0
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f008 fa86 	bl	8008e7c <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000970:	200a      	movs	r0, #10
 8000972:	f005 f895 	bl	8005aa0 <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 8000976:	4a39      	ldr	r2, [pc, #228]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000978:	787b      	ldrb	r3, [r7, #1]
 800097a:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	2301      	movs	r3, #1
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	4b35      	ldr	r3, [pc, #212]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2301      	movs	r3, #1
 800098a:	221a      	movs	r2, #26
 800098c:	21d0      	movs	r1, #208	; 0xd0
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f008 fa74 	bl	8008e7c <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000994:	200a      	movs	r0, #10
 8000996:	f005 f883 	bl	8005aa0 <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009a2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 80009a4:	2364      	movs	r3, #100	; 0x64
 80009a6:	9302      	str	r3, [sp, #8]
 80009a8:	2301      	movs	r3, #1
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2301      	movs	r3, #1
 80009b2:	221b      	movs	r2, #27
 80009b4:	21d0      	movs	r1, #208	; 0xd0
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f008 fa60 	bl	8008e7c <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009bc:	200a      	movs	r0, #10
 80009be:	f005 f86f 	bl	8005aa0 <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 80009c2:	78bb      	ldrb	r3, [r7, #2]
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ca:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 80009cc:	2364      	movs	r3, #100	; 0x64
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	2301      	movs	r3, #1
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2301      	movs	r3, #1
 80009da:	221c      	movs	r2, #28
 80009dc:	21d0      	movs	r1, #208	; 0xd0
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f008 fa4c 	bl	8008e7c <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009e4:	200a      	movs	r0, #10
 80009e6:	f005 f85b 	bl	8005aa0 <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ec:	7c3b      	ldrb	r3, [r7, #16]
 80009ee:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	9302      	str	r3, [sp, #8]
 80009f4:	2301      	movs	r3, #1
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2301      	movs	r3, #1
 80009fe:	221d      	movs	r2, #29
 8000a00:	21d0      	movs	r1, #208	; 0xd0
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f008 fa3a 	bl	8008e7c <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f005 f849 	bl	8005aa0 <HAL_Delay>

		MPU9250_tx = 0x00;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	9302      	str	r3, [sp, #8]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2301      	movs	r3, #1
 8000a22:	226b      	movs	r2, #107	; 0x6b
 8000a24:	21d0      	movs	r1, #208	; 0xd0
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f008 fa28 	bl	8008e7c <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000a2c:	200a      	movs	r0, #10
 8000a2e:	f005 f837 	bl	8005aa0 <HAL_Delay>

		return 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <MPU9250_Init+0x1a8>
	}
	return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	24000000 	.word	0x24000000
 8000a44:	43030000 	.word	0x43030000
 8000a48:	42830000 	.word	0x42830000
 8000a4c:	42033333 	.word	0x42033333
 8000a50:	41833333 	.word	0x41833333
 8000a54:	24000004 	.word	0x24000004
 8000a58:	240002f1 	.word	0x240002f1
 8000a5c:	24000271 	.word	0x24000271

08000a60 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af04      	add	r7, sp, #16
 8000a66:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000a6e:	2364      	movs	r3, #100	; 0x64
 8000a70:	9302      	str	r3, [sp, #8]
 8000a72:	2301      	movs	r3, #1
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	226a      	movs	r2, #106	; 0x6a
 8000a7e:	21d0      	movs	r1, #208	; 0xd0
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f008 f9fb 	bl	8008e7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a86:	200a      	movs	r0, #10
 8000a88:	f005 f80a 	bl	8005aa0 <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a8e:	2202      	movs	r2, #2
 8000a90:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 8000a92:	2364      	movs	r3, #100	; 0x64
 8000a94:	9302      	str	r3, [sp, #8]
 8000a96:	2301      	movs	r3, #1
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	2237      	movs	r2, #55	; 0x37
 8000aa2:	21d0      	movs	r1, #208	; 0xd0
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f008 f9e9 	bl	8008e7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f004 fff8 	bl	8005aa0 <HAL_Delay>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	24000271 	.word	0x24000271

08000abc <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af04      	add	r7, sp, #16
 8000ac2:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <MPU9250_Master+0xa0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	9302      	str	r3, [sp, #8]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <MPU9250_Master+0xa0>)
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	2237      	movs	r2, #55	; 0x37
 8000ada:	21d0      	movs	r1, #208	; 0xd0
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f008 f9cd 	bl	8008e7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ae2:	200a      	movs	r0, #10
 8000ae4:	f004 ffdc 	bl	8005aa0 <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <MPU9250_Master+0xa0>)
 8000aea:	2220      	movs	r2, #32
 8000aec:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2301      	movs	r3, #1
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <MPU9250_Master+0xa0>)
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	226a      	movs	r2, #106	; 0x6a
 8000afe:	21d0      	movs	r1, #208	; 0xd0
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f008 f9bb 	bl	8008e7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b06:	200a      	movs	r0, #10
 8000b08:	f004 ffca 	bl	8005aa0 <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b0e:	220d      	movs	r2, #13
 8000b10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 8000b12:	2364      	movs	r3, #100	; 0x64
 8000b14:	9302      	str	r3, [sp, #8]
 8000b16:	2301      	movs	r3, #1
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	2224      	movs	r2, #36	; 0x24
 8000b22:	21d0      	movs	r1, #208	; 0xd0
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f008 f9a9 	bl	8008e7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f004 ffb8 	bl	8005aa0 <HAL_Delay>

	MPU9250_tx = 0x00;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000b36:	2364      	movs	r3, #100	; 0x64
 8000b38:	9302      	str	r3, [sp, #8]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2301      	movs	r3, #1
 8000b44:	226b      	movs	r2, #107	; 0x6b
 8000b46:	21d0      	movs	r1, #208	; 0xd0
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f008 f997 	bl	8008e7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b4e:	200a      	movs	r0, #10
 8000b50:	f004 ffa6 	bl	8005aa0 <HAL_Delay>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	24000271 	.word	0x24000271

08000b60 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *DataStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af04      	add	r7, sp, #16
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000b6a:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <MPU9250_AK8963_Setup+0xa0>)
 8000b6c:	2216      	movs	r2, #22
 8000b6e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000b70:	2364      	movs	r3, #100	; 0x64
 8000b72:	9302      	str	r3, [sp, #8]
 8000b74:	2301      	movs	r3, #1
 8000b76:	9301      	str	r3, [sp, #4]
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MPU9250_AK8963_Setup+0xa0>)
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	220a      	movs	r2, #10
 8000b80:	2118      	movs	r1, #24
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f008 f97a 	bl	8008e7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b88:	200a      	movs	r0, #10
 8000b8a:	f004 ff89 	bl	8005aa0 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_MPU9250_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000b8e:	2364      	movs	r3, #100	; 0x64
 8000b90:	9302      	str	r3, [sp, #8]
 8000b92:	2303      	movs	r3, #3
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	2118      	movs	r1, #24
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f008 fa7f 	bl	80090a4 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f004 ff7a 	bl	8005aa0 <HAL_Delay>

	DataStruct->ASAX = MPU9250_rx_buf[0];
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	DataStruct->ASAY = MPU9250_rx_buf[1];
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bb8:	785a      	ldrb	r2, [r3, #1]
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	DataStruct->ASAZ = MPU9250_rx_buf[2];
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bc2:	789a      	ldrb	r2, [r3, #2]
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 8000bca:	2364      	movs	r3, #100	; 0x64
 8000bcc:	9302      	str	r3, [sp, #8]
 8000bce:	2303      	movs	r3, #3
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MPU9250_AK8963_Setup+0xa8>)
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2118      	movs	r1, #24
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f008 fa61 	bl	80090a4 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000be2:	200a      	movs	r0, #10
 8000be4:	f004 ff5c 	bl	8005aa0 <HAL_Delay>

	if(AK8963_WAI == 0b01001000) return 1;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MPU9250_AK8963_Setup+0xa8>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b48      	cmp	r3, #72	; 0x48
 8000bee:	d101      	bne.n	8000bf4 <MPU9250_AK8963_Setup+0x94>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <MPU9250_AK8963_Setup+0x96>
	return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	24000271 	.word	0x24000271
 8000c04:	240002f4 	.word	0x240002f4
 8000c08:	240002f0 	.word	0x240002f0

08000c0c <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af04      	add	r7, sp, #16
 8000c12:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c16:	228c      	movs	r2, #140	; 0x8c
 8000c18:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000c1a:	2364      	movs	r3, #100	; 0x64
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2301      	movs	r3, #1
 8000c28:	2225      	movs	r2, #37	; 0x25
 8000c2a:	21d0      	movs	r1, #208	; 0xd0
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f008 f925 	bl	8008e7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c32:	200a      	movs	r0, #10
 8000c34:	f004 ff34 	bl	8005aa0 <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000c3e:	2364      	movs	r3, #100	; 0x64
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	2301      	movs	r3, #1
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2226      	movs	r2, #38	; 0x26
 8000c4e:	21d0      	movs	r1, #208	; 0xd0
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f008 f913 	bl	8008e7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c56:	200a      	movs	r0, #10
 8000c58:	f004 ff22 	bl	8005aa0 <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c5e:	2287      	movs	r2, #135	; 0x87
 8000c60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000c62:	2364      	movs	r3, #100	; 0x64
 8000c64:	9302      	str	r3, [sp, #8]
 8000c66:	2301      	movs	r3, #1
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	2227      	movs	r2, #39	; 0x27
 8000c72:	21d0      	movs	r1, #208	; 0xd0
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f008 f901 	bl	8008e7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f004 ff10 	bl	8005aa0 <HAL_Delay>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24000271 	.word	0x24000271

08000c8c <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000c94:	2314      	movs	r3, #20
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <MPU9250_Read_All+0x24>)
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	223b      	movs	r2, #59	; 0x3b
 8000ca0:	21d0      	movs	r1, #208	; 0xd0
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f008 fb18 	bl	80092d8 <HAL_I2C_Mem_Read_DMA>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240002f4 	.word	0x240002f4

08000cb4 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000cbc:	4bb6      	ldr	r3, [pc, #728]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	021b      	lsls	r3, r3, #8
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	4bb4      	ldr	r3, [pc, #720]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cc6:	785b      	ldrb	r3, [r3, #1]
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	b21a      	sxth	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000cda:	4baf      	ldr	r3, [pc, #700]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cdc:	789b      	ldrb	r3, [r3, #2]
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	4bad      	ldr	r3, [pc, #692]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000ce4:	78db      	ldrb	r3, [r3, #3]
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]); // Didn't Save Temp Value
 8000cf0:	4ba9      	ldr	r3, [pc, #676]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cf2:	791b      	ldrb	r3, [r3, #4]
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	4ba7      	ldr	r3, [pc, #668]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cfa:	795b      	ldrb	r3, [r3, #5]
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	809a      	strh	r2, [r3, #4]
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000d06:	4ba4      	ldr	r3, [pc, #656]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d08:	7a1b      	ldrb	r3, [r3, #8]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	4ba2      	ldr	r3, [pc, #648]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d10:	7a5b      	ldrb	r3, [r3, #9]
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000d1c:	4b9e      	ldr	r3, [pc, #632]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d1e:	7a9b      	ldrb	r3, [r3, #10]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	4b9c      	ldr	r3, [pc, #624]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d26:	7adb      	ldrb	r3, [r3, #11]
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	425b      	negs	r3, r3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	b21a      	sxth	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000d3a:	4b97      	ldr	r3, [pc, #604]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d3c:	7b1b      	ldrb	r3, [r3, #12]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	4b95      	ldr	r3, [pc, #596]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d44:	7b5b      	ldrb	r3, [r3, #13]
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	425b      	negs	r3, r3
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	b21a      	sxth	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	831a      	strh	r2, [r3, #24]
	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000d58:	4b8f      	ldr	r3, [pc, #572]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d5a:	7bdb      	ldrb	r3, [r3, #15]
 8000d5c:	021b      	lsls	r3, r3, #8
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b8d      	ldr	r3, [pc, #564]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d62:	7b9b      	ldrb	r3, [r3, #14]
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	4313      	orrs	r3, r2
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	425b      	negs	r3, r3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	b21a      	sxth	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000d78:	4b87      	ldr	r3, [pc, #540]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d7a:	7c5b      	ldrb	r3, [r3, #17]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	4b85      	ldr	r3, [pc, #532]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d82:	7c1b      	ldrb	r3, [r3, #16]
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	4313      	orrs	r3, r2
 8000d88:	b21a      	sxth	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000d90:	4b81      	ldr	r3, [pc, #516]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d92:	7cdb      	ldrb	r3, [r3, #19]
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	4b7f      	ldr	r3, [pc, #508]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d9a:	7c9b      	ldrb	r3, [r3, #18]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	b21a      	sxth	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dae:	ee07 3a90 	vmov	s15, r3
 8000db2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000db6:	4b79      	ldr	r3, [pc, #484]	; (8000f9c <MPU9250_Parsing+0x2e8>)
 8000db8:	ed93 7a00 	vldr	s14, [r3]
 8000dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dcc:	ee07 3a90 	vmov	s15, r3
 8000dd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dd4:	4b71      	ldr	r3, [pc, #452]	; (8000f9c <MPU9250_Parsing+0x2e8>)
 8000dd6:	ed93 7a00 	vldr	s14, [r3]
 8000dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = (DataStruct->Az_Raw / MPU9250_Acc_LSB);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dea:	ee07 3a90 	vmov	s15, r3
 8000dee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000df2:	4b6a      	ldr	r3, [pc, #424]	; (8000f9c <MPU9250_Parsing+0x2e8>)
 8000df4:	ed93 7a00 	vldr	s14, [r3]
 8000df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000e08:	ee07 3a90 	vmov	s15, r3
 8000e0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e10:	4b63      	ldr	r3, [pc, #396]	; (8000fa0 <MPU9250_Parsing+0x2ec>)
 8000e12:	ed93 7a00 	vldr	s14, [r3]
 8000e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000e26:	ee07 3a90 	vmov	s15, r3
 8000e2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e2e:	4b5c      	ldr	r3, [pc, #368]	; (8000fa0 <MPU9250_Parsing+0x2ec>)
 8000e30:	ed93 7a00 	vldr	s14, [r3]
 8000e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000e44:	ee07 3a90 	vmov	s15, r3
 8000e48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e4c:	4b54      	ldr	r3, [pc, #336]	; (8000fa0 <MPU9250_Parsing+0x2ec>)
 8000e4e:	ed93 7a00 	vldr	s14, [r3]
 8000e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8000e62:	461a      	mov	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000e6a:	3b80      	subs	r3, #128	; 0x80
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	da00      	bge.n	8000e72 <MPU9250_Parsing+0x1be>
 8000e70:	33ff      	adds	r3, #255	; 0xff
 8000e72:	121b      	asrs	r3, r3, #8
 8000e74:	3301      	adds	r3, #1
 8000e76:	fb03 f302 	mul.w	r3, r3, r2
 8000e7a:	ee07 3a90 	vmov	s15, r3
 8000e7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e82:	4b48      	ldr	r3, [pc, #288]	; (8000fa4 <MPU9250_Parsing+0x2f0>)
 8000e84:	edd3 7a00 	vldr	s15, [r3]
 8000e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8000e98:	461a      	mov	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000ea0:	3b80      	subs	r3, #128	; 0x80
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	da00      	bge.n	8000ea8 <MPU9250_Parsing+0x1f4>
 8000ea6:	33ff      	adds	r3, #255	; 0xff
 8000ea8:	121b      	asrs	r3, r3, #8
 8000eaa:	3301      	adds	r3, #1
 8000eac:	fb03 f302 	mul.w	r3, r3, r2
 8000eb0:	ee07 3a90 	vmov	s15, r3
 8000eb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb8:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <MPU9250_Parsing+0x2f0>)
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000ed6:	3b80      	subs	r3, #128	; 0x80
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da00      	bge.n	8000ede <MPU9250_Parsing+0x22a>
 8000edc:	33ff      	adds	r3, #255	; 0xff
 8000ede:	121b      	asrs	r3, r3, #8
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	fb03 f302 	mul.w	r3, r3, r2
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eee:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <MPU9250_Parsing+0x2f0>)
 8000ef0:	edd3 7a00 	vldr	s15, [r3]
 8000ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	ed93 7a07 	vldr	s14, [r3, #28]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My -= DataStruct->My_Offset;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8000f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8000f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f88:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000fa8 <MPU9250_Parsing+0x2f4>
 8000f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8000f96:	e009      	b.n	8000fac <MPU9250_Parsing+0x2f8>
 8000f98:	240002f4 	.word	0x240002f4
 8000f9c:	24000004 	.word	0x24000004
 8000fa0:	24000000 	.word	0x24000000
 8000fa4:	24000008 	.word	0x24000008
 8000fa8:	3c8efa35 	.word	0x3c8efa35
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fb2:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8000fa8 <MPU9250_Parsing+0x2f4>
 8000fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000fc6:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8000fa8 <MPU9250_Parsing+0x2f4>
 8000fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <MPU9250_Parsing_NoOffset>:

void MPU9250_Parsing_NoOffset(MPU9250_t *DataStruct)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000fe8:	4ba2      	ldr	r3, [pc, #648]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	4ba0      	ldr	r3, [pc, #640]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8000ff2:	785b      	ldrb	r3, [r3, #1]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	425b      	negs	r3, r3
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b21a      	sxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8001006:	4b9b      	ldr	r3, [pc, #620]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001008:	789b      	ldrb	r3, [r3, #2]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b99      	ldr	r3, [pc, #612]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001010:	78db      	ldrb	r3, [r3, #3]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21a      	sxth	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]); // Didn't Save Temp Value
 800101c:	4b95      	ldr	r3, [pc, #596]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 800101e:	791b      	ldrb	r3, [r3, #4]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b93      	ldr	r3, [pc, #588]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001026:	795b      	ldrb	r3, [r3, #5]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	809a      	strh	r2, [r3, #4]
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8001032:	4b90      	ldr	r3, [pc, #576]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001034:	7a1b      	ldrb	r3, [r3, #8]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b8e      	ldr	r3, [pc, #568]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 800103c:	7a5b      	ldrb	r3, [r3, #9]
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21a      	sxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8001048:	4b8a      	ldr	r3, [pc, #552]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 800104a:	7a9b      	ldrb	r3, [r3, #10]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	4b88      	ldr	r3, [pc, #544]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001052:	7adb      	ldrb	r3, [r3, #11]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21b      	sxth	r3, r3
 800105a:	b29b      	uxth	r3, r3
 800105c:	425b      	negs	r3, r3
 800105e:	b29b      	uxth	r3, r3
 8001060:	b21a      	sxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8001066:	4b83      	ldr	r3, [pc, #524]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001068:	7b1b      	ldrb	r3, [r3, #12]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b81      	ldr	r3, [pc, #516]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001070:	7b5b      	ldrb	r3, [r3, #13]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21b      	sxth	r3, r3
 8001078:	b29b      	uxth	r3, r3
 800107a:	425b      	negs	r3, r3
 800107c:	b29b      	uxth	r3, r3
 800107e:	b21a      	sxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	831a      	strh	r2, [r3, #24]
	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8001084:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001086:	7bdb      	ldrb	r3, [r3, #15]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b79      	ldr	r3, [pc, #484]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 800108e:	7b9b      	ldrb	r3, [r3, #14]
 8001090:	b21b      	sxth	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b21b      	sxth	r3, r3
 8001096:	b29b      	uxth	r3, r3
 8001098:	425b      	negs	r3, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	b21a      	sxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 80010a4:	4b73      	ldr	r3, [pc, #460]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 80010a6:	7c5b      	ldrb	r3, [r3, #17]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	4b71      	ldr	r3, [pc, #452]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 80010ae:	7c1b      	ldrb	r3, [r3, #16]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 80010bc:	4b6d      	ldr	r3, [pc, #436]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 80010be:	7cdb      	ldrb	r3, [r3, #19]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 80010c6:	7c9b      	ldrb	r3, [r3, #18]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010e2:	4b65      	ldr	r3, [pc, #404]	; (8001278 <MPU9250_Parsing_NoOffset+0x298>)
 80010e4:	ed93 7a00 	vldr	s14, [r3]
 80010e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001100:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <MPU9250_Parsing_NoOffset+0x298>)
 8001102:	ed93 7a00 	vldr	s14, [r3]
 8001106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = (DataStruct->Az_Raw / MPU9250_Acc_LSB);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800111e:	4b56      	ldr	r3, [pc, #344]	; (8001278 <MPU9250_Parsing_NoOffset+0x298>)
 8001120:	ed93 7a00 	vldr	s14, [r3]
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800113c:	4b4f      	ldr	r3, [pc, #316]	; (800127c <MPU9250_Parsing_NoOffset+0x29c>)
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800115a:	4b48      	ldr	r3, [pc, #288]	; (800127c <MPU9250_Parsing_NoOffset+0x29c>)
 800115c:	ed93 7a00 	vldr	s14, [r3]
 8001160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001178:	4b40      	ldr	r3, [pc, #256]	; (800127c <MPU9250_Parsing_NoOffset+0x29c>)
 800117a:	ed93 7a00 	vldr	s14, [r3]
 800117e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001196:	3b80      	subs	r3, #128	; 0x80
 8001198:	2b00      	cmp	r3, #0
 800119a:	da00      	bge.n	800119e <MPU9250_Parsing_NoOffset+0x1be>
 800119c:	33ff      	adds	r3, #255	; 0xff
 800119e:	121b      	asrs	r3, r3, #8
 80011a0:	3301      	adds	r3, #1
 80011a2:	fb03 f302 	mul.w	r3, r3, r2
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ae:	4b34      	ldr	r3, [pc, #208]	; (8001280 <MPU9250_Parsing_NoOffset+0x2a0>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80011c4:	461a      	mov	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80011cc:	3b80      	subs	r3, #128	; 0x80
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da00      	bge.n	80011d4 <MPU9250_Parsing_NoOffset+0x1f4>
 80011d2:	33ff      	adds	r3, #255	; 0xff
 80011d4:	121b      	asrs	r3, r3, #8
 80011d6:	3301      	adds	r3, #1
 80011d8:	fb03 f302 	mul.w	r3, r3, r2
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <MPU9250_Parsing_NoOffset+0x2a0>)
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001202:	3b80      	subs	r3, #128	; 0x80
 8001204:	2b00      	cmp	r3, #0
 8001206:	da00      	bge.n	800120a <MPU9250_Parsing_NoOffset+0x22a>
 8001208:	33ff      	adds	r3, #255	; 0xff
 800120a:	121b      	asrs	r3, r3, #8
 800120c:	3301      	adds	r3, #1
 800120e:	fb03 f302 	mul.w	r3, r3, r2
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MPU9250_Parsing_NoOffset+0x2a0>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001230:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001284 <MPU9250_Parsing_NoOffset+0x2a4>
 8001234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	edd3 7a08 	vldr	s15, [r3, #32]
 8001244:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001284 <MPU9250_Parsing_NoOffset+0x2a4>
 8001248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001258:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001284 <MPU9250_Parsing_NoOffset+0x2a4>
 800125c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	240002f4 	.word	0x240002f4
 8001278:	24000004 	.word	0x24000004
 800127c:	24000000 	.word	0x24000000
 8001280:	24000008 	.word	0x24000008
 8001284:	3c8efa35 	.word	0x3c8efa35

08001288 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b0ae      	sub	sp, #184	; 0xb8
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001292:	edc7 0a08 	vstr	s1, [r7, #32]
 8001296:	ed87 1a07 	vstr	s2, [r7, #28]
 800129a:	edc7 1a06 	vstr	s3, [r7, #24]
 800129e:	ed87 2a05 	vstr	s4, [r7, #20]
 80012a2:	edc7 2a04 	vstr	s5, [r7, #16]
 80012a6:	ed87 3a03 	vstr	s6, [r7, #12]
 80012aa:	edc7 3a02 	vstr	s7, [r7, #8]
 80012ae:	ed87 4a01 	vstr	s8, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 80012b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012be:	d11d      	bne.n	80012fc <MadgwickAHRSupdate+0x74>
 80012c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	d116      	bne.n	80012fc <MadgwickAHRSupdate+0x74>
 80012ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012da:	d10f      	bne.n	80012fc <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 80012dc:	edd7 2a04 	vldr	s5, [r7, #16]
 80012e0:	ed97 2a05 	vldr	s4, [r7, #20]
 80012e4:	edd7 1a06 	vldr	s3, [r7, #24]
 80012e8:	ed97 1a07 	vldr	s2, [r7, #28]
 80012ec:	edd7 0a08 	vldr	s1, [r7, #32]
 80012f0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80012f4:	f000 ffd6 	bl	80022a4 <MadgwickAHRSupdateIMU>
		return;
 80012f8:	f000 bfb4 	b.w	8002264 <MadgwickAHRSupdate+0xfdc>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80012fc:	4be6      	ldr	r3, [pc, #920]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	eeb1 7a67 	vneg.f32	s14, s15
 8001306:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800130a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800130e:	4be3      	ldr	r3, [pc, #908]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001310:	edd3 6a00 	vldr	s13, [r3]
 8001314:	edd7 7a08 	vldr	s15, [r7, #32]
 8001318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001320:	4bdf      	ldr	r3, [pc, #892]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001322:	edd3 6a00 	vldr	s13, [r3]
 8001326:	edd7 7a07 	vldr	s15, [r7, #28]
 800132a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800132e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001332:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800133e:	4bd9      	ldr	r3, [pc, #868]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 8001340:	ed93 7a00 	vldr	s14, [r3]
 8001344:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134c:	4bd3      	ldr	r3, [pc, #844]	; (800169c <MadgwickAHRSupdate+0x414>)
 800134e:	edd3 6a00 	vldr	s13, [r3]
 8001352:	edd7 7a07 	vldr	s15, [r7, #28]
 8001356:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135e:	4bd0      	ldr	r3, [pc, #832]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001360:	edd3 6a00 	vldr	s13, [r3]
 8001364:	edd7 7a08 	vldr	s15, [r7, #32]
 8001368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001370:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001378:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800137c:	4bc9      	ldr	r3, [pc, #804]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 800137e:	ed93 7a00 	vldr	s14, [r3]
 8001382:	edd7 7a08 	vldr	s15, [r7, #32]
 8001386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138a:	4bc3      	ldr	r3, [pc, #780]	; (8001698 <MadgwickAHRSupdate+0x410>)
 800138c:	edd3 6a00 	vldr	s13, [r3]
 8001390:	edd7 7a07 	vldr	s15, [r7, #28]
 8001394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001398:	ee37 7a67 	vsub.f32	s14, s14, s15
 800139c:	4bc0      	ldr	r3, [pc, #768]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 800139e:	edd3 6a00 	vldr	s13, [r3]
 80013a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80013ba:	4bba      	ldr	r3, [pc, #744]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80013bc:	ed93 7a00 	vldr	s14, [r3]
 80013c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80013c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c8:	4bb3      	ldr	r3, [pc, #716]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80013ca:	edd3 6a00 	vldr	s13, [r3]
 80013ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80013d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013da:	4bb0      	ldr	r3, [pc, #704]	; (800169c <MadgwickAHRSupdate+0x414>)
 80013dc:	edd3 6a00 	vldr	s13, [r3]
 80013e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80013f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80013fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001404:	d10e      	bne.n	8001424 <MadgwickAHRSupdate+0x19c>
 8001406:	edd7 7a05 	vldr	s15, [r7, #20]
 800140a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800140e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001412:	d107      	bne.n	8001424 <MadgwickAHRSupdate+0x19c>
 8001414:	edd7 7a04 	vldr	s15, [r7, #16]
 8001418:	eef5 7a40 	vcmp.f32	s15, #0.0
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	f000 85a6 	beq.w	8001f70 <MadgwickAHRSupdate+0xce8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001424:	edd7 7a06 	vldr	s15, [r7, #24]
 8001428:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800142c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001430:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001438:	edd7 7a04 	vldr	s15, [r7, #16]
 800143c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	f001 fb5a 	bl	8002b00 <invSqrt>
 800144c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 8001450:	ed97 7a06 	vldr	s14, [r7, #24]
 8001454:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145c:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8001460:	ed97 7a05 	vldr	s14, [r7, #20]
 8001464:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146c:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001470:	ed97 7a04 	vldr	s14, [r7, #16]
 8001474:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147c:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001480:	edd7 7a03 	vldr	s15, [r7, #12]
 8001484:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001488:	edd7 7a02 	vldr	s15, [r7, #8]
 800148c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001494:	edd7 7a01 	vldr	s15, [r7, #4]
 8001498:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800149c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	f001 fb2c 	bl	8002b00 <invSqrt>
 80014a8:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 80014ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80014b0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b8:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 80014bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80014c0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c8:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 80014cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80014d0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d8:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 80014dc:	4b71      	ldr	r3, [pc, #452]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80014ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ee:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 80014f2:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001504:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8001508:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001512:	ed97 7a01 	vldr	s14, [r7, #4]
 8001516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 800151e:	4b5e      	ldr	r3, [pc, #376]	; (8001698 <MadgwickAHRSupdate+0x410>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001528:	ed97 7a03 	vldr	s14, [r7, #12]
 800152c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001530:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 8001534:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800153e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 8001542:	4b55      	ldr	r3, [pc, #340]	; (8001698 <MadgwickAHRSupdate+0x410>)
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800154c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 8001550:	4b52      	ldr	r3, [pc, #328]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800155a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 800155e:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001568:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 800156c:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001576:	4b49      	ldr	r3, [pc, #292]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001580:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 8001584:	4b45      	ldr	r3, [pc, #276]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800158e:	4b44      	ldr	r3, [pc, #272]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001598:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 800159c:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 800159e:	ed93 7a00 	vldr	s14, [r3]
 80015a2:	4b40      	ldr	r3, [pc, #256]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ac:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 80015b0:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80015b2:	ed93 7a00 	vldr	s14, [r3]
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 80015c4:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80015c6:	ed93 7a00 	vldr	s14, [r3]
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <MadgwickAHRSupdate+0x414>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 80015d8:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80015da:	ed93 7a00 	vldr	s14, [r3]
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80015ee:	ed93 7a00 	vldr	s14, [r3]
 80015f2:	4b29      	ldr	r3, [pc, #164]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80015f4:	edd3 7a00 	vldr	s15, [r3]
 80015f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <MadgwickAHRSupdate+0x410>)
 8001602:	ed93 7a00 	vldr	s14, [r3]
 8001606:	4b25      	ldr	r3, [pc, #148]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001610:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <MadgwickAHRSupdate+0x410>)
 8001616:	ed93 7a00 	vldr	s14, [r3]
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001624:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <MadgwickAHRSupdate+0x414>)
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001638:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <MadgwickAHRSupdate+0x414>)
 800163e:	ed93 7a00 	vldr	s14, [r3]
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001652:	ed93 7a00 	vldr	s14, [r3]
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001660:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001664:	ed97 7a03 	vldr	s14, [r7, #12]
 8001668:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800166c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001672:	edd3 6a00 	vldr	s13, [r3]
 8001676:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800167a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001684:	edd3 6a00 	vldr	s13, [r3]
 8001688:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800168c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001690:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001694:	e008      	b.n	80016a8 <MadgwickAHRSupdate+0x420>
 8001696:	bf00      	nop
 8001698:	24000218 	.word	0x24000218
 800169c:	2400021c 	.word	0x2400021c
 80016a0:	24000220 	.word	0x24000220
 80016a4:	24000010 	.word	0x24000010
 80016a8:	edd7 6a03 	vldr	s13, [r7, #12]
 80016ac:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80016b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016b8:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80016bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80016c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016c4:	4bf5      	ldr	r3, [pc, #980]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d2:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80016d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016de:	4bf0      	ldr	r3, [pc, #960]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ec:	edd7 6a03 	vldr	s13, [r7, #12]
 80016f0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016fc:	edd7 6a03 	vldr	s13, [r7, #12]
 8001700:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001710:	4be3      	ldr	r3, [pc, #908]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001712:	ed93 7a00 	vldr	s14, [r3]
 8001716:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800171a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800171e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001722:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800172e:	4bdd      	ldr	r3, [pc, #884]	; (8001aa4 <MadgwickAHRSupdate+0x81c>)
 8001730:	edd3 6a00 	vldr	s13, [r3]
 8001734:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001740:	4bd6      	ldr	r3, [pc, #856]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 8001742:	edd3 6a00 	vldr	s13, [r3]
 8001746:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800174a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001752:	edd7 6a02 	vldr	s13, [r7, #8]
 8001756:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800175a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800175e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001762:	edd7 6a02 	vldr	s13, [r7, #8]
 8001766:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800176a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001772:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001776:	edd7 7a01 	vldr	s15, [r7, #4]
 800177a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800177e:	4bc8      	ldr	r3, [pc, #800]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001788:	ee37 7a27 	vadd.f32	s14, s14, s15
 800178c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001790:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 80017a0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80017a4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017a8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80017ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017b8:	eeb0 0b47 	vmov.f64	d0, d7
 80017bc:	f012 fe6c 	bl	8014498 <sqrt>
 80017c0:	eeb0 7b40 	vmov.f64	d7, d0
 80017c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017c8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80017cc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80017d0:	eeb1 7a67 	vneg.f32	s14, s15
 80017d4:	4bb1      	ldr	r3, [pc, #708]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017de:	4bb1      	ldr	r3, [pc, #708]	; (8001aa4 <MadgwickAHRSupdate+0x81c>)
 80017e0:	edd3 6a00 	vldr	s13, [r3]
 80017e4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80017e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f0:	edd7 6a01 	vldr	s13, [r7, #4]
 80017f4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80017f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001800:	4ba7      	ldr	r3, [pc, #668]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001802:	edd3 6a00 	vldr	s13, [r3]
 8001806:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800180a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001812:	edd7 6a01 	vldr	s13, [r7, #4]
 8001816:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800181a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800181e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001822:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001826:	edd7 7a02 	vldr	s15, [r7, #8]
 800182a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800182e:	4b9c      	ldr	r3, [pc, #624]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001838:	ee37 7a27 	vadd.f32	s14, s14, s15
 800183c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001840:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001848:	ee37 7a67 	vsub.f32	s14, s14, s15
 800184c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001850:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8001860:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001864:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001868:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 800186c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001870:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001874:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001878:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800187c:	eeb1 7a67 	vneg.f32	s14, s15
 8001880:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001884:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001888:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800188c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001890:	edd7 7a06 	vldr	s15, [r7, #24]
 8001894:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800189c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80018a0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018a4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80018a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018b4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80018b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c0:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 80018c2:	edd3 6a00 	vldr	s13, [r3]
 80018c6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018ce:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80018d2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018d6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018da:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018de:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018e6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018ea:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80018ee:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80018f2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018f6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018fa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018fe:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001902:	edd7 7a03 	vldr	s15, [r7, #12]
 8001906:	ee76 7a67 	vsub.f32	s15, s12, s15
 800190a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001912:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001916:	eef1 6a67 	vneg.f32	s13, s15
 800191a:	4b61      	ldr	r3, [pc, #388]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001924:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <MadgwickAHRSupdate+0x81c>)
 8001926:	ed93 6a00 	vldr	s12, [r3]
 800192a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800192e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001932:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001936:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800193a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800193e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001942:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001946:	ee26 6a27 	vmul.f32	s12, s12, s15
 800194a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800194e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001952:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001956:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800195a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800195e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001962:	edd7 7a02 	vldr	s15, [r7, #8]
 8001966:	ee76 7a67 	vsub.f32	s15, s12, s15
 800196a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800196e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001972:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 8001974:	edd3 6a00 	vldr	s13, [r3]
 8001978:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800197c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001980:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001984:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001988:	ee36 6a27 	vadd.f32	s12, s12, s15
 800198c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001990:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001994:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001998:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800199c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019a0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019a4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019a8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80019c8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019cc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019d0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80019d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80019dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019e0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80019e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80019ec:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019f0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80019f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a00:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0c:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <MadgwickAHRSupdate+0x81c>)
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001a16:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a1a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a22:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001a26:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a2a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a32:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a36:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a3a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001a48:	edd3 6a00 	vldr	s13, [r3]
 8001a4c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a54:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001a58:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a5c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a60:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a64:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a68:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a70:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001a74:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001a78:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a7c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a80:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a84:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a8c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a98:	e006      	b.n	8001aa8 <MadgwickAHRSupdate+0x820>
 8001a9a:	bf00      	nop
 8001a9c:	2400021c 	.word	0x2400021c
 8001aa0:	24000220 	.word	0x24000220
 8001aa4:	24000218 	.word	0x24000218
 8001aa8:	4bf6      	ldr	r3, [pc, #984]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001aaa:	edd3 6a00 	vldr	s13, [r3]
 8001aae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ab2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ab6:	4bf4      	ldr	r3, [pc, #976]	; (8001e88 <MadgwickAHRSupdate+0xc00>)
 8001ab8:	ed93 6a00 	vldr	s12, [r3]
 8001abc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ac0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ac4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ac8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001acc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001ad0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ad4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ad8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001adc:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001ae0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ae4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001ae8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001aec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001af0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001af4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001af8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b04:	4be1      	ldr	r3, [pc, #900]	; (8001e8c <MadgwickAHRSupdate+0xc04>)
 8001b06:	edd3 6a00 	vldr	s13, [r3]
 8001b0a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b12:	4bdf      	ldr	r3, [pc, #892]	; (8001e90 <MadgwickAHRSupdate+0xc08>)
 8001b14:	ed93 6a00 	vldr	s12, [r3]
 8001b18:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b1c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b20:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b24:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001b28:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b2c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b30:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b38:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b3c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b40:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b44:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b48:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b4c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b50:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b54:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b5c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b68:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b6c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001b70:	eeb1 7a67 	vneg.f32	s14, s15
 8001b74:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b78:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b7c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b80:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b84:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b88:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b90:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b94:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b98:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001b9c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ba0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ba4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ba8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb4:	4bb3      	ldr	r3, [pc, #716]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001bbe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001bc2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001bc6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001bce:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bd2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bda:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bde:	edd7 7a04 	vldr	s15, [r7, #16]
 8001be2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001bf2:	eef1 6a67 	vneg.f32	s13, s15
 8001bf6:	4ba3      	ldr	r3, [pc, #652]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c00:	4ba1      	ldr	r3, [pc, #644]	; (8001e88 <MadgwickAHRSupdate+0xc00>)
 8001c02:	ed93 6a00 	vldr	s12, [r3]
 8001c06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c0a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c0e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c12:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001c16:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c1a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c1e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c22:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c26:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c2a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c2e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001c32:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c36:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c3e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c42:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c4a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c56:	4b8e      	ldr	r3, [pc, #568]	; (8001e90 <MadgwickAHRSupdate+0xc08>)
 8001c58:	edd3 6a00 	vldr	s13, [r3]
 8001c5c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c64:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <MadgwickAHRSupdate+0xc04>)
 8001c66:	ed93 6a00 	vldr	s12, [r3]
 8001c6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c6e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c72:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c76:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001c7a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001c7e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c82:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c86:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c8a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001c8e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c92:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001c96:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c9a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c9e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ca2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ca6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb2:	4b75      	ldr	r3, [pc, #468]	; (8001e88 <MadgwickAHRSupdate+0xc00>)
 8001cb4:	edd3 6a00 	vldr	s13, [r3]
 8001cb8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cc0:	4b70      	ldr	r3, [pc, #448]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001cc2:	ed93 6a00 	vldr	s12, [r3]
 8001cc6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001cca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cd2:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001cd6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001cda:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cde:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ce2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ce6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001cea:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001cee:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cf2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cf6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cfa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cfe:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d02:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d16:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001d1a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d1e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d22:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d32:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d3a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d3e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d42:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001d46:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d4e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d52:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d5e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d62:	eef1 6a67 	vneg.f32	s13, s15
 8001d66:	4b49      	ldr	r3, [pc, #292]	; (8001e8c <MadgwickAHRSupdate+0xc04>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d70:	4b47      	ldr	r3, [pc, #284]	; (8001e90 <MadgwickAHRSupdate+0xc08>)
 8001d72:	ed93 6a00 	vldr	s12, [r3]
 8001d76:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d7a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d7e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d82:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001d86:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d8a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d8e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d92:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d96:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d9a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d9e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001da2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001da6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001daa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dae:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001db2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001db6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dba:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dca:	eef1 6a67 	vneg.f32	s13, s15
 8001dce:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <MadgwickAHRSupdate+0xc00>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001dda:	ed93 6a00 	vldr	s12, [r3]
 8001dde:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001de2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001de6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dea:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001dee:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001df2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001df6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dfa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dfe:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001e02:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e06:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001e0a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e0e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e12:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e16:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e1a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <MadgwickAHRSupdate+0xc08>)
 8001e28:	edd3 6a00 	vldr	s13, [r3]
 8001e2c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e34:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001e38:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e3c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e40:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e44:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e48:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001e4c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e50:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e54:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e58:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e60:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e64:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e78:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001e7c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e80:	e008      	b.n	8001e94 <MadgwickAHRSupdate+0xc0c>
 8001e82:	bf00      	nop
 8001e84:	2400021c 	.word	0x2400021c
 8001e88:	24000010 	.word	0x24000010
 8001e8c:	24000220 	.word	0x24000220
 8001e90:	24000218 	.word	0x24000218
 8001e94:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e98:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ea0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ea8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001eb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec0:	f000 fe1e 	bl	8002b00 <invSqrt>
 8001ec4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001ec8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001ecc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001ed8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001edc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001ee8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001eec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001ef8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001efc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f04:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001f08:	4bd8      	ldr	r3, [pc, #864]	; (800226c <MadgwickAHRSupdate+0xfe4>)
 8001f0a:	ed93 7a00 	vldr	s14, [r3]
 8001f0e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f16:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f1e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001f22:	4bd2      	ldr	r3, [pc, #840]	; (800226c <MadgwickAHRSupdate+0xfe4>)
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f30:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f38:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001f3c:	4bcb      	ldr	r3, [pc, #812]	; (800226c <MadgwickAHRSupdate+0xfe4>)
 8001f3e:	ed93 7a00 	vldr	s14, [r3]
 8001f42:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f52:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001f56:	4bc5      	ldr	r3, [pc, #788]	; (800226c <MadgwickAHRSupdate+0xfe4>)
 8001f58:	ed93 7a00 	vldr	s14, [r3]
 8001f5c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f64:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f6c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001f70:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001f74:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8002270 <MadgwickAHRSupdate+0xfe8>
 8001f78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f7c:	4bbd      	ldr	r3, [pc, #756]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f86:	4bbb      	ldr	r3, [pc, #748]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8001f88:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001f8c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001f90:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8002270 <MadgwickAHRSupdate+0xfe8>
 8001f94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f98:	4bb7      	ldr	r3, [pc, #732]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa2:	4bb5      	ldr	r3, [pc, #724]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8001fa4:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001fa8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001fac:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8002270 <MadgwickAHRSupdate+0xfe8>
 8001fb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fb4:	4bb1      	ldr	r3, [pc, #708]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbe:	4baf      	ldr	r3, [pc, #700]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8001fc0:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001fc4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001fc8:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002270 <MadgwickAHRSupdate+0xfe8>
 8001fcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fd0:	4bab      	ldr	r3, [pc, #684]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fda:	4ba9      	ldr	r3, [pc, #676]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8001fdc:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001fe0:	4ba4      	ldr	r3, [pc, #656]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8001fe2:	ed93 7a00 	vldr	s14, [r3]
 8001fe6:	4ba3      	ldr	r3, [pc, #652]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ff0:	4ba1      	ldr	r3, [pc, #644]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8001ff2:	edd3 6a00 	vldr	s13, [r3]
 8001ff6:	4ba0      	ldr	r3, [pc, #640]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002000:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002004:	4b9d      	ldr	r3, [pc, #628]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002006:	edd3 6a00 	vldr	s13, [r3]
 800200a:	4b9c      	ldr	r3, [pc, #624]	; (800227c <MadgwickAHRSupdate+0xff4>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002018:	4b99      	ldr	r3, [pc, #612]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 800201a:	edd3 6a00 	vldr	s13, [r3]
 800201e:	4b98      	ldr	r3, [pc, #608]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202c:	eeb0 0a67 	vmov.f32	s0, s15
 8002030:	f000 fd66 	bl	8002b00 <invSqrt>
 8002034:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8002038:	4b8e      	ldr	r3, [pc, #568]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 800203a:	ed93 7a00 	vldr	s14, [r3]
 800203e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002046:	4b8b      	ldr	r3, [pc, #556]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8002048:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800204c:	4b8a      	ldr	r3, [pc, #552]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 800204e:	ed93 7a00 	vldr	s14, [r3]
 8002052:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205a:	4b87      	ldr	r3, [pc, #540]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 800205c:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002060:	4b86      	ldr	r3, [pc, #536]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002062:	ed93 7a00 	vldr	s14, [r3]
 8002066:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800206a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206e:	4b83      	ldr	r3, [pc, #524]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002070:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002074:	4b82      	ldr	r3, [pc, #520]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002076:	ed93 7a00 	vldr	s14, [r3]
 800207a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800207e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002082:	4b7f      	ldr	r3, [pc, #508]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002084:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8002088:	4b7a      	ldr	r3, [pc, #488]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 800208a:	ed93 7a00 	vldr	s14, [r3]
 800208e:	4b7a      	ldr	r3, [pc, #488]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002098:	4b78      	ldr	r3, [pc, #480]	; (800227c <MadgwickAHRSupdate+0xff4>)
 800209a:	edd3 6a00 	vldr	s13, [r3]
 800209e:	4b78      	ldr	r3, [pc, #480]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 80020a0:	edd3 7a00 	vldr	s15, [r3]
 80020a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a8:	ee37 6a27 	vadd.f32	s12, s14, s15
 80020ac:	4b72      	ldr	r3, [pc, #456]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 80020ae:	ed93 7a00 	vldr	s14, [r3]
 80020b2:	4b71      	ldr	r3, [pc, #452]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020c4:	4b6d      	ldr	r3, [pc, #436]	; (800227c <MadgwickAHRSupdate+0xff4>)
 80020c6:	edd3 6a00 	vldr	s13, [r3]
 80020ca:	4b6c      	ldr	r3, [pc, #432]	; (800227c <MadgwickAHRSupdate+0xff4>)
 80020cc:	edd3 7a00 	vldr	s15, [r3]
 80020d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d8:	eef0 0a67 	vmov.f32	s1, s15
 80020dc:	eeb0 0a46 	vmov.f32	s0, s12
 80020e0:	f012 fa36 	bl	8014550 <atan2f>
 80020e4:	eef0 7a40 	vmov.f32	s15, s0
 80020e8:	4b66      	ldr	r3, [pc, #408]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 80020ea:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 80020ee:	4b62      	ldr	r3, [pc, #392]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 80020f0:	ed93 7a00 	vldr	s14, [r3]
 80020f4:	4b62      	ldr	r3, [pc, #392]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020fe:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8002100:	edd3 6a00 	vldr	s13, [r3]
 8002104:	4b5d      	ldr	r3, [pc, #372]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002112:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800211a:	eeb0 0a67 	vmov.f32	s0, s15
 800211e:	f012 f9e5 	bl	80144ec <asinf>
 8002122:	eef0 7a40 	vmov.f32	s15, s0
 8002126:	4b58      	ldr	r3, [pc, #352]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 8002128:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 800212c:	4b52      	ldr	r3, [pc, #328]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 800212e:	ed93 7a00 	vldr	s14, [r3]
 8002132:	4b52      	ldr	r3, [pc, #328]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800213c:	4b4d      	ldr	r3, [pc, #308]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 800213e:	edd3 6a00 	vldr	s13, [r3]
 8002142:	4b4f      	ldr	r3, [pc, #316]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800214c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002150:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002154:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002158:	4b46      	ldr	r3, [pc, #280]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 800215a:	ed93 6a00 	vldr	s12, [r3]
 800215e:	4b45      	ldr	r3, [pc, #276]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8002160:	edd3 6a00 	vldr	s13, [r3]
 8002164:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002168:	4b43      	ldr	r3, [pc, #268]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 800216a:	edd3 5a00 	vldr	s11, [r3]
 800216e:	4b42      	ldr	r3, [pc, #264]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8002170:	edd3 6a00 	vldr	s13, [r3]
 8002174:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002178:	ee36 6a26 	vadd.f32	s12, s12, s13
 800217c:	4b3f      	ldr	r3, [pc, #252]	; (800227c <MadgwickAHRSupdate+0xff4>)
 800217e:	edd3 5a00 	vldr	s11, [r3]
 8002182:	4b3e      	ldr	r3, [pc, #248]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002184:	edd3 6a00 	vldr	s13, [r3]
 8002188:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800218c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002190:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002192:	edd3 5a00 	vldr	s11, [r3]
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002198:	edd3 6a00 	vldr	s13, [r3]
 800219c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021a0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80021a4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80021a8:	eeb0 1b46 	vmov.f64	d1, d6
 80021ac:	eeb0 0b47 	vmov.f64	d0, d7
 80021b0:	f012 f96e 	bl	8014490 <atan2>
 80021b4:	eeb0 7b40 	vmov.f64	d7, d0
 80021b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021bc:	4b33      	ldr	r3, [pc, #204]	; (800228c <MadgwickAHRSupdate+0x1004>)
 80021be:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 80021c2:	4b30      	ldr	r3, [pc, #192]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002290 <MadgwickAHRSupdate+0x1008>
 80021cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d0:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 80021d2:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002290 <MadgwickAHRSupdate+0x1008>
 80021e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e4:	4b28      	ldr	r3, [pc, #160]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 80021e6:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 80021ea:	4b28      	ldr	r3, [pc, #160]	; (800228c <MadgwickAHRSupdate+0x1004>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002290 <MadgwickAHRSupdate+0x1008>
 80021f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <MadgwickAHRSupdate+0x1004>)
 80021fa:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 80021fe:	4b21      	ldr	r3, [pc, #132]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 8002200:	ed93 7a00 	vldr	s14, [r3]
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <MadgwickAHRSupdate+0x100c>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 8002210:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 8002216:	ed93 7a00 	vldr	s14, [r3]
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <MadgwickAHRSupdate+0x1010>)
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 8002226:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <MadgwickAHRSupdate+0x1004>)
 800222c:	ed93 7a00 	vldr	s14, [r3]
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <MadgwickAHRSupdate+0x1014>)
 8002232:	edd3 7a00 	vldr	s15, [r3]
 8002236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <MadgwickAHRSupdate+0x1004>)
 800223c:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <MadgwickAHRSupdate+0x1004>)
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800224a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224e:	d509      	bpl.n	8002264 <MadgwickAHRSupdate+0xfdc>
	{
		System_Yaw = 360.0f + System_Yaw;
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <MadgwickAHRSupdate+0x1004>)
 8002252:	edd3 7a00 	vldr	s15, [r3]
 8002256:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80022a0 <MadgwickAHRSupdate+0x1018>
 800225a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <MadgwickAHRSupdate+0x1004>)
 8002260:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002264:	37b8      	adds	r7, #184	; 0xb8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2400000c 	.word	0x2400000c
 8002270:	3b03126f 	.word	0x3b03126f
 8002274:	24000010 	.word	0x24000010
 8002278:	24000218 	.word	0x24000218
 800227c:	2400021c 	.word	0x2400021c
 8002280:	24000220 	.word	0x24000220
 8002284:	2400030c 	.word	0x2400030c
 8002288:	24000310 	.word	0x24000310
 800228c:	24000308 	.word	0x24000308
 8002290:	42652ee1 	.word	0x42652ee1
 8002294:	24000224 	.word	0x24000224
 8002298:	24000228 	.word	0x24000228
 800229c:	2400022c 	.word	0x2400022c
 80022a0:	43b40000 	.word	0x43b40000

080022a4 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b09c      	sub	sp, #112	; 0x70
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80022ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80022b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80022b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80022ba:	ed87 2a01 	vstr	s4, [r7, #4]
 80022be:	edc7 2a00 	vstr	s5, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80022c2:	4bee      	ldr	r3, [pc, #952]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	eeb1 7a67 	vneg.f32	s14, s15
 80022cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80022d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d4:	4bea      	ldr	r3, [pc, #936]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80022d6:	edd3 6a00 	vldr	s13, [r3]
 80022da:	edd7 7a04 	vldr	s15, [r7, #16]
 80022de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022e6:	4be7      	ldr	r3, [pc, #924]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 80022e8:	edd3 6a00 	vldr	s13, [r3]
 80022ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80022f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002300:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002304:	4be0      	ldr	r3, [pc, #896]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002306:	ed93 7a00 	vldr	s14, [r3]
 800230a:	edd7 7a05 	vldr	s15, [r7, #20]
 800230e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002312:	4bdb      	ldr	r3, [pc, #876]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 8002314:	edd3 6a00 	vldr	s13, [r3]
 8002318:	edd7 7a03 	vldr	s15, [r7, #12]
 800231c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002320:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002324:	4bd7      	ldr	r3, [pc, #860]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 8002326:	edd3 6a00 	vldr	s13, [r3]
 800232a:	edd7 7a04 	vldr	s15, [r7, #16]
 800232e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002336:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800233a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800233e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002342:	4bd1      	ldr	r3, [pc, #836]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002344:	ed93 7a00 	vldr	s14, [r3]
 8002348:	edd7 7a04 	vldr	s15, [r7, #16]
 800234c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002350:	4bca      	ldr	r3, [pc, #808]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002352:	edd3 6a00 	vldr	s13, [r3]
 8002356:	edd7 7a03 	vldr	s15, [r7, #12]
 800235a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800235e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002362:	4bc8      	ldr	r3, [pc, #800]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 8002364:	edd3 6a00 	vldr	s13, [r3]
 8002368:	edd7 7a05 	vldr	s15, [r7, #20]
 800236c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002374:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002380:	4bc1      	ldr	r3, [pc, #772]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002382:	ed93 7a00 	vldr	s14, [r3]
 8002386:	edd7 7a03 	vldr	s15, [r7, #12]
 800238a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800238e:	4bbb      	ldr	r3, [pc, #748]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002390:	edd3 6a00 	vldr	s13, [r3]
 8002394:	edd7 7a04 	vldr	s15, [r7, #16]
 8002398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a0:	4bb7      	ldr	r3, [pc, #732]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80023a2:	edd3 6a00 	vldr	s13, [r3]
 80023a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80023aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ba:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80023be:	edd7 7a02 	vldr	s15, [r7, #8]
 80023c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ca:	d10e      	bne.n	80023ea <MadgwickAHRSupdateIMU+0x146>
 80023cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80023d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	d107      	bne.n	80023ea <MadgwickAHRSupdateIMU+0x146>
 80023da:	edd7 7a00 	vldr	s15, [r7]
 80023de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e6:	f000 81e5 	beq.w	80027b4 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80023ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80023ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80023f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fe:	edd7 7a00 	vldr	s15, [r7]
 8002402:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	f000 fb77 	bl	8002b00 <invSqrt>
 8002412:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8002416:	ed97 7a02 	vldr	s14, [r7, #8]
 800241a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800241e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002422:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8002426:	ed97 7a01 	vldr	s14, [r7, #4]
 800242a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800242e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002432:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 8002436:	ed97 7a00 	vldr	s14, [r7]
 800243a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002442:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8002446:	4b90      	ldr	r3, [pc, #576]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002450:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 8002454:	4b89      	ldr	r3, [pc, #548]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800245e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 8002462:	4b87      	ldr	r3, [pc, #540]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800246c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8002470:	4b84      	ldr	r3, [pc, #528]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 8002472:	edd3 7a00 	vldr	s15, [r3]
 8002476:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800247a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 800247e:	4b82      	ldr	r3, [pc, #520]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8002490:	4b7a      	ldr	r3, [pc, #488]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800249a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800249e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 80024a2:	4b77      	ldr	r3, [pc, #476]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 80024b4:	4b71      	ldr	r3, [pc, #452]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80024be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 80024c6:	4b6e      	ldr	r3, [pc, #440]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80024d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 80024d8:	4b6b      	ldr	r3, [pc, #428]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 80024da:	ed93 7a00 	vldr	s14, [r3]
 80024de:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 80024ec:	4b63      	ldr	r3, [pc, #396]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 80024ee:	ed93 7a00 	vldr	s14, [r3]
 80024f2:	4b62      	ldr	r3, [pc, #392]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8002500:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 8002502:	ed93 7a00 	vldr	s14, [r3]
 8002506:	4b5e      	ldr	r3, [pc, #376]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002510:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8002514:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 8002516:	ed93 7a00 	vldr	s14, [r3]
 800251a:	4b5a      	ldr	r3, [pc, #360]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002524:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002528:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800252c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002534:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002538:	edd7 7a02 	vldr	s15, [r7, #8]
 800253c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002544:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002548:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800254c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002550:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002554:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002558:	edd7 7a01 	vldr	s15, [r7, #4]
 800255c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002564:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002568:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800256c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002574:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002578:	edd7 7a02 	vldr	s15, [r7, #8]
 800257c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002580:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002584:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002588:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800258c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002590:	4b3a      	ldr	r3, [pc, #232]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80025a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80025b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025b6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80025ba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025c6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80025ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025d6:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80025da:	edd7 7a00 	vldr	s15, [r7]
 80025de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e6:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80025ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025ee:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80025f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002600:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002604:	edd7 7a02 	vldr	s15, [r7, #8]
 8002608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800260c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002610:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002614:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002620:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002624:	edd7 7a01 	vldr	s15, [r7, #4]
 8002628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002630:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002634:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002638:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800263c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002648:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800264c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002654:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002658:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800265c:	edd7 7a00 	vldr	s15, [r7]
 8002660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002668:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800266c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002670:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002674:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002678:	e008      	b.n	800268c <MadgwickAHRSupdateIMU+0x3e8>
 800267a:	bf00      	nop
 800267c:	24000218 	.word	0x24000218
 8002680:	2400021c 	.word	0x2400021c
 8002684:	24000220 	.word	0x24000220
 8002688:	24000010 	.word	0x24000010
 800268c:	4be0      	ldr	r3, [pc, #896]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 800268e:	edd3 7a00 	vldr	s15, [r3]
 8002692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002696:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800269a:	edd7 7a02 	vldr	s15, [r7, #8]
 800269e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026aa:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80026ae:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80026b2:	4bd7      	ldr	r3, [pc, #860]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80026b4:	edd3 7a00 	vldr	s15, [r3]
 80026b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80026c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80026c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d0:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80026d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80026dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80026e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80026ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80026f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	f000 f9fc 	bl	8002b00 <invSqrt>
 8002708:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 800270c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002710:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002718:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 800271c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002720:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002728:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 800272c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002730:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002738:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 800273c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002740:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 800274c:	4bb1      	ldr	r3, [pc, #708]	; (8002a14 <MadgwickAHRSupdateIMU+0x770>)
 800274e:	ed93 7a00 	vldr	s14, [r3]
 8002752:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800275e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002762:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8002766:	4bab      	ldr	r3, [pc, #684]	; (8002a14 <MadgwickAHRSupdateIMU+0x770>)
 8002768:	ed93 7a00 	vldr	s14, [r3]
 800276c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002774:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800277c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8002780:	4ba4      	ldr	r3, [pc, #656]	; (8002a14 <MadgwickAHRSupdateIMU+0x770>)
 8002782:	ed93 7a00 	vldr	s14, [r3]
 8002786:	edd7 7a07 	vldr	s15, [r7, #28]
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002796:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 800279a:	4b9e      	ldr	r3, [pc, #632]	; (8002a14 <MadgwickAHRSupdateIMU+0x770>)
 800279c:	ed93 7a00 	vldr	s14, [r3]
 80027a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80027a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80027ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80027b4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80027b8:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8002a18 <MadgwickAHRSupdateIMU+0x774>
 80027bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027c0:	4b96      	ldr	r3, [pc, #600]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ca:	4b94      	ldr	r3, [pc, #592]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 80027cc:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 80027d0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80027d4:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002a18 <MadgwickAHRSupdateIMU+0x774>
 80027d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027dc:	4b90      	ldr	r3, [pc, #576]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	4b8e      	ldr	r3, [pc, #568]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80027e8:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80027ec:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80027f0:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002a18 <MadgwickAHRSupdateIMU+0x774>
 80027f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027f8:	4b8a      	ldr	r3, [pc, #552]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80027fa:	edd3 7a00 	vldr	s15, [r3]
 80027fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002802:	4b88      	ldr	r3, [pc, #544]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 8002804:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002808:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800280c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002a18 <MadgwickAHRSupdateIMU+0x774>
 8002810:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002814:	4b7e      	ldr	r3, [pc, #504]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 8002816:	edd3 7a00 	vldr	s15, [r3]
 800281a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281e:	4b7c      	ldr	r3, [pc, #496]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 8002820:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002824:	4b7d      	ldr	r3, [pc, #500]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 8002826:	ed93 7a00 	vldr	s14, [r3]
 800282a:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 800282c:	edd3 7a00 	vldr	s15, [r3]
 8002830:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002834:	4b7a      	ldr	r3, [pc, #488]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 8002836:	edd3 6a00 	vldr	s13, [r3]
 800283a:	4b79      	ldr	r3, [pc, #484]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002848:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 800284a:	edd3 6a00 	vldr	s13, [r3]
 800284e:	4b75      	ldr	r3, [pc, #468]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002858:	ee37 7a27 	vadd.f32	s14, s14, s15
 800285c:	4b6c      	ldr	r3, [pc, #432]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 800285e:	edd3 6a00 	vldr	s13, [r3]
 8002862:	4b6b      	ldr	r3, [pc, #428]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800286c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002870:	eeb0 0a67 	vmov.f32	s0, s15
 8002874:	f000 f944 	bl	8002b00 <invSqrt>
 8002878:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 800287c:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 800287e:	ed93 7a00 	vldr	s14, [r3]
 8002882:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288a:	4b64      	ldr	r3, [pc, #400]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 800288c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002890:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 8002892:	ed93 7a00 	vldr	s14, [r3]
 8002896:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800289a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289e:	4b60      	ldr	r3, [pc, #384]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80028a0:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80028a4:	4b5f      	ldr	r3, [pc, #380]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80028a6:	ed93 7a00 	vldr	s14, [r3]
 80028aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b2:	4b5c      	ldr	r3, [pc, #368]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80028b4:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80028b8:	4b55      	ldr	r3, [pc, #340]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80028ba:	ed93 7a00 	vldr	s14, [r3]
 80028be:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c6:	4b52      	ldr	r3, [pc, #328]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80028c8:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 80028ce:	ed93 7a00 	vldr	s14, [r3]
 80028d2:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028dc:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80028de:	edd3 6a00 	vldr	s13, [r3]
 80028e2:	4b4b      	ldr	r3, [pc, #300]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ec:	ee37 6a27 	vadd.f32	s12, s14, s15
 80028f0:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80028f2:	ed93 7a00 	vldr	s14, [r3]
 80028f6:	4b4a      	ldr	r3, [pc, #296]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002900:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002904:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002908:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 800290a:	edd3 6a00 	vldr	s13, [r3]
 800290e:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 8002910:	edd3 7a00 	vldr	s15, [r3]
 8002914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291c:	eef0 0a67 	vmov.f32	s1, s15
 8002920:	eeb0 0a46 	vmov.f32	s0, s12
 8002924:	f011 fe14 	bl	8014550 <atan2f>
 8002928:	eef0 7a40 	vmov.f32	s15, s0
 800292c:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <MadgwickAHRSupdateIMU+0x784>)
 800292e:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8002932:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 8002934:	ed93 7a00 	vldr	s14, [r3]
 8002938:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002942:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 8002944:	edd3 6a00 	vldr	s13, [r3]
 8002948:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002956:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800295a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800295e:	eeb0 0a67 	vmov.f32	s0, s15
 8002962:	f011 fdc3 	bl	80144ec <asinf>
 8002966:	eef0 7a40 	vmov.f32	s15, s0
 800296a:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <MadgwickAHRSupdateIMU+0x788>)
 800296c:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 8002970:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 8002972:	ed93 7a00 	vldr	s14, [r3]
 8002976:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002980:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 8002982:	edd3 6a00 	vldr	s13, [r3]
 8002986:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 8002988:	edd3 7a00 	vldr	s15, [r3]
 800298c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002994:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002998:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800299c:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 800299e:	ed93 6a00 	vldr	s12, [r3]
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 80029a4:	edd3 6a00 	vldr	s13, [r3]
 80029a8:	ee26 6a26 	vmul.f32	s12, s12, s13
 80029ac:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80029ae:	edd3 5a00 	vldr	s11, [r3]
 80029b2:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80029b4:	edd3 6a00 	vldr	s13, [r3]
 80029b8:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80029bc:	ee36 6a26 	vadd.f32	s12, s12, s13
 80029c0:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80029c2:	edd3 5a00 	vldr	s11, [r3]
 80029c6:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80029c8:	edd3 6a00 	vldr	s13, [r3]
 80029cc:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80029d0:	ee36 6a66 	vsub.f32	s12, s12, s13
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80029d6:	edd3 5a00 	vldr	s11, [r3]
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80029dc:	edd3 6a00 	vldr	s13, [r3]
 80029e0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80029e4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80029e8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80029ec:	eeb0 1b46 	vmov.f64	d1, d6
 80029f0:	eeb0 0b47 	vmov.f64	d0, d7
 80029f4:	f011 fd4c 	bl	8014490 <atan2>
 80029f8:	eeb0 7b40 	vmov.f64	d7, d0
 80029fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <MadgwickAHRSupdateIMU+0x78c>)
 8002a02:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <MadgwickAHRSupdateIMU+0x784>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	e014      	b.n	8002a38 <MadgwickAHRSupdateIMU+0x794>
 8002a0e:	bf00      	nop
 8002a10:	24000220 	.word	0x24000220
 8002a14:	2400000c 	.word	0x2400000c
 8002a18:	3b03126f 	.word	0x3b03126f
 8002a1c:	24000010 	.word	0x24000010
 8002a20:	24000218 	.word	0x24000218
 8002a24:	2400021c 	.word	0x2400021c
 8002a28:	2400030c 	.word	0x2400030c
 8002a2c:	24000310 	.word	0x24000310
 8002a30:	24000308 	.word	0x24000308
 8002a34:	42652ee1 	.word	0x42652ee1
 8002a38:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002a34 <MadgwickAHRSupdateIMU+0x790>
 8002a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a40:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <MadgwickAHRSupdateIMU+0x83c>)
 8002a42:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <MadgwickAHRSupdateIMU+0x840>)
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002ae8 <MadgwickAHRSupdateIMU+0x844>
 8002a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a54:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <MadgwickAHRSupdateIMU+0x840>)
 8002a56:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 8002a5a:	4b24      	ldr	r3, [pc, #144]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002ae8 <MadgwickAHRSupdateIMU+0x844>
 8002a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a68:	4b20      	ldr	r3, [pc, #128]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002a6a:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <MadgwickAHRSupdateIMU+0x83c>)
 8002a70:	ed93 7a00 	vldr	s14, [r3]
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <MadgwickAHRSupdateIMU+0x84c>)
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <MadgwickAHRSupdateIMU+0x83c>)
 8002a80:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002a84:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <MadgwickAHRSupdateIMU+0x840>)
 8002a86:	ed93 7a00 	vldr	s14, [r3]
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <MadgwickAHRSupdateIMU+0x850>)
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a94:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <MadgwickAHRSupdateIMU+0x840>)
 8002a96:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002a9c:	ed93 7a00 	vldr	s14, [r3]
 8002aa0:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <MadgwickAHRSupdateIMU+0x854>)
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002aac:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002ab2:	edd3 7a00 	vldr	s15, [r3]
 8002ab6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abe:	d400      	bmi.n	8002ac2 <MadgwickAHRSupdateIMU+0x81e>
	{
		System_Yaw = 360.0f + System_Yaw;
	}
}
 8002ac0:	e009      	b.n	8002ad6 <MadgwickAHRSupdateIMU+0x832>
		System_Yaw = 360.0f + System_Yaw;
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002afc <MadgwickAHRSupdateIMU+0x858>
 8002acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002ad2:	edc3 7a00 	vstr	s15, [r3]
}
 8002ad6:	bf00      	nop
 8002ad8:	3770      	adds	r7, #112	; 0x70
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	2400030c 	.word	0x2400030c
 8002ae4:	24000310 	.word	0x24000310
 8002ae8:	42652ee1 	.word	0x42652ee1
 8002aec:	24000308 	.word	0x24000308
 8002af0:	24000224 	.word	0x24000224
 8002af4:	24000228 	.word	0x24000228
 8002af8:	2400022c 	.word	0x2400022c
 8002afc:	43b40000 	.word	0x43b40000

08002b00 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002b0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b0e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b16:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	105a      	asrs	r2, r3, #1
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <invSqrt+0x74>)
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002b30:	f107 030c 	add.w	r3, r7, #12
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002b38:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b44:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002b50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b54:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	ee07 3a90 	vmov	s15, r3
}
 8002b66:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	5f3759df 	.word	0x5f3759df

08002b78 <Double_PID_Calculation_Rate>:
	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result;
	/*********** Double PID Inner End *************/
}

void Double_PID_Calculation_Rate(PIDDouble* axis, float set_point, float value, float rate, float out_error_sum_max, float in_error_sum_max, int out_filter, int in_filter, int is_yaw)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b08b      	sub	sp, #44	; 0x2c
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6278      	str	r0, [r7, #36]	; 0x24
 8002b80:	ed87 0a08 	vstr	s0, [r7, #32]
 8002b84:	edc7 0a07 	vstr	s1, [r7, #28]
 8002b88:	ed87 1a06 	vstr	s2, [r7, #24]
 8002b8c:	edc7 1a05 	vstr	s3, [r7, #20]
 8002b90:	ed87 2a04 	vstr	s4, [r7, #16]
 8002b94:	60f9      	str	r1, [r7, #12]
 8002b96:	60ba      	str	r2, [r7, #8]
 8002b98:	607b      	str	r3, [r7, #4]
	/*********** Double PID Outer Begin *************/
	axis->out.reference = set_point;
 8002b9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	axis->out.meas_value = value;
 8002ba8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80

	axis->out.error = axis->out.reference - axis->out.meas_value;
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8002bc2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002bc6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	axis->out.p_result = axis->out.error * axis->out.kp;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	axis->out.error_sum += axis->out.error * DT;
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002bf2:	eddf 6a97 	vldr	s13, [pc, #604]	; 8002e50 <Double_PID_Calculation_Rate+0x2d8>
 8002bf6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

	axis->out.error_sum_max = out_error_sum_max;
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	axis->out.error_sum_min = -out_error_sum_max;
 8002c0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c10:	eef1 7a67 	vneg.f32	s15, s15
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
	if(axis->out.error_sum > axis->out.error_sum_max) axis->out.error_sum = axis->out.error_sum_max;
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8002c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2e:	dd06      	ble.n	8002c3e <Double_PID_Calculation_Rate+0xc6>
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002c3c:	e010      	b.n	8002c60 <Double_PID_Calculation_Rate+0xe8>
	else if(axis->out.error_sum < axis->out.error_sum_min) axis->out.error_sum = axis->out.error_sum_min;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8002c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c52:	d505      	bpl.n	8002c60 <Double_PID_Calculation_Rate+0xe8>
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	axis->out.i_result = axis->out.error_sum * axis->out.ki;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0

	axis->out.error_deriv = -rate;
 8002c76:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c7a:	eef1 7a67 	vneg.f32	s15, s15
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	axis->out.d_result = axis->out.error_deriv * axis->out.kd;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8002ca6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
	/*********** Double PID Outer End *************/

	/*********** Double PID Inner Begin *************/
	axis->in.reference = axis->out.pid_result;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8002cc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	ed83 7b04 	vstr	d7, [r3, #16]
	axis->in.meas_value = rate;
 8002cca:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	ed83 7b06 	vstr	d7, [r3, #24]

	axis->in.error = axis->in.reference - axis->in.meas_value;
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	ed93 6b04 	vldr	d6, [r3, #16]
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	ed93 7b06 	vldr	d7, [r3, #24]
 8002ce4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ce8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	axis->in.p_result = axis->in.error * axis->in.kp;
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002d14:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002e50 <Double_PID_Calculation_Rate+0x2d8>
 8002d18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	axis->in.error_sum_max = in_error_sum_max;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	64da      	str	r2, [r3, #76]	; 0x4c
	axis->in.error_sum_min = -in_error_sum_max;
 8002d2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d30:	eef1 7a67 	vneg.f32	s15, s15
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	if(axis->in.error_sum > axis->in.error_sum_max) axis->in.error_sum = axis->in.error_sum_max;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002d46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4e:	dd04      	ble.n	8002d5a <Double_PID_Calculation_Rate+0x1e2>
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40
 8002d58:	e00e      	b.n	8002d78 <Double_PID_Calculation_Rate+0x200>
	else if(axis->in.error_sum < axis->in.error_sum_min) axis->in.error_sum = axis->in.error_sum_min;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6e:	d503      	bpl.n	8002d78 <Double_PID_Calculation_Rate+0x200>
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
	axis->in.i_result = axis->in.error_sum * axis->in.ki;
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

	axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	ed93 6b06 	vldr	d6, [r3, #24]
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	ed93 7b08 	vldr	d7, [r3, #32]
 8002d9a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002d9e:	eeb1 6b47 	vneg.f64	d6, d7
 8002da2:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8002e48 <Double_PID_Calculation_Rate+0x2d0>
 8002da6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002daa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	axis->in.meas_value_prev = axis->in.meas_value;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dbc:	e9c1 2308 	strd	r2, r3, [r1, #32]

	if(in_filter == 0) axis->in.d_result = axis->in.error_deriv * axis->in.kd;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <Double_PID_Calculation_Rate+0x266>
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 8002ddc:	e01d      	b.n	8002e1a <Double_PID_Calculation_Rate+0x2a2>
	else
	{
		axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002de4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002de8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002df2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002df6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	}

	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result;
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002e26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	/*********** Double PID Inner End *************/
}
 8002e3a:	bf00      	nop
 8002e3c:	372c      	adds	r7, #44	; 0x2c
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	e0000000 	.word	0xe0000000
 8002e4c:	3f60624d 	.word	0x3f60624d
 8002e50:	3b03126f 	.word	0x3b03126f
 8002e54:	00000000 	.word	0x00000000

08002e58 <Single_PID_Calculation>:

void Single_PID_Calculation(PIDDouble* axis, float set_point, float value, float out_error_sum_max, int out_filter, int is_yaw)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6178      	str	r0, [r7, #20]
 8002e60:	ed87 0a04 	vstr	s0, [r7, #16]
 8002e64:	edc7 0a03 	vstr	s1, [r7, #12]
 8002e68:	ed87 1a02 	vstr	s2, [r7, #8]
 8002e6c:	6079      	str	r1, [r7, #4]
 8002e6e:	603a      	str	r2, [r7, #0]
	/*********** Double PID Outer Begin *************/
	axis->out.reference = set_point;	//Set point of outer PID control
 8002e70:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	axis->out.meas_value = value;			//Current Value
 8002e7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
	//error + P output
	axis->out.error = axis->out.reference - axis->out.meas_value;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8002e98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	if(is_yaw == 1)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d128      	bne.n	8002efe <Single_PID_Calculation+0xa6>
	{
		if(axis->out.error > 180.f) axis->out.error -= 360.f;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002eb2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8003068 <Single_PID_Calculation+0x210>
 8002eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebe:	dd0a      	ble.n	8002ed6 <Single_PID_Calculation+0x7e>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002ec6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800306c <Single_PID_Calculation+0x214>
 8002eca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
 8002ed4:	e013      	b.n	8002efe <Single_PID_Calculation+0xa6>
		else if(axis->out.error < -180.f) axis->out.error += 360.f;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002edc:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003070 <Single_PID_Calculation+0x218>
 8002ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee8:	d509      	bpl.n	8002efe <Single_PID_Calculation+0xa6>
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002ef0:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800306c <Single_PID_Calculation+0x214>
 8002ef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	}
	axis->out.p_result = axis->out.error * axis->out.kp;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	axis->out.error_sum += axis->out.error * DT;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002f20:	eddf 6a54 	vldr	s13, [pc, #336]	; 8003074 <Single_PID_Calculation+0x21c>
 8002f24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	// i output
	axis->out.error_sum_max = out_error_sum_max;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	axis->out.error_sum_min = -out_error_sum_max;
 8002f3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f3e:	eef1 7a67 	vneg.f32	s15, s15
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
	if(axis->out.error_sum > axis->out.error_sum_max) axis->out.error_sum = axis->out.error_sum_max;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8002f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5c:	dd06      	ble.n	8002f6c <Single_PID_Calculation+0x114>
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002f6a:	e010      	b.n	8002f8e <Single_PID_Calculation+0x136>
	else if(axis->out.error_sum < axis->out.error_sum_min) axis->out.error_sum = axis->out.error_sum_min;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8002f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f80:	d505      	bpl.n	8002f8e <Single_PID_Calculation+0x136>
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	axis->out.i_result = axis->out.error_sum * axis->out.ki;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
	//d output
	axis->out.error_deriv = -(axis->out.meas_value - axis->out.meas_value_prev) / DT;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8002fb0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002fb4:	eeb1 6b47 	vneg.f64	d6, d7
 8002fb8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8003060 <Single_PID_Calculation+0x208>
 8002fbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002fc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	axis->out.meas_value_prev = axis->out.meas_value;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002fd0:	6979      	ldr	r1, [r7, #20]
 8002fd2:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	if(out_filter == 0) axis->out.d_result = axis->out.error_deriv * axis->out.kd;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <Single_PID_Calculation+0x19c>
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
 8002ff2:	e01d      	b.n	8003030 <Single_PID_Calculation+0x1d8>
	else
	{
		axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.3f + axis->out.error_deriv * 0.7f;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002ffa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003078 <Single_PID_Calculation+0x220>
 8002ffe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8003008:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800307c <Single_PID_Calculation+0x224>
 800300c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
	}
	//result
	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800303c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
	/*********** Double PID Outer End *************/
}
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	f3af 8000 	nop.w
 8003060:	e0000000 	.word	0xe0000000
 8003064:	3f60624d 	.word	0x3f60624d
 8003068:	43340000 	.word	0x43340000
 800306c:	43b40000 	.word	0x43b40000
 8003070:	c3340000 	.word	0xc3340000
 8003074:	3b03126f 	.word	0x3b03126f
 8003078:	3e99999a 	.word	0x3e99999a
 800307c:	3f333333 	.word	0x3f333333

08003080 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	b29b      	uxth	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	4803      	ldr	r0, [pc, #12]	; (80030a4 <_write+0x24>)
 8003096:	f00c ff8d 	bl	800ffb4 <HAL_UART_Transmit_DMA>
	return len;
 800309a:	687b      	ldr	r3, [r7, #4]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	24000ad4 	.word	0x24000ad4

080030a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030ac:	b088      	sub	sp, #32
 80030ae:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
	MPU9250.Gx_Offset = 0.43;
 80030b0:	4baf      	ldr	r3, [pc, #700]	; (8003370 <main+0x2c8>)
 80030b2:	4ab0      	ldr	r2, [pc, #704]	; (8003374 <main+0x2cc>)
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
	MPU9250.Gy_Offset = -0.49;
 80030b6:	4bae      	ldr	r3, [pc, #696]	; (8003370 <main+0x2c8>)
 80030b8:	4aaf      	ldr	r2, [pc, #700]	; (8003378 <main+0x2d0>)
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c
	MPU9250.Gz_Offset = -1.40;
 80030bc:	4bac      	ldr	r3, [pc, #688]	; (8003370 <main+0x2c8>)
 80030be:	4aaf      	ldr	r2, [pc, #700]	; (800337c <main+0x2d4>)
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
	MPU9250.Mx_Offset = 0;
 80030c2:	4bab      	ldr	r3, [pc, #684]	; (8003370 <main+0x2c8>)
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	665a      	str	r2, [r3, #100]	; 0x64
	MPU9250.My_Offset = 0;
 80030ca:	4ba9      	ldr	r3, [pc, #676]	; (8003370 <main+0x2c8>)
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	669a      	str	r2, [r3, #104]	; 0x68
	MPU9250.Mz_Offset = 0;
 80030d2:	4ba7      	ldr	r3, [pc, #668]	; (8003370 <main+0x2c8>)
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030da:	f002 fc4f 	bl	800597c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030de:	f000 fd03 	bl	8003ae8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80030e2:	f000 fd7f 	bl	8003be4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030e6:	f000 ffcd 	bl	8004084 <MX_GPIO_Init>
  MX_DMA_Init();
 80030ea:	f000 ff93 	bl	8004014 <MX_DMA_Init>
  MX_TIM7_Init();
 80030ee:	f000 fec3 	bl	8003e78 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80030f2:	f000 fef7 	bl	8003ee4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80030f6:	f000 fd91 	bl	8003c1c <MX_I2C1_Init>
  MX_SPI1_Init();
 80030fa:	f000 fdcf 	bl	8003c9c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80030fe:	f000 ff3d 	bl	8003f7c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8003102:	f000 fe21 	bl	8003d48 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003106:	2200      	movs	r2, #0
 8003108:	2102      	movs	r1, #2
 800310a:	489d      	ldr	r0, [pc, #628]	; (8003380 <main+0x2d8>)
 800310c:	f005 fe0c 	bl	8008d28 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003110:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003114:	f002 fcc4 	bl	8005aa0 <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003118:	2201      	movs	r2, #1
 800311a:	2102      	movs	r1, #2
 800311c:	4898      	ldr	r0, [pc, #608]	; (8003380 <main+0x2d8>)
 800311e:	f005 fe03 	bl	8008d28 <HAL_GPIO_WritePin>

  //General Timer HAL
  HAL_TIM_Base_Start_IT(&htim7);
 8003122:	4898      	ldr	r0, [pc, #608]	; (8003384 <main+0x2dc>)
 8003124:	f00b fcb8 	bl	800ea98 <HAL_TIM_Base_Start_IT>
  //General PWM LL
//  LL_TIM_EnableCounter(TIM7);
//  LL_TIM_EnableIT_UPDATE(TIM7);

  //USART Channels HAL
  HAL_UART_Receive_DMA(&huart1, &uart1_rx_data, 1); //FTDI
 8003128:	2201      	movs	r2, #1
 800312a:	4997      	ldr	r1, [pc, #604]	; (8003388 <main+0x2e0>)
 800312c:	4897      	ldr	r0, [pc, #604]	; (800338c <main+0x2e4>)
 800312e:	f00c ffc1 	bl	80100b4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, &uart2_rx_data, 1); //Receiver
 8003132:	2201      	movs	r2, #1
 8003134:	4996      	ldr	r1, [pc, #600]	; (8003390 <main+0x2e8>)
 8003136:	4897      	ldr	r0, [pc, #604]	; (8003394 <main+0x2ec>)
 8003138:	f00c ffbc 	bl	80100b4 <HAL_UART_Receive_DMA>

	//Motor PWM HAL
	HAL_TIM_Base_Start_IT(&htim3);
 800313c:	4896      	ldr	r0, [pc, #600]	; (8003398 <main+0x2f0>)
 800313e:	f00b fcab 	bl	800ea98 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8003142:	2100      	movs	r1, #0
 8003144:	4894      	ldr	r0, [pc, #592]	; (8003398 <main+0x2f0>)
 8003146:	f00b fd79 	bl	800ec3c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 800314a:	2104      	movs	r1, #4
 800314c:	4892      	ldr	r0, [pc, #584]	; (8003398 <main+0x2f0>)
 800314e:	f00b fd75 	bl	800ec3c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8003152:	2108      	movs	r1, #8
 8003154:	4890      	ldr	r0, [pc, #576]	; (8003398 <main+0x2f0>)
 8003156:	f00b fd71 	bl	800ec3c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 800315a:	210c      	movs	r1, #12
 800315c:	488e      	ldr	r0, [pc, #568]	; (8003398 <main+0x2f0>)
 800315e:	f00b fd6d 	bl	800ec3c <HAL_TIM_PWM_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8003162:	e009      	b.n	8003178 <main+0xd0>
	{
		if(tim1_20ms_flag == 1)
 8003164:	4b8d      	ldr	r3, [pc, #564]	; (800339c <main+0x2f4>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d105      	bne.n	8003178 <main+0xd0>
		{
			tim1_20ms_flag = 0;
 800316c:	4b8b      	ldr	r3, [pc, #556]	; (800339c <main+0x2f4>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialing \n");
 8003172:	488b      	ldr	r0, [pc, #556]	; (80033a0 <main+0x2f8>)
 8003174:	f00f f988 	bl	8012488 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8003178:	2303      	movs	r3, #3
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	2303      	movs	r3, #3
 800317e:	2203      	movs	r2, #3
 8003180:	2103      	movs	r1, #3
 8003182:	4888      	ldr	r0, [pc, #544]	; (80033a4 <main+0x2fc>)
 8003184:	f7fd fb84 	bl	8000890 <MPU9250_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0ea      	beq.n	8003164 <main+0xbc>
		}
	}
	MPU9250_Bypass(&hi2c1);
 800318e:	4885      	ldr	r0, [pc, #532]	; (80033a4 <main+0x2fc>)
 8003190:	f7fd fc66 	bl	8000a60 <MPU9250_Bypass>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8003194:	e009      	b.n	80031aa <main+0x102>
	{
		if(tim1_20ms_flag == 1)
 8003196:	4b81      	ldr	r3, [pc, #516]	; (800339c <main+0x2f4>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d105      	bne.n	80031aa <main+0x102>
		{
			tim1_20ms_flag = 0;
 800319e:	4b7f      	ldr	r3, [pc, #508]	; (800339c <main+0x2f4>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialing \n");
 80031a4:	4880      	ldr	r0, [pc, #512]	; (80033a8 <main+0x300>)
 80031a6:	f00f f96f 	bl	8012488 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 80031aa:	4971      	ldr	r1, [pc, #452]	; (8003370 <main+0x2c8>)
 80031ac:	487d      	ldr	r0, [pc, #500]	; (80033a4 <main+0x2fc>)
 80031ae:	f7fd fcd7 	bl	8000b60 <MPU9250_AK8963_Setup>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0ee      	beq.n	8003196 <main+0xee>
		}
	}
	MPU9250_Master(&hi2c1);
 80031b8:	487a      	ldr	r0, [pc, #488]	; (80033a4 <main+0x2fc>)
 80031ba:	f7fd fc7f 	bl	8000abc <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 80031be:	4879      	ldr	r0, [pc, #484]	; (80033a4 <main+0x2fc>)
 80031c0:	f7fd fd24 	bl	8000c0c <MPU9250_Slave0_Enable>

	//Initialize MS5611

	//EEPROM
	W25qxx_Init();
 80031c4:	f002 f8aa 	bl	800531c <W25qxx_Init>
	W25qxx_ReadSector(Mag_Calib, 0, 0, 12);
 80031c8:	230c      	movs	r3, #12
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	4877      	ldr	r0, [pc, #476]	; (80033ac <main+0x304>)
 80031d0:	f002 fb48 	bl	8005864 <W25qxx_ReadSector>
	MPU9250.Mx_Offset = *(float*)&Mag_Calib[0];
 80031d4:	4b75      	ldr	r3, [pc, #468]	; (80033ac <main+0x304>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a65      	ldr	r2, [pc, #404]	; (8003370 <main+0x2c8>)
 80031da:	6653      	str	r3, [r2, #100]	; 0x64
	MPU9250.My_Offset = *(float*)&Mag_Calib[4];
 80031dc:	4b74      	ldr	r3, [pc, #464]	; (80033b0 <main+0x308>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a63      	ldr	r2, [pc, #396]	; (8003370 <main+0x2c8>)
 80031e2:	6693      	str	r3, [r2, #104]	; 0x68
	MPU9250.Mz_Offset = *(float*)&Mag_Calib[8];
 80031e4:	4b73      	ldr	r3, [pc, #460]	; (80033b4 <main+0x30c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a61      	ldr	r2, [pc, #388]	; (8003370 <main+0x2c8>)
 80031ea:	66d3      	str	r3, [r2, #108]	; 0x6c

	//Receiver Check
	printf("Receiver Status Check \n"); HAL_Delay(10);
 80031ec:	4872      	ldr	r0, [pc, #456]	; (80033b8 <main+0x310>)
 80031ee:	f00f f94b 	bl	8012488 <puts>
 80031f2:	200a      	movs	r0, #10
 80031f4:	f002 fc54 	bl	8005aa0 <HAL_Delay>
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 80031f8:	e011      	b.n	800321e <main+0x176>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2102      	movs	r1, #2
 80031fe:	4860      	ldr	r0, [pc, #384]	; (8003380 <main+0x2d8>)
 8003200:	f005 fd92 	bl	8008d28 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003204:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003208:	f002 fc4a 	bl	8005aa0 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800320c:	2201      	movs	r2, #1
 800320e:	2102      	movs	r1, #2
 8003210:	485b      	ldr	r0, [pc, #364]	; (8003380 <main+0x2d8>)
 8003212:	f005 fd89 	bl	8008d28 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003216:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800321a:	f002 fc41 	bl	8005aa0 <HAL_Delay>
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 800321e:	4b67      	ldr	r3, [pc, #412]	; (80033bc <main+0x314>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f001 fdce 	bl	8004dc4 <Is_iBus_Received>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0e5      	beq.n	80031fa <main+0x152>
	}
	while(Is_Throttle_Min() == 0)
 800322e:	e01d      	b.n	800326c <main+0x1c4>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003230:	2200      	movs	r2, #0
 8003232:	2102      	movs	r1, #2
 8003234:	4852      	ldr	r0, [pc, #328]	; (8003380 <main+0x2d8>)
 8003236:	f005 fd77 	bl	8008d28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_GPIO_Port, GPIO_PIN_SET);
 800323a:	2201      	movs	r2, #1
 800323c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003240:	485f      	ldr	r0, [pc, #380]	; (80033c0 <main+0x318>)
 8003242:	f005 fd71 	bl	8008d28 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003246:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800324a:	f002 fc29 	bl	8005aa0 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800324e:	2201      	movs	r2, #1
 8003250:	2102      	movs	r1, #2
 8003252:	484b      	ldr	r0, [pc, #300]	; (8003380 <main+0x2d8>)
 8003254:	f005 fd68 	bl	8008d28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_GPIO_Port, GPIO_PIN_RESET);
 8003258:	2200      	movs	r2, #0
 800325a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800325e:	4858      	ldr	r0, [pc, #352]	; (80033c0 <main+0x318>)
 8003260:	f005 fd62 	bl	8008d28 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003264:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003268:	f002 fc1a 	bl	8005aa0 <HAL_Delay>
	while(Is_Throttle_Min() == 0)
 800326c:	f001 fdec 	bl	8004e48 <Is_Throttle_Min>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0dc      	beq.n	8003230 <main+0x188>
	}
	printf("Receiver OK \n"); HAL_Delay(10);
 8003276:	4853      	ldr	r0, [pc, #332]	; (80033c4 <main+0x31c>)
 8003278:	f00f f906 	bl	8012488 <puts>
 800327c:	200a      	movs	r0, #10
 800327e:	f002 fc0f 	bl	8005aa0 <HAL_Delay>

	//ESC Calibration
	if(iBus.SwB == 2000 && iBus.SwC == 2000)
 8003282:	4b51      	ldr	r3, [pc, #324]	; (80033c8 <main+0x320>)
 8003284:	895b      	ldrh	r3, [r3, #10]
 8003286:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800328a:	d111      	bne.n	80032b0 <main+0x208>
 800328c:	4b4e      	ldr	r3, [pc, #312]	; (80033c8 <main+0x320>)
 800328e:	899b      	ldrh	r3, [r3, #12]
 8003290:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003294:	d10c      	bne.n	80032b0 <main+0x208>
	{
		ESC_Calibration();
 8003296:	f001 f87f 	bl	8004398 <ESC_Calibration>
		while(iBus.SwB != 1000) Is_iBus_Received(ibus_rx_cplt_flag);
 800329a:	e004      	b.n	80032a6 <main+0x1fe>
 800329c:	4b47      	ldr	r3, [pc, #284]	; (80033bc <main+0x314>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f001 fd8f 	bl	8004dc4 <Is_iBus_Received>
 80032a6:	4b48      	ldr	r3, [pc, #288]	; (80033c8 <main+0x320>)
 80032a8:	895b      	ldrh	r3, [r3, #10]
 80032aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ae:	d1f5      	bne.n	800329c <main+0x1f4>
	}

	while (1)
	{
		//UART Message Check
		Receive_Command();
 80032b0:	f001 fd10 	bl	8004cd4 <Receive_Command>
		Compass_Calibration(mag_calibration_enable);
 80032b4:	4b45      	ldr	r3, [pc, #276]	; (80033cc <main+0x324>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 ff7f 	bl	80041bc <Compass_Calibration>

		//Receiver Channel Check
		Is_iBus_Received(ibus_rx_cplt_flag);
 80032be:	4b3f      	ldr	r3, [pc, #252]	; (80033bc <main+0x314>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 fd7e 	bl	8004dc4 <Is_iBus_Received>
		if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 80032c8:	4b3f      	ldr	r3, [pc, #252]	; (80033c8 <main+0x320>)
 80032ca:	891b      	ldrh	r3, [r3, #8]
 80032cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80032d0:	d111      	bne.n	80032f6 <main+0x24e>
 80032d2:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <main+0x328>)
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80032da:	d00c      	beq.n	80032f6 <main+0x24e>
		{
			if(iBus.LV < 1010)
 80032dc:	4b3a      	ldr	r3, [pc, #232]	; (80033c8 <main+0x320>)
 80032de:	889b      	ldrh	r3, [r3, #4]
 80032e0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d806      	bhi.n	80032f6 <main+0x24e>
			{
				motor_arming_flag = 1;
 80032e8:	4b3a      	ldr	r3, [pc, #232]	; (80033d4 <main+0x32c>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
				yaw_heading_reference = System_Yaw;
 80032ee:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <main+0x330>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a3a      	ldr	r2, [pc, #232]	; (80033dc <main+0x334>)
 80032f4:	6013      	str	r3, [r2, #0]
			}
		}
		iBus_SwA_Prev = iBus.SwA;
 80032f6:	4b34      	ldr	r3, [pc, #208]	; (80033c8 <main+0x320>)
 80032f8:	891a      	ldrh	r2, [r3, #8]
 80032fa:	4b35      	ldr	r3, [pc, #212]	; (80033d0 <main+0x328>)
 80032fc:	801a      	strh	r2, [r3, #0]
		if(iBus.SwA != 2000)
 80032fe:	4b32      	ldr	r3, [pc, #200]	; (80033c8 <main+0x320>)
 8003300:	891b      	ldrh	r3, [r3, #8]
 8003302:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003306:	d002      	beq.n	800330e <main+0x266>
		{
			motor_arming_flag = 0;
 8003308:	4b32      	ldr	r3, [pc, #200]	; (80033d4 <main+0x32c>)
 800330a:	2200      	movs	r2, #0
 800330c:	701a      	strb	r2, [r3, #0]
		}
		if(motor_arming_flag == 1)
 800330e:	4b31      	ldr	r3, [pc, #196]	; (80033d4 <main+0x32c>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	f040 80b7 	bne.w	8003486 <main+0x3de>
		{
			if(iBus_failsafe == 0)
 8003318:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <main+0x338>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 80a1 	bne.w	8003464 <main+0x3bc>
			{
				if(iBus.LV > 1010)
 8003322:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <main+0x320>)
 8003324:	889b      	ldrh	r3, [r3, #4]
 8003326:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800332a:	4293      	cmp	r3, r2
 800332c:	f240 8089 	bls.w	8003442 <main+0x39a>
				{
					TIM3->CCR1 = ccr1 > 20000 ? 19900 : ccr1 < 10000 ? 10000 : ccr1;
 8003330:	4b2c      	ldr	r3, [pc, #176]	; (80033e4 <main+0x33c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003338:	4293      	cmp	r3, r2
 800333a:	d807      	bhi.n	800334c <main+0x2a4>
 800333c:	4b29      	ldr	r3, [pc, #164]	; (80033e4 <main+0x33c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f242 7210 	movw	r2, #10000	; 0x2710
 8003344:	4293      	cmp	r3, r2
 8003346:	bf38      	it	cc
 8003348:	4613      	movcc	r3, r2
 800334a:	e001      	b.n	8003350 <main+0x2a8>
 800334c:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 8003350:	4a25      	ldr	r2, [pc, #148]	; (80033e8 <main+0x340>)
 8003352:	6353      	str	r3, [r2, #52]	; 0x34
					TIM3->CCR2 = ccr2 > 20000 ? 19900 : ccr2 < 10000 ? 10000 : ccr2;
 8003354:	4b25      	ldr	r3, [pc, #148]	; (80033ec <main+0x344>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f644 6220 	movw	r2, #20000	; 0x4e20
 800335c:	4293      	cmp	r3, r2
 800335e:	d847      	bhi.n	80033f0 <main+0x348>
 8003360:	4b22      	ldr	r3, [pc, #136]	; (80033ec <main+0x344>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f242 7210 	movw	r2, #10000	; 0x2710
 8003368:	4293      	cmp	r3, r2
 800336a:	bf38      	it	cc
 800336c:	4613      	movcc	r3, r2
 800336e:	e041      	b.n	80033f4 <main+0x34c>
 8003370:	24000274 	.word	0x24000274
 8003374:	3edc28f6 	.word	0x3edc28f6
 8003378:	befae148 	.word	0xbefae148
 800337c:	bfb33333 	.word	0xbfb33333
 8003380:	58020000 	.word	0x58020000
 8003384:	24000d04 	.word	0x24000d04
 8003388:	24000240 	.word	0x24000240
 800338c:	24000ad4 	.word	0x24000ad4
 8003390:	24000242 	.word	0x24000242
 8003394:	24000c68 	.word	0x24000c68
 8003398:	24000990 	.word	0x24000990
 800339c:	2400023e 	.word	0x2400023e
 80033a0:	08014df8 	.word	0x08014df8
 80033a4:	24000944 	.word	0x24000944
 80033a8:	08014e0c 	.word	0x08014e0c
 80033ac:	24000cf8 	.word	0x24000cf8
 80033b0:	24000cfc 	.word	0x24000cfc
 80033b4:	24000d00 	.word	0x24000d00
 80033b8:	08014e20 	.word	0x08014e20
 80033bc:	24000243 	.word	0x24000243
 80033c0:	58021000 	.word	0x58021000
 80033c4:	08014e38 	.word	0x08014e38
 80033c8:	24000258 	.word	0x24000258
 80033cc:	24000231 	.word	0x24000231
 80033d0:	24000234 	.word	0x24000234
 80033d4:	24000214 	.word	0x24000214
 80033d8:	24000308 	.word	0x24000308
 80033dc:	24000238 	.word	0x24000238
 80033e0:	2400026f 	.word	0x2400026f
 80033e4:	24000940 	.word	0x24000940
 80033e8:	40000400 	.word	0x40000400
 80033ec:	24000acc 	.word	0x24000acc
 80033f0:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 80033f4:	4a76      	ldr	r2, [pc, #472]	; (80035d0 <main+0x528>)
 80033f6:	6393      	str	r3, [r2, #56]	; 0x38
					TIM3->CCR3 = ccr3 > 20000 ? 19900 : ccr3 < 10000 ? 10000 : ccr3;
 80033f8:	4b76      	ldr	r3, [pc, #472]	; (80035d4 <main+0x52c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003400:	4293      	cmp	r3, r2
 8003402:	d807      	bhi.n	8003414 <main+0x36c>
 8003404:	4b73      	ldr	r3, [pc, #460]	; (80035d4 <main+0x52c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f242 7210 	movw	r2, #10000	; 0x2710
 800340c:	4293      	cmp	r3, r2
 800340e:	bf38      	it	cc
 8003410:	4613      	movcc	r3, r2
 8003412:	e001      	b.n	8003418 <main+0x370>
 8003414:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 8003418:	4a6d      	ldr	r2, [pc, #436]	; (80035d0 <main+0x528>)
 800341a:	63d3      	str	r3, [r2, #60]	; 0x3c
					TIM3->CCR4 = ccr4 > 20000 ? 19900 : ccr4 < 10000 ? 10000 : ccr4;
 800341c:	4b6e      	ldr	r3, [pc, #440]	; (80035d8 <main+0x530>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003424:	4293      	cmp	r3, r2
 8003426:	d807      	bhi.n	8003438 <main+0x390>
 8003428:	4b6b      	ldr	r3, [pc, #428]	; (80035d8 <main+0x530>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003430:	4293      	cmp	r3, r2
 8003432:	bf38      	it	cc
 8003434:	4613      	movcc	r3, r2
 8003436:	e001      	b.n	800343c <main+0x394>
 8003438:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 800343c:	4a64      	ldr	r2, [pc, #400]	; (80035d0 <main+0x528>)
 800343e:	6413      	str	r3, [r2, #64]	; 0x40
 8003440:	e031      	b.n	80034a6 <main+0x3fe>
				}
				else
				{
					TIM3->CCR1 = 10000;
 8003442:	4b63      	ldr	r3, [pc, #396]	; (80035d0 <main+0x528>)
 8003444:	f242 7210 	movw	r2, #10000	; 0x2710
 8003448:	635a      	str	r2, [r3, #52]	; 0x34
					TIM3->CCR2 = 10000;
 800344a:	4b61      	ldr	r3, [pc, #388]	; (80035d0 <main+0x528>)
 800344c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
					TIM3->CCR3 = 10000;
 8003452:	4b5f      	ldr	r3, [pc, #380]	; (80035d0 <main+0x528>)
 8003454:	f242 7210 	movw	r2, #10000	; 0x2710
 8003458:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM3->CCR4 = 10000;
 800345a:	4b5d      	ldr	r3, [pc, #372]	; (80035d0 <main+0x528>)
 800345c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
 8003462:	e020      	b.n	80034a6 <main+0x3fe>
				}
			}
			else
			{
				TIM3->CCR1 = 10000;
 8003464:	4b5a      	ldr	r3, [pc, #360]	; (80035d0 <main+0x528>)
 8003466:	f242 7210 	movw	r2, #10000	; 0x2710
 800346a:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3->CCR2 = 10000;
 800346c:	4b58      	ldr	r3, [pc, #352]	; (80035d0 <main+0x528>)
 800346e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003472:	639a      	str	r2, [r3, #56]	; 0x38
				TIM3->CCR3 = 10000;
 8003474:	4b56      	ldr	r3, [pc, #344]	; (80035d0 <main+0x528>)
 8003476:	f242 7210 	movw	r2, #10000	; 0x2710
 800347a:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM3->CCR4 = 10000;
 800347c:	4b54      	ldr	r3, [pc, #336]	; (80035d0 <main+0x528>)
 800347e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
 8003484:	e00f      	b.n	80034a6 <main+0x3fe>
			}
		}
		else
		{
			TIM3->CCR1 = 10000;
 8003486:	4b52      	ldr	r3, [pc, #328]	; (80035d0 <main+0x528>)
 8003488:	f242 7210 	movw	r2, #10000	; 0x2710
 800348c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 10000;
 800348e:	4b50      	ldr	r3, [pc, #320]	; (80035d0 <main+0x528>)
 8003490:	f242 7210 	movw	r2, #10000	; 0x2710
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = 10000;
 8003496:	4b4e      	ldr	r3, [pc, #312]	; (80035d0 <main+0x528>)
 8003498:	f242 7210 	movw	r2, #10000	; 0x2710
 800349c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3->CCR4 = 10000;
 800349e:	4b4c      	ldr	r3, [pc, #304]	; (80035d0 <main+0x528>)
 80034a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
		}

		//Read MPU9250 + Motor PID
		if(tim1_2ms_flag == 1)
 80034a6:	4b4d      	ldr	r3, [pc, #308]	; (80035dc <main+0x534>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	f040 8210 	bne.w	80038d0 <main+0x828>
		{
			tim1_2ms_flag = 0;
 80034b0:	4b4a      	ldr	r3, [pc, #296]	; (80035dc <main+0x534>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	701a      	strb	r2, [r3, #0]
			MPU9250_Read_All(&hi2c1);
 80034b6:	484a      	ldr	r0, [pc, #296]	; (80035e0 <main+0x538>)
 80034b8:	f7fd fbe8 	bl	8000c8c <MPU9250_Read_All>
			MPU9250_Parsing(&MPU9250);
 80034bc:	4849      	ldr	r0, [pc, #292]	; (80035e4 <main+0x53c>)
 80034be:	f7fd fbf9 	bl	8000cb4 <MPU9250_Parsing>
			MadgwickAHRSupdate(MPU9250.Gx_Rad, MPU9250.Gy_Rad, MPU9250.Gz_Rad, MPU9250.Ax, MPU9250.Ay, MPU9250.Az, MPU9250.Mx, MPU9250.My, MPU9250.Mz);
 80034c2:	4b48      	ldr	r3, [pc, #288]	; (80035e4 <main+0x53c>)
 80034c4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80034c8:	4b46      	ldr	r3, [pc, #280]	; (80035e4 <main+0x53c>)
 80034ca:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80034ce:	4b45      	ldr	r3, [pc, #276]	; (80035e4 <main+0x53c>)
 80034d0:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80034d4:	4b43      	ldr	r3, [pc, #268]	; (80035e4 <main+0x53c>)
 80034d6:	ed93 6a02 	vldr	s12, [r3, #8]
 80034da:	4b42      	ldr	r3, [pc, #264]	; (80035e4 <main+0x53c>)
 80034dc:	edd3 5a03 	vldr	s11, [r3, #12]
 80034e0:	4b40      	ldr	r3, [pc, #256]	; (80035e4 <main+0x53c>)
 80034e2:	ed93 5a04 	vldr	s10, [r3, #16]
 80034e6:	4b3f      	ldr	r3, [pc, #252]	; (80035e4 <main+0x53c>)
 80034e8:	edd3 4a1c 	vldr	s9, [r3, #112]	; 0x70
 80034ec:	4b3d      	ldr	r3, [pc, #244]	; (80035e4 <main+0x53c>)
 80034ee:	edd3 3a1d 	vldr	s7, [r3, #116]	; 0x74
 80034f2:	4b3c      	ldr	r3, [pc, #240]	; (80035e4 <main+0x53c>)
 80034f4:	ed93 4a1e 	vldr	s8, [r3, #120]	; 0x78
 80034f8:	eeb0 3a64 	vmov.f32	s6, s9
 80034fc:	eef0 2a45 	vmov.f32	s5, s10
 8003500:	eeb0 2a65 	vmov.f32	s4, s11
 8003504:	eef0 1a46 	vmov.f32	s3, s12
 8003508:	eeb0 1a66 	vmov.f32	s2, s13
 800350c:	eef0 0a47 	vmov.f32	s1, s14
 8003510:	eeb0 0a67 	vmov.f32	s0, s15
 8003514:	f7fd feb8 	bl	8001288 <MadgwickAHRSupdate>
			Double_PID_Calculation_Rate(&roll,(iBus.LH - 1500) * 0.7 ,System_Roll, MPU9250.Gx, 1000, 500, 0, 1, 0);
 8003518:	4b33      	ldr	r3, [pc, #204]	; (80035e8 <main+0x540>)
 800351a:	88db      	ldrh	r3, [r3, #6]
 800351c:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8003520:	ee07 3a90 	vmov	s15, r3
 8003524:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003528:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80035c8 <main+0x520>
 800352c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003530:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003534:	4b2d      	ldr	r3, [pc, #180]	; (80035ec <main+0x544>)
 8003536:	ed93 7a00 	vldr	s14, [r3]
 800353a:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <main+0x53c>)
 800353c:	edd3 6a07 	vldr	s13, [r3, #28]
 8003540:	2300      	movs	r3, #0
 8003542:	2201      	movs	r2, #1
 8003544:	2100      	movs	r1, #0
 8003546:	ed9f 2a2a 	vldr	s4, [pc, #168]	; 80035f0 <main+0x548>
 800354a:	eddf 1a2a 	vldr	s3, [pc, #168]	; 80035f4 <main+0x54c>
 800354e:	eeb0 1a66 	vmov.f32	s2, s13
 8003552:	eef0 0a47 	vmov.f32	s1, s14
 8003556:	eeb0 0a67 	vmov.f32	s0, s15
 800355a:	4827      	ldr	r0, [pc, #156]	; (80035f8 <main+0x550>)
 800355c:	f7ff fb0c 	bl	8002b78 <Double_PID_Calculation_Rate>
			Double_PID_Calculation_Rate(&pitch, -(iBus.LH - 1500) * 0.7,System_Pitch, MPU9250.Gy, 1000, 500, 0, 1, 0);
 8003560:	4b21      	ldr	r3, [pc, #132]	; (80035e8 <main+0x540>)
 8003562:	88db      	ldrh	r3, [r3, #6]
 8003564:	461a      	mov	r2, r3
 8003566:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	ee07 3a90 	vmov	s15, r3
 8003570:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003574:	ed9f 6b14 	vldr	d6, [pc, #80]	; 80035c8 <main+0x520>
 8003578:	ee27 7b06 	vmul.f64	d7, d7, d6
 800357c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003580:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <main+0x554>)
 8003582:	ed93 7a00 	vldr	s14, [r3]
 8003586:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <main+0x53c>)
 8003588:	edd3 6a08 	vldr	s13, [r3, #32]
 800358c:	2300      	movs	r3, #0
 800358e:	2201      	movs	r2, #1
 8003590:	2100      	movs	r1, #0
 8003592:	ed9f 2a17 	vldr	s4, [pc, #92]	; 80035f0 <main+0x548>
 8003596:	eddf 1a17 	vldr	s3, [pc, #92]	; 80035f4 <main+0x54c>
 800359a:	eeb0 1a66 	vmov.f32	s2, s13
 800359e:	eef0 0a47 	vmov.f32	s1, s14
 80035a2:	eeb0 0a67 	vmov.f32	s0, s15
 80035a6:	4816      	ldr	r0, [pc, #88]	; (8003600 <main+0x558>)
 80035a8:	f7ff fae6 	bl	8002b78 <Double_PID_Calculation_Rate>

			if(iBus.LH > 1480 && iBus.LH < 1520) is_yaw_middle = 1;
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <main+0x540>)
 80035ae:	88db      	ldrh	r3, [r3, #6]
 80035b0:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 80035b4:	d928      	bls.n	8003608 <main+0x560>
 80035b6:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <main+0x540>)
 80035b8:	88db      	ldrh	r3, [r3, #6]
 80035ba:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 80035be:	d223      	bcs.n	8003608 <main+0x560>
 80035c0:	4b10      	ldr	r3, [pc, #64]	; (8003604 <main+0x55c>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	e022      	b.n	800360e <main+0x566>
 80035c8:	66666666 	.word	0x66666666
 80035cc:	3fe66666 	.word	0x3fe66666
 80035d0:	40000400 	.word	0x40000400
 80035d4:	24000c64 	.word	0x24000c64
 80035d8:	24000ad0 	.word	0x24000ad0
 80035dc:	2400023c 	.word	0x2400023c
 80035e0:	24000944 	.word	0x24000944
 80035e4:	24000274 	.word	0x24000274
 80035e8:	24000258 	.word	0x24000258
 80035ec:	2400030c 	.word	0x2400030c
 80035f0:	43fa0000 	.word	0x43fa0000
 80035f4:	447a0000 	.word	0x447a0000
 80035f8:	24000728 	.word	0x24000728
 80035fc:	24000310 	.word	0x24000310
 8003600:	24000658 	.word	0x24000658
 8003604:	24000232 	.word	0x24000232
			else is_yaw_middle = 0;
 8003608:	4bd2      	ldr	r3, [pc, #840]	; (8003954 <main+0x8ac>)
 800360a:	2200      	movs	r2, #0
 800360c:	701a      	strb	r2, [r3, #0]

			if(is_yaw_middle == 0)
 800360e:	4bd1      	ldr	r3, [pc, #836]	; (8003954 <main+0x8ac>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f040 80af 	bne.w	8003776 <main+0x6ce>
			{
				yaw_heading_reference = System_Yaw;
 8003618:	4bcf      	ldr	r3, [pc, #828]	; (8003958 <main+0x8b0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4acf      	ldr	r2, [pc, #828]	; (800395c <main+0x8b4>)
 800361e:	6013      	str	r3, [r2, #0]
				Single_PID_Calculation(&yaw_rate, (iBus.LH-1500), MPU9250.Gz, 200,1 ,1);
 8003620:	4bcf      	ldr	r3, [pc, #828]	; (8003960 <main+0x8b8>)
 8003622:	88db      	ldrh	r3, [r3, #6]
 8003624:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8003628:	ee07 3a90 	vmov	s15, r3
 800362c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003630:	4bcc      	ldr	r3, [pc, #816]	; (8003964 <main+0x8bc>)
 8003632:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003636:	2201      	movs	r2, #1
 8003638:	2101      	movs	r1, #1
 800363a:	ed9f 1acb 	vldr	s2, [pc, #812]	; 8003968 <main+0x8c0>
 800363e:	eef0 0a47 	vmov.f32	s1, s14
 8003642:	eeb0 0a67 	vmov.f32	s0, s15
 8003646:	48c9      	ldr	r0, [pc, #804]	; (800396c <main+0x8c4>)
 8003648:	f7ff fc06 	bl	8002e58 <Single_PID_Calculation>
				ccr1 = 10000 + (iBus.LV-1000)*10 + roll.in.pid_result + pitch.in.pid_result - yaw_rate.out.pid_result;
 800364c:	4bc4      	ldr	r3, [pc, #784]	; (8003960 <main+0x8b8>)
 800364e:	889b      	ldrh	r3, [r3, #4]
 8003650:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	461a      	mov	r2, r3
 800365e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003662:	4413      	add	r3, r2
 8003664:	ee07 3a90 	vmov	s15, r3
 8003668:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800366c:	4bc0      	ldr	r3, [pc, #768]	; (8003970 <main+0x8c8>)
 800366e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003672:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003676:	4bbf      	ldr	r3, [pc, #764]	; (8003974 <main+0x8cc>)
 8003678:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800367c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003680:	4bba      	ldr	r3, [pc, #744]	; (800396c <main+0x8c4>)
 8003682:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8003686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800368a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800368e:	ee17 2a90 	vmov	r2, s15
 8003692:	4bb9      	ldr	r3, [pc, #740]	; (8003978 <main+0x8d0>)
 8003694:	601a      	str	r2, [r3, #0]
				ccr2 = 10000 + (iBus.LV-1000)*10 + roll.in.pid_result - pitch.in.pid_result + yaw_rate.out.pid_result;
 8003696:	4bb2      	ldr	r3, [pc, #712]	; (8003960 <main+0x8b8>)
 8003698:	889b      	ldrh	r3, [r3, #4]
 800369a:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	461a      	mov	r2, r3
 80036a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80036ac:	4413      	add	r3, r2
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036b6:	4bae      	ldr	r3, [pc, #696]	; (8003970 <main+0x8c8>)
 80036b8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80036bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036c0:	4bac      	ldr	r3, [pc, #688]	; (8003974 <main+0x8cc>)
 80036c2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80036c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036ca:	4ba8      	ldr	r3, [pc, #672]	; (800396c <main+0x8c4>)
 80036cc:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80036d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d8:	ee17 2a90 	vmov	r2, s15
 80036dc:	4ba7      	ldr	r3, [pc, #668]	; (800397c <main+0x8d4>)
 80036de:	601a      	str	r2, [r3, #0]
				ccr3 = 10000 + (iBus.LV-1000)*10 - roll.in.pid_result - pitch.in.pid_result + yaw_rate.out.pid_result;
 80036e0:	4b9f      	ldr	r3, [pc, #636]	; (8003960 <main+0x8b8>)
 80036e2:	889b      	ldrh	r3, [r3, #4]
 80036e4:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	461a      	mov	r2, r3
 80036f2:	f242 7310 	movw	r3, #10000	; 0x2710
 80036f6:	4413      	add	r3, r2
 80036f8:	ee07 3a90 	vmov	s15, r3
 80036fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003700:	4b9b      	ldr	r3, [pc, #620]	; (8003970 <main+0x8c8>)
 8003702:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003706:	ee37 7a67 	vsub.f32	s14, s14, s15
 800370a:	4b9a      	ldr	r3, [pc, #616]	; (8003974 <main+0x8cc>)
 800370c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003710:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003714:	4b95      	ldr	r3, [pc, #596]	; (800396c <main+0x8c4>)
 8003716:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 800371a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800371e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003722:	ee17 2a90 	vmov	r2, s15
 8003726:	4b96      	ldr	r3, [pc, #600]	; (8003980 <main+0x8d8>)
 8003728:	601a      	str	r2, [r3, #0]
				ccr4 = 10000 + (iBus.LV-1000)*10 - roll.in.pid_result + pitch.in.pid_result - yaw_rate.out.pid_result;
 800372a:	4b8d      	ldr	r3, [pc, #564]	; (8003960 <main+0x8b8>)
 800372c:	889b      	ldrh	r3, [r3, #4]
 800372e:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	461a      	mov	r2, r3
 800373c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003740:	4413      	add	r3, r2
 8003742:	ee07 3a90 	vmov	s15, r3
 8003746:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800374a:	4b89      	ldr	r3, [pc, #548]	; (8003970 <main+0x8c8>)
 800374c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003750:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003754:	4b87      	ldr	r3, [pc, #540]	; (8003974 <main+0x8cc>)
 8003756:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800375a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800375e:	4b83      	ldr	r3, [pc, #524]	; (800396c <main+0x8c4>)
 8003760:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8003764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800376c:	ee17 2a90 	vmov	r2, s15
 8003770:	4b84      	ldr	r3, [pc, #528]	; (8003984 <main+0x8dc>)
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e0ac      	b.n	80038d0 <main+0x828>
			}
			else
			{
				Double_PID_Calculation_Rate(&yaw_heading, yaw_heading_reference, System_Yaw, MPU9250.Gz, 400, 150, 0, 1, 1);
 8003776:	4b79      	ldr	r3, [pc, #484]	; (800395c <main+0x8b4>)
 8003778:	edd3 7a00 	vldr	s15, [r3]
 800377c:	4b76      	ldr	r3, [pc, #472]	; (8003958 <main+0x8b0>)
 800377e:	ed93 7a00 	vldr	s14, [r3]
 8003782:	4b78      	ldr	r3, [pc, #480]	; (8003964 <main+0x8bc>)
 8003784:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003788:	2301      	movs	r3, #1
 800378a:	2201      	movs	r2, #1
 800378c:	2100      	movs	r1, #0
 800378e:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8003988 <main+0x8e0>
 8003792:	eddf 1a7e 	vldr	s3, [pc, #504]	; 800398c <main+0x8e4>
 8003796:	eeb0 1a66 	vmov.f32	s2, s13
 800379a:	eef0 0a47 	vmov.f32	s1, s14
 800379e:	eeb0 0a67 	vmov.f32	s0, s15
 80037a2:	487b      	ldr	r0, [pc, #492]	; (8003990 <main+0x8e8>)
 80037a4:	f7ff f9e8 	bl	8002b78 <Double_PID_Calculation_Rate>
				ccr1 = 10000 + (iBus.LV-1000)*10 + roll.in.pid_result + pitch.in.pid_result - yaw_heading.in.pid_result;
 80037a8:	4b6d      	ldr	r3, [pc, #436]	; (8003960 <main+0x8b8>)
 80037aa:	889b      	ldrh	r3, [r3, #4]
 80037ac:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	461a      	mov	r2, r3
 80037ba:	f242 7310 	movw	r3, #10000	; 0x2710
 80037be:	4413      	add	r3, r2
 80037c0:	ee07 3a90 	vmov	s15, r3
 80037c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037c8:	4b69      	ldr	r3, [pc, #420]	; (8003970 <main+0x8c8>)
 80037ca:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80037ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037d2:	4b68      	ldr	r3, [pc, #416]	; (8003974 <main+0x8cc>)
 80037d4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80037d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037dc:	4b6c      	ldr	r3, [pc, #432]	; (8003990 <main+0x8e8>)
 80037de:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80037e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ea:	ee17 2a90 	vmov	r2, s15
 80037ee:	4b62      	ldr	r3, [pc, #392]	; (8003978 <main+0x8d0>)
 80037f0:	601a      	str	r2, [r3, #0]
				ccr2 = 10000 + (iBus.LV-1000)*10 + roll.in.pid_result - pitch.in.pid_result + yaw_heading.in.pid_result;
 80037f2:	4b5b      	ldr	r3, [pc, #364]	; (8003960 <main+0x8b8>)
 80037f4:	889b      	ldrh	r3, [r3, #4]
 80037f6:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	461a      	mov	r2, r3
 8003804:	f242 7310 	movw	r3, #10000	; 0x2710
 8003808:	4413      	add	r3, r2
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003812:	4b57      	ldr	r3, [pc, #348]	; (8003970 <main+0x8c8>)
 8003814:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003818:	ee37 7a27 	vadd.f32	s14, s14, s15
 800381c:	4b55      	ldr	r3, [pc, #340]	; (8003974 <main+0x8cc>)
 800381e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003822:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003826:	4b5a      	ldr	r3, [pc, #360]	; (8003990 <main+0x8e8>)
 8003828:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800382c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003834:	ee17 2a90 	vmov	r2, s15
 8003838:	4b50      	ldr	r3, [pc, #320]	; (800397c <main+0x8d4>)
 800383a:	601a      	str	r2, [r3, #0]
				ccr3 = 10000 + (iBus.LV-1000)*10 - roll.in.pid_result - pitch.in.pid_result + yaw_heading.in.pid_result;
 800383c:	4b48      	ldr	r3, [pc, #288]	; (8003960 <main+0x8b8>)
 800383e:	889b      	ldrh	r3, [r3, #4]
 8003840:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	461a      	mov	r2, r3
 800384e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003852:	4413      	add	r3, r2
 8003854:	ee07 3a90 	vmov	s15, r3
 8003858:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800385c:	4b44      	ldr	r3, [pc, #272]	; (8003970 <main+0x8c8>)
 800385e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003862:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003866:	4b43      	ldr	r3, [pc, #268]	; (8003974 <main+0x8cc>)
 8003868:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800386c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003870:	4b47      	ldr	r3, [pc, #284]	; (8003990 <main+0x8e8>)
 8003872:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800387a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800387e:	ee17 2a90 	vmov	r2, s15
 8003882:	4b3f      	ldr	r3, [pc, #252]	; (8003980 <main+0x8d8>)
 8003884:	601a      	str	r2, [r3, #0]
				ccr4 = 10000 + (iBus.LV-1000)*10 - roll.in.pid_result + pitch.in.pid_result - yaw_heading.in.pid_result;
 8003886:	4b36      	ldr	r3, [pc, #216]	; (8003960 <main+0x8b8>)
 8003888:	889b      	ldrh	r3, [r3, #4]
 800388a:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	461a      	mov	r2, r3
 8003898:	f242 7310 	movw	r3, #10000	; 0x2710
 800389c:	4413      	add	r3, r2
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038a6:	4b32      	ldr	r3, [pc, #200]	; (8003970 <main+0x8c8>)
 80038a8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80038ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038b0:	4b30      	ldr	r3, [pc, #192]	; (8003974 <main+0x8cc>)
 80038b2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80038b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038ba:	4b35      	ldr	r3, [pc, #212]	; (8003990 <main+0x8e8>)
 80038bc:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80038c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c8:	ee17 2a90 	vmov	r2, s15
 80038cc:	4b2d      	ldr	r3, [pc, #180]	; (8003984 <main+0x8dc>)
 80038ce:	601a      	str	r2, [r3, #0]
			}
		}

		//Print According to the Input
		if(tim1_20ms_flag == 1)
 80038d0:	4b30      	ldr	r3, [pc, #192]	; (8003994 <main+0x8ec>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	f040 80f6 	bne.w	8003ac6 <main+0xa1e>
		{
			tim1_20ms_flag = 0;
 80038da:	4b2e      	ldr	r3, [pc, #184]	; (8003994 <main+0x8ec>)
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
//			printf("%.2f \t %.2f \t %.2f \t \n", System_Roll, System_Pitch, System_Yaw);

			switch(print_mode)
 80038e0:	4b2d      	ldr	r3, [pc, #180]	; (8003998 <main+0x8f0>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	2b0a      	cmp	r3, #10
 80038e8:	f200 80f0 	bhi.w	8003acc <main+0xa24>
 80038ec:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <main+0x84c>)
 80038ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f2:	bf00      	nop
 80038f4:	08003921 	.word	0x08003921
 80038f8:	08003acd 	.word	0x08003acd
 80038fc:	080039a9 	.word	0x080039a9
 8003900:	080039db 	.word	0x080039db
 8003904:	08003a0d 	.word	0x08003a0d
 8003908:	08003a3f 	.word	0x08003a3f
 800390c:	08003acd 	.word	0x08003acd
 8003910:	08003acd 	.word	0x08003acd
 8003914:	08003acd 	.word	0x08003acd
 8003918:	08003acd 	.word	0x08003acd
 800391c:	08003a71 	.word	0x08003a71
			{
			case 1: printf("%.2f \t %.2f \t %.2f \t \n", System_Roll, System_Pitch, System_Yaw); break; //Roll, Pitch, Yaw
 8003920:	4b1e      	ldr	r3, [pc, #120]	; (800399c <main+0x8f4>)
 8003922:	edd3 7a00 	vldr	s15, [r3]
 8003926:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800392a:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <main+0x8f8>)
 800392c:	edd3 7a00 	vldr	s15, [r3]
 8003930:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003934:	4b08      	ldr	r3, [pc, #32]	; (8003958 <main+0x8b0>)
 8003936:	edd3 6a00 	vldr	s13, [r3]
 800393a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800393e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003942:	ed8d 7b00 	vstr	d7, [sp]
 8003946:	ec53 2b15 	vmov	r2, r3, d5
 800394a:	4816      	ldr	r0, [pc, #88]	; (80039a4 <main+0x8fc>)
 800394c:	f00e fd16 	bl	801237c <iprintf>
 8003950:	e0bd      	b.n	8003ace <main+0xa26>
 8003952:	bf00      	nop
 8003954:	24000232 	.word	0x24000232
 8003958:	24000308 	.word	0x24000308
 800395c:	24000238 	.word	0x24000238
 8003960:	24000258 	.word	0x24000258
 8003964:	24000274 	.word	0x24000274
 8003968:	43480000 	.word	0x43480000
 800396c:	24000318 	.word	0x24000318
 8003970:	24000728 	.word	0x24000728
 8003974:	24000658 	.word	0x24000658
 8003978:	24000940 	.word	0x24000940
 800397c:	24000acc 	.word	0x24000acc
 8003980:	24000c64 	.word	0x24000c64
 8003984:	24000ad0 	.word	0x24000ad0
 8003988:	43160000 	.word	0x43160000
 800398c:	43c80000 	.word	0x43c80000
 8003990:	24000588 	.word	0x24000588
 8003994:	2400023e 	.word	0x2400023e
 8003998:	24000230 	.word	0x24000230
 800399c:	2400030c 	.word	0x2400030c
 80039a0:	24000310 	.word	0x24000310
 80039a4:	08014e48 	.word	0x08014e48
			case 2: /* printf("%.2f \t %.2f \t \m", Alt, Alt_Filt); */ break; //Alt Raw, Alt Filt
			case 3: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Gx, MPU9250.Gy, MPU9250.Gz); break; //Gyro
 80039a8:	4b4a      	ldr	r3, [pc, #296]	; (8003ad4 <main+0xa2c>)
 80039aa:	edd3 7a07 	vldr	s15, [r3, #28]
 80039ae:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80039b2:	4b48      	ldr	r3, [pc, #288]	; (8003ad4 <main+0xa2c>)
 80039b4:	edd3 7a08 	vldr	s15, [r3, #32]
 80039b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039bc:	4b45      	ldr	r3, [pc, #276]	; (8003ad4 <main+0xa2c>)
 80039be:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80039c2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80039c6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80039ca:	ed8d 7b00 	vstr	d7, [sp]
 80039ce:	ec53 2b15 	vmov	r2, r3, d5
 80039d2:	4841      	ldr	r0, [pc, #260]	; (8003ad8 <main+0xa30>)
 80039d4:	f00e fcd2 	bl	801237c <iprintf>
 80039d8:	e079      	b.n	8003ace <main+0xa26>
			case 4: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Ax, MPU9250.Ay, MPU9250.Az); break; //Accel
 80039da:	4b3e      	ldr	r3, [pc, #248]	; (8003ad4 <main+0xa2c>)
 80039dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80039e0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80039e4:	4b3b      	ldr	r3, [pc, #236]	; (8003ad4 <main+0xa2c>)
 80039e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80039ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039ee:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <main+0xa2c>)
 80039f0:	edd3 6a04 	vldr	s13, [r3, #16]
 80039f4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80039f8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80039fc:	ed8d 7b00 	vstr	d7, [sp]
 8003a00:	ec53 2b15 	vmov	r2, r3, d5
 8003a04:	4834      	ldr	r0, [pc, #208]	; (8003ad8 <main+0xa30>)
 8003a06:	f00e fcb9 	bl	801237c <iprintf>
 8003a0a:	e060      	b.n	8003ace <main+0xa26>
			case 5: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Mx, MPU9250.My, MPU9250.Mz); break; //Mag
 8003a0c:	4b31      	ldr	r3, [pc, #196]	; (8003ad4 <main+0xa2c>)
 8003a0e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003a12:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003a16:	4b2f      	ldr	r3, [pc, #188]	; (8003ad4 <main+0xa2c>)
 8003a18:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003a1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a20:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <main+0xa2c>)
 8003a22:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 8003a26:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003a2a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003a2e:	ed8d 7b00 	vstr	d7, [sp]
 8003a32:	ec53 2b15 	vmov	r2, r3, d5
 8003a36:	4828      	ldr	r0, [pc, #160]	; (8003ad8 <main+0xa30>)
 8003a38:	f00e fca0 	bl	801237c <iprintf>
 8003a3c:	e047      	b.n	8003ace <main+0xa26>
			case 6: printf("%f \t %f \t %f \t \n", MPU9250.Mx_Offset, MPU9250.My_Offset, MPU9250.Mz_Offset); break; //Mag_Offset
 8003a3e:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <main+0xa2c>)
 8003a40:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003a44:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003a48:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <main+0xa2c>)
 8003a4a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003a4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a52:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <main+0xa2c>)
 8003a54:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8003a58:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003a5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003a60:	ed8d 7b00 	vstr	d7, [sp]
 8003a64:	ec53 2b15 	vmov	r2, r3, d5
 8003a68:	481c      	ldr	r0, [pc, #112]	; (8003adc <main+0xa34>)
 8003a6a:	f00e fc87 	bl	801237c <iprintf>
 8003a6e:	e02e      	b.n	8003ace <main+0xa26>
			case 11: printf("%d %d %d %d %d %d %d %d %d %d \n", iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.VrA, iBus.VrB, iBus.SwC, iBus.SwD); break; //Mag_Offset
 8003a70:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <main+0xa38>)
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	469c      	mov	ip, r3
 8003a76:	4b1a      	ldr	r3, [pc, #104]	; (8003ae0 <main+0xa38>)
 8003a78:	885b      	ldrh	r3, [r3, #2]
 8003a7a:	469e      	mov	lr, r3
 8003a7c:	4b18      	ldr	r3, [pc, #96]	; (8003ae0 <main+0xa38>)
 8003a7e:	889b      	ldrh	r3, [r3, #4]
 8003a80:	4698      	mov	r8, r3
 8003a82:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <main+0xa38>)
 8003a84:	88db      	ldrh	r3, [r3, #6]
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <main+0xa38>)
 8003a8a:	891b      	ldrh	r3, [r3, #8]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <main+0xa38>)
 8003a90:	895b      	ldrh	r3, [r3, #10]
 8003a92:	4618      	mov	r0, r3
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <main+0xa38>)
 8003a96:	8a1b      	ldrh	r3, [r3, #16]
 8003a98:	461c      	mov	r4, r3
 8003a9a:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <main+0xa38>)
 8003a9c:	8a5b      	ldrh	r3, [r3, #18]
 8003a9e:	461d      	mov	r5, r3
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <main+0xa38>)
 8003aa2:	899b      	ldrh	r3, [r3, #12]
 8003aa4:	461e      	mov	r6, r3
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <main+0xa38>)
 8003aa8:	89db      	ldrh	r3, [r3, #14]
 8003aaa:	9306      	str	r3, [sp, #24]
 8003aac:	9605      	str	r6, [sp, #20]
 8003aae:	9504      	str	r5, [sp, #16]
 8003ab0:	9403      	str	r4, [sp, #12]
 8003ab2:	9002      	str	r0, [sp, #8]
 8003ab4:	9101      	str	r1, [sp, #4]
 8003ab6:	9200      	str	r2, [sp, #0]
 8003ab8:	4643      	mov	r3, r8
 8003aba:	4672      	mov	r2, lr
 8003abc:	4661      	mov	r1, ip
 8003abe:	4809      	ldr	r0, [pc, #36]	; (8003ae4 <main+0xa3c>)
 8003ac0:	f00e fc5c 	bl	801237c <iprintf>
 8003ac4:	e003      	b.n	8003ace <main+0xa26>
			default: break;
			}
		}
 8003ac6:	bf00      	nop
 8003ac8:	f7ff bbf2 	b.w	80032b0 <main+0x208>
			default: break;
 8003acc:	bf00      	nop
	{
 8003ace:	f7ff bbef 	b.w	80032b0 <main+0x208>
 8003ad2:	bf00      	nop
 8003ad4:	24000274 	.word	0x24000274
 8003ad8:	08014e48 	.word	0x08014e48
 8003adc:	08014e60 	.word	0x08014e60
 8003ae0:	24000258 	.word	0x24000258
 8003ae4:	08014e74 	.word	0x08014e74

08003ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b09c      	sub	sp, #112	; 0x70
 8003aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af2:	224c      	movs	r2, #76	; 0x4c
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f00d fff4 	bl	8011ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003afc:	1d3b      	adds	r3, r7, #4
 8003afe:	2220      	movs	r2, #32
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f00d ffee 	bl	8011ae4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003b08:	2002      	movs	r0, #2
 8003b0a:	f007 fb7b 	bl	800b204 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	603b      	str	r3, [r7, #0]
 8003b12:	4b32      	ldr	r3, [pc, #200]	; (8003bdc <SystemClock_Config+0xf4>)
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	4a31      	ldr	r2, [pc, #196]	; (8003bdc <SystemClock_Config+0xf4>)
 8003b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b1c:	6193      	str	r3, [r2, #24]
 8003b1e:	4b2f      	ldr	r3, [pc, #188]	; (8003bdc <SystemClock_Config+0xf4>)
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <SystemClock_Config+0xf8>)
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	4a2c      	ldr	r2, [pc, #176]	; (8003be0 <SystemClock_Config+0xf8>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b34:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <SystemClock_Config+0xf8>)
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	603b      	str	r3, [r7, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003b40:	bf00      	nop
 8003b42:	4b26      	ldr	r3, [pc, #152]	; (8003bdc <SystemClock_Config+0xf4>)
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4e:	d1f8      	bne.n	8003b42 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003b50:	2303      	movs	r3, #3
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b5e:	2340      	movs	r3, #64	; 0x40
 8003b60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b62:	2302      	movs	r3, #2
 8003b64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b66:	2302      	movs	r3, #2
 8003b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8003b6a:	2305      	movs	r3, #5
 8003b6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003b6e:	23c0      	movs	r3, #192	; 0xc0
 8003b70:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003b72:	2302      	movs	r3, #2
 8003b74:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003b76:	2302      	movs	r3, #2
 8003b78:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003b7e:	2308      	movs	r3, #8
 8003b80:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003b82:	2300      	movs	r3, #0
 8003b84:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f007 fb72 	bl	800b278 <HAL_RCC_OscConfig>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003b9a:	f000 fc2b 	bl	80043f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b9e:	233f      	movs	r3, #63	; 0x3f
 8003ba0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003baa:	2308      	movs	r3, #8
 8003bac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003bae:	2340      	movs	r3, #64	; 0x40
 8003bb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003bb2:	2340      	movs	r3, #64	; 0x40
 8003bb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003bbc:	2340      	movs	r3, #64	; 0x40
 8003bbe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003bc0:	1d3b      	adds	r3, r7, #4
 8003bc2:	2104      	movs	r1, #4
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f007 ff67 	bl	800ba98 <HAL_RCC_ClockConfig>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8003bd0:	f000 fc10 	bl	80043f4 <Error_Handler>
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	3770      	adds	r7, #112	; 0x70
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	58024800 	.word	0x58024800
 8003be0:	58000400 	.word	0x58000400

08003be4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b0b0      	sub	sp, #192	; 0xc0
 8003be8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bea:	1d3b      	adds	r3, r7, #4
 8003bec:	22bc      	movs	r2, #188	; 0xbc
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f00d ff77 	bl	8011ae4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8003bf6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003bfa:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c00:	1d3b      	adds	r3, r7, #4
 8003c02:	4618      	mov	r0, r3
 8003c04:	f008 fad4 	bl	800c1b0 <HAL_RCCEx_PeriphCLKConfig>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8003c0e:	f000 fbf1 	bl	80043f4 <Error_Handler>
  }
}
 8003c12:	bf00      	nop
 8003c14:	37c0      	adds	r7, #192	; 0xc0
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c20:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <MX_I2C1_Init+0x74>)
 8003c22:	4a1c      	ldr	r2, [pc, #112]	; (8003c94 <MX_I2C1_Init+0x78>)
 8003c24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <MX_I2C1_Init+0x74>)
 8003c28:	4a1b      	ldr	r2, [pc, #108]	; (8003c98 <MX_I2C1_Init+0x7c>)
 8003c2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003c2c:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <MX_I2C1_Init+0x74>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c32:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <MX_I2C1_Init+0x74>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <MX_I2C1_Init+0x74>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003c3e:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <MX_I2C1_Init+0x74>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c44:	4b12      	ldr	r3, [pc, #72]	; (8003c90 <MX_I2C1_Init+0x74>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c4a:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <MX_I2C1_Init+0x74>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c50:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <MX_I2C1_Init+0x74>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c56:	480e      	ldr	r0, [pc, #56]	; (8003c90 <MX_I2C1_Init+0x74>)
 8003c58:	f005 f880 	bl	8008d5c <HAL_I2C_Init>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003c62:	f000 fbc7 	bl	80043f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c66:	2100      	movs	r1, #0
 8003c68:	4809      	ldr	r0, [pc, #36]	; (8003c90 <MX_I2C1_Init+0x74>)
 8003c6a:	f007 fa33 	bl	800b0d4 <HAL_I2CEx_ConfigAnalogFilter>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003c74:	f000 fbbe 	bl	80043f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4805      	ldr	r0, [pc, #20]	; (8003c90 <MX_I2C1_Init+0x74>)
 8003c7c:	f007 fa75 	bl	800b16a <HAL_I2CEx_ConfigDigitalFilter>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003c86:	f000 fbb5 	bl	80043f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	24000944 	.word	0x24000944
 8003c94:	40005400 	.word	0x40005400
 8003c98:	00b03fdb 	.word	0x00b03fdb

08003c9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003ca2:	4a28      	ldr	r2, [pc, #160]	; (8003d44 <MX_SPI1_Init+0xa8>)
 8003ca4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ca6:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003ca8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003cac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cae:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cb4:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003cb6:	2207      	movs	r2, #7
 8003cb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cba:	4b21      	ldr	r3, [pc, #132]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cc0:	4b1f      	ldr	r3, [pc, #124]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cc6:	4b1e      	ldr	r3, [pc, #120]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003cc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ccc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003cce:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003cd0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003cd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cdc:	4b18      	ldr	r3, [pc, #96]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce2:	4b17      	ldr	r3, [pc, #92]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003ce8:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003cee:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003cf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cf4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003cfc:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003d02:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003d08:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003d14:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003d1a:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003d20:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d2c:	4804      	ldr	r0, [pc, #16]	; (8003d40 <MX_SPI1_Init+0xa4>)
 8003d2e:	f009 fda1 	bl	800d874 <HAL_SPI_Init>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003d38:	f000 fb5c 	bl	80043f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d3c:	bf00      	nop
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	24000bdc 	.word	0x24000bdc
 8003d44:	40013000 	.word	0x40013000

08003d48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08e      	sub	sp, #56	; 0x38
 8003d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	609a      	str	r2, [r3, #8]
 8003d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d5c:	f107 031c 	add.w	r3, r7, #28
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d68:	463b      	mov	r3, r7
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	605a      	str	r2, [r3, #4]
 8003d70:	609a      	str	r2, [r3, #8]
 8003d72:	60da      	str	r2, [r3, #12]
 8003d74:	611a      	str	r2, [r3, #16]
 8003d76:	615a      	str	r2, [r3, #20]
 8003d78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d7a:	4b3d      	ldr	r3, [pc, #244]	; (8003e70 <MX_TIM3_Init+0x128>)
 8003d7c:	4a3d      	ldr	r2, [pc, #244]	; (8003e74 <MX_TIM3_Init+0x12c>)
 8003d7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8003d80:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <MX_TIM3_Init+0x128>)
 8003d82:	2217      	movs	r2, #23
 8003d84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d86:	4b3a      	ldr	r3, [pc, #232]	; (8003e70 <MX_TIM3_Init+0x128>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8003d8c:	4b38      	ldr	r3, [pc, #224]	; (8003e70 <MX_TIM3_Init+0x128>)
 8003d8e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003d92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d94:	4b36      	ldr	r3, [pc, #216]	; (8003e70 <MX_TIM3_Init+0x128>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d9a:	4b35      	ldr	r3, [pc, #212]	; (8003e70 <MX_TIM3_Init+0x128>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003da0:	4833      	ldr	r0, [pc, #204]	; (8003e70 <MX_TIM3_Init+0x128>)
 8003da2:	f00a fe22 	bl	800e9ea <HAL_TIM_Base_Init>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003dac:	f000 fb22 	bl	80043f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dba:	4619      	mov	r1, r3
 8003dbc:	482c      	ldr	r0, [pc, #176]	; (8003e70 <MX_TIM3_Init+0x128>)
 8003dbe:	f00b fabb 	bl	800f338 <HAL_TIM_ConfigClockSource>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003dc8:	f000 fb14 	bl	80043f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003dcc:	4828      	ldr	r0, [pc, #160]	; (8003e70 <MX_TIM3_Init+0x128>)
 8003dce:	f00a fed3 	bl	800eb78 <HAL_TIM_PWM_Init>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003dd8:	f000 fb0c 	bl	80043f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003de4:	f107 031c 	add.w	r3, r7, #28
 8003de8:	4619      	mov	r1, r3
 8003dea:	4821      	ldr	r0, [pc, #132]	; (8003e70 <MX_TIM3_Init+0x128>)
 8003dec:	f00b ffec 	bl	800fdc8 <HAL_TIMEx_MasterConfigSynchronization>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003df6:	f000 fafd 	bl	80043f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dfa:	2360      	movs	r3, #96	; 0x60
 8003dfc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e0a:	463b      	mov	r3, r7
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4817      	ldr	r0, [pc, #92]	; (8003e70 <MX_TIM3_Init+0x128>)
 8003e12:	f00b f981 	bl	800f118 <HAL_TIM_PWM_ConfigChannel>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003e1c:	f000 faea 	bl	80043f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e20:	463b      	mov	r3, r7
 8003e22:	2204      	movs	r2, #4
 8003e24:	4619      	mov	r1, r3
 8003e26:	4812      	ldr	r0, [pc, #72]	; (8003e70 <MX_TIM3_Init+0x128>)
 8003e28:	f00b f976 	bl	800f118 <HAL_TIM_PWM_ConfigChannel>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003e32:	f000 fadf 	bl	80043f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e36:	463b      	mov	r3, r7
 8003e38:	2208      	movs	r2, #8
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	480c      	ldr	r0, [pc, #48]	; (8003e70 <MX_TIM3_Init+0x128>)
 8003e3e:	f00b f96b 	bl	800f118 <HAL_TIM_PWM_ConfigChannel>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8003e48:	f000 fad4 	bl	80043f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e4c:	463b      	mov	r3, r7
 8003e4e:	220c      	movs	r2, #12
 8003e50:	4619      	mov	r1, r3
 8003e52:	4807      	ldr	r0, [pc, #28]	; (8003e70 <MX_TIM3_Init+0x128>)
 8003e54:	f00b f960 	bl	800f118 <HAL_TIM_PWM_ConfigChannel>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8003e5e:	f000 fac9 	bl	80043f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003e62:	4803      	ldr	r0, [pc, #12]	; (8003e70 <MX_TIM3_Init+0x128>)
 8003e64:	f000 fc32 	bl	80046cc <HAL_TIM_MspPostInit>

}
 8003e68:	bf00      	nop
 8003e6a:	3738      	adds	r7, #56	; 0x38
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	24000990 	.word	0x24000990
 8003e74:	40000400 	.word	0x40000400

08003e78 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e7e:	1d3b      	adds	r3, r7, #4
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003e88:	4b14      	ldr	r3, [pc, #80]	; (8003edc <MX_TIM7_Init+0x64>)
 8003e8a:	4a15      	ldr	r2, [pc, #84]	; (8003ee0 <MX_TIM7_Init+0x68>)
 8003e8c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 8003e8e:	4b13      	ldr	r3, [pc, #76]	; (8003edc <MX_TIM7_Init+0x64>)
 8003e90:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003e94:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <MX_TIM7_Init+0x64>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <MX_TIM7_Init+0x64>)
 8003e9e:	2205      	movs	r2, #5
 8003ea0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <MX_TIM7_Init+0x64>)
 8003ea4:	2280      	movs	r2, #128	; 0x80
 8003ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003ea8:	480c      	ldr	r0, [pc, #48]	; (8003edc <MX_TIM7_Init+0x64>)
 8003eaa:	f00a fd9e 	bl	800e9ea <HAL_TIM_Base_Init>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003eb4:	f000 fa9e 	bl	80043f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003ec0:	1d3b      	adds	r3, r7, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4805      	ldr	r0, [pc, #20]	; (8003edc <MX_TIM7_Init+0x64>)
 8003ec6:	f00b ff7f 	bl	800fdc8 <HAL_TIMEx_MasterConfigSynchronization>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003ed0:	f000 fa90 	bl	80043f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	24000d04 	.word	0x24000d04
 8003ee0:	40001400 	.word	0x40001400

08003ee4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ee8:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <MX_USART1_UART_Init+0x90>)
 8003eea:	4a23      	ldr	r2, [pc, #140]	; (8003f78 <MX_USART1_UART_Init+0x94>)
 8003eec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003eee:	4b21      	ldr	r3, [pc, #132]	; (8003f74 <MX_USART1_UART_Init+0x90>)
 8003ef0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ef4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ef6:	4b1f      	ldr	r3, [pc, #124]	; (8003f74 <MX_USART1_UART_Init+0x90>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003efc:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <MX_USART1_UART_Init+0x90>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f02:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <MX_USART1_UART_Init+0x90>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f08:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <MX_USART1_UART_Init+0x90>)
 8003f0a:	220c      	movs	r2, #12
 8003f0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f0e:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <MX_USART1_UART_Init+0x90>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f14:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <MX_USART1_UART_Init+0x90>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f1a:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <MX_USART1_UART_Init+0x90>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f20:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <MX_USART1_UART_Init+0x90>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f26:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <MX_USART1_UART_Init+0x90>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f2c:	4811      	ldr	r0, [pc, #68]	; (8003f74 <MX_USART1_UART_Init+0x90>)
 8003f2e:	f00b fff1 	bl	800ff14 <HAL_UART_Init>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003f38:	f000 fa5c 	bl	80043f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	480d      	ldr	r0, [pc, #52]	; (8003f74 <MX_USART1_UART_Init+0x90>)
 8003f40:	f00d fcdc 	bl	80118fc <HAL_UARTEx_SetTxFifoThreshold>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003f4a:	f000 fa53 	bl	80043f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4808      	ldr	r0, [pc, #32]	; (8003f74 <MX_USART1_UART_Init+0x90>)
 8003f52:	f00d fd11 	bl	8011978 <HAL_UARTEx_SetRxFifoThreshold>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003f5c:	f000 fa4a 	bl	80043f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003f60:	4804      	ldr	r0, [pc, #16]	; (8003f74 <MX_USART1_UART_Init+0x90>)
 8003f62:	f00d fc92 	bl	801188a <HAL_UARTEx_DisableFifoMode>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003f6c:	f000 fa42 	bl	80043f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	24000ad4 	.word	0x24000ad4
 8003f78:	40011000 	.word	0x40011000

08003f7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f80:	4b22      	ldr	r3, [pc, #136]	; (800400c <MX_USART2_UART_Init+0x90>)
 8003f82:	4a23      	ldr	r2, [pc, #140]	; (8004010 <MX_USART2_UART_Init+0x94>)
 8003f84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f86:	4b21      	ldr	r3, [pc, #132]	; (800400c <MX_USART2_UART_Init+0x90>)
 8003f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f8e:	4b1f      	ldr	r3, [pc, #124]	; (800400c <MX_USART2_UART_Init+0x90>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f94:	4b1d      	ldr	r3, [pc, #116]	; (800400c <MX_USART2_UART_Init+0x90>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f9a:	4b1c      	ldr	r3, [pc, #112]	; (800400c <MX_USART2_UART_Init+0x90>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003fa0:	4b1a      	ldr	r3, [pc, #104]	; (800400c <MX_USART2_UART_Init+0x90>)
 8003fa2:	220c      	movs	r2, #12
 8003fa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fa6:	4b19      	ldr	r3, [pc, #100]	; (800400c <MX_USART2_UART_Init+0x90>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fac:	4b17      	ldr	r3, [pc, #92]	; (800400c <MX_USART2_UART_Init+0x90>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fb2:	4b16      	ldr	r3, [pc, #88]	; (800400c <MX_USART2_UART_Init+0x90>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003fb8:	4b14      	ldr	r3, [pc, #80]	; (800400c <MX_USART2_UART_Init+0x90>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fbe:	4b13      	ldr	r3, [pc, #76]	; (800400c <MX_USART2_UART_Init+0x90>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003fc4:	4811      	ldr	r0, [pc, #68]	; (800400c <MX_USART2_UART_Init+0x90>)
 8003fc6:	f00b ffa5 	bl	800ff14 <HAL_UART_Init>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003fd0:	f000 fa10 	bl	80043f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	480d      	ldr	r0, [pc, #52]	; (800400c <MX_USART2_UART_Init+0x90>)
 8003fd8:	f00d fc90 	bl	80118fc <HAL_UARTEx_SetTxFifoThreshold>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003fe2:	f000 fa07 	bl	80043f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4808      	ldr	r0, [pc, #32]	; (800400c <MX_USART2_UART_Init+0x90>)
 8003fea:	f00d fcc5 	bl	8011978 <HAL_UARTEx_SetRxFifoThreshold>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003ff4:	f000 f9fe 	bl	80043f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003ff8:	4804      	ldr	r0, [pc, #16]	; (800400c <MX_USART2_UART_Init+0x90>)
 8003ffa:	f00d fc46 	bl	801188a <HAL_UARTEx_DisableFifoMode>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004004:	f000 f9f6 	bl	80043f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004008:	bf00      	nop
 800400a:	bd80      	pop	{r7, pc}
 800400c:	24000c68 	.word	0x24000c68
 8004010:	40004400 	.word	0x40004400

08004014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800401a:	4b19      	ldr	r3, [pc, #100]	; (8004080 <MX_DMA_Init+0x6c>)
 800401c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004020:	4a17      	ldr	r2, [pc, #92]	; (8004080 <MX_DMA_Init+0x6c>)
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800402a:	4b15      	ldr	r3, [pc, #84]	; (8004080 <MX_DMA_Init+0x6c>)
 800402c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	607b      	str	r3, [r7, #4]
 8004036:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004038:	2200      	movs	r2, #0
 800403a:	2100      	movs	r1, #0
 800403c:	200b      	movs	r0, #11
 800403e:	f001 fe3a 	bl	8005cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004042:	200b      	movs	r0, #11
 8004044:	f001 fe51 	bl	8005cea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004048:	2200      	movs	r2, #0
 800404a:	2100      	movs	r1, #0
 800404c:	200c      	movs	r0, #12
 800404e:	f001 fe32 	bl	8005cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004052:	200c      	movs	r0, #12
 8004054:	f001 fe49 	bl	8005cea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8004058:	2200      	movs	r2, #0
 800405a:	2100      	movs	r1, #0
 800405c:	200d      	movs	r0, #13
 800405e:	f001 fe2a 	bl	8005cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004062:	200d      	movs	r0, #13
 8004064:	f001 fe41 	bl	8005cea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8004068:	2200      	movs	r2, #0
 800406a:	2100      	movs	r1, #0
 800406c:	200e      	movs	r0, #14
 800406e:	f001 fe22 	bl	8005cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004072:	200e      	movs	r0, #14
 8004074:	f001 fe39 	bl	8005cea <HAL_NVIC_EnableIRQ>

}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	58024400 	.word	0x58024400

08004084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800408a:	f107 0314 	add.w	r3, r7, #20
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	605a      	str	r2, [r3, #4]
 8004094:	609a      	str	r2, [r3, #8]
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800409a:	4b44      	ldr	r3, [pc, #272]	; (80041ac <MX_GPIO_Init+0x128>)
 800409c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040a0:	4a42      	ldr	r2, [pc, #264]	; (80041ac <MX_GPIO_Init+0x128>)
 80040a2:	f043 0310 	orr.w	r3, r3, #16
 80040a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040aa:	4b40      	ldr	r3, [pc, #256]	; (80041ac <MX_GPIO_Init+0x128>)
 80040ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040b8:	4b3c      	ldr	r3, [pc, #240]	; (80041ac <MX_GPIO_Init+0x128>)
 80040ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040be:	4a3b      	ldr	r2, [pc, #236]	; (80041ac <MX_GPIO_Init+0x128>)
 80040c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040c8:	4b38      	ldr	r3, [pc, #224]	; (80041ac <MX_GPIO_Init+0x128>)
 80040ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d6:	4b35      	ldr	r3, [pc, #212]	; (80041ac <MX_GPIO_Init+0x128>)
 80040d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040dc:	4a33      	ldr	r2, [pc, #204]	; (80041ac <MX_GPIO_Init+0x128>)
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040e6:	4b31      	ldr	r3, [pc, #196]	; (80041ac <MX_GPIO_Init+0x128>)
 80040e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040f4:	4b2d      	ldr	r3, [pc, #180]	; (80041ac <MX_GPIO_Init+0x128>)
 80040f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040fa:	4a2c      	ldr	r2, [pc, #176]	; (80041ac <MX_GPIO_Init+0x128>)
 80040fc:	f043 0302 	orr.w	r3, r3, #2
 8004100:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004104:	4b29      	ldr	r3, [pc, #164]	; (80041ac <MX_GPIO_Init+0x128>)
 8004106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004112:	4b26      	ldr	r3, [pc, #152]	; (80041ac <MX_GPIO_Init+0x128>)
 8004114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004118:	4a24      	ldr	r2, [pc, #144]	; (80041ac <MX_GPIO_Init+0x128>)
 800411a:	f043 0304 	orr.w	r3, r3, #4
 800411e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004122:	4b22      	ldr	r3, [pc, #136]	; (80041ac <MX_GPIO_Init+0x128>)
 8004124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	603b      	str	r3, [r7, #0]
 800412e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8004130:	2200      	movs	r2, #0
 8004132:	2108      	movs	r1, #8
 8004134:	481e      	ldr	r0, [pc, #120]	; (80041b0 <MX_GPIO_Init+0x12c>)
 8004136:	f004 fdf7 	bl	8008d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800413a:	2200      	movs	r2, #0
 800413c:	2102      	movs	r1, #2
 800413e:	481d      	ldr	r0, [pc, #116]	; (80041b4 <MX_GPIO_Init+0x130>)
 8004140:	f004 fdf2 	bl	8008d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W25qxx_CS_GPIO_Port, W25qxx_CS_Pin, GPIO_PIN_RESET);
 8004144:	2200      	movs	r2, #0
 8004146:	2140      	movs	r1, #64	; 0x40
 8004148:	481b      	ldr	r0, [pc, #108]	; (80041b8 <MX_GPIO_Init+0x134>)
 800414a:	f004 fded 	bl	8008d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 800414e:	2308      	movs	r3, #8
 8004150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004152:	2301      	movs	r3, #1
 8004154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415a:	2300      	movs	r3, #0
 800415c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800415e:	f107 0314 	add.w	r3, r7, #20
 8004162:	4619      	mov	r1, r3
 8004164:	4812      	ldr	r0, [pc, #72]	; (80041b0 <MX_GPIO_Init+0x12c>)
 8004166:	f004 fc2f 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800416a:	2302      	movs	r3, #2
 800416c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800416e:	2301      	movs	r3, #1
 8004170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004176:	2300      	movs	r3, #0
 8004178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800417a:	f107 0314 	add.w	r3, r7, #20
 800417e:	4619      	mov	r1, r3
 8004180:	480c      	ldr	r0, [pc, #48]	; (80041b4 <MX_GPIO_Init+0x130>)
 8004182:	f004 fc21 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : W25qxx_CS_Pin */
  GPIO_InitStruct.Pin = W25qxx_CS_Pin;
 8004186:	2340      	movs	r3, #64	; 0x40
 8004188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800418a:	2301      	movs	r3, #1
 800418c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004192:	2300      	movs	r3, #0
 8004194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W25qxx_CS_GPIO_Port, &GPIO_InitStruct);
 8004196:	f107 0314 	add.w	r3, r7, #20
 800419a:	4619      	mov	r1, r3
 800419c:	4806      	ldr	r0, [pc, #24]	; (80041b8 <MX_GPIO_Init+0x134>)
 800419e:	f004 fc13 	bl	80089c8 <HAL_GPIO_Init>

}
 80041a2:	bf00      	nop
 80041a4:	3728      	adds	r7, #40	; 0x28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	58024400 	.word	0x58024400
 80041b0:	58021000 	.word	0x58021000
 80041b4:	58020000 	.word	0x58020000
 80041b8:	58020400 	.word	0x58020400

080041bc <Compass_Calibration>:

/* USER CODE BEGIN 4 */
void Compass_Calibration(uint8_t mag_calibration_enable)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
	if(mag_calibration_enable == 1)
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	f040 80d6 	bne.w	800437a <Compass_Calibration+0x1be>
	{
		for(int i =0;i<5;i++)
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	e00b      	b.n	80041ec <Compass_Calibration+0x30>
		{
			MPU9250_Read_All(&hi2c1);
 80041d4:	486b      	ldr	r0, [pc, #428]	; (8004384 <Compass_Calibration+0x1c8>)
 80041d6:	f7fc fd59 	bl	8000c8c <MPU9250_Read_All>
			HAL_Delay(1);
 80041da:	2001      	movs	r0, #1
 80041dc:	f001 fc60 	bl	8005aa0 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 80041e0:	4869      	ldr	r0, [pc, #420]	; (8004388 <Compass_Calibration+0x1cc>)
 80041e2:	f7fc fefd 	bl	8000fe0 <MPU9250_Parsing_NoOffset>
		for(int i =0;i<5;i++)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3301      	adds	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	ddf0      	ble.n	80041d4 <Compass_Calibration+0x18>
		}
		MPU9250.Mx_Max = MPU9250.Mx;
 80041f2:	4b65      	ldr	r3, [pc, #404]	; (8004388 <Compass_Calibration+0x1cc>)
 80041f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f6:	4a64      	ldr	r2, [pc, #400]	; (8004388 <Compass_Calibration+0x1cc>)
 80041f8:	6593      	str	r3, [r2, #88]	; 0x58
		MPU9250.Mx_Min = MPU9250.Mx;
 80041fa:	4b63      	ldr	r3, [pc, #396]	; (8004388 <Compass_Calibration+0x1cc>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	4a62      	ldr	r2, [pc, #392]	; (8004388 <Compass_Calibration+0x1cc>)
 8004200:	64d3      	str	r3, [r2, #76]	; 0x4c
		MPU9250.My_Max = MPU9250.My;
 8004202:	4b61      	ldr	r3, [pc, #388]	; (8004388 <Compass_Calibration+0x1cc>)
 8004204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004206:	4a60      	ldr	r2, [pc, #384]	; (8004388 <Compass_Calibration+0x1cc>)
 8004208:	65d3      	str	r3, [r2, #92]	; 0x5c
		MPU9250.My_Min = MPU9250.My;
 800420a:	4b5f      	ldr	r3, [pc, #380]	; (8004388 <Compass_Calibration+0x1cc>)
 800420c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420e:	4a5e      	ldr	r2, [pc, #376]	; (8004388 <Compass_Calibration+0x1cc>)
 8004210:	6513      	str	r3, [r2, #80]	; 0x50
		MPU9250.Mz_Max = MPU9250.Mz;
 8004212:	4b5d      	ldr	r3, [pc, #372]	; (8004388 <Compass_Calibration+0x1cc>)
 8004214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004216:	4a5c      	ldr	r2, [pc, #368]	; (8004388 <Compass_Calibration+0x1cc>)
 8004218:	6613      	str	r3, [r2, #96]	; 0x60
		MPU9250.Mz_Min = MPU9250.Mz;
 800421a:	4b5b      	ldr	r3, [pc, #364]	; (8004388 <Compass_Calibration+0x1cc>)
 800421c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800421e:	4a5a      	ldr	r2, [pc, #360]	; (8004388 <Compass_Calibration+0x1cc>)
 8004220:	6553      	str	r3, [r2, #84]	; 0x54

		while(mag_calibration_enable != 0)
 8004222:	e065      	b.n	80042f0 <Compass_Calibration+0x134>
		{
			Receive_Command();
 8004224:	f000 fd56 	bl	8004cd4 <Receive_Command>
			MPU9250_Read_All(&hi2c1);
 8004228:	4856      	ldr	r0, [pc, #344]	; (8004384 <Compass_Calibration+0x1c8>)
 800422a:	f7fc fd2f 	bl	8000c8c <MPU9250_Read_All>
			HAL_Delay(1);
 800422e:	2001      	movs	r0, #1
 8004230:	f001 fc36 	bl	8005aa0 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 8004234:	4854      	ldr	r0, [pc, #336]	; (8004388 <Compass_Calibration+0x1cc>)
 8004236:	f7fc fed3 	bl	8000fe0 <MPU9250_Parsing_NoOffset>
			if(MPU9250.Mx > MPU9250.Mx_Max) MPU9250.Mx_Max = MPU9250.Mx;
 800423a:	4b53      	ldr	r3, [pc, #332]	; (8004388 <Compass_Calibration+0x1cc>)
 800423c:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8004240:	4b51      	ldr	r3, [pc, #324]	; (8004388 <Compass_Calibration+0x1cc>)
 8004242:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800424a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424e:	dd03      	ble.n	8004258 <Compass_Calibration+0x9c>
 8004250:	4b4d      	ldr	r3, [pc, #308]	; (8004388 <Compass_Calibration+0x1cc>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004254:	4a4c      	ldr	r2, [pc, #304]	; (8004388 <Compass_Calibration+0x1cc>)
 8004256:	6593      	str	r3, [r2, #88]	; 0x58
			if(MPU9250.Mx < MPU9250.Mx_Min) MPU9250.Mx_Min = MPU9250.Mx;
 8004258:	4b4b      	ldr	r3, [pc, #300]	; (8004388 <Compass_Calibration+0x1cc>)
 800425a:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800425e:	4b4a      	ldr	r3, [pc, #296]	; (8004388 <Compass_Calibration+0x1cc>)
 8004260:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004264:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426c:	d503      	bpl.n	8004276 <Compass_Calibration+0xba>
 800426e:	4b46      	ldr	r3, [pc, #280]	; (8004388 <Compass_Calibration+0x1cc>)
 8004270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004272:	4a45      	ldr	r2, [pc, #276]	; (8004388 <Compass_Calibration+0x1cc>)
 8004274:	64d3      	str	r3, [r2, #76]	; 0x4c

			if(MPU9250.My > MPU9250.My_Max) MPU9250.My_Max = MPU9250.My;
 8004276:	4b44      	ldr	r3, [pc, #272]	; (8004388 <Compass_Calibration+0x1cc>)
 8004278:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800427c:	4b42      	ldr	r3, [pc, #264]	; (8004388 <Compass_Calibration+0x1cc>)
 800427e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428a:	dd03      	ble.n	8004294 <Compass_Calibration+0xd8>
 800428c:	4b3e      	ldr	r3, [pc, #248]	; (8004388 <Compass_Calibration+0x1cc>)
 800428e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004290:	4a3d      	ldr	r2, [pc, #244]	; (8004388 <Compass_Calibration+0x1cc>)
 8004292:	65d3      	str	r3, [r2, #92]	; 0x5c
			if(MPU9250.My < MPU9250.My_Min) MPU9250.My_Min = MPU9250.My;
 8004294:	4b3c      	ldr	r3, [pc, #240]	; (8004388 <Compass_Calibration+0x1cc>)
 8004296:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800429a:	4b3b      	ldr	r3, [pc, #236]	; (8004388 <Compass_Calibration+0x1cc>)
 800429c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80042a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a8:	d503      	bpl.n	80042b2 <Compass_Calibration+0xf6>
 80042aa:	4b37      	ldr	r3, [pc, #220]	; (8004388 <Compass_Calibration+0x1cc>)
 80042ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ae:	4a36      	ldr	r2, [pc, #216]	; (8004388 <Compass_Calibration+0x1cc>)
 80042b0:	6513      	str	r3, [r2, #80]	; 0x50

			if(MPU9250.Mz > MPU9250.Mz_Max) MPU9250.Mz_Max = MPU9250.Mz;
 80042b2:	4b35      	ldr	r3, [pc, #212]	; (8004388 <Compass_Calibration+0x1cc>)
 80042b4:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80042b8:	4b33      	ldr	r3, [pc, #204]	; (8004388 <Compass_Calibration+0x1cc>)
 80042ba:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80042be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c6:	dd03      	ble.n	80042d0 <Compass_Calibration+0x114>
 80042c8:	4b2f      	ldr	r3, [pc, #188]	; (8004388 <Compass_Calibration+0x1cc>)
 80042ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042cc:	4a2e      	ldr	r2, [pc, #184]	; (8004388 <Compass_Calibration+0x1cc>)
 80042ce:	6613      	str	r3, [r2, #96]	; 0x60
			if(MPU9250.Mz < MPU9250.Mz_Min) MPU9250.Mz_Min = MPU9250.Mz;
 80042d0:	4b2d      	ldr	r3, [pc, #180]	; (8004388 <Compass_Calibration+0x1cc>)
 80042d2:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80042d6:	4b2c      	ldr	r3, [pc, #176]	; (8004388 <Compass_Calibration+0x1cc>)
 80042d8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80042dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e4:	d400      	bmi.n	80042e8 <Compass_Calibration+0x12c>
 80042e6:	e003      	b.n	80042f0 <Compass_Calibration+0x134>
 80042e8:	4b27      	ldr	r3, [pc, #156]	; (8004388 <Compass_Calibration+0x1cc>)
 80042ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ec:	4a26      	ldr	r2, [pc, #152]	; (8004388 <Compass_Calibration+0x1cc>)
 80042ee:	6553      	str	r3, [r2, #84]	; 0x54
		while(mag_calibration_enable != 0)
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d196      	bne.n	8004224 <Compass_Calibration+0x68>
		}
		MPU9250.Mx_Offset = (MPU9250.Mx_Max + MPU9250.Mx_Min) / 2;
 80042f6:	4b24      	ldr	r3, [pc, #144]	; (8004388 <Compass_Calibration+0x1cc>)
 80042f8:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80042fc:	4b22      	ldr	r3, [pc, #136]	; (8004388 <Compass_Calibration+0x1cc>)
 80042fe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004302:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004306:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800430a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800430e:	4b1e      	ldr	r3, [pc, #120]	; (8004388 <Compass_Calibration+0x1cc>)
 8004310:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		MPU9250.My_Offset = (MPU9250.My_Max + MPU9250.My_Min) / 2;
 8004314:	4b1c      	ldr	r3, [pc, #112]	; (8004388 <Compass_Calibration+0x1cc>)
 8004316:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800431a:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <Compass_Calibration+0x1cc>)
 800431c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004320:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004324:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800432c:	4b16      	ldr	r3, [pc, #88]	; (8004388 <Compass_Calibration+0x1cc>)
 800432e:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		MPU9250.Mz_Offset = (MPU9250.Mz_Max + MPU9250.Mz_Min) / 2;
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <Compass_Calibration+0x1cc>)
 8004334:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8004338:	4b13      	ldr	r3, [pc, #76]	; (8004388 <Compass_Calibration+0x1cc>)
 800433a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800433e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004342:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <Compass_Calibration+0x1cc>)
 800434c:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

		*(float*)&Mag_Calib[0] = MPU9250.Mx_Offset;
 8004350:	4a0e      	ldr	r2, [pc, #56]	; (800438c <Compass_Calibration+0x1d0>)
 8004352:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <Compass_Calibration+0x1cc>)
 8004354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004356:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[4] = MPU9250.My_Offset;
 8004358:	4a0d      	ldr	r2, [pc, #52]	; (8004390 <Compass_Calibration+0x1d4>)
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <Compass_Calibration+0x1cc>)
 800435c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800435e:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[8] = MPU9250.Mz_Offset;
 8004360:	4a0c      	ldr	r2, [pc, #48]	; (8004394 <Compass_Calibration+0x1d8>)
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <Compass_Calibration+0x1cc>)
 8004364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004366:	6013      	str	r3, [r2, #0]

		W25qxx_EraseSector(0);
 8004368:	2000      	movs	r0, #0
 800436a:	f001 f8a9 	bl	80054c0 <W25qxx_EraseSector>
		W25qxx_WriteSector(Mag_Calib, 0, 0, 12);
 800436e:	230c      	movs	r3, #12
 8004370:	2200      	movs	r2, #0
 8004372:	2100      	movs	r1, #0
 8004374:	4805      	ldr	r0, [pc, #20]	; (800438c <Compass_Calibration+0x1d0>)
 8004376:	f001 f995 	bl	80056a4 <W25qxx_WriteSector>
	}
}
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	24000944 	.word	0x24000944
 8004388:	24000274 	.word	0x24000274
 800438c:	24000cf8 	.word	0x24000cf8
 8004390:	24000cfc 	.word	0x24000cfc
 8004394:	24000d00 	.word	0x24000d00

08004398 <ESC_Calibration>:

void ESC_Calibration(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 20000;
 800439c:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <ESC_Calibration+0x58>)
 800439e:	f644 6220 	movw	r2, #20000	; 0x4e20
 80043a2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 20000;
 80043a4:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <ESC_Calibration+0x58>)
 80043a6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 20000;
 80043ac:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <ESC_Calibration+0x58>)
 80043ae:	f644 6220 	movw	r2, #20000	; 0x4e20
 80043b2:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 20000;
 80043b4:	4b0e      	ldr	r3, [pc, #56]	; (80043f0 <ESC_Calibration+0x58>)
 80043b6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80043ba:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(7000);
 80043bc:	f641 3058 	movw	r0, #7000	; 0x1b58
 80043c0:	f001 fb6e 	bl	8005aa0 <HAL_Delay>
	TIM3->CCR1 = 10000;
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <ESC_Calibration+0x58>)
 80043c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80043ca:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 10000;
 80043cc:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <ESC_Calibration+0x58>)
 80043ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80043d2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 10000;
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <ESC_Calibration+0x58>)
 80043d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80043da:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 10000;
 80043dc:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <ESC_Calibration+0x58>)
 80043de:	f242 7210 	movw	r2, #10000	; 0x2710
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(8000);
 80043e4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80043e8:	f001 fb5a 	bl	8005aa0 <HAL_Delay>
}
 80043ec:	bf00      	nop
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40000400 	.word	0x40000400

080043f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043f8:	b672      	cpsid	i
}
 80043fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80043fc:	e7fe      	b.n	80043fc <Error_Handler+0x8>
	...

08004400 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004406:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <HAL_MspInit+0x30>)
 8004408:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800440c:	4a08      	ldr	r2, [pc, #32]	; (8004430 <HAL_MspInit+0x30>)
 800440e:	f043 0302 	orr.w	r3, r3, #2
 8004412:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <HAL_MspInit+0x30>)
 8004418:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	607b      	str	r3, [r7, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	58024400 	.word	0x58024400

08004434 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b0b8      	sub	sp, #224	; 0xe0
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800443c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	605a      	str	r2, [r3, #4]
 8004446:	609a      	str	r2, [r3, #8]
 8004448:	60da      	str	r2, [r3, #12]
 800444a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800444c:	f107 0310 	add.w	r3, r7, #16
 8004450:	22bc      	movs	r2, #188	; 0xbc
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f00d fb45 	bl	8011ae4 <memset>
  if(hi2c->Instance==I2C1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a3f      	ldr	r2, [pc, #252]	; (800455c <HAL_I2C_MspInit+0x128>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d177      	bne.n	8004554 <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004464:	2308      	movs	r3, #8
 8004466:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8004468:	2300      	movs	r3, #0
 800446a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800446e:	f107 0310 	add.w	r3, r7, #16
 8004472:	4618      	mov	r0, r3
 8004474:	f007 fe9c 	bl	800c1b0 <HAL_RCCEx_PeriphCLKConfig>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800447e:	f7ff ffb9 	bl	80043f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004482:	4b37      	ldr	r3, [pc, #220]	; (8004560 <HAL_I2C_MspInit+0x12c>)
 8004484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004488:	4a35      	ldr	r2, [pc, #212]	; (8004560 <HAL_I2C_MspInit+0x12c>)
 800448a:	f043 0302 	orr.w	r3, r3, #2
 800448e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004492:	4b33      	ldr	r3, [pc, #204]	; (8004560 <HAL_I2C_MspInit+0x12c>)
 8004494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80044a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80044a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044a8:	2312      	movs	r3, #18
 80044aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b4:	2300      	movs	r3, #0
 80044b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044ba:	2304      	movs	r3, #4
 80044bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80044c4:	4619      	mov	r1, r3
 80044c6:	4827      	ldr	r0, [pc, #156]	; (8004564 <HAL_I2C_MspInit+0x130>)
 80044c8:	f004 fa7e 	bl	80089c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044cc:	4b24      	ldr	r3, [pc, #144]	; (8004560 <HAL_I2C_MspInit+0x12c>)
 80044ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044d2:	4a23      	ldr	r2, [pc, #140]	; (8004560 <HAL_I2C_MspInit+0x12c>)
 80044d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044dc:	4b20      	ldr	r3, [pc, #128]	; (8004560 <HAL_I2C_MspInit+0x12c>)
 80044de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 80044ea:	4b1f      	ldr	r3, [pc, #124]	; (8004568 <HAL_I2C_MspInit+0x134>)
 80044ec:	4a1f      	ldr	r2, [pc, #124]	; (800456c <HAL_I2C_MspInit+0x138>)
 80044ee:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80044f0:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <HAL_I2C_MspInit+0x134>)
 80044f2:	2221      	movs	r2, #33	; 0x21
 80044f4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044f6:	4b1c      	ldr	r3, [pc, #112]	; (8004568 <HAL_I2C_MspInit+0x134>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044fc:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <HAL_I2C_MspInit+0x134>)
 80044fe:	2200      	movs	r2, #0
 8004500:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004502:	4b19      	ldr	r3, [pc, #100]	; (8004568 <HAL_I2C_MspInit+0x134>)
 8004504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004508:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800450a:	4b17      	ldr	r3, [pc, #92]	; (8004568 <HAL_I2C_MspInit+0x134>)
 800450c:	2200      	movs	r2, #0
 800450e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004510:	4b15      	ldr	r3, [pc, #84]	; (8004568 <HAL_I2C_MspInit+0x134>)
 8004512:	2200      	movs	r2, #0
 8004514:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004516:	4b14      	ldr	r3, [pc, #80]	; (8004568 <HAL_I2C_MspInit+0x134>)
 8004518:	2200      	movs	r2, #0
 800451a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800451c:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_I2C_MspInit+0x134>)
 800451e:	2200      	movs	r2, #0
 8004520:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004522:	4b11      	ldr	r3, [pc, #68]	; (8004568 <HAL_I2C_MspInit+0x134>)
 8004524:	2200      	movs	r2, #0
 8004526:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004528:	480f      	ldr	r0, [pc, #60]	; (8004568 <HAL_I2C_MspInit+0x134>)
 800452a:	f001 fbf9 	bl	8005d20 <HAL_DMA_Init>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 8004534:	f7ff ff5e 	bl	80043f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a0b      	ldr	r2, [pc, #44]	; (8004568 <HAL_I2C_MspInit+0x134>)
 800453c:	63da      	str	r2, [r3, #60]	; 0x3c
 800453e:	4a0a      	ldr	r2, [pc, #40]	; (8004568 <HAL_I2C_MspInit+0x134>)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004544:	2200      	movs	r2, #0
 8004546:	2100      	movs	r1, #0
 8004548:	201f      	movs	r0, #31
 800454a:	f001 fbb4 	bl	8005cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800454e:	201f      	movs	r0, #31
 8004550:	f001 fbcb 	bl	8005cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004554:	bf00      	nop
 8004556:	37e0      	adds	r7, #224	; 0xe0
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40005400 	.word	0x40005400
 8004560:	58024400 	.word	0x58024400
 8004564:	58020400 	.word	0x58020400
 8004568:	24000b64 	.word	0x24000b64
 800456c:	40020028 	.word	0x40020028

08004570 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b0b8      	sub	sp, #224	; 0xe0
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004578:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	609a      	str	r2, [r3, #8]
 8004584:	60da      	str	r2, [r3, #12]
 8004586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004588:	f107 0310 	add.w	r3, r7, #16
 800458c:	22bc      	movs	r2, #188	; 0xbc
 800458e:	2100      	movs	r1, #0
 8004590:	4618      	mov	r0, r3
 8004592:	f00d faa7 	bl	8011ae4 <memset>
  if(hspi->Instance==SPI1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a25      	ldr	r2, [pc, #148]	; (8004630 <HAL_SPI_MspInit+0xc0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d142      	bne.n	8004626 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80045a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045a4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80045a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045ac:	f107 0310 	add.w	r3, r7, #16
 80045b0:	4618      	mov	r0, r3
 80045b2:	f007 fdfd 	bl	800c1b0 <HAL_RCCEx_PeriphCLKConfig>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80045bc:	f7ff ff1a 	bl	80043f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045c0:	4b1c      	ldr	r3, [pc, #112]	; (8004634 <HAL_SPI_MspInit+0xc4>)
 80045c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045c6:	4a1b      	ldr	r2, [pc, #108]	; (8004634 <HAL_SPI_MspInit+0xc4>)
 80045c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80045d0:	4b18      	ldr	r3, [pc, #96]	; (8004634 <HAL_SPI_MspInit+0xc4>)
 80045d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045de:	4b15      	ldr	r3, [pc, #84]	; (8004634 <HAL_SPI_MspInit+0xc4>)
 80045e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045e4:	4a13      	ldr	r2, [pc, #76]	; (8004634 <HAL_SPI_MspInit+0xc4>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045ee:	4b11      	ldr	r3, [pc, #68]	; (8004634 <HAL_SPI_MspInit+0xc4>)
 80045f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80045fc:	23e0      	movs	r3, #224	; 0xe0
 80045fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004602:	2302      	movs	r3, #2
 8004604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460e:	2300      	movs	r3, #0
 8004610:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004614:	2305      	movs	r3, #5
 8004616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800461a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800461e:	4619      	mov	r1, r3
 8004620:	4805      	ldr	r0, [pc, #20]	; (8004638 <HAL_SPI_MspInit+0xc8>)
 8004622:	f004 f9d1 	bl	80089c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004626:	bf00      	nop
 8004628:	37e0      	adds	r7, #224	; 0xe0
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40013000 	.word	0x40013000
 8004634:	58024400 	.word	0x58024400
 8004638:	58020000 	.word	0x58020000

0800463c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1d      	ldr	r2, [pc, #116]	; (80046c0 <HAL_TIM_Base_MspInit+0x84>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d117      	bne.n	800467e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800464e:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <HAL_TIM_Base_MspInit+0x88>)
 8004650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004654:	4a1b      	ldr	r2, [pc, #108]	; (80046c4 <HAL_TIM_Base_MspInit+0x88>)
 8004656:	f043 0302 	orr.w	r3, r3, #2
 800465a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800465e:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_TIM_Base_MspInit+0x88>)
 8004660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800466c:	2200      	movs	r2, #0
 800466e:	2100      	movs	r1, #0
 8004670:	201d      	movs	r0, #29
 8004672:	f001 fb20 	bl	8005cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004676:	201d      	movs	r0, #29
 8004678:	f001 fb37 	bl	8005cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800467c:	e01b      	b.n	80046b6 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM7)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a11      	ldr	r2, [pc, #68]	; (80046c8 <HAL_TIM_Base_MspInit+0x8c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d116      	bne.n	80046b6 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004688:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <HAL_TIM_Base_MspInit+0x88>)
 800468a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800468e:	4a0d      	ldr	r2, [pc, #52]	; (80046c4 <HAL_TIM_Base_MspInit+0x88>)
 8004690:	f043 0320 	orr.w	r3, r3, #32
 8004694:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <HAL_TIM_Base_MspInit+0x88>)
 800469a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	60bb      	str	r3, [r7, #8]
 80046a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80046a6:	2200      	movs	r2, #0
 80046a8:	2100      	movs	r1, #0
 80046aa:	2037      	movs	r0, #55	; 0x37
 80046ac:	f001 fb03 	bl	8005cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80046b0:	2037      	movs	r0, #55	; 0x37
 80046b2:	f001 fb1a 	bl	8005cea <HAL_NVIC_EnableIRQ>
}
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40000400 	.word	0x40000400
 80046c4:	58024400 	.word	0x58024400
 80046c8:	40001400 	.word	0x40001400

080046cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	; 0x28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d4:	f107 0314 	add.w	r3, r7, #20
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	60da      	str	r2, [r3, #12]
 80046e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a22      	ldr	r2, [pc, #136]	; (8004774 <HAL_TIM_MspPostInit+0xa8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d13d      	bne.n	800476a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <HAL_TIM_MspPostInit+0xac>)
 80046f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046f4:	4a20      	ldr	r2, [pc, #128]	; (8004778 <HAL_TIM_MspPostInit+0xac>)
 80046f6:	f043 0302 	orr.w	r3, r3, #2
 80046fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046fe:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <HAL_TIM_MspPostInit+0xac>)
 8004700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800470c:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <HAL_TIM_MspPostInit+0xac>)
 800470e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004712:	4a19      	ldr	r2, [pc, #100]	; (8004778 <HAL_TIM_MspPostInit+0xac>)
 8004714:	f043 0304 	orr.w	r3, r3, #4
 8004718:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800471c:	4b16      	ldr	r3, [pc, #88]	; (8004778 <HAL_TIM_MspPostInit+0xac>)
 800471e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800472a:	2303      	movs	r3, #3
 800472c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472e:	2302      	movs	r3, #2
 8004730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004732:	2300      	movs	r3, #0
 8004734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004736:	2300      	movs	r3, #0
 8004738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800473a:	2302      	movs	r3, #2
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800473e:	f107 0314 	add.w	r3, r7, #20
 8004742:	4619      	mov	r1, r3
 8004744:	480d      	ldr	r0, [pc, #52]	; (800477c <HAL_TIM_MspPostInit+0xb0>)
 8004746:	f004 f93f 	bl	80089c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800474a:	23c0      	movs	r3, #192	; 0xc0
 800474c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474e:	2302      	movs	r3, #2
 8004750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004752:	2300      	movs	r3, #0
 8004754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004756:	2300      	movs	r3, #0
 8004758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800475a:	2302      	movs	r3, #2
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800475e:	f107 0314 	add.w	r3, r7, #20
 8004762:	4619      	mov	r1, r3
 8004764:	4806      	ldr	r0, [pc, #24]	; (8004780 <HAL_TIM_MspPostInit+0xb4>)
 8004766:	f004 f92f 	bl	80089c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800476a:	bf00      	nop
 800476c:	3728      	adds	r7, #40	; 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40000400 	.word	0x40000400
 8004778:	58024400 	.word	0x58024400
 800477c:	58020400 	.word	0x58020400
 8004780:	58020800 	.word	0x58020800

08004784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b0ba      	sub	sp, #232	; 0xe8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800478c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	609a      	str	r2, [r3, #8]
 8004798:	60da      	str	r2, [r3, #12]
 800479a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800479c:	f107 0318 	add.w	r3, r7, #24
 80047a0:	22bc      	movs	r2, #188	; 0xbc
 80047a2:	2100      	movs	r1, #0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f00d f99d 	bl	8011ae4 <memset>
  if(huart->Instance==USART1)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a96      	ldr	r2, [pc, #600]	; (8004a08 <HAL_UART_MspInit+0x284>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	f040 80a7 	bne.w	8004904 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80047b6:	2301      	movs	r3, #1
 80047b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80047ba:	2300      	movs	r3, #0
 80047bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047c0:	f107 0318 	add.w	r3, r7, #24
 80047c4:	4618      	mov	r0, r3
 80047c6:	f007 fcf3 	bl	800c1b0 <HAL_RCCEx_PeriphCLKConfig>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80047d0:	f7ff fe10 	bl	80043f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047d4:	4b8d      	ldr	r3, [pc, #564]	; (8004a0c <HAL_UART_MspInit+0x288>)
 80047d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047da:	4a8c      	ldr	r2, [pc, #560]	; (8004a0c <HAL_UART_MspInit+0x288>)
 80047dc:	f043 0310 	orr.w	r3, r3, #16
 80047e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047e4:	4b89      	ldr	r3, [pc, #548]	; (8004a0c <HAL_UART_MspInit+0x288>)
 80047e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047f2:	4b86      	ldr	r3, [pc, #536]	; (8004a0c <HAL_UART_MspInit+0x288>)
 80047f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047f8:	4a84      	ldr	r2, [pc, #528]	; (8004a0c <HAL_UART_MspInit+0x288>)
 80047fa:	f043 0302 	orr.w	r3, r3, #2
 80047fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004802:	4b82      	ldr	r3, [pc, #520]	; (8004a0c <HAL_UART_MspInit+0x288>)
 8004804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004810:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004814:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004818:	2302      	movs	r3, #2
 800481a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481e:	2300      	movs	r3, #0
 8004820:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004824:	2300      	movs	r3, #0
 8004826:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800482a:	2304      	movs	r3, #4
 800482c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004830:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004834:	4619      	mov	r1, r3
 8004836:	4876      	ldr	r0, [pc, #472]	; (8004a10 <HAL_UART_MspInit+0x28c>)
 8004838:	f004 f8c6 	bl	80089c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800483c:	4b75      	ldr	r3, [pc, #468]	; (8004a14 <HAL_UART_MspInit+0x290>)
 800483e:	4a76      	ldr	r2, [pc, #472]	; (8004a18 <HAL_UART_MspInit+0x294>)
 8004840:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004842:	4b74      	ldr	r3, [pc, #464]	; (8004a14 <HAL_UART_MspInit+0x290>)
 8004844:	2229      	movs	r2, #41	; 0x29
 8004846:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004848:	4b72      	ldr	r3, [pc, #456]	; (8004a14 <HAL_UART_MspInit+0x290>)
 800484a:	2200      	movs	r2, #0
 800484c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800484e:	4b71      	ldr	r3, [pc, #452]	; (8004a14 <HAL_UART_MspInit+0x290>)
 8004850:	2200      	movs	r2, #0
 8004852:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004854:	4b6f      	ldr	r3, [pc, #444]	; (8004a14 <HAL_UART_MspInit+0x290>)
 8004856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800485a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800485c:	4b6d      	ldr	r3, [pc, #436]	; (8004a14 <HAL_UART_MspInit+0x290>)
 800485e:	2200      	movs	r2, #0
 8004860:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004862:	4b6c      	ldr	r3, [pc, #432]	; (8004a14 <HAL_UART_MspInit+0x290>)
 8004864:	2200      	movs	r2, #0
 8004866:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004868:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <HAL_UART_MspInit+0x290>)
 800486a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800486e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004870:	4b68      	ldr	r3, [pc, #416]	; (8004a14 <HAL_UART_MspInit+0x290>)
 8004872:	2200      	movs	r2, #0
 8004874:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004876:	4b67      	ldr	r3, [pc, #412]	; (8004a14 <HAL_UART_MspInit+0x290>)
 8004878:	2200      	movs	r2, #0
 800487a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800487c:	4865      	ldr	r0, [pc, #404]	; (8004a14 <HAL_UART_MspInit+0x290>)
 800487e:	f001 fa4f 	bl	8005d20 <HAL_DMA_Init>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8004888:	f7ff fdb4 	bl	80043f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a61      	ldr	r2, [pc, #388]	; (8004a14 <HAL_UART_MspInit+0x290>)
 8004890:	67da      	str	r2, [r3, #124]	; 0x7c
 8004892:	4a60      	ldr	r2, [pc, #384]	; (8004a14 <HAL_UART_MspInit+0x290>)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8004898:	4b60      	ldr	r3, [pc, #384]	; (8004a1c <HAL_UART_MspInit+0x298>)
 800489a:	4a61      	ldr	r2, [pc, #388]	; (8004a20 <HAL_UART_MspInit+0x29c>)
 800489c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800489e:	4b5f      	ldr	r3, [pc, #380]	; (8004a1c <HAL_UART_MspInit+0x298>)
 80048a0:	222a      	movs	r2, #42	; 0x2a
 80048a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048a4:	4b5d      	ldr	r3, [pc, #372]	; (8004a1c <HAL_UART_MspInit+0x298>)
 80048a6:	2240      	movs	r2, #64	; 0x40
 80048a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048aa:	4b5c      	ldr	r3, [pc, #368]	; (8004a1c <HAL_UART_MspInit+0x298>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048b0:	4b5a      	ldr	r3, [pc, #360]	; (8004a1c <HAL_UART_MspInit+0x298>)
 80048b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048b8:	4b58      	ldr	r3, [pc, #352]	; (8004a1c <HAL_UART_MspInit+0x298>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048be:	4b57      	ldr	r3, [pc, #348]	; (8004a1c <HAL_UART_MspInit+0x298>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80048c4:	4b55      	ldr	r3, [pc, #340]	; (8004a1c <HAL_UART_MspInit+0x298>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80048ca:	4b54      	ldr	r3, [pc, #336]	; (8004a1c <HAL_UART_MspInit+0x298>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048d0:	4b52      	ldr	r3, [pc, #328]	; (8004a1c <HAL_UART_MspInit+0x298>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80048d6:	4851      	ldr	r0, [pc, #324]	; (8004a1c <HAL_UART_MspInit+0x298>)
 80048d8:	f001 fa22 	bl	8005d20 <HAL_DMA_Init>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80048e2:	f7ff fd87 	bl	80043f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a4c      	ldr	r2, [pc, #304]	; (8004a1c <HAL_UART_MspInit+0x298>)
 80048ea:	679a      	str	r2, [r3, #120]	; 0x78
 80048ec:	4a4b      	ldr	r2, [pc, #300]	; (8004a1c <HAL_UART_MspInit+0x298>)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80048f2:	2200      	movs	r2, #0
 80048f4:	2100      	movs	r1, #0
 80048f6:	2025      	movs	r0, #37	; 0x25
 80048f8:	f001 f9dd 	bl	8005cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80048fc:	2025      	movs	r0, #37	; 0x25
 80048fe:	f001 f9f4 	bl	8005cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004902:	e07c      	b.n	80049fe <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART2)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a46      	ldr	r2, [pc, #280]	; (8004a24 <HAL_UART_MspInit+0x2a0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d177      	bne.n	80049fe <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800490e:	2302      	movs	r3, #2
 8004910:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004912:	2300      	movs	r3, #0
 8004914:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004918:	f107 0318 	add.w	r3, r7, #24
 800491c:	4618      	mov	r0, r3
 800491e:	f007 fc47 	bl	800c1b0 <HAL_RCCEx_PeriphCLKConfig>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8004928:	f7ff fd64 	bl	80043f4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800492c:	4b37      	ldr	r3, [pc, #220]	; (8004a0c <HAL_UART_MspInit+0x288>)
 800492e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004932:	4a36      	ldr	r2, [pc, #216]	; (8004a0c <HAL_UART_MspInit+0x288>)
 8004934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004938:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800493c:	4b33      	ldr	r3, [pc, #204]	; (8004a0c <HAL_UART_MspInit+0x288>)
 800493e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800494a:	4b30      	ldr	r3, [pc, #192]	; (8004a0c <HAL_UART_MspInit+0x288>)
 800494c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004950:	4a2e      	ldr	r2, [pc, #184]	; (8004a0c <HAL_UART_MspInit+0x288>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800495a:	4b2c      	ldr	r3, [pc, #176]	; (8004a0c <HAL_UART_MspInit+0x288>)
 800495c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004968:	230c      	movs	r3, #12
 800496a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496e:	2302      	movs	r3, #2
 8004970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004974:	2300      	movs	r3, #0
 8004976:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800497a:	2300      	movs	r3, #0
 800497c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004980:	2307      	movs	r3, #7
 8004982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004986:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800498a:	4619      	mov	r1, r3
 800498c:	4826      	ldr	r0, [pc, #152]	; (8004a28 <HAL_UART_MspInit+0x2a4>)
 800498e:	f004 f81b 	bl	80089c8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream3;
 8004992:	4b26      	ldr	r3, [pc, #152]	; (8004a2c <HAL_UART_MspInit+0x2a8>)
 8004994:	4a26      	ldr	r2, [pc, #152]	; (8004a30 <HAL_UART_MspInit+0x2ac>)
 8004996:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004998:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <HAL_UART_MspInit+0x2a8>)
 800499a:	222b      	movs	r2, #43	; 0x2b
 800499c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800499e:	4b23      	ldr	r3, [pc, #140]	; (8004a2c <HAL_UART_MspInit+0x2a8>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049a4:	4b21      	ldr	r3, [pc, #132]	; (8004a2c <HAL_UART_MspInit+0x2a8>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_DISABLE;
 80049aa:	4b20      	ldr	r3, [pc, #128]	; (8004a2c <HAL_UART_MspInit+0x2a8>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049b0:	4b1e      	ldr	r3, [pc, #120]	; (8004a2c <HAL_UART_MspInit+0x2a8>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049b6:	4b1d      	ldr	r3, [pc, #116]	; (8004a2c <HAL_UART_MspInit+0x2a8>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80049bc:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <HAL_UART_MspInit+0x2a8>)
 80049be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80049c4:	4b19      	ldr	r3, [pc, #100]	; (8004a2c <HAL_UART_MspInit+0x2a8>)
 80049c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80049ca:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049cc:	4b17      	ldr	r3, [pc, #92]	; (8004a2c <HAL_UART_MspInit+0x2a8>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80049d2:	4816      	ldr	r0, [pc, #88]	; (8004a2c <HAL_UART_MspInit+0x2a8>)
 80049d4:	f001 f9a4 	bl	8005d20 <HAL_DMA_Init>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 80049de:	f7ff fd09 	bl	80043f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a11      	ldr	r2, [pc, #68]	; (8004a2c <HAL_UART_MspInit+0x2a8>)
 80049e6:	67da      	str	r2, [r3, #124]	; 0x7c
 80049e8:	4a10      	ldr	r2, [pc, #64]	; (8004a2c <HAL_UART_MspInit+0x2a8>)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80049ee:	2200      	movs	r2, #0
 80049f0:	2100      	movs	r1, #0
 80049f2:	2026      	movs	r0, #38	; 0x26
 80049f4:	f001 f95f 	bl	8005cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80049f8:	2026      	movs	r0, #38	; 0x26
 80049fa:	f001 f976 	bl	8005cea <HAL_NVIC_EnableIRQ>
}
 80049fe:	bf00      	nop
 8004a00:	37e8      	adds	r7, #232	; 0xe8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40011000 	.word	0x40011000
 8004a0c:	58024400 	.word	0x58024400
 8004a10:	58020400 	.word	0x58020400
 8004a14:	24000a54 	.word	0x24000a54
 8004a18:	40020010 	.word	0x40020010
 8004a1c:	240009dc 	.word	0x240009dc
 8004a20:	40020040 	.word	0x40020040
 8004a24:	40004400 	.word	0x40004400
 8004a28:	58020000 	.word	0x58020000
 8004a2c:	240008c8 	.word	0x240008c8
 8004a30:	40020058 	.word	0x40020058

08004a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8004a38:	e7fe      	b.n	8004a38 <NMI_Handler+0x4>

08004a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a3e:	e7fe      	b.n	8004a3e <HardFault_Handler+0x4>

08004a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a44:	e7fe      	b.n	8004a44 <MemManage_Handler+0x4>

08004a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a46:	b480      	push	{r7}
 8004a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a4a:	e7fe      	b.n	8004a4a <BusFault_Handler+0x4>

08004a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a50:	e7fe      	b.n	8004a50 <UsageFault_Handler+0x4>

08004a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a52:	b480      	push	{r7}
 8004a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a56:	bf00      	nop
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a64:	bf00      	nop
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a72:	bf00      	nop
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a80:	f000 ffee 	bl	8005a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a84:	bf00      	nop
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004a8c:	4802      	ldr	r0, [pc, #8]	; (8004a98 <DMA1_Stream0_IRQHandler+0x10>)
 8004a8e:	f002 fc6f 	bl	8007370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004a92:	bf00      	nop
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	24000a54 	.word	0x24000a54

08004a9c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004aa0:	4802      	ldr	r0, [pc, #8]	; (8004aac <DMA1_Stream1_IRQHandler+0x10>)
 8004aa2:	f002 fc65 	bl	8007370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004aa6:	bf00      	nop
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	24000b64 	.word	0x24000b64

08004ab0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004ab4:	4802      	ldr	r0, [pc, #8]	; (8004ac0 <DMA1_Stream2_IRQHandler+0x10>)
 8004ab6:	f002 fc5b 	bl	8007370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004aba:	bf00      	nop
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	240009dc 	.word	0x240009dc

08004ac4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004ac8:	4802      	ldr	r0, [pc, #8]	; (8004ad4 <DMA1_Stream3_IRQHandler+0x10>)
 8004aca:	f002 fc51 	bl	8007370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	240008c8 	.word	0x240008c8

08004ad8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004adc:	4802      	ldr	r0, [pc, #8]	; (8004ae8 <TIM3_IRQHandler+0x10>)
 8004ade:	f00a f9fb 	bl	800eed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	24000990 	.word	0x24000990

08004aec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004af0:	4802      	ldr	r0, [pc, #8]	; (8004afc <I2C1_EV_IRQHandler+0x10>)
 8004af2:	f004 fce9 	bl	80094c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004af6:	bf00      	nop
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	24000944 	.word	0x24000944

08004b00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b04:	4802      	ldr	r0, [pc, #8]	; (8004b10 <USART1_IRQHandler+0x10>)
 8004b06:	f00b fb1b 	bl	8010140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004b0a:	bf00      	nop
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	24000ad4 	.word	0x24000ad4

08004b14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004b18:	4802      	ldr	r0, [pc, #8]	; (8004b24 <USART2_IRQHandler+0x10>)
 8004b1a:	f00b fb11 	bl	8010140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b1e:	bf00      	nop
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	24000c68 	.word	0x24000c68

08004b28 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
//			tim1_20ms_count = 0;
//			tim1_20ms_flag = 1;
//		}
//	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004b2c:	4802      	ldr	r0, [pc, #8]	; (8004b38 <TIM7_IRQHandler+0x10>)
 8004b2e:	f00a f9d3 	bl	800eed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004b32:	bf00      	nop
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	24000d04 	.word	0x24000d04

08004b3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
	static unsigned short tim1_2ms_count = 0;
	static unsigned short tim1_10ms_count = 0;
	static unsigned short tim1_20ms_count = 0;
	static unsigned short tim1_500ms_count = 0;

	if(htim->Instance == TIM7)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1c      	ldr	r2, [pc, #112]	; (8004bbc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d12f      	bne.n	8004bae <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		tim1_2ms_count++;
 8004b4e:	4b1c      	ldr	r3, [pc, #112]	; (8004bc0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	3301      	adds	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004b58:	801a      	strh	r2, [r3, #0]
		if(tim1_2ms_count == 2)
 8004b5a:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d105      	bne.n	8004b6e <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			tim1_2ms_count = 0;
 8004b62:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	801a      	strh	r2, [r3, #0]
			tim1_2ms_flag = 1;
 8004b68:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	701a      	strb	r2, [r3, #0]
		}
		tim1_10ms_count++;
 8004b6e:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	3301      	adds	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004b78:	801a      	strh	r2, [r3, #0]
		if(tim1_10ms_count == 10)
 8004b7a:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	2b0a      	cmp	r3, #10
 8004b80:	d105      	bne.n	8004b8e <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			tim1_10ms_count = 0;
 8004b82:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	801a      	strh	r2, [r3, #0]
			tim1_10ms_flag = 1;
 8004b88:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	701a      	strb	r2, [r3, #0]
		}
		tim1_20ms_count++;
 8004b8e:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	3301      	adds	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	4b0e      	ldr	r3, [pc, #56]	; (8004bd0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004b98:	801a      	strh	r2, [r3, #0]
		if(tim1_20ms_count == 20)
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	2b14      	cmp	r3, #20
 8004ba0:	d105      	bne.n	8004bae <HAL_TIM_PeriodElapsedCallback+0x72>
		{
			tim1_20ms_count = 0;
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	801a      	strh	r2, [r3, #0]
			tim1_20ms_flag = 1;
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40001400 	.word	0x40001400
 8004bc0:	24000244 	.word	0x24000244
 8004bc4:	2400023c 	.word	0x2400023c
 8004bc8:	24000246 	.word	0x24000246
 8004bcc:	2400023d 	.word	0x2400023d
 8004bd0:	24000248 	.word	0x24000248
 8004bd4:	2400023e 	.word	0x2400023e

08004bd8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a33      	ldr	r2, [pc, #204]	; (8004cb4 <HAL_UART_RxCpltCallback+0xdc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d103      	bne.n	8004bf2 <HAL_UART_RxCpltCallback+0x1a>
	{
		uart1_rx_flag = 1;
 8004bea:	4b33      	ldr	r3, [pc, #204]	; (8004cb8 <HAL_UART_RxCpltCallback+0xe0>)
 8004bec:	2201      	movs	r2, #1
 8004bee:	701a      	strb	r2, [r3, #0]
			ibus_rx_buf[cnt]=uart2_rx_data;
			cnt++;
			break;
		}
	}
}
 8004bf0:	e059      	b.n	8004ca6 <HAL_UART_RxCpltCallback+0xce>
	else if(huart->Instance == USART2)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a31      	ldr	r2, [pc, #196]	; (8004cbc <HAL_UART_RxCpltCallback+0xe4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d151      	bne.n	8004ca0 <HAL_UART_RxCpltCallback+0xc8>
		uart2_rx_flag = 1;
 8004bfc:	4b30      	ldr	r3, [pc, #192]	; (8004cc0 <HAL_UART_RxCpltCallback+0xe8>)
 8004bfe:	2201      	movs	r2, #1
 8004c00:	701a      	strb	r2, [r3, #0]
		switch(cnt)
 8004c02:	4b30      	ldr	r3, [pc, #192]	; (8004cc4 <HAL_UART_RxCpltCallback+0xec>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b1f      	cmp	r3, #31
 8004c08:	d02e      	beq.n	8004c68 <HAL_UART_RxCpltCallback+0x90>
 8004c0a:	2b1f      	cmp	r3, #31
 8004c0c:	dc3a      	bgt.n	8004c84 <HAL_UART_RxCpltCallback+0xac>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_UART_RxCpltCallback+0x40>
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d012      	beq.n	8004c3c <HAL_UART_RxCpltCallback+0x64>
 8004c16:	e035      	b.n	8004c84 <HAL_UART_RxCpltCallback+0xac>
			if(uart2_rx_data==0x20)
 8004c18:	4b2b      	ldr	r3, [pc, #172]	; (8004cc8 <HAL_UART_RxCpltCallback+0xf0>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d141      	bne.n	8004ca4 <HAL_UART_RxCpltCallback+0xcc>
				ibus_rx_buf[cnt]=uart2_rx_data;
 8004c20:	4b28      	ldr	r3, [pc, #160]	; (8004cc4 <HAL_UART_RxCpltCallback+0xec>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	4b28      	ldr	r3, [pc, #160]	; (8004cc8 <HAL_UART_RxCpltCallback+0xf0>)
 8004c28:	7819      	ldrb	r1, [r3, #0]
 8004c2a:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <HAL_UART_RxCpltCallback+0xf4>)
 8004c2c:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004c2e:	4b25      	ldr	r3, [pc, #148]	; (8004cc4 <HAL_UART_RxCpltCallback+0xec>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	3301      	adds	r3, #1
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	4b23      	ldr	r3, [pc, #140]	; (8004cc4 <HAL_UART_RxCpltCallback+0xec>)
 8004c38:	701a      	strb	r2, [r3, #0]
			break;
 8004c3a:	e033      	b.n	8004ca4 <HAL_UART_RxCpltCallback+0xcc>
			if(uart2_rx_data==0x40)
 8004c3c:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <HAL_UART_RxCpltCallback+0xf0>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	d10d      	bne.n	8004c60 <HAL_UART_RxCpltCallback+0x88>
				ibus_rx_buf[cnt]=uart2_rx_data;
 8004c44:	4b1f      	ldr	r3, [pc, #124]	; (8004cc4 <HAL_UART_RxCpltCallback+0xec>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	4b1f      	ldr	r3, [pc, #124]	; (8004cc8 <HAL_UART_RxCpltCallback+0xf0>)
 8004c4c:	7819      	ldrb	r1, [r3, #0]
 8004c4e:	4b1f      	ldr	r3, [pc, #124]	; (8004ccc <HAL_UART_RxCpltCallback+0xf4>)
 8004c50:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004c52:	4b1c      	ldr	r3, [pc, #112]	; (8004cc4 <HAL_UART_RxCpltCallback+0xec>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	3301      	adds	r3, #1
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	4b1a      	ldr	r3, [pc, #104]	; (8004cc4 <HAL_UART_RxCpltCallback+0xec>)
 8004c5c:	701a      	strb	r2, [r3, #0]
			break;
 8004c5e:	e022      	b.n	8004ca6 <HAL_UART_RxCpltCallback+0xce>
				cnt=0;
 8004c60:	4b18      	ldr	r3, [pc, #96]	; (8004cc4 <HAL_UART_RxCpltCallback+0xec>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	701a      	strb	r2, [r3, #0]
			break;
 8004c66:	e01e      	b.n	8004ca6 <HAL_UART_RxCpltCallback+0xce>
			ibus_rx_buf[cnt]=uart2_rx_data;
 8004c68:	4b16      	ldr	r3, [pc, #88]	; (8004cc4 <HAL_UART_RxCpltCallback+0xec>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	4b16      	ldr	r3, [pc, #88]	; (8004cc8 <HAL_UART_RxCpltCallback+0xf0>)
 8004c70:	7819      	ldrb	r1, [r3, #0]
 8004c72:	4b16      	ldr	r3, [pc, #88]	; (8004ccc <HAL_UART_RxCpltCallback+0xf4>)
 8004c74:	5499      	strb	r1, [r3, r2]
			cnt=0;
 8004c76:	4b13      	ldr	r3, [pc, #76]	; (8004cc4 <HAL_UART_RxCpltCallback+0xec>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8004c7c:	4b14      	ldr	r3, [pc, #80]	; (8004cd0 <HAL_UART_RxCpltCallback+0xf8>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	701a      	strb	r2, [r3, #0]
			break;
 8004c82:	e010      	b.n	8004ca6 <HAL_UART_RxCpltCallback+0xce>
			ibus_rx_buf[cnt]=uart2_rx_data;
 8004c84:	4b0f      	ldr	r3, [pc, #60]	; (8004cc4 <HAL_UART_RxCpltCallback+0xec>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4b0f      	ldr	r3, [pc, #60]	; (8004cc8 <HAL_UART_RxCpltCallback+0xf0>)
 8004c8c:	7819      	ldrb	r1, [r3, #0]
 8004c8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ccc <HAL_UART_RxCpltCallback+0xf4>)
 8004c90:	5499      	strb	r1, [r3, r2]
			cnt++;
 8004c92:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <HAL_UART_RxCpltCallback+0xec>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	3301      	adds	r3, #1
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <HAL_UART_RxCpltCallback+0xec>)
 8004c9c:	701a      	strb	r2, [r3, #0]
			break;
 8004c9e:	e002      	b.n	8004ca6 <HAL_UART_RxCpltCallback+0xce>
	}
 8004ca0:	bf00      	nop
 8004ca2:	e000      	b.n	8004ca6 <HAL_UART_RxCpltCallback+0xce>
			break;
 8004ca4:	bf00      	nop
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40011000 	.word	0x40011000
 8004cb8:	2400023f 	.word	0x2400023f
 8004cbc:	40004400 	.word	0x40004400
 8004cc0:	24000241 	.word	0x24000241
 8004cc4:	2400024a 	.word	0x2400024a
 8004cc8:	24000242 	.word	0x24000242
 8004ccc:	24000d54 	.word	0x24000d54
 8004cd0:	24000243 	.word	0x24000243

08004cd4 <Receive_Command>:

void Receive_Command(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
	if(uart1_rx_flag == 1)
 8004cd8:	4b36      	ldr	r3, [pc, #216]	; (8004db4 <Receive_Command+0xe0>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d163      	bne.n	8004da8 <Receive_Command+0xd4>
	{
		uart1_rx_flag = 0;
 8004ce0:	4b34      	ldr	r3, [pc, #208]	; (8004db4 <Receive_Command+0xe0>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	701a      	strb	r2, [r3, #0]

		switch(uart1_rx_data)
 8004ce6:	4b34      	ldr	r3, [pc, #208]	; (8004db8 <Receive_Command+0xe4>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	2b14      	cmp	r3, #20
 8004cee:	d854      	bhi.n	8004d9a <Receive_Command+0xc6>
 8004cf0:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <Receive_Command+0x24>)
 8004cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf6:	bf00      	nop
 8004cf8:	08004d4d 	.word	0x08004d4d
 8004cfc:	08004d55 	.word	0x08004d55
 8004d00:	08004d5d 	.word	0x08004d5d
 8004d04:	08004d65 	.word	0x08004d65
 8004d08:	08004d6d 	.word	0x08004d6d
 8004d0c:	08004d75 	.word	0x08004d75
 8004d10:	08004d9b 	.word	0x08004d9b
 8004d14:	08004d9b 	.word	0x08004d9b
 8004d18:	08004d9b 	.word	0x08004d9b
 8004d1c:	08004d9b 	.word	0x08004d9b
 8004d20:	08004d7d 	.word	0x08004d7d
 8004d24:	08004d85 	.word	0x08004d85
 8004d28:	08004d9b 	.word	0x08004d9b
 8004d2c:	08004d9b 	.word	0x08004d9b
 8004d30:	08004d9b 	.word	0x08004d9b
 8004d34:	08004d9b 	.word	0x08004d9b
 8004d38:	08004d9b 	.word	0x08004d9b
 8004d3c:	08004d9b 	.word	0x08004d9b
 8004d40:	08004d9b 	.word	0x08004d9b
 8004d44:	08004d9b 	.word	0x08004d9b
 8004d48:	08004d8d 	.word	0x08004d8d
		{
		case 1: print_mode = 1; break; //Roll, Pitch, Yaw
 8004d4c:	4b1b      	ldr	r3, [pc, #108]	; (8004dbc <Receive_Command+0xe8>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	e02a      	b.n	8004daa <Receive_Command+0xd6>
		case 2: print_mode = 2; break; //Alt Raw, Alt Filt
 8004d54:	4b19      	ldr	r3, [pc, #100]	; (8004dbc <Receive_Command+0xe8>)
 8004d56:	2202      	movs	r2, #2
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	e026      	b.n	8004daa <Receive_Command+0xd6>
		case 3: print_mode = 3; break; //Gyro
 8004d5c:	4b17      	ldr	r3, [pc, #92]	; (8004dbc <Receive_Command+0xe8>)
 8004d5e:	2203      	movs	r2, #3
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e022      	b.n	8004daa <Receive_Command+0xd6>
		case 4: print_mode = 4; break; //Accel
 8004d64:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <Receive_Command+0xe8>)
 8004d66:	2204      	movs	r2, #4
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e01e      	b.n	8004daa <Receive_Command+0xd6>
		case 5: print_mode = 5; break; //Mag
 8004d6c:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <Receive_Command+0xe8>)
 8004d6e:	2205      	movs	r2, #5
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	e01a      	b.n	8004daa <Receive_Command+0xd6>
		case 6: print_mode = 6; break; //Mag_Offset
 8004d74:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <Receive_Command+0xe8>)
 8004d76:	2206      	movs	r2, #6
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	e016      	b.n	8004daa <Receive_Command+0xd6>
		case 11: print_mode = 11; break; //Controller Channels
 8004d7c:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <Receive_Command+0xe8>)
 8004d7e:	220b      	movs	r2, #11
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	e012      	b.n	8004daa <Receive_Command+0xd6>
		case 12: print_mode = 12; break; //GPS
 8004d84:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <Receive_Command+0xe8>)
 8004d86:	220c      	movs	r2, #12
 8004d88:	701a      	strb	r2, [r3, #0]
 8004d8a:	e00e      	b.n	8004daa <Receive_Command+0xd6>
		case 21: mag_calibration_enable = 1; print_mode = 0; break; //Mag Offset
 8004d8c:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <Receive_Command+0xec>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <Receive_Command+0xe8>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	e007      	b.n	8004daa <Receive_Command+0xd6>
		default: mag_calibration_enable = 0; print_mode = 0; break; // Stop Printing
 8004d9a:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <Receive_Command+0xec>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <Receive_Command+0xe8>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	e000      	b.n	8004daa <Receive_Command+0xd6>
		}
	}
 8004da8:	bf00      	nop
}
 8004daa:	bf00      	nop
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	2400023f 	.word	0x2400023f
 8004db8:	24000240 	.word	0x24000240
 8004dbc:	24000230 	.word	0x24000230
 8004dc0:	24000231 	.word	0x24000231

08004dc4 <Is_iBus_Received>:

int Is_iBus_Received(uint8_t ibus_rx_cplt_flag)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	71fb      	strb	r3, [r7, #7]
	iBus_return = 0;
 8004dce:	4b19      	ldr	r3, [pc, #100]	; (8004e34 <Is_iBus_Received+0x70>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	701a      	strb	r2, [r3, #0]
	if(ibus_rx_cplt_flag==1)
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d126      	bne.n	8004e28 <Is_iBus_Received+0x64>
	{
		ibus_rx_cplt_flag=0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	71fb      	strb	r3, [r7, #7]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 8004dde:	2120      	movs	r1, #32
 8004de0:	4815      	ldr	r0, [pc, #84]	; (8004e38 <Is_iBus_Received+0x74>)
 8004de2:	f7fb fc51 	bl	8000688 <iBus_Check_CHKSUM>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d11d      	bne.n	8004e28 <Is_iBus_Received+0x64>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004dec:	4913      	ldr	r1, [pc, #76]	; (8004e3c <Is_iBus_Received+0x78>)
 8004dee:	4812      	ldr	r0, [pc, #72]	; (8004e38 <Is_iBus_Received+0x74>)
 8004df0:	f7fb fc81 	bl	80006f6 <iBus_Parsing>
//			iBus_return = 1;
			if(iBus_isActiveFailSafe(&iBus) == 1)
 8004df4:	4811      	ldr	r0, [pc, #68]	; (8004e3c <Is_iBus_Received+0x78>)
 8004df6:	f7fb fd3a 	bl	800086e <iBus_isActiveFailSafe>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d108      	bne.n	8004e12 <Is_iBus_Received+0x4e>
			{
				HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8004e00:	2201      	movs	r2, #1
 8004e02:	2108      	movs	r1, #8
 8004e04:	480e      	ldr	r0, [pc, #56]	; (8004e40 <Is_iBus_Received+0x7c>)
 8004e06:	f003 ff8f 	bl	8008d28 <HAL_GPIO_WritePin>
				iBus_failsafe = 1;
 8004e0a:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <Is_iBus_Received+0x80>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	e00a      	b.n	8004e28 <Is_iBus_Received+0x64>
			}
			else
			{
				HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8004e12:	2200      	movs	r2, #0
 8004e14:	2108      	movs	r1, #8
 8004e16:	480a      	ldr	r0, [pc, #40]	; (8004e40 <Is_iBus_Received+0x7c>)
 8004e18:	f003 ff86 	bl	8008d28 <HAL_GPIO_WritePin>
				iBus_failsafe = 0;
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <Is_iBus_Received+0x80>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]
				iBus_return = 1;
 8004e22:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <Is_iBus_Received+0x70>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return iBus_return;
 8004e28:	4b02      	ldr	r3, [pc, #8]	; (8004e34 <Is_iBus_Received+0x70>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	2400026e 	.word	0x2400026e
 8004e38:	24000d54 	.word	0x24000d54
 8004e3c:	24000258 	.word	0x24000258
 8004e40:	58021000 	.word	0x58021000
 8004e44:	2400026f 	.word	0x2400026f

08004e48 <Is_Throttle_Min>:

int Is_Throttle_Min(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
	iBus_return = 0;
 8004e4c:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <Is_Throttle_Min+0x48>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	701a      	strb	r2, [r3, #0]
	if(ibus_rx_cplt_flag==1)
 8004e52:	4b10      	ldr	r3, [pc, #64]	; (8004e94 <Is_Throttle_Min+0x4c>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d115      	bne.n	8004e86 <Is_Throttle_Min+0x3e>
	{
		ibus_rx_cplt_flag=0;
 8004e5a:	4b0e      	ldr	r3, [pc, #56]	; (8004e94 <Is_Throttle_Min+0x4c>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 8004e60:	2120      	movs	r1, #32
 8004e62:	480d      	ldr	r0, [pc, #52]	; (8004e98 <Is_Throttle_Min+0x50>)
 8004e64:	f7fb fc10 	bl	8000688 <iBus_Check_CHKSUM>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d10b      	bne.n	8004e86 <Is_Throttle_Min+0x3e>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004e6e:	490b      	ldr	r1, [pc, #44]	; (8004e9c <Is_Throttle_Min+0x54>)
 8004e70:	4809      	ldr	r0, [pc, #36]	; (8004e98 <Is_Throttle_Min+0x50>)
 8004e72:	f7fb fc40 	bl	80006f6 <iBus_Parsing>
			if(iBus.LV < 1025) iBus_return =  1;
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <Is_Throttle_Min+0x54>)
 8004e78:	889b      	ldrh	r3, [r3, #4]
 8004e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e7e:	d802      	bhi.n	8004e86 <Is_Throttle_Min+0x3e>
 8004e80:	4b03      	ldr	r3, [pc, #12]	; (8004e90 <Is_Throttle_Min+0x48>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	701a      	strb	r2, [r3, #0]
		}
	}
	return iBus_return;
 8004e86:	4b02      	ldr	r3, [pc, #8]	; (8004e90 <Is_Throttle_Min+0x48>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	2400026e 	.word	0x2400026e
 8004e94:	24000243 	.word	0x24000243
 8004e98:	24000d54 	.word	0x24000d54
 8004e9c:	24000258 	.word	0x24000258

08004ea0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
	return 1;
 8004ea4:	2301      	movs	r3, #1
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <_kill>:

int _kill(int pid, int sig)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004eba:	f00c fde9 	bl	8011a90 <__errno>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2216      	movs	r2, #22
 8004ec2:	601a      	str	r2, [r3, #0]
	return -1;
 8004ec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <_exit>:

void _exit (int status)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff ffe7 	bl	8004eb0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004ee2:	e7fe      	b.n	8004ee2 <_exit+0x12>

08004ee4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e00a      	b.n	8004f0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004ef6:	f3af 8000 	nop.w
 8004efa:	4601      	mov	r1, r0
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	60ba      	str	r2, [r7, #8]
 8004f02:	b2ca      	uxtb	r2, r1
 8004f04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	dbf0      	blt.n	8004ef6 <_read+0x12>
	}

return len;
 8004f14:	687b      	ldr	r3, [r7, #4]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <_close>:
	}
	return len;
}

int _close(int file)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
	return -1;
 8004f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f46:	605a      	str	r2, [r3, #4]
	return 0;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <_isatty>:

int _isatty(int file)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
	return 1;
 8004f5e:	2301      	movs	r3, #1
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
	return 0;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f90:	4a14      	ldr	r2, [pc, #80]	; (8004fe4 <_sbrk+0x5c>)
 8004f92:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <_sbrk+0x60>)
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f9c:	4b13      	ldr	r3, [pc, #76]	; (8004fec <_sbrk+0x64>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d102      	bne.n	8004faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004fa4:	4b11      	ldr	r3, [pc, #68]	; (8004fec <_sbrk+0x64>)
 8004fa6:	4a12      	ldr	r2, [pc, #72]	; (8004ff0 <_sbrk+0x68>)
 8004fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004faa:	4b10      	ldr	r3, [pc, #64]	; (8004fec <_sbrk+0x64>)
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d207      	bcs.n	8004fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004fb8:	f00c fd6a 	bl	8011a90 <__errno>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	220c      	movs	r2, #12
 8004fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc6:	e009      	b.n	8004fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fc8:	4b08      	ldr	r3, [pc, #32]	; (8004fec <_sbrk+0x64>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fce:	4b07      	ldr	r3, [pc, #28]	; (8004fec <_sbrk+0x64>)
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	4a05      	ldr	r2, [pc, #20]	; (8004fec <_sbrk+0x64>)
 8004fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004fda:	68fb      	ldr	r3, [r7, #12]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	24080000 	.word	0x24080000
 8004fe8:	00000400 	.word	0x00000400
 8004fec:	2400024c 	.word	0x2400024c
 8004ff0:	24000db0 	.word	0x24000db0

08004ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004ff8:	4b39      	ldr	r3, [pc, #228]	; (80050e0 <SystemInit+0xec>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffe:	4a38      	ldr	r2, [pc, #224]	; (80050e0 <SystemInit+0xec>)
 8005000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005008:	4b36      	ldr	r3, [pc, #216]	; (80050e4 <SystemInit+0xf0>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	2b06      	cmp	r3, #6
 8005012:	d807      	bhi.n	8005024 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005014:	4b33      	ldr	r3, [pc, #204]	; (80050e4 <SystemInit+0xf0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f023 030f 	bic.w	r3, r3, #15
 800501c:	4a31      	ldr	r2, [pc, #196]	; (80050e4 <SystemInit+0xf0>)
 800501e:	f043 0307 	orr.w	r3, r3, #7
 8005022:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005024:	4b30      	ldr	r3, [pc, #192]	; (80050e8 <SystemInit+0xf4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a2f      	ldr	r2, [pc, #188]	; (80050e8 <SystemInit+0xf4>)
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005030:	4b2d      	ldr	r3, [pc, #180]	; (80050e8 <SystemInit+0xf4>)
 8005032:	2200      	movs	r2, #0
 8005034:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005036:	4b2c      	ldr	r3, [pc, #176]	; (80050e8 <SystemInit+0xf4>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	492b      	ldr	r1, [pc, #172]	; (80050e8 <SystemInit+0xf4>)
 800503c:	4b2b      	ldr	r3, [pc, #172]	; (80050ec <SystemInit+0xf8>)
 800503e:	4013      	ands	r3, r2
 8005040:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005042:	4b28      	ldr	r3, [pc, #160]	; (80050e4 <SystemInit+0xf0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d007      	beq.n	800505e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800504e:	4b25      	ldr	r3, [pc, #148]	; (80050e4 <SystemInit+0xf0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 030f 	bic.w	r3, r3, #15
 8005056:	4a23      	ldr	r2, [pc, #140]	; (80050e4 <SystemInit+0xf0>)
 8005058:	f043 0307 	orr.w	r3, r3, #7
 800505c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800505e:	4b22      	ldr	r3, [pc, #136]	; (80050e8 <SystemInit+0xf4>)
 8005060:	2200      	movs	r2, #0
 8005062:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005064:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <SystemInit+0xf4>)
 8005066:	2200      	movs	r2, #0
 8005068:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800506a:	4b1f      	ldr	r3, [pc, #124]	; (80050e8 <SystemInit+0xf4>)
 800506c:	2200      	movs	r2, #0
 800506e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005070:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <SystemInit+0xf4>)
 8005072:	4a1f      	ldr	r2, [pc, #124]	; (80050f0 <SystemInit+0xfc>)
 8005074:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005076:	4b1c      	ldr	r3, [pc, #112]	; (80050e8 <SystemInit+0xf4>)
 8005078:	4a1e      	ldr	r2, [pc, #120]	; (80050f4 <SystemInit+0x100>)
 800507a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800507c:	4b1a      	ldr	r3, [pc, #104]	; (80050e8 <SystemInit+0xf4>)
 800507e:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <SystemInit+0x104>)
 8005080:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005082:	4b19      	ldr	r3, [pc, #100]	; (80050e8 <SystemInit+0xf4>)
 8005084:	2200      	movs	r2, #0
 8005086:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005088:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <SystemInit+0xf4>)
 800508a:	4a1b      	ldr	r2, [pc, #108]	; (80050f8 <SystemInit+0x104>)
 800508c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800508e:	4b16      	ldr	r3, [pc, #88]	; (80050e8 <SystemInit+0xf4>)
 8005090:	2200      	movs	r2, #0
 8005092:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005094:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <SystemInit+0xf4>)
 8005096:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <SystemInit+0x104>)
 8005098:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800509a:	4b13      	ldr	r3, [pc, #76]	; (80050e8 <SystemInit+0xf4>)
 800509c:	2200      	movs	r2, #0
 800509e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80050a0:	4b11      	ldr	r3, [pc, #68]	; (80050e8 <SystemInit+0xf4>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a10      	ldr	r2, [pc, #64]	; (80050e8 <SystemInit+0xf4>)
 80050a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80050ac:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <SystemInit+0xf4>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80050b2:	4b12      	ldr	r3, [pc, #72]	; (80050fc <SystemInit+0x108>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b12      	ldr	r3, [pc, #72]	; (8005100 <SystemInit+0x10c>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050be:	d202      	bcs.n	80050c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80050c0:	4b10      	ldr	r3, [pc, #64]	; (8005104 <SystemInit+0x110>)
 80050c2:	2201      	movs	r2, #1
 80050c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80050c6:	4b10      	ldr	r3, [pc, #64]	; (8005108 <SystemInit+0x114>)
 80050c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80050cc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <SystemInit+0xec>)
 80050d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80050d4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80050d6:	bf00      	nop
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	e000ed00 	.word	0xe000ed00
 80050e4:	52002000 	.word	0x52002000
 80050e8:	58024400 	.word	0x58024400
 80050ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80050f0:	02020200 	.word	0x02020200
 80050f4:	01ff0000 	.word	0x01ff0000
 80050f8:	01010280 	.word	0x01010280
 80050fc:	5c001000 	.word	0x5c001000
 8005100:	ffff0000 	.word	0xffff0000
 8005104:	51008108 	.word	0x51008108
 8005108:	52004000 	.word	0x52004000

0800510c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af02      	add	r7, sp, #8
 8005112:	4603      	mov	r3, r0
 8005114:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8005116:	f107 020f 	add.w	r2, r7, #15
 800511a:	1df9      	adds	r1, r7, #7
 800511c:	2364      	movs	r3, #100	; 0x64
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	2301      	movs	r3, #1
 8005122:	4804      	ldr	r0, [pc, #16]	; (8005134 <W25qxx_Spi+0x28>)
 8005124:	f009 f88c 	bl	800e240 <HAL_SPI_TransmitReceive>
	return ret;
 8005128:	7bfb      	ldrb	r3, [r7, #15]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	24000bdc 	.word	0x24000bdc

08005138 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	2300      	movs	r3, #0
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	2300      	movs	r3, #0
 8005148:	607b      	str	r3, [r7, #4]
 800514a:	2300      	movs	r3, #0
 800514c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800514e:	2200      	movs	r2, #0
 8005150:	2140      	movs	r1, #64	; 0x40
 8005152:	4813      	ldr	r0, [pc, #76]	; (80051a0 <W25qxx_ReadID+0x68>)
 8005154:	f003 fde8 	bl	8008d28 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8005158:	209f      	movs	r0, #159	; 0x9f
 800515a:	f7ff ffd7 	bl	800510c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800515e:	20a5      	movs	r0, #165	; 0xa5
 8005160:	f7ff ffd4 	bl	800510c <W25qxx_Spi>
 8005164:	4603      	mov	r3, r0
 8005166:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005168:	20a5      	movs	r0, #165	; 0xa5
 800516a:	f7ff ffcf 	bl	800510c <W25qxx_Spi>
 800516e:	4603      	mov	r3, r0
 8005170:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005172:	20a5      	movs	r0, #165	; 0xa5
 8005174:	f7ff ffca 	bl	800510c <W25qxx_Spi>
 8005178:	4603      	mov	r3, r0
 800517a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800517c:	2201      	movs	r2, #1
 800517e:	2140      	movs	r1, #64	; 0x40
 8005180:	4807      	ldr	r0, [pc, #28]	; (80051a0 <W25qxx_ReadID+0x68>)
 8005182:	f003 fdd1 	bl	8008d28 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	041a      	lsls	r2, r3, #16
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	4313      	orrs	r3, r2
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
	return Temp;
 8005196:	68fb      	ldr	r3, [r7, #12]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	58020400 	.word	0x58020400

080051a4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80051a4:	b590      	push	{r4, r7, lr}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80051aa:	2200      	movs	r2, #0
 80051ac:	2140      	movs	r1, #64	; 0x40
 80051ae:	4816      	ldr	r0, [pc, #88]	; (8005208 <W25qxx_ReadUniqID+0x64>)
 80051b0:	f003 fdba 	bl	8008d28 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80051b4:	204b      	movs	r0, #75	; 0x4b
 80051b6:	f7ff ffa9 	bl	800510c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80051ba:	2300      	movs	r3, #0
 80051bc:	71fb      	strb	r3, [r7, #7]
 80051be:	e005      	b.n	80051cc <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80051c0:	20a5      	movs	r0, #165	; 0xa5
 80051c2:	f7ff ffa3 	bl	800510c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	3301      	adds	r3, #1
 80051ca:	71fb      	strb	r3, [r7, #7]
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d9f6      	bls.n	80051c0 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80051d2:	2300      	movs	r3, #0
 80051d4:	71bb      	strb	r3, [r7, #6]
 80051d6:	e00b      	b.n	80051f0 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80051d8:	79bc      	ldrb	r4, [r7, #6]
 80051da:	20a5      	movs	r0, #165	; 0xa5
 80051dc:	f7ff ff96 	bl	800510c <W25qxx_Spi>
 80051e0:	4603      	mov	r3, r0
 80051e2:	461a      	mov	r2, r3
 80051e4:	4b09      	ldr	r3, [pc, #36]	; (800520c <W25qxx_ReadUniqID+0x68>)
 80051e6:	4423      	add	r3, r4
 80051e8:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80051ea:	79bb      	ldrb	r3, [r7, #6]
 80051ec:	3301      	adds	r3, #1
 80051ee:	71bb      	strb	r3, [r7, #6]
 80051f0:	79bb      	ldrb	r3, [r7, #6]
 80051f2:	2b07      	cmp	r3, #7
 80051f4:	d9f0      	bls.n	80051d8 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80051f6:	2201      	movs	r2, #1
 80051f8:	2140      	movs	r1, #64	; 0x40
 80051fa:	4803      	ldr	r0, [pc, #12]	; (8005208 <W25qxx_ReadUniqID+0x64>)
 80051fc:	f003 fd94 	bl	8008d28 <HAL_GPIO_WritePin>
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	bd90      	pop	{r4, r7, pc}
 8005208:	58020400 	.word	0x58020400
 800520c:	24000d74 	.word	0x24000d74

08005210 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005214:	2200      	movs	r2, #0
 8005216:	2140      	movs	r1, #64	; 0x40
 8005218:	4807      	ldr	r0, [pc, #28]	; (8005238 <W25qxx_WriteEnable+0x28>)
 800521a:	f003 fd85 	bl	8008d28 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800521e:	2006      	movs	r0, #6
 8005220:	f7ff ff74 	bl	800510c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005224:	2201      	movs	r2, #1
 8005226:	2140      	movs	r1, #64	; 0x40
 8005228:	4803      	ldr	r0, [pc, #12]	; (8005238 <W25qxx_WriteEnable+0x28>)
 800522a:	f003 fd7d 	bl	8008d28 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800522e:	2001      	movs	r0, #1
 8005230:	f000 fc36 	bl	8005aa0 <HAL_Delay>
}
 8005234:	bf00      	nop
 8005236:	bd80      	pop	{r7, pc}
 8005238:	58020400 	.word	0x58020400

0800523c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	4603      	mov	r3, r0
 8005244:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800524a:	2200      	movs	r2, #0
 800524c:	2140      	movs	r1, #64	; 0x40
 800524e:	481c      	ldr	r0, [pc, #112]	; (80052c0 <W25qxx_ReadStatusRegister+0x84>)
 8005250:	f003 fd6a 	bl	8008d28 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d10c      	bne.n	8005274 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 800525a:	2005      	movs	r0, #5
 800525c:	f7ff ff56 	bl	800510c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005260:	20a5      	movs	r0, #165	; 0xa5
 8005262:	f7ff ff53 	bl	800510c <W25qxx_Spi>
 8005266:	4603      	mov	r3, r0
 8005268:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800526a:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <W25qxx_ReadStatusRegister+0x88>)
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8005272:	e01b      	b.n	80052ac <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d10c      	bne.n	8005294 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 800527a:	2035      	movs	r0, #53	; 0x35
 800527c:	f7ff ff46 	bl	800510c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005280:	20a5      	movs	r0, #165	; 0xa5
 8005282:	f7ff ff43 	bl	800510c <W25qxx_Spi>
 8005286:	4603      	mov	r3, r0
 8005288:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800528a:	4a0e      	ldr	r2, [pc, #56]	; (80052c4 <W25qxx_ReadStatusRegister+0x88>)
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8005292:	e00b      	b.n	80052ac <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8005294:	2015      	movs	r0, #21
 8005296:	f7ff ff39 	bl	800510c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800529a:	20a5      	movs	r0, #165	; 0xa5
 800529c:	f7ff ff36 	bl	800510c <W25qxx_Spi>
 80052a0:	4603      	mov	r3, r0
 80052a2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80052a4:	4a07      	ldr	r2, [pc, #28]	; (80052c4 <W25qxx_ReadStatusRegister+0x88>)
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80052ac:	2201      	movs	r2, #1
 80052ae:	2140      	movs	r1, #64	; 0x40
 80052b0:	4803      	ldr	r0, [pc, #12]	; (80052c0 <W25qxx_ReadStatusRegister+0x84>)
 80052b2:	f003 fd39 	bl	8008d28 <HAL_GPIO_WritePin>
	return status;
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	58020400 	.word	0x58020400
 80052c4:	24000d74 	.word	0x24000d74

080052c8 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80052cc:	2001      	movs	r0, #1
 80052ce:	f000 fbe7 	bl	8005aa0 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80052d2:	2200      	movs	r2, #0
 80052d4:	2140      	movs	r1, #64	; 0x40
 80052d6:	480f      	ldr	r0, [pc, #60]	; (8005314 <W25qxx_WaitForWriteEnd+0x4c>)
 80052d8:	f003 fd26 	bl	8008d28 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80052dc:	2005      	movs	r0, #5
 80052de:	f7ff ff15 	bl	800510c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80052e2:	20a5      	movs	r0, #165	; 0xa5
 80052e4:	f7ff ff12 	bl	800510c <W25qxx_Spi>
 80052e8:	4603      	mov	r3, r0
 80052ea:	461a      	mov	r2, r3
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <W25qxx_WaitForWriteEnd+0x50>)
 80052ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80052f2:	2001      	movs	r0, #1
 80052f4:	f000 fbd4 	bl	8005aa0 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80052f8:	4b07      	ldr	r3, [pc, #28]	; (8005318 <W25qxx_WaitForWriteEnd+0x50>)
 80052fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1ed      	bne.n	80052e2 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005306:	2201      	movs	r2, #1
 8005308:	2140      	movs	r1, #64	; 0x40
 800530a:	4802      	ldr	r0, [pc, #8]	; (8005314 <W25qxx_WaitForWriteEnd+0x4c>)
 800530c:	f003 fd0c 	bl	8008d28 <HAL_GPIO_WritePin>
}
 8005310:	bf00      	nop
 8005312:	bd80      	pop	{r7, pc}
 8005314:	58020400 	.word	0x58020400
 8005318:	24000d74 	.word	0x24000d74

0800531c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8005322:	4b65      	ldr	r3, [pc, #404]	; (80054b8 <W25qxx_Init+0x19c>)
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800532a:	e002      	b.n	8005332 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800532c:	2001      	movs	r0, #1
 800532e:	f000 fbb7 	bl	8005aa0 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8005332:	f000 fba9 	bl	8005a88 <HAL_GetTick>
 8005336:	4603      	mov	r3, r0
 8005338:	2b63      	cmp	r3, #99	; 0x63
 800533a:	d9f7      	bls.n	800532c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800533c:	2201      	movs	r2, #1
 800533e:	2140      	movs	r1, #64	; 0x40
 8005340:	485e      	ldr	r0, [pc, #376]	; (80054bc <W25qxx_Init+0x1a0>)
 8005342:	f003 fcf1 	bl	8008d28 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8005346:	2064      	movs	r0, #100	; 0x64
 8005348:	f000 fbaa 	bl	8005aa0 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 800534c:	f7ff fef4 	bl	8005138 <W25qxx_ReadID>
 8005350:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	3b11      	subs	r3, #17
 8005358:	2b0f      	cmp	r3, #15
 800535a:	d86c      	bhi.n	8005436 <W25qxx_Init+0x11a>
 800535c:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <W25qxx_Init+0x48>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	08005429 	.word	0x08005429
 8005368:	0800541b 	.word	0x0800541b
 800536c:	0800540d 	.word	0x0800540d
 8005370:	080053ff 	.word	0x080053ff
 8005374:	080053f1 	.word	0x080053f1
 8005378:	080053e3 	.word	0x080053e3
 800537c:	080053d5 	.word	0x080053d5
 8005380:	080053c5 	.word	0x080053c5
 8005384:	080053b5 	.word	0x080053b5
 8005388:	08005437 	.word	0x08005437
 800538c:	08005437 	.word	0x08005437
 8005390:	08005437 	.word	0x08005437
 8005394:	08005437 	.word	0x08005437
 8005398:	08005437 	.word	0x08005437
 800539c:	08005437 	.word	0x08005437
 80053a0:	080053a5 	.word	0x080053a5
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80053a4:	4b44      	ldr	r3, [pc, #272]	; (80054b8 <W25qxx_Init+0x19c>)
 80053a6:	220a      	movs	r2, #10
 80053a8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80053aa:	4b43      	ldr	r3, [pc, #268]	; (80054b8 <W25qxx_Init+0x19c>)
 80053ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053b0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 80053b2:	e046      	b.n	8005442 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80053b4:	4b40      	ldr	r3, [pc, #256]	; (80054b8 <W25qxx_Init+0x19c>)
 80053b6:	2209      	movs	r2, #9
 80053b8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80053ba:	4b3f      	ldr	r3, [pc, #252]	; (80054b8 <W25qxx_Init+0x19c>)
 80053bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053c0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 80053c2:	e03e      	b.n	8005442 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80053c4:	4b3c      	ldr	r3, [pc, #240]	; (80054b8 <W25qxx_Init+0x19c>)
 80053c6:	2208      	movs	r2, #8
 80053c8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80053ca:	4b3b      	ldr	r3, [pc, #236]	; (80054b8 <W25qxx_Init+0x19c>)
 80053cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053d0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 80053d2:	e036      	b.n	8005442 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80053d4:	4b38      	ldr	r3, [pc, #224]	; (80054b8 <W25qxx_Init+0x19c>)
 80053d6:	2207      	movs	r2, #7
 80053d8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80053da:	4b37      	ldr	r3, [pc, #220]	; (80054b8 <W25qxx_Init+0x19c>)
 80053dc:	2280      	movs	r2, #128	; 0x80
 80053de:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 80053e0:	e02f      	b.n	8005442 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80053e2:	4b35      	ldr	r3, [pc, #212]	; (80054b8 <W25qxx_Init+0x19c>)
 80053e4:	2206      	movs	r2, #6
 80053e6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80053e8:	4b33      	ldr	r3, [pc, #204]	; (80054b8 <W25qxx_Init+0x19c>)
 80053ea:	2240      	movs	r2, #64	; 0x40
 80053ec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 80053ee:	e028      	b.n	8005442 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80053f0:	4b31      	ldr	r3, [pc, #196]	; (80054b8 <W25qxx_Init+0x19c>)
 80053f2:	2205      	movs	r2, #5
 80053f4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80053f6:	4b30      	ldr	r3, [pc, #192]	; (80054b8 <W25qxx_Init+0x19c>)
 80053f8:	2220      	movs	r2, #32
 80053fa:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 80053fc:	e021      	b.n	8005442 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80053fe:	4b2e      	ldr	r3, [pc, #184]	; (80054b8 <W25qxx_Init+0x19c>)
 8005400:	2204      	movs	r2, #4
 8005402:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8005404:	4b2c      	ldr	r3, [pc, #176]	; (80054b8 <W25qxx_Init+0x19c>)
 8005406:	2210      	movs	r2, #16
 8005408:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800540a:	e01a      	b.n	8005442 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800540c:	4b2a      	ldr	r3, [pc, #168]	; (80054b8 <W25qxx_Init+0x19c>)
 800540e:	2203      	movs	r2, #3
 8005410:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8005412:	4b29      	ldr	r3, [pc, #164]	; (80054b8 <W25qxx_Init+0x19c>)
 8005414:	2208      	movs	r2, #8
 8005416:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8005418:	e013      	b.n	8005442 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800541a:	4b27      	ldr	r3, [pc, #156]	; (80054b8 <W25qxx_Init+0x19c>)
 800541c:	2202      	movs	r2, #2
 800541e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8005420:	4b25      	ldr	r3, [pc, #148]	; (80054b8 <W25qxx_Init+0x19c>)
 8005422:	2204      	movs	r2, #4
 8005424:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8005426:	e00c      	b.n	8005442 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8005428:	4b23      	ldr	r3, [pc, #140]	; (80054b8 <W25qxx_Init+0x19c>)
 800542a:	2201      	movs	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800542e:	4b22      	ldr	r3, [pc, #136]	; (80054b8 <W25qxx_Init+0x19c>)
 8005430:	2202      	movs	r2, #2
 8005432:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8005434:	e005      	b.n	8005442 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8005436:	4b20      	ldr	r3, [pc, #128]	; (80054b8 <W25qxx_Init+0x19c>)
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800543e:	2300      	movs	r3, #0
 8005440:	e036      	b.n	80054b0 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8005442:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <W25qxx_Init+0x19c>)
 8005444:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005448:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800544a:	4b1b      	ldr	r3, [pc, #108]	; (80054b8 <W25qxx_Init+0x19c>)
 800544c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005450:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8005452:	4b19      	ldr	r3, [pc, #100]	; (80054b8 <W25qxx_Init+0x19c>)
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	4a17      	ldr	r2, [pc, #92]	; (80054b8 <W25qxx_Init+0x19c>)
 800545a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800545c:	4b16      	ldr	r3, [pc, #88]	; (80054b8 <W25qxx_Init+0x19c>)
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	4a15      	ldr	r2, [pc, #84]	; (80054b8 <W25qxx_Init+0x19c>)
 8005462:	6912      	ldr	r2, [r2, #16]
 8005464:	fb02 f303 	mul.w	r3, r2, r3
 8005468:	4a13      	ldr	r2, [pc, #76]	; (80054b8 <W25qxx_Init+0x19c>)
 800546a:	8952      	ldrh	r2, [r2, #10]
 800546c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005470:	4a11      	ldr	r2, [pc, #68]	; (80054b8 <W25qxx_Init+0x19c>)
 8005472:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8005474:	4b10      	ldr	r3, [pc, #64]	; (80054b8 <W25qxx_Init+0x19c>)
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	4a0f      	ldr	r2, [pc, #60]	; (80054b8 <W25qxx_Init+0x19c>)
 800547c:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800547e:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <W25qxx_Init+0x19c>)
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	4a0d      	ldr	r2, [pc, #52]	; (80054b8 <W25qxx_Init+0x19c>)
 8005484:	6912      	ldr	r2, [r2, #16]
 8005486:	fb02 f303 	mul.w	r3, r2, r3
 800548a:	0a9b      	lsrs	r3, r3, #10
 800548c:	4a0a      	ldr	r2, [pc, #40]	; (80054b8 <W25qxx_Init+0x19c>)
 800548e:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8005490:	f7ff fe88 	bl	80051a4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8005494:	2001      	movs	r0, #1
 8005496:	f7ff fed1 	bl	800523c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800549a:	2002      	movs	r0, #2
 800549c:	f7ff fece 	bl	800523c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80054a0:	2003      	movs	r0, #3
 80054a2:	f7ff fecb 	bl	800523c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 80054a6:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <W25qxx_Init+0x19c>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80054ae:	2301      	movs	r3, #1
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	24000d74 	.word	0x24000d74
 80054bc:	58020400 	.word	0x58020400

080054c0 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 80054c8:	e002      	b.n	80054d0 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80054ca:	2001      	movs	r0, #1
 80054cc:	f000 fae8 	bl	8005aa0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80054d0:	4b25      	ldr	r3, [pc, #148]	; (8005568 <W25qxx_EraseSector+0xa8>)
 80054d2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d0f7      	beq.n	80054ca <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80054da:	4b23      	ldr	r3, [pc, #140]	; (8005568 <W25qxx_EraseSector+0xa8>)
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 80054e2:	f7ff fef1 	bl	80052c8 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80054e6:	4b20      	ldr	r3, [pc, #128]	; (8005568 <W25qxx_EraseSector+0xa8>)
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	fb02 f303 	mul.w	r3, r2, r3
 80054f0:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80054f2:	f7ff fe8d 	bl	8005210 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80054f6:	2200      	movs	r2, #0
 80054f8:	2140      	movs	r1, #64	; 0x40
 80054fa:	481c      	ldr	r0, [pc, #112]	; (800556c <W25qxx_EraseSector+0xac>)
 80054fc:	f003 fc14 	bl	8008d28 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8005500:	4b19      	ldr	r3, [pc, #100]	; (8005568 <W25qxx_EraseSector+0xa8>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d909      	bls.n	800551c <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8005508:	2021      	movs	r0, #33	; 0x21
 800550a:	f7ff fdff 	bl	800510c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	0e1b      	lsrs	r3, r3, #24
 8005512:	b2db      	uxtb	r3, r3
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff fdf9 	bl	800510c <W25qxx_Spi>
 800551a:	e002      	b.n	8005522 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 800551c:	2020      	movs	r0, #32
 800551e:	f7ff fdf5 	bl	800510c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	0c1b      	lsrs	r3, r3, #16
 8005526:	b2db      	uxtb	r3, r3
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff fdef 	bl	800510c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	0a1b      	lsrs	r3, r3, #8
 8005532:	b2db      	uxtb	r3, r3
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff fde9 	bl	800510c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fde4 	bl	800510c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005544:	2201      	movs	r2, #1
 8005546:	2140      	movs	r1, #64	; 0x40
 8005548:	4808      	ldr	r0, [pc, #32]	; (800556c <W25qxx_EraseSector+0xac>)
 800554a:	f003 fbed 	bl	8008d28 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800554e:	f7ff febb 	bl	80052c8 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8005552:	2001      	movs	r0, #1
 8005554:	f000 faa4 	bl	8005aa0 <HAL_Delay>
	w25qxx.Lock = 0;
 8005558:	4b03      	ldr	r3, [pc, #12]	; (8005568 <W25qxx_EraseSector+0xa8>)
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8005560:	bf00      	nop
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	24000d74 	.word	0x24000d74
 800556c:	58020400 	.word	0x58020400

08005570 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8005578:	4b07      	ldr	r3, [pc, #28]	; (8005598 <W25qxx_SectorToPage+0x28>)
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	fb02 f303 	mul.w	r3, r2, r3
 8005582:	4a05      	ldr	r2, [pc, #20]	; (8005598 <W25qxx_SectorToPage+0x28>)
 8005584:	8952      	ldrh	r2, [r2, #10]
 8005586:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800558a:	4618      	mov	r0, r3
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	24000d74 	.word	0x24000d74

0800559c <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80055aa:	e002      	b.n	80055b2 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80055ac:	2001      	movs	r0, #1
 80055ae:	f000 fa77 	bl	8005aa0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80055b2:	4b39      	ldr	r3, [pc, #228]	; (8005698 <W25qxx_WritePage+0xfc>)
 80055b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d0f7      	beq.n	80055ac <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80055bc:	4b36      	ldr	r3, [pc, #216]	; (8005698 <W25qxx_WritePage+0xfc>)
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4413      	add	r3, r2
 80055ca:	4a33      	ldr	r2, [pc, #204]	; (8005698 <W25qxx_WritePage+0xfc>)
 80055cc:	8952      	ldrh	r2, [r2, #10]
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d802      	bhi.n	80055d8 <W25qxx_WritePage+0x3c>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d105      	bne.n	80055e4 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80055d8:	4b2f      	ldr	r3, [pc, #188]	; (8005698 <W25qxx_WritePage+0xfc>)
 80055da:	895b      	ldrh	r3, [r3, #10]
 80055dc:	461a      	mov	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	4413      	add	r3, r2
 80055ea:	4a2b      	ldr	r2, [pc, #172]	; (8005698 <W25qxx_WritePage+0xfc>)
 80055ec:	8952      	ldrh	r2, [r2, #10]
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d905      	bls.n	80055fe <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80055f2:	4b29      	ldr	r3, [pc, #164]	; (8005698 <W25qxx_WritePage+0xfc>)
 80055f4:	895b      	ldrh	r3, [r3, #10]
 80055f6:	461a      	mov	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 80055fe:	f7ff fe63 	bl	80052c8 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8005602:	f7ff fe05 	bl	8005210 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005606:	2200      	movs	r2, #0
 8005608:	2140      	movs	r1, #64	; 0x40
 800560a:	4824      	ldr	r0, [pc, #144]	; (800569c <W25qxx_WritePage+0x100>)
 800560c:	f003 fb8c 	bl	8008d28 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8005610:	4b21      	ldr	r3, [pc, #132]	; (8005698 <W25qxx_WritePage+0xfc>)
 8005612:	895b      	ldrh	r3, [r3, #10]
 8005614:	461a      	mov	r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	fb03 f302 	mul.w	r3, r3, r2
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	4413      	add	r3, r2
 8005620:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8005622:	4b1d      	ldr	r3, [pc, #116]	; (8005698 <W25qxx_WritePage+0xfc>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b08      	cmp	r3, #8
 8005628:	d909      	bls.n	800563e <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 800562a:	2012      	movs	r0, #18
 800562c:	f7ff fd6e 	bl	800510c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	0e1b      	lsrs	r3, r3, #24
 8005634:	b2db      	uxtb	r3, r3
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff fd68 	bl	800510c <W25qxx_Spi>
 800563c:	e002      	b.n	8005644 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 800563e:	2002      	movs	r0, #2
 8005640:	f7ff fd64 	bl	800510c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	0c1b      	lsrs	r3, r3, #16
 8005648:	b2db      	uxtb	r3, r3
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff fd5e 	bl	800510c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	0a1b      	lsrs	r3, r3, #8
 8005654:	b2db      	uxtb	r3, r3
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff fd58 	bl	800510c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff fd53 	bl	800510c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	b29a      	uxth	r2, r3
 800566a:	2364      	movs	r3, #100	; 0x64
 800566c:	68f9      	ldr	r1, [r7, #12]
 800566e:	480c      	ldr	r0, [pc, #48]	; (80056a0 <W25qxx_WritePage+0x104>)
 8005670:	f008 fa02 	bl	800da78 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005674:	2201      	movs	r2, #1
 8005676:	2140      	movs	r1, #64	; 0x40
 8005678:	4808      	ldr	r0, [pc, #32]	; (800569c <W25qxx_WritePage+0x100>)
 800567a:	f003 fb55 	bl	8008d28 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800567e:	f7ff fe23 	bl	80052c8 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8005682:	2001      	movs	r0, #1
 8005684:	f000 fa0c 	bl	8005aa0 <HAL_Delay>
	w25qxx.Lock = 0;
 8005688:	4b03      	ldr	r3, [pc, #12]	; (8005698 <W25qxx_WritePage+0xfc>)
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8005690:	bf00      	nop
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	24000d74 	.word	0x24000d74
 800569c:	58020400 	.word	0x58020400
 80056a0:	24000bdc 	.word	0x24000bdc

080056a4 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 80056b2:	4b2c      	ldr	r3, [pc, #176]	; (8005764 <W25qxx_WriteSector+0xc0>)
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d802      	bhi.n	80056c2 <W25qxx_WriteSector+0x1e>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d102      	bne.n	80056c8 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80056c2:	4b28      	ldr	r3, [pc, #160]	; (8005764 <W25qxx_WriteSector+0xc0>)
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80056c8:	4b26      	ldr	r3, [pc, #152]	; (8005764 <W25qxx_WriteSector+0xc0>)
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d243      	bcs.n	800575a <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	441a      	add	r2, r3
 80056d8:	4b22      	ldr	r3, [pc, #136]	; (8005764 <W25qxx_WriteSector+0xc0>)
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d905      	bls.n	80056ec <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80056e0:	4b20      	ldr	r3, [pc, #128]	; (8005764 <W25qxx_WriteSector+0xc0>)
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	e001      	b.n	80056f0 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80056f0:	68b8      	ldr	r0, [r7, #8]
 80056f2:	f7ff ff3d 	bl	8005570 <W25qxx_SectorToPage>
 80056f6:	4602      	mov	r2, r0
 80056f8:	4b1a      	ldr	r3, [pc, #104]	; (8005764 <W25qxx_WriteSector+0xc0>)
 80056fa:	895b      	ldrh	r3, [r3, #10]
 80056fc:	4619      	mov	r1, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	fbb3 f3f1 	udiv	r3, r3, r1
 8005704:	4413      	add	r3, r2
 8005706:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8005708:	4b16      	ldr	r3, [pc, #88]	; (8005764 <W25qxx_WriteSector+0xc0>)
 800570a:	895b      	ldrh	r3, [r3, #10]
 800570c:	461a      	mov	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	fbb3 f1f2 	udiv	r1, r3, r2
 8005714:	fb02 f201 	mul.w	r2, r2, r1
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	69f9      	ldr	r1, [r7, #28]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff ff3a 	bl	800559c <W25qxx_WritePage>
		StartPage++;
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	3301      	adds	r3, #1
 800572c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800572e:	4b0d      	ldr	r3, [pc, #52]	; (8005764 <W25qxx_WriteSector+0xc0>)
 8005730:	895b      	ldrh	r3, [r3, #10]
 8005732:	461a      	mov	r2, r3
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	1a9a      	subs	r2, r3, r2
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	4413      	add	r3, r2
 800573c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800573e:	4b09      	ldr	r3, [pc, #36]	; (8005764 <W25qxx_WriteSector+0xc0>)
 8005740:	895b      	ldrh	r3, [r3, #10]
 8005742:	461a      	mov	r2, r3
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	dce1      	bgt.n	800571c <W25qxx_WriteSector+0x78>
 8005758:	e000      	b.n	800575c <W25qxx_WriteSector+0xb8>
		return;
 800575a:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800575c:	3720      	adds	r7, #32
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	24000d74 	.word	0x24000d74

08005768 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8005776:	e002      	b.n	800577e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8005778:	2001      	movs	r0, #1
 800577a:	f000 f991 	bl	8005aa0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800577e:	4b36      	ldr	r3, [pc, #216]	; (8005858 <W25qxx_ReadPage+0xf0>)
 8005780:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005784:	2b01      	cmp	r3, #1
 8005786:	d0f7      	beq.n	8005778 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8005788:	4b33      	ldr	r3, [pc, #204]	; (8005858 <W25qxx_ReadPage+0xf0>)
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8005790:	4b31      	ldr	r3, [pc, #196]	; (8005858 <W25qxx_ReadPage+0xf0>)
 8005792:	895b      	ldrh	r3, [r3, #10]
 8005794:	461a      	mov	r2, r3
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	4293      	cmp	r3, r2
 800579a:	d802      	bhi.n	80057a2 <W25qxx_ReadPage+0x3a>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d102      	bne.n	80057a8 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80057a2:	4b2d      	ldr	r3, [pc, #180]	; (8005858 <W25qxx_ReadPage+0xf0>)
 80057a4:	895b      	ldrh	r3, [r3, #10]
 80057a6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	4413      	add	r3, r2
 80057ae:	4a2a      	ldr	r2, [pc, #168]	; (8005858 <W25qxx_ReadPage+0xf0>)
 80057b0:	8952      	ldrh	r2, [r2, #10]
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d905      	bls.n	80057c2 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80057b6:	4b28      	ldr	r3, [pc, #160]	; (8005858 <W25qxx_ReadPage+0xf0>)
 80057b8:	895b      	ldrh	r3, [r3, #10]
 80057ba:	461a      	mov	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80057c2:	4b25      	ldr	r3, [pc, #148]	; (8005858 <W25qxx_ReadPage+0xf0>)
 80057c4:	895b      	ldrh	r3, [r3, #10]
 80057c6:	461a      	mov	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	fb03 f302 	mul.w	r3, r3, r2
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	4413      	add	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80057d4:	2200      	movs	r2, #0
 80057d6:	2140      	movs	r1, #64	; 0x40
 80057d8:	4820      	ldr	r0, [pc, #128]	; (800585c <W25qxx_ReadPage+0xf4>)
 80057da:	f003 faa5 	bl	8008d28 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80057de:	4b1e      	ldr	r3, [pc, #120]	; (8005858 <W25qxx_ReadPage+0xf0>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d909      	bls.n	80057fa <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 80057e6:	200c      	movs	r0, #12
 80057e8:	f7ff fc90 	bl	800510c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	0e1b      	lsrs	r3, r3, #24
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff fc8a 	bl	800510c <W25qxx_Spi>
 80057f8:	e002      	b.n	8005800 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80057fa:	200b      	movs	r0, #11
 80057fc:	f7ff fc86 	bl	800510c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	0c1b      	lsrs	r3, r3, #16
 8005804:	b2db      	uxtb	r3, r3
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff fc80 	bl	800510c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	0a1b      	lsrs	r3, r3, #8
 8005810:	b2db      	uxtb	r3, r3
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff fc7a 	bl	800510c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	b2db      	uxtb	r3, r3
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff fc75 	bl	800510c <W25qxx_Spi>
	W25qxx_Spi(0);
 8005822:	2000      	movs	r0, #0
 8005824:	f7ff fc72 	bl	800510c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	b29a      	uxth	r2, r3
 800582c:	2364      	movs	r3, #100	; 0x64
 800582e:	68f9      	ldr	r1, [r7, #12]
 8005830:	480b      	ldr	r0, [pc, #44]	; (8005860 <W25qxx_ReadPage+0xf8>)
 8005832:	f008 fb13 	bl	800de5c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005836:	2201      	movs	r2, #1
 8005838:	2140      	movs	r1, #64	; 0x40
 800583a:	4808      	ldr	r0, [pc, #32]	; (800585c <W25qxx_ReadPage+0xf4>)
 800583c:	f003 fa74 	bl	8008d28 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8005840:	2001      	movs	r0, #1
 8005842:	f000 f92d 	bl	8005aa0 <HAL_Delay>
	w25qxx.Lock = 0;
 8005846:	4b04      	ldr	r3, [pc, #16]	; (8005858 <W25qxx_ReadPage+0xf0>)
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800584e:	bf00      	nop
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	24000d74 	.word	0x24000d74
 800585c:	58020400 	.word	0x58020400
 8005860:	24000bdc 	.word	0x24000bdc

08005864 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8005872:	4b2c      	ldr	r3, [pc, #176]	; (8005924 <W25qxx_ReadSector+0xc0>)
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d802      	bhi.n	8005882 <W25qxx_ReadSector+0x1e>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d102      	bne.n	8005888 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8005882:	4b28      	ldr	r3, [pc, #160]	; (8005924 <W25qxx_ReadSector+0xc0>)
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8005888:	4b26      	ldr	r3, [pc, #152]	; (8005924 <W25qxx_ReadSector+0xc0>)
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	429a      	cmp	r2, r3
 8005890:	d243      	bcs.n	800591a <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	441a      	add	r2, r3
 8005898:	4b22      	ldr	r3, [pc, #136]	; (8005924 <W25qxx_ReadSector+0xc0>)
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	429a      	cmp	r2, r3
 800589e:	d905      	bls.n	80058ac <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80058a0:	4b20      	ldr	r3, [pc, #128]	; (8005924 <W25qxx_ReadSector+0xc0>)
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	61bb      	str	r3, [r7, #24]
 80058aa:	e001      	b.n	80058b0 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80058b0:	68b8      	ldr	r0, [r7, #8]
 80058b2:	f7ff fe5d 	bl	8005570 <W25qxx_SectorToPage>
 80058b6:	4602      	mov	r2, r0
 80058b8:	4b1a      	ldr	r3, [pc, #104]	; (8005924 <W25qxx_ReadSector+0xc0>)
 80058ba:	895b      	ldrh	r3, [r3, #10]
 80058bc:	4619      	mov	r1, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80058c4:	4413      	add	r3, r2
 80058c6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80058c8:	4b16      	ldr	r3, [pc, #88]	; (8005924 <W25qxx_ReadSector+0xc0>)
 80058ca:	895b      	ldrh	r3, [r3, #10]
 80058cc:	461a      	mov	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80058d4:	fb02 f201 	mul.w	r2, r2, r1
 80058d8:	1a9b      	subs	r3, r3, r2
 80058da:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	69f9      	ldr	r1, [r7, #28]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f7ff ff40 	bl	8005768 <W25qxx_ReadPage>
		StartPage++;
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	3301      	adds	r3, #1
 80058ec:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80058ee:	4b0d      	ldr	r3, [pc, #52]	; (8005924 <W25qxx_ReadSector+0xc0>)
 80058f0:	895b      	ldrh	r3, [r3, #10]
 80058f2:	461a      	mov	r2, r3
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	1a9a      	subs	r2, r3, r2
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	4413      	add	r3, r2
 80058fc:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80058fe:	4b09      	ldr	r3, [pc, #36]	; (8005924 <W25qxx_ReadSector+0xc0>)
 8005900:	895b      	ldrh	r3, [r3, #10]
 8005902:	461a      	mov	r2, r3
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	2b00      	cmp	r3, #0
 8005916:	dce1      	bgt.n	80058dc <W25qxx_ReadSector+0x78>
 8005918:	e000      	b.n	800591c <W25qxx_ReadSector+0xb8>
		return;
 800591a:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800591c:	3720      	adds	r7, #32
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	24000d74 	.word	0x24000d74

08005928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005960 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800592c:	f7ff fb62 	bl	8004ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005930:	480c      	ldr	r0, [pc, #48]	; (8005964 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005932:	490d      	ldr	r1, [pc, #52]	; (8005968 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005934:	4a0d      	ldr	r2, [pc, #52]	; (800596c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005938:	e002      	b.n	8005940 <LoopCopyDataInit>

0800593a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800593a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800593c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800593e:	3304      	adds	r3, #4

08005940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005944:	d3f9      	bcc.n	800593a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005946:	4a0a      	ldr	r2, [pc, #40]	; (8005970 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005948:	4c0a      	ldr	r4, [pc, #40]	; (8005974 <LoopFillZerobss+0x22>)
  movs r3, #0
 800594a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800594c:	e001      	b.n	8005952 <LoopFillZerobss>

0800594e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800594e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005950:	3204      	adds	r2, #4

08005952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005954:	d3fb      	bcc.n	800594e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005956:	f00c f8a1 	bl	8011a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800595a:	f7fd fba5 	bl	80030a8 <main>
  bx  lr
 800595e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005960:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005964:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005968:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 800596c:	08015370 	.word	0x08015370
  ldr r2, =_sbss
 8005970:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8005974:	24000db0 	.word	0x24000db0

08005978 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005978:	e7fe      	b.n	8005978 <ADC3_IRQHandler>
	...

0800597c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005982:	2003      	movs	r0, #3
 8005984:	f000 f98c 	bl	8005ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005988:	f006 fa3c 	bl	800be04 <HAL_RCC_GetSysClockFreq>
 800598c:	4602      	mov	r2, r0
 800598e:	4b15      	ldr	r3, [pc, #84]	; (80059e4 <HAL_Init+0x68>)
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	0a1b      	lsrs	r3, r3, #8
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	4913      	ldr	r1, [pc, #76]	; (80059e8 <HAL_Init+0x6c>)
 800599a:	5ccb      	ldrb	r3, [r1, r3]
 800599c:	f003 031f 	and.w	r3, r3, #31
 80059a0:	fa22 f303 	lsr.w	r3, r2, r3
 80059a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059a6:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <HAL_Init+0x68>)
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	4a0e      	ldr	r2, [pc, #56]	; (80059e8 <HAL_Init+0x6c>)
 80059b0:	5cd3      	ldrb	r3, [r2, r3]
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
 80059bc:	4a0b      	ldr	r2, [pc, #44]	; (80059ec <HAL_Init+0x70>)
 80059be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059c0:	4a0b      	ldr	r2, [pc, #44]	; (80059f0 <HAL_Init+0x74>)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059c6:	200f      	movs	r0, #15
 80059c8:	f000 f814 	bl	80059f4 <HAL_InitTick>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e002      	b.n	80059dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80059d6:	f7fe fd13 	bl	8004400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	58024400 	.word	0x58024400
 80059e8:	08014e94 	.word	0x08014e94
 80059ec:	24000018 	.word	0x24000018
 80059f0:	24000014 	.word	0x24000014

080059f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80059fc:	4b15      	ldr	r3, [pc, #84]	; (8005a54 <HAL_InitTick+0x60>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e021      	b.n	8005a4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005a08:	4b13      	ldr	r3, [pc, #76]	; (8005a58 <HAL_InitTick+0x64>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <HAL_InitTick+0x60>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	4619      	mov	r1, r3
 8005a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 f971 	bl	8005d06 <HAL_SYSTICK_Config>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e00e      	b.n	8005a4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b0f      	cmp	r3, #15
 8005a32:	d80a      	bhi.n	8005a4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a34:	2200      	movs	r2, #0
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3c:	f000 f93b 	bl	8005cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005a40:	4a06      	ldr	r2, [pc, #24]	; (8005a5c <HAL_InitTick+0x68>)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	e000      	b.n	8005a4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	24000020 	.word	0x24000020
 8005a58:	24000014 	.word	0x24000014
 8005a5c:	2400001c 	.word	0x2400001c

08005a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005a64:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <HAL_IncTick+0x20>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <HAL_IncTick+0x24>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4413      	add	r3, r2
 8005a70:	4a04      	ldr	r2, [pc, #16]	; (8005a84 <HAL_IncTick+0x24>)
 8005a72:	6013      	str	r3, [r2, #0]
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	24000020 	.word	0x24000020
 8005a84:	24000d9c 	.word	0x24000d9c

08005a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8005a8c:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <HAL_GetTick+0x14>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	24000d9c 	.word	0x24000d9c

08005aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005aa8:	f7ff ffee 	bl	8005a88 <HAL_GetTick>
 8005aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab8:	d005      	beq.n	8005ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <HAL_Delay+0x44>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ac6:	bf00      	nop
 8005ac8:	f7ff ffde 	bl	8005a88 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d8f7      	bhi.n	8005ac8 <HAL_Delay+0x28>
  {
  }
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	24000020 	.word	0x24000020

08005ae8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005aec:	4b03      	ldr	r3, [pc, #12]	; (8005afc <HAL_GetREVID+0x14>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	0c1b      	lsrs	r3, r3, #16
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	5c001000 	.word	0x5c001000

08005b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b10:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <__NVIC_SetPriorityGrouping+0x40>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b28:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <__NVIC_SetPriorityGrouping+0x44>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b2e:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <__NVIC_SetPriorityGrouping+0x40>)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	60d3      	str	r3, [r2, #12]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	e000ed00 	.word	0xe000ed00
 8005b44:	05fa0000 	.word	0x05fa0000

08005b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b4c:	4b04      	ldr	r3, [pc, #16]	; (8005b60 <__NVIC_GetPriorityGrouping+0x18>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	f003 0307 	and.w	r3, r3, #7
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	e000ed00 	.word	0xe000ed00

08005b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	db0b      	blt.n	8005b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	f003 021f 	and.w	r2, r3, #31
 8005b7c:	4907      	ldr	r1, [pc, #28]	; (8005b9c <__NVIC_EnableIRQ+0x38>)
 8005b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	2001      	movs	r0, #1
 8005b86:	fa00 f202 	lsl.w	r2, r0, r2
 8005b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	e000e100 	.word	0xe000e100

08005ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	6039      	str	r1, [r7, #0]
 8005baa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	db0a      	blt.n	8005bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	490c      	ldr	r1, [pc, #48]	; (8005bec <__NVIC_SetPriority+0x4c>)
 8005bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bbe:	0112      	lsls	r2, r2, #4
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	440b      	add	r3, r1
 8005bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bc8:	e00a      	b.n	8005be0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	4908      	ldr	r1, [pc, #32]	; (8005bf0 <__NVIC_SetPriority+0x50>)
 8005bd0:	88fb      	ldrh	r3, [r7, #6]
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	3b04      	subs	r3, #4
 8005bd8:	0112      	lsls	r2, r2, #4
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	440b      	add	r3, r1
 8005bde:	761a      	strb	r2, [r3, #24]
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	e000e100 	.word	0xe000e100
 8005bf0:	e000ed00 	.word	0xe000ed00

08005bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b089      	sub	sp, #36	; 0x24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	f1c3 0307 	rsb	r3, r3, #7
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	bf28      	it	cs
 8005c12:	2304      	movcs	r3, #4
 8005c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	2b06      	cmp	r3, #6
 8005c1c:	d902      	bls.n	8005c24 <NVIC_EncodePriority+0x30>
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	3b03      	subs	r3, #3
 8005c22:	e000      	b.n	8005c26 <NVIC_EncodePriority+0x32>
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c28:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	43da      	mvns	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	401a      	ands	r2, r3
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	fa01 f303 	lsl.w	r3, r1, r3
 8005c46:	43d9      	mvns	r1, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c4c:	4313      	orrs	r3, r2
         );
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3724      	adds	r7, #36	; 0x24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c6c:	d301      	bcc.n	8005c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e00f      	b.n	8005c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c72:	4a0a      	ldr	r2, [pc, #40]	; (8005c9c <SysTick_Config+0x40>)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c7a:	210f      	movs	r1, #15
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c80:	f7ff ff8e 	bl	8005ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c84:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <SysTick_Config+0x40>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c8a:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <SysTick_Config+0x40>)
 8005c8c:	2207      	movs	r2, #7
 8005c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	e000e010 	.word	0xe000e010

08005ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff ff29 	bl	8005b00 <__NVIC_SetPriorityGrouping>
}
 8005cae:	bf00      	nop
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b086      	sub	sp, #24
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607a      	str	r2, [r7, #4]
 8005cc2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cc4:	f7ff ff40 	bl	8005b48 <__NVIC_GetPriorityGrouping>
 8005cc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	6978      	ldr	r0, [r7, #20]
 8005cd0:	f7ff ff90 	bl	8005bf4 <NVIC_EncodePriority>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005cda:	4611      	mov	r1, r2
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff ff5f 	bl	8005ba0 <__NVIC_SetPriority>
}
 8005ce2:	bf00      	nop
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b082      	sub	sp, #8
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff ff33 	bl	8005b64 <__NVIC_EnableIRQ>
}
 8005cfe:	bf00      	nop
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b082      	sub	sp, #8
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff ffa4 	bl	8005c5c <SysTick_Config>
 8005d14:	4603      	mov	r3, r0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005d28:	f7ff feae 	bl	8005a88 <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e316      	b.n	8006366 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a66      	ldr	r2, [pc, #408]	; (8005ed8 <HAL_DMA_Init+0x1b8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d04a      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a65      	ldr	r2, [pc, #404]	; (8005edc <HAL_DMA_Init+0x1bc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d045      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a63      	ldr	r2, [pc, #396]	; (8005ee0 <HAL_DMA_Init+0x1c0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d040      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a62      	ldr	r2, [pc, #392]	; (8005ee4 <HAL_DMA_Init+0x1c4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d03b      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a60      	ldr	r2, [pc, #384]	; (8005ee8 <HAL_DMA_Init+0x1c8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d036      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a5f      	ldr	r2, [pc, #380]	; (8005eec <HAL_DMA_Init+0x1cc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d031      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a5d      	ldr	r2, [pc, #372]	; (8005ef0 <HAL_DMA_Init+0x1d0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d02c      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a5c      	ldr	r2, [pc, #368]	; (8005ef4 <HAL_DMA_Init+0x1d4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d027      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a5a      	ldr	r2, [pc, #360]	; (8005ef8 <HAL_DMA_Init+0x1d8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d022      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a59      	ldr	r2, [pc, #356]	; (8005efc <HAL_DMA_Init+0x1dc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d01d      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a57      	ldr	r2, [pc, #348]	; (8005f00 <HAL_DMA_Init+0x1e0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d018      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a56      	ldr	r2, [pc, #344]	; (8005f04 <HAL_DMA_Init+0x1e4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d013      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a54      	ldr	r2, [pc, #336]	; (8005f08 <HAL_DMA_Init+0x1e8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00e      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a53      	ldr	r2, [pc, #332]	; (8005f0c <HAL_DMA_Init+0x1ec>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d009      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a51      	ldr	r2, [pc, #324]	; (8005f10 <HAL_DMA_Init+0x1f0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d004      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a50      	ldr	r2, [pc, #320]	; (8005f14 <HAL_DMA_Init+0x1f4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d101      	bne.n	8005ddc <HAL_DMA_Init+0xbc>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e000      	b.n	8005dde <HAL_DMA_Init+0xbe>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 813b 	beq.w	800605a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a37      	ldr	r2, [pc, #220]	; (8005ed8 <HAL_DMA_Init+0x1b8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d04a      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a36      	ldr	r2, [pc, #216]	; (8005edc <HAL_DMA_Init+0x1bc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d045      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a34      	ldr	r2, [pc, #208]	; (8005ee0 <HAL_DMA_Init+0x1c0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d040      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a33      	ldr	r2, [pc, #204]	; (8005ee4 <HAL_DMA_Init+0x1c4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d03b      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a31      	ldr	r2, [pc, #196]	; (8005ee8 <HAL_DMA_Init+0x1c8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d036      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a30      	ldr	r2, [pc, #192]	; (8005eec <HAL_DMA_Init+0x1cc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d031      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a2e      	ldr	r2, [pc, #184]	; (8005ef0 <HAL_DMA_Init+0x1d0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d02c      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a2d      	ldr	r2, [pc, #180]	; (8005ef4 <HAL_DMA_Init+0x1d4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d027      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a2b      	ldr	r2, [pc, #172]	; (8005ef8 <HAL_DMA_Init+0x1d8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d022      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a2a      	ldr	r2, [pc, #168]	; (8005efc <HAL_DMA_Init+0x1dc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d01d      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a28      	ldr	r2, [pc, #160]	; (8005f00 <HAL_DMA_Init+0x1e0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d018      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a27      	ldr	r2, [pc, #156]	; (8005f04 <HAL_DMA_Init+0x1e4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d013      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a25      	ldr	r2, [pc, #148]	; (8005f08 <HAL_DMA_Init+0x1e8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00e      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a24      	ldr	r2, [pc, #144]	; (8005f0c <HAL_DMA_Init+0x1ec>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d009      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a22      	ldr	r2, [pc, #136]	; (8005f10 <HAL_DMA_Init+0x1f0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d004      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a21      	ldr	r2, [pc, #132]	; (8005f14 <HAL_DMA_Init+0x1f4>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d108      	bne.n	8005ea6 <HAL_DMA_Init+0x186>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0201 	bic.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	e007      	b.n	8005eb6 <HAL_DMA_Init+0x196>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005eb6:	e02f      	b.n	8005f18 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eb8:	f7ff fde6 	bl	8005a88 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b05      	cmp	r3, #5
 8005ec4:	d928      	bls.n	8005f18 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2203      	movs	r2, #3
 8005ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e246      	b.n	8006366 <HAL_DMA_Init+0x646>
 8005ed8:	40020010 	.word	0x40020010
 8005edc:	40020028 	.word	0x40020028
 8005ee0:	40020040 	.word	0x40020040
 8005ee4:	40020058 	.word	0x40020058
 8005ee8:	40020070 	.word	0x40020070
 8005eec:	40020088 	.word	0x40020088
 8005ef0:	400200a0 	.word	0x400200a0
 8005ef4:	400200b8 	.word	0x400200b8
 8005ef8:	40020410 	.word	0x40020410
 8005efc:	40020428 	.word	0x40020428
 8005f00:	40020440 	.word	0x40020440
 8005f04:	40020458 	.word	0x40020458
 8005f08:	40020470 	.word	0x40020470
 8005f0c:	40020488 	.word	0x40020488
 8005f10:	400204a0 	.word	0x400204a0
 8005f14:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1c8      	bne.n	8005eb8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4b83      	ldr	r3, [pc, #524]	; (8006140 <HAL_DMA_Init+0x420>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005f3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f56:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d107      	bne.n	8005f7c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	4313      	orrs	r3, r2
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005f7c:	4b71      	ldr	r3, [pc, #452]	; (8006144 <HAL_DMA_Init+0x424>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	4b71      	ldr	r3, [pc, #452]	; (8006148 <HAL_DMA_Init+0x428>)
 8005f82:	4013      	ands	r3, r2
 8005f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f88:	d328      	bcc.n	8005fdc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b28      	cmp	r3, #40	; 0x28
 8005f90:	d903      	bls.n	8005f9a <HAL_DMA_Init+0x27a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b2e      	cmp	r3, #46	; 0x2e
 8005f98:	d917      	bls.n	8005fca <HAL_DMA_Init+0x2aa>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b3e      	cmp	r3, #62	; 0x3e
 8005fa0:	d903      	bls.n	8005faa <HAL_DMA_Init+0x28a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b42      	cmp	r3, #66	; 0x42
 8005fa8:	d90f      	bls.n	8005fca <HAL_DMA_Init+0x2aa>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b46      	cmp	r3, #70	; 0x46
 8005fb0:	d903      	bls.n	8005fba <HAL_DMA_Init+0x29a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b48      	cmp	r3, #72	; 0x48
 8005fb8:	d907      	bls.n	8005fca <HAL_DMA_Init+0x2aa>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b4e      	cmp	r3, #78	; 0x4e
 8005fc0:	d905      	bls.n	8005fce <HAL_DMA_Init+0x2ae>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	2b52      	cmp	r3, #82	; 0x52
 8005fc8:	d801      	bhi.n	8005fce <HAL_DMA_Init+0x2ae>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e000      	b.n	8005fd0 <HAL_DMA_Init+0x2b0>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fda:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f023 0307 	bic.w	r3, r3, #7
 8005ff2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	2b04      	cmp	r3, #4
 8006004:	d117      	bne.n	8006036 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00e      	beq.n	8006036 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f002 fb4b 	bl	80086b4 <DMA_CheckFifoParam>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d008      	beq.n	8006036 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2240      	movs	r2, #64	; 0x40
 8006028:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e197      	b.n	8006366 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f002 fa86 	bl	8008550 <DMA_CalcBaseAndBitshift>
 8006044:	4603      	mov	r3, r0
 8006046:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604c:	f003 031f 	and.w	r3, r3, #31
 8006050:	223f      	movs	r2, #63	; 0x3f
 8006052:	409a      	lsls	r2, r3
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	609a      	str	r2, [r3, #8]
 8006058:	e0cd      	b.n	80061f6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a3b      	ldr	r2, [pc, #236]	; (800614c <HAL_DMA_Init+0x42c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d022      	beq.n	80060aa <HAL_DMA_Init+0x38a>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a39      	ldr	r2, [pc, #228]	; (8006150 <HAL_DMA_Init+0x430>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d01d      	beq.n	80060aa <HAL_DMA_Init+0x38a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a38      	ldr	r2, [pc, #224]	; (8006154 <HAL_DMA_Init+0x434>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d018      	beq.n	80060aa <HAL_DMA_Init+0x38a>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a36      	ldr	r2, [pc, #216]	; (8006158 <HAL_DMA_Init+0x438>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <HAL_DMA_Init+0x38a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a35      	ldr	r2, [pc, #212]	; (800615c <HAL_DMA_Init+0x43c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00e      	beq.n	80060aa <HAL_DMA_Init+0x38a>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a33      	ldr	r2, [pc, #204]	; (8006160 <HAL_DMA_Init+0x440>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d009      	beq.n	80060aa <HAL_DMA_Init+0x38a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a32      	ldr	r2, [pc, #200]	; (8006164 <HAL_DMA_Init+0x444>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d004      	beq.n	80060aa <HAL_DMA_Init+0x38a>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a30      	ldr	r2, [pc, #192]	; (8006168 <HAL_DMA_Init+0x448>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d101      	bne.n	80060ae <HAL_DMA_Init+0x38e>
 80060aa:	2301      	movs	r3, #1
 80060ac:	e000      	b.n	80060b0 <HAL_DMA_Init+0x390>
 80060ae:	2300      	movs	r3, #0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 8097 	beq.w	80061e4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a24      	ldr	r2, [pc, #144]	; (800614c <HAL_DMA_Init+0x42c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d021      	beq.n	8006104 <HAL_DMA_Init+0x3e4>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a22      	ldr	r2, [pc, #136]	; (8006150 <HAL_DMA_Init+0x430>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d01c      	beq.n	8006104 <HAL_DMA_Init+0x3e4>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a21      	ldr	r2, [pc, #132]	; (8006154 <HAL_DMA_Init+0x434>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d017      	beq.n	8006104 <HAL_DMA_Init+0x3e4>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a1f      	ldr	r2, [pc, #124]	; (8006158 <HAL_DMA_Init+0x438>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d012      	beq.n	8006104 <HAL_DMA_Init+0x3e4>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1e      	ldr	r2, [pc, #120]	; (800615c <HAL_DMA_Init+0x43c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00d      	beq.n	8006104 <HAL_DMA_Init+0x3e4>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a1c      	ldr	r2, [pc, #112]	; (8006160 <HAL_DMA_Init+0x440>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d008      	beq.n	8006104 <HAL_DMA_Init+0x3e4>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1b      	ldr	r2, [pc, #108]	; (8006164 <HAL_DMA_Init+0x444>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <HAL_DMA_Init+0x3e4>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a19      	ldr	r2, [pc, #100]	; (8006168 <HAL_DMA_Init+0x448>)
 8006102:	4293      	cmp	r3, r2
 8006104:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2202      	movs	r2, #2
 8006112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	4b12      	ldr	r3, [pc, #72]	; (800616c <HAL_DMA_Init+0x44c>)
 8006122:	4013      	ands	r3, r2
 8006124:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d020      	beq.n	8006170 <HAL_DMA_Init+0x450>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	2b80      	cmp	r3, #128	; 0x80
 8006134:	d102      	bne.n	800613c <HAL_DMA_Init+0x41c>
 8006136:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800613a:	e01a      	b.n	8006172 <HAL_DMA_Init+0x452>
 800613c:	2300      	movs	r3, #0
 800613e:	e018      	b.n	8006172 <HAL_DMA_Init+0x452>
 8006140:	fe10803f 	.word	0xfe10803f
 8006144:	5c001000 	.word	0x5c001000
 8006148:	ffff0000 	.word	0xffff0000
 800614c:	58025408 	.word	0x58025408
 8006150:	5802541c 	.word	0x5802541c
 8006154:	58025430 	.word	0x58025430
 8006158:	58025444 	.word	0x58025444
 800615c:	58025458 	.word	0x58025458
 8006160:	5802546c 	.word	0x5802546c
 8006164:	58025480 	.word	0x58025480
 8006168:	58025494 	.word	0x58025494
 800616c:	fffe000f 	.word	0xfffe000f
 8006170:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	68d2      	ldr	r2, [r2, #12]
 8006176:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006178:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006180:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006188:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006190:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006198:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80061a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	4b6e      	ldr	r3, [pc, #440]	; (8006370 <HAL_DMA_Init+0x650>)
 80061b8:	4413      	add	r3, r2
 80061ba:	4a6e      	ldr	r2, [pc, #440]	; (8006374 <HAL_DMA_Init+0x654>)
 80061bc:	fba2 2303 	umull	r2, r3, r2, r3
 80061c0:	091b      	lsrs	r3, r3, #4
 80061c2:	009a      	lsls	r2, r3, #2
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f002 f9c1 	bl	8008550 <DMA_CalcBaseAndBitshift>
 80061ce:	4603      	mov	r3, r0
 80061d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d6:	f003 031f 	and.w	r3, r3, #31
 80061da:	2201      	movs	r2, #1
 80061dc:	409a      	lsls	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	605a      	str	r2, [r3, #4]
 80061e2:	e008      	b.n	80061f6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2240      	movs	r2, #64	; 0x40
 80061e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2203      	movs	r2, #3
 80061ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e0b7      	b.n	8006366 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a5f      	ldr	r2, [pc, #380]	; (8006378 <HAL_DMA_Init+0x658>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d072      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a5d      	ldr	r2, [pc, #372]	; (800637c <HAL_DMA_Init+0x65c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d06d      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a5c      	ldr	r2, [pc, #368]	; (8006380 <HAL_DMA_Init+0x660>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d068      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a5a      	ldr	r2, [pc, #360]	; (8006384 <HAL_DMA_Init+0x664>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d063      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a59      	ldr	r2, [pc, #356]	; (8006388 <HAL_DMA_Init+0x668>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d05e      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a57      	ldr	r2, [pc, #348]	; (800638c <HAL_DMA_Init+0x66c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d059      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a56      	ldr	r2, [pc, #344]	; (8006390 <HAL_DMA_Init+0x670>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d054      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a54      	ldr	r2, [pc, #336]	; (8006394 <HAL_DMA_Init+0x674>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d04f      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a53      	ldr	r2, [pc, #332]	; (8006398 <HAL_DMA_Init+0x678>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d04a      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a51      	ldr	r2, [pc, #324]	; (800639c <HAL_DMA_Init+0x67c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d045      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a50      	ldr	r2, [pc, #320]	; (80063a0 <HAL_DMA_Init+0x680>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d040      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a4e      	ldr	r2, [pc, #312]	; (80063a4 <HAL_DMA_Init+0x684>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d03b      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a4d      	ldr	r2, [pc, #308]	; (80063a8 <HAL_DMA_Init+0x688>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d036      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a4b      	ldr	r2, [pc, #300]	; (80063ac <HAL_DMA_Init+0x68c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d031      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a4a      	ldr	r2, [pc, #296]	; (80063b0 <HAL_DMA_Init+0x690>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d02c      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a48      	ldr	r2, [pc, #288]	; (80063b4 <HAL_DMA_Init+0x694>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d027      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a47      	ldr	r2, [pc, #284]	; (80063b8 <HAL_DMA_Init+0x698>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d022      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a45      	ldr	r2, [pc, #276]	; (80063bc <HAL_DMA_Init+0x69c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d01d      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a44      	ldr	r2, [pc, #272]	; (80063c0 <HAL_DMA_Init+0x6a0>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d018      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a42      	ldr	r2, [pc, #264]	; (80063c4 <HAL_DMA_Init+0x6a4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d013      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a41      	ldr	r2, [pc, #260]	; (80063c8 <HAL_DMA_Init+0x6a8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00e      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a3f      	ldr	r2, [pc, #252]	; (80063cc <HAL_DMA_Init+0x6ac>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d009      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a3e      	ldr	r2, [pc, #248]	; (80063d0 <HAL_DMA_Init+0x6b0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d004      	beq.n	80062e6 <HAL_DMA_Init+0x5c6>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a3c      	ldr	r2, [pc, #240]	; (80063d4 <HAL_DMA_Init+0x6b4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d101      	bne.n	80062ea <HAL_DMA_Init+0x5ca>
 80062e6:	2301      	movs	r3, #1
 80062e8:	e000      	b.n	80062ec <HAL_DMA_Init+0x5cc>
 80062ea:	2300      	movs	r3, #0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d032      	beq.n	8006356 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f002 fa5b 	bl	80087ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2b80      	cmp	r3, #128	; 0x80
 80062fc:	d102      	bne.n	8006304 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800630c:	b2d2      	uxtb	r2, r2
 800630e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006318:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d010      	beq.n	8006344 <HAL_DMA_Init+0x624>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2b08      	cmp	r3, #8
 8006328:	d80c      	bhi.n	8006344 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f002 fad8 	bl	80088e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006340:	605a      	str	r2, [r3, #4]
 8006342:	e008      	b.n	8006356 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	a7fdabf8 	.word	0xa7fdabf8
 8006374:	cccccccd 	.word	0xcccccccd
 8006378:	40020010 	.word	0x40020010
 800637c:	40020028 	.word	0x40020028
 8006380:	40020040 	.word	0x40020040
 8006384:	40020058 	.word	0x40020058
 8006388:	40020070 	.word	0x40020070
 800638c:	40020088 	.word	0x40020088
 8006390:	400200a0 	.word	0x400200a0
 8006394:	400200b8 	.word	0x400200b8
 8006398:	40020410 	.word	0x40020410
 800639c:	40020428 	.word	0x40020428
 80063a0:	40020440 	.word	0x40020440
 80063a4:	40020458 	.word	0x40020458
 80063a8:	40020470 	.word	0x40020470
 80063ac:	40020488 	.word	0x40020488
 80063b0:	400204a0 	.word	0x400204a0
 80063b4:	400204b8 	.word	0x400204b8
 80063b8:	58025408 	.word	0x58025408
 80063bc:	5802541c 	.word	0x5802541c
 80063c0:	58025430 	.word	0x58025430
 80063c4:	58025444 	.word	0x58025444
 80063c8:	58025458 	.word	0x58025458
 80063cc:	5802546c 	.word	0x5802546c
 80063d0:	58025480 	.word	0x58025480
 80063d4:	58025494 	.word	0x58025494

080063d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e226      	b.n	8006842 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_DMA_Start_IT+0x2a>
 80063fe:	2302      	movs	r3, #2
 8006400:	e21f      	b.n	8006842 <HAL_DMA_Start_IT+0x46a>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b01      	cmp	r3, #1
 8006414:	f040 820a 	bne.w	800682c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a68      	ldr	r2, [pc, #416]	; (80065cc <HAL_DMA_Start_IT+0x1f4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d04a      	beq.n	80064c6 <HAL_DMA_Start_IT+0xee>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a66      	ldr	r2, [pc, #408]	; (80065d0 <HAL_DMA_Start_IT+0x1f8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d045      	beq.n	80064c6 <HAL_DMA_Start_IT+0xee>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a65      	ldr	r2, [pc, #404]	; (80065d4 <HAL_DMA_Start_IT+0x1fc>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d040      	beq.n	80064c6 <HAL_DMA_Start_IT+0xee>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a63      	ldr	r2, [pc, #396]	; (80065d8 <HAL_DMA_Start_IT+0x200>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d03b      	beq.n	80064c6 <HAL_DMA_Start_IT+0xee>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a62      	ldr	r2, [pc, #392]	; (80065dc <HAL_DMA_Start_IT+0x204>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d036      	beq.n	80064c6 <HAL_DMA_Start_IT+0xee>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a60      	ldr	r2, [pc, #384]	; (80065e0 <HAL_DMA_Start_IT+0x208>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d031      	beq.n	80064c6 <HAL_DMA_Start_IT+0xee>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a5f      	ldr	r2, [pc, #380]	; (80065e4 <HAL_DMA_Start_IT+0x20c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d02c      	beq.n	80064c6 <HAL_DMA_Start_IT+0xee>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a5d      	ldr	r2, [pc, #372]	; (80065e8 <HAL_DMA_Start_IT+0x210>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d027      	beq.n	80064c6 <HAL_DMA_Start_IT+0xee>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a5c      	ldr	r2, [pc, #368]	; (80065ec <HAL_DMA_Start_IT+0x214>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d022      	beq.n	80064c6 <HAL_DMA_Start_IT+0xee>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a5a      	ldr	r2, [pc, #360]	; (80065f0 <HAL_DMA_Start_IT+0x218>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d01d      	beq.n	80064c6 <HAL_DMA_Start_IT+0xee>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a59      	ldr	r2, [pc, #356]	; (80065f4 <HAL_DMA_Start_IT+0x21c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d018      	beq.n	80064c6 <HAL_DMA_Start_IT+0xee>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a57      	ldr	r2, [pc, #348]	; (80065f8 <HAL_DMA_Start_IT+0x220>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <HAL_DMA_Start_IT+0xee>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a56      	ldr	r2, [pc, #344]	; (80065fc <HAL_DMA_Start_IT+0x224>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <HAL_DMA_Start_IT+0xee>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a54      	ldr	r2, [pc, #336]	; (8006600 <HAL_DMA_Start_IT+0x228>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_DMA_Start_IT+0xee>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a53      	ldr	r2, [pc, #332]	; (8006604 <HAL_DMA_Start_IT+0x22c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_DMA_Start_IT+0xee>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a51      	ldr	r2, [pc, #324]	; (8006608 <HAL_DMA_Start_IT+0x230>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d108      	bne.n	80064d8 <HAL_DMA_Start_IT+0x100>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0201 	bic.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e007      	b.n	80064e8 <HAL_DMA_Start_IT+0x110>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0201 	bic.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f001 fe82 	bl	80081f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a34      	ldr	r2, [pc, #208]	; (80065cc <HAL_DMA_Start_IT+0x1f4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d04a      	beq.n	8006594 <HAL_DMA_Start_IT+0x1bc>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a33      	ldr	r2, [pc, #204]	; (80065d0 <HAL_DMA_Start_IT+0x1f8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d045      	beq.n	8006594 <HAL_DMA_Start_IT+0x1bc>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a31      	ldr	r2, [pc, #196]	; (80065d4 <HAL_DMA_Start_IT+0x1fc>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d040      	beq.n	8006594 <HAL_DMA_Start_IT+0x1bc>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a30      	ldr	r2, [pc, #192]	; (80065d8 <HAL_DMA_Start_IT+0x200>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d03b      	beq.n	8006594 <HAL_DMA_Start_IT+0x1bc>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a2e      	ldr	r2, [pc, #184]	; (80065dc <HAL_DMA_Start_IT+0x204>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d036      	beq.n	8006594 <HAL_DMA_Start_IT+0x1bc>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a2d      	ldr	r2, [pc, #180]	; (80065e0 <HAL_DMA_Start_IT+0x208>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d031      	beq.n	8006594 <HAL_DMA_Start_IT+0x1bc>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a2b      	ldr	r2, [pc, #172]	; (80065e4 <HAL_DMA_Start_IT+0x20c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d02c      	beq.n	8006594 <HAL_DMA_Start_IT+0x1bc>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a2a      	ldr	r2, [pc, #168]	; (80065e8 <HAL_DMA_Start_IT+0x210>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d027      	beq.n	8006594 <HAL_DMA_Start_IT+0x1bc>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a28      	ldr	r2, [pc, #160]	; (80065ec <HAL_DMA_Start_IT+0x214>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d022      	beq.n	8006594 <HAL_DMA_Start_IT+0x1bc>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a27      	ldr	r2, [pc, #156]	; (80065f0 <HAL_DMA_Start_IT+0x218>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d01d      	beq.n	8006594 <HAL_DMA_Start_IT+0x1bc>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a25      	ldr	r2, [pc, #148]	; (80065f4 <HAL_DMA_Start_IT+0x21c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d018      	beq.n	8006594 <HAL_DMA_Start_IT+0x1bc>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a24      	ldr	r2, [pc, #144]	; (80065f8 <HAL_DMA_Start_IT+0x220>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d013      	beq.n	8006594 <HAL_DMA_Start_IT+0x1bc>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a22      	ldr	r2, [pc, #136]	; (80065fc <HAL_DMA_Start_IT+0x224>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00e      	beq.n	8006594 <HAL_DMA_Start_IT+0x1bc>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a21      	ldr	r2, [pc, #132]	; (8006600 <HAL_DMA_Start_IT+0x228>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d009      	beq.n	8006594 <HAL_DMA_Start_IT+0x1bc>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1f      	ldr	r2, [pc, #124]	; (8006604 <HAL_DMA_Start_IT+0x22c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d004      	beq.n	8006594 <HAL_DMA_Start_IT+0x1bc>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <HAL_DMA_Start_IT+0x230>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d101      	bne.n	8006598 <HAL_DMA_Start_IT+0x1c0>
 8006594:	2301      	movs	r3, #1
 8006596:	e000      	b.n	800659a <HAL_DMA_Start_IT+0x1c2>
 8006598:	2300      	movs	r3, #0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d036      	beq.n	800660c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f023 021e 	bic.w	r2, r3, #30
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f042 0216 	orr.w	r2, r2, #22
 80065b0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d03e      	beq.n	8006638 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f042 0208 	orr.w	r2, r2, #8
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	e035      	b.n	8006638 <HAL_DMA_Start_IT+0x260>
 80065cc:	40020010 	.word	0x40020010
 80065d0:	40020028 	.word	0x40020028
 80065d4:	40020040 	.word	0x40020040
 80065d8:	40020058 	.word	0x40020058
 80065dc:	40020070 	.word	0x40020070
 80065e0:	40020088 	.word	0x40020088
 80065e4:	400200a0 	.word	0x400200a0
 80065e8:	400200b8 	.word	0x400200b8
 80065ec:	40020410 	.word	0x40020410
 80065f0:	40020428 	.word	0x40020428
 80065f4:	40020440 	.word	0x40020440
 80065f8:	40020458 	.word	0x40020458
 80065fc:	40020470 	.word	0x40020470
 8006600:	40020488 	.word	0x40020488
 8006604:	400204a0 	.word	0x400204a0
 8006608:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f023 020e 	bic.w	r2, r3, #14
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 020a 	orr.w	r2, r2, #10
 800661e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006624:	2b00      	cmp	r3, #0
 8006626:	d007      	beq.n	8006638 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0204 	orr.w	r2, r2, #4
 8006636:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a83      	ldr	r2, [pc, #524]	; (800684c <HAL_DMA_Start_IT+0x474>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d072      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a82      	ldr	r2, [pc, #520]	; (8006850 <HAL_DMA_Start_IT+0x478>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d06d      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a80      	ldr	r2, [pc, #512]	; (8006854 <HAL_DMA_Start_IT+0x47c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d068      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a7f      	ldr	r2, [pc, #508]	; (8006858 <HAL_DMA_Start_IT+0x480>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d063      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a7d      	ldr	r2, [pc, #500]	; (800685c <HAL_DMA_Start_IT+0x484>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d05e      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a7c      	ldr	r2, [pc, #496]	; (8006860 <HAL_DMA_Start_IT+0x488>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d059      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a7a      	ldr	r2, [pc, #488]	; (8006864 <HAL_DMA_Start_IT+0x48c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d054      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a79      	ldr	r2, [pc, #484]	; (8006868 <HAL_DMA_Start_IT+0x490>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d04f      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a77      	ldr	r2, [pc, #476]	; (800686c <HAL_DMA_Start_IT+0x494>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d04a      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a76      	ldr	r2, [pc, #472]	; (8006870 <HAL_DMA_Start_IT+0x498>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d045      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a74      	ldr	r2, [pc, #464]	; (8006874 <HAL_DMA_Start_IT+0x49c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d040      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a73      	ldr	r2, [pc, #460]	; (8006878 <HAL_DMA_Start_IT+0x4a0>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d03b      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a71      	ldr	r2, [pc, #452]	; (800687c <HAL_DMA_Start_IT+0x4a4>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d036      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a70      	ldr	r2, [pc, #448]	; (8006880 <HAL_DMA_Start_IT+0x4a8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d031      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a6e      	ldr	r2, [pc, #440]	; (8006884 <HAL_DMA_Start_IT+0x4ac>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d02c      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a6d      	ldr	r2, [pc, #436]	; (8006888 <HAL_DMA_Start_IT+0x4b0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d027      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a6b      	ldr	r2, [pc, #428]	; (800688c <HAL_DMA_Start_IT+0x4b4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d022      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a6a      	ldr	r2, [pc, #424]	; (8006890 <HAL_DMA_Start_IT+0x4b8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d01d      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a68      	ldr	r2, [pc, #416]	; (8006894 <HAL_DMA_Start_IT+0x4bc>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d018      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a67      	ldr	r2, [pc, #412]	; (8006898 <HAL_DMA_Start_IT+0x4c0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d013      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a65      	ldr	r2, [pc, #404]	; (800689c <HAL_DMA_Start_IT+0x4c4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00e      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a64      	ldr	r2, [pc, #400]	; (80068a0 <HAL_DMA_Start_IT+0x4c8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d009      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a62      	ldr	r2, [pc, #392]	; (80068a4 <HAL_DMA_Start_IT+0x4cc>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d004      	beq.n	8006728 <HAL_DMA_Start_IT+0x350>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a61      	ldr	r2, [pc, #388]	; (80068a8 <HAL_DMA_Start_IT+0x4d0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d101      	bne.n	800672c <HAL_DMA_Start_IT+0x354>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <HAL_DMA_Start_IT+0x356>
 800672c:	2300      	movs	r3, #0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d01a      	beq.n	8006768 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d007      	beq.n	8006750 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800674e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006754:	2b00      	cmp	r3, #0
 8006756:	d007      	beq.n	8006768 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006766:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a37      	ldr	r2, [pc, #220]	; (800684c <HAL_DMA_Start_IT+0x474>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d04a      	beq.n	8006808 <HAL_DMA_Start_IT+0x430>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a36      	ldr	r2, [pc, #216]	; (8006850 <HAL_DMA_Start_IT+0x478>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d045      	beq.n	8006808 <HAL_DMA_Start_IT+0x430>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a34      	ldr	r2, [pc, #208]	; (8006854 <HAL_DMA_Start_IT+0x47c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d040      	beq.n	8006808 <HAL_DMA_Start_IT+0x430>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a33      	ldr	r2, [pc, #204]	; (8006858 <HAL_DMA_Start_IT+0x480>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d03b      	beq.n	8006808 <HAL_DMA_Start_IT+0x430>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a31      	ldr	r2, [pc, #196]	; (800685c <HAL_DMA_Start_IT+0x484>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d036      	beq.n	8006808 <HAL_DMA_Start_IT+0x430>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a30      	ldr	r2, [pc, #192]	; (8006860 <HAL_DMA_Start_IT+0x488>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d031      	beq.n	8006808 <HAL_DMA_Start_IT+0x430>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a2e      	ldr	r2, [pc, #184]	; (8006864 <HAL_DMA_Start_IT+0x48c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d02c      	beq.n	8006808 <HAL_DMA_Start_IT+0x430>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a2d      	ldr	r2, [pc, #180]	; (8006868 <HAL_DMA_Start_IT+0x490>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d027      	beq.n	8006808 <HAL_DMA_Start_IT+0x430>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a2b      	ldr	r2, [pc, #172]	; (800686c <HAL_DMA_Start_IT+0x494>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d022      	beq.n	8006808 <HAL_DMA_Start_IT+0x430>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a2a      	ldr	r2, [pc, #168]	; (8006870 <HAL_DMA_Start_IT+0x498>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d01d      	beq.n	8006808 <HAL_DMA_Start_IT+0x430>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a28      	ldr	r2, [pc, #160]	; (8006874 <HAL_DMA_Start_IT+0x49c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d018      	beq.n	8006808 <HAL_DMA_Start_IT+0x430>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a27      	ldr	r2, [pc, #156]	; (8006878 <HAL_DMA_Start_IT+0x4a0>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d013      	beq.n	8006808 <HAL_DMA_Start_IT+0x430>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a25      	ldr	r2, [pc, #148]	; (800687c <HAL_DMA_Start_IT+0x4a4>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00e      	beq.n	8006808 <HAL_DMA_Start_IT+0x430>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a24      	ldr	r2, [pc, #144]	; (8006880 <HAL_DMA_Start_IT+0x4a8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d009      	beq.n	8006808 <HAL_DMA_Start_IT+0x430>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a22      	ldr	r2, [pc, #136]	; (8006884 <HAL_DMA_Start_IT+0x4ac>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d004      	beq.n	8006808 <HAL_DMA_Start_IT+0x430>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a21      	ldr	r2, [pc, #132]	; (8006888 <HAL_DMA_Start_IT+0x4b0>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d108      	bne.n	800681a <HAL_DMA_Start_IT+0x442>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	e012      	b.n	8006840 <HAL_DMA_Start_IT+0x468>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f042 0201 	orr.w	r2, r2, #1
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	e009      	b.n	8006840 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800683a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006840:	7dfb      	ldrb	r3, [r7, #23]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	40020010 	.word	0x40020010
 8006850:	40020028 	.word	0x40020028
 8006854:	40020040 	.word	0x40020040
 8006858:	40020058 	.word	0x40020058
 800685c:	40020070 	.word	0x40020070
 8006860:	40020088 	.word	0x40020088
 8006864:	400200a0 	.word	0x400200a0
 8006868:	400200b8 	.word	0x400200b8
 800686c:	40020410 	.word	0x40020410
 8006870:	40020428 	.word	0x40020428
 8006874:	40020440 	.word	0x40020440
 8006878:	40020458 	.word	0x40020458
 800687c:	40020470 	.word	0x40020470
 8006880:	40020488 	.word	0x40020488
 8006884:	400204a0 	.word	0x400204a0
 8006888:	400204b8 	.word	0x400204b8
 800688c:	58025408 	.word	0x58025408
 8006890:	5802541c 	.word	0x5802541c
 8006894:	58025430 	.word	0x58025430
 8006898:	58025444 	.word	0x58025444
 800689c:	58025458 	.word	0x58025458
 80068a0:	5802546c 	.word	0x5802546c
 80068a4:	58025480 	.word	0x58025480
 80068a8:	58025494 	.word	0x58025494

080068ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80068b4:	f7ff f8e8 	bl	8005a88 <HAL_GetTick>
 80068b8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e2dc      	b.n	8006e7e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d008      	beq.n	80068e2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2280      	movs	r2, #128	; 0x80
 80068d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e2cd      	b.n	8006e7e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a76      	ldr	r2, [pc, #472]	; (8006ac0 <HAL_DMA_Abort+0x214>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d04a      	beq.n	8006982 <HAL_DMA_Abort+0xd6>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a74      	ldr	r2, [pc, #464]	; (8006ac4 <HAL_DMA_Abort+0x218>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d045      	beq.n	8006982 <HAL_DMA_Abort+0xd6>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a73      	ldr	r2, [pc, #460]	; (8006ac8 <HAL_DMA_Abort+0x21c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d040      	beq.n	8006982 <HAL_DMA_Abort+0xd6>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a71      	ldr	r2, [pc, #452]	; (8006acc <HAL_DMA_Abort+0x220>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d03b      	beq.n	8006982 <HAL_DMA_Abort+0xd6>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a70      	ldr	r2, [pc, #448]	; (8006ad0 <HAL_DMA_Abort+0x224>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d036      	beq.n	8006982 <HAL_DMA_Abort+0xd6>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a6e      	ldr	r2, [pc, #440]	; (8006ad4 <HAL_DMA_Abort+0x228>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d031      	beq.n	8006982 <HAL_DMA_Abort+0xd6>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a6d      	ldr	r2, [pc, #436]	; (8006ad8 <HAL_DMA_Abort+0x22c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d02c      	beq.n	8006982 <HAL_DMA_Abort+0xd6>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a6b      	ldr	r2, [pc, #428]	; (8006adc <HAL_DMA_Abort+0x230>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d027      	beq.n	8006982 <HAL_DMA_Abort+0xd6>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a6a      	ldr	r2, [pc, #424]	; (8006ae0 <HAL_DMA_Abort+0x234>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d022      	beq.n	8006982 <HAL_DMA_Abort+0xd6>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a68      	ldr	r2, [pc, #416]	; (8006ae4 <HAL_DMA_Abort+0x238>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d01d      	beq.n	8006982 <HAL_DMA_Abort+0xd6>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a67      	ldr	r2, [pc, #412]	; (8006ae8 <HAL_DMA_Abort+0x23c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d018      	beq.n	8006982 <HAL_DMA_Abort+0xd6>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a65      	ldr	r2, [pc, #404]	; (8006aec <HAL_DMA_Abort+0x240>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <HAL_DMA_Abort+0xd6>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a64      	ldr	r2, [pc, #400]	; (8006af0 <HAL_DMA_Abort+0x244>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00e      	beq.n	8006982 <HAL_DMA_Abort+0xd6>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a62      	ldr	r2, [pc, #392]	; (8006af4 <HAL_DMA_Abort+0x248>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d009      	beq.n	8006982 <HAL_DMA_Abort+0xd6>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a61      	ldr	r2, [pc, #388]	; (8006af8 <HAL_DMA_Abort+0x24c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d004      	beq.n	8006982 <HAL_DMA_Abort+0xd6>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a5f      	ldr	r2, [pc, #380]	; (8006afc <HAL_DMA_Abort+0x250>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d101      	bne.n	8006986 <HAL_DMA_Abort+0xda>
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <HAL_DMA_Abort+0xdc>
 8006986:	2300      	movs	r3, #0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d013      	beq.n	80069b4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 021e 	bic.w	r2, r2, #30
 800699a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695a      	ldr	r2, [r3, #20]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069aa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	617b      	str	r3, [r7, #20]
 80069b2:	e00a      	b.n	80069ca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 020e 	bic.w	r2, r2, #14
 80069c2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a3c      	ldr	r2, [pc, #240]	; (8006ac0 <HAL_DMA_Abort+0x214>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d072      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a3a      	ldr	r2, [pc, #232]	; (8006ac4 <HAL_DMA_Abort+0x218>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d06d      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a39      	ldr	r2, [pc, #228]	; (8006ac8 <HAL_DMA_Abort+0x21c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d068      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a37      	ldr	r2, [pc, #220]	; (8006acc <HAL_DMA_Abort+0x220>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d063      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a36      	ldr	r2, [pc, #216]	; (8006ad0 <HAL_DMA_Abort+0x224>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d05e      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a34      	ldr	r2, [pc, #208]	; (8006ad4 <HAL_DMA_Abort+0x228>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d059      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a33      	ldr	r2, [pc, #204]	; (8006ad8 <HAL_DMA_Abort+0x22c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d054      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a31      	ldr	r2, [pc, #196]	; (8006adc <HAL_DMA_Abort+0x230>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d04f      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a30      	ldr	r2, [pc, #192]	; (8006ae0 <HAL_DMA_Abort+0x234>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d04a      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a2e      	ldr	r2, [pc, #184]	; (8006ae4 <HAL_DMA_Abort+0x238>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d045      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a2d      	ldr	r2, [pc, #180]	; (8006ae8 <HAL_DMA_Abort+0x23c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d040      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a2b      	ldr	r2, [pc, #172]	; (8006aec <HAL_DMA_Abort+0x240>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d03b      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a2a      	ldr	r2, [pc, #168]	; (8006af0 <HAL_DMA_Abort+0x244>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d036      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a28      	ldr	r2, [pc, #160]	; (8006af4 <HAL_DMA_Abort+0x248>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d031      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a27      	ldr	r2, [pc, #156]	; (8006af8 <HAL_DMA_Abort+0x24c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d02c      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a25      	ldr	r2, [pc, #148]	; (8006afc <HAL_DMA_Abort+0x250>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d027      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a24      	ldr	r2, [pc, #144]	; (8006b00 <HAL_DMA_Abort+0x254>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d022      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a22      	ldr	r2, [pc, #136]	; (8006b04 <HAL_DMA_Abort+0x258>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d01d      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a21      	ldr	r2, [pc, #132]	; (8006b08 <HAL_DMA_Abort+0x25c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d018      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1f      	ldr	r2, [pc, #124]	; (8006b0c <HAL_DMA_Abort+0x260>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1e      	ldr	r2, [pc, #120]	; (8006b10 <HAL_DMA_Abort+0x264>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00e      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a1c      	ldr	r2, [pc, #112]	; (8006b14 <HAL_DMA_Abort+0x268>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d009      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a1b      	ldr	r2, [pc, #108]	; (8006b18 <HAL_DMA_Abort+0x26c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <HAL_DMA_Abort+0x20e>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a19      	ldr	r2, [pc, #100]	; (8006b1c <HAL_DMA_Abort+0x270>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d132      	bne.n	8006b20 <HAL_DMA_Abort+0x274>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e031      	b.n	8006b22 <HAL_DMA_Abort+0x276>
 8006abe:	bf00      	nop
 8006ac0:	40020010 	.word	0x40020010
 8006ac4:	40020028 	.word	0x40020028
 8006ac8:	40020040 	.word	0x40020040
 8006acc:	40020058 	.word	0x40020058
 8006ad0:	40020070 	.word	0x40020070
 8006ad4:	40020088 	.word	0x40020088
 8006ad8:	400200a0 	.word	0x400200a0
 8006adc:	400200b8 	.word	0x400200b8
 8006ae0:	40020410 	.word	0x40020410
 8006ae4:	40020428 	.word	0x40020428
 8006ae8:	40020440 	.word	0x40020440
 8006aec:	40020458 	.word	0x40020458
 8006af0:	40020470 	.word	0x40020470
 8006af4:	40020488 	.word	0x40020488
 8006af8:	400204a0 	.word	0x400204a0
 8006afc:	400204b8 	.word	0x400204b8
 8006b00:	58025408 	.word	0x58025408
 8006b04:	5802541c 	.word	0x5802541c
 8006b08:	58025430 	.word	0x58025430
 8006b0c:	58025444 	.word	0x58025444
 8006b10:	58025458 	.word	0x58025458
 8006b14:	5802546c 	.word	0x5802546c
 8006b18:	58025480 	.word	0x58025480
 8006b1c:	58025494 	.word	0x58025494
 8006b20:	2300      	movs	r3, #0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d007      	beq.n	8006b36 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b34:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a6d      	ldr	r2, [pc, #436]	; (8006cf0 <HAL_DMA_Abort+0x444>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d04a      	beq.n	8006bd6 <HAL_DMA_Abort+0x32a>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a6b      	ldr	r2, [pc, #428]	; (8006cf4 <HAL_DMA_Abort+0x448>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d045      	beq.n	8006bd6 <HAL_DMA_Abort+0x32a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a6a      	ldr	r2, [pc, #424]	; (8006cf8 <HAL_DMA_Abort+0x44c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d040      	beq.n	8006bd6 <HAL_DMA_Abort+0x32a>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a68      	ldr	r2, [pc, #416]	; (8006cfc <HAL_DMA_Abort+0x450>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d03b      	beq.n	8006bd6 <HAL_DMA_Abort+0x32a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a67      	ldr	r2, [pc, #412]	; (8006d00 <HAL_DMA_Abort+0x454>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d036      	beq.n	8006bd6 <HAL_DMA_Abort+0x32a>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a65      	ldr	r2, [pc, #404]	; (8006d04 <HAL_DMA_Abort+0x458>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d031      	beq.n	8006bd6 <HAL_DMA_Abort+0x32a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a64      	ldr	r2, [pc, #400]	; (8006d08 <HAL_DMA_Abort+0x45c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d02c      	beq.n	8006bd6 <HAL_DMA_Abort+0x32a>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a62      	ldr	r2, [pc, #392]	; (8006d0c <HAL_DMA_Abort+0x460>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d027      	beq.n	8006bd6 <HAL_DMA_Abort+0x32a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a61      	ldr	r2, [pc, #388]	; (8006d10 <HAL_DMA_Abort+0x464>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d022      	beq.n	8006bd6 <HAL_DMA_Abort+0x32a>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a5f      	ldr	r2, [pc, #380]	; (8006d14 <HAL_DMA_Abort+0x468>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d01d      	beq.n	8006bd6 <HAL_DMA_Abort+0x32a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a5e      	ldr	r2, [pc, #376]	; (8006d18 <HAL_DMA_Abort+0x46c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d018      	beq.n	8006bd6 <HAL_DMA_Abort+0x32a>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a5c      	ldr	r2, [pc, #368]	; (8006d1c <HAL_DMA_Abort+0x470>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d013      	beq.n	8006bd6 <HAL_DMA_Abort+0x32a>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a5b      	ldr	r2, [pc, #364]	; (8006d20 <HAL_DMA_Abort+0x474>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d00e      	beq.n	8006bd6 <HAL_DMA_Abort+0x32a>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a59      	ldr	r2, [pc, #356]	; (8006d24 <HAL_DMA_Abort+0x478>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d009      	beq.n	8006bd6 <HAL_DMA_Abort+0x32a>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a58      	ldr	r2, [pc, #352]	; (8006d28 <HAL_DMA_Abort+0x47c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d004      	beq.n	8006bd6 <HAL_DMA_Abort+0x32a>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a56      	ldr	r2, [pc, #344]	; (8006d2c <HAL_DMA_Abort+0x480>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d108      	bne.n	8006be8 <HAL_DMA_Abort+0x33c>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f022 0201 	bic.w	r2, r2, #1
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	e007      	b.n	8006bf8 <HAL_DMA_Abort+0x34c>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0201 	bic.w	r2, r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006bf8:	e013      	b.n	8006c22 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bfa:	f7fe ff45 	bl	8005a88 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b05      	cmp	r3, #5
 8006c06:	d90c      	bls.n	8006c22 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2203      	movs	r2, #3
 8006c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e12d      	b.n	8006e7e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1e5      	bne.n	8006bfa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a2f      	ldr	r2, [pc, #188]	; (8006cf0 <HAL_DMA_Abort+0x444>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d04a      	beq.n	8006cce <HAL_DMA_Abort+0x422>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a2d      	ldr	r2, [pc, #180]	; (8006cf4 <HAL_DMA_Abort+0x448>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d045      	beq.n	8006cce <HAL_DMA_Abort+0x422>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a2c      	ldr	r2, [pc, #176]	; (8006cf8 <HAL_DMA_Abort+0x44c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d040      	beq.n	8006cce <HAL_DMA_Abort+0x422>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a2a      	ldr	r2, [pc, #168]	; (8006cfc <HAL_DMA_Abort+0x450>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d03b      	beq.n	8006cce <HAL_DMA_Abort+0x422>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a29      	ldr	r2, [pc, #164]	; (8006d00 <HAL_DMA_Abort+0x454>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d036      	beq.n	8006cce <HAL_DMA_Abort+0x422>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a27      	ldr	r2, [pc, #156]	; (8006d04 <HAL_DMA_Abort+0x458>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d031      	beq.n	8006cce <HAL_DMA_Abort+0x422>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a26      	ldr	r2, [pc, #152]	; (8006d08 <HAL_DMA_Abort+0x45c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d02c      	beq.n	8006cce <HAL_DMA_Abort+0x422>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a24      	ldr	r2, [pc, #144]	; (8006d0c <HAL_DMA_Abort+0x460>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d027      	beq.n	8006cce <HAL_DMA_Abort+0x422>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a23      	ldr	r2, [pc, #140]	; (8006d10 <HAL_DMA_Abort+0x464>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d022      	beq.n	8006cce <HAL_DMA_Abort+0x422>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a21      	ldr	r2, [pc, #132]	; (8006d14 <HAL_DMA_Abort+0x468>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d01d      	beq.n	8006cce <HAL_DMA_Abort+0x422>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a20      	ldr	r2, [pc, #128]	; (8006d18 <HAL_DMA_Abort+0x46c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d018      	beq.n	8006cce <HAL_DMA_Abort+0x422>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a1e      	ldr	r2, [pc, #120]	; (8006d1c <HAL_DMA_Abort+0x470>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d013      	beq.n	8006cce <HAL_DMA_Abort+0x422>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a1d      	ldr	r2, [pc, #116]	; (8006d20 <HAL_DMA_Abort+0x474>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00e      	beq.n	8006cce <HAL_DMA_Abort+0x422>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a1b      	ldr	r2, [pc, #108]	; (8006d24 <HAL_DMA_Abort+0x478>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d009      	beq.n	8006cce <HAL_DMA_Abort+0x422>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a1a      	ldr	r2, [pc, #104]	; (8006d28 <HAL_DMA_Abort+0x47c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d004      	beq.n	8006cce <HAL_DMA_Abort+0x422>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a18      	ldr	r2, [pc, #96]	; (8006d2c <HAL_DMA_Abort+0x480>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d101      	bne.n	8006cd2 <HAL_DMA_Abort+0x426>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <HAL_DMA_Abort+0x428>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d02b      	beq.n	8006d30 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cdc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce2:	f003 031f 	and.w	r3, r3, #31
 8006ce6:	223f      	movs	r2, #63	; 0x3f
 8006ce8:	409a      	lsls	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	609a      	str	r2, [r3, #8]
 8006cee:	e02a      	b.n	8006d46 <HAL_DMA_Abort+0x49a>
 8006cf0:	40020010 	.word	0x40020010
 8006cf4:	40020028 	.word	0x40020028
 8006cf8:	40020040 	.word	0x40020040
 8006cfc:	40020058 	.word	0x40020058
 8006d00:	40020070 	.word	0x40020070
 8006d04:	40020088 	.word	0x40020088
 8006d08:	400200a0 	.word	0x400200a0
 8006d0c:	400200b8 	.word	0x400200b8
 8006d10:	40020410 	.word	0x40020410
 8006d14:	40020428 	.word	0x40020428
 8006d18:	40020440 	.word	0x40020440
 8006d1c:	40020458 	.word	0x40020458
 8006d20:	40020470 	.word	0x40020470
 8006d24:	40020488 	.word	0x40020488
 8006d28:	400204a0 	.word	0x400204a0
 8006d2c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d34:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3a:	f003 031f 	and.w	r3, r3, #31
 8006d3e:	2201      	movs	r2, #1
 8006d40:	409a      	lsls	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a4f      	ldr	r2, [pc, #316]	; (8006e88 <HAL_DMA_Abort+0x5dc>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d072      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a4d      	ldr	r2, [pc, #308]	; (8006e8c <HAL_DMA_Abort+0x5e0>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d06d      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a4c      	ldr	r2, [pc, #304]	; (8006e90 <HAL_DMA_Abort+0x5e4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d068      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a4a      	ldr	r2, [pc, #296]	; (8006e94 <HAL_DMA_Abort+0x5e8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d063      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a49      	ldr	r2, [pc, #292]	; (8006e98 <HAL_DMA_Abort+0x5ec>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d05e      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a47      	ldr	r2, [pc, #284]	; (8006e9c <HAL_DMA_Abort+0x5f0>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d059      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a46      	ldr	r2, [pc, #280]	; (8006ea0 <HAL_DMA_Abort+0x5f4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d054      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a44      	ldr	r2, [pc, #272]	; (8006ea4 <HAL_DMA_Abort+0x5f8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d04f      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a43      	ldr	r2, [pc, #268]	; (8006ea8 <HAL_DMA_Abort+0x5fc>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d04a      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a41      	ldr	r2, [pc, #260]	; (8006eac <HAL_DMA_Abort+0x600>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d045      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a40      	ldr	r2, [pc, #256]	; (8006eb0 <HAL_DMA_Abort+0x604>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d040      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a3e      	ldr	r2, [pc, #248]	; (8006eb4 <HAL_DMA_Abort+0x608>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d03b      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a3d      	ldr	r2, [pc, #244]	; (8006eb8 <HAL_DMA_Abort+0x60c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d036      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a3b      	ldr	r2, [pc, #236]	; (8006ebc <HAL_DMA_Abort+0x610>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d031      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a3a      	ldr	r2, [pc, #232]	; (8006ec0 <HAL_DMA_Abort+0x614>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d02c      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a38      	ldr	r2, [pc, #224]	; (8006ec4 <HAL_DMA_Abort+0x618>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d027      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a37      	ldr	r2, [pc, #220]	; (8006ec8 <HAL_DMA_Abort+0x61c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d022      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a35      	ldr	r2, [pc, #212]	; (8006ecc <HAL_DMA_Abort+0x620>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d01d      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a34      	ldr	r2, [pc, #208]	; (8006ed0 <HAL_DMA_Abort+0x624>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d018      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a32      	ldr	r2, [pc, #200]	; (8006ed4 <HAL_DMA_Abort+0x628>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d013      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a31      	ldr	r2, [pc, #196]	; (8006ed8 <HAL_DMA_Abort+0x62c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00e      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a2f      	ldr	r2, [pc, #188]	; (8006edc <HAL_DMA_Abort+0x630>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d009      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a2e      	ldr	r2, [pc, #184]	; (8006ee0 <HAL_DMA_Abort+0x634>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d004      	beq.n	8006e36 <HAL_DMA_Abort+0x58a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a2c      	ldr	r2, [pc, #176]	; (8006ee4 <HAL_DMA_Abort+0x638>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d101      	bne.n	8006e3a <HAL_DMA_Abort+0x58e>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <HAL_DMA_Abort+0x590>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d015      	beq.n	8006e6c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e48:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00c      	beq.n	8006e6c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e60:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e6a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	40020010 	.word	0x40020010
 8006e8c:	40020028 	.word	0x40020028
 8006e90:	40020040 	.word	0x40020040
 8006e94:	40020058 	.word	0x40020058
 8006e98:	40020070 	.word	0x40020070
 8006e9c:	40020088 	.word	0x40020088
 8006ea0:	400200a0 	.word	0x400200a0
 8006ea4:	400200b8 	.word	0x400200b8
 8006ea8:	40020410 	.word	0x40020410
 8006eac:	40020428 	.word	0x40020428
 8006eb0:	40020440 	.word	0x40020440
 8006eb4:	40020458 	.word	0x40020458
 8006eb8:	40020470 	.word	0x40020470
 8006ebc:	40020488 	.word	0x40020488
 8006ec0:	400204a0 	.word	0x400204a0
 8006ec4:	400204b8 	.word	0x400204b8
 8006ec8:	58025408 	.word	0x58025408
 8006ecc:	5802541c 	.word	0x5802541c
 8006ed0:	58025430 	.word	0x58025430
 8006ed4:	58025444 	.word	0x58025444
 8006ed8:	58025458 	.word	0x58025458
 8006edc:	5802546c 	.word	0x5802546c
 8006ee0:	58025480 	.word	0x58025480
 8006ee4:	58025494 	.word	0x58025494

08006ee8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e205      	b.n	8007306 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d004      	beq.n	8006f10 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2280      	movs	r2, #128	; 0x80
 8006f0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e1fa      	b.n	8007306 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a8c      	ldr	r2, [pc, #560]	; (8007148 <HAL_DMA_Abort_IT+0x260>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d04a      	beq.n	8006fb0 <HAL_DMA_Abort_IT+0xc8>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a8b      	ldr	r2, [pc, #556]	; (800714c <HAL_DMA_Abort_IT+0x264>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d045      	beq.n	8006fb0 <HAL_DMA_Abort_IT+0xc8>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a89      	ldr	r2, [pc, #548]	; (8007150 <HAL_DMA_Abort_IT+0x268>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d040      	beq.n	8006fb0 <HAL_DMA_Abort_IT+0xc8>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a88      	ldr	r2, [pc, #544]	; (8007154 <HAL_DMA_Abort_IT+0x26c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d03b      	beq.n	8006fb0 <HAL_DMA_Abort_IT+0xc8>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a86      	ldr	r2, [pc, #536]	; (8007158 <HAL_DMA_Abort_IT+0x270>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d036      	beq.n	8006fb0 <HAL_DMA_Abort_IT+0xc8>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a85      	ldr	r2, [pc, #532]	; (800715c <HAL_DMA_Abort_IT+0x274>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d031      	beq.n	8006fb0 <HAL_DMA_Abort_IT+0xc8>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a83      	ldr	r2, [pc, #524]	; (8007160 <HAL_DMA_Abort_IT+0x278>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d02c      	beq.n	8006fb0 <HAL_DMA_Abort_IT+0xc8>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a82      	ldr	r2, [pc, #520]	; (8007164 <HAL_DMA_Abort_IT+0x27c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d027      	beq.n	8006fb0 <HAL_DMA_Abort_IT+0xc8>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a80      	ldr	r2, [pc, #512]	; (8007168 <HAL_DMA_Abort_IT+0x280>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d022      	beq.n	8006fb0 <HAL_DMA_Abort_IT+0xc8>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a7f      	ldr	r2, [pc, #508]	; (800716c <HAL_DMA_Abort_IT+0x284>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d01d      	beq.n	8006fb0 <HAL_DMA_Abort_IT+0xc8>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a7d      	ldr	r2, [pc, #500]	; (8007170 <HAL_DMA_Abort_IT+0x288>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d018      	beq.n	8006fb0 <HAL_DMA_Abort_IT+0xc8>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a7c      	ldr	r2, [pc, #496]	; (8007174 <HAL_DMA_Abort_IT+0x28c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d013      	beq.n	8006fb0 <HAL_DMA_Abort_IT+0xc8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a7a      	ldr	r2, [pc, #488]	; (8007178 <HAL_DMA_Abort_IT+0x290>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00e      	beq.n	8006fb0 <HAL_DMA_Abort_IT+0xc8>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a79      	ldr	r2, [pc, #484]	; (800717c <HAL_DMA_Abort_IT+0x294>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d009      	beq.n	8006fb0 <HAL_DMA_Abort_IT+0xc8>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a77      	ldr	r2, [pc, #476]	; (8007180 <HAL_DMA_Abort_IT+0x298>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d004      	beq.n	8006fb0 <HAL_DMA_Abort_IT+0xc8>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a76      	ldr	r2, [pc, #472]	; (8007184 <HAL_DMA_Abort_IT+0x29c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d101      	bne.n	8006fb4 <HAL_DMA_Abort_IT+0xcc>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e000      	b.n	8006fb6 <HAL_DMA_Abort_IT+0xce>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d065      	beq.n	8007086 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2204      	movs	r2, #4
 8006fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a60      	ldr	r2, [pc, #384]	; (8007148 <HAL_DMA_Abort_IT+0x260>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d04a      	beq.n	8007062 <HAL_DMA_Abort_IT+0x17a>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a5e      	ldr	r2, [pc, #376]	; (800714c <HAL_DMA_Abort_IT+0x264>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d045      	beq.n	8007062 <HAL_DMA_Abort_IT+0x17a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a5d      	ldr	r2, [pc, #372]	; (8007150 <HAL_DMA_Abort_IT+0x268>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d040      	beq.n	8007062 <HAL_DMA_Abort_IT+0x17a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a5b      	ldr	r2, [pc, #364]	; (8007154 <HAL_DMA_Abort_IT+0x26c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d03b      	beq.n	8007062 <HAL_DMA_Abort_IT+0x17a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a5a      	ldr	r2, [pc, #360]	; (8007158 <HAL_DMA_Abort_IT+0x270>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d036      	beq.n	8007062 <HAL_DMA_Abort_IT+0x17a>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a58      	ldr	r2, [pc, #352]	; (800715c <HAL_DMA_Abort_IT+0x274>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d031      	beq.n	8007062 <HAL_DMA_Abort_IT+0x17a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a57      	ldr	r2, [pc, #348]	; (8007160 <HAL_DMA_Abort_IT+0x278>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d02c      	beq.n	8007062 <HAL_DMA_Abort_IT+0x17a>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a55      	ldr	r2, [pc, #340]	; (8007164 <HAL_DMA_Abort_IT+0x27c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d027      	beq.n	8007062 <HAL_DMA_Abort_IT+0x17a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a54      	ldr	r2, [pc, #336]	; (8007168 <HAL_DMA_Abort_IT+0x280>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d022      	beq.n	8007062 <HAL_DMA_Abort_IT+0x17a>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a52      	ldr	r2, [pc, #328]	; (800716c <HAL_DMA_Abort_IT+0x284>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d01d      	beq.n	8007062 <HAL_DMA_Abort_IT+0x17a>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a51      	ldr	r2, [pc, #324]	; (8007170 <HAL_DMA_Abort_IT+0x288>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d018      	beq.n	8007062 <HAL_DMA_Abort_IT+0x17a>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a4f      	ldr	r2, [pc, #316]	; (8007174 <HAL_DMA_Abort_IT+0x28c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d013      	beq.n	8007062 <HAL_DMA_Abort_IT+0x17a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a4e      	ldr	r2, [pc, #312]	; (8007178 <HAL_DMA_Abort_IT+0x290>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d00e      	beq.n	8007062 <HAL_DMA_Abort_IT+0x17a>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a4c      	ldr	r2, [pc, #304]	; (800717c <HAL_DMA_Abort_IT+0x294>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d009      	beq.n	8007062 <HAL_DMA_Abort_IT+0x17a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a4b      	ldr	r2, [pc, #300]	; (8007180 <HAL_DMA_Abort_IT+0x298>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d004      	beq.n	8007062 <HAL_DMA_Abort_IT+0x17a>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a49      	ldr	r2, [pc, #292]	; (8007184 <HAL_DMA_Abort_IT+0x29c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d108      	bne.n	8007074 <HAL_DMA_Abort_IT+0x18c>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0201 	bic.w	r2, r2, #1
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	e147      	b.n	8007304 <HAL_DMA_Abort_IT+0x41c>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0201 	bic.w	r2, r2, #1
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	e13e      	b.n	8007304 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 020e 	bic.w	r2, r2, #14
 8007094:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a2b      	ldr	r2, [pc, #172]	; (8007148 <HAL_DMA_Abort_IT+0x260>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d04a      	beq.n	8007136 <HAL_DMA_Abort_IT+0x24e>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a29      	ldr	r2, [pc, #164]	; (800714c <HAL_DMA_Abort_IT+0x264>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d045      	beq.n	8007136 <HAL_DMA_Abort_IT+0x24e>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a28      	ldr	r2, [pc, #160]	; (8007150 <HAL_DMA_Abort_IT+0x268>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d040      	beq.n	8007136 <HAL_DMA_Abort_IT+0x24e>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a26      	ldr	r2, [pc, #152]	; (8007154 <HAL_DMA_Abort_IT+0x26c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d03b      	beq.n	8007136 <HAL_DMA_Abort_IT+0x24e>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a25      	ldr	r2, [pc, #148]	; (8007158 <HAL_DMA_Abort_IT+0x270>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d036      	beq.n	8007136 <HAL_DMA_Abort_IT+0x24e>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a23      	ldr	r2, [pc, #140]	; (800715c <HAL_DMA_Abort_IT+0x274>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d031      	beq.n	8007136 <HAL_DMA_Abort_IT+0x24e>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a22      	ldr	r2, [pc, #136]	; (8007160 <HAL_DMA_Abort_IT+0x278>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d02c      	beq.n	8007136 <HAL_DMA_Abort_IT+0x24e>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a20      	ldr	r2, [pc, #128]	; (8007164 <HAL_DMA_Abort_IT+0x27c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d027      	beq.n	8007136 <HAL_DMA_Abort_IT+0x24e>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a1f      	ldr	r2, [pc, #124]	; (8007168 <HAL_DMA_Abort_IT+0x280>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d022      	beq.n	8007136 <HAL_DMA_Abort_IT+0x24e>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a1d      	ldr	r2, [pc, #116]	; (800716c <HAL_DMA_Abort_IT+0x284>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d01d      	beq.n	8007136 <HAL_DMA_Abort_IT+0x24e>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a1c      	ldr	r2, [pc, #112]	; (8007170 <HAL_DMA_Abort_IT+0x288>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d018      	beq.n	8007136 <HAL_DMA_Abort_IT+0x24e>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a1a      	ldr	r2, [pc, #104]	; (8007174 <HAL_DMA_Abort_IT+0x28c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d013      	beq.n	8007136 <HAL_DMA_Abort_IT+0x24e>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a19      	ldr	r2, [pc, #100]	; (8007178 <HAL_DMA_Abort_IT+0x290>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00e      	beq.n	8007136 <HAL_DMA_Abort_IT+0x24e>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a17      	ldr	r2, [pc, #92]	; (800717c <HAL_DMA_Abort_IT+0x294>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d009      	beq.n	8007136 <HAL_DMA_Abort_IT+0x24e>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a16      	ldr	r2, [pc, #88]	; (8007180 <HAL_DMA_Abort_IT+0x298>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d004      	beq.n	8007136 <HAL_DMA_Abort_IT+0x24e>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a14      	ldr	r2, [pc, #80]	; (8007184 <HAL_DMA_Abort_IT+0x29c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d128      	bne.n	8007188 <HAL_DMA_Abort_IT+0x2a0>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0201 	bic.w	r2, r2, #1
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	e027      	b.n	8007198 <HAL_DMA_Abort_IT+0x2b0>
 8007148:	40020010 	.word	0x40020010
 800714c:	40020028 	.word	0x40020028
 8007150:	40020040 	.word	0x40020040
 8007154:	40020058 	.word	0x40020058
 8007158:	40020070 	.word	0x40020070
 800715c:	40020088 	.word	0x40020088
 8007160:	400200a0 	.word	0x400200a0
 8007164:	400200b8 	.word	0x400200b8
 8007168:	40020410 	.word	0x40020410
 800716c:	40020428 	.word	0x40020428
 8007170:	40020440 	.word	0x40020440
 8007174:	40020458 	.word	0x40020458
 8007178:	40020470 	.word	0x40020470
 800717c:	40020488 	.word	0x40020488
 8007180:	400204a0 	.word	0x400204a0
 8007184:	400204b8 	.word	0x400204b8
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0201 	bic.w	r2, r2, #1
 8007196:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a5c      	ldr	r2, [pc, #368]	; (8007310 <HAL_DMA_Abort_IT+0x428>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d072      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a5b      	ldr	r2, [pc, #364]	; (8007314 <HAL_DMA_Abort_IT+0x42c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d06d      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a59      	ldr	r2, [pc, #356]	; (8007318 <HAL_DMA_Abort_IT+0x430>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d068      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a58      	ldr	r2, [pc, #352]	; (800731c <HAL_DMA_Abort_IT+0x434>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d063      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a56      	ldr	r2, [pc, #344]	; (8007320 <HAL_DMA_Abort_IT+0x438>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d05e      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a55      	ldr	r2, [pc, #340]	; (8007324 <HAL_DMA_Abort_IT+0x43c>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d059      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a53      	ldr	r2, [pc, #332]	; (8007328 <HAL_DMA_Abort_IT+0x440>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d054      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a52      	ldr	r2, [pc, #328]	; (800732c <HAL_DMA_Abort_IT+0x444>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d04f      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a50      	ldr	r2, [pc, #320]	; (8007330 <HAL_DMA_Abort_IT+0x448>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d04a      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a4f      	ldr	r2, [pc, #316]	; (8007334 <HAL_DMA_Abort_IT+0x44c>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d045      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a4d      	ldr	r2, [pc, #308]	; (8007338 <HAL_DMA_Abort_IT+0x450>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d040      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a4c      	ldr	r2, [pc, #304]	; (800733c <HAL_DMA_Abort_IT+0x454>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d03b      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a4a      	ldr	r2, [pc, #296]	; (8007340 <HAL_DMA_Abort_IT+0x458>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d036      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a49      	ldr	r2, [pc, #292]	; (8007344 <HAL_DMA_Abort_IT+0x45c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d031      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a47      	ldr	r2, [pc, #284]	; (8007348 <HAL_DMA_Abort_IT+0x460>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d02c      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a46      	ldr	r2, [pc, #280]	; (800734c <HAL_DMA_Abort_IT+0x464>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d027      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a44      	ldr	r2, [pc, #272]	; (8007350 <HAL_DMA_Abort_IT+0x468>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d022      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a43      	ldr	r2, [pc, #268]	; (8007354 <HAL_DMA_Abort_IT+0x46c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d01d      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a41      	ldr	r2, [pc, #260]	; (8007358 <HAL_DMA_Abort_IT+0x470>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d018      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a40      	ldr	r2, [pc, #256]	; (800735c <HAL_DMA_Abort_IT+0x474>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d013      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a3e      	ldr	r2, [pc, #248]	; (8007360 <HAL_DMA_Abort_IT+0x478>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00e      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a3d      	ldr	r2, [pc, #244]	; (8007364 <HAL_DMA_Abort_IT+0x47c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d009      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a3b      	ldr	r2, [pc, #236]	; (8007368 <HAL_DMA_Abort_IT+0x480>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d004      	beq.n	8007288 <HAL_DMA_Abort_IT+0x3a0>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a3a      	ldr	r2, [pc, #232]	; (800736c <HAL_DMA_Abort_IT+0x484>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d101      	bne.n	800728c <HAL_DMA_Abort_IT+0x3a4>
 8007288:	2301      	movs	r3, #1
 800728a:	e000      	b.n	800728e <HAL_DMA_Abort_IT+0x3a6>
 800728c:	2300      	movs	r3, #0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d028      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800729c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	2201      	movs	r2, #1
 80072b2:	409a      	lsls	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00c      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	40020010 	.word	0x40020010
 8007314:	40020028 	.word	0x40020028
 8007318:	40020040 	.word	0x40020040
 800731c:	40020058 	.word	0x40020058
 8007320:	40020070 	.word	0x40020070
 8007324:	40020088 	.word	0x40020088
 8007328:	400200a0 	.word	0x400200a0
 800732c:	400200b8 	.word	0x400200b8
 8007330:	40020410 	.word	0x40020410
 8007334:	40020428 	.word	0x40020428
 8007338:	40020440 	.word	0x40020440
 800733c:	40020458 	.word	0x40020458
 8007340:	40020470 	.word	0x40020470
 8007344:	40020488 	.word	0x40020488
 8007348:	400204a0 	.word	0x400204a0
 800734c:	400204b8 	.word	0x400204b8
 8007350:	58025408 	.word	0x58025408
 8007354:	5802541c 	.word	0x5802541c
 8007358:	58025430 	.word	0x58025430
 800735c:	58025444 	.word	0x58025444
 8007360:	58025458 	.word	0x58025458
 8007364:	5802546c 	.word	0x5802546c
 8007368:	58025480 	.word	0x58025480
 800736c:	58025494 	.word	0x58025494

08007370 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08a      	sub	sp, #40	; 0x28
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800737c:	4b67      	ldr	r3, [pc, #412]	; (800751c <HAL_DMA_IRQHandler+0x1ac>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a67      	ldr	r2, [pc, #412]	; (8007520 <HAL_DMA_IRQHandler+0x1b0>)
 8007382:	fba2 2303 	umull	r2, r3, r2, r3
 8007386:	0a9b      	lsrs	r3, r3, #10
 8007388:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007394:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a5f      	ldr	r2, [pc, #380]	; (8007524 <HAL_DMA_IRQHandler+0x1b4>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d04a      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a5d      	ldr	r2, [pc, #372]	; (8007528 <HAL_DMA_IRQHandler+0x1b8>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d045      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a5c      	ldr	r2, [pc, #368]	; (800752c <HAL_DMA_IRQHandler+0x1bc>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d040      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a5a      	ldr	r2, [pc, #360]	; (8007530 <HAL_DMA_IRQHandler+0x1c0>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d03b      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a59      	ldr	r2, [pc, #356]	; (8007534 <HAL_DMA_IRQHandler+0x1c4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d036      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a57      	ldr	r2, [pc, #348]	; (8007538 <HAL_DMA_IRQHandler+0x1c8>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d031      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a56      	ldr	r2, [pc, #344]	; (800753c <HAL_DMA_IRQHandler+0x1cc>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d02c      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a54      	ldr	r2, [pc, #336]	; (8007540 <HAL_DMA_IRQHandler+0x1d0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d027      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a53      	ldr	r2, [pc, #332]	; (8007544 <HAL_DMA_IRQHandler+0x1d4>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d022      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a51      	ldr	r2, [pc, #324]	; (8007548 <HAL_DMA_IRQHandler+0x1d8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d01d      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a50      	ldr	r2, [pc, #320]	; (800754c <HAL_DMA_IRQHandler+0x1dc>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d018      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a4e      	ldr	r2, [pc, #312]	; (8007550 <HAL_DMA_IRQHandler+0x1e0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d013      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a4d      	ldr	r2, [pc, #308]	; (8007554 <HAL_DMA_IRQHandler+0x1e4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d00e      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a4b      	ldr	r2, [pc, #300]	; (8007558 <HAL_DMA_IRQHandler+0x1e8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d009      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a4a      	ldr	r2, [pc, #296]	; (800755c <HAL_DMA_IRQHandler+0x1ec>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d004      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a48      	ldr	r2, [pc, #288]	; (8007560 <HAL_DMA_IRQHandler+0x1f0>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d101      	bne.n	8007446 <HAL_DMA_IRQHandler+0xd6>
 8007442:	2301      	movs	r3, #1
 8007444:	e000      	b.n	8007448 <HAL_DMA_IRQHandler+0xd8>
 8007446:	2300      	movs	r3, #0
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 842b 	beq.w	8007ca4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007452:	f003 031f 	and.w	r3, r3, #31
 8007456:	2208      	movs	r2, #8
 8007458:	409a      	lsls	r2, r3
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	4013      	ands	r3, r2
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 80a2 	beq.w	80075a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a2e      	ldr	r2, [pc, #184]	; (8007524 <HAL_DMA_IRQHandler+0x1b4>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d04a      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a2d      	ldr	r2, [pc, #180]	; (8007528 <HAL_DMA_IRQHandler+0x1b8>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d045      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a2b      	ldr	r2, [pc, #172]	; (800752c <HAL_DMA_IRQHandler+0x1bc>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d040      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a2a      	ldr	r2, [pc, #168]	; (8007530 <HAL_DMA_IRQHandler+0x1c0>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d03b      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a28      	ldr	r2, [pc, #160]	; (8007534 <HAL_DMA_IRQHandler+0x1c4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d036      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a27      	ldr	r2, [pc, #156]	; (8007538 <HAL_DMA_IRQHandler+0x1c8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d031      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a25      	ldr	r2, [pc, #148]	; (800753c <HAL_DMA_IRQHandler+0x1cc>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d02c      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a24      	ldr	r2, [pc, #144]	; (8007540 <HAL_DMA_IRQHandler+0x1d0>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d027      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a22      	ldr	r2, [pc, #136]	; (8007544 <HAL_DMA_IRQHandler+0x1d4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d022      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a21      	ldr	r2, [pc, #132]	; (8007548 <HAL_DMA_IRQHandler+0x1d8>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d01d      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1f      	ldr	r2, [pc, #124]	; (800754c <HAL_DMA_IRQHandler+0x1dc>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d018      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a1e      	ldr	r2, [pc, #120]	; (8007550 <HAL_DMA_IRQHandler+0x1e0>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d013      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a1c      	ldr	r2, [pc, #112]	; (8007554 <HAL_DMA_IRQHandler+0x1e4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d00e      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a1b      	ldr	r2, [pc, #108]	; (8007558 <HAL_DMA_IRQHandler+0x1e8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d009      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a19      	ldr	r2, [pc, #100]	; (800755c <HAL_DMA_IRQHandler+0x1ec>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d004      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a18      	ldr	r2, [pc, #96]	; (8007560 <HAL_DMA_IRQHandler+0x1f0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d12f      	bne.n	8007564 <HAL_DMA_IRQHandler+0x1f4>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0304 	and.w	r3, r3, #4
 800750e:	2b00      	cmp	r3, #0
 8007510:	bf14      	ite	ne
 8007512:	2301      	movne	r3, #1
 8007514:	2300      	moveq	r3, #0
 8007516:	b2db      	uxtb	r3, r3
 8007518:	e02e      	b.n	8007578 <HAL_DMA_IRQHandler+0x208>
 800751a:	bf00      	nop
 800751c:	24000014 	.word	0x24000014
 8007520:	1b4e81b5 	.word	0x1b4e81b5
 8007524:	40020010 	.word	0x40020010
 8007528:	40020028 	.word	0x40020028
 800752c:	40020040 	.word	0x40020040
 8007530:	40020058 	.word	0x40020058
 8007534:	40020070 	.word	0x40020070
 8007538:	40020088 	.word	0x40020088
 800753c:	400200a0 	.word	0x400200a0
 8007540:	400200b8 	.word	0x400200b8
 8007544:	40020410 	.word	0x40020410
 8007548:	40020428 	.word	0x40020428
 800754c:	40020440 	.word	0x40020440
 8007550:	40020458 	.word	0x40020458
 8007554:	40020470 	.word	0x40020470
 8007558:	40020488 	.word	0x40020488
 800755c:	400204a0 	.word	0x400204a0
 8007560:	400204b8 	.word	0x400204b8
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	bf14      	ite	ne
 8007572:	2301      	movne	r3, #1
 8007574:	2300      	moveq	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d015      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0204 	bic.w	r2, r2, #4
 800758a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007590:	f003 031f 	and.w	r3, r3, #31
 8007594:	2208      	movs	r2, #8
 8007596:	409a      	lsls	r2, r3
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a0:	f043 0201 	orr.w	r2, r3, #1
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	fa22 f303 	lsr.w	r3, r2, r3
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d06e      	beq.n	800769c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a69      	ldr	r2, [pc, #420]	; (8007768 <HAL_DMA_IRQHandler+0x3f8>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d04a      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a67      	ldr	r2, [pc, #412]	; (800776c <HAL_DMA_IRQHandler+0x3fc>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d045      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a66      	ldr	r2, [pc, #408]	; (8007770 <HAL_DMA_IRQHandler+0x400>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d040      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a64      	ldr	r2, [pc, #400]	; (8007774 <HAL_DMA_IRQHandler+0x404>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d03b      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a63      	ldr	r2, [pc, #396]	; (8007778 <HAL_DMA_IRQHandler+0x408>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d036      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a61      	ldr	r2, [pc, #388]	; (800777c <HAL_DMA_IRQHandler+0x40c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d031      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a60      	ldr	r2, [pc, #384]	; (8007780 <HAL_DMA_IRQHandler+0x410>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d02c      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a5e      	ldr	r2, [pc, #376]	; (8007784 <HAL_DMA_IRQHandler+0x414>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d027      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a5d      	ldr	r2, [pc, #372]	; (8007788 <HAL_DMA_IRQHandler+0x418>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d022      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a5b      	ldr	r2, [pc, #364]	; (800778c <HAL_DMA_IRQHandler+0x41c>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d01d      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a5a      	ldr	r2, [pc, #360]	; (8007790 <HAL_DMA_IRQHandler+0x420>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d018      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a58      	ldr	r2, [pc, #352]	; (8007794 <HAL_DMA_IRQHandler+0x424>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d013      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a57      	ldr	r2, [pc, #348]	; (8007798 <HAL_DMA_IRQHandler+0x428>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00e      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a55      	ldr	r2, [pc, #340]	; (800779c <HAL_DMA_IRQHandler+0x42c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d009      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a54      	ldr	r2, [pc, #336]	; (80077a0 <HAL_DMA_IRQHandler+0x430>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d004      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a52      	ldr	r2, [pc, #328]	; (80077a4 <HAL_DMA_IRQHandler+0x434>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d10a      	bne.n	8007674 <HAL_DMA_IRQHandler+0x304>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007668:	2b00      	cmp	r3, #0
 800766a:	bf14      	ite	ne
 800766c:	2301      	movne	r3, #1
 800766e:	2300      	moveq	r3, #0
 8007670:	b2db      	uxtb	r3, r3
 8007672:	e003      	b.n	800767c <HAL_DMA_IRQHandler+0x30c>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2300      	movs	r3, #0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00d      	beq.n	800769c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007684:	f003 031f 	and.w	r3, r3, #31
 8007688:	2201      	movs	r2, #1
 800768a:	409a      	lsls	r2, r3
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007694:	f043 0202 	orr.w	r2, r3, #2
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a0:	f003 031f 	and.w	r3, r3, #31
 80076a4:	2204      	movs	r2, #4
 80076a6:	409a      	lsls	r2, r3
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 808f 	beq.w	80077d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a2c      	ldr	r2, [pc, #176]	; (8007768 <HAL_DMA_IRQHandler+0x3f8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d04a      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a2a      	ldr	r2, [pc, #168]	; (800776c <HAL_DMA_IRQHandler+0x3fc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d045      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a29      	ldr	r2, [pc, #164]	; (8007770 <HAL_DMA_IRQHandler+0x400>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d040      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a27      	ldr	r2, [pc, #156]	; (8007774 <HAL_DMA_IRQHandler+0x404>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d03b      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a26      	ldr	r2, [pc, #152]	; (8007778 <HAL_DMA_IRQHandler+0x408>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d036      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a24      	ldr	r2, [pc, #144]	; (800777c <HAL_DMA_IRQHandler+0x40c>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d031      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a23      	ldr	r2, [pc, #140]	; (8007780 <HAL_DMA_IRQHandler+0x410>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d02c      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a21      	ldr	r2, [pc, #132]	; (8007784 <HAL_DMA_IRQHandler+0x414>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d027      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a20      	ldr	r2, [pc, #128]	; (8007788 <HAL_DMA_IRQHandler+0x418>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d022      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a1e      	ldr	r2, [pc, #120]	; (800778c <HAL_DMA_IRQHandler+0x41c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d01d      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a1d      	ldr	r2, [pc, #116]	; (8007790 <HAL_DMA_IRQHandler+0x420>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d018      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a1b      	ldr	r2, [pc, #108]	; (8007794 <HAL_DMA_IRQHandler+0x424>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d013      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a1a      	ldr	r2, [pc, #104]	; (8007798 <HAL_DMA_IRQHandler+0x428>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d00e      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a18      	ldr	r2, [pc, #96]	; (800779c <HAL_DMA_IRQHandler+0x42c>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d009      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a17      	ldr	r2, [pc, #92]	; (80077a0 <HAL_DMA_IRQHandler+0x430>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d004      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a15      	ldr	r2, [pc, #84]	; (80077a4 <HAL_DMA_IRQHandler+0x434>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d12a      	bne.n	80077a8 <HAL_DMA_IRQHandler+0x438>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b00      	cmp	r3, #0
 800775e:	bf14      	ite	ne
 8007760:	2301      	movne	r3, #1
 8007762:	2300      	moveq	r3, #0
 8007764:	b2db      	uxtb	r3, r3
 8007766:	e023      	b.n	80077b0 <HAL_DMA_IRQHandler+0x440>
 8007768:	40020010 	.word	0x40020010
 800776c:	40020028 	.word	0x40020028
 8007770:	40020040 	.word	0x40020040
 8007774:	40020058 	.word	0x40020058
 8007778:	40020070 	.word	0x40020070
 800777c:	40020088 	.word	0x40020088
 8007780:	400200a0 	.word	0x400200a0
 8007784:	400200b8 	.word	0x400200b8
 8007788:	40020410 	.word	0x40020410
 800778c:	40020428 	.word	0x40020428
 8007790:	40020440 	.word	0x40020440
 8007794:	40020458 	.word	0x40020458
 8007798:	40020470 	.word	0x40020470
 800779c:	40020488 	.word	0x40020488
 80077a0:	400204a0 	.word	0x400204a0
 80077a4:	400204b8 	.word	0x400204b8
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2300      	movs	r3, #0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00d      	beq.n	80077d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b8:	f003 031f 	and.w	r3, r3, #31
 80077bc:	2204      	movs	r2, #4
 80077be:	409a      	lsls	r2, r3
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c8:	f043 0204 	orr.w	r2, r3, #4
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d4:	f003 031f 	and.w	r3, r3, #31
 80077d8:	2210      	movs	r2, #16
 80077da:	409a      	lsls	r2, r3
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	4013      	ands	r3, r2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 80a6 	beq.w	8007932 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a85      	ldr	r2, [pc, #532]	; (8007a00 <HAL_DMA_IRQHandler+0x690>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d04a      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a83      	ldr	r2, [pc, #524]	; (8007a04 <HAL_DMA_IRQHandler+0x694>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d045      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a82      	ldr	r2, [pc, #520]	; (8007a08 <HAL_DMA_IRQHandler+0x698>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d040      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a80      	ldr	r2, [pc, #512]	; (8007a0c <HAL_DMA_IRQHandler+0x69c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d03b      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a7f      	ldr	r2, [pc, #508]	; (8007a10 <HAL_DMA_IRQHandler+0x6a0>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d036      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a7d      	ldr	r2, [pc, #500]	; (8007a14 <HAL_DMA_IRQHandler+0x6a4>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d031      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a7c      	ldr	r2, [pc, #496]	; (8007a18 <HAL_DMA_IRQHandler+0x6a8>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d02c      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a7a      	ldr	r2, [pc, #488]	; (8007a1c <HAL_DMA_IRQHandler+0x6ac>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d027      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a79      	ldr	r2, [pc, #484]	; (8007a20 <HAL_DMA_IRQHandler+0x6b0>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d022      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a77      	ldr	r2, [pc, #476]	; (8007a24 <HAL_DMA_IRQHandler+0x6b4>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d01d      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a76      	ldr	r2, [pc, #472]	; (8007a28 <HAL_DMA_IRQHandler+0x6b8>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d018      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a74      	ldr	r2, [pc, #464]	; (8007a2c <HAL_DMA_IRQHandler+0x6bc>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d013      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a73      	ldr	r2, [pc, #460]	; (8007a30 <HAL_DMA_IRQHandler+0x6c0>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d00e      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a71      	ldr	r2, [pc, #452]	; (8007a34 <HAL_DMA_IRQHandler+0x6c4>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d009      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a70      	ldr	r2, [pc, #448]	; (8007a38 <HAL_DMA_IRQHandler+0x6c8>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d004      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a6e      	ldr	r2, [pc, #440]	; (8007a3c <HAL_DMA_IRQHandler+0x6cc>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d10a      	bne.n	800789c <HAL_DMA_IRQHandler+0x52c>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0308 	and.w	r3, r3, #8
 8007890:	2b00      	cmp	r3, #0
 8007892:	bf14      	ite	ne
 8007894:	2301      	movne	r3, #1
 8007896:	2300      	moveq	r3, #0
 8007898:	b2db      	uxtb	r3, r3
 800789a:	e009      	b.n	80078b0 <HAL_DMA_IRQHandler+0x540>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0304 	and.w	r3, r3, #4
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	bf14      	ite	ne
 80078aa:	2301      	movne	r3, #1
 80078ac:	2300      	moveq	r3, #0
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d03e      	beq.n	8007932 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b8:	f003 031f 	and.w	r3, r3, #31
 80078bc:	2210      	movs	r2, #16
 80078be:	409a      	lsls	r2, r3
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d018      	beq.n	8007904 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d108      	bne.n	80078f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d024      	beq.n	8007932 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	4798      	blx	r3
 80078f0:	e01f      	b.n	8007932 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d01b      	beq.n	8007932 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
 8007902:	e016      	b.n	8007932 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790e:	2b00      	cmp	r3, #0
 8007910:	d107      	bne.n	8007922 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0208 	bic.w	r2, r2, #8
 8007920:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007936:	f003 031f 	and.w	r3, r3, #31
 800793a:	2220      	movs	r2, #32
 800793c:	409a      	lsls	r2, r3
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	4013      	ands	r3, r2
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 8110 	beq.w	8007b68 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a2c      	ldr	r2, [pc, #176]	; (8007a00 <HAL_DMA_IRQHandler+0x690>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d04a      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a2b      	ldr	r2, [pc, #172]	; (8007a04 <HAL_DMA_IRQHandler+0x694>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d045      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a29      	ldr	r2, [pc, #164]	; (8007a08 <HAL_DMA_IRQHandler+0x698>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d040      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a28      	ldr	r2, [pc, #160]	; (8007a0c <HAL_DMA_IRQHandler+0x69c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d03b      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a26      	ldr	r2, [pc, #152]	; (8007a10 <HAL_DMA_IRQHandler+0x6a0>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d036      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a25      	ldr	r2, [pc, #148]	; (8007a14 <HAL_DMA_IRQHandler+0x6a4>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d031      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a23      	ldr	r2, [pc, #140]	; (8007a18 <HAL_DMA_IRQHandler+0x6a8>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d02c      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a22      	ldr	r2, [pc, #136]	; (8007a1c <HAL_DMA_IRQHandler+0x6ac>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d027      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a20      	ldr	r2, [pc, #128]	; (8007a20 <HAL_DMA_IRQHandler+0x6b0>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d022      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a1f      	ldr	r2, [pc, #124]	; (8007a24 <HAL_DMA_IRQHandler+0x6b4>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d01d      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a1d      	ldr	r2, [pc, #116]	; (8007a28 <HAL_DMA_IRQHandler+0x6b8>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d018      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a1c      	ldr	r2, [pc, #112]	; (8007a2c <HAL_DMA_IRQHandler+0x6bc>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d013      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1a      	ldr	r2, [pc, #104]	; (8007a30 <HAL_DMA_IRQHandler+0x6c0>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d00e      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a19      	ldr	r2, [pc, #100]	; (8007a34 <HAL_DMA_IRQHandler+0x6c4>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d009      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a17      	ldr	r2, [pc, #92]	; (8007a38 <HAL_DMA_IRQHandler+0x6c8>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d004      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a16      	ldr	r2, [pc, #88]	; (8007a3c <HAL_DMA_IRQHandler+0x6cc>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d12b      	bne.n	8007a40 <HAL_DMA_IRQHandler+0x6d0>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0310 	and.w	r3, r3, #16
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	bf14      	ite	ne
 80079f6:	2301      	movne	r3, #1
 80079f8:	2300      	moveq	r3, #0
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	e02a      	b.n	8007a54 <HAL_DMA_IRQHandler+0x6e4>
 80079fe:	bf00      	nop
 8007a00:	40020010 	.word	0x40020010
 8007a04:	40020028 	.word	0x40020028
 8007a08:	40020040 	.word	0x40020040
 8007a0c:	40020058 	.word	0x40020058
 8007a10:	40020070 	.word	0x40020070
 8007a14:	40020088 	.word	0x40020088
 8007a18:	400200a0 	.word	0x400200a0
 8007a1c:	400200b8 	.word	0x400200b8
 8007a20:	40020410 	.word	0x40020410
 8007a24:	40020428 	.word	0x40020428
 8007a28:	40020440 	.word	0x40020440
 8007a2c:	40020458 	.word	0x40020458
 8007a30:	40020470 	.word	0x40020470
 8007a34:	40020488 	.word	0x40020488
 8007a38:	400204a0 	.word	0x400204a0
 8007a3c:	400204b8 	.word	0x400204b8
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	bf14      	ite	ne
 8007a4e:	2301      	movne	r3, #1
 8007a50:	2300      	moveq	r3, #0
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 8087 	beq.w	8007b68 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a5e:	f003 031f 	and.w	r3, r3, #31
 8007a62:	2220      	movs	r2, #32
 8007a64:	409a      	lsls	r2, r3
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d139      	bne.n	8007aea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0216 	bic.w	r2, r2, #22
 8007a84:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	695a      	ldr	r2, [r3, #20]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a94:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d103      	bne.n	8007aa6 <HAL_DMA_IRQHandler+0x736>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d007      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0208 	bic.w	r2, r2, #8
 8007ab4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aba:	f003 031f 	and.w	r3, r3, #31
 8007abe:	223f      	movs	r2, #63	; 0x3f
 8007ac0:	409a      	lsls	r2, r3
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 834a 	beq.w	8008174 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	4798      	blx	r3
          }
          return;
 8007ae8:	e344      	b.n	8008174 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d018      	beq.n	8007b2a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d108      	bne.n	8007b18 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d02c      	beq.n	8007b68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	4798      	blx	r3
 8007b16:	e027      	b.n	8007b68 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d023      	beq.n	8007b68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	4798      	blx	r3
 8007b28:	e01e      	b.n	8007b68 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10f      	bne.n	8007b58 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 0210 	bic.w	r2, r2, #16
 8007b46:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8306 	beq.w	800817e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 8088 	beq.w	8007c90 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2204      	movs	r2, #4
 8007b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a7a      	ldr	r2, [pc, #488]	; (8007d78 <HAL_DMA_IRQHandler+0xa08>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d04a      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a79      	ldr	r2, [pc, #484]	; (8007d7c <HAL_DMA_IRQHandler+0xa0c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d045      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a77      	ldr	r2, [pc, #476]	; (8007d80 <HAL_DMA_IRQHandler+0xa10>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d040      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a76      	ldr	r2, [pc, #472]	; (8007d84 <HAL_DMA_IRQHandler+0xa14>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d03b      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a74      	ldr	r2, [pc, #464]	; (8007d88 <HAL_DMA_IRQHandler+0xa18>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d036      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a73      	ldr	r2, [pc, #460]	; (8007d8c <HAL_DMA_IRQHandler+0xa1c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d031      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a71      	ldr	r2, [pc, #452]	; (8007d90 <HAL_DMA_IRQHandler+0xa20>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d02c      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a70      	ldr	r2, [pc, #448]	; (8007d94 <HAL_DMA_IRQHandler+0xa24>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d027      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a6e      	ldr	r2, [pc, #440]	; (8007d98 <HAL_DMA_IRQHandler+0xa28>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d022      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a6d      	ldr	r2, [pc, #436]	; (8007d9c <HAL_DMA_IRQHandler+0xa2c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d01d      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a6b      	ldr	r2, [pc, #428]	; (8007da0 <HAL_DMA_IRQHandler+0xa30>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d018      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a6a      	ldr	r2, [pc, #424]	; (8007da4 <HAL_DMA_IRQHandler+0xa34>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d013      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a68      	ldr	r2, [pc, #416]	; (8007da8 <HAL_DMA_IRQHandler+0xa38>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d00e      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a67      	ldr	r2, [pc, #412]	; (8007dac <HAL_DMA_IRQHandler+0xa3c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d009      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a65      	ldr	r2, [pc, #404]	; (8007db0 <HAL_DMA_IRQHandler+0xa40>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d004      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a64      	ldr	r2, [pc, #400]	; (8007db4 <HAL_DMA_IRQHandler+0xa44>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d108      	bne.n	8007c3a <HAL_DMA_IRQHandler+0x8ca>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0201 	bic.w	r2, r2, #1
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	e007      	b.n	8007c4a <HAL_DMA_IRQHandler+0x8da>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 0201 	bic.w	r2, r2, #1
 8007c48:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d307      	bcc.n	8007c66 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1f2      	bne.n	8007c4a <HAL_DMA_IRQHandler+0x8da>
 8007c64:	e000      	b.n	8007c68 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007c66:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d004      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2203      	movs	r2, #3
 8007c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007c86:	e003      	b.n	8007c90 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 8272 	beq.w	800817e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
 8007ca2:	e26c      	b.n	800817e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a43      	ldr	r2, [pc, #268]	; (8007db8 <HAL_DMA_IRQHandler+0xa48>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d022      	beq.n	8007cf4 <HAL_DMA_IRQHandler+0x984>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a42      	ldr	r2, [pc, #264]	; (8007dbc <HAL_DMA_IRQHandler+0xa4c>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d01d      	beq.n	8007cf4 <HAL_DMA_IRQHandler+0x984>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a40      	ldr	r2, [pc, #256]	; (8007dc0 <HAL_DMA_IRQHandler+0xa50>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d018      	beq.n	8007cf4 <HAL_DMA_IRQHandler+0x984>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a3f      	ldr	r2, [pc, #252]	; (8007dc4 <HAL_DMA_IRQHandler+0xa54>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d013      	beq.n	8007cf4 <HAL_DMA_IRQHandler+0x984>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a3d      	ldr	r2, [pc, #244]	; (8007dc8 <HAL_DMA_IRQHandler+0xa58>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d00e      	beq.n	8007cf4 <HAL_DMA_IRQHandler+0x984>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a3c      	ldr	r2, [pc, #240]	; (8007dcc <HAL_DMA_IRQHandler+0xa5c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d009      	beq.n	8007cf4 <HAL_DMA_IRQHandler+0x984>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a3a      	ldr	r2, [pc, #232]	; (8007dd0 <HAL_DMA_IRQHandler+0xa60>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d004      	beq.n	8007cf4 <HAL_DMA_IRQHandler+0x984>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a39      	ldr	r2, [pc, #228]	; (8007dd4 <HAL_DMA_IRQHandler+0xa64>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d101      	bne.n	8007cf8 <HAL_DMA_IRQHandler+0x988>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e000      	b.n	8007cfa <HAL_DMA_IRQHandler+0x98a>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 823f 	beq.w	800817e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d0c:	f003 031f 	and.w	r3, r3, #31
 8007d10:	2204      	movs	r2, #4
 8007d12:	409a      	lsls	r2, r3
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	4013      	ands	r3, r2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 80cd 	beq.w	8007eb8 <HAL_DMA_IRQHandler+0xb48>
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 80c7 	beq.w	8007eb8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d2e:	f003 031f 	and.w	r3, r3, #31
 8007d32:	2204      	movs	r2, #4
 8007d34:	409a      	lsls	r2, r3
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d049      	beq.n	8007dd8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d109      	bne.n	8007d62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 8210 	beq.w	8008178 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d60:	e20a      	b.n	8008178 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 8206 	beq.w	8008178 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d74:	e200      	b.n	8008178 <HAL_DMA_IRQHandler+0xe08>
 8007d76:	bf00      	nop
 8007d78:	40020010 	.word	0x40020010
 8007d7c:	40020028 	.word	0x40020028
 8007d80:	40020040 	.word	0x40020040
 8007d84:	40020058 	.word	0x40020058
 8007d88:	40020070 	.word	0x40020070
 8007d8c:	40020088 	.word	0x40020088
 8007d90:	400200a0 	.word	0x400200a0
 8007d94:	400200b8 	.word	0x400200b8
 8007d98:	40020410 	.word	0x40020410
 8007d9c:	40020428 	.word	0x40020428
 8007da0:	40020440 	.word	0x40020440
 8007da4:	40020458 	.word	0x40020458
 8007da8:	40020470 	.word	0x40020470
 8007dac:	40020488 	.word	0x40020488
 8007db0:	400204a0 	.word	0x400204a0
 8007db4:	400204b8 	.word	0x400204b8
 8007db8:	58025408 	.word	0x58025408
 8007dbc:	5802541c 	.word	0x5802541c
 8007dc0:	58025430 	.word	0x58025430
 8007dc4:	58025444 	.word	0x58025444
 8007dc8:	58025458 	.word	0x58025458
 8007dcc:	5802546c 	.word	0x5802546c
 8007dd0:	58025480 	.word	0x58025480
 8007dd4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d160      	bne.n	8007ea4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a8c      	ldr	r2, [pc, #560]	; (8008018 <HAL_DMA_IRQHandler+0xca8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d04a      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a8a      	ldr	r2, [pc, #552]	; (800801c <HAL_DMA_IRQHandler+0xcac>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d045      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a89      	ldr	r2, [pc, #548]	; (8008020 <HAL_DMA_IRQHandler+0xcb0>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d040      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a87      	ldr	r2, [pc, #540]	; (8008024 <HAL_DMA_IRQHandler+0xcb4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d03b      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a86      	ldr	r2, [pc, #536]	; (8008028 <HAL_DMA_IRQHandler+0xcb8>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d036      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a84      	ldr	r2, [pc, #528]	; (800802c <HAL_DMA_IRQHandler+0xcbc>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d031      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a83      	ldr	r2, [pc, #524]	; (8008030 <HAL_DMA_IRQHandler+0xcc0>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d02c      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a81      	ldr	r2, [pc, #516]	; (8008034 <HAL_DMA_IRQHandler+0xcc4>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d027      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a80      	ldr	r2, [pc, #512]	; (8008038 <HAL_DMA_IRQHandler+0xcc8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d022      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a7e      	ldr	r2, [pc, #504]	; (800803c <HAL_DMA_IRQHandler+0xccc>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d01d      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a7d      	ldr	r2, [pc, #500]	; (8008040 <HAL_DMA_IRQHandler+0xcd0>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d018      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a7b      	ldr	r2, [pc, #492]	; (8008044 <HAL_DMA_IRQHandler+0xcd4>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d013      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a7a      	ldr	r2, [pc, #488]	; (8008048 <HAL_DMA_IRQHandler+0xcd8>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00e      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a78      	ldr	r2, [pc, #480]	; (800804c <HAL_DMA_IRQHandler+0xcdc>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d009      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a77      	ldr	r2, [pc, #476]	; (8008050 <HAL_DMA_IRQHandler+0xce0>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d004      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a75      	ldr	r2, [pc, #468]	; (8008054 <HAL_DMA_IRQHandler+0xce4>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d108      	bne.n	8007e94 <HAL_DMA_IRQHandler+0xb24>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 0208 	bic.w	r2, r2, #8
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	e007      	b.n	8007ea4 <HAL_DMA_IRQHandler+0xb34>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0204 	bic.w	r2, r2, #4
 8007ea2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 8165 	beq.w	8008178 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007eb6:	e15f      	b.n	8008178 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ebc:	f003 031f 	and.w	r3, r3, #31
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	409a      	lsls	r2, r3
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 80c5 	beq.w	8008058 <HAL_DMA_IRQHandler+0xce8>
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	f003 0302 	and.w	r3, r3, #2
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 80bf 	beq.w	8008058 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ede:	f003 031f 	and.w	r3, r3, #31
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	409a      	lsls	r2, r3
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d018      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d109      	bne.n	8007f12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 813a 	beq.w	800817c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f10:	e134      	b.n	800817c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f000 8130 	beq.w	800817c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f24:	e12a      	b.n	800817c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	f003 0320 	and.w	r3, r3, #32
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d168      	bne.n	8008002 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a38      	ldr	r2, [pc, #224]	; (8008018 <HAL_DMA_IRQHandler+0xca8>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d04a      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0xc60>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a37      	ldr	r2, [pc, #220]	; (800801c <HAL_DMA_IRQHandler+0xcac>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d045      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0xc60>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a35      	ldr	r2, [pc, #212]	; (8008020 <HAL_DMA_IRQHandler+0xcb0>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d040      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0xc60>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a34      	ldr	r2, [pc, #208]	; (8008024 <HAL_DMA_IRQHandler+0xcb4>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d03b      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0xc60>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a32      	ldr	r2, [pc, #200]	; (8008028 <HAL_DMA_IRQHandler+0xcb8>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d036      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0xc60>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a31      	ldr	r2, [pc, #196]	; (800802c <HAL_DMA_IRQHandler+0xcbc>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d031      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0xc60>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a2f      	ldr	r2, [pc, #188]	; (8008030 <HAL_DMA_IRQHandler+0xcc0>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d02c      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0xc60>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a2e      	ldr	r2, [pc, #184]	; (8008034 <HAL_DMA_IRQHandler+0xcc4>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d027      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0xc60>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a2c      	ldr	r2, [pc, #176]	; (8008038 <HAL_DMA_IRQHandler+0xcc8>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d022      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0xc60>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a2b      	ldr	r2, [pc, #172]	; (800803c <HAL_DMA_IRQHandler+0xccc>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d01d      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0xc60>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a29      	ldr	r2, [pc, #164]	; (8008040 <HAL_DMA_IRQHandler+0xcd0>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d018      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0xc60>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a28      	ldr	r2, [pc, #160]	; (8008044 <HAL_DMA_IRQHandler+0xcd4>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d013      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0xc60>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a26      	ldr	r2, [pc, #152]	; (8008048 <HAL_DMA_IRQHandler+0xcd8>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00e      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0xc60>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a25      	ldr	r2, [pc, #148]	; (800804c <HAL_DMA_IRQHandler+0xcdc>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d009      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0xc60>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a23      	ldr	r2, [pc, #140]	; (8008050 <HAL_DMA_IRQHandler+0xce0>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d004      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0xc60>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a22      	ldr	r2, [pc, #136]	; (8008054 <HAL_DMA_IRQHandler+0xce4>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d108      	bne.n	8007fe2 <HAL_DMA_IRQHandler+0xc72>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f022 0214 	bic.w	r2, r2, #20
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	e007      	b.n	8007ff2 <HAL_DMA_IRQHandler+0xc82>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 020a 	bic.w	r2, r2, #10
 8007ff0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 80b8 	beq.w	800817c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008014:	e0b2      	b.n	800817c <HAL_DMA_IRQHandler+0xe0c>
 8008016:	bf00      	nop
 8008018:	40020010 	.word	0x40020010
 800801c:	40020028 	.word	0x40020028
 8008020:	40020040 	.word	0x40020040
 8008024:	40020058 	.word	0x40020058
 8008028:	40020070 	.word	0x40020070
 800802c:	40020088 	.word	0x40020088
 8008030:	400200a0 	.word	0x400200a0
 8008034:	400200b8 	.word	0x400200b8
 8008038:	40020410 	.word	0x40020410
 800803c:	40020428 	.word	0x40020428
 8008040:	40020440 	.word	0x40020440
 8008044:	40020458 	.word	0x40020458
 8008048:	40020470 	.word	0x40020470
 800804c:	40020488 	.word	0x40020488
 8008050:	400204a0 	.word	0x400204a0
 8008054:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805c:	f003 031f 	and.w	r3, r3, #31
 8008060:	2208      	movs	r2, #8
 8008062:	409a      	lsls	r2, r3
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	4013      	ands	r3, r2
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 8088 	beq.w	800817e <HAL_DMA_IRQHandler+0xe0e>
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	f003 0308 	and.w	r3, r3, #8
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 8082 	beq.w	800817e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a41      	ldr	r2, [pc, #260]	; (8008184 <HAL_DMA_IRQHandler+0xe14>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d04a      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a3f      	ldr	r2, [pc, #252]	; (8008188 <HAL_DMA_IRQHandler+0xe18>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d045      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a3e      	ldr	r2, [pc, #248]	; (800818c <HAL_DMA_IRQHandler+0xe1c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d040      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a3c      	ldr	r2, [pc, #240]	; (8008190 <HAL_DMA_IRQHandler+0xe20>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d03b      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a3b      	ldr	r2, [pc, #236]	; (8008194 <HAL_DMA_IRQHandler+0xe24>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d036      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a39      	ldr	r2, [pc, #228]	; (8008198 <HAL_DMA_IRQHandler+0xe28>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d031      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a38      	ldr	r2, [pc, #224]	; (800819c <HAL_DMA_IRQHandler+0xe2c>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d02c      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a36      	ldr	r2, [pc, #216]	; (80081a0 <HAL_DMA_IRQHandler+0xe30>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d027      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a35      	ldr	r2, [pc, #212]	; (80081a4 <HAL_DMA_IRQHandler+0xe34>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d022      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a33      	ldr	r2, [pc, #204]	; (80081a8 <HAL_DMA_IRQHandler+0xe38>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d01d      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a32      	ldr	r2, [pc, #200]	; (80081ac <HAL_DMA_IRQHandler+0xe3c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d018      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a30      	ldr	r2, [pc, #192]	; (80081b0 <HAL_DMA_IRQHandler+0xe40>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d013      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a2f      	ldr	r2, [pc, #188]	; (80081b4 <HAL_DMA_IRQHandler+0xe44>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d00e      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a2d      	ldr	r2, [pc, #180]	; (80081b8 <HAL_DMA_IRQHandler+0xe48>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d009      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a2c      	ldr	r2, [pc, #176]	; (80081bc <HAL_DMA_IRQHandler+0xe4c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d004      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a2a      	ldr	r2, [pc, #168]	; (80081c0 <HAL_DMA_IRQHandler+0xe50>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d108      	bne.n	800812c <HAL_DMA_IRQHandler+0xdbc>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 021c 	bic.w	r2, r2, #28
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	e007      	b.n	800813c <HAL_DMA_IRQHandler+0xdcc>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 020e 	bic.w	r2, r2, #14
 800813a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008140:	f003 031f 	and.w	r3, r3, #31
 8008144:	2201      	movs	r2, #1
 8008146:	409a      	lsls	r2, r3
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008166:	2b00      	cmp	r3, #0
 8008168:	d009      	beq.n	800817e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
 8008172:	e004      	b.n	800817e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008174:	bf00      	nop
 8008176:	e002      	b.n	800817e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008178:	bf00      	nop
 800817a:	e000      	b.n	800817e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800817c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800817e:	3728      	adds	r7, #40	; 0x28
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	40020010 	.word	0x40020010
 8008188:	40020028 	.word	0x40020028
 800818c:	40020040 	.word	0x40020040
 8008190:	40020058 	.word	0x40020058
 8008194:	40020070 	.word	0x40020070
 8008198:	40020088 	.word	0x40020088
 800819c:	400200a0 	.word	0x400200a0
 80081a0:	400200b8 	.word	0x400200b8
 80081a4:	40020410 	.word	0x40020410
 80081a8:	40020428 	.word	0x40020428
 80081ac:	40020440 	.word	0x40020440
 80081b0:	40020458 	.word	0x40020458
 80081b4:	40020470 	.word	0x40020470
 80081b8:	40020488 	.word	0x40020488
 80081bc:	400204a0 	.word	0x400204a0
 80081c0:	400204b8 	.word	0x400204b8

080081c4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081d2:	b2db      	uxtb	r3, r3
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800820a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008210:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a84      	ldr	r2, [pc, #528]	; (8008428 <DMA_SetConfig+0x230>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d072      	beq.n	8008302 <DMA_SetConfig+0x10a>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a82      	ldr	r2, [pc, #520]	; (800842c <DMA_SetConfig+0x234>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d06d      	beq.n	8008302 <DMA_SetConfig+0x10a>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a81      	ldr	r2, [pc, #516]	; (8008430 <DMA_SetConfig+0x238>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d068      	beq.n	8008302 <DMA_SetConfig+0x10a>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a7f      	ldr	r2, [pc, #508]	; (8008434 <DMA_SetConfig+0x23c>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d063      	beq.n	8008302 <DMA_SetConfig+0x10a>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a7e      	ldr	r2, [pc, #504]	; (8008438 <DMA_SetConfig+0x240>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d05e      	beq.n	8008302 <DMA_SetConfig+0x10a>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a7c      	ldr	r2, [pc, #496]	; (800843c <DMA_SetConfig+0x244>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d059      	beq.n	8008302 <DMA_SetConfig+0x10a>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a7b      	ldr	r2, [pc, #492]	; (8008440 <DMA_SetConfig+0x248>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d054      	beq.n	8008302 <DMA_SetConfig+0x10a>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a79      	ldr	r2, [pc, #484]	; (8008444 <DMA_SetConfig+0x24c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d04f      	beq.n	8008302 <DMA_SetConfig+0x10a>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a78      	ldr	r2, [pc, #480]	; (8008448 <DMA_SetConfig+0x250>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d04a      	beq.n	8008302 <DMA_SetConfig+0x10a>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a76      	ldr	r2, [pc, #472]	; (800844c <DMA_SetConfig+0x254>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d045      	beq.n	8008302 <DMA_SetConfig+0x10a>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a75      	ldr	r2, [pc, #468]	; (8008450 <DMA_SetConfig+0x258>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d040      	beq.n	8008302 <DMA_SetConfig+0x10a>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a73      	ldr	r2, [pc, #460]	; (8008454 <DMA_SetConfig+0x25c>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d03b      	beq.n	8008302 <DMA_SetConfig+0x10a>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a72      	ldr	r2, [pc, #456]	; (8008458 <DMA_SetConfig+0x260>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d036      	beq.n	8008302 <DMA_SetConfig+0x10a>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a70      	ldr	r2, [pc, #448]	; (800845c <DMA_SetConfig+0x264>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d031      	beq.n	8008302 <DMA_SetConfig+0x10a>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a6f      	ldr	r2, [pc, #444]	; (8008460 <DMA_SetConfig+0x268>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d02c      	beq.n	8008302 <DMA_SetConfig+0x10a>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a6d      	ldr	r2, [pc, #436]	; (8008464 <DMA_SetConfig+0x26c>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d027      	beq.n	8008302 <DMA_SetConfig+0x10a>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a6c      	ldr	r2, [pc, #432]	; (8008468 <DMA_SetConfig+0x270>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d022      	beq.n	8008302 <DMA_SetConfig+0x10a>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a6a      	ldr	r2, [pc, #424]	; (800846c <DMA_SetConfig+0x274>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d01d      	beq.n	8008302 <DMA_SetConfig+0x10a>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a69      	ldr	r2, [pc, #420]	; (8008470 <DMA_SetConfig+0x278>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d018      	beq.n	8008302 <DMA_SetConfig+0x10a>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a67      	ldr	r2, [pc, #412]	; (8008474 <DMA_SetConfig+0x27c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d013      	beq.n	8008302 <DMA_SetConfig+0x10a>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a66      	ldr	r2, [pc, #408]	; (8008478 <DMA_SetConfig+0x280>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d00e      	beq.n	8008302 <DMA_SetConfig+0x10a>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a64      	ldr	r2, [pc, #400]	; (800847c <DMA_SetConfig+0x284>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d009      	beq.n	8008302 <DMA_SetConfig+0x10a>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a63      	ldr	r2, [pc, #396]	; (8008480 <DMA_SetConfig+0x288>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d004      	beq.n	8008302 <DMA_SetConfig+0x10a>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a61      	ldr	r2, [pc, #388]	; (8008484 <DMA_SetConfig+0x28c>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d101      	bne.n	8008306 <DMA_SetConfig+0x10e>
 8008302:	2301      	movs	r3, #1
 8008304:	e000      	b.n	8008308 <DMA_SetConfig+0x110>
 8008306:	2300      	movs	r3, #0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00d      	beq.n	8008328 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008314:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800831a:	2b00      	cmp	r3, #0
 800831c:	d004      	beq.n	8008328 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008326:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a3e      	ldr	r2, [pc, #248]	; (8008428 <DMA_SetConfig+0x230>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d04a      	beq.n	80083c8 <DMA_SetConfig+0x1d0>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a3d      	ldr	r2, [pc, #244]	; (800842c <DMA_SetConfig+0x234>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d045      	beq.n	80083c8 <DMA_SetConfig+0x1d0>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a3b      	ldr	r2, [pc, #236]	; (8008430 <DMA_SetConfig+0x238>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d040      	beq.n	80083c8 <DMA_SetConfig+0x1d0>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a3a      	ldr	r2, [pc, #232]	; (8008434 <DMA_SetConfig+0x23c>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d03b      	beq.n	80083c8 <DMA_SetConfig+0x1d0>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a38      	ldr	r2, [pc, #224]	; (8008438 <DMA_SetConfig+0x240>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d036      	beq.n	80083c8 <DMA_SetConfig+0x1d0>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a37      	ldr	r2, [pc, #220]	; (800843c <DMA_SetConfig+0x244>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d031      	beq.n	80083c8 <DMA_SetConfig+0x1d0>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a35      	ldr	r2, [pc, #212]	; (8008440 <DMA_SetConfig+0x248>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d02c      	beq.n	80083c8 <DMA_SetConfig+0x1d0>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a34      	ldr	r2, [pc, #208]	; (8008444 <DMA_SetConfig+0x24c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d027      	beq.n	80083c8 <DMA_SetConfig+0x1d0>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a32      	ldr	r2, [pc, #200]	; (8008448 <DMA_SetConfig+0x250>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d022      	beq.n	80083c8 <DMA_SetConfig+0x1d0>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a31      	ldr	r2, [pc, #196]	; (800844c <DMA_SetConfig+0x254>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d01d      	beq.n	80083c8 <DMA_SetConfig+0x1d0>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a2f      	ldr	r2, [pc, #188]	; (8008450 <DMA_SetConfig+0x258>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d018      	beq.n	80083c8 <DMA_SetConfig+0x1d0>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a2e      	ldr	r2, [pc, #184]	; (8008454 <DMA_SetConfig+0x25c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d013      	beq.n	80083c8 <DMA_SetConfig+0x1d0>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a2c      	ldr	r2, [pc, #176]	; (8008458 <DMA_SetConfig+0x260>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d00e      	beq.n	80083c8 <DMA_SetConfig+0x1d0>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a2b      	ldr	r2, [pc, #172]	; (800845c <DMA_SetConfig+0x264>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d009      	beq.n	80083c8 <DMA_SetConfig+0x1d0>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a29      	ldr	r2, [pc, #164]	; (8008460 <DMA_SetConfig+0x268>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d004      	beq.n	80083c8 <DMA_SetConfig+0x1d0>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a28      	ldr	r2, [pc, #160]	; (8008464 <DMA_SetConfig+0x26c>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d101      	bne.n	80083cc <DMA_SetConfig+0x1d4>
 80083c8:	2301      	movs	r3, #1
 80083ca:	e000      	b.n	80083ce <DMA_SetConfig+0x1d6>
 80083cc:	2300      	movs	r3, #0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d05a      	beq.n	8008488 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d6:	f003 031f 	and.w	r3, r3, #31
 80083da:	223f      	movs	r2, #63	; 0x3f
 80083dc:	409a      	lsls	r2, r3
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	2b40      	cmp	r3, #64	; 0x40
 8008400:	d108      	bne.n	8008414 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008412:	e087      	b.n	8008524 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	60da      	str	r2, [r3, #12]
}
 8008424:	e07e      	b.n	8008524 <DMA_SetConfig+0x32c>
 8008426:	bf00      	nop
 8008428:	40020010 	.word	0x40020010
 800842c:	40020028 	.word	0x40020028
 8008430:	40020040 	.word	0x40020040
 8008434:	40020058 	.word	0x40020058
 8008438:	40020070 	.word	0x40020070
 800843c:	40020088 	.word	0x40020088
 8008440:	400200a0 	.word	0x400200a0
 8008444:	400200b8 	.word	0x400200b8
 8008448:	40020410 	.word	0x40020410
 800844c:	40020428 	.word	0x40020428
 8008450:	40020440 	.word	0x40020440
 8008454:	40020458 	.word	0x40020458
 8008458:	40020470 	.word	0x40020470
 800845c:	40020488 	.word	0x40020488
 8008460:	400204a0 	.word	0x400204a0
 8008464:	400204b8 	.word	0x400204b8
 8008468:	58025408 	.word	0x58025408
 800846c:	5802541c 	.word	0x5802541c
 8008470:	58025430 	.word	0x58025430
 8008474:	58025444 	.word	0x58025444
 8008478:	58025458 	.word	0x58025458
 800847c:	5802546c 	.word	0x5802546c
 8008480:	58025480 	.word	0x58025480
 8008484:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a28      	ldr	r2, [pc, #160]	; (8008530 <DMA_SetConfig+0x338>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d022      	beq.n	80084d8 <DMA_SetConfig+0x2e0>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a27      	ldr	r2, [pc, #156]	; (8008534 <DMA_SetConfig+0x33c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d01d      	beq.n	80084d8 <DMA_SetConfig+0x2e0>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a25      	ldr	r2, [pc, #148]	; (8008538 <DMA_SetConfig+0x340>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d018      	beq.n	80084d8 <DMA_SetConfig+0x2e0>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a24      	ldr	r2, [pc, #144]	; (800853c <DMA_SetConfig+0x344>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d013      	beq.n	80084d8 <DMA_SetConfig+0x2e0>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a22      	ldr	r2, [pc, #136]	; (8008540 <DMA_SetConfig+0x348>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d00e      	beq.n	80084d8 <DMA_SetConfig+0x2e0>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a21      	ldr	r2, [pc, #132]	; (8008544 <DMA_SetConfig+0x34c>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d009      	beq.n	80084d8 <DMA_SetConfig+0x2e0>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a1f      	ldr	r2, [pc, #124]	; (8008548 <DMA_SetConfig+0x350>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d004      	beq.n	80084d8 <DMA_SetConfig+0x2e0>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a1e      	ldr	r2, [pc, #120]	; (800854c <DMA_SetConfig+0x354>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d101      	bne.n	80084dc <DMA_SetConfig+0x2e4>
 80084d8:	2301      	movs	r3, #1
 80084da:	e000      	b.n	80084de <DMA_SetConfig+0x2e6>
 80084dc:	2300      	movs	r3, #0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d020      	beq.n	8008524 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e6:	f003 031f 	and.w	r3, r3, #31
 80084ea:	2201      	movs	r2, #1
 80084ec:	409a      	lsls	r2, r3
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	2b40      	cmp	r3, #64	; 0x40
 8008500:	d108      	bne.n	8008514 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	60da      	str	r2, [r3, #12]
}
 8008512:	e007      	b.n	8008524 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	60da      	str	r2, [r3, #12]
}
 8008524:	bf00      	nop
 8008526:	371c      	adds	r7, #28
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	58025408 	.word	0x58025408
 8008534:	5802541c 	.word	0x5802541c
 8008538:	58025430 	.word	0x58025430
 800853c:	58025444 	.word	0x58025444
 8008540:	58025458 	.word	0x58025458
 8008544:	5802546c 	.word	0x5802546c
 8008548:	58025480 	.word	0x58025480
 800854c:	58025494 	.word	0x58025494

08008550 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a42      	ldr	r2, [pc, #264]	; (8008668 <DMA_CalcBaseAndBitshift+0x118>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d04a      	beq.n	80085f8 <DMA_CalcBaseAndBitshift+0xa8>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a41      	ldr	r2, [pc, #260]	; (800866c <DMA_CalcBaseAndBitshift+0x11c>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d045      	beq.n	80085f8 <DMA_CalcBaseAndBitshift+0xa8>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a3f      	ldr	r2, [pc, #252]	; (8008670 <DMA_CalcBaseAndBitshift+0x120>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d040      	beq.n	80085f8 <DMA_CalcBaseAndBitshift+0xa8>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a3e      	ldr	r2, [pc, #248]	; (8008674 <DMA_CalcBaseAndBitshift+0x124>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d03b      	beq.n	80085f8 <DMA_CalcBaseAndBitshift+0xa8>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a3c      	ldr	r2, [pc, #240]	; (8008678 <DMA_CalcBaseAndBitshift+0x128>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d036      	beq.n	80085f8 <DMA_CalcBaseAndBitshift+0xa8>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a3b      	ldr	r2, [pc, #236]	; (800867c <DMA_CalcBaseAndBitshift+0x12c>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d031      	beq.n	80085f8 <DMA_CalcBaseAndBitshift+0xa8>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a39      	ldr	r2, [pc, #228]	; (8008680 <DMA_CalcBaseAndBitshift+0x130>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d02c      	beq.n	80085f8 <DMA_CalcBaseAndBitshift+0xa8>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a38      	ldr	r2, [pc, #224]	; (8008684 <DMA_CalcBaseAndBitshift+0x134>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d027      	beq.n	80085f8 <DMA_CalcBaseAndBitshift+0xa8>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a36      	ldr	r2, [pc, #216]	; (8008688 <DMA_CalcBaseAndBitshift+0x138>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d022      	beq.n	80085f8 <DMA_CalcBaseAndBitshift+0xa8>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a35      	ldr	r2, [pc, #212]	; (800868c <DMA_CalcBaseAndBitshift+0x13c>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d01d      	beq.n	80085f8 <DMA_CalcBaseAndBitshift+0xa8>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a33      	ldr	r2, [pc, #204]	; (8008690 <DMA_CalcBaseAndBitshift+0x140>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d018      	beq.n	80085f8 <DMA_CalcBaseAndBitshift+0xa8>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a32      	ldr	r2, [pc, #200]	; (8008694 <DMA_CalcBaseAndBitshift+0x144>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d013      	beq.n	80085f8 <DMA_CalcBaseAndBitshift+0xa8>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a30      	ldr	r2, [pc, #192]	; (8008698 <DMA_CalcBaseAndBitshift+0x148>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d00e      	beq.n	80085f8 <DMA_CalcBaseAndBitshift+0xa8>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a2f      	ldr	r2, [pc, #188]	; (800869c <DMA_CalcBaseAndBitshift+0x14c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d009      	beq.n	80085f8 <DMA_CalcBaseAndBitshift+0xa8>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a2d      	ldr	r2, [pc, #180]	; (80086a0 <DMA_CalcBaseAndBitshift+0x150>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d004      	beq.n	80085f8 <DMA_CalcBaseAndBitshift+0xa8>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a2c      	ldr	r2, [pc, #176]	; (80086a4 <DMA_CalcBaseAndBitshift+0x154>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d101      	bne.n	80085fc <DMA_CalcBaseAndBitshift+0xac>
 80085f8:	2301      	movs	r3, #1
 80085fa:	e000      	b.n	80085fe <DMA_CalcBaseAndBitshift+0xae>
 80085fc:	2300      	movs	r3, #0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d024      	beq.n	800864c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	b2db      	uxtb	r3, r3
 8008608:	3b10      	subs	r3, #16
 800860a:	4a27      	ldr	r2, [pc, #156]	; (80086a8 <DMA_CalcBaseAndBitshift+0x158>)
 800860c:	fba2 2303 	umull	r2, r3, r2, r3
 8008610:	091b      	lsrs	r3, r3, #4
 8008612:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	4a24      	ldr	r2, [pc, #144]	; (80086ac <DMA_CalcBaseAndBitshift+0x15c>)
 800861c:	5cd3      	ldrb	r3, [r2, r3]
 800861e:	461a      	mov	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b03      	cmp	r3, #3
 8008628:	d908      	bls.n	800863c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	4b1f      	ldr	r3, [pc, #124]	; (80086b0 <DMA_CalcBaseAndBitshift+0x160>)
 8008632:	4013      	ands	r3, r2
 8008634:	1d1a      	adds	r2, r3, #4
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	659a      	str	r2, [r3, #88]	; 0x58
 800863a:	e00d      	b.n	8008658 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	461a      	mov	r2, r3
 8008642:	4b1b      	ldr	r3, [pc, #108]	; (80086b0 <DMA_CalcBaseAndBitshift+0x160>)
 8008644:	4013      	ands	r3, r2
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	6593      	str	r3, [r2, #88]	; 0x58
 800864a:	e005      	b.n	8008658 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	40020010 	.word	0x40020010
 800866c:	40020028 	.word	0x40020028
 8008670:	40020040 	.word	0x40020040
 8008674:	40020058 	.word	0x40020058
 8008678:	40020070 	.word	0x40020070
 800867c:	40020088 	.word	0x40020088
 8008680:	400200a0 	.word	0x400200a0
 8008684:	400200b8 	.word	0x400200b8
 8008688:	40020410 	.word	0x40020410
 800868c:	40020428 	.word	0x40020428
 8008690:	40020440 	.word	0x40020440
 8008694:	40020458 	.word	0x40020458
 8008698:	40020470 	.word	0x40020470
 800869c:	40020488 	.word	0x40020488
 80086a0:	400204a0 	.word	0x400204a0
 80086a4:	400204b8 	.word	0x400204b8
 80086a8:	aaaaaaab 	.word	0xaaaaaaab
 80086ac:	08014ea4 	.word	0x08014ea4
 80086b0:	fffffc00 	.word	0xfffffc00

080086b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d120      	bne.n	800870a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d858      	bhi.n	8008782 <DMA_CheckFifoParam+0xce>
 80086d0:	a201      	add	r2, pc, #4	; (adr r2, 80086d8 <DMA_CheckFifoParam+0x24>)
 80086d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d6:	bf00      	nop
 80086d8:	080086e9 	.word	0x080086e9
 80086dc:	080086fb 	.word	0x080086fb
 80086e0:	080086e9 	.word	0x080086e9
 80086e4:	08008783 	.word	0x08008783
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d048      	beq.n	8008786 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086f8:	e045      	b.n	8008786 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008702:	d142      	bne.n	800878a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008708:	e03f      	b.n	800878a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008712:	d123      	bne.n	800875c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008718:	2b03      	cmp	r3, #3
 800871a:	d838      	bhi.n	800878e <DMA_CheckFifoParam+0xda>
 800871c:	a201      	add	r2, pc, #4	; (adr r2, 8008724 <DMA_CheckFifoParam+0x70>)
 800871e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008722:	bf00      	nop
 8008724:	08008735 	.word	0x08008735
 8008728:	0800873b 	.word	0x0800873b
 800872c:	08008735 	.word	0x08008735
 8008730:	0800874d 	.word	0x0800874d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	73fb      	strb	r3, [r7, #15]
        break;
 8008738:	e030      	b.n	800879c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d025      	beq.n	8008792 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800874a:	e022      	b.n	8008792 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008750:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008754:	d11f      	bne.n	8008796 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800875a:	e01c      	b.n	8008796 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008760:	2b02      	cmp	r3, #2
 8008762:	d902      	bls.n	800876a <DMA_CheckFifoParam+0xb6>
 8008764:	2b03      	cmp	r3, #3
 8008766:	d003      	beq.n	8008770 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008768:	e018      	b.n	800879c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	73fb      	strb	r3, [r7, #15]
        break;
 800876e:	e015      	b.n	800879c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008774:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00e      	beq.n	800879a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	73fb      	strb	r3, [r7, #15]
    break;
 8008780:	e00b      	b.n	800879a <DMA_CheckFifoParam+0xe6>
        break;
 8008782:	bf00      	nop
 8008784:	e00a      	b.n	800879c <DMA_CheckFifoParam+0xe8>
        break;
 8008786:	bf00      	nop
 8008788:	e008      	b.n	800879c <DMA_CheckFifoParam+0xe8>
        break;
 800878a:	bf00      	nop
 800878c:	e006      	b.n	800879c <DMA_CheckFifoParam+0xe8>
        break;
 800878e:	bf00      	nop
 8008790:	e004      	b.n	800879c <DMA_CheckFifoParam+0xe8>
        break;
 8008792:	bf00      	nop
 8008794:	e002      	b.n	800879c <DMA_CheckFifoParam+0xe8>
        break;
 8008796:	bf00      	nop
 8008798:	e000      	b.n	800879c <DMA_CheckFifoParam+0xe8>
    break;
 800879a:	bf00      	nop
    }
  }

  return status;
 800879c:	7bfb      	ldrb	r3, [r7, #15]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop

080087ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a38      	ldr	r2, [pc, #224]	; (80088a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d022      	beq.n	800880a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a36      	ldr	r2, [pc, #216]	; (80088a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d01d      	beq.n	800880a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a35      	ldr	r2, [pc, #212]	; (80088a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d018      	beq.n	800880a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a33      	ldr	r2, [pc, #204]	; (80088ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d013      	beq.n	800880a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a32      	ldr	r2, [pc, #200]	; (80088b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d00e      	beq.n	800880a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a30      	ldr	r2, [pc, #192]	; (80088b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d009      	beq.n	800880a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a2f      	ldr	r2, [pc, #188]	; (80088b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d004      	beq.n	800880a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a2d      	ldr	r2, [pc, #180]	; (80088bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d101      	bne.n	800880e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800880a:	2301      	movs	r3, #1
 800880c:	e000      	b.n	8008810 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800880e:	2300      	movs	r3, #0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d01a      	beq.n	800884a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	b2db      	uxtb	r3, r3
 800881a:	3b08      	subs	r3, #8
 800881c:	4a28      	ldr	r2, [pc, #160]	; (80088c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800881e:	fba2 2303 	umull	r2, r3, r2, r3
 8008822:	091b      	lsrs	r3, r3, #4
 8008824:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	4b26      	ldr	r3, [pc, #152]	; (80088c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800882a:	4413      	add	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	461a      	mov	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a24      	ldr	r2, [pc, #144]	; (80088c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008838:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f003 031f 	and.w	r3, r3, #31
 8008840:	2201      	movs	r2, #1
 8008842:	409a      	lsls	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008848:	e024      	b.n	8008894 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	b2db      	uxtb	r3, r3
 8008850:	3b10      	subs	r3, #16
 8008852:	4a1e      	ldr	r2, [pc, #120]	; (80088cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008854:	fba2 2303 	umull	r2, r3, r2, r3
 8008858:	091b      	lsrs	r3, r3, #4
 800885a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	4a1c      	ldr	r2, [pc, #112]	; (80088d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d806      	bhi.n	8008872 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	4a1b      	ldr	r2, [pc, #108]	; (80088d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d902      	bls.n	8008872 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3308      	adds	r3, #8
 8008870:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	4b18      	ldr	r3, [pc, #96]	; (80088d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008876:	4413      	add	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	461a      	mov	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a16      	ldr	r2, [pc, #88]	; (80088dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008884:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f003 031f 	and.w	r3, r3, #31
 800888c:	2201      	movs	r2, #1
 800888e:	409a      	lsls	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008894:	bf00      	nop
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	58025408 	.word	0x58025408
 80088a4:	5802541c 	.word	0x5802541c
 80088a8:	58025430 	.word	0x58025430
 80088ac:	58025444 	.word	0x58025444
 80088b0:	58025458 	.word	0x58025458
 80088b4:	5802546c 	.word	0x5802546c
 80088b8:	58025480 	.word	0x58025480
 80088bc:	58025494 	.word	0x58025494
 80088c0:	cccccccd 	.word	0xcccccccd
 80088c4:	16009600 	.word	0x16009600
 80088c8:	58025880 	.word	0x58025880
 80088cc:	aaaaaaab 	.word	0xaaaaaaab
 80088d0:	400204b8 	.word	0x400204b8
 80088d4:	4002040f 	.word	0x4002040f
 80088d8:	10008200 	.word	0x10008200
 80088dc:	40020880 	.word	0x40020880

080088e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d04a      	beq.n	800898c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2b08      	cmp	r3, #8
 80088fa:	d847      	bhi.n	800898c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a25      	ldr	r2, [pc, #148]	; (8008998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d022      	beq.n	800894c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a24      	ldr	r2, [pc, #144]	; (800899c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d01d      	beq.n	800894c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a22      	ldr	r2, [pc, #136]	; (80089a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d018      	beq.n	800894c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a21      	ldr	r2, [pc, #132]	; (80089a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d013      	beq.n	800894c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a1f      	ldr	r2, [pc, #124]	; (80089a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d00e      	beq.n	800894c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a1e      	ldr	r2, [pc, #120]	; (80089ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d009      	beq.n	800894c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a1c      	ldr	r2, [pc, #112]	; (80089b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d004      	beq.n	800894c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a1b      	ldr	r2, [pc, #108]	; (80089b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d101      	bne.n	8008950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800894c:	2301      	movs	r3, #1
 800894e:	e000      	b.n	8008952 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008950:	2300      	movs	r3, #0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00a      	beq.n	800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	4b17      	ldr	r3, [pc, #92]	; (80089b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800895a:	4413      	add	r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	461a      	mov	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a15      	ldr	r2, [pc, #84]	; (80089bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008968:	671a      	str	r2, [r3, #112]	; 0x70
 800896a:	e009      	b.n	8008980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	4b14      	ldr	r3, [pc, #80]	; (80089c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	461a      	mov	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a11      	ldr	r2, [pc, #68]	; (80089c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800897e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3b01      	subs	r3, #1
 8008984:	2201      	movs	r2, #1
 8008986:	409a      	lsls	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800898c:	bf00      	nop
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	58025408 	.word	0x58025408
 800899c:	5802541c 	.word	0x5802541c
 80089a0:	58025430 	.word	0x58025430
 80089a4:	58025444 	.word	0x58025444
 80089a8:	58025458 	.word	0x58025458
 80089ac:	5802546c 	.word	0x5802546c
 80089b0:	58025480 	.word	0x58025480
 80089b4:	58025494 	.word	0x58025494
 80089b8:	1600963f 	.word	0x1600963f
 80089bc:	58025940 	.word	0x58025940
 80089c0:	1000823f 	.word	0x1000823f
 80089c4:	40020940 	.word	0x40020940

080089c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b089      	sub	sp, #36	; 0x24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80089d6:	4b89      	ldr	r3, [pc, #548]	; (8008bfc <HAL_GPIO_Init+0x234>)
 80089d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80089da:	e194      	b.n	8008d06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	2101      	movs	r1, #1
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	fa01 f303 	lsl.w	r3, r1, r3
 80089e8:	4013      	ands	r3, r2
 80089ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 8186 	beq.w	8008d00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d00b      	beq.n	8008a14 <HAL_GPIO_Init+0x4c>
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d007      	beq.n	8008a14 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a08:	2b11      	cmp	r3, #17
 8008a0a:	d003      	beq.n	8008a14 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	2b12      	cmp	r3, #18
 8008a12:	d130      	bne.n	8008a76 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	2203      	movs	r2, #3
 8008a20:	fa02 f303 	lsl.w	r3, r2, r3
 8008a24:	43db      	mvns	r3, r3
 8008a26:	69ba      	ldr	r2, [r7, #24]
 8008a28:	4013      	ands	r3, r2
 8008a2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	68da      	ldr	r2, [r3, #12]
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	fa02 f303 	lsl.w	r3, r2, r3
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	69ba      	ldr	r2, [r7, #24]
 8008a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a52:	43db      	mvns	r3, r3
 8008a54:	69ba      	ldr	r2, [r7, #24]
 8008a56:	4013      	ands	r3, r2
 8008a58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	091b      	lsrs	r3, r3, #4
 8008a60:	f003 0201 	and.w	r2, r3, #1
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	2203      	movs	r2, #3
 8008a82:	fa02 f303 	lsl.w	r3, r2, r3
 8008a86:	43db      	mvns	r3, r3
 8008a88:	69ba      	ldr	r2, [r7, #24]
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	005b      	lsls	r3, r3, #1
 8008a96:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d003      	beq.n	8008ab6 <HAL_GPIO_Init+0xee>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	2b12      	cmp	r3, #18
 8008ab4:	d123      	bne.n	8008afe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	08da      	lsrs	r2, r3, #3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3208      	adds	r2, #8
 8008abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	f003 0307 	and.w	r3, r3, #7
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	220f      	movs	r2, #15
 8008ace:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad2:	43db      	mvns	r3, r3
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	691a      	ldr	r2, [r3, #16]
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	f003 0307 	and.w	r3, r3, #7
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	08da      	lsrs	r2, r3, #3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3208      	adds	r2, #8
 8008af8:	69b9      	ldr	r1, [r7, #24]
 8008afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	2203      	movs	r2, #3
 8008b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0e:	43db      	mvns	r3, r3
 8008b10:	69ba      	ldr	r2, [r7, #24]
 8008b12:	4013      	ands	r3, r2
 8008b14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f003 0203 	and.w	r2, r3, #3
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	fa02 f303 	lsl.w	r3, r2, r3
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f000 80e0 	beq.w	8008d00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b40:	4b2f      	ldr	r3, [pc, #188]	; (8008c00 <HAL_GPIO_Init+0x238>)
 8008b42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b46:	4a2e      	ldr	r2, [pc, #184]	; (8008c00 <HAL_GPIO_Init+0x238>)
 8008b48:	f043 0302 	orr.w	r3, r3, #2
 8008b4c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008b50:	4b2b      	ldr	r3, [pc, #172]	; (8008c00 <HAL_GPIO_Init+0x238>)
 8008b52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b56:	f003 0302 	and.w	r3, r3, #2
 8008b5a:	60fb      	str	r3, [r7, #12]
 8008b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b5e:	4a29      	ldr	r2, [pc, #164]	; (8008c04 <HAL_GPIO_Init+0x23c>)
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	089b      	lsrs	r3, r3, #2
 8008b64:	3302      	adds	r3, #2
 8008b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	f003 0303 	and.w	r3, r3, #3
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	220f      	movs	r2, #15
 8008b76:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7a:	43db      	mvns	r3, r3
 8008b7c:	69ba      	ldr	r2, [r7, #24]
 8008b7e:	4013      	ands	r3, r2
 8008b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a20      	ldr	r2, [pc, #128]	; (8008c08 <HAL_GPIO_Init+0x240>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d052      	beq.n	8008c30 <HAL_GPIO_Init+0x268>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a1f      	ldr	r2, [pc, #124]	; (8008c0c <HAL_GPIO_Init+0x244>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d031      	beq.n	8008bf6 <HAL_GPIO_Init+0x22e>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a1e      	ldr	r2, [pc, #120]	; (8008c10 <HAL_GPIO_Init+0x248>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d02b      	beq.n	8008bf2 <HAL_GPIO_Init+0x22a>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a1d      	ldr	r2, [pc, #116]	; (8008c14 <HAL_GPIO_Init+0x24c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d025      	beq.n	8008bee <HAL_GPIO_Init+0x226>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a1c      	ldr	r2, [pc, #112]	; (8008c18 <HAL_GPIO_Init+0x250>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d01f      	beq.n	8008bea <HAL_GPIO_Init+0x222>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a1b      	ldr	r2, [pc, #108]	; (8008c1c <HAL_GPIO_Init+0x254>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d019      	beq.n	8008be6 <HAL_GPIO_Init+0x21e>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a1a      	ldr	r2, [pc, #104]	; (8008c20 <HAL_GPIO_Init+0x258>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d013      	beq.n	8008be2 <HAL_GPIO_Init+0x21a>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a19      	ldr	r2, [pc, #100]	; (8008c24 <HAL_GPIO_Init+0x25c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d00d      	beq.n	8008bde <HAL_GPIO_Init+0x216>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a18      	ldr	r2, [pc, #96]	; (8008c28 <HAL_GPIO_Init+0x260>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d007      	beq.n	8008bda <HAL_GPIO_Init+0x212>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a17      	ldr	r2, [pc, #92]	; (8008c2c <HAL_GPIO_Init+0x264>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d101      	bne.n	8008bd6 <HAL_GPIO_Init+0x20e>
 8008bd2:	2309      	movs	r3, #9
 8008bd4:	e02d      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008bd6:	230a      	movs	r3, #10
 8008bd8:	e02b      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008bda:	2308      	movs	r3, #8
 8008bdc:	e029      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008bde:	2307      	movs	r3, #7
 8008be0:	e027      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008be2:	2306      	movs	r3, #6
 8008be4:	e025      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008be6:	2305      	movs	r3, #5
 8008be8:	e023      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008bea:	2304      	movs	r3, #4
 8008bec:	e021      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e01f      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	e01d      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e01b      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008bfa:	bf00      	nop
 8008bfc:	58000080 	.word	0x58000080
 8008c00:	58024400 	.word	0x58024400
 8008c04:	58000400 	.word	0x58000400
 8008c08:	58020000 	.word	0x58020000
 8008c0c:	58020400 	.word	0x58020400
 8008c10:	58020800 	.word	0x58020800
 8008c14:	58020c00 	.word	0x58020c00
 8008c18:	58021000 	.word	0x58021000
 8008c1c:	58021400 	.word	0x58021400
 8008c20:	58021800 	.word	0x58021800
 8008c24:	58021c00 	.word	0x58021c00
 8008c28:	58022000 	.word	0x58022000
 8008c2c:	58022400 	.word	0x58022400
 8008c30:	2300      	movs	r3, #0
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	f002 0203 	and.w	r2, r2, #3
 8008c38:	0092      	lsls	r2, r2, #2
 8008c3a:	4093      	lsls	r3, r2
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c42:	4938      	ldr	r1, [pc, #224]	; (8008d24 <HAL_GPIO_Init+0x35c>)
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	089b      	lsrs	r3, r3, #2
 8008c48:	3302      	adds	r3, #2
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	43db      	mvns	r3, r3
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	43db      	mvns	r3, r3
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	4013      	ands	r3, r2
 8008c88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	43db      	mvns	r3, r3
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	43db      	mvns	r3, r3
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d003      	beq.n	8008cf8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008cf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	3301      	adds	r3, #1
 8008d04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f47f ae63 	bne.w	80089dc <HAL_GPIO_Init+0x14>
  }
}
 8008d16:	bf00      	nop
 8008d18:	bf00      	nop
 8008d1a:	3724      	adds	r7, #36	; 0x24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	58000400 	.word	0x58000400

08008d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	460b      	mov	r3, r1
 8008d32:	807b      	strh	r3, [r7, #2]
 8008d34:	4613      	mov	r3, r2
 8008d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d38:	787b      	ldrb	r3, [r7, #1]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d003      	beq.n	8008d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d3e:	887a      	ldrh	r2, [r7, #2]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008d44:	e003      	b.n	8008d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008d46:	887b      	ldrh	r3, [r7, #2]
 8008d48:	041a      	lsls	r2, r3, #16
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	619a      	str	r2, [r3, #24]
}
 8008d4e:	bf00      	nop
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
	...

08008d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e07f      	b.n	8008e6e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d106      	bne.n	8008d88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7fb fb56 	bl	8004434 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2224      	movs	r2, #36	; 0x24
 8008d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 0201 	bic.w	r2, r2, #1
 8008d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685a      	ldr	r2, [r3, #4]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008dac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	689a      	ldr	r2, [r3, #8]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008dbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d107      	bne.n	8008dd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	689a      	ldr	r2, [r3, #8]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dd2:	609a      	str	r2, [r3, #8]
 8008dd4:	e006      	b.n	8008de4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	689a      	ldr	r2, [r3, #8]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008de2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d104      	bne.n	8008df6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008df4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6859      	ldr	r1, [r3, #4]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	4b1d      	ldr	r3, [pc, #116]	; (8008e78 <HAL_I2C_Init+0x11c>)
 8008e02:	430b      	orrs	r3, r1
 8008e04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68da      	ldr	r2, [r3, #12]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	691a      	ldr	r2, [r3, #16]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	ea42 0103 	orr.w	r1, r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	021a      	lsls	r2, r3, #8
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	69d9      	ldr	r1, [r3, #28]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a1a      	ldr	r2, [r3, #32]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f042 0201 	orr.w	r2, r2, #1
 8008e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	02008000 	.word	0x02008000

08008e7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af02      	add	r7, sp, #8
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	4608      	mov	r0, r1
 8008e86:	4611      	mov	r1, r2
 8008e88:	461a      	mov	r2, r3
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	817b      	strh	r3, [r7, #10]
 8008e8e:	460b      	mov	r3, r1
 8008e90:	813b      	strh	r3, [r7, #8]
 8008e92:	4613      	mov	r3, r2
 8008e94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b20      	cmp	r3, #32
 8008ea0:	f040 80f9 	bne.w	8009096 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ea4:	6a3b      	ldr	r3, [r7, #32]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <HAL_I2C_Mem_Write+0x34>
 8008eaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d105      	bne.n	8008ebc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008eb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e0ed      	b.n	8009098 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d101      	bne.n	8008eca <HAL_I2C_Mem_Write+0x4e>
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	e0e6      	b.n	8009098 <HAL_I2C_Mem_Write+0x21c>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008ed2:	f7fc fdd9 	bl	8005a88 <HAL_GetTick>
 8008ed6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	2319      	movs	r3, #25
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f001 fee3 	bl	800acb0 <I2C_WaitOnFlagUntilTimeout>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e0d1      	b.n	8009098 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2221      	movs	r2, #33	; 0x21
 8008ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2240      	movs	r2, #64	; 0x40
 8008f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6a3a      	ldr	r2, [r7, #32]
 8008f0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008f14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f1c:	88f8      	ldrh	r0, [r7, #6]
 8008f1e:	893a      	ldrh	r2, [r7, #8]
 8008f20:	8979      	ldrh	r1, [r7, #10]
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	9301      	str	r3, [sp, #4]
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 ff23 	bl	8009d78 <I2C_RequestMemoryWrite>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d005      	beq.n	8008f44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e0a9      	b.n	8009098 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	2bff      	cmp	r3, #255	; 0xff
 8008f4c:	d90e      	bls.n	8008f6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	22ff      	movs	r2, #255	; 0xff
 8008f52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	8979      	ldrh	r1, [r7, #10]
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f001 ffc5 	bl	800aef4 <I2C_TransferConfig>
 8008f6a:	e00f      	b.n	8008f8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f7a:	b2da      	uxtb	r2, r3
 8008f7c:	8979      	ldrh	r1, [r7, #10]
 8008f7e:	2300      	movs	r3, #0
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f001 ffb4 	bl	800aef4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f001 fecd 	bl	800ad30 <I2C_WaitOnTXISFlagUntilTimeout>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e07b      	b.n	8009098 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa4:	781a      	ldrb	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	1c5a      	adds	r2, r3, #1
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d034      	beq.n	8009044 <HAL_I2C_Mem_Write+0x1c8>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d130      	bne.n	8009044 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2180      	movs	r1, #128	; 0x80
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f001 fe5f 	bl	800acb0 <I2C_WaitOnFlagUntilTimeout>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e04d      	b.n	8009098 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009000:	b29b      	uxth	r3, r3
 8009002:	2bff      	cmp	r3, #255	; 0xff
 8009004:	d90e      	bls.n	8009024 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	22ff      	movs	r2, #255	; 0xff
 800900a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009010:	b2da      	uxtb	r2, r3
 8009012:	8979      	ldrh	r1, [r7, #10]
 8009014:	2300      	movs	r3, #0
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f001 ff69 	bl	800aef4 <I2C_TransferConfig>
 8009022:	e00f      	b.n	8009044 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009028:	b29a      	uxth	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009032:	b2da      	uxtb	r2, r3
 8009034:	8979      	ldrh	r1, [r7, #10]
 8009036:	2300      	movs	r3, #0
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f001 ff58 	bl	800aef4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009048:	b29b      	uxth	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d19e      	bne.n	8008f8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800904e:	697a      	ldr	r2, [r7, #20]
 8009050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f001 feac 	bl	800adb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e01a      	b.n	8009098 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2220      	movs	r2, #32
 8009068:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	6859      	ldr	r1, [r3, #4]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	4b0a      	ldr	r3, [pc, #40]	; (80090a0 <HAL_I2C_Mem_Write+0x224>)
 8009076:	400b      	ands	r3, r1
 8009078:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2220      	movs	r2, #32
 800907e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	e000      	b.n	8009098 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009096:	2302      	movs	r3, #2
  }
}
 8009098:	4618      	mov	r0, r3
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	fe00e800 	.word	0xfe00e800

080090a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b088      	sub	sp, #32
 80090a8:	af02      	add	r7, sp, #8
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	4608      	mov	r0, r1
 80090ae:	4611      	mov	r1, r2
 80090b0:	461a      	mov	r2, r3
 80090b2:	4603      	mov	r3, r0
 80090b4:	817b      	strh	r3, [r7, #10]
 80090b6:	460b      	mov	r3, r1
 80090b8:	813b      	strh	r3, [r7, #8]
 80090ba:	4613      	mov	r3, r2
 80090bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b20      	cmp	r3, #32
 80090c8:	f040 80fd 	bne.w	80092c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d002      	beq.n	80090d8 <HAL_I2C_Mem_Read+0x34>
 80090d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d105      	bne.n	80090e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	e0f1      	b.n	80092c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d101      	bne.n	80090f2 <HAL_I2C_Mem_Read+0x4e>
 80090ee:	2302      	movs	r3, #2
 80090f0:	e0ea      	b.n	80092c8 <HAL_I2C_Mem_Read+0x224>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80090fa:	f7fc fcc5 	bl	8005a88 <HAL_GetTick>
 80090fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	2319      	movs	r3, #25
 8009106:	2201      	movs	r2, #1
 8009108:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f001 fdcf 	bl	800acb0 <I2C_WaitOnFlagUntilTimeout>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	e0d5      	b.n	80092c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2222      	movs	r2, #34	; 0x22
 8009120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2240      	movs	r2, #64	; 0x40
 8009128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a3a      	ldr	r2, [r7, #32]
 8009136:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800913c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009144:	88f8      	ldrh	r0, [r7, #6]
 8009146:	893a      	ldrh	r2, [r7, #8]
 8009148:	8979      	ldrh	r1, [r7, #10]
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	9301      	str	r3, [sp, #4]
 800914e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	4603      	mov	r3, r0
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f000 fe63 	bl	8009e20 <I2C_RequestMemoryRead>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d005      	beq.n	800916c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e0ad      	b.n	80092c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009170:	b29b      	uxth	r3, r3
 8009172:	2bff      	cmp	r3, #255	; 0xff
 8009174:	d90e      	bls.n	8009194 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	22ff      	movs	r2, #255	; 0xff
 800917a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009180:	b2da      	uxtb	r2, r3
 8009182:	8979      	ldrh	r1, [r7, #10]
 8009184:	4b52      	ldr	r3, [pc, #328]	; (80092d0 <HAL_I2C_Mem_Read+0x22c>)
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f001 feb1 	bl	800aef4 <I2C_TransferConfig>
 8009192:	e00f      	b.n	80091b4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009198:	b29a      	uxth	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091a2:	b2da      	uxtb	r2, r3
 80091a4:	8979      	ldrh	r1, [r7, #10]
 80091a6:	4b4a      	ldr	r3, [pc, #296]	; (80092d0 <HAL_I2C_Mem_Read+0x22c>)
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f001 fea0 	bl	800aef4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ba:	2200      	movs	r2, #0
 80091bc:	2104      	movs	r1, #4
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f001 fd76 	bl	800acb0 <I2C_WaitOnFlagUntilTimeout>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e07c      	b.n	80092c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	b2d2      	uxtb	r2, r2
 80091da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e0:	1c5a      	adds	r2, r3, #1
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ea:	3b01      	subs	r3, #1
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009204:	b29b      	uxth	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d034      	beq.n	8009274 <HAL_I2C_Mem_Read+0x1d0>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800920e:	2b00      	cmp	r3, #0
 8009210:	d130      	bne.n	8009274 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009218:	2200      	movs	r2, #0
 800921a:	2180      	movs	r1, #128	; 0x80
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f001 fd47 	bl	800acb0 <I2C_WaitOnFlagUntilTimeout>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d001      	beq.n	800922c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e04d      	b.n	80092c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009230:	b29b      	uxth	r3, r3
 8009232:	2bff      	cmp	r3, #255	; 0xff
 8009234:	d90e      	bls.n	8009254 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	22ff      	movs	r2, #255	; 0xff
 800923a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009240:	b2da      	uxtb	r2, r3
 8009242:	8979      	ldrh	r1, [r7, #10]
 8009244:	2300      	movs	r3, #0
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f001 fe51 	bl	800aef4 <I2C_TransferConfig>
 8009252:	e00f      	b.n	8009274 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009258:	b29a      	uxth	r2, r3
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009262:	b2da      	uxtb	r2, r3
 8009264:	8979      	ldrh	r1, [r7, #10]
 8009266:	2300      	movs	r3, #0
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f001 fe40 	bl	800aef4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009278:	b29b      	uxth	r3, r3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d19a      	bne.n	80091b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f001 fd94 	bl	800adb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e01a      	b.n	80092c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2220      	movs	r2, #32
 8009298:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	6859      	ldr	r1, [r3, #4]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <HAL_I2C_Mem_Read+0x230>)
 80092a6:	400b      	ands	r3, r1
 80092a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2220      	movs	r2, #32
 80092ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	e000      	b.n	80092c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80092c6:	2302      	movs	r3, #2
  }
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3718      	adds	r7, #24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	80002400 	.word	0x80002400
 80092d4:	fe00e800 	.word	0xfe00e800

080092d8 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08a      	sub	sp, #40	; 0x28
 80092dc:	af02      	add	r7, sp, #8
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	4608      	mov	r0, r1
 80092e2:	4611      	mov	r1, r2
 80092e4:	461a      	mov	r2, r3
 80092e6:	4603      	mov	r3, r0
 80092e8:	817b      	strh	r3, [r7, #10]
 80092ea:	460b      	mov	r3, r1
 80092ec:	813b      	strh	r3, [r7, #8]
 80092ee:	4613      	mov	r3, r2
 80092f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2b20      	cmp	r3, #32
 80092fc:	f040 80d5 	bne.w	80094aa <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	2b00      	cmp	r3, #0
 8009304:	d002      	beq.n	800930c <HAL_I2C_Mem_Read_DMA+0x34>
 8009306:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009308:	2b00      	cmp	r3, #0
 800930a:	d105      	bne.n	8009318 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009312:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e0c9      	b.n	80094ac <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009326:	d101      	bne.n	800932c <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8009328:	2302      	movs	r3, #2
 800932a:	e0bf      	b.n	80094ac <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009332:	2b01      	cmp	r3, #1
 8009334:	d101      	bne.n	800933a <HAL_I2C_Mem_Read_DMA+0x62>
 8009336:	2302      	movs	r3, #2
 8009338:	e0b8      	b.n	80094ac <HAL_I2C_Mem_Read_DMA+0x1d4>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009342:	f7fc fba1 	bl	8005a88 <HAL_GetTick>
 8009346:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2222      	movs	r2, #34	; 0x22
 800934c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2240      	movs	r2, #64	; 0x40
 8009354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009362:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009368:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	4a51      	ldr	r2, [pc, #324]	; (80094b4 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 800936e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4a51      	ldr	r2, [pc, #324]	; (80094b8 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8009374:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800937a:	b29b      	uxth	r3, r3
 800937c:	2bff      	cmp	r3, #255	; 0xff
 800937e:	d906      	bls.n	800938e <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	22ff      	movs	r2, #255	; 0xff
 8009384:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009386:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800938a:	61fb      	str	r3, [r7, #28]
 800938c:	e007      	b.n	800939e <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009392:	b29a      	uxth	r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009398:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800939c:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800939e:	88f8      	ldrh	r0, [r7, #6]
 80093a0:	893a      	ldrh	r2, [r7, #8]
 80093a2:	8979      	ldrh	r1, [r7, #10]
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	9301      	str	r3, [sp, #4]
 80093a8:	2319      	movs	r3, #25
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	4603      	mov	r3, r0
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f000 fd36 	bl	8009e20 <I2C_RequestMemoryRead>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d005      	beq.n	80093c6 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e072      	b.n	80094ac <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d020      	beq.n	8009410 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d2:	4a3a      	ldr	r2, [pc, #232]	; (80094bc <HAL_I2C_Mem_Read_DMA+0x1e4>)
 80093d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093da:	4a39      	ldr	r2, [pc, #228]	; (80094c0 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 80093dc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e2:	2200      	movs	r2, #0
 80093e4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ea:	2200      	movs	r2, #0
 80093ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3324      	adds	r3, #36	; 0x24
 80093f8:	4619      	mov	r1, r3
 80093fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009400:	f7fc ffea 	bl	80063d8 <HAL_DMA_Start_IT>
 8009404:	4603      	mov	r3, r0
 8009406:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d139      	bne.n	8009482 <HAL_I2C_Mem_Read_DMA+0x1aa>
 800940e:	e013      	b.n	8009438 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2220      	movs	r2, #32
 8009414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009424:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e039      	b.n	80094ac <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800943c:	b2da      	uxtb	r2, r3
 800943e:	8979      	ldrh	r1, [r7, #10]
 8009440:	4b20      	ldr	r3, [pc, #128]	; (80094c4 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f001 fd54 	bl	800aef4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009450:	b29a      	uxth	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	b29a      	uxth	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009466:	2110      	movs	r1, #16
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f001 fd71 	bl	800af50 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800947c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	e014      	b.n	80094ac <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2220      	movs	r2, #32
 8009486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009496:	f043 0210 	orr.w	r2, r3, #16
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e000      	b.n	80094ac <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80094aa:	2302      	movs	r3, #2
  }
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3720      	adds	r7, #32
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	ffff0000 	.word	0xffff0000
 80094b8:	080097d3 	.word	0x080097d3
 80094bc:	0800a96f 	.word	0x0800a96f
 80094c0:	0800aa05 	.word	0x0800aa05
 80094c4:	80002400 	.word	0x80002400

080094c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d005      	beq.n	80094f4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	68f9      	ldr	r1, [r7, #12]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	4798      	blx	r3
  }
}
 80094f4:	bf00      	nop
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8009504:	bf00      	nop
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	70fb      	strb	r3, [r7, #3]
 8009558:	4613      	mov	r3, r2
 800955a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009598:	bf00      	nop
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d101      	bne.n	80095f0 <I2C_Slave_ISR_IT+0x24>
 80095ec:	2302      	movs	r3, #2
 80095ee:	e0ec      	b.n	80097ca <I2C_Slave_ISR_IT+0x1fe>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	095b      	lsrs	r3, r3, #5
 80095fc:	f003 0301 	and.w	r3, r3, #1
 8009600:	2b00      	cmp	r3, #0
 8009602:	d009      	beq.n	8009618 <I2C_Slave_ISR_IT+0x4c>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	095b      	lsrs	r3, r3, #5
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009610:	6939      	ldr	r1, [r7, #16]
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 fe42 	bl	800a29c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	091b      	lsrs	r3, r3, #4
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	2b00      	cmp	r3, #0
 8009622:	d04d      	beq.n	80096c0 <I2C_Slave_ISR_IT+0xf4>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	091b      	lsrs	r3, r3, #4
 8009628:	f003 0301 	and.w	r3, r3, #1
 800962c:	2b00      	cmp	r3, #0
 800962e:	d047      	beq.n	80096c0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009634:	b29b      	uxth	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d128      	bne.n	800968c <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b28      	cmp	r3, #40	; 0x28
 8009644:	d108      	bne.n	8009658 <I2C_Slave_ISR_IT+0x8c>
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800964c:	d104      	bne.n	8009658 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800964e:	6939      	ldr	r1, [r7, #16]
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f001 f81b 	bl	800a68c <I2C_ITListenCplt>
 8009656:	e032      	b.n	80096be <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b29      	cmp	r3, #41	; 0x29
 8009662:	d10e      	bne.n	8009682 <I2C_Slave_ISR_IT+0xb6>
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800966a:	d00a      	beq.n	8009682 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2210      	movs	r2, #16
 8009672:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f001 f956 	bl	800a926 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f000 fce5 	bl	800a04a <I2C_ITSlaveSeqCplt>
 8009680:	e01d      	b.n	80096be <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2210      	movs	r2, #16
 8009688:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800968a:	e096      	b.n	80097ba <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2210      	movs	r2, #16
 8009692:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009698:	f043 0204 	orr.w	r2, r3, #4
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d004      	beq.n	80096b0 <I2C_Slave_ISR_IT+0xe4>
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80096ac:	f040 8085 	bne.w	80097ba <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b4:	4619      	mov	r1, r3
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f001 f83e 	bl	800a738 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80096bc:	e07d      	b.n	80097ba <I2C_Slave_ISR_IT+0x1ee>
 80096be:	e07c      	b.n	80097ba <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	089b      	lsrs	r3, r3, #2
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d030      	beq.n	800972e <I2C_Slave_ISR_IT+0x162>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	089b      	lsrs	r3, r3, #2
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d02a      	beq.n	800972e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096dc:	b29b      	uxth	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d018      	beq.n	8009714 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ec:	b2d2      	uxtb	r2, r2
 80096ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f4:	1c5a      	adds	r2, r3, #1
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096fe:	3b01      	subs	r3, #1
 8009700:	b29a      	uxth	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800970a:	b29b      	uxth	r3, r3
 800970c:	3b01      	subs	r3, #1
 800970e:	b29a      	uxth	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009718:	b29b      	uxth	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d14f      	bne.n	80097be <I2C_Slave_ISR_IT+0x1f2>
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009724:	d04b      	beq.n	80097be <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f000 fc8f 	bl	800a04a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800972c:	e047      	b.n	80097be <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	08db      	lsrs	r3, r3, #3
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00a      	beq.n	8009750 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	08db      	lsrs	r3, r3, #3
 800973e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009742:	2b00      	cmp	r3, #0
 8009744:	d004      	beq.n	8009750 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009746:	6939      	ldr	r1, [r7, #16]
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f000 fbbd 	bl	8009ec8 <I2C_ITAddrCplt>
 800974e:	e037      	b.n	80097c0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	085b      	lsrs	r3, r3, #1
 8009754:	f003 0301 	and.w	r3, r3, #1
 8009758:	2b00      	cmp	r3, #0
 800975a:	d031      	beq.n	80097c0 <I2C_Slave_ISR_IT+0x1f4>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	085b      	lsrs	r3, r3, #1
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	d02b      	beq.n	80097c0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800976c:	b29b      	uxth	r3, r3
 800976e:	2b00      	cmp	r3, #0
 8009770:	d018      	beq.n	80097a4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009776:	781a      	ldrb	r2, [r3, #0]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	1c5a      	adds	r2, r3, #1
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800978c:	b29b      	uxth	r3, r3
 800978e:	3b01      	subs	r3, #1
 8009790:	b29a      	uxth	r2, r3
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800979a:	3b01      	subs	r3, #1
 800979c:	b29a      	uxth	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	851a      	strh	r2, [r3, #40]	; 0x28
 80097a2:	e00d      	b.n	80097c0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80097aa:	d002      	beq.n	80097b2 <I2C_Slave_ISR_IT+0x1e6>
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d106      	bne.n	80097c0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 fc49 	bl	800a04a <I2C_ITSlaveSeqCplt>
 80097b8:	e002      	b.n	80097c0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80097ba:	bf00      	nop
 80097bc:	e000      	b.n	80097c0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80097be:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3718      	adds	r7, #24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b088      	sub	sp, #32
 80097d6:	af02      	add	r7, sp, #8
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	60b9      	str	r1, [r7, #8]
 80097dc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d101      	bne.n	80097ec <I2C_Master_ISR_DMA+0x1a>
 80097e8:	2302      	movs	r3, #2
 80097ea:	e0e1      	b.n	80099b0 <I2C_Master_ISR_DMA+0x1de>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	091b      	lsrs	r3, r3, #4
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d017      	beq.n	8009830 <I2C_Master_ISR_DMA+0x5e>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	091b      	lsrs	r3, r3, #4
 8009804:	f003 0301 	and.w	r3, r3, #1
 8009808:	2b00      	cmp	r3, #0
 800980a:	d011      	beq.n	8009830 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2210      	movs	r2, #16
 8009812:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009818:	f043 0204 	orr.w	r2, r3, #4
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009820:	2120      	movs	r1, #32
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f001 fb94 	bl	800af50 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f001 f87c 	bl	800a926 <I2C_Flush_TXDR>
 800982e:	e0ba      	b.n	80099a6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	09db      	lsrs	r3, r3, #7
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	2b00      	cmp	r3, #0
 800983a:	d072      	beq.n	8009922 <I2C_Master_ISR_DMA+0x150>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	099b      	lsrs	r3, r3, #6
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	d06c      	beq.n	8009922 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009856:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800985c:	b29b      	uxth	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d04e      	beq.n	8009900 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	b29b      	uxth	r3, r3
 800986a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800986e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009874:	b29b      	uxth	r3, r3
 8009876:	2bff      	cmp	r3, #255	; 0xff
 8009878:	d906      	bls.n	8009888 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	22ff      	movs	r2, #255	; 0xff
 800987e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8009880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009884:	617b      	str	r3, [r7, #20]
 8009886:	e010      	b.n	80098aa <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800988c:	b29a      	uxth	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009896:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800989a:	d003      	beq.n	80098a4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a0:	617b      	str	r3, [r7, #20]
 80098a2:	e002      	b.n	80098aa <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80098a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098a8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	8a79      	ldrh	r1, [r7, #18]
 80098b2:	2300      	movs	r3, #0
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f001 fb1b 	bl	800aef4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	2b22      	cmp	r3, #34	; 0x22
 80098da:	d108      	bne.n	80098ee <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098ea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80098ec:	e05b      	b.n	80099a6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80098fe:	e052      	b.n	80099a6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800990a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800990e:	d003      	beq.n	8009918 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f000 fb5d 	bl	8009fd0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009916:	e046      	b.n	80099a6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009918:	2140      	movs	r1, #64	; 0x40
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 ff0c 	bl	800a738 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009920:	e041      	b.n	80099a6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	099b      	lsrs	r3, r3, #6
 8009926:	f003 0301 	and.w	r3, r3, #1
 800992a:	2b00      	cmp	r3, #0
 800992c:	d029      	beq.n	8009982 <I2C_Master_ISR_DMA+0x1b0>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	099b      	lsrs	r3, r3, #6
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	2b00      	cmp	r3, #0
 8009938:	d023      	beq.n	8009982 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800993e:	b29b      	uxth	r3, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	d119      	bne.n	8009978 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800994e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009952:	d027      	beq.n	80099a4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009958:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800995c:	d108      	bne.n	8009970 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800996c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800996e:	e019      	b.n	80099a4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f000 fb2d 	bl	8009fd0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009976:	e015      	b.n	80099a4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009978:	2140      	movs	r1, #64	; 0x40
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 fedc 	bl	800a738 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009980:	e010      	b.n	80099a4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	095b      	lsrs	r3, r3, #5
 8009986:	f003 0301 	and.w	r3, r3, #1
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00b      	beq.n	80099a6 <I2C_Master_ISR_DMA+0x1d4>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	095b      	lsrs	r3, r3, #5
 8009992:	f003 0301 	and.w	r3, r3, #1
 8009996:	2b00      	cmp	r3, #0
 8009998:	d005      	beq.n	80099a6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800999a:	68b9      	ldr	r1, [r7, #8]
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 fbb3 	bl	800a108 <I2C_ITMasterCplt>
 80099a2:	e000      	b.n	80099a6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80099a4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3718      	adds	r7, #24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b088      	sub	sp, #32
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80099ca:	2300      	movs	r3, #0
 80099cc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d101      	bne.n	80099dc <I2C_Slave_ISR_DMA+0x24>
 80099d8:	2302      	movs	r3, #2
 80099da:	e1c8      	b.n	8009d6e <I2C_Slave_ISR_DMA+0x3b6>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	095b      	lsrs	r3, r3, #5
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d009      	beq.n	8009a04 <I2C_Slave_ISR_DMA+0x4c>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	095b      	lsrs	r3, r3, #5
 80099f4:	f003 0301 	and.w	r3, r3, #1
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d003      	beq.n	8009a04 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80099fc:	68b9      	ldr	r1, [r7, #8]
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f000 fc4c 	bl	800a29c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	091b      	lsrs	r3, r3, #4
 8009a08:	f003 0301 	and.w	r3, r3, #1
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f000 8199 	beq.w	8009d44 <I2C_Slave_ISR_DMA+0x38c>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	091b      	lsrs	r3, r3, #4
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 8192 	beq.w	8009d44 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	0b9b      	lsrs	r3, r3, #14
 8009a24:	f003 0301 	and.w	r3, r3, #1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d106      	bne.n	8009a3a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	0bdb      	lsrs	r3, r3, #15
 8009a30:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 817e 	beq.w	8009d36 <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d07c      	beq.n	8009b3c <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	0bdb      	lsrs	r3, r3, #15
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d076      	beq.n	8009b3c <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a8d      	ldr	r2, [pc, #564]	; (8009c8c <I2C_Slave_ISR_DMA+0x2d4>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d059      	beq.n	8009b0e <I2C_Slave_ISR_DMA+0x156>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a8b      	ldr	r2, [pc, #556]	; (8009c90 <I2C_Slave_ISR_DMA+0x2d8>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d053      	beq.n	8009b0e <I2C_Slave_ISR_DMA+0x156>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a89      	ldr	r2, [pc, #548]	; (8009c94 <I2C_Slave_ISR_DMA+0x2dc>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d04d      	beq.n	8009b0e <I2C_Slave_ISR_DMA+0x156>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a87      	ldr	r2, [pc, #540]	; (8009c98 <I2C_Slave_ISR_DMA+0x2e0>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d047      	beq.n	8009b0e <I2C_Slave_ISR_DMA+0x156>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a85      	ldr	r2, [pc, #532]	; (8009c9c <I2C_Slave_ISR_DMA+0x2e4>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d041      	beq.n	8009b0e <I2C_Slave_ISR_DMA+0x156>
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a83      	ldr	r2, [pc, #524]	; (8009ca0 <I2C_Slave_ISR_DMA+0x2e8>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d03b      	beq.n	8009b0e <I2C_Slave_ISR_DMA+0x156>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a81      	ldr	r2, [pc, #516]	; (8009ca4 <I2C_Slave_ISR_DMA+0x2ec>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d035      	beq.n	8009b0e <I2C_Slave_ISR_DMA+0x156>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a7f      	ldr	r2, [pc, #508]	; (8009ca8 <I2C_Slave_ISR_DMA+0x2f0>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d02f      	beq.n	8009b0e <I2C_Slave_ISR_DMA+0x156>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a7d      	ldr	r2, [pc, #500]	; (8009cac <I2C_Slave_ISR_DMA+0x2f4>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d029      	beq.n	8009b0e <I2C_Slave_ISR_DMA+0x156>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a7b      	ldr	r2, [pc, #492]	; (8009cb0 <I2C_Slave_ISR_DMA+0x2f8>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d023      	beq.n	8009b0e <I2C_Slave_ISR_DMA+0x156>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a79      	ldr	r2, [pc, #484]	; (8009cb4 <I2C_Slave_ISR_DMA+0x2fc>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d01d      	beq.n	8009b0e <I2C_Slave_ISR_DMA+0x156>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a77      	ldr	r2, [pc, #476]	; (8009cb8 <I2C_Slave_ISR_DMA+0x300>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d017      	beq.n	8009b0e <I2C_Slave_ISR_DMA+0x156>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a75      	ldr	r2, [pc, #468]	; (8009cbc <I2C_Slave_ISR_DMA+0x304>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d011      	beq.n	8009b0e <I2C_Slave_ISR_DMA+0x156>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a73      	ldr	r2, [pc, #460]	; (8009cc0 <I2C_Slave_ISR_DMA+0x308>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d00b      	beq.n	8009b0e <I2C_Slave_ISR_DMA+0x156>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a71      	ldr	r2, [pc, #452]	; (8009cc4 <I2C_Slave_ISR_DMA+0x30c>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d005      	beq.n	8009b0e <I2C_Slave_ISR_DMA+0x156>
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a6f      	ldr	r2, [pc, #444]	; (8009cc8 <I2C_Slave_ISR_DMA+0x310>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d109      	bne.n	8009b22 <I2C_Slave_ISR_DMA+0x16a>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	bf0c      	ite	eq
 8009b1a:	2301      	moveq	r3, #1
 8009b1c:	2300      	movne	r3, #0
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	e008      	b.n	8009b34 <I2C_Slave_ISR_DMA+0x17c>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	bf0c      	ite	eq
 8009b2e:	2301      	moveq	r3, #1
 8009b30:	2300      	movne	r3, #0
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d07c      	beq.n	8009c3e <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	0b9b      	lsrs	r3, r3, #14
 8009b48:	f003 0301 	and.w	r3, r3, #1
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d076      	beq.n	8009c3e <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a4d      	ldr	r2, [pc, #308]	; (8009c8c <I2C_Slave_ISR_DMA+0x2d4>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d059      	beq.n	8009c10 <I2C_Slave_ISR_DMA+0x258>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a4b      	ldr	r2, [pc, #300]	; (8009c90 <I2C_Slave_ISR_DMA+0x2d8>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d053      	beq.n	8009c10 <I2C_Slave_ISR_DMA+0x258>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a49      	ldr	r2, [pc, #292]	; (8009c94 <I2C_Slave_ISR_DMA+0x2dc>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d04d      	beq.n	8009c10 <I2C_Slave_ISR_DMA+0x258>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a47      	ldr	r2, [pc, #284]	; (8009c98 <I2C_Slave_ISR_DMA+0x2e0>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d047      	beq.n	8009c10 <I2C_Slave_ISR_DMA+0x258>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a45      	ldr	r2, [pc, #276]	; (8009c9c <I2C_Slave_ISR_DMA+0x2e4>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d041      	beq.n	8009c10 <I2C_Slave_ISR_DMA+0x258>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a43      	ldr	r2, [pc, #268]	; (8009ca0 <I2C_Slave_ISR_DMA+0x2e8>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d03b      	beq.n	8009c10 <I2C_Slave_ISR_DMA+0x258>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a41      	ldr	r2, [pc, #260]	; (8009ca4 <I2C_Slave_ISR_DMA+0x2ec>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d035      	beq.n	8009c10 <I2C_Slave_ISR_DMA+0x258>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a3f      	ldr	r2, [pc, #252]	; (8009ca8 <I2C_Slave_ISR_DMA+0x2f0>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d02f      	beq.n	8009c10 <I2C_Slave_ISR_DMA+0x258>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a3d      	ldr	r2, [pc, #244]	; (8009cac <I2C_Slave_ISR_DMA+0x2f4>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d029      	beq.n	8009c10 <I2C_Slave_ISR_DMA+0x258>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a3b      	ldr	r2, [pc, #236]	; (8009cb0 <I2C_Slave_ISR_DMA+0x2f8>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d023      	beq.n	8009c10 <I2C_Slave_ISR_DMA+0x258>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a39      	ldr	r2, [pc, #228]	; (8009cb4 <I2C_Slave_ISR_DMA+0x2fc>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d01d      	beq.n	8009c10 <I2C_Slave_ISR_DMA+0x258>
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a37      	ldr	r2, [pc, #220]	; (8009cb8 <I2C_Slave_ISR_DMA+0x300>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d017      	beq.n	8009c10 <I2C_Slave_ISR_DMA+0x258>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a35      	ldr	r2, [pc, #212]	; (8009cbc <I2C_Slave_ISR_DMA+0x304>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d011      	beq.n	8009c10 <I2C_Slave_ISR_DMA+0x258>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a33      	ldr	r2, [pc, #204]	; (8009cc0 <I2C_Slave_ISR_DMA+0x308>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d00b      	beq.n	8009c10 <I2C_Slave_ISR_DMA+0x258>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a31      	ldr	r2, [pc, #196]	; (8009cc4 <I2C_Slave_ISR_DMA+0x30c>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d005      	beq.n	8009c10 <I2C_Slave_ISR_DMA+0x258>
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a2f      	ldr	r2, [pc, #188]	; (8009cc8 <I2C_Slave_ISR_DMA+0x310>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d109      	bne.n	8009c24 <I2C_Slave_ISR_DMA+0x26c>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	bf0c      	ite	eq
 8009c1c:	2301      	moveq	r3, #1
 8009c1e:	2300      	movne	r3, #0
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	e008      	b.n	8009c36 <I2C_Slave_ISR_DMA+0x27e>
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	bf0c      	ite	eq
 8009c30:	2301      	moveq	r3, #1
 8009c32:	2300      	movne	r3, #0
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d148      	bne.n	8009cd6 <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b28      	cmp	r3, #40	; 0x28
 8009c4e:	d108      	bne.n	8009c62 <I2C_Slave_ISR_DMA+0x2aa>
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c56:	d104      	bne.n	8009c62 <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009c58:	68b9      	ldr	r1, [r7, #8]
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 fd16 	bl	800a68c <I2C_ITListenCplt>
 8009c60:	e068      	b.n	8009d34 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b29      	cmp	r3, #41	; 0x29
 8009c6c:	d12e      	bne.n	8009ccc <I2C_Slave_ISR_DMA+0x314>
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009c74:	d02a      	beq.n	8009ccc <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2210      	movs	r2, #16
 8009c7c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 fe51 	bl	800a926 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 f9e0 	bl	800a04a <I2C_ITSlaveSeqCplt>
 8009c8a:	e053      	b.n	8009d34 <I2C_Slave_ISR_DMA+0x37c>
 8009c8c:	40020010 	.word	0x40020010
 8009c90:	40020028 	.word	0x40020028
 8009c94:	40020040 	.word	0x40020040
 8009c98:	40020058 	.word	0x40020058
 8009c9c:	40020070 	.word	0x40020070
 8009ca0:	40020088 	.word	0x40020088
 8009ca4:	400200a0 	.word	0x400200a0
 8009ca8:	400200b8 	.word	0x400200b8
 8009cac:	40020410 	.word	0x40020410
 8009cb0:	40020428 	.word	0x40020428
 8009cb4:	40020440 	.word	0x40020440
 8009cb8:	40020458 	.word	0x40020458
 8009cbc:	40020470 	.word	0x40020470
 8009cc0:	40020488 	.word	0x40020488
 8009cc4:	400204a0 	.word	0x400204a0
 8009cc8:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2210      	movs	r2, #16
 8009cd2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009cd4:	e034      	b.n	8009d40 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2210      	movs	r2, #16
 8009cdc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ce2:	f043 0204 	orr.w	r2, r3, #4
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cf0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d003      	beq.n	8009d00 <I2C_Slave_ISR_DMA+0x348>
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009cfe:	d11f      	bne.n	8009d40 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
 8009d02:	2b21      	cmp	r3, #33	; 0x21
 8009d04:	d002      	beq.n	8009d0c <I2C_Slave_ISR_DMA+0x354>
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
 8009d08:	2b29      	cmp	r3, #41	; 0x29
 8009d0a:	d103      	bne.n	8009d14 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2221      	movs	r2, #33	; 0x21
 8009d10:	631a      	str	r2, [r3, #48]	; 0x30
 8009d12:	e008      	b.n	8009d26 <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	2b22      	cmp	r3, #34	; 0x22
 8009d18:	d002      	beq.n	8009d20 <I2C_Slave_ISR_DMA+0x368>
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
 8009d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8009d1e:	d102      	bne.n	8009d26 <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2222      	movs	r2, #34	; 0x22
 8009d24:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 fd03 	bl	800a738 <I2C_ITError>
      if (treatdmanack == 1U)
 8009d32:	e005      	b.n	8009d40 <I2C_Slave_ISR_DMA+0x388>
 8009d34:	e004      	b.n	8009d40 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2210      	movs	r2, #16
 8009d3c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009d3e:	e011      	b.n	8009d64 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8009d40:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009d42:	e00f      	b.n	8009d64 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	08db      	lsrs	r3, r3, #3
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d009      	beq.n	8009d64 <I2C_Slave_ISR_DMA+0x3ac>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	08db      	lsrs	r3, r3, #3
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009d5c:	68b9      	ldr	r1, [r7, #8]
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f000 f8b2 	bl	8009ec8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3720      	adds	r7, #32
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop

08009d78 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af02      	add	r7, sp, #8
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	4608      	mov	r0, r1
 8009d82:	4611      	mov	r1, r2
 8009d84:	461a      	mov	r2, r3
 8009d86:	4603      	mov	r3, r0
 8009d88:	817b      	strh	r3, [r7, #10]
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	813b      	strh	r3, [r7, #8]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009d92:	88fb      	ldrh	r3, [r7, #6]
 8009d94:	b2da      	uxtb	r2, r3
 8009d96:	8979      	ldrh	r1, [r7, #10]
 8009d98:	4b20      	ldr	r3, [pc, #128]	; (8009e1c <I2C_RequestMemoryWrite+0xa4>)
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f001 f8a7 	bl	800aef4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009da6:	69fa      	ldr	r2, [r7, #28]
 8009da8:	69b9      	ldr	r1, [r7, #24]
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f000 ffc0 	bl	800ad30 <I2C_WaitOnTXISFlagUntilTimeout>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d001      	beq.n	8009dba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	e02c      	b.n	8009e14 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009dba:	88fb      	ldrh	r3, [r7, #6]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d105      	bne.n	8009dcc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009dc0:	893b      	ldrh	r3, [r7, #8]
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	629a      	str	r2, [r3, #40]	; 0x28
 8009dca:	e015      	b.n	8009df8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009dcc:	893b      	ldrh	r3, [r7, #8]
 8009dce:	0a1b      	lsrs	r3, r3, #8
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dda:	69fa      	ldr	r2, [r7, #28]
 8009ddc:	69b9      	ldr	r1, [r7, #24]
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f000 ffa6 	bl	800ad30 <I2C_WaitOnTXISFlagUntilTimeout>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d001      	beq.n	8009dee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e012      	b.n	8009e14 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009dee:	893b      	ldrh	r3, [r7, #8]
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	2180      	movs	r1, #128	; 0x80
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f000 ff54 	bl	800acb0 <I2C_WaitOnFlagUntilTimeout>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e000      	b.n	8009e14 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	80002000 	.word	0x80002000

08009e20 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af02      	add	r7, sp, #8
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	4608      	mov	r0, r1
 8009e2a:	4611      	mov	r1, r2
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	4603      	mov	r3, r0
 8009e30:	817b      	strh	r3, [r7, #10]
 8009e32:	460b      	mov	r3, r1
 8009e34:	813b      	strh	r3, [r7, #8]
 8009e36:	4613      	mov	r3, r2
 8009e38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009e3a:	88fb      	ldrh	r3, [r7, #6]
 8009e3c:	b2da      	uxtb	r2, r3
 8009e3e:	8979      	ldrh	r1, [r7, #10]
 8009e40:	4b20      	ldr	r3, [pc, #128]	; (8009ec4 <I2C_RequestMemoryRead+0xa4>)
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	2300      	movs	r3, #0
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f001 f854 	bl	800aef4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e4c:	69fa      	ldr	r2, [r7, #28]
 8009e4e:	69b9      	ldr	r1, [r7, #24]
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 ff6d 	bl	800ad30 <I2C_WaitOnTXISFlagUntilTimeout>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d001      	beq.n	8009e60 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e02c      	b.n	8009eba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e60:	88fb      	ldrh	r3, [r7, #6]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d105      	bne.n	8009e72 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e66:	893b      	ldrh	r3, [r7, #8]
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	629a      	str	r2, [r3, #40]	; 0x28
 8009e70:	e015      	b.n	8009e9e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009e72:	893b      	ldrh	r3, [r7, #8]
 8009e74:	0a1b      	lsrs	r3, r3, #8
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	b2da      	uxtb	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e80:	69fa      	ldr	r2, [r7, #28]
 8009e82:	69b9      	ldr	r1, [r7, #24]
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 ff53 	bl	800ad30 <I2C_WaitOnTXISFlagUntilTimeout>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	e012      	b.n	8009eba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e94:	893b      	ldrh	r3, [r7, #8]
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	2140      	movs	r1, #64	; 0x40
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f000 ff01 	bl	800acb0 <I2C_WaitOnFlagUntilTimeout>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e000      	b.n	8009eba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	80002000 	.word	0x80002000

08009ec8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009ede:	2b28      	cmp	r3, #40	; 0x28
 8009ee0:	d16a      	bne.n	8009fb8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	0c1b      	lsrs	r3, r3, #16
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	f003 0301 	and.w	r3, r3, #1
 8009ef0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	0c1b      	lsrs	r3, r3, #16
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009f00:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f0e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009f1c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d138      	bne.n	8009f98 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8009f26:	897b      	ldrh	r3, [r7, #10]
 8009f28:	09db      	lsrs	r3, r3, #7
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	89bb      	ldrh	r3, [r7, #12]
 8009f2e:	4053      	eors	r3, r2
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	f003 0306 	and.w	r3, r3, #6
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d11c      	bne.n	8009f74 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009f3a:	897b      	ldrh	r3, [r7, #10]
 8009f3c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d13b      	bne.n	8009fc8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2208      	movs	r2, #8
 8009f5c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009f66:	89ba      	ldrh	r2, [r7, #12]
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f7ff faed 	bl	800954c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009f72:	e029      	b.n	8009fc8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009f74:	893b      	ldrh	r3, [r7, #8]
 8009f76:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009f78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f001 f84b 	bl	800b018 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009f8a:	89ba      	ldrh	r2, [r7, #12]
 8009f8c:	7bfb      	ldrb	r3, [r7, #15]
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7ff fadb 	bl	800954c <HAL_I2C_AddrCallback>
}
 8009f96:	e017      	b.n	8009fc8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009f98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f001 f83b 	bl	800b018 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009faa:	89ba      	ldrh	r2, [r7, #12]
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff facb 	bl	800954c <HAL_I2C_AddrCallback>
}
 8009fb6:	e007      	b.n	8009fc8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2208      	movs	r2, #8
 8009fbe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8009fc8:	bf00      	nop
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	2b21      	cmp	r3, #33	; 0x21
 8009fea:	d115      	bne.n	800a018 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2211      	movs	r2, #17
 8009ff8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a000:	2101      	movs	r1, #1
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f001 f808 	bl	800b018 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f7ff fa73 	bl	80094fc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a016:	e014      	b.n	800a042 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2220      	movs	r2, #32
 800a01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2212      	movs	r2, #18
 800a024:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a02c:	2102      	movs	r1, #2
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fff2 	bl	800b018 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f7ff fa67 	bl	8009510 <HAL_I2C_MasterRxCpltCallback>
}
 800a042:	bf00      	nop
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b084      	sub	sp, #16
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	0b9b      	lsrs	r3, r3, #14
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d008      	beq.n	800a080 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	e00d      	b.n	800a09c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	0bdb      	lsrs	r3, r3, #15
 800a084:	f003 0301 	and.w	r3, r3, #1
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d007      	beq.n	800a09c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a09a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	2b29      	cmp	r3, #41	; 0x29
 800a0a6:	d112      	bne.n	800a0ce <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2228      	movs	r2, #40	; 0x28
 800a0ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2221      	movs	r2, #33	; 0x21
 800a0b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 ffad 	bl	800b018 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7ff fa2c 	bl	8009524 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a0cc:	e017      	b.n	800a0fe <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0d8:	d111      	bne.n	800a0fe <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2228      	movs	r2, #40	; 0x28
 800a0de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2222      	movs	r2, #34	; 0x22
 800a0e6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a0e8:	2102      	movs	r1, #2
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 ff94 	bl	800b018 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7ff fa1d 	bl	8009538 <HAL_I2C_SlaveRxCpltCallback>
}
 800a0fe:	bf00      	nop
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
	...

0800a108 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2220      	movs	r2, #32
 800a11c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b21      	cmp	r3, #33	; 0x21
 800a128:	d107      	bne.n	800a13a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a12a:	2101      	movs	r1, #1
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 ff73 	bl	800b018 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2211      	movs	r2, #17
 800a136:	631a      	str	r2, [r3, #48]	; 0x30
 800a138:	e00c      	b.n	800a154 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a140:	b2db      	uxtb	r3, r3
 800a142:	2b22      	cmp	r3, #34	; 0x22
 800a144:	d106      	bne.n	800a154 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a146:	2102      	movs	r1, #2
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 ff65 	bl	800b018 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2212      	movs	r2, #18
 800a152:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6859      	ldr	r1, [r3, #4]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	4b4d      	ldr	r3, [pc, #308]	; (800a294 <I2C_ITMasterCplt+0x18c>)
 800a160:	400b      	ands	r3, r1
 800a162:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a4a      	ldr	r2, [pc, #296]	; (800a298 <I2C_ITMasterCplt+0x190>)
 800a16e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	091b      	lsrs	r3, r3, #4
 800a174:	f003 0301 	and.w	r3, r3, #1
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d009      	beq.n	800a190 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2210      	movs	r2, #16
 800a182:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a188:	f043 0204 	orr.w	r2, r3, #4
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b60      	cmp	r3, #96	; 0x60
 800a19a:	d10b      	bne.n	800a1b4 <I2C_ITMasterCplt+0xac>
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	089b      	lsrs	r3, r3, #2
 800a1a0:	f003 0301 	and.w	r3, r3, #1
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d005      	beq.n	800a1b4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fbb6 	bl	800a926 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1be:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b60      	cmp	r3, #96	; 0x60
 800a1ca:	d002      	beq.n	800a1d2 <I2C_ITMasterCplt+0xca>
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d006      	beq.n	800a1e0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 faad 	bl	800a738 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a1de:	e054      	b.n	800a28a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	2b21      	cmp	r3, #33	; 0x21
 800a1ea:	d124      	bne.n	800a236 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b40      	cmp	r3, #64	; 0x40
 800a204:	d10b      	bne.n	800a21e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f7ff f9b0 	bl	800957c <HAL_I2C_MemTxCpltCallback>
}
 800a21c:	e035      	b.n	800a28a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f7ff f964 	bl	80094fc <HAL_I2C_MasterTxCpltCallback>
}
 800a234:	e029      	b.n	800a28a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b22      	cmp	r3, #34	; 0x22
 800a240:	d123      	bne.n	800a28a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2220      	movs	r2, #32
 800a246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a256:	b2db      	uxtb	r3, r3
 800a258:	2b40      	cmp	r3, #64	; 0x40
 800a25a:	d10b      	bne.n	800a274 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7ff f98f 	bl	8009590 <HAL_I2C_MemRxCpltCallback>
}
 800a272:	e00a      	b.n	800a28a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f7ff f943 	bl	8009510 <HAL_I2C_MasterRxCpltCallback>
}
 800a28a:	bf00      	nop
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	fe00e800 	.word	0xfe00e800
 800a298:	ffff0000 	.word	0xffff0000

0800a29c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2b8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2220      	movs	r2, #32
 800a2c0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
 800a2c4:	2b21      	cmp	r3, #33	; 0x21
 800a2c6:	d002      	beq.n	800a2ce <I2C_ITSlaveCplt+0x32>
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ca:	2b29      	cmp	r3, #41	; 0x29
 800a2cc:	d108      	bne.n	800a2e0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a2ce:	f248 0101 	movw	r1, #32769	; 0x8001
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fea0 	bl	800b018 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2221      	movs	r2, #33	; 0x21
 800a2dc:	631a      	str	r2, [r3, #48]	; 0x30
 800a2de:	e00d      	b.n	800a2fc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
 800a2e2:	2b22      	cmp	r3, #34	; 0x22
 800a2e4:	d002      	beq.n	800a2ec <I2C_ITSlaveCplt+0x50>
 800a2e6:	7bfb      	ldrb	r3, [r7, #15]
 800a2e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a2ea:	d107      	bne.n	800a2fc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a2ec:	f248 0102 	movw	r1, #32770	; 0x8002
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 fe91 	bl	800b018 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2222      	movs	r2, #34	; 0x22
 800a2fa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a30a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6859      	ldr	r1, [r3, #4]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	4b80      	ldr	r3, [pc, #512]	; (800a518 <I2C_ITSlaveCplt+0x27c>)
 800a318:	400b      	ands	r3, r1
 800a31a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fb02 	bl	800a926 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	0b9b      	lsrs	r3, r3, #14
 800a326:	f003 0301 	and.w	r3, r3, #1
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d07a      	beq.n	800a424 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a33c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a342:	2b00      	cmp	r3, #0
 800a344:	f000 8111 	beq.w	800a56a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a73      	ldr	r2, [pc, #460]	; (800a51c <I2C_ITSlaveCplt+0x280>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d059      	beq.n	800a408 <I2C_ITSlaveCplt+0x16c>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a71      	ldr	r2, [pc, #452]	; (800a520 <I2C_ITSlaveCplt+0x284>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d053      	beq.n	800a408 <I2C_ITSlaveCplt+0x16c>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a6f      	ldr	r2, [pc, #444]	; (800a524 <I2C_ITSlaveCplt+0x288>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d04d      	beq.n	800a408 <I2C_ITSlaveCplt+0x16c>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a6d      	ldr	r2, [pc, #436]	; (800a528 <I2C_ITSlaveCplt+0x28c>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d047      	beq.n	800a408 <I2C_ITSlaveCplt+0x16c>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a6b      	ldr	r2, [pc, #428]	; (800a52c <I2C_ITSlaveCplt+0x290>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d041      	beq.n	800a408 <I2C_ITSlaveCplt+0x16c>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a69      	ldr	r2, [pc, #420]	; (800a530 <I2C_ITSlaveCplt+0x294>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d03b      	beq.n	800a408 <I2C_ITSlaveCplt+0x16c>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a67      	ldr	r2, [pc, #412]	; (800a534 <I2C_ITSlaveCplt+0x298>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d035      	beq.n	800a408 <I2C_ITSlaveCplt+0x16c>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a65      	ldr	r2, [pc, #404]	; (800a538 <I2C_ITSlaveCplt+0x29c>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d02f      	beq.n	800a408 <I2C_ITSlaveCplt+0x16c>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a63      	ldr	r2, [pc, #396]	; (800a53c <I2C_ITSlaveCplt+0x2a0>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d029      	beq.n	800a408 <I2C_ITSlaveCplt+0x16c>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a61      	ldr	r2, [pc, #388]	; (800a540 <I2C_ITSlaveCplt+0x2a4>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d023      	beq.n	800a408 <I2C_ITSlaveCplt+0x16c>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a5f      	ldr	r2, [pc, #380]	; (800a544 <I2C_ITSlaveCplt+0x2a8>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d01d      	beq.n	800a408 <I2C_ITSlaveCplt+0x16c>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a5d      	ldr	r2, [pc, #372]	; (800a548 <I2C_ITSlaveCplt+0x2ac>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d017      	beq.n	800a408 <I2C_ITSlaveCplt+0x16c>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a5b      	ldr	r2, [pc, #364]	; (800a54c <I2C_ITSlaveCplt+0x2b0>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d011      	beq.n	800a408 <I2C_ITSlaveCplt+0x16c>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a59      	ldr	r2, [pc, #356]	; (800a550 <I2C_ITSlaveCplt+0x2b4>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d00b      	beq.n	800a408 <I2C_ITSlaveCplt+0x16c>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a57      	ldr	r2, [pc, #348]	; (800a554 <I2C_ITSlaveCplt+0x2b8>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d005      	beq.n	800a408 <I2C_ITSlaveCplt+0x16c>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a55      	ldr	r2, [pc, #340]	; (800a558 <I2C_ITSlaveCplt+0x2bc>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d105      	bne.n	800a414 <I2C_ITSlaveCplt+0x178>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	b29b      	uxth	r3, r3
 800a412:	e004      	b.n	800a41e <I2C_ITSlaveCplt+0x182>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	8553      	strh	r3, [r2, #42]	; 0x2a
 800a422:	e0a2      	b.n	800a56a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	0bdb      	lsrs	r3, r3, #15
 800a428:	f003 0301 	and.w	r3, r3, #1
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f000 809c 	beq.w	800a56a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a440:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a446:	2b00      	cmp	r3, #0
 800a448:	f000 808f 	beq.w	800a56a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a32      	ldr	r2, [pc, #200]	; (800a51c <I2C_ITSlaveCplt+0x280>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d059      	beq.n	800a50c <I2C_ITSlaveCplt+0x270>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a30      	ldr	r2, [pc, #192]	; (800a520 <I2C_ITSlaveCplt+0x284>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d053      	beq.n	800a50c <I2C_ITSlaveCplt+0x270>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a2e      	ldr	r2, [pc, #184]	; (800a524 <I2C_ITSlaveCplt+0x288>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d04d      	beq.n	800a50c <I2C_ITSlaveCplt+0x270>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a2c      	ldr	r2, [pc, #176]	; (800a528 <I2C_ITSlaveCplt+0x28c>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d047      	beq.n	800a50c <I2C_ITSlaveCplt+0x270>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a2a      	ldr	r2, [pc, #168]	; (800a52c <I2C_ITSlaveCplt+0x290>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d041      	beq.n	800a50c <I2C_ITSlaveCplt+0x270>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a28      	ldr	r2, [pc, #160]	; (800a530 <I2C_ITSlaveCplt+0x294>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d03b      	beq.n	800a50c <I2C_ITSlaveCplt+0x270>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a26      	ldr	r2, [pc, #152]	; (800a534 <I2C_ITSlaveCplt+0x298>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d035      	beq.n	800a50c <I2C_ITSlaveCplt+0x270>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a24      	ldr	r2, [pc, #144]	; (800a538 <I2C_ITSlaveCplt+0x29c>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d02f      	beq.n	800a50c <I2C_ITSlaveCplt+0x270>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a22      	ldr	r2, [pc, #136]	; (800a53c <I2C_ITSlaveCplt+0x2a0>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d029      	beq.n	800a50c <I2C_ITSlaveCplt+0x270>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a20      	ldr	r2, [pc, #128]	; (800a540 <I2C_ITSlaveCplt+0x2a4>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d023      	beq.n	800a50c <I2C_ITSlaveCplt+0x270>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a1e      	ldr	r2, [pc, #120]	; (800a544 <I2C_ITSlaveCplt+0x2a8>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d01d      	beq.n	800a50c <I2C_ITSlaveCplt+0x270>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a1c      	ldr	r2, [pc, #112]	; (800a548 <I2C_ITSlaveCplt+0x2ac>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d017      	beq.n	800a50c <I2C_ITSlaveCplt+0x270>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a1a      	ldr	r2, [pc, #104]	; (800a54c <I2C_ITSlaveCplt+0x2b0>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d011      	beq.n	800a50c <I2C_ITSlaveCplt+0x270>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a18      	ldr	r2, [pc, #96]	; (800a550 <I2C_ITSlaveCplt+0x2b4>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d00b      	beq.n	800a50c <I2C_ITSlaveCplt+0x270>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a16      	ldr	r2, [pc, #88]	; (800a554 <I2C_ITSlaveCplt+0x2b8>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d005      	beq.n	800a50c <I2C_ITSlaveCplt+0x270>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a14      	ldr	r2, [pc, #80]	; (800a558 <I2C_ITSlaveCplt+0x2bc>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d127      	bne.n	800a55c <I2C_ITSlaveCplt+0x2c0>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	b29b      	uxth	r3, r3
 800a516:	e026      	b.n	800a566 <I2C_ITSlaveCplt+0x2ca>
 800a518:	fe00e800 	.word	0xfe00e800
 800a51c:	40020010 	.word	0x40020010
 800a520:	40020028 	.word	0x40020028
 800a524:	40020040 	.word	0x40020040
 800a528:	40020058 	.word	0x40020058
 800a52c:	40020070 	.word	0x40020070
 800a530:	40020088 	.word	0x40020088
 800a534:	400200a0 	.word	0x400200a0
 800a538:	400200b8 	.word	0x400200b8
 800a53c:	40020410 	.word	0x40020410
 800a540:	40020428 	.word	0x40020428
 800a544:	40020440 	.word	0x40020440
 800a548:	40020458 	.word	0x40020458
 800a54c:	40020470 	.word	0x40020470
 800a550:	40020488 	.word	0x40020488
 800a554:	400204a0 	.word	0x400204a0
 800a558:	400204b8 	.word	0x400204b8
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	b29b      	uxth	r3, r3
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	089b      	lsrs	r3, r3, #2
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	2b00      	cmp	r3, #0
 800a574:	d020      	beq.n	800a5b8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f023 0304 	bic.w	r3, r3, #4
 800a57c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a588:	b2d2      	uxtb	r2, r2
 800a58a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00c      	beq.n	800a5b8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d005      	beq.n	800a5ce <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5c6:	f043 0204 	orr.w	r2, r3, #4
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d010      	beq.n	800a606 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f8a4 	bl	800a738 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b28      	cmp	r3, #40	; 0x28
 800a5fa:	d141      	bne.n	800a680 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a5fc:	6979      	ldr	r1, [r7, #20]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f844 	bl	800a68c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a604:	e03c      	b.n	800a680 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a60e:	d014      	beq.n	800a63a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f7ff fd1a 	bl	800a04a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a1b      	ldr	r2, [pc, #108]	; (800a688 <I2C_ITSlaveCplt+0x3ec>)
 800a61a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2220      	movs	r2, #32
 800a620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7fe ff98 	bl	8009568 <HAL_I2C_ListenCpltCallback>
}
 800a638:	e022      	b.n	800a680 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a640:	b2db      	uxtb	r3, r3
 800a642:	2b22      	cmp	r3, #34	; 0x22
 800a644:	d10e      	bne.n	800a664 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2220      	movs	r2, #32
 800a64a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f7fe ff6b 	bl	8009538 <HAL_I2C_SlaveRxCpltCallback>
}
 800a662:	e00d      	b.n	800a680 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2220      	movs	r2, #32
 800a668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7fe ff52 	bl	8009524 <HAL_I2C_SlaveTxCpltCallback>
}
 800a680:	bf00      	nop
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	ffff0000 	.word	0xffff0000

0800a68c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a26      	ldr	r2, [pc, #152]	; (800a734 <I2C_ITListenCplt+0xa8>)
 800a69a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2220      	movs	r2, #32
 800a6a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	089b      	lsrs	r3, r3, #2
 800a6bc:	f003 0301 	and.w	r3, r3, #1
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d022      	beq.n	800a70a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	b2d2      	uxtb	r2, r2
 800a6d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	1c5a      	adds	r2, r3, #1
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d012      	beq.n	800a70a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a702:	f043 0204 	orr.w	r2, r3, #4
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a70a:	f248 0103 	movw	r1, #32771	; 0x8003
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fc82 	bl	800b018 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2210      	movs	r2, #16
 800a71a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7fe ff1f 	bl	8009568 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a72a:	bf00      	nop
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	ffff0000 	.word	0xffff0000

0800a738 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a748:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4a5d      	ldr	r2, [pc, #372]	; (800a8cc <I2C_ITError+0x194>)
 800a756:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	431a      	orrs	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a76a:	7bfb      	ldrb	r3, [r7, #15]
 800a76c:	2b28      	cmp	r3, #40	; 0x28
 800a76e:	d005      	beq.n	800a77c <I2C_ITError+0x44>
 800a770:	7bfb      	ldrb	r3, [r7, #15]
 800a772:	2b29      	cmp	r3, #41	; 0x29
 800a774:	d002      	beq.n	800a77c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a776:	7bfb      	ldrb	r3, [r7, #15]
 800a778:	2b2a      	cmp	r3, #42	; 0x2a
 800a77a:	d10b      	bne.n	800a794 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a77c:	2103      	movs	r1, #3
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fc4a 	bl	800b018 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2228      	movs	r2, #40	; 0x28
 800a788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a50      	ldr	r2, [pc, #320]	; (800a8d0 <I2C_ITError+0x198>)
 800a790:	635a      	str	r2, [r3, #52]	; 0x34
 800a792:	e011      	b.n	800a7b8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a794:	f248 0103 	movw	r1, #32771	; 0x8003
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fc3d 	bl	800b018 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	2b60      	cmp	r3, #96	; 0x60
 800a7a8:	d003      	beq.n	800a7b2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2220      	movs	r2, #32
 800a7ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7bc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d039      	beq.n	800a83a <I2C_ITError+0x102>
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2b11      	cmp	r3, #17
 800a7ca:	d002      	beq.n	800a7d2 <I2C_ITError+0x9a>
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2b21      	cmp	r3, #33	; 0x21
 800a7d0:	d133      	bne.n	800a83a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7e0:	d107      	bne.n	800a7f2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a7f0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fd fce4 	bl	80081c4 <HAL_DMA_GetState>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d017      	beq.n	800a832 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a806:	4a33      	ldr	r2, [pc, #204]	; (800a8d4 <I2C_ITError+0x19c>)
 800a808:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a816:	4618      	mov	r0, r3
 800a818:	f7fc fb66 	bl	8006ee8 <HAL_DMA_Abort_IT>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d04d      	beq.n	800a8be <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a82c:	4610      	mov	r0, r2
 800a82e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a830:	e045      	b.n	800a8be <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f850 	bl	800a8d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a838:	e041      	b.n	800a8be <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d039      	beq.n	800a8b6 <I2C_ITError+0x17e>
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	2b12      	cmp	r3, #18
 800a846:	d002      	beq.n	800a84e <I2C_ITError+0x116>
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	2b22      	cmp	r3, #34	; 0x22
 800a84c:	d133      	bne.n	800a8b6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a85c:	d107      	bne.n	800a86e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a86c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a872:	4618      	mov	r0, r3
 800a874:	f7fd fca6 	bl	80081c4 <HAL_DMA_GetState>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d017      	beq.n	800a8ae <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a882:	4a14      	ldr	r2, [pc, #80]	; (800a8d4 <I2C_ITError+0x19c>)
 800a884:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a892:	4618      	mov	r0, r3
 800a894:	f7fc fb28 	bl	8006ee8 <HAL_DMA_Abort_IT>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d011      	beq.n	800a8c2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a8ac:	e009      	b.n	800a8c2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f812 	bl	800a8d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a8b4:	e005      	b.n	800a8c2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f80e 	bl	800a8d8 <I2C_TreatErrorCallback>
  }
}
 800a8bc:	e002      	b.n	800a8c4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a8be:	bf00      	nop
 800a8c0:	e000      	b.n	800a8c4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a8c2:	bf00      	nop
}
 800a8c4:	bf00      	nop
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	ffff0000 	.word	0xffff0000
 800a8d0:	080095cd 	.word	0x080095cd
 800a8d4:	0800ac75 	.word	0x0800ac75

0800a8d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	2b60      	cmp	r3, #96	; 0x60
 800a8ea:	d10e      	bne.n	800a90a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2220      	movs	r2, #32
 800a8f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f7fe fe58 	bl	80095b8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a908:	e009      	b.n	800a91e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7fe fe43 	bl	80095a4 <HAL_I2C_ErrorCallback>
}
 800a91e:	bf00      	nop
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a926:	b480      	push	{r7}
 800a928:	b083      	sub	sp, #12
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	699b      	ldr	r3, [r3, #24]
 800a934:	f003 0302 	and.w	r3, r3, #2
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d103      	bne.n	800a944 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2200      	movs	r2, #0
 800a942:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	699b      	ldr	r3, [r3, #24]
 800a94a:	f003 0301 	and.w	r3, r3, #1
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d007      	beq.n	800a962 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	699a      	ldr	r2, [r3, #24]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f042 0201 	orr.w	r2, r2, #1
 800a960:	619a      	str	r2, [r3, #24]
  }
}
 800a962:	bf00      	nop
 800a964:	370c      	adds	r7, #12
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b084      	sub	sp, #16
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a98a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a990:	b29b      	uxth	r3, r3
 800a992:	2b00      	cmp	r3, #0
 800a994:	d104      	bne.n	800a9a0 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a996:	2120      	movs	r1, #32
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f000 fad9 	bl	800af50 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a99e:	e02d      	b.n	800a9fc <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a9a8:	441a      	add	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	2bff      	cmp	r3, #255	; 0xff
 800a9b6:	d903      	bls.n	800a9c0 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	22ff      	movs	r2, #255	; 0xff
 800a9bc:	851a      	strh	r2, [r3, #40]	; 0x28
 800a9be:	e004      	b.n	800a9ca <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	3324      	adds	r3, #36	; 0x24
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9da:	461a      	mov	r2, r3
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9e0:	f7fb fcfa 	bl	80063d8 <HAL_DMA_Start_IT>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d004      	beq.n	800a9f4 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a9ea:	2110      	movs	r1, #16
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f7ff fea3 	bl	800a738 <I2C_ITError>
}
 800a9f2:	e003      	b.n	800a9fc <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a9f4:	2140      	movs	r1, #64	; 0x40
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f000 faaa 	bl	800af50 <I2C_Enable_IRQ>
}
 800a9fc:	bf00      	nop
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa14:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d076      	beq.n	800ab0c <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a83      	ldr	r2, [pc, #524]	; (800ac34 <I2C_DMAError+0x230>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d059      	beq.n	800aade <I2C_DMAError+0xda>
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a81      	ldr	r2, [pc, #516]	; (800ac38 <I2C_DMAError+0x234>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d053      	beq.n	800aade <I2C_DMAError+0xda>
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a7f      	ldr	r2, [pc, #508]	; (800ac3c <I2C_DMAError+0x238>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d04d      	beq.n	800aade <I2C_DMAError+0xda>
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a7d      	ldr	r2, [pc, #500]	; (800ac40 <I2C_DMAError+0x23c>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d047      	beq.n	800aade <I2C_DMAError+0xda>
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a7b      	ldr	r2, [pc, #492]	; (800ac44 <I2C_DMAError+0x240>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d041      	beq.n	800aade <I2C_DMAError+0xda>
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a79      	ldr	r2, [pc, #484]	; (800ac48 <I2C_DMAError+0x244>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d03b      	beq.n	800aade <I2C_DMAError+0xda>
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a77      	ldr	r2, [pc, #476]	; (800ac4c <I2C_DMAError+0x248>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d035      	beq.n	800aade <I2C_DMAError+0xda>
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a75      	ldr	r2, [pc, #468]	; (800ac50 <I2C_DMAError+0x24c>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d02f      	beq.n	800aade <I2C_DMAError+0xda>
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a73      	ldr	r2, [pc, #460]	; (800ac54 <I2C_DMAError+0x250>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d029      	beq.n	800aade <I2C_DMAError+0xda>
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a71      	ldr	r2, [pc, #452]	; (800ac58 <I2C_DMAError+0x254>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d023      	beq.n	800aade <I2C_DMAError+0xda>
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a6f      	ldr	r2, [pc, #444]	; (800ac5c <I2C_DMAError+0x258>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d01d      	beq.n	800aade <I2C_DMAError+0xda>
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a6d      	ldr	r2, [pc, #436]	; (800ac60 <I2C_DMAError+0x25c>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d017      	beq.n	800aade <I2C_DMAError+0xda>
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a6b      	ldr	r2, [pc, #428]	; (800ac64 <I2C_DMAError+0x260>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d011      	beq.n	800aade <I2C_DMAError+0xda>
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a69      	ldr	r2, [pc, #420]	; (800ac68 <I2C_DMAError+0x264>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d00b      	beq.n	800aade <I2C_DMAError+0xda>
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a67      	ldr	r2, [pc, #412]	; (800ac6c <I2C_DMAError+0x268>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d005      	beq.n	800aade <I2C_DMAError+0xda>
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a65      	ldr	r2, [pc, #404]	; (800ac70 <I2C_DMAError+0x26c>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d109      	bne.n	800aaf2 <I2C_DMAError+0xee>
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	bf0c      	ite	eq
 800aaea:	2301      	moveq	r3, #1
 800aaec:	2300      	movne	r3, #0
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	e008      	b.n	800ab04 <I2C_DMAError+0x100>
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	bf0c      	ite	eq
 800aafe:	2301      	moveq	r3, #1
 800ab00:	2300      	movne	r3, #0
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d001      	beq.n	800ab0c <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d076      	beq.n	800ac02 <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a46      	ldr	r2, [pc, #280]	; (800ac34 <I2C_DMAError+0x230>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d059      	beq.n	800abd4 <I2C_DMAError+0x1d0>
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a44      	ldr	r2, [pc, #272]	; (800ac38 <I2C_DMAError+0x234>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d053      	beq.n	800abd4 <I2C_DMAError+0x1d0>
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a42      	ldr	r2, [pc, #264]	; (800ac3c <I2C_DMAError+0x238>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d04d      	beq.n	800abd4 <I2C_DMAError+0x1d0>
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a40      	ldr	r2, [pc, #256]	; (800ac40 <I2C_DMAError+0x23c>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d047      	beq.n	800abd4 <I2C_DMAError+0x1d0>
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a3e      	ldr	r2, [pc, #248]	; (800ac44 <I2C_DMAError+0x240>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d041      	beq.n	800abd4 <I2C_DMAError+0x1d0>
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a3c      	ldr	r2, [pc, #240]	; (800ac48 <I2C_DMAError+0x244>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d03b      	beq.n	800abd4 <I2C_DMAError+0x1d0>
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a3a      	ldr	r2, [pc, #232]	; (800ac4c <I2C_DMAError+0x248>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d035      	beq.n	800abd4 <I2C_DMAError+0x1d0>
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a38      	ldr	r2, [pc, #224]	; (800ac50 <I2C_DMAError+0x24c>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d02f      	beq.n	800abd4 <I2C_DMAError+0x1d0>
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a36      	ldr	r2, [pc, #216]	; (800ac54 <I2C_DMAError+0x250>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d029      	beq.n	800abd4 <I2C_DMAError+0x1d0>
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a34      	ldr	r2, [pc, #208]	; (800ac58 <I2C_DMAError+0x254>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d023      	beq.n	800abd4 <I2C_DMAError+0x1d0>
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a32      	ldr	r2, [pc, #200]	; (800ac5c <I2C_DMAError+0x258>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d01d      	beq.n	800abd4 <I2C_DMAError+0x1d0>
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a30      	ldr	r2, [pc, #192]	; (800ac60 <I2C_DMAError+0x25c>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d017      	beq.n	800abd4 <I2C_DMAError+0x1d0>
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a2e      	ldr	r2, [pc, #184]	; (800ac64 <I2C_DMAError+0x260>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d011      	beq.n	800abd4 <I2C_DMAError+0x1d0>
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a2c      	ldr	r2, [pc, #176]	; (800ac68 <I2C_DMAError+0x264>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d00b      	beq.n	800abd4 <I2C_DMAError+0x1d0>
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a2a      	ldr	r2, [pc, #168]	; (800ac6c <I2C_DMAError+0x268>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d005      	beq.n	800abd4 <I2C_DMAError+0x1d0>
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a28      	ldr	r2, [pc, #160]	; (800ac70 <I2C_DMAError+0x26c>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d109      	bne.n	800abe8 <I2C_DMAError+0x1e4>
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	bf0c      	ite	eq
 800abe0:	2301      	moveq	r3, #1
 800abe2:	2300      	movne	r3, #0
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	e008      	b.n	800abfa <I2C_DMAError+0x1f6>
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	bf0c      	ite	eq
 800abf4:	2301      	moveq	r3, #1
 800abf6:	2300      	movne	r3, #0
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d001      	beq.n	800ac02 <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 800abfe:	2301      	movs	r3, #1
 800ac00:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f7fd faec 	bl	80081e0 <HAL_DMA_GetError>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d00e      	beq.n	800ac2c <I2C_DMAError+0x228>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d00b      	beq.n	800ac2c <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac22:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ac24:	2110      	movs	r1, #16
 800ac26:	68b8      	ldr	r0, [r7, #8]
 800ac28:	f7ff fd86 	bl	800a738 <I2C_ITError>
  }
}
 800ac2c:	bf00      	nop
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	40020010 	.word	0x40020010
 800ac38:	40020028 	.word	0x40020028
 800ac3c:	40020040 	.word	0x40020040
 800ac40:	40020058 	.word	0x40020058
 800ac44:	40020070 	.word	0x40020070
 800ac48:	40020088 	.word	0x40020088
 800ac4c:	400200a0 	.word	0x400200a0
 800ac50:	400200b8 	.word	0x400200b8
 800ac54:	40020410 	.word	0x40020410
 800ac58:	40020428 	.word	0x40020428
 800ac5c:	40020440 	.word	0x40020440
 800ac60:	40020458 	.word	0x40020458
 800ac64:	40020470 	.word	0x40020470
 800ac68:	40020488 	.word	0x40020488
 800ac6c:	400204a0 	.word	0x400204a0
 800ac70:	400204b8 	.word	0x400204b8

0800ac74 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac80:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d003      	beq.n	800ac92 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8e:	2200      	movs	r2, #0
 800ac90:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac9e:	2200      	movs	r2, #0
 800aca0:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	f7ff fe18 	bl	800a8d8 <I2C_TreatErrorCallback>
}
 800aca8:	bf00      	nop
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	603b      	str	r3, [r7, #0]
 800acbc:	4613      	mov	r3, r2
 800acbe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800acc0:	e022      	b.n	800ad08 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc8:	d01e      	beq.n	800ad08 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acca:	f7fa fedd 	bl	8005a88 <HAL_GetTick>
 800acce:	4602      	mov	r2, r0
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	1ad3      	subs	r3, r2, r3
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d302      	bcc.n	800ace0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d113      	bne.n	800ad08 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ace4:	f043 0220 	orr.w	r2, r3, #32
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2220      	movs	r2, #32
 800acf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	e00f      	b.n	800ad28 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	699a      	ldr	r2, [r3, #24]
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	4013      	ands	r3, r2
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	bf0c      	ite	eq
 800ad18:	2301      	moveq	r3, #1
 800ad1a:	2300      	movne	r3, #0
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	461a      	mov	r2, r3
 800ad20:	79fb      	ldrb	r3, [r7, #7]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d0cd      	beq.n	800acc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ad3c:	e02c      	b.n	800ad98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	68b9      	ldr	r1, [r7, #8]
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f000 f870 	bl	800ae28 <I2C_IsAcknowledgeFailed>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e02a      	b.n	800ada8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad58:	d01e      	beq.n	800ad98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad5a:	f7fa fe95 	bl	8005a88 <HAL_GetTick>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	1ad3      	subs	r3, r2, r3
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d302      	bcc.n	800ad70 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d113      	bne.n	800ad98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad74:	f043 0220 	orr.w	r2, r3, #32
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2220      	movs	r2, #32
 800ad80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	e007      	b.n	800ada8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	699b      	ldr	r3, [r3, #24]
 800ad9e:	f003 0302 	and.w	r3, r3, #2
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d1cb      	bne.n	800ad3e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800adbc:	e028      	b.n	800ae10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	68b9      	ldr	r1, [r7, #8]
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f000 f830 	bl	800ae28 <I2C_IsAcknowledgeFailed>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e026      	b.n	800ae20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800add2:	f7fa fe59 	bl	8005a88 <HAL_GetTick>
 800add6:	4602      	mov	r2, r0
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d302      	bcc.n	800ade8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d113      	bne.n	800ae10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adec:	f043 0220 	orr.w	r2, r3, #32
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2220      	movs	r2, #32
 800adf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e007      	b.n	800ae20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	f003 0320 	and.w	r3, r3, #32
 800ae1a:	2b20      	cmp	r3, #32
 800ae1c:	d1cf      	bne.n	800adbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	f003 0310 	and.w	r3, r3, #16
 800ae3e:	2b10      	cmp	r3, #16
 800ae40:	d151      	bne.n	800aee6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae42:	e022      	b.n	800ae8a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae4a:	d01e      	beq.n	800ae8a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae4c:	f7fa fe1c 	bl	8005a88 <HAL_GetTick>
 800ae50:	4602      	mov	r2, r0
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d302      	bcc.n	800ae62 <I2C_IsAcknowledgeFailed+0x3a>
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d113      	bne.n	800ae8a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae66:	f043 0220 	orr.w	r2, r3, #32
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2220      	movs	r2, #32
 800ae72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e02e      	b.n	800aee8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	f003 0320 	and.w	r3, r3, #32
 800ae94:	2b20      	cmp	r3, #32
 800ae96:	d1d5      	bne.n	800ae44 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2210      	movs	r2, #16
 800ae9e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2220      	movs	r2, #32
 800aea6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f7ff fd3c 	bl	800a926 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	6859      	ldr	r1, [r3, #4]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	4b0d      	ldr	r3, [pc, #52]	; (800aef0 <I2C_IsAcknowledgeFailed+0xc8>)
 800aeba:	400b      	ands	r3, r1
 800aebc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aec2:	f043 0204 	orr.w	r2, r3, #4
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2220      	movs	r2, #32
 800aece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	e000      	b.n	800aee8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	fe00e800 	.word	0xfe00e800

0800aef4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	607b      	str	r3, [r7, #4]
 800aefe:	460b      	mov	r3, r1
 800af00:	817b      	strh	r3, [r7, #10]
 800af02:	4613      	mov	r3, r2
 800af04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	0d5b      	lsrs	r3, r3, #21
 800af10:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800af14:	4b0d      	ldr	r3, [pc, #52]	; (800af4c <I2C_TransferConfig+0x58>)
 800af16:	430b      	orrs	r3, r1
 800af18:	43db      	mvns	r3, r3
 800af1a:	ea02 0103 	and.w	r1, r2, r3
 800af1e:	897b      	ldrh	r3, [r7, #10]
 800af20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800af24:	7a7b      	ldrb	r3, [r7, #9]
 800af26:	041b      	lsls	r3, r3, #16
 800af28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af2c:	431a      	orrs	r2, r3
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	431a      	orrs	r2, r3
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	431a      	orrs	r2, r3
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	430a      	orrs	r2, r1
 800af3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800af3e:	bf00      	nop
 800af40:	3714      	adds	r7, #20
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	03ff63ff 	.word	0x03ff63ff

0800af50 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	460b      	mov	r3, r1
 800af5a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800af5c:	2300      	movs	r3, #0
 800af5e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af64:	4a2a      	ldr	r2, [pc, #168]	; (800b010 <I2C_Enable_IRQ+0xc0>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d004      	beq.n	800af74 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800af6e:	4a29      	ldr	r2, [pc, #164]	; (800b014 <I2C_Enable_IRQ+0xc4>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d11d      	bne.n	800afb0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800af74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	da03      	bge.n	800af84 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800af82:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800af84:	887b      	ldrh	r3, [r7, #2]
 800af86:	2b10      	cmp	r3, #16
 800af88:	d103      	bne.n	800af92 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800af90:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800af92:	887b      	ldrh	r3, [r7, #2]
 800af94:	2b20      	cmp	r3, #32
 800af96:	d103      	bne.n	800afa0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800af9e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800afa0:	887b      	ldrh	r3, [r7, #2]
 800afa2:	2b40      	cmp	r3, #64	; 0x40
 800afa4:	d125      	bne.n	800aff2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afac:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800afae:	e020      	b.n	800aff2 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800afb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	da03      	bge.n	800afc0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800afbe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800afc0:	887b      	ldrh	r3, [r7, #2]
 800afc2:	f003 0301 	and.w	r3, r3, #1
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d003      	beq.n	800afd2 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800afd0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800afd2:	887b      	ldrh	r3, [r7, #2]
 800afd4:	f003 0302 	and.w	r3, r3, #2
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d003      	beq.n	800afe4 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800afe2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800afe4:	887b      	ldrh	r3, [r7, #2]
 800afe6:	2b20      	cmp	r3, #32
 800afe8:	d103      	bne.n	800aff2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f043 0320 	orr.w	r3, r3, #32
 800aff0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6819      	ldr	r1, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	430a      	orrs	r2, r1
 800b000:	601a      	str	r2, [r3, #0]
}
 800b002:	bf00      	nop
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	080097d3 	.word	0x080097d3
 800b014:	080099b9 	.word	0x080099b9

0800b018 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	460b      	mov	r3, r1
 800b022:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b024:	2300      	movs	r3, #0
 800b026:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b028:	887b      	ldrh	r3, [r7, #2]
 800b02a:	f003 0301 	and.w	r3, r3, #1
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00f      	beq.n	800b052 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800b038:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b040:	b2db      	uxtb	r3, r3
 800b042:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b046:	2b28      	cmp	r3, #40	; 0x28
 800b048:	d003      	beq.n	800b052 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b050:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b052:	887b      	ldrh	r3, [r7, #2]
 800b054:	f003 0302 	and.w	r3, r3, #2
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00f      	beq.n	800b07c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800b062:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b070:	2b28      	cmp	r3, #40	; 0x28
 800b072:	d003      	beq.n	800b07c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b07a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b07c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b080:	2b00      	cmp	r3, #0
 800b082:	da03      	bge.n	800b08c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b08a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b08c:	887b      	ldrh	r3, [r7, #2]
 800b08e:	2b10      	cmp	r3, #16
 800b090:	d103      	bne.n	800b09a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b098:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b09a:	887b      	ldrh	r3, [r7, #2]
 800b09c:	2b20      	cmp	r3, #32
 800b09e:	d103      	bne.n	800b0a8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f043 0320 	orr.w	r3, r3, #32
 800b0a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b0a8:	887b      	ldrh	r3, [r7, #2]
 800b0aa:	2b40      	cmp	r3, #64	; 0x40
 800b0ac:	d103      	bne.n	800b0b6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0b4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	6819      	ldr	r1, [r3, #0]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	43da      	mvns	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	400a      	ands	r2, r1
 800b0c6:	601a      	str	r2, [r3, #0]
}
 800b0c8:	bf00      	nop
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b20      	cmp	r3, #32
 800b0e8:	d138      	bne.n	800b15c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d101      	bne.n	800b0f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	e032      	b.n	800b15e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2224      	movs	r2, #36	; 0x24
 800b104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f022 0201 	bic.w	r2, r2, #1
 800b116:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b126:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	6819      	ldr	r1, [r3, #0]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	683a      	ldr	r2, [r7, #0]
 800b134:	430a      	orrs	r2, r1
 800b136:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f042 0201 	orr.w	r2, r2, #1
 800b146:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2220      	movs	r2, #32
 800b14c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b158:	2300      	movs	r3, #0
 800b15a:	e000      	b.n	800b15e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b15c:	2302      	movs	r3, #2
  }
}
 800b15e:	4618      	mov	r0, r3
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b16a:	b480      	push	{r7}
 800b16c:	b085      	sub	sp, #20
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b20      	cmp	r3, #32
 800b17e:	d139      	bne.n	800b1f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b186:	2b01      	cmp	r3, #1
 800b188:	d101      	bne.n	800b18e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b18a:	2302      	movs	r3, #2
 800b18c:	e033      	b.n	800b1f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2201      	movs	r2, #1
 800b192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2224      	movs	r2, #36	; 0x24
 800b19a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f022 0201 	bic.w	r2, r2, #1
 800b1ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b1bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	021b      	lsls	r3, r3, #8
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f042 0201 	orr.w	r2, r2, #1
 800b1de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2220      	movs	r2, #32
 800b1e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	e000      	b.n	800b1f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b1f4:	2302      	movs	r3, #2
  }
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
	...

0800b204 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b20c:	4b19      	ldr	r3, [pc, #100]	; (800b274 <HAL_PWREx_ConfigSupply+0x70>)
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	f003 0304 	and.w	r3, r3, #4
 800b214:	2b04      	cmp	r3, #4
 800b216:	d00a      	beq.n	800b22e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b218:	4b16      	ldr	r3, [pc, #88]	; (800b274 <HAL_PWREx_ConfigSupply+0x70>)
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	f003 0307 	and.w	r3, r3, #7
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	429a      	cmp	r2, r3
 800b224:	d001      	beq.n	800b22a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	e01f      	b.n	800b26a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b22a:	2300      	movs	r3, #0
 800b22c:	e01d      	b.n	800b26a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b22e:	4b11      	ldr	r3, [pc, #68]	; (800b274 <HAL_PWREx_ConfigSupply+0x70>)
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	f023 0207 	bic.w	r2, r3, #7
 800b236:	490f      	ldr	r1, [pc, #60]	; (800b274 <HAL_PWREx_ConfigSupply+0x70>)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4313      	orrs	r3, r2
 800b23c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b23e:	f7fa fc23 	bl	8005a88 <HAL_GetTick>
 800b242:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b244:	e009      	b.n	800b25a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b246:	f7fa fc1f 	bl	8005a88 <HAL_GetTick>
 800b24a:	4602      	mov	r2, r0
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b254:	d901      	bls.n	800b25a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e007      	b.n	800b26a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b25a:	4b06      	ldr	r3, [pc, #24]	; (800b274 <HAL_PWREx_ConfigSupply+0x70>)
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b266:	d1ee      	bne.n	800b246 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	58024800 	.word	0x58024800

0800b278 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b08c      	sub	sp, #48	; 0x30
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d101      	bne.n	800b28a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e3ff      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f003 0301 	and.w	r3, r3, #1
 800b292:	2b00      	cmp	r3, #0
 800b294:	f000 8087 	beq.w	800b3a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b298:	4b99      	ldr	r3, [pc, #612]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b29a:	691b      	ldr	r3, [r3, #16]
 800b29c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b2a2:	4b97      	ldr	r3, [pc, #604]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2aa:	2b10      	cmp	r3, #16
 800b2ac:	d007      	beq.n	800b2be <HAL_RCC_OscConfig+0x46>
 800b2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b0:	2b18      	cmp	r3, #24
 800b2b2:	d110      	bne.n	800b2d6 <HAL_RCC_OscConfig+0x5e>
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	f003 0303 	and.w	r3, r3, #3
 800b2ba:	2b02      	cmp	r3, #2
 800b2bc:	d10b      	bne.n	800b2d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b2be:	4b90      	ldr	r3, [pc, #576]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d06c      	beq.n	800b3a4 <HAL_RCC_OscConfig+0x12c>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d168      	bne.n	800b3a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e3d9      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2de:	d106      	bne.n	800b2ee <HAL_RCC_OscConfig+0x76>
 800b2e0:	4b87      	ldr	r3, [pc, #540]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a86      	ldr	r2, [pc, #536]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b2e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2ea:	6013      	str	r3, [r2, #0]
 800b2ec:	e02e      	b.n	800b34c <HAL_RCC_OscConfig+0xd4>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10c      	bne.n	800b310 <HAL_RCC_OscConfig+0x98>
 800b2f6:	4b82      	ldr	r3, [pc, #520]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a81      	ldr	r2, [pc, #516]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b2fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b300:	6013      	str	r3, [r2, #0]
 800b302:	4b7f      	ldr	r3, [pc, #508]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a7e      	ldr	r2, [pc, #504]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b30c:	6013      	str	r3, [r2, #0]
 800b30e:	e01d      	b.n	800b34c <HAL_RCC_OscConfig+0xd4>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b318:	d10c      	bne.n	800b334 <HAL_RCC_OscConfig+0xbc>
 800b31a:	4b79      	ldr	r3, [pc, #484]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a78      	ldr	r2, [pc, #480]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	4b76      	ldr	r3, [pc, #472]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a75      	ldr	r2, [pc, #468]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b32c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b330:	6013      	str	r3, [r2, #0]
 800b332:	e00b      	b.n	800b34c <HAL_RCC_OscConfig+0xd4>
 800b334:	4b72      	ldr	r3, [pc, #456]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a71      	ldr	r2, [pc, #452]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b33a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b33e:	6013      	str	r3, [r2, #0]
 800b340:	4b6f      	ldr	r3, [pc, #444]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a6e      	ldr	r2, [pc, #440]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b34a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d013      	beq.n	800b37c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b354:	f7fa fb98 	bl	8005a88 <HAL_GetTick>
 800b358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b35a:	e008      	b.n	800b36e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b35c:	f7fa fb94 	bl	8005a88 <HAL_GetTick>
 800b360:	4602      	mov	r2, r0
 800b362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	2b64      	cmp	r3, #100	; 0x64
 800b368:	d901      	bls.n	800b36e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b36a:	2303      	movs	r3, #3
 800b36c:	e38d      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b36e:	4b64      	ldr	r3, [pc, #400]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b376:	2b00      	cmp	r3, #0
 800b378:	d0f0      	beq.n	800b35c <HAL_RCC_OscConfig+0xe4>
 800b37a:	e014      	b.n	800b3a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b37c:	f7fa fb84 	bl	8005a88 <HAL_GetTick>
 800b380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b382:	e008      	b.n	800b396 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b384:	f7fa fb80 	bl	8005a88 <HAL_GetTick>
 800b388:	4602      	mov	r2, r0
 800b38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38c:	1ad3      	subs	r3, r2, r3
 800b38e:	2b64      	cmp	r3, #100	; 0x64
 800b390:	d901      	bls.n	800b396 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b392:	2303      	movs	r3, #3
 800b394:	e379      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b396:	4b5a      	ldr	r3, [pc, #360]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1f0      	bne.n	800b384 <HAL_RCC_OscConfig+0x10c>
 800b3a2:	e000      	b.n	800b3a6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f003 0302 	and.w	r3, r3, #2
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f000 80ae 	beq.w	800b510 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b3b4:	4b52      	ldr	r3, [pc, #328]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b3be:	4b50      	ldr	r3, [pc, #320]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b3c4:	6a3b      	ldr	r3, [r7, #32]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d007      	beq.n	800b3da <HAL_RCC_OscConfig+0x162>
 800b3ca:	6a3b      	ldr	r3, [r7, #32]
 800b3cc:	2b18      	cmp	r3, #24
 800b3ce:	d13a      	bne.n	800b446 <HAL_RCC_OscConfig+0x1ce>
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	f003 0303 	and.w	r3, r3, #3
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d135      	bne.n	800b446 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b3da:	4b49      	ldr	r3, [pc, #292]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f003 0304 	and.w	r3, r3, #4
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d005      	beq.n	800b3f2 <HAL_RCC_OscConfig+0x17a>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d101      	bne.n	800b3f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e34b      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b3f2:	f7fa fb79 	bl	8005ae8 <HAL_GetREVID>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	f241 0203 	movw	r2, #4099	; 0x1003
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d817      	bhi.n	800b430 <HAL_RCC_OscConfig+0x1b8>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	2b40      	cmp	r3, #64	; 0x40
 800b406:	d108      	bne.n	800b41a <HAL_RCC_OscConfig+0x1a2>
 800b408:	4b3d      	ldr	r3, [pc, #244]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b410:	4a3b      	ldr	r2, [pc, #236]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b416:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b418:	e07a      	b.n	800b510 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b41a:	4b39      	ldr	r3, [pc, #228]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	031b      	lsls	r3, r3, #12
 800b428:	4935      	ldr	r1, [pc, #212]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b42a:	4313      	orrs	r3, r2
 800b42c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b42e:	e06f      	b.n	800b510 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b430:	4b33      	ldr	r3, [pc, #204]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	691b      	ldr	r3, [r3, #16]
 800b43c:	061b      	lsls	r3, r3, #24
 800b43e:	4930      	ldr	r1, [pc, #192]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b440:	4313      	orrs	r3, r2
 800b442:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b444:	e064      	b.n	800b510 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d045      	beq.n	800b4da <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b44e:	4b2c      	ldr	r3, [pc, #176]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f023 0219 	bic.w	r2, r3, #25
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	4929      	ldr	r1, [pc, #164]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b45c:	4313      	orrs	r3, r2
 800b45e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b460:	f7fa fb12 	bl	8005a88 <HAL_GetTick>
 800b464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b466:	e008      	b.n	800b47a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b468:	f7fa fb0e 	bl	8005a88 <HAL_GetTick>
 800b46c:	4602      	mov	r2, r0
 800b46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b470:	1ad3      	subs	r3, r2, r3
 800b472:	2b02      	cmp	r3, #2
 800b474:	d901      	bls.n	800b47a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800b476:	2303      	movs	r3, #3
 800b478:	e307      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b47a:	4b21      	ldr	r3, [pc, #132]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 0304 	and.w	r3, r3, #4
 800b482:	2b00      	cmp	r3, #0
 800b484:	d0f0      	beq.n	800b468 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b486:	f7fa fb2f 	bl	8005ae8 <HAL_GetREVID>
 800b48a:	4603      	mov	r3, r0
 800b48c:	f241 0203 	movw	r2, #4099	; 0x1003
 800b490:	4293      	cmp	r3, r2
 800b492:	d817      	bhi.n	800b4c4 <HAL_RCC_OscConfig+0x24c>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	691b      	ldr	r3, [r3, #16]
 800b498:	2b40      	cmp	r3, #64	; 0x40
 800b49a:	d108      	bne.n	800b4ae <HAL_RCC_OscConfig+0x236>
 800b49c:	4b18      	ldr	r3, [pc, #96]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b4a4:	4a16      	ldr	r2, [pc, #88]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b4a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4aa:	6053      	str	r3, [r2, #4]
 800b4ac:	e030      	b.n	800b510 <HAL_RCC_OscConfig+0x298>
 800b4ae:	4b14      	ldr	r3, [pc, #80]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	031b      	lsls	r3, r3, #12
 800b4bc:	4910      	ldr	r1, [pc, #64]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	604b      	str	r3, [r1, #4]
 800b4c2:	e025      	b.n	800b510 <HAL_RCC_OscConfig+0x298>
 800b4c4:	4b0e      	ldr	r3, [pc, #56]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	061b      	lsls	r3, r3, #24
 800b4d2:	490b      	ldr	r1, [pc, #44]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	604b      	str	r3, [r1, #4]
 800b4d8:	e01a      	b.n	800b510 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b4da:	4b09      	ldr	r3, [pc, #36]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a08      	ldr	r2, [pc, #32]	; (800b500 <HAL_RCC_OscConfig+0x288>)
 800b4e0:	f023 0301 	bic.w	r3, r3, #1
 800b4e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4e6:	f7fa facf 	bl	8005a88 <HAL_GetTick>
 800b4ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b4ec:	e00a      	b.n	800b504 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b4ee:	f7fa facb 	bl	8005a88 <HAL_GetTick>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f6:	1ad3      	subs	r3, r2, r3
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	d903      	bls.n	800b504 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e2c4      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
 800b500:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b504:	4ba4      	ldr	r3, [pc, #656]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f003 0304 	and.w	r3, r3, #4
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1ee      	bne.n	800b4ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f003 0310 	and.w	r3, r3, #16
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f000 80a9 	beq.w	800b670 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b51e:	4b9e      	ldr	r3, [pc, #632]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b520:	691b      	ldr	r3, [r3, #16]
 800b522:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b526:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b528:	4b9b      	ldr	r3, [pc, #620]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b52c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	2b08      	cmp	r3, #8
 800b532:	d007      	beq.n	800b544 <HAL_RCC_OscConfig+0x2cc>
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	2b18      	cmp	r3, #24
 800b538:	d13a      	bne.n	800b5b0 <HAL_RCC_OscConfig+0x338>
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	f003 0303 	and.w	r3, r3, #3
 800b540:	2b01      	cmp	r3, #1
 800b542:	d135      	bne.n	800b5b0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b544:	4b94      	ldr	r3, [pc, #592]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d005      	beq.n	800b55c <HAL_RCC_OscConfig+0x2e4>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	69db      	ldr	r3, [r3, #28]
 800b554:	2b80      	cmp	r3, #128	; 0x80
 800b556:	d001      	beq.n	800b55c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	e296      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b55c:	f7fa fac4 	bl	8005ae8 <HAL_GetREVID>
 800b560:	4603      	mov	r3, r0
 800b562:	f241 0203 	movw	r2, #4099	; 0x1003
 800b566:	4293      	cmp	r3, r2
 800b568:	d817      	bhi.n	800b59a <HAL_RCC_OscConfig+0x322>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a1b      	ldr	r3, [r3, #32]
 800b56e:	2b20      	cmp	r3, #32
 800b570:	d108      	bne.n	800b584 <HAL_RCC_OscConfig+0x30c>
 800b572:	4b89      	ldr	r3, [pc, #548]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b57a:	4a87      	ldr	r2, [pc, #540]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b57c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b580:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b582:	e075      	b.n	800b670 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b584:	4b84      	ldr	r3, [pc, #528]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6a1b      	ldr	r3, [r3, #32]
 800b590:	069b      	lsls	r3, r3, #26
 800b592:	4981      	ldr	r1, [pc, #516]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b594:	4313      	orrs	r3, r2
 800b596:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b598:	e06a      	b.n	800b670 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b59a:	4b7f      	ldr	r3, [pc, #508]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a1b      	ldr	r3, [r3, #32]
 800b5a6:	061b      	lsls	r3, r3, #24
 800b5a8:	497b      	ldr	r1, [pc, #492]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b5ae:	e05f      	b.n	800b670 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	69db      	ldr	r3, [r3, #28]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d042      	beq.n	800b63e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b5b8:	4b77      	ldr	r3, [pc, #476]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a76      	ldr	r2, [pc, #472]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b5be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5c4:	f7fa fa60 	bl	8005a88 <HAL_GetTick>
 800b5c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b5ca:	e008      	b.n	800b5de <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b5cc:	f7fa fa5c 	bl	8005a88 <HAL_GetTick>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d4:	1ad3      	subs	r3, r2, r3
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d901      	bls.n	800b5de <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800b5da:	2303      	movs	r3, #3
 800b5dc:	e255      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b5de:	4b6e      	ldr	r3, [pc, #440]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d0f0      	beq.n	800b5cc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b5ea:	f7fa fa7d 	bl	8005ae8 <HAL_GetREVID>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	f241 0203 	movw	r2, #4099	; 0x1003
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d817      	bhi.n	800b628 <HAL_RCC_OscConfig+0x3b0>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a1b      	ldr	r3, [r3, #32]
 800b5fc:	2b20      	cmp	r3, #32
 800b5fe:	d108      	bne.n	800b612 <HAL_RCC_OscConfig+0x39a>
 800b600:	4b65      	ldr	r3, [pc, #404]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b608:	4a63      	ldr	r2, [pc, #396]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b60a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b60e:	6053      	str	r3, [r2, #4]
 800b610:	e02e      	b.n	800b670 <HAL_RCC_OscConfig+0x3f8>
 800b612:	4b61      	ldr	r3, [pc, #388]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	069b      	lsls	r3, r3, #26
 800b620:	495d      	ldr	r1, [pc, #372]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b622:	4313      	orrs	r3, r2
 800b624:	604b      	str	r3, [r1, #4]
 800b626:	e023      	b.n	800b670 <HAL_RCC_OscConfig+0x3f8>
 800b628:	4b5b      	ldr	r3, [pc, #364]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6a1b      	ldr	r3, [r3, #32]
 800b634:	061b      	lsls	r3, r3, #24
 800b636:	4958      	ldr	r1, [pc, #352]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b638:	4313      	orrs	r3, r2
 800b63a:	60cb      	str	r3, [r1, #12]
 800b63c:	e018      	b.n	800b670 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b63e:	4b56      	ldr	r3, [pc, #344]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a55      	ldr	r2, [pc, #340]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b64a:	f7fa fa1d 	bl	8005a88 <HAL_GetTick>
 800b64e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b650:	e008      	b.n	800b664 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b652:	f7fa fa19 	bl	8005a88 <HAL_GetTick>
 800b656:	4602      	mov	r2, r0
 800b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d901      	bls.n	800b664 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800b660:	2303      	movs	r3, #3
 800b662:	e212      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b664:	4b4c      	ldr	r3, [pc, #304]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1f0      	bne.n	800b652 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f003 0308 	and.w	r3, r3, #8
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d036      	beq.n	800b6ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	695b      	ldr	r3, [r3, #20]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d019      	beq.n	800b6b8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b684:	4b44      	ldr	r3, [pc, #272]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b688:	4a43      	ldr	r2, [pc, #268]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b68a:	f043 0301 	orr.w	r3, r3, #1
 800b68e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b690:	f7fa f9fa 	bl	8005a88 <HAL_GetTick>
 800b694:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b696:	e008      	b.n	800b6aa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b698:	f7fa f9f6 	bl	8005a88 <HAL_GetTick>
 800b69c:	4602      	mov	r2, r0
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	1ad3      	subs	r3, r2, r3
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	d901      	bls.n	800b6aa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	e1ef      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b6aa:	4b3b      	ldr	r3, [pc, #236]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b6ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ae:	f003 0302 	and.w	r3, r3, #2
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d0f0      	beq.n	800b698 <HAL_RCC_OscConfig+0x420>
 800b6b6:	e018      	b.n	800b6ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b6b8:	4b37      	ldr	r3, [pc, #220]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b6ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6bc:	4a36      	ldr	r2, [pc, #216]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b6be:	f023 0301 	bic.w	r3, r3, #1
 800b6c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6c4:	f7fa f9e0 	bl	8005a88 <HAL_GetTick>
 800b6c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b6ca:	e008      	b.n	800b6de <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b6cc:	f7fa f9dc 	bl	8005a88 <HAL_GetTick>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	d901      	bls.n	800b6de <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800b6da:	2303      	movs	r3, #3
 800b6dc:	e1d5      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b6de:	4b2e      	ldr	r3, [pc, #184]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b6e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6e2:	f003 0302 	and.w	r3, r3, #2
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d1f0      	bne.n	800b6cc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 0320 	and.w	r3, r3, #32
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d036      	beq.n	800b764 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	699b      	ldr	r3, [r3, #24]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d019      	beq.n	800b732 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b6fe:	4b26      	ldr	r3, [pc, #152]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a25      	ldr	r2, [pc, #148]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b704:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b708:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b70a:	f7fa f9bd 	bl	8005a88 <HAL_GetTick>
 800b70e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b710:	e008      	b.n	800b724 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b712:	f7fa f9b9 	bl	8005a88 <HAL_GetTick>
 800b716:	4602      	mov	r2, r0
 800b718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71a:	1ad3      	subs	r3, r2, r3
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d901      	bls.n	800b724 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800b720:	2303      	movs	r3, #3
 800b722:	e1b2      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b724:	4b1c      	ldr	r3, [pc, #112]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d0f0      	beq.n	800b712 <HAL_RCC_OscConfig+0x49a>
 800b730:	e018      	b.n	800b764 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b732:	4b19      	ldr	r3, [pc, #100]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a18      	ldr	r2, [pc, #96]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b738:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b73c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b73e:	f7fa f9a3 	bl	8005a88 <HAL_GetTick>
 800b742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b744:	e008      	b.n	800b758 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b746:	f7fa f99f 	bl	8005a88 <HAL_GetTick>
 800b74a:	4602      	mov	r2, r0
 800b74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74e:	1ad3      	subs	r3, r2, r3
 800b750:	2b02      	cmp	r3, #2
 800b752:	d901      	bls.n	800b758 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800b754:	2303      	movs	r3, #3
 800b756:	e198      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b758:	4b0f      	ldr	r3, [pc, #60]	; (800b798 <HAL_RCC_OscConfig+0x520>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1f0      	bne.n	800b746 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f003 0304 	and.w	r3, r3, #4
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 8085 	beq.w	800b87c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b772:	4b0a      	ldr	r3, [pc, #40]	; (800b79c <HAL_RCC_OscConfig+0x524>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a09      	ldr	r2, [pc, #36]	; (800b79c <HAL_RCC_OscConfig+0x524>)
 800b778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b77c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b77e:	f7fa f983 	bl	8005a88 <HAL_GetTick>
 800b782:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b784:	e00c      	b.n	800b7a0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b786:	f7fa f97f 	bl	8005a88 <HAL_GetTick>
 800b78a:	4602      	mov	r2, r0
 800b78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	2b64      	cmp	r3, #100	; 0x64
 800b792:	d905      	bls.n	800b7a0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800b794:	2303      	movs	r3, #3
 800b796:	e178      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
 800b798:	58024400 	.word	0x58024400
 800b79c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7a0:	4b96      	ldr	r3, [pc, #600]	; (800b9fc <HAL_RCC_OscConfig+0x784>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d0ec      	beq.n	800b786 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d106      	bne.n	800b7c2 <HAL_RCC_OscConfig+0x54a>
 800b7b4:	4b92      	ldr	r3, [pc, #584]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b7b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7b8:	4a91      	ldr	r2, [pc, #580]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b7ba:	f043 0301 	orr.w	r3, r3, #1
 800b7be:	6713      	str	r3, [r2, #112]	; 0x70
 800b7c0:	e02d      	b.n	800b81e <HAL_RCC_OscConfig+0x5a6>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d10c      	bne.n	800b7e4 <HAL_RCC_OscConfig+0x56c>
 800b7ca:	4b8d      	ldr	r3, [pc, #564]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b7cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ce:	4a8c      	ldr	r2, [pc, #560]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b7d0:	f023 0301 	bic.w	r3, r3, #1
 800b7d4:	6713      	str	r3, [r2, #112]	; 0x70
 800b7d6:	4b8a      	ldr	r3, [pc, #552]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b7d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7da:	4a89      	ldr	r2, [pc, #548]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b7dc:	f023 0304 	bic.w	r3, r3, #4
 800b7e0:	6713      	str	r3, [r2, #112]	; 0x70
 800b7e2:	e01c      	b.n	800b81e <HAL_RCC_OscConfig+0x5a6>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	2b05      	cmp	r3, #5
 800b7ea:	d10c      	bne.n	800b806 <HAL_RCC_OscConfig+0x58e>
 800b7ec:	4b84      	ldr	r3, [pc, #528]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b7ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7f0:	4a83      	ldr	r2, [pc, #524]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b7f2:	f043 0304 	orr.w	r3, r3, #4
 800b7f6:	6713      	str	r3, [r2, #112]	; 0x70
 800b7f8:	4b81      	ldr	r3, [pc, #516]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b7fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7fc:	4a80      	ldr	r2, [pc, #512]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b7fe:	f043 0301 	orr.w	r3, r3, #1
 800b802:	6713      	str	r3, [r2, #112]	; 0x70
 800b804:	e00b      	b.n	800b81e <HAL_RCC_OscConfig+0x5a6>
 800b806:	4b7e      	ldr	r3, [pc, #504]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b80a:	4a7d      	ldr	r2, [pc, #500]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b80c:	f023 0301 	bic.w	r3, r3, #1
 800b810:	6713      	str	r3, [r2, #112]	; 0x70
 800b812:	4b7b      	ldr	r3, [pc, #492]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b816:	4a7a      	ldr	r2, [pc, #488]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b818:	f023 0304 	bic.w	r3, r3, #4
 800b81c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d015      	beq.n	800b852 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b826:	f7fa f92f 	bl	8005a88 <HAL_GetTick>
 800b82a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b82c:	e00a      	b.n	800b844 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b82e:	f7fa f92b 	bl	8005a88 <HAL_GetTick>
 800b832:	4602      	mov	r2, r0
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	f241 3288 	movw	r2, #5000	; 0x1388
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d901      	bls.n	800b844 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800b840:	2303      	movs	r3, #3
 800b842:	e122      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b844:	4b6e      	ldr	r3, [pc, #440]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b848:	f003 0302 	and.w	r3, r3, #2
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d0ee      	beq.n	800b82e <HAL_RCC_OscConfig+0x5b6>
 800b850:	e014      	b.n	800b87c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b852:	f7fa f919 	bl	8005a88 <HAL_GetTick>
 800b856:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b858:	e00a      	b.n	800b870 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b85a:	f7fa f915 	bl	8005a88 <HAL_GetTick>
 800b85e:	4602      	mov	r2, r0
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	1ad3      	subs	r3, r2, r3
 800b864:	f241 3288 	movw	r2, #5000	; 0x1388
 800b868:	4293      	cmp	r3, r2
 800b86a:	d901      	bls.n	800b870 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800b86c:	2303      	movs	r3, #3
 800b86e:	e10c      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b870:	4b63      	ldr	r3, [pc, #396]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b874:	f003 0302 	and.w	r3, r3, #2
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1ee      	bne.n	800b85a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b880:	2b00      	cmp	r3, #0
 800b882:	f000 8101 	beq.w	800ba88 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b886:	4b5e      	ldr	r3, [pc, #376]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b88e:	2b18      	cmp	r3, #24
 800b890:	f000 80bc 	beq.w	800ba0c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b898:	2b02      	cmp	r3, #2
 800b89a:	f040 8095 	bne.w	800b9c8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b89e:	4b58      	ldr	r3, [pc, #352]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a57      	ldr	r2, [pc, #348]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b8a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8aa:	f7fa f8ed 	bl	8005a88 <HAL_GetTick>
 800b8ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b8b0:	e008      	b.n	800b8c4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b8b2:	f7fa f8e9 	bl	8005a88 <HAL_GetTick>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	1ad3      	subs	r3, r2, r3
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d901      	bls.n	800b8c4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800b8c0:	2303      	movs	r3, #3
 800b8c2:	e0e2      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b8c4:	4b4e      	ldr	r3, [pc, #312]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1f0      	bne.n	800b8b2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b8d0:	4b4b      	ldr	r3, [pc, #300]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b8d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8d4:	4b4b      	ldr	r3, [pc, #300]	; (800ba04 <HAL_RCC_OscConfig+0x78c>)
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b8e0:	0112      	lsls	r2, r2, #4
 800b8e2:	430a      	orrs	r2, r1
 800b8e4:	4946      	ldr	r1, [pc, #280]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	628b      	str	r3, [r1, #40]	; 0x28
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	025b      	lsls	r3, r3, #9
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	431a      	orrs	r2, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b904:	3b01      	subs	r3, #1
 800b906:	041b      	lsls	r3, r3, #16
 800b908:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b90c:	431a      	orrs	r2, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b912:	3b01      	subs	r3, #1
 800b914:	061b      	lsls	r3, r3, #24
 800b916:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b91a:	4939      	ldr	r1, [pc, #228]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b91c:	4313      	orrs	r3, r2
 800b91e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b920:	4b37      	ldr	r3, [pc, #220]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b924:	4a36      	ldr	r2, [pc, #216]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b926:	f023 0301 	bic.w	r3, r3, #1
 800b92a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b92c:	4b34      	ldr	r3, [pc, #208]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b92e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b930:	4b35      	ldr	r3, [pc, #212]	; (800ba08 <HAL_RCC_OscConfig+0x790>)
 800b932:	4013      	ands	r3, r2
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b938:	00d2      	lsls	r2, r2, #3
 800b93a:	4931      	ldr	r1, [pc, #196]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b93c:	4313      	orrs	r3, r2
 800b93e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b940:	4b2f      	ldr	r3, [pc, #188]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b944:	f023 020c 	bic.w	r2, r3, #12
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b94c:	492c      	ldr	r1, [pc, #176]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b94e:	4313      	orrs	r3, r2
 800b950:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b952:	4b2b      	ldr	r3, [pc, #172]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b956:	f023 0202 	bic.w	r2, r3, #2
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b95e:	4928      	ldr	r1, [pc, #160]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b960:	4313      	orrs	r3, r2
 800b962:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b964:	4b26      	ldr	r3, [pc, #152]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b968:	4a25      	ldr	r2, [pc, #148]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b96a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b96e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b970:	4b23      	ldr	r3, [pc, #140]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b974:	4a22      	ldr	r2, [pc, #136]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b97a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b97c:	4b20      	ldr	r3, [pc, #128]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b980:	4a1f      	ldr	r2, [pc, #124]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b982:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b986:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b988:	4b1d      	ldr	r3, [pc, #116]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98c:	4a1c      	ldr	r2, [pc, #112]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b98e:	f043 0301 	orr.w	r3, r3, #1
 800b992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b994:	4b1a      	ldr	r3, [pc, #104]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a19      	ldr	r2, [pc, #100]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b99a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b99e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9a0:	f7fa f872 	bl	8005a88 <HAL_GetTick>
 800b9a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b9a6:	e008      	b.n	800b9ba <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b9a8:	f7fa f86e 	bl	8005a88 <HAL_GetTick>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b0:	1ad3      	subs	r3, r2, r3
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d901      	bls.n	800b9ba <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	e067      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b9ba:	4b11      	ldr	r3, [pc, #68]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d0f0      	beq.n	800b9a8 <HAL_RCC_OscConfig+0x730>
 800b9c6:	e05f      	b.n	800ba88 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b9c8:	4b0d      	ldr	r3, [pc, #52]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a0c      	ldr	r2, [pc, #48]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b9ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9d4:	f7fa f858 	bl	8005a88 <HAL_GetTick>
 800b9d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b9da:	e008      	b.n	800b9ee <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b9dc:	f7fa f854 	bl	8005a88 <HAL_GetTick>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e4:	1ad3      	subs	r3, r2, r3
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d901      	bls.n	800b9ee <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800b9ea:	2303      	movs	r3, #3
 800b9ec:	e04d      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b9ee:	4b04      	ldr	r3, [pc, #16]	; (800ba00 <HAL_RCC_OscConfig+0x788>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1f0      	bne.n	800b9dc <HAL_RCC_OscConfig+0x764>
 800b9fa:	e045      	b.n	800ba88 <HAL_RCC_OscConfig+0x810>
 800b9fc:	58024800 	.word	0x58024800
 800ba00:	58024400 	.word	0x58024400
 800ba04:	fffffc0c 	.word	0xfffffc0c
 800ba08:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ba0c:	4b21      	ldr	r3, [pc, #132]	; (800ba94 <HAL_RCC_OscConfig+0x81c>)
 800ba0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ba12:	4b20      	ldr	r3, [pc, #128]	; (800ba94 <HAL_RCC_OscConfig+0x81c>)
 800ba14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba16:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d031      	beq.n	800ba84 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	f003 0203 	and.w	r2, r3, #3
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d12a      	bne.n	800ba84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	091b      	lsrs	r3, r3, #4
 800ba32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d122      	bne.n	800ba84 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba48:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d11a      	bne.n	800ba84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	0a5b      	lsrs	r3, r3, #9
 800ba52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d111      	bne.n	800ba84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	0c1b      	lsrs	r3, r3, #16
 800ba64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d108      	bne.n	800ba84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	0e1b      	lsrs	r3, r3, #24
 800ba76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d001      	beq.n	800ba88 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	e000      	b.n	800ba8a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3730      	adds	r7, #48	; 0x30
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	58024400 	.word	0x58024400

0800ba98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b086      	sub	sp, #24
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d101      	bne.n	800baac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	e19c      	b.n	800bde6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800baac:	4b8a      	ldr	r3, [pc, #552]	; (800bcd8 <HAL_RCC_ClockConfig+0x240>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f003 030f 	and.w	r3, r3, #15
 800bab4:	683a      	ldr	r2, [r7, #0]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d910      	bls.n	800badc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800baba:	4b87      	ldr	r3, [pc, #540]	; (800bcd8 <HAL_RCC_ClockConfig+0x240>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f023 020f 	bic.w	r2, r3, #15
 800bac2:	4985      	ldr	r1, [pc, #532]	; (800bcd8 <HAL_RCC_ClockConfig+0x240>)
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800baca:	4b83      	ldr	r3, [pc, #524]	; (800bcd8 <HAL_RCC_ClockConfig+0x240>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f003 030f 	and.w	r3, r3, #15
 800bad2:	683a      	ldr	r2, [r7, #0]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d001      	beq.n	800badc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	e184      	b.n	800bde6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f003 0304 	and.w	r3, r3, #4
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d010      	beq.n	800bb0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	691a      	ldr	r2, [r3, #16]
 800baec:	4b7b      	ldr	r3, [pc, #492]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800baee:	699b      	ldr	r3, [r3, #24]
 800baf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d908      	bls.n	800bb0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800baf8:	4b78      	ldr	r3, [pc, #480]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bafa:	699b      	ldr	r3, [r3, #24]
 800bafc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	691b      	ldr	r3, [r3, #16]
 800bb04:	4975      	ldr	r1, [pc, #468]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bb06:	4313      	orrs	r3, r2
 800bb08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f003 0308 	and.w	r3, r3, #8
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d010      	beq.n	800bb38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	695a      	ldr	r2, [r3, #20]
 800bb1a:	4b70      	ldr	r3, [pc, #448]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bb1c:	69db      	ldr	r3, [r3, #28]
 800bb1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d908      	bls.n	800bb38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bb26:	4b6d      	ldr	r3, [pc, #436]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bb28:	69db      	ldr	r3, [r3, #28]
 800bb2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	695b      	ldr	r3, [r3, #20]
 800bb32:	496a      	ldr	r1, [pc, #424]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bb34:	4313      	orrs	r3, r2
 800bb36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 0310 	and.w	r3, r3, #16
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d010      	beq.n	800bb66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	699a      	ldr	r2, [r3, #24]
 800bb48:	4b64      	ldr	r3, [pc, #400]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bb4a:	69db      	ldr	r3, [r3, #28]
 800bb4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d908      	bls.n	800bb66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bb54:	4b61      	ldr	r3, [pc, #388]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bb56:	69db      	ldr	r3, [r3, #28]
 800bb58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	699b      	ldr	r3, [r3, #24]
 800bb60:	495e      	ldr	r1, [pc, #376]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bb62:	4313      	orrs	r3, r2
 800bb64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f003 0320 	and.w	r3, r3, #32
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d010      	beq.n	800bb94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	69da      	ldr	r2, [r3, #28]
 800bb76:	4b59      	ldr	r3, [pc, #356]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bb78:	6a1b      	ldr	r3, [r3, #32]
 800bb7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d908      	bls.n	800bb94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bb82:	4b56      	ldr	r3, [pc, #344]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bb84:	6a1b      	ldr	r3, [r3, #32]
 800bb86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	69db      	ldr	r3, [r3, #28]
 800bb8e:	4953      	ldr	r1, [pc, #332]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bb90:	4313      	orrs	r3, r2
 800bb92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f003 0302 	and.w	r3, r3, #2
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d010      	beq.n	800bbc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	68da      	ldr	r2, [r3, #12]
 800bba4:	4b4d      	ldr	r3, [pc, #308]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	f003 030f 	and.w	r3, r3, #15
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d908      	bls.n	800bbc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bbb0:	4b4a      	ldr	r3, [pc, #296]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bbb2:	699b      	ldr	r3, [r3, #24]
 800bbb4:	f023 020f 	bic.w	r2, r3, #15
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	4947      	ldr	r1, [pc, #284]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f003 0301 	and.w	r3, r3, #1
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d055      	beq.n	800bc7a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bbce:	4b43      	ldr	r3, [pc, #268]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bbd0:	699b      	ldr	r3, [r3, #24]
 800bbd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	689b      	ldr	r3, [r3, #8]
 800bbda:	4940      	ldr	r1, [pc, #256]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d107      	bne.n	800bbf8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bbe8:	4b3c      	ldr	r3, [pc, #240]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d121      	bne.n	800bc38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e0f6      	b.n	800bde6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	2b03      	cmp	r3, #3
 800bbfe:	d107      	bne.n	800bc10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bc00:	4b36      	ldr	r3, [pc, #216]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d115      	bne.n	800bc38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e0ea      	b.n	800bde6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d107      	bne.n	800bc28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bc18:	4b30      	ldr	r3, [pc, #192]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d109      	bne.n	800bc38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e0de      	b.n	800bde6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc28:	4b2c      	ldr	r3, [pc, #176]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 0304 	and.w	r3, r3, #4
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d101      	bne.n	800bc38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	e0d6      	b.n	800bde6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bc38:	4b28      	ldr	r3, [pc, #160]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bc3a:	691b      	ldr	r3, [r3, #16]
 800bc3c:	f023 0207 	bic.w	r2, r3, #7
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	4925      	ldr	r1, [pc, #148]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bc46:	4313      	orrs	r3, r2
 800bc48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc4a:	f7f9 ff1d 	bl	8005a88 <HAL_GetTick>
 800bc4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc50:	e00a      	b.n	800bc68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc52:	f7f9 ff19 	bl	8005a88 <HAL_GetTick>
 800bc56:	4602      	mov	r2, r0
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d901      	bls.n	800bc68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800bc64:	2303      	movs	r3, #3
 800bc66:	e0be      	b.n	800bde6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc68:	4b1c      	ldr	r3, [pc, #112]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	00db      	lsls	r3, r3, #3
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d1eb      	bne.n	800bc52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f003 0302 	and.w	r3, r3, #2
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d010      	beq.n	800bca8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	68da      	ldr	r2, [r3, #12]
 800bc8a:	4b14      	ldr	r3, [pc, #80]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bc8c:	699b      	ldr	r3, [r3, #24]
 800bc8e:	f003 030f 	and.w	r3, r3, #15
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d208      	bcs.n	800bca8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc96:	4b11      	ldr	r3, [pc, #68]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bc98:	699b      	ldr	r3, [r3, #24]
 800bc9a:	f023 020f 	bic.w	r2, r3, #15
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	490e      	ldr	r1, [pc, #56]	; (800bcdc <HAL_RCC_ClockConfig+0x244>)
 800bca4:	4313      	orrs	r3, r2
 800bca6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bca8:	4b0b      	ldr	r3, [pc, #44]	; (800bcd8 <HAL_RCC_ClockConfig+0x240>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f003 030f 	and.w	r3, r3, #15
 800bcb0:	683a      	ldr	r2, [r7, #0]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d214      	bcs.n	800bce0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcb6:	4b08      	ldr	r3, [pc, #32]	; (800bcd8 <HAL_RCC_ClockConfig+0x240>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f023 020f 	bic.w	r2, r3, #15
 800bcbe:	4906      	ldr	r1, [pc, #24]	; (800bcd8 <HAL_RCC_ClockConfig+0x240>)
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcc6:	4b04      	ldr	r3, [pc, #16]	; (800bcd8 <HAL_RCC_ClockConfig+0x240>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f003 030f 	and.w	r3, r3, #15
 800bcce:	683a      	ldr	r2, [r7, #0]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d005      	beq.n	800bce0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e086      	b.n	800bde6 <HAL_RCC_ClockConfig+0x34e>
 800bcd8:	52002000 	.word	0x52002000
 800bcdc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 0304 	and.w	r3, r3, #4
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d010      	beq.n	800bd0e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	691a      	ldr	r2, [r3, #16]
 800bcf0:	4b3f      	ldr	r3, [pc, #252]	; (800bdf0 <HAL_RCC_ClockConfig+0x358>)
 800bcf2:	699b      	ldr	r3, [r3, #24]
 800bcf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d208      	bcs.n	800bd0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bcfc:	4b3c      	ldr	r3, [pc, #240]	; (800bdf0 <HAL_RCC_ClockConfig+0x358>)
 800bcfe:	699b      	ldr	r3, [r3, #24]
 800bd00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	4939      	ldr	r1, [pc, #228]	; (800bdf0 <HAL_RCC_ClockConfig+0x358>)
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f003 0308 	and.w	r3, r3, #8
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d010      	beq.n	800bd3c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	695a      	ldr	r2, [r3, #20]
 800bd1e:	4b34      	ldr	r3, [pc, #208]	; (800bdf0 <HAL_RCC_ClockConfig+0x358>)
 800bd20:	69db      	ldr	r3, [r3, #28]
 800bd22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d208      	bcs.n	800bd3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bd2a:	4b31      	ldr	r3, [pc, #196]	; (800bdf0 <HAL_RCC_ClockConfig+0x358>)
 800bd2c:	69db      	ldr	r3, [r3, #28]
 800bd2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	695b      	ldr	r3, [r3, #20]
 800bd36:	492e      	ldr	r1, [pc, #184]	; (800bdf0 <HAL_RCC_ClockConfig+0x358>)
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f003 0310 	and.w	r3, r3, #16
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d010      	beq.n	800bd6a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	699a      	ldr	r2, [r3, #24]
 800bd4c:	4b28      	ldr	r3, [pc, #160]	; (800bdf0 <HAL_RCC_ClockConfig+0x358>)
 800bd4e:	69db      	ldr	r3, [r3, #28]
 800bd50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d208      	bcs.n	800bd6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bd58:	4b25      	ldr	r3, [pc, #148]	; (800bdf0 <HAL_RCC_ClockConfig+0x358>)
 800bd5a:	69db      	ldr	r3, [r3, #28]
 800bd5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	699b      	ldr	r3, [r3, #24]
 800bd64:	4922      	ldr	r1, [pc, #136]	; (800bdf0 <HAL_RCC_ClockConfig+0x358>)
 800bd66:	4313      	orrs	r3, r2
 800bd68:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f003 0320 	and.w	r3, r3, #32
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d010      	beq.n	800bd98 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	69da      	ldr	r2, [r3, #28]
 800bd7a:	4b1d      	ldr	r3, [pc, #116]	; (800bdf0 <HAL_RCC_ClockConfig+0x358>)
 800bd7c:	6a1b      	ldr	r3, [r3, #32]
 800bd7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d208      	bcs.n	800bd98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bd86:	4b1a      	ldr	r3, [pc, #104]	; (800bdf0 <HAL_RCC_ClockConfig+0x358>)
 800bd88:	6a1b      	ldr	r3, [r3, #32]
 800bd8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	69db      	ldr	r3, [r3, #28]
 800bd92:	4917      	ldr	r1, [pc, #92]	; (800bdf0 <HAL_RCC_ClockConfig+0x358>)
 800bd94:	4313      	orrs	r3, r2
 800bd96:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bd98:	f000 f834 	bl	800be04 <HAL_RCC_GetSysClockFreq>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	4b14      	ldr	r3, [pc, #80]	; (800bdf0 <HAL_RCC_ClockConfig+0x358>)
 800bda0:	699b      	ldr	r3, [r3, #24]
 800bda2:	0a1b      	lsrs	r3, r3, #8
 800bda4:	f003 030f 	and.w	r3, r3, #15
 800bda8:	4912      	ldr	r1, [pc, #72]	; (800bdf4 <HAL_RCC_ClockConfig+0x35c>)
 800bdaa:	5ccb      	ldrb	r3, [r1, r3]
 800bdac:	f003 031f 	and.w	r3, r3, #31
 800bdb0:	fa22 f303 	lsr.w	r3, r2, r3
 800bdb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bdb6:	4b0e      	ldr	r3, [pc, #56]	; (800bdf0 <HAL_RCC_ClockConfig+0x358>)
 800bdb8:	699b      	ldr	r3, [r3, #24]
 800bdba:	f003 030f 	and.w	r3, r3, #15
 800bdbe:	4a0d      	ldr	r2, [pc, #52]	; (800bdf4 <HAL_RCC_ClockConfig+0x35c>)
 800bdc0:	5cd3      	ldrb	r3, [r2, r3]
 800bdc2:	f003 031f 	and.w	r3, r3, #31
 800bdc6:	693a      	ldr	r2, [r7, #16]
 800bdc8:	fa22 f303 	lsr.w	r3, r2, r3
 800bdcc:	4a0a      	ldr	r2, [pc, #40]	; (800bdf8 <HAL_RCC_ClockConfig+0x360>)
 800bdce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bdd0:	4a0a      	ldr	r2, [pc, #40]	; (800bdfc <HAL_RCC_ClockConfig+0x364>)
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800bdd6:	4b0a      	ldr	r3, [pc, #40]	; (800be00 <HAL_RCC_ClockConfig+0x368>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7f9 fe0a 	bl	80059f4 <HAL_InitTick>
 800bde0:	4603      	mov	r3, r0
 800bde2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800bde4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3718      	adds	r7, #24
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	58024400 	.word	0x58024400
 800bdf4:	08014e94 	.word	0x08014e94
 800bdf8:	24000018 	.word	0x24000018
 800bdfc:	24000014 	.word	0x24000014
 800be00:	2400001c 	.word	0x2400001c

0800be04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be04:	b480      	push	{r7}
 800be06:	b089      	sub	sp, #36	; 0x24
 800be08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800be0a:	4bb3      	ldr	r3, [pc, #716]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be12:	2b18      	cmp	r3, #24
 800be14:	f200 8155 	bhi.w	800c0c2 <HAL_RCC_GetSysClockFreq+0x2be>
 800be18:	a201      	add	r2, pc, #4	; (adr r2, 800be20 <HAL_RCC_GetSysClockFreq+0x1c>)
 800be1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1e:	bf00      	nop
 800be20:	0800be85 	.word	0x0800be85
 800be24:	0800c0c3 	.word	0x0800c0c3
 800be28:	0800c0c3 	.word	0x0800c0c3
 800be2c:	0800c0c3 	.word	0x0800c0c3
 800be30:	0800c0c3 	.word	0x0800c0c3
 800be34:	0800c0c3 	.word	0x0800c0c3
 800be38:	0800c0c3 	.word	0x0800c0c3
 800be3c:	0800c0c3 	.word	0x0800c0c3
 800be40:	0800beab 	.word	0x0800beab
 800be44:	0800c0c3 	.word	0x0800c0c3
 800be48:	0800c0c3 	.word	0x0800c0c3
 800be4c:	0800c0c3 	.word	0x0800c0c3
 800be50:	0800c0c3 	.word	0x0800c0c3
 800be54:	0800c0c3 	.word	0x0800c0c3
 800be58:	0800c0c3 	.word	0x0800c0c3
 800be5c:	0800c0c3 	.word	0x0800c0c3
 800be60:	0800beb1 	.word	0x0800beb1
 800be64:	0800c0c3 	.word	0x0800c0c3
 800be68:	0800c0c3 	.word	0x0800c0c3
 800be6c:	0800c0c3 	.word	0x0800c0c3
 800be70:	0800c0c3 	.word	0x0800c0c3
 800be74:	0800c0c3 	.word	0x0800c0c3
 800be78:	0800c0c3 	.word	0x0800c0c3
 800be7c:	0800c0c3 	.word	0x0800c0c3
 800be80:	0800beb7 	.word	0x0800beb7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be84:	4b94      	ldr	r3, [pc, #592]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f003 0320 	and.w	r3, r3, #32
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d009      	beq.n	800bea4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be90:	4b91      	ldr	r3, [pc, #580]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	08db      	lsrs	r3, r3, #3
 800be96:	f003 0303 	and.w	r3, r3, #3
 800be9a:	4a90      	ldr	r2, [pc, #576]	; (800c0dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800be9c:	fa22 f303 	lsr.w	r3, r2, r3
 800bea0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800bea2:	e111      	b.n	800c0c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bea4:	4b8d      	ldr	r3, [pc, #564]	; (800c0dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bea6:	61bb      	str	r3, [r7, #24]
    break;
 800bea8:	e10e      	b.n	800c0c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800beaa:	4b8d      	ldr	r3, [pc, #564]	; (800c0e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800beac:	61bb      	str	r3, [r7, #24]
    break;
 800beae:	e10b      	b.n	800c0c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800beb0:	4b8c      	ldr	r3, [pc, #560]	; (800c0e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800beb2:	61bb      	str	r3, [r7, #24]
    break;
 800beb4:	e108      	b.n	800c0c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800beb6:	4b88      	ldr	r3, [pc, #544]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800beb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beba:	f003 0303 	and.w	r3, r3, #3
 800bebe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800bec0:	4b85      	ldr	r3, [pc, #532]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec4:	091b      	lsrs	r3, r3, #4
 800bec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800beca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800becc:	4b82      	ldr	r3, [pc, #520]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed0:	f003 0301 	and.w	r3, r3, #1
 800bed4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bed6:	4b80      	ldr	r3, [pc, #512]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beda:	08db      	lsrs	r3, r3, #3
 800bedc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	fb02 f303 	mul.w	r3, r2, r3
 800bee6:	ee07 3a90 	vmov	s15, r3
 800beea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f000 80e1 	beq.w	800c0bc <HAL_RCC_GetSysClockFreq+0x2b8>
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	2b02      	cmp	r3, #2
 800befe:	f000 8083 	beq.w	800c008 <HAL_RCC_GetSysClockFreq+0x204>
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	f200 80a1 	bhi.w	800c04c <HAL_RCC_GetSysClockFreq+0x248>
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d003      	beq.n	800bf18 <HAL_RCC_GetSysClockFreq+0x114>
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d056      	beq.n	800bfc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800bf16:	e099      	b.n	800c04c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf18:	4b6f      	ldr	r3, [pc, #444]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f003 0320 	and.w	r3, r3, #32
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d02d      	beq.n	800bf80 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf24:	4b6c      	ldr	r3, [pc, #432]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	08db      	lsrs	r3, r3, #3
 800bf2a:	f003 0303 	and.w	r3, r3, #3
 800bf2e:	4a6b      	ldr	r2, [pc, #428]	; (800c0dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bf30:	fa22 f303 	lsr.w	r3, r2, r3
 800bf34:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	ee07 3a90 	vmov	s15, r3
 800bf3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	ee07 3a90 	vmov	s15, r3
 800bf46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf4e:	4b62      	ldr	r3, [pc, #392]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf56:	ee07 3a90 	vmov	s15, r3
 800bf5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf5e:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf62:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c0e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bf66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800bf7e:	e087      	b.n	800c090 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	ee07 3a90 	vmov	s15, r3
 800bf86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c0ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800bf8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf92:	4b51      	ldr	r3, [pc, #324]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf9a:	ee07 3a90 	vmov	s15, r3
 800bf9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfa2:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfa6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c0e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bfaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfc2:	e065      	b.n	800c090 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	ee07 3a90 	vmov	s15, r3
 800bfca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfce:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c0f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bfd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfd6:	4b40      	ldr	r3, [pc, #256]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfde:	ee07 3a90 	vmov	s15, r3
 800bfe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfe6:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c0e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bfee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c006:	e043      	b.n	800c090 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	ee07 3a90 	vmov	s15, r3
 800c00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c012:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c0f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c01a:	4b2f      	ldr	r3, [pc, #188]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c022:	ee07 3a90 	vmov	s15, r3
 800c026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c02a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c02e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c0e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c03a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c03e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c042:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c04a:	e021      	b.n	800c090 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	ee07 3a90 	vmov	s15, r3
 800c052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c056:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c0f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c05a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c05e:	4b1e      	ldr	r3, [pc, #120]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c066:	ee07 3a90 	vmov	s15, r3
 800c06a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c06e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c072:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c0e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c07a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c07e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c08a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c08e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800c090:	4b11      	ldr	r3, [pc, #68]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c094:	0a5b      	lsrs	r3, r3, #9
 800c096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c09a:	3301      	adds	r3, #1
 800c09c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	ee07 3a90 	vmov	s15, r3
 800c0a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c0a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0b4:	ee17 3a90 	vmov	r3, s15
 800c0b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800c0ba:	e005      	b.n	800c0c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	61bb      	str	r3, [r7, #24]
    break;
 800c0c0:	e002      	b.n	800c0c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800c0c2:	4b07      	ldr	r3, [pc, #28]	; (800c0e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c0c4:	61bb      	str	r3, [r7, #24]
    break;
 800c0c6:	bf00      	nop
  }

  return sysclockfreq;
 800c0c8:	69bb      	ldr	r3, [r7, #24]
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3724      	adds	r7, #36	; 0x24
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	58024400 	.word	0x58024400
 800c0dc:	03d09000 	.word	0x03d09000
 800c0e0:	003d0900 	.word	0x003d0900
 800c0e4:	017d7840 	.word	0x017d7840
 800c0e8:	46000000 	.word	0x46000000
 800c0ec:	4c742400 	.word	0x4c742400
 800c0f0:	4a742400 	.word	0x4a742400
 800c0f4:	4bbebc20 	.word	0x4bbebc20

0800c0f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c0fe:	f7ff fe81 	bl	800be04 <HAL_RCC_GetSysClockFreq>
 800c102:	4602      	mov	r2, r0
 800c104:	4b10      	ldr	r3, [pc, #64]	; (800c148 <HAL_RCC_GetHCLKFreq+0x50>)
 800c106:	699b      	ldr	r3, [r3, #24]
 800c108:	0a1b      	lsrs	r3, r3, #8
 800c10a:	f003 030f 	and.w	r3, r3, #15
 800c10e:	490f      	ldr	r1, [pc, #60]	; (800c14c <HAL_RCC_GetHCLKFreq+0x54>)
 800c110:	5ccb      	ldrb	r3, [r1, r3]
 800c112:	f003 031f 	and.w	r3, r3, #31
 800c116:	fa22 f303 	lsr.w	r3, r2, r3
 800c11a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c11c:	4b0a      	ldr	r3, [pc, #40]	; (800c148 <HAL_RCC_GetHCLKFreq+0x50>)
 800c11e:	699b      	ldr	r3, [r3, #24]
 800c120:	f003 030f 	and.w	r3, r3, #15
 800c124:	4a09      	ldr	r2, [pc, #36]	; (800c14c <HAL_RCC_GetHCLKFreq+0x54>)
 800c126:	5cd3      	ldrb	r3, [r2, r3]
 800c128:	f003 031f 	and.w	r3, r3, #31
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	fa22 f303 	lsr.w	r3, r2, r3
 800c132:	4a07      	ldr	r2, [pc, #28]	; (800c150 <HAL_RCC_GetHCLKFreq+0x58>)
 800c134:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c136:	4a07      	ldr	r2, [pc, #28]	; (800c154 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c13c:	4b04      	ldr	r3, [pc, #16]	; (800c150 <HAL_RCC_GetHCLKFreq+0x58>)
 800c13e:	681b      	ldr	r3, [r3, #0]
}
 800c140:	4618      	mov	r0, r3
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	58024400 	.word	0x58024400
 800c14c:	08014e94 	.word	0x08014e94
 800c150:	24000018 	.word	0x24000018
 800c154:	24000014 	.word	0x24000014

0800c158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c15c:	f7ff ffcc 	bl	800c0f8 <HAL_RCC_GetHCLKFreq>
 800c160:	4602      	mov	r2, r0
 800c162:	4b06      	ldr	r3, [pc, #24]	; (800c17c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c164:	69db      	ldr	r3, [r3, #28]
 800c166:	091b      	lsrs	r3, r3, #4
 800c168:	f003 0307 	and.w	r3, r3, #7
 800c16c:	4904      	ldr	r1, [pc, #16]	; (800c180 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c16e:	5ccb      	ldrb	r3, [r1, r3]
 800c170:	f003 031f 	and.w	r3, r3, #31
 800c174:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c178:	4618      	mov	r0, r3
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	58024400 	.word	0x58024400
 800c180:	08014e94 	.word	0x08014e94

0800c184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c188:	f7ff ffb6 	bl	800c0f8 <HAL_RCC_GetHCLKFreq>
 800c18c:	4602      	mov	r2, r0
 800c18e:	4b06      	ldr	r3, [pc, #24]	; (800c1a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c190:	69db      	ldr	r3, [r3, #28]
 800c192:	0a1b      	lsrs	r3, r3, #8
 800c194:	f003 0307 	and.w	r3, r3, #7
 800c198:	4904      	ldr	r1, [pc, #16]	; (800c1ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800c19a:	5ccb      	ldrb	r3, [r1, r3]
 800c19c:	f003 031f 	and.w	r3, r3, #31
 800c1a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	58024400 	.word	0x58024400
 800c1ac:	08014e94 	.word	0x08014e94

0800c1b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c1bc:	2300      	movs	r3, #0
 800c1be:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d03f      	beq.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1d4:	d02a      	beq.n	800c22c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c1d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1da:	d824      	bhi.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c1dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1e0:	d018      	beq.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c1e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1e6:	d81e      	bhi.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d003      	beq.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c1ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1f0:	d007      	beq.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c1f2:	e018      	b.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1f4:	4bab      	ldr	r3, [pc, #684]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f8:	4aaa      	ldr	r2, [pc, #680]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c1fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c200:	e015      	b.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	3304      	adds	r3, #4
 800c206:	2102      	movs	r1, #2
 800c208:	4618      	mov	r0, r3
 800c20a:	f001 f9cf 	bl	800d5ac <RCCEx_PLL2_Config>
 800c20e:	4603      	mov	r3, r0
 800c210:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c212:	e00c      	b.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	3324      	adds	r3, #36	; 0x24
 800c218:	2102      	movs	r1, #2
 800c21a:	4618      	mov	r0, r3
 800c21c:	f001 fa78 	bl	800d710 <RCCEx_PLL3_Config>
 800c220:	4603      	mov	r3, r0
 800c222:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c224:	e003      	b.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c226:	2301      	movs	r3, #1
 800c228:	75fb      	strb	r3, [r7, #23]
      break;
 800c22a:	e000      	b.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c22c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d109      	bne.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c234:	4b9b      	ldr	r3, [pc, #620]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c238:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c240:	4998      	ldr	r1, [pc, #608]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c242:	4313      	orrs	r3, r2
 800c244:	650b      	str	r3, [r1, #80]	; 0x50
 800c246:	e001      	b.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c248:	7dfb      	ldrb	r3, [r7, #23]
 800c24a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c254:	2b00      	cmp	r3, #0
 800c256:	d03d      	beq.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c25c:	2b04      	cmp	r3, #4
 800c25e:	d826      	bhi.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c260:	a201      	add	r2, pc, #4	; (adr r2, 800c268 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800c262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c266:	bf00      	nop
 800c268:	0800c27d 	.word	0x0800c27d
 800c26c:	0800c28b 	.word	0x0800c28b
 800c270:	0800c29d 	.word	0x0800c29d
 800c274:	0800c2b5 	.word	0x0800c2b5
 800c278:	0800c2b5 	.word	0x0800c2b5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c27c:	4b89      	ldr	r3, [pc, #548]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c280:	4a88      	ldr	r2, [pc, #544]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c286:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c288:	e015      	b.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	3304      	adds	r3, #4
 800c28e:	2100      	movs	r1, #0
 800c290:	4618      	mov	r0, r3
 800c292:	f001 f98b 	bl	800d5ac <RCCEx_PLL2_Config>
 800c296:	4603      	mov	r3, r0
 800c298:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c29a:	e00c      	b.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	3324      	adds	r3, #36	; 0x24
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f001 fa34 	bl	800d710 <RCCEx_PLL3_Config>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c2ac:	e003      	b.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	75fb      	strb	r3, [r7, #23]
      break;
 800c2b2:	e000      	b.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c2b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2b6:	7dfb      	ldrb	r3, [r7, #23]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d109      	bne.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c2bc:	4b79      	ldr	r3, [pc, #484]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c2be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2c0:	f023 0207 	bic.w	r2, r3, #7
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2c8:	4976      	ldr	r1, [pc, #472]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	650b      	str	r3, [r1, #80]	; 0x50
 800c2ce:	e001      	b.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2d0:	7dfb      	ldrb	r3, [r7, #23]
 800c2d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d042      	beq.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2e8:	d02b      	beq.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800c2ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2ee:	d825      	bhi.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c2f0:	2bc0      	cmp	r3, #192	; 0xc0
 800c2f2:	d028      	beq.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c2f4:	2bc0      	cmp	r3, #192	; 0xc0
 800c2f6:	d821      	bhi.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c2f8:	2b80      	cmp	r3, #128	; 0x80
 800c2fa:	d016      	beq.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800c2fc:	2b80      	cmp	r3, #128	; 0x80
 800c2fe:	d81d      	bhi.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c300:	2b00      	cmp	r3, #0
 800c302:	d002      	beq.n	800c30a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800c304:	2b40      	cmp	r3, #64	; 0x40
 800c306:	d007      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800c308:	e018      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c30a:	4b66      	ldr	r3, [pc, #408]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c30e:	4a65      	ldr	r2, [pc, #404]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c314:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c316:	e017      	b.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	3304      	adds	r3, #4
 800c31c:	2100      	movs	r1, #0
 800c31e:	4618      	mov	r0, r3
 800c320:	f001 f944 	bl	800d5ac <RCCEx_PLL2_Config>
 800c324:	4603      	mov	r3, r0
 800c326:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c328:	e00e      	b.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	3324      	adds	r3, #36	; 0x24
 800c32e:	2100      	movs	r1, #0
 800c330:	4618      	mov	r0, r3
 800c332:	f001 f9ed 	bl	800d710 <RCCEx_PLL3_Config>
 800c336:	4603      	mov	r3, r0
 800c338:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c33a:	e005      	b.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c33c:	2301      	movs	r3, #1
 800c33e:	75fb      	strb	r3, [r7, #23]
      break;
 800c340:	e002      	b.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c342:	bf00      	nop
 800c344:	e000      	b.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c346:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c348:	7dfb      	ldrb	r3, [r7, #23]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d109      	bne.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c34e:	4b55      	ldr	r3, [pc, #340]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c352:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c35a:	4952      	ldr	r1, [pc, #328]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c35c:	4313      	orrs	r3, r2
 800c35e:	650b      	str	r3, [r1, #80]	; 0x50
 800c360:	e001      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c362:	7dfb      	ldrb	r3, [r7, #23]
 800c364:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d049      	beq.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c378:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c37c:	d030      	beq.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800c37e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c382:	d82a      	bhi.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c384:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c388:	d02c      	beq.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800c38a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c38e:	d824      	bhi.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c394:	d018      	beq.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800c396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c39a:	d81e      	bhi.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d003      	beq.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800c3a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3a4:	d007      	beq.n	800c3b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c3a6:	e018      	b.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3a8:	4b3e      	ldr	r3, [pc, #248]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ac:	4a3d      	ldr	r2, [pc, #244]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c3ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c3b4:	e017      	b.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	3304      	adds	r3, #4
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f001 f8f5 	bl	800d5ac <RCCEx_PLL2_Config>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c3c6:	e00e      	b.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	3324      	adds	r3, #36	; 0x24
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f001 f99e 	bl	800d710 <RCCEx_PLL3_Config>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c3d8:	e005      	b.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	75fb      	strb	r3, [r7, #23]
      break;
 800c3de:	e002      	b.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c3e0:	bf00      	nop
 800c3e2:	e000      	b.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c3e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3e6:	7dfb      	ldrb	r3, [r7, #23]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10a      	bne.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c3ec:	4b2d      	ldr	r3, [pc, #180]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c3ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3f0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c3fa:	492a      	ldr	r1, [pc, #168]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	658b      	str	r3, [r1, #88]	; 0x58
 800c400:	e001      	b.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c402:	7dfb      	ldrb	r3, [r7, #23]
 800c404:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d04c      	beq.n	800c4ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c41c:	d030      	beq.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800c41e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c422:	d82a      	bhi.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c424:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c428:	d02c      	beq.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800c42a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c42e:	d824      	bhi.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c430:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c434:	d018      	beq.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800c436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c43a:	d81e      	bhi.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d003      	beq.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c444:	d007      	beq.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c446:	e018      	b.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c448:	4b16      	ldr	r3, [pc, #88]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c44c:	4a15      	ldr	r2, [pc, #84]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c44e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c452:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c454:	e017      	b.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	3304      	adds	r3, #4
 800c45a:	2100      	movs	r1, #0
 800c45c:	4618      	mov	r0, r3
 800c45e:	f001 f8a5 	bl	800d5ac <RCCEx_PLL2_Config>
 800c462:	4603      	mov	r3, r0
 800c464:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c466:	e00e      	b.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	3324      	adds	r3, #36	; 0x24
 800c46c:	2100      	movs	r1, #0
 800c46e:	4618      	mov	r0, r3
 800c470:	f001 f94e 	bl	800d710 <RCCEx_PLL3_Config>
 800c474:	4603      	mov	r3, r0
 800c476:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c478:	e005      	b.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c47a:	2301      	movs	r3, #1
 800c47c:	75fb      	strb	r3, [r7, #23]
      break;
 800c47e:	e002      	b.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800c480:	bf00      	nop
 800c482:	e000      	b.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800c484:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c486:	7dfb      	ldrb	r3, [r7, #23]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10d      	bne.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c48c:	4b05      	ldr	r3, [pc, #20]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c48e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c490:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c49a:	4902      	ldr	r1, [pc, #8]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c49c:	4313      	orrs	r3, r2
 800c49e:	658b      	str	r3, [r1, #88]	; 0x58
 800c4a0:	e004      	b.n	800c4ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800c4a2:	bf00      	nop
 800c4a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4a8:	7dfb      	ldrb	r3, [r7, #23]
 800c4aa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d032      	beq.n	800c51e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4bc:	2b30      	cmp	r3, #48	; 0x30
 800c4be:	d01c      	beq.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c4c0:	2b30      	cmp	r3, #48	; 0x30
 800c4c2:	d817      	bhi.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800c4c4:	2b20      	cmp	r3, #32
 800c4c6:	d00c      	beq.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800c4c8:	2b20      	cmp	r3, #32
 800c4ca:	d813      	bhi.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d016      	beq.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800c4d0:	2b10      	cmp	r3, #16
 800c4d2:	d10f      	bne.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4d4:	4baf      	ldr	r3, [pc, #700]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d8:	4aae      	ldr	r2, [pc, #696]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c4da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c4e0:	e00e      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	2102      	movs	r1, #2
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f001 f85f 	bl	800d5ac <RCCEx_PLL2_Config>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c4f2:	e005      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	75fb      	strb	r3, [r7, #23]
      break;
 800c4f8:	e002      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800c4fa:	bf00      	nop
 800c4fc:	e000      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800c4fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c500:	7dfb      	ldrb	r3, [r7, #23]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d109      	bne.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c506:	4ba3      	ldr	r3, [pc, #652]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c50a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c512:	49a0      	ldr	r1, [pc, #640]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c514:	4313      	orrs	r3, r2
 800c516:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c518:	e001      	b.n	800c51e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c51a:	7dfb      	ldrb	r3, [r7, #23]
 800c51c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c526:	2b00      	cmp	r3, #0
 800c528:	d047      	beq.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c52e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c532:	d030      	beq.n	800c596 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800c534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c538:	d82a      	bhi.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800c53a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c53e:	d02c      	beq.n	800c59a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800c540:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c544:	d824      	bhi.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800c546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c54a:	d018      	beq.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800c54c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c550:	d81e      	bhi.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800c552:	2b00      	cmp	r3, #0
 800c554:	d003      	beq.n	800c55e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800c556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c55a:	d007      	beq.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800c55c:	e018      	b.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c55e:	4b8d      	ldr	r3, [pc, #564]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c562:	4a8c      	ldr	r2, [pc, #560]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c568:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c56a:	e017      	b.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	3304      	adds	r3, #4
 800c570:	2100      	movs	r1, #0
 800c572:	4618      	mov	r0, r3
 800c574:	f001 f81a 	bl	800d5ac <RCCEx_PLL2_Config>
 800c578:	4603      	mov	r3, r0
 800c57a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c57c:	e00e      	b.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	3324      	adds	r3, #36	; 0x24
 800c582:	2100      	movs	r1, #0
 800c584:	4618      	mov	r0, r3
 800c586:	f001 f8c3 	bl	800d710 <RCCEx_PLL3_Config>
 800c58a:	4603      	mov	r3, r0
 800c58c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c58e:	e005      	b.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	75fb      	strb	r3, [r7, #23]
      break;
 800c594:	e002      	b.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800c596:	bf00      	nop
 800c598:	e000      	b.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800c59a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c59c:	7dfb      	ldrb	r3, [r7, #23]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d109      	bne.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c5a2:	4b7c      	ldr	r3, [pc, #496]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c5a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5a6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5ae:	4979      	ldr	r1, [pc, #484]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	650b      	str	r3, [r1, #80]	; 0x50
 800c5b4:	e001      	b.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5b6:	7dfb      	ldrb	r3, [r7, #23]
 800c5b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d049      	beq.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5ce:	d02e      	beq.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800c5d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5d4:	d828      	bhi.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c5d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c5da:	d02a      	beq.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800c5dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c5e0:	d822      	bhi.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c5e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c5e6:	d026      	beq.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800c5e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c5ec:	d81c      	bhi.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c5ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5f2:	d010      	beq.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800c5f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5f8:	d816      	bhi.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d01d      	beq.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800c5fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c602:	d111      	bne.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	3304      	adds	r3, #4
 800c608:	2101      	movs	r1, #1
 800c60a:	4618      	mov	r0, r3
 800c60c:	f000 ffce 	bl	800d5ac <RCCEx_PLL2_Config>
 800c610:	4603      	mov	r3, r0
 800c612:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c614:	e012      	b.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	3324      	adds	r3, #36	; 0x24
 800c61a:	2101      	movs	r1, #1
 800c61c:	4618      	mov	r0, r3
 800c61e:	f001 f877 	bl	800d710 <RCCEx_PLL3_Config>
 800c622:	4603      	mov	r3, r0
 800c624:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c626:	e009      	b.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c628:	2301      	movs	r3, #1
 800c62a:	75fb      	strb	r3, [r7, #23]
      break;
 800c62c:	e006      	b.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c62e:	bf00      	nop
 800c630:	e004      	b.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c632:	bf00      	nop
 800c634:	e002      	b.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c636:	bf00      	nop
 800c638:	e000      	b.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c63a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c63c:	7dfb      	ldrb	r3, [r7, #23]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d109      	bne.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c642:	4b54      	ldr	r3, [pc, #336]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c646:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c64e:	4951      	ldr	r1, [pc, #324]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c650:	4313      	orrs	r3, r2
 800c652:	650b      	str	r3, [r1, #80]	; 0x50
 800c654:	e001      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c656:	7dfb      	ldrb	r3, [r7, #23]
 800c658:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c662:	2b00      	cmp	r3, #0
 800c664:	d04b      	beq.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c66c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c670:	d02e      	beq.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800c672:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c676:	d828      	bhi.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c67c:	d02a      	beq.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800c67e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c682:	d822      	bhi.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c684:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c688:	d026      	beq.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800c68a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c68e:	d81c      	bhi.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c694:	d010      	beq.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800c696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c69a:	d816      	bhi.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d01d      	beq.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800c6a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6a4:	d111      	bne.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	3304      	adds	r3, #4
 800c6aa:	2101      	movs	r1, #1
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f000 ff7d 	bl	800d5ac <RCCEx_PLL2_Config>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c6b6:	e012      	b.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	3324      	adds	r3, #36	; 0x24
 800c6bc:	2101      	movs	r1, #1
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f001 f826 	bl	800d710 <RCCEx_PLL3_Config>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c6c8:	e009      	b.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	75fb      	strb	r3, [r7, #23]
      break;
 800c6ce:	e006      	b.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800c6d0:	bf00      	nop
 800c6d2:	e004      	b.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800c6d4:	bf00      	nop
 800c6d6:	e002      	b.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800c6d8:	bf00      	nop
 800c6da:	e000      	b.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800c6dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6de:	7dfb      	ldrb	r3, [r7, #23]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d10a      	bne.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c6e4:	4b2b      	ldr	r3, [pc, #172]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c6e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6e8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c6f2:	4928      	ldr	r1, [pc, #160]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	658b      	str	r3, [r1, #88]	; 0x58
 800c6f8:	e001      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6fa:	7dfb      	ldrb	r3, [r7, #23]
 800c6fc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c706:	2b00      	cmp	r3, #0
 800c708:	d02f      	beq.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c70e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c712:	d00e      	beq.n	800c732 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800c714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c718:	d814      	bhi.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d015      	beq.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800c71e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c722:	d10f      	bne.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c724:	4b1b      	ldr	r3, [pc, #108]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c728:	4a1a      	ldr	r2, [pc, #104]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c72a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c72e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c730:	e00c      	b.n	800c74c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	3304      	adds	r3, #4
 800c736:	2101      	movs	r1, #1
 800c738:	4618      	mov	r0, r3
 800c73a:	f000 ff37 	bl	800d5ac <RCCEx_PLL2_Config>
 800c73e:	4603      	mov	r3, r0
 800c740:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c742:	e003      	b.n	800c74c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c744:	2301      	movs	r3, #1
 800c746:	75fb      	strb	r3, [r7, #23]
      break;
 800c748:	e000      	b.n	800c74c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800c74a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c74c:	7dfb      	ldrb	r3, [r7, #23]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d109      	bne.n	800c766 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c752:	4b10      	ldr	r3, [pc, #64]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c756:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c75e:	490d      	ldr	r1, [pc, #52]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c760:	4313      	orrs	r3, r2
 800c762:	650b      	str	r3, [r1, #80]	; 0x50
 800c764:	e001      	b.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c766:	7dfb      	ldrb	r3, [r7, #23]
 800c768:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c772:	2b00      	cmp	r3, #0
 800c774:	d033      	beq.n	800c7de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c77a:	2b03      	cmp	r3, #3
 800c77c:	d81c      	bhi.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800c77e:	a201      	add	r2, pc, #4	; (adr r2, 800c784 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800c780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c784:	0800c7bf 	.word	0x0800c7bf
 800c788:	0800c799 	.word	0x0800c799
 800c78c:	0800c7a7 	.word	0x0800c7a7
 800c790:	0800c7bf 	.word	0x0800c7bf
 800c794:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c798:	4bb8      	ldr	r3, [pc, #736]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c79c:	4ab7      	ldr	r2, [pc, #732]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c79e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c7a4:	e00c      	b.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	2102      	movs	r1, #2
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 fefd 	bl	800d5ac <RCCEx_PLL2_Config>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c7b6:	e003      	b.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	75fb      	strb	r3, [r7, #23]
      break;
 800c7bc:	e000      	b.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800c7be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7c0:	7dfb      	ldrb	r3, [r7, #23]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d109      	bne.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c7c6:	4bad      	ldr	r3, [pc, #692]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c7c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7ca:	f023 0203 	bic.w	r2, r3, #3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7d2:	49aa      	ldr	r1, [pc, #680]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c7d8:	e001      	b.n	800c7de <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7da:	7dfb      	ldrb	r3, [r7, #23]
 800c7dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f000 8086 	beq.w	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c7ec:	4ba4      	ldr	r3, [pc, #656]	; (800ca80 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4aa3      	ldr	r2, [pc, #652]	; (800ca80 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800c7f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c7f8:	f7f9 f946 	bl	8005a88 <HAL_GetTick>
 800c7fc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c7fe:	e009      	b.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c800:	f7f9 f942 	bl	8005a88 <HAL_GetTick>
 800c804:	4602      	mov	r2, r0
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	1ad3      	subs	r3, r2, r3
 800c80a:	2b64      	cmp	r3, #100	; 0x64
 800c80c:	d902      	bls.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800c80e:	2303      	movs	r3, #3
 800c810:	75fb      	strb	r3, [r7, #23]
        break;
 800c812:	e005      	b.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c814:	4b9a      	ldr	r3, [pc, #616]	; (800ca80 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d0ef      	beq.n	800c800 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800c820:	7dfb      	ldrb	r3, [r7, #23]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d166      	bne.n	800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c826:	4b95      	ldr	r3, [pc, #596]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c828:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c830:	4053      	eors	r3, r2
 800c832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c836:	2b00      	cmp	r3, #0
 800c838:	d013      	beq.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c83a:	4b90      	ldr	r3, [pc, #576]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c83c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c83e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c842:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c844:	4b8d      	ldr	r3, [pc, #564]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c848:	4a8c      	ldr	r2, [pc, #560]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c84a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c84e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c850:	4b8a      	ldr	r3, [pc, #552]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c854:	4a89      	ldr	r2, [pc, #548]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c85a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c85c:	4a87      	ldr	r2, [pc, #540]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c86c:	d115      	bne.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c86e:	f7f9 f90b 	bl	8005a88 <HAL_GetTick>
 800c872:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c874:	e00b      	b.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c876:	f7f9 f907 	bl	8005a88 <HAL_GetTick>
 800c87a:	4602      	mov	r2, r0
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	1ad3      	subs	r3, r2, r3
 800c880:	f241 3288 	movw	r2, #5000	; 0x1388
 800c884:	4293      	cmp	r3, r2
 800c886:	d902      	bls.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800c888:	2303      	movs	r3, #3
 800c88a:	75fb      	strb	r3, [r7, #23]
            break;
 800c88c:	e005      	b.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c88e:	4b7b      	ldr	r3, [pc, #492]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c892:	f003 0302 	and.w	r3, r3, #2
 800c896:	2b00      	cmp	r3, #0
 800c898:	d0ed      	beq.n	800c876 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800c89a:	7dfb      	ldrb	r3, [r7, #23]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d126      	bne.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c8a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8ae:	d10d      	bne.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800c8b0:	4b72      	ldr	r3, [pc, #456]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c8be:	0919      	lsrs	r1, r3, #4
 800c8c0:	4b70      	ldr	r3, [pc, #448]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800c8c2:	400b      	ands	r3, r1
 800c8c4:	496d      	ldr	r1, [pc, #436]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	610b      	str	r3, [r1, #16]
 800c8ca:	e005      	b.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800c8cc:	4b6b      	ldr	r3, [pc, #428]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c8ce:	691b      	ldr	r3, [r3, #16]
 800c8d0:	4a6a      	ldr	r2, [pc, #424]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c8d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c8d6:	6113      	str	r3, [r2, #16]
 800c8d8:	4b68      	ldr	r3, [pc, #416]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c8da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c8e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c8e6:	4965      	ldr	r1, [pc, #404]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	670b      	str	r3, [r1, #112]	; 0x70
 800c8ec:	e004      	b.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c8ee:	7dfb      	ldrb	r3, [r7, #23]
 800c8f0:	75bb      	strb	r3, [r7, #22]
 800c8f2:	e001      	b.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8f4:	7dfb      	ldrb	r3, [r7, #23]
 800c8f6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f003 0301 	and.w	r3, r3, #1
 800c900:	2b00      	cmp	r3, #0
 800c902:	d07e      	beq.n	800ca02 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c908:	2b28      	cmp	r3, #40	; 0x28
 800c90a:	d867      	bhi.n	800c9dc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800c90c:	a201      	add	r2, pc, #4	; (adr r2, 800c914 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800c90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c912:	bf00      	nop
 800c914:	0800c9e3 	.word	0x0800c9e3
 800c918:	0800c9dd 	.word	0x0800c9dd
 800c91c:	0800c9dd 	.word	0x0800c9dd
 800c920:	0800c9dd 	.word	0x0800c9dd
 800c924:	0800c9dd 	.word	0x0800c9dd
 800c928:	0800c9dd 	.word	0x0800c9dd
 800c92c:	0800c9dd 	.word	0x0800c9dd
 800c930:	0800c9dd 	.word	0x0800c9dd
 800c934:	0800c9b9 	.word	0x0800c9b9
 800c938:	0800c9dd 	.word	0x0800c9dd
 800c93c:	0800c9dd 	.word	0x0800c9dd
 800c940:	0800c9dd 	.word	0x0800c9dd
 800c944:	0800c9dd 	.word	0x0800c9dd
 800c948:	0800c9dd 	.word	0x0800c9dd
 800c94c:	0800c9dd 	.word	0x0800c9dd
 800c950:	0800c9dd 	.word	0x0800c9dd
 800c954:	0800c9cb 	.word	0x0800c9cb
 800c958:	0800c9dd 	.word	0x0800c9dd
 800c95c:	0800c9dd 	.word	0x0800c9dd
 800c960:	0800c9dd 	.word	0x0800c9dd
 800c964:	0800c9dd 	.word	0x0800c9dd
 800c968:	0800c9dd 	.word	0x0800c9dd
 800c96c:	0800c9dd 	.word	0x0800c9dd
 800c970:	0800c9dd 	.word	0x0800c9dd
 800c974:	0800c9e3 	.word	0x0800c9e3
 800c978:	0800c9dd 	.word	0x0800c9dd
 800c97c:	0800c9dd 	.word	0x0800c9dd
 800c980:	0800c9dd 	.word	0x0800c9dd
 800c984:	0800c9dd 	.word	0x0800c9dd
 800c988:	0800c9dd 	.word	0x0800c9dd
 800c98c:	0800c9dd 	.word	0x0800c9dd
 800c990:	0800c9dd 	.word	0x0800c9dd
 800c994:	0800c9e3 	.word	0x0800c9e3
 800c998:	0800c9dd 	.word	0x0800c9dd
 800c99c:	0800c9dd 	.word	0x0800c9dd
 800c9a0:	0800c9dd 	.word	0x0800c9dd
 800c9a4:	0800c9dd 	.word	0x0800c9dd
 800c9a8:	0800c9dd 	.word	0x0800c9dd
 800c9ac:	0800c9dd 	.word	0x0800c9dd
 800c9b0:	0800c9dd 	.word	0x0800c9dd
 800c9b4:	0800c9e3 	.word	0x0800c9e3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	3304      	adds	r3, #4
 800c9bc:	2101      	movs	r1, #1
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f000 fdf4 	bl	800d5ac <RCCEx_PLL2_Config>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c9c8:	e00c      	b.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	3324      	adds	r3, #36	; 0x24
 800c9ce:	2101      	movs	r1, #1
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f000 fe9d 	bl	800d710 <RCCEx_PLL3_Config>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c9da:	e003      	b.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	75fb      	strb	r3, [r7, #23]
      break;
 800c9e0:	e000      	b.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800c9e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9e4:	7dfb      	ldrb	r3, [r7, #23]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d109      	bne.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c9ea:	4b24      	ldr	r3, [pc, #144]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9ee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9f6:	4921      	ldr	r1, [pc, #132]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	654b      	str	r3, [r1, #84]	; 0x54
 800c9fc:	e001      	b.n	800ca02 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ca00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f003 0302 	and.w	r3, r3, #2
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d03e      	beq.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca12:	2b05      	cmp	r3, #5
 800ca14:	d820      	bhi.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800ca16:	a201      	add	r2, pc, #4	; (adr r2, 800ca1c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800ca18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca1c:	0800ca5f 	.word	0x0800ca5f
 800ca20:	0800ca35 	.word	0x0800ca35
 800ca24:	0800ca47 	.word	0x0800ca47
 800ca28:	0800ca5f 	.word	0x0800ca5f
 800ca2c:	0800ca5f 	.word	0x0800ca5f
 800ca30:	0800ca5f 	.word	0x0800ca5f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	3304      	adds	r3, #4
 800ca38:	2101      	movs	r1, #1
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f000 fdb6 	bl	800d5ac <RCCEx_PLL2_Config>
 800ca40:	4603      	mov	r3, r0
 800ca42:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ca44:	e00c      	b.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	3324      	adds	r3, #36	; 0x24
 800ca4a:	2101      	movs	r1, #1
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f000 fe5f 	bl	800d710 <RCCEx_PLL3_Config>
 800ca52:	4603      	mov	r3, r0
 800ca54:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ca56:	e003      	b.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	75fb      	strb	r3, [r7, #23]
      break;
 800ca5c:	e000      	b.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800ca5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca60:	7dfb      	ldrb	r3, [r7, #23]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d110      	bne.n	800ca88 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ca66:	4b05      	ldr	r3, [pc, #20]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ca68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca6a:	f023 0207 	bic.w	r2, r3, #7
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca72:	4902      	ldr	r1, [pc, #8]	; (800ca7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ca74:	4313      	orrs	r3, r2
 800ca76:	654b      	str	r3, [r1, #84]	; 0x54
 800ca78:	e008      	b.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800ca7a:	bf00      	nop
 800ca7c:	58024400 	.word	0x58024400
 800ca80:	58024800 	.word	0x58024800
 800ca84:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca88:	7dfb      	ldrb	r3, [r7, #23]
 800ca8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 0304 	and.w	r3, r3, #4
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d039      	beq.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca9e:	2b05      	cmp	r3, #5
 800caa0:	d820      	bhi.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800caa2:	a201      	add	r2, pc, #4	; (adr r2, 800caa8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800caa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa8:	0800caeb 	.word	0x0800caeb
 800caac:	0800cac1 	.word	0x0800cac1
 800cab0:	0800cad3 	.word	0x0800cad3
 800cab4:	0800caeb 	.word	0x0800caeb
 800cab8:	0800caeb 	.word	0x0800caeb
 800cabc:	0800caeb 	.word	0x0800caeb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	3304      	adds	r3, #4
 800cac4:	2101      	movs	r1, #1
 800cac6:	4618      	mov	r0, r3
 800cac8:	f000 fd70 	bl	800d5ac <RCCEx_PLL2_Config>
 800cacc:	4603      	mov	r3, r0
 800cace:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cad0:	e00c      	b.n	800caec <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	3324      	adds	r3, #36	; 0x24
 800cad6:	2101      	movs	r1, #1
 800cad8:	4618      	mov	r0, r3
 800cada:	f000 fe19 	bl	800d710 <RCCEx_PLL3_Config>
 800cade:	4603      	mov	r3, r0
 800cae0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cae2:	e003      	b.n	800caec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cae4:	2301      	movs	r3, #1
 800cae6:	75fb      	strb	r3, [r7, #23]
      break;
 800cae8:	e000      	b.n	800caec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800caea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800caec:	7dfb      	ldrb	r3, [r7, #23]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d10a      	bne.n	800cb08 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800caf2:	4bb7      	ldr	r3, [pc, #732]	; (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800caf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caf6:	f023 0207 	bic.w	r2, r3, #7
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb00:	49b3      	ldr	r1, [pc, #716]	; (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cb02:	4313      	orrs	r3, r2
 800cb04:	658b      	str	r3, [r1, #88]	; 0x58
 800cb06:	e001      	b.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb08:	7dfb      	ldrb	r3, [r7, #23]
 800cb0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f003 0320 	and.w	r3, r3, #32
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d04b      	beq.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb22:	d02e      	beq.n	800cb82 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800cb24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb28:	d828      	bhi.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800cb2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb2e:	d02a      	beq.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800cb30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb34:	d822      	bhi.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800cb36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb3a:	d026      	beq.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800cb3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb40:	d81c      	bhi.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800cb42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb46:	d010      	beq.n	800cb6a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800cb48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb4c:	d816      	bhi.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d01d      	beq.n	800cb8e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800cb52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb56:	d111      	bne.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f000 fd24 	bl	800d5ac <RCCEx_PLL2_Config>
 800cb64:	4603      	mov	r3, r0
 800cb66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cb68:	e012      	b.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	3324      	adds	r3, #36	; 0x24
 800cb6e:	2102      	movs	r1, #2
 800cb70:	4618      	mov	r0, r3
 800cb72:	f000 fdcd 	bl	800d710 <RCCEx_PLL3_Config>
 800cb76:	4603      	mov	r3, r0
 800cb78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cb7a:	e009      	b.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	75fb      	strb	r3, [r7, #23]
      break;
 800cb80:	e006      	b.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800cb82:	bf00      	nop
 800cb84:	e004      	b.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800cb86:	bf00      	nop
 800cb88:	e002      	b.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800cb8a:	bf00      	nop
 800cb8c:	e000      	b.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800cb8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cb90:	7dfb      	ldrb	r3, [r7, #23]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d10a      	bne.n	800cbac <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cb96:	4b8e      	ldr	r3, [pc, #568]	; (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb9a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cba4:	498a      	ldr	r1, [pc, #552]	; (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cba6:	4313      	orrs	r3, r2
 800cba8:	654b      	str	r3, [r1, #84]	; 0x54
 800cbaa:	e001      	b.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbac:	7dfb      	ldrb	r3, [r7, #23]
 800cbae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d04b      	beq.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cbc2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cbc6:	d02e      	beq.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800cbc8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cbcc:	d828      	bhi.n	800cc20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800cbce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbd2:	d02a      	beq.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800cbd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbd8:	d822      	bhi.n	800cc20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800cbda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cbde:	d026      	beq.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800cbe0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cbe4:	d81c      	bhi.n	800cc20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800cbe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbea:	d010      	beq.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800cbec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbf0:	d816      	bhi.n	800cc20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d01d      	beq.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800cbf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbfa:	d111      	bne.n	800cc20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	3304      	adds	r3, #4
 800cc00:	2100      	movs	r1, #0
 800cc02:	4618      	mov	r0, r3
 800cc04:	f000 fcd2 	bl	800d5ac <RCCEx_PLL2_Config>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cc0c:	e012      	b.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	3324      	adds	r3, #36	; 0x24
 800cc12:	2102      	movs	r1, #2
 800cc14:	4618      	mov	r0, r3
 800cc16:	f000 fd7b 	bl	800d710 <RCCEx_PLL3_Config>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cc1e:	e009      	b.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc20:	2301      	movs	r3, #1
 800cc22:	75fb      	strb	r3, [r7, #23]
      break;
 800cc24:	e006      	b.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800cc26:	bf00      	nop
 800cc28:	e004      	b.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800cc2a:	bf00      	nop
 800cc2c:	e002      	b.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800cc2e:	bf00      	nop
 800cc30:	e000      	b.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800cc32:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc34:	7dfb      	ldrb	r3, [r7, #23]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d10a      	bne.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cc3a:	4b65      	ldr	r3, [pc, #404]	; (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cc3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc3e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cc48:	4961      	ldr	r1, [pc, #388]	; (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	658b      	str	r3, [r1, #88]	; 0x58
 800cc4e:	e001      	b.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc50:	7dfb      	ldrb	r3, [r7, #23]
 800cc52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d04b      	beq.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cc66:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cc6a:	d02e      	beq.n	800ccca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800cc6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cc70:	d828      	bhi.n	800ccc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800cc72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc76:	d02a      	beq.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800cc78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc7c:	d822      	bhi.n	800ccc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800cc7e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cc82:	d026      	beq.n	800ccd2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800cc84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cc88:	d81c      	bhi.n	800ccc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800cc8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc8e:	d010      	beq.n	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800cc90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc94:	d816      	bhi.n	800ccc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d01d      	beq.n	800ccd6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800cc9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc9e:	d111      	bne.n	800ccc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	3304      	adds	r3, #4
 800cca4:	2100      	movs	r1, #0
 800cca6:	4618      	mov	r0, r3
 800cca8:	f000 fc80 	bl	800d5ac <RCCEx_PLL2_Config>
 800ccac:	4603      	mov	r3, r0
 800ccae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ccb0:	e012      	b.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	3324      	adds	r3, #36	; 0x24
 800ccb6:	2102      	movs	r1, #2
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f000 fd29 	bl	800d710 <RCCEx_PLL3_Config>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ccc2:	e009      	b.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	75fb      	strb	r3, [r7, #23]
      break;
 800ccc8:	e006      	b.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ccca:	bf00      	nop
 800cccc:	e004      	b.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ccce:	bf00      	nop
 800ccd0:	e002      	b.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ccd2:	bf00      	nop
 800ccd4:	e000      	b.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ccd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ccd8:	7dfb      	ldrb	r3, [r7, #23]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d10a      	bne.n	800ccf4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ccde:	4b3c      	ldr	r3, [pc, #240]	; (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cce2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ccec:	4938      	ldr	r1, [pc, #224]	; (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	658b      	str	r3, [r1, #88]	; 0x58
 800ccf2:	e001      	b.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccf4:	7dfb      	ldrb	r3, [r7, #23]
 800ccf6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f003 0308 	and.w	r3, r3, #8
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d01a      	beq.n	800cd3a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd0e:	d10a      	bne.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	3324      	adds	r3, #36	; 0x24
 800cd14:	2102      	movs	r1, #2
 800cd16:	4618      	mov	r0, r3
 800cd18:	f000 fcfa 	bl	800d710 <RCCEx_PLL3_Config>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d001      	beq.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800cd22:	2301      	movs	r3, #1
 800cd24:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800cd26:	4b2a      	ldr	r3, [pc, #168]	; (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cd28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd34:	4926      	ldr	r1, [pc, #152]	; (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cd36:	4313      	orrs	r3, r2
 800cd38:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f003 0310 	and.w	r3, r3, #16
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d01a      	beq.n	800cd7c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd50:	d10a      	bne.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	3324      	adds	r3, #36	; 0x24
 800cd56:	2102      	movs	r1, #2
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f000 fcd9 	bl	800d710 <RCCEx_PLL3_Config>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d001      	beq.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800cd64:	2301      	movs	r3, #1
 800cd66:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cd68:	4b19      	ldr	r3, [pc, #100]	; (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cd6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd76:	4916      	ldr	r1, [pc, #88]	; (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d036      	beq.n	800cdf6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cd8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd92:	d01f      	beq.n	800cdd4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800cd94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd98:	d817      	bhi.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d003      	beq.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800cd9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cda2:	d009      	beq.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800cda4:	e011      	b.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	3304      	adds	r3, #4
 800cdaa:	2100      	movs	r1, #0
 800cdac:	4618      	mov	r0, r3
 800cdae:	f000 fbfd 	bl	800d5ac <RCCEx_PLL2_Config>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800cdb6:	e00e      	b.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	3324      	adds	r3, #36	; 0x24
 800cdbc:	2102      	movs	r1, #2
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f000 fca6 	bl	800d710 <RCCEx_PLL3_Config>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800cdc8:	e005      	b.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	75fb      	strb	r3, [r7, #23]
      break;
 800cdce:	e002      	b.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800cdd0:	58024400 	.word	0x58024400
      break;
 800cdd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cdd6:	7dfb      	ldrb	r3, [r7, #23]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d10a      	bne.n	800cdf2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cddc:	4b93      	ldr	r3, [pc, #588]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cdde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cde0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cdea:	4990      	ldr	r1, [pc, #576]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cdec:	4313      	orrs	r3, r2
 800cdee:	658b      	str	r3, [r1, #88]	; 0x58
 800cdf0:	e001      	b.n	800cdf6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdf2:	7dfb      	ldrb	r3, [r7, #23]
 800cdf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d033      	beq.n	800ce6a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ce0c:	d01c      	beq.n	800ce48 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800ce0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ce12:	d816      	bhi.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800ce14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce18:	d003      	beq.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800ce1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce1e:	d007      	beq.n	800ce30 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800ce20:	e00f      	b.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce22:	4b82      	ldr	r3, [pc, #520]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ce24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce26:	4a81      	ldr	r2, [pc, #516]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ce28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ce2e:	e00c      	b.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	3324      	adds	r3, #36	; 0x24
 800ce34:	2101      	movs	r1, #1
 800ce36:	4618      	mov	r0, r3
 800ce38:	f000 fc6a 	bl	800d710 <RCCEx_PLL3_Config>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ce40:	e003      	b.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce42:	2301      	movs	r3, #1
 800ce44:	75fb      	strb	r3, [r7, #23]
      break;
 800ce46:	e000      	b.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800ce48:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ce4a:	7dfb      	ldrb	r3, [r7, #23]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d10a      	bne.n	800ce66 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ce50:	4b76      	ldr	r3, [pc, #472]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ce52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce5e:	4973      	ldr	r1, [pc, #460]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ce60:	4313      	orrs	r3, r2
 800ce62:	654b      	str	r3, [r1, #84]	; 0x54
 800ce64:	e001      	b.n	800ce6a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce66:	7dfb      	ldrb	r3, [r7, #23]
 800ce68:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d029      	beq.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d003      	beq.n	800ce86 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800ce7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce82:	d007      	beq.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800ce84:	e00f      	b.n	800cea6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce86:	4b69      	ldr	r3, [pc, #420]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ce88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8a:	4a68      	ldr	r2, [pc, #416]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ce8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ce92:	e00b      	b.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	3304      	adds	r3, #4
 800ce98:	2102      	movs	r1, #2
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f000 fb86 	bl	800d5ac <RCCEx_PLL2_Config>
 800cea0:	4603      	mov	r3, r0
 800cea2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800cea4:	e002      	b.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800cea6:	2301      	movs	r3, #1
 800cea8:	75fb      	strb	r3, [r7, #23]
      break;
 800ceaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ceac:	7dfb      	ldrb	r3, [r7, #23]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d109      	bne.n	800cec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ceb2:	4b5e      	ldr	r3, [pc, #376]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ceb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cebe:	495b      	ldr	r1, [pc, #364]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cec0:	4313      	orrs	r3, r2
 800cec2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800cec4:	e001      	b.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cec6:	7dfb      	ldrb	r3, [r7, #23]
 800cec8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00a      	beq.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	3324      	adds	r3, #36	; 0x24
 800ceda:	2102      	movs	r1, #2
 800cedc:	4618      	mov	r0, r3
 800cede:	f000 fc17 	bl	800d710 <RCCEx_PLL3_Config>
 800cee2:	4603      	mov	r3, r0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d001      	beq.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800cee8:	2301      	movs	r3, #1
 800ceea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d030      	beq.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cefc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf00:	d017      	beq.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800cf02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf06:	d811      	bhi.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800cf08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf0c:	d013      	beq.n	800cf36 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800cf0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf12:	d80b      	bhi.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d010      	beq.n	800cf3a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800cf18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf1c:	d106      	bne.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf1e:	4b43      	ldr	r3, [pc, #268]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf22:	4a42      	ldr	r2, [pc, #264]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cf24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800cf2a:	e007      	b.n	800cf3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	75fb      	strb	r3, [r7, #23]
      break;
 800cf30:	e004      	b.n	800cf3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800cf32:	bf00      	nop
 800cf34:	e002      	b.n	800cf3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800cf36:	bf00      	nop
 800cf38:	e000      	b.n	800cf3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800cf3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cf3c:	7dfb      	ldrb	r3, [r7, #23]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d109      	bne.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cf42:	4b3a      	ldr	r3, [pc, #232]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cf44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf4e:	4937      	ldr	r1, [pc, #220]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cf50:	4313      	orrs	r3, r2
 800cf52:	654b      	str	r3, [r1, #84]	; 0x54
 800cf54:	e001      	b.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf56:	7dfb      	ldrb	r3, [r7, #23]
 800cf58:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d008      	beq.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cf66:	4b31      	ldr	r3, [pc, #196]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cf68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf72:	492e      	ldr	r1, [pc, #184]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cf74:	4313      	orrs	r3, r2
 800cf76:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d009      	beq.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800cf84:	4b29      	ldr	r3, [pc, #164]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cf86:	691b      	ldr	r3, [r3, #16]
 800cf88:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cf92:	4926      	ldr	r1, [pc, #152]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cf94:	4313      	orrs	r3, r2
 800cf96:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d008      	beq.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cfa4:	4b21      	ldr	r3, [pc, #132]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cfa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfa8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfb0:	491e      	ldr	r1, [pc, #120]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00d      	beq.n	800cfde <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cfc2:	4b1a      	ldr	r3, [pc, #104]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cfc4:	691b      	ldr	r3, [r3, #16]
 800cfc6:	4a19      	ldr	r2, [pc, #100]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cfc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cfcc:	6113      	str	r3, [r2, #16]
 800cfce:	4b17      	ldr	r3, [pc, #92]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cfd0:	691a      	ldr	r2, [r3, #16]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cfd8:	4914      	ldr	r1, [pc, #80]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	da08      	bge.n	800cff8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cfe6:	4b11      	ldr	r3, [pc, #68]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cfe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cff2:	490e      	ldr	r1, [pc, #56]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800cff4:	4313      	orrs	r3, r2
 800cff6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d000:	2b00      	cmp	r3, #0
 800d002:	d009      	beq.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d004:	4b09      	ldr	r3, [pc, #36]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d008:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d012:	4906      	ldr	r1, [pc, #24]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d014:	4313      	orrs	r3, r2
 800d016:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800d018:	7dbb      	ldrb	r3, [r7, #22]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d101      	bne.n	800d022 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800d01e:	2300      	movs	r3, #0
 800d020:	e000      	b.n	800d024 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800d022:	2301      	movs	r3, #1
}
 800d024:	4618      	mov	r0, r3
 800d026:	3718      	adds	r7, #24
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	58024400 	.word	0x58024400

0800d030 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d034:	f7ff f860 	bl	800c0f8 <HAL_RCC_GetHCLKFreq>
 800d038:	4602      	mov	r2, r0
 800d03a:	4b06      	ldr	r3, [pc, #24]	; (800d054 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d03c:	6a1b      	ldr	r3, [r3, #32]
 800d03e:	091b      	lsrs	r3, r3, #4
 800d040:	f003 0307 	and.w	r3, r3, #7
 800d044:	4904      	ldr	r1, [pc, #16]	; (800d058 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d046:	5ccb      	ldrb	r3, [r1, r3]
 800d048:	f003 031f 	and.w	r3, r3, #31
 800d04c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d050:	4618      	mov	r0, r3
 800d052:	bd80      	pop	{r7, pc}
 800d054:	58024400 	.word	0x58024400
 800d058:	08014e94 	.word	0x08014e94

0800d05c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b089      	sub	sp, #36	; 0x24
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d064:	4ba1      	ldr	r3, [pc, #644]	; (800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d068:	f003 0303 	and.w	r3, r3, #3
 800d06c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d06e:	4b9f      	ldr	r3, [pc, #636]	; (800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d072:	0b1b      	lsrs	r3, r3, #12
 800d074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d078:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d07a:	4b9c      	ldr	r3, [pc, #624]	; (800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07e:	091b      	lsrs	r3, r3, #4
 800d080:	f003 0301 	and.w	r3, r3, #1
 800d084:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d086:	4b99      	ldr	r3, [pc, #612]	; (800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d08a:	08db      	lsrs	r3, r3, #3
 800d08c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d090:	693a      	ldr	r2, [r7, #16]
 800d092:	fb02 f303 	mul.w	r3, r2, r3
 800d096:	ee07 3a90 	vmov	s15, r3
 800d09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d09e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	f000 8111 	beq.w	800d2cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	2b02      	cmp	r3, #2
 800d0ae:	f000 8083 	beq.w	800d1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	f200 80a1 	bhi.w	800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d003      	beq.n	800d0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d056      	beq.n	800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d0c6:	e099      	b.n	800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0c8:	4b88      	ldr	r3, [pc, #544]	; (800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f003 0320 	and.w	r3, r3, #32
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d02d      	beq.n	800d130 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d0d4:	4b85      	ldr	r3, [pc, #532]	; (800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	08db      	lsrs	r3, r3, #3
 800d0da:	f003 0303 	and.w	r3, r3, #3
 800d0de:	4a84      	ldr	r2, [pc, #528]	; (800d2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d0e0:	fa22 f303 	lsr.w	r3, r2, r3
 800d0e4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	ee07 3a90 	vmov	s15, r3
 800d0ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	ee07 3a90 	vmov	s15, r3
 800d0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0fe:	4b7b      	ldr	r3, [pc, #492]	; (800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d106:	ee07 3a90 	vmov	s15, r3
 800d10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d10e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d112:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d11e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d12a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d12e:	e087      	b.n	800d240 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	ee07 3a90 	vmov	s15, r3
 800d136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d13a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d142:	4b6a      	ldr	r3, [pc, #424]	; (800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d14a:	ee07 3a90 	vmov	s15, r3
 800d14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d152:	ed97 6a03 	vldr	s12, [r7, #12]
 800d156:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d16e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d172:	e065      	b.n	800d240 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	ee07 3a90 	vmov	s15, r3
 800d17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d17e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d186:	4b59      	ldr	r3, [pc, #356]	; (800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d18e:	ee07 3a90 	vmov	s15, r3
 800d192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d196:	ed97 6a03 	vldr	s12, [r7, #12]
 800d19a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d1b6:	e043      	b.n	800d240 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	ee07 3a90 	vmov	s15, r3
 800d1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d300 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1ca:	4b48      	ldr	r3, [pc, #288]	; (800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1d2:	ee07 3a90 	vmov	s15, r3
 800d1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1da:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1de:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d1fa:	e021      	b.n	800d240 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	ee07 3a90 	vmov	s15, r3
 800d202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d206:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d20e:	4b37      	ldr	r3, [pc, #220]	; (800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d216:	ee07 3a90 	vmov	s15, r3
 800d21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d21e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d222:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d22e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d23a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d23e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800d240:	4b2a      	ldr	r3, [pc, #168]	; (800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d244:	0a5b      	lsrs	r3, r3, #9
 800d246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d24a:	ee07 3a90 	vmov	s15, r3
 800d24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d252:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d256:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d25a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d25e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d266:	ee17 2a90 	vmov	r2, s15
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800d26e:	4b1f      	ldr	r3, [pc, #124]	; (800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d272:	0c1b      	lsrs	r3, r3, #16
 800d274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d278:	ee07 3a90 	vmov	s15, r3
 800d27c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d280:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d284:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d288:	edd7 6a07 	vldr	s13, [r7, #28]
 800d28c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d294:	ee17 2a90 	vmov	r2, s15
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800d29c:	4b13      	ldr	r3, [pc, #76]	; (800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a0:	0e1b      	lsrs	r3, r3, #24
 800d2a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2a6:	ee07 3a90 	vmov	s15, r3
 800d2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2c2:	ee17 2a90 	vmov	r2, s15
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d2ca:	e008      	b.n	800d2de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	609a      	str	r2, [r3, #8]
}
 800d2de:	bf00      	nop
 800d2e0:	3724      	adds	r7, #36	; 0x24
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	58024400 	.word	0x58024400
 800d2f0:	03d09000 	.word	0x03d09000
 800d2f4:	46000000 	.word	0x46000000
 800d2f8:	4c742400 	.word	0x4c742400
 800d2fc:	4a742400 	.word	0x4a742400
 800d300:	4bbebc20 	.word	0x4bbebc20

0800d304 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800d304:	b480      	push	{r7}
 800d306:	b089      	sub	sp, #36	; 0x24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d30c:	4ba1      	ldr	r3, [pc, #644]	; (800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d310:	f003 0303 	and.w	r3, r3, #3
 800d314:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800d316:	4b9f      	ldr	r3, [pc, #636]	; (800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d31a:	0d1b      	lsrs	r3, r3, #20
 800d31c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d320:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d322:	4b9c      	ldr	r3, [pc, #624]	; (800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d326:	0a1b      	lsrs	r3, r3, #8
 800d328:	f003 0301 	and.w	r3, r3, #1
 800d32c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800d32e:	4b99      	ldr	r3, [pc, #612]	; (800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d332:	08db      	lsrs	r3, r3, #3
 800d334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d338:	693a      	ldr	r2, [r7, #16]
 800d33a:	fb02 f303 	mul.w	r3, r2, r3
 800d33e:	ee07 3a90 	vmov	s15, r3
 800d342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d346:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f000 8111 	beq.w	800d574 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	2b02      	cmp	r3, #2
 800d356:	f000 8083 	beq.w	800d460 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	f200 80a1 	bhi.w	800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d362:	69bb      	ldr	r3, [r7, #24]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d003      	beq.n	800d370 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	d056      	beq.n	800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d36e:	e099      	b.n	800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d370:	4b88      	ldr	r3, [pc, #544]	; (800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f003 0320 	and.w	r3, r3, #32
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d02d      	beq.n	800d3d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d37c:	4b85      	ldr	r3, [pc, #532]	; (800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	08db      	lsrs	r3, r3, #3
 800d382:	f003 0303 	and.w	r3, r3, #3
 800d386:	4a84      	ldr	r2, [pc, #528]	; (800d598 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d388:	fa22 f303 	lsr.w	r3, r2, r3
 800d38c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	ee07 3a90 	vmov	s15, r3
 800d394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	ee07 3a90 	vmov	s15, r3
 800d39e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3a6:	4b7b      	ldr	r3, [pc, #492]	; (800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3ae:	ee07 3a90 	vmov	s15, r3
 800d3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d3d6:	e087      	b.n	800d4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	ee07 3a90 	vmov	s15, r3
 800d3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d3e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3ea:	4b6a      	ldr	r3, [pc, #424]	; (800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3f2:	ee07 3a90 	vmov	s15, r3
 800d3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d40a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d412:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d41a:	e065      	b.n	800d4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	ee07 3a90 	vmov	s15, r3
 800d422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d426:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d42a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d42e:	4b59      	ldr	r3, [pc, #356]	; (800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d436:	ee07 3a90 	vmov	s15, r3
 800d43a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d43e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d442:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d44a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d44e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d45a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d45e:	e043      	b.n	800d4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	ee07 3a90 	vmov	s15, r3
 800d466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d46a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d46e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d472:	4b48      	ldr	r3, [pc, #288]	; (800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d47a:	ee07 3a90 	vmov	s15, r3
 800d47e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d482:	ed97 6a03 	vldr	s12, [r7, #12]
 800d486:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d48a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d48e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d49a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d49e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d4a2:	e021      	b.n	800d4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	ee07 3a90 	vmov	s15, r3
 800d4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d4b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4b6:	4b37      	ldr	r3, [pc, #220]	; (800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4be:	ee07 3a90 	vmov	s15, r3
 800d4c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d4e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d4e8:	4b2a      	ldr	r3, [pc, #168]	; (800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ec:	0a5b      	lsrs	r3, r3, #9
 800d4ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4f2:	ee07 3a90 	vmov	s15, r3
 800d4f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d502:	edd7 6a07 	vldr	s13, [r7, #28]
 800d506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d50a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d50e:	ee17 2a90 	vmov	r2, s15
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d516:	4b1f      	ldr	r3, [pc, #124]	; (800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d51a:	0c1b      	lsrs	r3, r3, #16
 800d51c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d520:	ee07 3a90 	vmov	s15, r3
 800d524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d528:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d52c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d530:	edd7 6a07 	vldr	s13, [r7, #28]
 800d534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d53c:	ee17 2a90 	vmov	r2, s15
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d544:	4b13      	ldr	r3, [pc, #76]	; (800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d548:	0e1b      	lsrs	r3, r3, #24
 800d54a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d54e:	ee07 3a90 	vmov	s15, r3
 800d552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d55a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d55e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d56a:	ee17 2a90 	vmov	r2, s15
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d572:	e008      	b.n	800d586 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2200      	movs	r2, #0
 800d57e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2200      	movs	r2, #0
 800d584:	609a      	str	r2, [r3, #8]
}
 800d586:	bf00      	nop
 800d588:	3724      	adds	r7, #36	; 0x24
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr
 800d592:	bf00      	nop
 800d594:	58024400 	.word	0x58024400
 800d598:	03d09000 	.word	0x03d09000
 800d59c:	46000000 	.word	0x46000000
 800d5a0:	4c742400 	.word	0x4c742400
 800d5a4:	4a742400 	.word	0x4a742400
 800d5a8:	4bbebc20 	.word	0x4bbebc20

0800d5ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d5ba:	4b53      	ldr	r3, [pc, #332]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5be:	f003 0303 	and.w	r3, r3, #3
 800d5c2:	2b03      	cmp	r3, #3
 800d5c4:	d101      	bne.n	800d5ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e099      	b.n	800d6fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d5ca:	4b4f      	ldr	r3, [pc, #316]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4a4e      	ldr	r2, [pc, #312]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d5d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d5d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5d6:	f7f8 fa57 	bl	8005a88 <HAL_GetTick>
 800d5da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d5dc:	e008      	b.n	800d5f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d5de:	f7f8 fa53 	bl	8005a88 <HAL_GetTick>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	1ad3      	subs	r3, r2, r3
 800d5e8:	2b02      	cmp	r3, #2
 800d5ea:	d901      	bls.n	800d5f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	e086      	b.n	800d6fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d5f0:	4b45      	ldr	r3, [pc, #276]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1f0      	bne.n	800d5de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d5fc:	4b42      	ldr	r3, [pc, #264]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d600:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	031b      	lsls	r3, r3, #12
 800d60a:	493f      	ldr	r1, [pc, #252]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d60c:	4313      	orrs	r3, r2
 800d60e:	628b      	str	r3, [r1, #40]	; 0x28
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	3b01      	subs	r3, #1
 800d616:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	689b      	ldr	r3, [r3, #8]
 800d61e:	3b01      	subs	r3, #1
 800d620:	025b      	lsls	r3, r3, #9
 800d622:	b29b      	uxth	r3, r3
 800d624:	431a      	orrs	r2, r3
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	3b01      	subs	r3, #1
 800d62c:	041b      	lsls	r3, r3, #16
 800d62e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d632:	431a      	orrs	r2, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	691b      	ldr	r3, [r3, #16]
 800d638:	3b01      	subs	r3, #1
 800d63a:	061b      	lsls	r3, r3, #24
 800d63c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d640:	4931      	ldr	r1, [pc, #196]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d642:	4313      	orrs	r3, r2
 800d644:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d646:	4b30      	ldr	r3, [pc, #192]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	695b      	ldr	r3, [r3, #20]
 800d652:	492d      	ldr	r1, [pc, #180]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d654:	4313      	orrs	r3, r2
 800d656:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d658:	4b2b      	ldr	r3, [pc, #172]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d65c:	f023 0220 	bic.w	r2, r3, #32
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	699b      	ldr	r3, [r3, #24]
 800d664:	4928      	ldr	r1, [pc, #160]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d666:	4313      	orrs	r3, r2
 800d668:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d66a:	4b27      	ldr	r3, [pc, #156]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66e:	4a26      	ldr	r2, [pc, #152]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d670:	f023 0310 	bic.w	r3, r3, #16
 800d674:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d676:	4b24      	ldr	r3, [pc, #144]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d67a:	4b24      	ldr	r3, [pc, #144]	; (800d70c <RCCEx_PLL2_Config+0x160>)
 800d67c:	4013      	ands	r3, r2
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	69d2      	ldr	r2, [r2, #28]
 800d682:	00d2      	lsls	r2, r2, #3
 800d684:	4920      	ldr	r1, [pc, #128]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d686:	4313      	orrs	r3, r2
 800d688:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d68a:	4b1f      	ldr	r3, [pc, #124]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d68e:	4a1e      	ldr	r2, [pc, #120]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d690:	f043 0310 	orr.w	r3, r3, #16
 800d694:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d106      	bne.n	800d6aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d69c:	4b1a      	ldr	r3, [pc, #104]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a0:	4a19      	ldr	r2, [pc, #100]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d6a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d6a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d6a8:	e00f      	b.n	800d6ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d106      	bne.n	800d6be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d6b0:	4b15      	ldr	r3, [pc, #84]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b4:	4a14      	ldr	r2, [pc, #80]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d6b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d6bc:	e005      	b.n	800d6ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d6be:	4b12      	ldr	r3, [pc, #72]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c2:	4a11      	ldr	r2, [pc, #68]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d6c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d6c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d6ca:	4b0f      	ldr	r3, [pc, #60]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a0e      	ldr	r2, [pc, #56]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d6d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d6d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6d6:	f7f8 f9d7 	bl	8005a88 <HAL_GetTick>
 800d6da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d6dc:	e008      	b.n	800d6f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d6de:	f7f8 f9d3 	bl	8005a88 <HAL_GetTick>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	1ad3      	subs	r3, r2, r3
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d901      	bls.n	800d6f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d6ec:	2303      	movs	r3, #3
 800d6ee:	e006      	b.n	800d6fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d6f0:	4b05      	ldr	r3, [pc, #20]	; (800d708 <RCCEx_PLL2_Config+0x15c>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d0f0      	beq.n	800d6de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3710      	adds	r7, #16
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	58024400 	.word	0x58024400
 800d70c:	ffff0007 	.word	0xffff0007

0800d710 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d71a:	2300      	movs	r3, #0
 800d71c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d71e:	4b53      	ldr	r3, [pc, #332]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d722:	f003 0303 	and.w	r3, r3, #3
 800d726:	2b03      	cmp	r3, #3
 800d728:	d101      	bne.n	800d72e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d72a:	2301      	movs	r3, #1
 800d72c:	e099      	b.n	800d862 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d72e:	4b4f      	ldr	r3, [pc, #316]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a4e      	ldr	r2, [pc, #312]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d73a:	f7f8 f9a5 	bl	8005a88 <HAL_GetTick>
 800d73e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d740:	e008      	b.n	800d754 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d742:	f7f8 f9a1 	bl	8005a88 <HAL_GetTick>
 800d746:	4602      	mov	r2, r0
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	1ad3      	subs	r3, r2, r3
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d901      	bls.n	800d754 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d750:	2303      	movs	r3, #3
 800d752:	e086      	b.n	800d862 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d754:	4b45      	ldr	r3, [pc, #276]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d1f0      	bne.n	800d742 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d760:	4b42      	ldr	r3, [pc, #264]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d764:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	051b      	lsls	r3, r3, #20
 800d76e:	493f      	ldr	r1, [pc, #252]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d770:	4313      	orrs	r3, r2
 800d772:	628b      	str	r3, [r1, #40]	; 0x28
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	3b01      	subs	r3, #1
 800d77a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	3b01      	subs	r3, #1
 800d784:	025b      	lsls	r3, r3, #9
 800d786:	b29b      	uxth	r3, r3
 800d788:	431a      	orrs	r2, r3
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	3b01      	subs	r3, #1
 800d790:	041b      	lsls	r3, r3, #16
 800d792:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d796:	431a      	orrs	r2, r3
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	691b      	ldr	r3, [r3, #16]
 800d79c:	3b01      	subs	r3, #1
 800d79e:	061b      	lsls	r3, r3, #24
 800d7a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d7a4:	4931      	ldr	r1, [pc, #196]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d7aa:	4b30      	ldr	r3, [pc, #192]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	695b      	ldr	r3, [r3, #20]
 800d7b6:	492d      	ldr	r1, [pc, #180]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d7bc:	4b2b      	ldr	r3, [pc, #172]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	699b      	ldr	r3, [r3, #24]
 800d7c8:	4928      	ldr	r1, [pc, #160]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d7ce:	4b27      	ldr	r3, [pc, #156]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d2:	4a26      	ldr	r2, [pc, #152]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d7d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d7da:	4b24      	ldr	r3, [pc, #144]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d7dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7de:	4b24      	ldr	r3, [pc, #144]	; (800d870 <RCCEx_PLL3_Config+0x160>)
 800d7e0:	4013      	ands	r3, r2
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	69d2      	ldr	r2, [r2, #28]
 800d7e6:	00d2      	lsls	r2, r2, #3
 800d7e8:	4920      	ldr	r1, [pc, #128]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d7ee:	4b1f      	ldr	r3, [pc, #124]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f2:	4a1e      	ldr	r2, [pc, #120]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d7f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d106      	bne.n	800d80e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d800:	4b1a      	ldr	r3, [pc, #104]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d804:	4a19      	ldr	r2, [pc, #100]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d806:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d80a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d80c:	e00f      	b.n	800d82e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	2b01      	cmp	r3, #1
 800d812:	d106      	bne.n	800d822 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d814:	4b15      	ldr	r3, [pc, #84]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d818:	4a14      	ldr	r2, [pc, #80]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d81a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d81e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d820:	e005      	b.n	800d82e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d822:	4b12      	ldr	r3, [pc, #72]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d826:	4a11      	ldr	r2, [pc, #68]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d828:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d82c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d82e:	4b0f      	ldr	r3, [pc, #60]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a0e      	ldr	r2, [pc, #56]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d83a:	f7f8 f925 	bl	8005a88 <HAL_GetTick>
 800d83e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d840:	e008      	b.n	800d854 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d842:	f7f8 f921 	bl	8005a88 <HAL_GetTick>
 800d846:	4602      	mov	r2, r0
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	1ad3      	subs	r3, r2, r3
 800d84c:	2b02      	cmp	r3, #2
 800d84e:	d901      	bls.n	800d854 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d850:	2303      	movs	r3, #3
 800d852:	e006      	b.n	800d862 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d854:	4b05      	ldr	r3, [pc, #20]	; (800d86c <RCCEx_PLL3_Config+0x15c>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d0f0      	beq.n	800d842 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d860:	7bfb      	ldrb	r3, [r7, #15]
}
 800d862:	4618      	mov	r0, r3
 800d864:	3710      	adds	r7, #16
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	58024400 	.word	0x58024400
 800d870:	ffff0007 	.word	0xffff0007

0800d874 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800d87c:	2300      	movs	r3, #0
 800d87e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d101      	bne.n	800d88a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800d886:	2301      	movs	r3, #1
 800d888:	e0eb      	b.n	800da62 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2200      	movs	r2, #0
 800d88e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a75      	ldr	r2, [pc, #468]	; (800da6c <HAL_SPI_Init+0x1f8>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d00f      	beq.n	800d8ba <HAL_SPI_Init+0x46>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4a74      	ldr	r2, [pc, #464]	; (800da70 <HAL_SPI_Init+0x1fc>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d00a      	beq.n	800d8ba <HAL_SPI_Init+0x46>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4a72      	ldr	r2, [pc, #456]	; (800da74 <HAL_SPI_Init+0x200>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d005      	beq.n	800d8ba <HAL_SPI_Init+0x46>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	2b0f      	cmp	r3, #15
 800d8b4:	d901      	bls.n	800d8ba <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e0d3      	b.n	800da62 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f001 f87a 	bl	800e9b4 <SPI_GetPacketSize>
 800d8c0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4a69      	ldr	r2, [pc, #420]	; (800da6c <HAL_SPI_Init+0x1f8>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d00c      	beq.n	800d8e6 <HAL_SPI_Init+0x72>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a67      	ldr	r2, [pc, #412]	; (800da70 <HAL_SPI_Init+0x1fc>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d007      	beq.n	800d8e6 <HAL_SPI_Init+0x72>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	4a66      	ldr	r2, [pc, #408]	; (800da74 <HAL_SPI_Init+0x200>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d002      	beq.n	800d8e6 <HAL_SPI_Init+0x72>
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	2b08      	cmp	r3, #8
 800d8e4:	d811      	bhi.n	800d90a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d8ea:	4a60      	ldr	r2, [pc, #384]	; (800da6c <HAL_SPI_Init+0x1f8>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d009      	beq.n	800d904 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a5e      	ldr	r2, [pc, #376]	; (800da70 <HAL_SPI_Init+0x1fc>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d004      	beq.n	800d904 <HAL_SPI_Init+0x90>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a5d      	ldr	r2, [pc, #372]	; (800da74 <HAL_SPI_Init+0x200>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d104      	bne.n	800d90e <HAL_SPI_Init+0x9a>
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	2b10      	cmp	r3, #16
 800d908:	d901      	bls.n	800d90e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800d90a:	2301      	movs	r3, #1
 800d90c:	e0a9      	b.n	800da62 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d914:	b2db      	uxtb	r3, r3
 800d916:	2b00      	cmp	r3, #0
 800d918:	d106      	bne.n	800d928 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2200      	movs	r2, #0
 800d91e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f7f6 fe24 	bl	8004570 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2202      	movs	r2, #2
 800d92c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f022 0201 	bic.w	r2, r2, #1
 800d93e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	699b      	ldr	r3, [r3, #24]
 800d944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d948:	d119      	bne.n	800d97e <HAL_SPI_Init+0x10a>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d952:	d103      	bne.n	800d95c <HAL_SPI_Init+0xe8>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d008      	beq.n	800d96e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d960:	2b00      	cmp	r3, #0
 800d962:	d10c      	bne.n	800d97e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d96c:	d107      	bne.n	800d97e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d97c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	69da      	ldr	r2, [r3, #28]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d986:	431a      	orrs	r2, r3
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	431a      	orrs	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d990:	ea42 0103 	orr.w	r1, r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	68da      	ldr	r2, [r3, #12]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	430a      	orrs	r2, r1
 800d99e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a8:	431a      	orrs	r2, r3
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ae:	431a      	orrs	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	699b      	ldr	r3, [r3, #24]
 800d9b4:	431a      	orrs	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	691b      	ldr	r3, [r3, #16]
 800d9ba:	431a      	orrs	r2, r3
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	695b      	ldr	r3, [r3, #20]
 800d9c0:	431a      	orrs	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6a1b      	ldr	r3, [r3, #32]
 800d9c6:	431a      	orrs	r2, r3
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	431a      	orrs	r2, r3
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9d2:	431a      	orrs	r2, r3
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	431a      	orrs	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9de:	ea42 0103 	orr.w	r1, r2, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	430a      	orrs	r2, r1
 800d9ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d113      	bne.n	800da1e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	689b      	ldr	r3, [r3, #8]
 800da10:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800da1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f022 0201 	bic.w	r2, r2, #1
 800da2c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da36:	2b00      	cmp	r3, #0
 800da38:	d00a      	beq.n	800da50 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	430a      	orrs	r2, r1
 800da4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2201      	movs	r2, #1
 800da5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800da60:	2300      	movs	r3, #0
}
 800da62:	4618      	mov	r0, r3
 800da64:	3710      	adds	r7, #16
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	40013000 	.word	0x40013000
 800da70:	40003800 	.word	0x40003800
 800da74:	40003c00 	.word	0x40003c00

0800da78 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b08a      	sub	sp, #40	; 0x28
 800da7c:	af02      	add	r7, sp, #8
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	603b      	str	r3, [r7, #0]
 800da84:	4613      	mov	r3, r2
 800da86:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	3320      	adds	r3, #32
 800da8e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800da90:	2300      	movs	r3, #0
 800da92:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d101      	bne.n	800daa2 <HAL_SPI_Transmit+0x2a>
 800da9e:	2302      	movs	r3, #2
 800daa0:	e1d7      	b.n	800de52 <HAL_SPI_Transmit+0x3da>
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2201      	movs	r2, #1
 800daa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800daaa:	f7f7 ffed 	bl	8005a88 <HAL_GetTick>
 800daae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d007      	beq.n	800dacc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800dabc:	2302      	movs	r3, #2
 800dabe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2200      	movs	r2, #0
 800dac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dac8:	7efb      	ldrb	r3, [r7, #27]
 800daca:	e1c2      	b.n	800de52 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d002      	beq.n	800dad8 <HAL_SPI_Transmit+0x60>
 800dad2:	88fb      	ldrh	r3, [r7, #6]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d107      	bne.n	800dae8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800dad8:	2301      	movs	r3, #1
 800dada:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2200      	movs	r2, #0
 800dae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dae4:	7efb      	ldrb	r3, [r7, #27]
 800dae6:	e1b4      	b.n	800de52 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2203      	movs	r2, #3
 800daec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	68ba      	ldr	r2, [r7, #8]
 800dafc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	88fa      	ldrh	r2, [r7, #6]
 800db02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	88fa      	ldrh	r2, [r7, #6]
 800db0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2200      	movs	r2, #0
 800db12:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2200      	movs	r2, #0
 800db18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2200      	movs	r2, #0
 800db20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2200      	movs	r2, #0
 800db28:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2200      	movs	r2, #0
 800db2e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	689b      	ldr	r3, [r3, #8]
 800db34:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800db38:	d107      	bne.n	800db4a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db48:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	685a      	ldr	r2, [r3, #4]
 800db50:	4b96      	ldr	r3, [pc, #600]	; (800ddac <HAL_SPI_Transmit+0x334>)
 800db52:	4013      	ands	r3, r2
 800db54:	88f9      	ldrh	r1, [r7, #6]
 800db56:	68fa      	ldr	r2, [r7, #12]
 800db58:	6812      	ldr	r2, [r2, #0]
 800db5a:	430b      	orrs	r3, r1
 800db5c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f042 0201 	orr.w	r2, r2, #1
 800db6c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db76:	d107      	bne.n	800db88 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	2b0f      	cmp	r3, #15
 800db8e:	d947      	bls.n	800dc20 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800db90:	e03f      	b.n	800dc12 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	695b      	ldr	r3, [r3, #20]
 800db98:	f003 0302 	and.w	r3, r3, #2
 800db9c:	2b02      	cmp	r3, #2
 800db9e:	d114      	bne.n	800dbca <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	6812      	ldr	r2, [r2, #0]
 800dbaa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbb0:	1d1a      	adds	r2, r3, #4
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	3b01      	subs	r3, #1
 800dbc0:	b29a      	uxth	r2, r3
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dbc8:	e023      	b.n	800dc12 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dbca:	f7f7 ff5d 	bl	8005a88 <HAL_GetTick>
 800dbce:	4602      	mov	r2, r0
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	683a      	ldr	r2, [r7, #0]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d803      	bhi.n	800dbe2 <HAL_SPI_Transmit+0x16a>
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbe0:	d102      	bne.n	800dbe8 <HAL_SPI_Transmit+0x170>
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d114      	bne.n	800dc12 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f000 fe15 	bl	800e818 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbfc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e11f      	b.n	800de52 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d1b9      	bne.n	800db92 <HAL_SPI_Transmit+0x11a>
 800dc1e:	e0f2      	b.n	800de06 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	68db      	ldr	r3, [r3, #12]
 800dc24:	2b07      	cmp	r3, #7
 800dc26:	f240 80e7 	bls.w	800ddf8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dc2a:	e05d      	b.n	800dce8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	695b      	ldr	r3, [r3, #20]
 800dc32:	f003 0302 	and.w	r3, r3, #2
 800dc36:	2b02      	cmp	r3, #2
 800dc38:	d132      	bne.n	800dca0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d918      	bls.n	800dc78 <HAL_SPI_Transmit+0x200>
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d014      	beq.n	800dc78 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	6812      	ldr	r2, [r2, #0]
 800dc58:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc5e:	1d1a      	adds	r2, r3, #4
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	3b02      	subs	r3, #2
 800dc6e:	b29a      	uxth	r2, r3
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dc76:	e037      	b.n	800dce8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc7c:	881a      	ldrh	r2, [r3, #0]
 800dc7e:	69fb      	ldr	r3, [r7, #28]
 800dc80:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc86:	1c9a      	adds	r2, r3, #2
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	3b01      	subs	r3, #1
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dc9e:	e023      	b.n	800dce8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dca0:	f7f7 fef2 	bl	8005a88 <HAL_GetTick>
 800dca4:	4602      	mov	r2, r0
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	1ad3      	subs	r3, r2, r3
 800dcaa:	683a      	ldr	r2, [r7, #0]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d803      	bhi.n	800dcb8 <HAL_SPI_Transmit+0x240>
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcb6:	d102      	bne.n	800dcbe <HAL_SPI_Transmit+0x246>
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d114      	bne.n	800dce8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f000 fdaa 	bl	800e818 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2201      	movs	r2, #1
 800dce0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800dce4:	2301      	movs	r3, #1
 800dce6:	e0b4      	b.n	800de52 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d19b      	bne.n	800dc2c <HAL_SPI_Transmit+0x1b4>
 800dcf4:	e087      	b.n	800de06 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	695b      	ldr	r3, [r3, #20]
 800dcfc:	f003 0302 	and.w	r3, r3, #2
 800dd00:	2b02      	cmp	r3, #2
 800dd02:	d155      	bne.n	800ddb0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	2b03      	cmp	r3, #3
 800dd0e:	d918      	bls.n	800dd42 <HAL_SPI_Transmit+0x2ca>
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd14:	2b40      	cmp	r3, #64	; 0x40
 800dd16:	d914      	bls.n	800dd42 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	6812      	ldr	r2, [r2, #0]
 800dd22:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd28:	1d1a      	adds	r2, r3, #4
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	3b04      	subs	r3, #4
 800dd38:	b29a      	uxth	r2, r3
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dd40:	e05a      	b.n	800ddf8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	d917      	bls.n	800dd7e <HAL_SPI_Transmit+0x306>
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d013      	beq.n	800dd7e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd5a:	881a      	ldrh	r2, [r3, #0]
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd64:	1c9a      	adds	r2, r3, #2
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	3b02      	subs	r3, #2
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dd7c:	e03c      	b.n	800ddf8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	3320      	adds	r3, #32
 800dd88:	7812      	ldrb	r2, [r2, #0]
 800dd8a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd90:	1c5a      	adds	r2, r3, #1
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	3b01      	subs	r3, #1
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dda8:	e026      	b.n	800ddf8 <HAL_SPI_Transmit+0x380>
 800ddaa:	bf00      	nop
 800ddac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ddb0:	f7f7 fe6a 	bl	8005a88 <HAL_GetTick>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	1ad3      	subs	r3, r2, r3
 800ddba:	683a      	ldr	r2, [r7, #0]
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	d803      	bhi.n	800ddc8 <HAL_SPI_Transmit+0x350>
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddc6:	d102      	bne.n	800ddce <HAL_SPI_Transmit+0x356>
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d114      	bne.n	800ddf8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ddce:	68f8      	ldr	r0, [r7, #12]
 800ddd0:	f000 fd22 	bl	800e818 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dde2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	e02c      	b.n	800de52 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	2b00      	cmp	r3, #0
 800de02:	f47f af78 	bne.w	800dcf6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	9300      	str	r3, [sp, #0]
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	2200      	movs	r2, #0
 800de0e:	2108      	movs	r1, #8
 800de10:	68f8      	ldr	r0, [r7, #12]
 800de12:	f000 fda1 	bl	800e958 <SPI_WaitOnFlagUntilTimeout>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d007      	beq.n	800de2c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de22:	f043 0220 	orr.w	r2, r3, #32
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800de2c:	68f8      	ldr	r0, [r7, #12]
 800de2e:	f000 fcf3 	bl	800e818 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2200      	movs	r2, #0
 800de36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2201      	movs	r2, #1
 800de3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d001      	beq.n	800de50 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800de4c:	2301      	movs	r3, #1
 800de4e:	e000      	b.n	800de52 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800de50:	7efb      	ldrb	r3, [r7, #27]
}
 800de52:	4618      	mov	r0, r3
 800de54:	3720      	adds	r7, #32
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop

0800de5c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b08a      	sub	sp, #40	; 0x28
 800de60:	af02      	add	r7, sp, #8
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	603b      	str	r3, [r7, #0]
 800de68:	4613      	mov	r3, r2
 800de6a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800de6c:	2300      	movs	r3, #0
 800de6e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	3330      	adds	r3, #48	; 0x30
 800de76:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	685b      	ldr	r3, [r3, #4]
 800de7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de80:	d112      	bne.n	800dea8 <HAL_SPI_Receive+0x4c>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	689b      	ldr	r3, [r3, #8]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d10e      	bne.n	800dea8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2204      	movs	r2, #4
 800de8e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800de92:	88fa      	ldrh	r2, [r7, #6]
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	9300      	str	r3, [sp, #0]
 800de98:	4613      	mov	r3, r2
 800de9a:	68ba      	ldr	r2, [r7, #8]
 800de9c:	68b9      	ldr	r1, [r7, #8]
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	f000 f9ce 	bl	800e240 <HAL_SPI_TransmitReceive>
 800dea4:	4603      	mov	r3, r0
 800dea6:	e1c7      	b.n	800e238 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d101      	bne.n	800deb6 <HAL_SPI_Receive+0x5a>
 800deb2:	2302      	movs	r3, #2
 800deb4:	e1c0      	b.n	800e238 <HAL_SPI_Receive+0x3dc>
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2201      	movs	r2, #1
 800deba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800debe:	f7f7 fde3 	bl	8005a88 <HAL_GetTick>
 800dec2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800deca:	b2db      	uxtb	r3, r3
 800decc:	2b01      	cmp	r3, #1
 800dece:	d007      	beq.n	800dee0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800ded0:	2302      	movs	r3, #2
 800ded2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2200      	movs	r2, #0
 800ded8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dedc:	7ffb      	ldrb	r3, [r7, #31]
 800dede:	e1ab      	b.n	800e238 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d002      	beq.n	800deec <HAL_SPI_Receive+0x90>
 800dee6:	88fb      	ldrh	r3, [r7, #6]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d107      	bne.n	800defc <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800deec:	2301      	movs	r3, #1
 800deee:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2200      	movs	r2, #0
 800def4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800def8:	7ffb      	ldrb	r3, [r7, #31]
 800defa:	e19d      	b.n	800e238 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2204      	movs	r2, #4
 800df00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2200      	movs	r2, #0
 800df08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	68ba      	ldr	r2, [r7, #8]
 800df10:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	88fa      	ldrh	r2, [r7, #6]
 800df16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	88fa      	ldrh	r2, [r7, #6]
 800df1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2200      	movs	r2, #0
 800df26:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2200      	movs	r2, #0
 800df2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2200      	movs	r2, #0
 800df34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2200      	movs	r2, #0
 800df3c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2200      	movs	r2, #0
 800df42:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800df4c:	d107      	bne.n	800df5e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	685a      	ldr	r2, [r3, #4]
 800df64:	4b94      	ldr	r3, [pc, #592]	; (800e1b8 <HAL_SPI_Receive+0x35c>)
 800df66:	4013      	ands	r3, r2
 800df68:	88f9      	ldrh	r1, [r7, #6]
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	6812      	ldr	r2, [r2, #0]
 800df6e:	430b      	orrs	r3, r1
 800df70:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f042 0201 	orr.w	r2, r2, #1
 800df80:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df8a:	d107      	bne.n	800df9c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df9a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	2b0f      	cmp	r3, #15
 800dfa2:	d948      	bls.n	800e036 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800dfa4:	e040      	b.n	800e028 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	695a      	ldr	r2, [r3, #20]
 800dfac:	f248 0308 	movw	r3, #32776	; 0x8008
 800dfb0:	4013      	ands	r3, r2
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d014      	beq.n	800dfe0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681a      	ldr	r2, [r3, #0]
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfbe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dfc0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfc6:	1d1a      	adds	r2, r3, #4
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	3b01      	subs	r3, #1
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dfde:	e023      	b.n	800e028 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfe0:	f7f7 fd52 	bl	8005a88 <HAL_GetTick>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	1ad3      	subs	r3, r2, r3
 800dfea:	683a      	ldr	r2, [r7, #0]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d803      	bhi.n	800dff8 <HAL_SPI_Receive+0x19c>
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dff6:	d102      	bne.n	800dffe <HAL_SPI_Receive+0x1a2>
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d114      	bne.n	800e028 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dffe:	68f8      	ldr	r0, [r7, #12]
 800e000:	f000 fc0a 	bl	800e818 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2200      	movs	r2, #0
 800e008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e012:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e024:	2301      	movs	r3, #1
 800e026:	e107      	b.n	800e238 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e02e:	b29b      	uxth	r3, r3
 800e030:	2b00      	cmp	r3, #0
 800e032:	d1b8      	bne.n	800dfa6 <HAL_SPI_Receive+0x14a>
 800e034:	e0ed      	b.n	800e212 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	68db      	ldr	r3, [r3, #12]
 800e03a:	2b07      	cmp	r3, #7
 800e03c:	f240 80e2 	bls.w	800e204 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e040:	e05b      	b.n	800e0fa <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	695b      	ldr	r3, [r3, #20]
 800e048:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d030      	beq.n	800e0b2 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	695b      	ldr	r3, [r3, #20]
 800e056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d014      	beq.n	800e088 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e066:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e068:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e06e:	1d1a      	adds	r2, r3, #4
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	3b02      	subs	r3, #2
 800e07e:	b29a      	uxth	r2, r3
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e086:	e038      	b.n	800e0fa <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e08c:	69ba      	ldr	r2, [r7, #24]
 800e08e:	8812      	ldrh	r2, [r2, #0]
 800e090:	b292      	uxth	r2, r2
 800e092:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e098:	1c9a      	adds	r2, r3, #2
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	b29a      	uxth	r2, r3
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e0b0:	e023      	b.n	800e0fa <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0b2:	f7f7 fce9 	bl	8005a88 <HAL_GetTick>
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	1ad3      	subs	r3, r2, r3
 800e0bc:	683a      	ldr	r2, [r7, #0]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d803      	bhi.n	800e0ca <HAL_SPI_Receive+0x26e>
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0c8:	d102      	bne.n	800e0d0 <HAL_SPI_Receive+0x274>
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d114      	bne.n	800e0fa <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	f000 fba1 	bl	800e818 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	e09e      	b.n	800e238 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e100:	b29b      	uxth	r3, r3
 800e102:	2b00      	cmp	r3, #0
 800e104:	d19d      	bne.n	800e042 <HAL_SPI_Receive+0x1e6>
 800e106:	e084      	b.n	800e212 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	695b      	ldr	r3, [r3, #20]
 800e10e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e112:	2b00      	cmp	r3, #0
 800e114:	d052      	beq.n	800e1bc <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	695b      	ldr	r3, [r3, #20]
 800e11c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e120:	2b00      	cmp	r3, #0
 800e122:	d014      	beq.n	800e14e <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e12c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e12e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e134:	1d1a      	adds	r2, r3, #4
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e140:	b29b      	uxth	r3, r3
 800e142:	3b04      	subs	r3, #4
 800e144:	b29a      	uxth	r2, r3
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e14c:	e05a      	b.n	800e204 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	695b      	ldr	r3, [r3, #20]
 800e154:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e15c:	d914      	bls.n	800e188 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e162:	69ba      	ldr	r2, [r7, #24]
 800e164:	8812      	ldrh	r2, [r2, #0]
 800e166:	b292      	uxth	r2, r2
 800e168:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e16e:	1c9a      	adds	r2, r3, #2
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	3b02      	subs	r3, #2
 800e17e:	b29a      	uxth	r2, r3
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e186:	e03d      	b.n	800e204 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e194:	7812      	ldrb	r2, [r2, #0]
 800e196:	b2d2      	uxtb	r2, r2
 800e198:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e19e:	1c5a      	adds	r2, r3, #1
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	3b01      	subs	r3, #1
 800e1ae:	b29a      	uxth	r2, r3
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e1b6:	e025      	b.n	800e204 <HAL_SPI_Receive+0x3a8>
 800e1b8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e1bc:	f7f7 fc64 	bl	8005a88 <HAL_GetTick>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	1ad3      	subs	r3, r2, r3
 800e1c6:	683a      	ldr	r2, [r7, #0]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d803      	bhi.n	800e1d4 <HAL_SPI_Receive+0x378>
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1d2:	d102      	bne.n	800e1da <HAL_SPI_Receive+0x37e>
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d114      	bne.n	800e204 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f000 fb1c 	bl	800e818 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e200:	2301      	movs	r3, #1
 800e202:	e019      	b.n	800e238 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f47f af7b 	bne.w	800e108 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e212:	68f8      	ldr	r0, [r7, #12]
 800e214:	f000 fb00 	bl	800e818 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2200      	movs	r2, #0
 800e21c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2201      	movs	r2, #1
 800e224:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d001      	beq.n	800e236 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800e232:	2301      	movs	r3, #1
 800e234:	e000      	b.n	800e238 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800e236:	7ffb      	ldrb	r3, [r7, #31]
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3720      	adds	r7, #32
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b08e      	sub	sp, #56	; 0x38
 800e244:	af02      	add	r7, sp, #8
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	607a      	str	r2, [r7, #4]
 800e24c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e24e:	2300      	movs	r3, #0
 800e250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	3320      	adds	r3, #32
 800e25a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	3330      	adds	r3, #48	; 0x30
 800e262:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e26a:	2b01      	cmp	r3, #1
 800e26c:	d101      	bne.n	800e272 <HAL_SPI_TransmitReceive+0x32>
 800e26e:	2302      	movs	r3, #2
 800e270:	e2ce      	b.n	800e810 <HAL_SPI_TransmitReceive+0x5d0>
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2201      	movs	r2, #1
 800e276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e27a:	f7f7 fc05 	bl	8005a88 <HAL_GetTick>
 800e27e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800e280:	887b      	ldrh	r3, [r7, #2]
 800e282:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800e284:	887b      	ldrh	r3, [r7, #2]
 800e286:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e28e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e296:	7efb      	ldrb	r3, [r7, #27]
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d014      	beq.n	800e2c6 <HAL_SPI_TransmitReceive+0x86>
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e2a2:	d106      	bne.n	800e2b2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	689b      	ldr	r3, [r3, #8]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d102      	bne.n	800e2b2 <HAL_SPI_TransmitReceive+0x72>
 800e2ac:	7efb      	ldrb	r3, [r7, #27]
 800e2ae:	2b04      	cmp	r3, #4
 800e2b0:	d009      	beq.n	800e2c6 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800e2b2:	2302      	movs	r3, #2
 800e2b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e2c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e2c4:	e2a4      	b.n	800e810 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d005      	beq.n	800e2d8 <HAL_SPI_TransmitReceive+0x98>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d002      	beq.n	800e2d8 <HAL_SPI_TransmitReceive+0x98>
 800e2d2:	887b      	ldrh	r3, [r7, #2]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d109      	bne.n	800e2ec <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e2e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e2ea:	e291      	b.n	800e810 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	2b04      	cmp	r3, #4
 800e2f6:	d003      	beq.n	800e300 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2205      	movs	r2, #5
 800e2fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2200      	movs	r2, #0
 800e304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	887a      	ldrh	r2, [r7, #2]
 800e312:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	887a      	ldrh	r2, [r7, #2]
 800e31a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	68ba      	ldr	r2, [r7, #8]
 800e322:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	887a      	ldrh	r2, [r7, #2]
 800e328:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	887a      	ldrh	r2, [r7, #2]
 800e330:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2200      	movs	r2, #0
 800e338:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2200      	movs	r2, #0
 800e33e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	685a      	ldr	r2, [r3, #4]
 800e346:	4b9f      	ldr	r3, [pc, #636]	; (800e5c4 <HAL_SPI_TransmitReceive+0x384>)
 800e348:	4013      	ands	r3, r2
 800e34a:	8879      	ldrh	r1, [r7, #2]
 800e34c:	68fa      	ldr	r2, [r7, #12]
 800e34e:	6812      	ldr	r2, [r2, #0]
 800e350:	430b      	orrs	r3, r1
 800e352:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f042 0201 	orr.w	r2, r2, #1
 800e362:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e36c:	d107      	bne.n	800e37e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	681a      	ldr	r2, [r3, #0]
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e37c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	68db      	ldr	r3, [r3, #12]
 800e382:	2b0f      	cmp	r3, #15
 800e384:	d970      	bls.n	800e468 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e386:	e068      	b.n	800e45a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	695b      	ldr	r3, [r3, #20]
 800e38e:	f003 0302 	and.w	r3, r3, #2
 800e392:	2b02      	cmp	r3, #2
 800e394:	d11a      	bne.n	800e3cc <HAL_SPI_TransmitReceive+0x18c>
 800e396:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d017      	beq.n	800e3cc <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	6812      	ldr	r2, [r2, #0]
 800e3a6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3ac:	1d1a      	adds	r2, r3, #4
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	3b01      	subs	r3, #1
 800e3bc:	b29a      	uxth	r2, r3
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e3ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	695a      	ldr	r2, [r3, #20]
 800e3d2:	f248 0308 	movw	r3, #32776	; 0x8008
 800e3d6:	4013      	ands	r3, r2
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d01a      	beq.n	800e412 <HAL_SPI_TransmitReceive+0x1d2>
 800e3dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d017      	beq.n	800e412 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e3ec:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3f2:	1d1a      	adds	r2, r3, #4
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	3b01      	subs	r3, #1
 800e402:	b29a      	uxth	r2, r3
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e410:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e412:	f7f7 fb39 	bl	8005a88 <HAL_GetTick>
 800e416:	4602      	mov	r2, r0
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	1ad3      	subs	r3, r2, r3
 800e41c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e41e:	429a      	cmp	r2, r3
 800e420:	d803      	bhi.n	800e42a <HAL_SPI_TransmitReceive+0x1ea>
 800e422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e428:	d102      	bne.n	800e430 <HAL_SPI_TransmitReceive+0x1f0>
 800e42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d114      	bne.n	800e45a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e430:	68f8      	ldr	r0, [r7, #12]
 800e432:	f000 f9f1 	bl	800e818 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2200      	movs	r2, #0
 800e43a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e444:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2201      	movs	r2, #1
 800e452:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	e1da      	b.n	800e810 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e45a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d193      	bne.n	800e388 <HAL_SPI_TransmitReceive+0x148>
 800e460:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e462:	2b00      	cmp	r3, #0
 800e464:	d190      	bne.n	800e388 <HAL_SPI_TransmitReceive+0x148>
 800e466:	e1ac      	b.n	800e7c2 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	2b07      	cmp	r3, #7
 800e46e:	f240 81a0 	bls.w	800e7b2 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e472:	e0a9      	b.n	800e5c8 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	695b      	ldr	r3, [r3, #20]
 800e47a:	f003 0302 	and.w	r3, r3, #2
 800e47e:	2b02      	cmp	r3, #2
 800e480:	d139      	bne.n	800e4f6 <HAL_SPI_TransmitReceive+0x2b6>
 800e482:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e484:	2b00      	cmp	r3, #0
 800e486:	d036      	beq.n	800e4f6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e488:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d91c      	bls.n	800e4c8 <HAL_SPI_TransmitReceive+0x288>
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e492:	2b00      	cmp	r3, #0
 800e494:	d018      	beq.n	800e4c8 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	6812      	ldr	r2, [r2, #0]
 800e4a0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4a6:	1d1a      	adds	r2, r3, #4
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	3b02      	subs	r3, #2
 800e4b6:	b29a      	uxth	r2, r3
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e4c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e4c6:	e016      	b.n	800e4f6 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4cc:	881a      	ldrh	r2, [r3, #0]
 800e4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4d6:	1c9a      	adds	r2, r3, #2
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	3b01      	subs	r3, #1
 800e4e6:	b29a      	uxth	r2, r3
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e4f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	695b      	ldr	r3, [r3, #20]
 800e4fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e500:	2b00      	cmp	r3, #0
 800e502:	d03a      	beq.n	800e57a <HAL_SPI_TransmitReceive+0x33a>
 800e504:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e506:	2b00      	cmp	r3, #0
 800e508:	d037      	beq.n	800e57a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	695b      	ldr	r3, [r3, #20]
 800e510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e514:	2b00      	cmp	r3, #0
 800e516:	d018      	beq.n	800e54a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e520:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e522:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e528:	1d1a      	adds	r2, r3, #4
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e534:	b29b      	uxth	r3, r3
 800e536:	3b02      	subs	r3, #2
 800e538:	b29a      	uxth	r2, r3
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e546:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e548:	e017      	b.n	800e57a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e54e:	6a3a      	ldr	r2, [r7, #32]
 800e550:	8812      	ldrh	r2, [r2, #0]
 800e552:	b292      	uxth	r2, r2
 800e554:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e55a:	1c9a      	adds	r2, r3, #2
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e566:	b29b      	uxth	r3, r3
 800e568:	3b01      	subs	r3, #1
 800e56a:	b29a      	uxth	r2, r3
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e578:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e57a:	f7f7 fa85 	bl	8005a88 <HAL_GetTick>
 800e57e:	4602      	mov	r2, r0
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	1ad3      	subs	r3, r2, r3
 800e584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e586:	429a      	cmp	r2, r3
 800e588:	d803      	bhi.n	800e592 <HAL_SPI_TransmitReceive+0x352>
 800e58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e590:	d102      	bne.n	800e598 <HAL_SPI_TransmitReceive+0x358>
 800e592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e594:	2b00      	cmp	r3, #0
 800e596:	d117      	bne.n	800e5c8 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e598:	68f8      	ldr	r0, [r7, #12]
 800e59a:	f000 f93d 	bl	800e818 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e5be:	2301      	movs	r3, #1
 800e5c0:	e126      	b.n	800e810 <HAL_SPI_TransmitReceive+0x5d0>
 800e5c2:	bf00      	nop
 800e5c4:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e5c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	f47f af52 	bne.w	800e474 <HAL_SPI_TransmitReceive+0x234>
 800e5d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	f47f af4e 	bne.w	800e474 <HAL_SPI_TransmitReceive+0x234>
 800e5d8:	e0f3      	b.n	800e7c2 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	695b      	ldr	r3, [r3, #20]
 800e5e0:	f003 0302 	and.w	r3, r3, #2
 800e5e4:	2b02      	cmp	r3, #2
 800e5e6:	d15a      	bne.n	800e69e <HAL_SPI_TransmitReceive+0x45e>
 800e5e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d057      	beq.n	800e69e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e5ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5f0:	2b03      	cmp	r3, #3
 800e5f2:	d91c      	bls.n	800e62e <HAL_SPI_TransmitReceive+0x3ee>
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5f8:	2b40      	cmp	r3, #64	; 0x40
 800e5fa:	d918      	bls.n	800e62e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	6812      	ldr	r2, [r2, #0]
 800e606:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e60c:	1d1a      	adds	r2, r3, #4
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e618:	b29b      	uxth	r3, r3
 800e61a:	3b04      	subs	r3, #4
 800e61c:	b29a      	uxth	r2, r3
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e62a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e62c:	e037      	b.n	800e69e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e62e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e630:	2b01      	cmp	r3, #1
 800e632:	d91b      	bls.n	800e66c <HAL_SPI_TransmitReceive+0x42c>
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d017      	beq.n	800e66c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e640:	881a      	ldrh	r2, [r3, #0]
 800e642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e644:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e64a:	1c9a      	adds	r2, r3, #2
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e656:	b29b      	uxth	r3, r3
 800e658:	3b02      	subs	r3, #2
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e668:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e66a:	e018      	b.n	800e69e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	3320      	adds	r3, #32
 800e676:	7812      	ldrb	r2, [r2, #0]
 800e678:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e67e:	1c5a      	adds	r2, r3, #1
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	3b01      	subs	r3, #1
 800e68e:	b29a      	uxth	r2, r3
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e69c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	695b      	ldr	r3, [r3, #20]
 800e6a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d05e      	beq.n	800e76a <HAL_SPI_TransmitReceive+0x52a>
 800e6ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d05b      	beq.n	800e76a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	695b      	ldr	r3, [r3, #20]
 800e6b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d018      	beq.n	800e6f2 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e6ca:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6d0:	1d1a      	adds	r2, r3, #4
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	3b04      	subs	r3, #4
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e6f0:	e03b      	b.n	800e76a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	695b      	ldr	r3, [r3, #20]
 800e6f8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e6fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e700:	d918      	bls.n	800e734 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e706:	6a3a      	ldr	r2, [r7, #32]
 800e708:	8812      	ldrh	r2, [r2, #0]
 800e70a:	b292      	uxth	r2, r2
 800e70c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e712:	1c9a      	adds	r2, r3, #2
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e71e:	b29b      	uxth	r3, r3
 800e720:	3b02      	subs	r3, #2
 800e722:	b29a      	uxth	r2, r3
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e730:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e732:	e01a      	b.n	800e76a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e740:	7812      	ldrb	r2, [r2, #0]
 800e742:	b2d2      	uxtb	r2, r2
 800e744:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e74a:	1c5a      	adds	r2, r3, #1
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e756:	b29b      	uxth	r3, r3
 800e758:	3b01      	subs	r3, #1
 800e75a:	b29a      	uxth	r2, r3
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e768:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e76a:	f7f7 f98d 	bl	8005a88 <HAL_GetTick>
 800e76e:	4602      	mov	r2, r0
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	1ad3      	subs	r3, r2, r3
 800e774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e776:	429a      	cmp	r2, r3
 800e778:	d803      	bhi.n	800e782 <HAL_SPI_TransmitReceive+0x542>
 800e77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e780:	d102      	bne.n	800e788 <HAL_SPI_TransmitReceive+0x548>
 800e782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e784:	2b00      	cmp	r3, #0
 800e786:	d114      	bne.n	800e7b2 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	f000 f845 	bl	800e818 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2200      	movs	r2, #0
 800e792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e79c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e02e      	b.n	800e810 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e7b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f47f af10 	bne.w	800e5da <HAL_SPI_TransmitReceive+0x39a>
 800e7ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	f47f af0c 	bne.w	800e5da <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c4:	9300      	str	r3, [sp, #0]
 800e7c6:	69fb      	ldr	r3, [r7, #28]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	2108      	movs	r1, #8
 800e7cc:	68f8      	ldr	r0, [r7, #12]
 800e7ce:	f000 f8c3 	bl	800e958 <SPI_WaitOnFlagUntilTimeout>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d007      	beq.n	800e7e8 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7de:	f043 0220 	orr.w	r2, r3, #32
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	f000 f815 	bl	800e818 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e804:	2b00      	cmp	r3, #0
 800e806:	d001      	beq.n	800e80c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800e808:	2301      	movs	r3, #1
 800e80a:	e001      	b.n	800e810 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800e80c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e810:	4618      	mov	r0, r3
 800e812:	3730      	adds	r7, #48	; 0x30
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	695b      	ldr	r3, [r3, #20]
 800e826:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	699a      	ldr	r2, [r3, #24]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f042 0208 	orr.w	r2, r2, #8
 800e836:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	699a      	ldr	r2, [r3, #24]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f042 0210 	orr.w	r2, r2, #16
 800e846:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	681a      	ldr	r2, [r3, #0]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f022 0201 	bic.w	r2, r2, #1
 800e856:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	6919      	ldr	r1, [r3, #16]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	4b3c      	ldr	r3, [pc, #240]	; (800e954 <SPI_CloseTransfer+0x13c>)
 800e864:	400b      	ands	r3, r1
 800e866:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	689a      	ldr	r2, [r3, #8]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e876:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	2b04      	cmp	r3, #4
 800e882:	d014      	beq.n	800e8ae <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f003 0320 	and.w	r3, r3, #32
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d00f      	beq.n	800e8ae <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e894:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	699a      	ldr	r2, [r3, #24]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f042 0220 	orr.w	r2, r2, #32
 800e8ac:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	2b03      	cmp	r3, #3
 800e8b8:	d014      	beq.n	800e8e4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d00f      	beq.n	800e8e4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8ca:	f043 0204 	orr.w	r2, r3, #4
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	699a      	ldr	r2, [r3, #24]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e8e2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d00f      	beq.n	800e90e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8f4:	f043 0201 	orr.w	r2, r3, #1
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	699a      	ldr	r2, [r3, #24]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e90c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e914:	2b00      	cmp	r3, #0
 800e916:	d00f      	beq.n	800e938 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e91e:	f043 0208 	orr.w	r2, r3, #8
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	699a      	ldr	r2, [r3, #24]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e936:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2200      	movs	r2, #0
 800e93c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e948:	bf00      	nop
 800e94a:	3714      	adds	r7, #20
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr
 800e954:	fffffc90 	.word	0xfffffc90

0800e958 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b084      	sub	sp, #16
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	603b      	str	r3, [r7, #0]
 800e964:	4613      	mov	r3, r2
 800e966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e968:	e010      	b.n	800e98c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e96a:	f7f7 f88d 	bl	8005a88 <HAL_GetTick>
 800e96e:	4602      	mov	r2, r0
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	1ad3      	subs	r3, r2, r3
 800e974:	69ba      	ldr	r2, [r7, #24]
 800e976:	429a      	cmp	r2, r3
 800e978:	d803      	bhi.n	800e982 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e97a:	69bb      	ldr	r3, [r7, #24]
 800e97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e980:	d102      	bne.n	800e988 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e982:	69bb      	ldr	r3, [r7, #24]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d101      	bne.n	800e98c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e988:	2303      	movs	r3, #3
 800e98a:	e00f      	b.n	800e9ac <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	695a      	ldr	r2, [r3, #20]
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	4013      	ands	r3, r2
 800e996:	68ba      	ldr	r2, [r7, #8]
 800e998:	429a      	cmp	r2, r3
 800e99a:	bf0c      	ite	eq
 800e99c:	2301      	moveq	r3, #1
 800e99e:	2300      	movne	r3, #0
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	461a      	mov	r2, r3
 800e9a4:	79fb      	ldrb	r3, [r7, #7]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d0df      	beq.n	800e96a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e9aa:	2300      	movs	r3, #0
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3710      	adds	r7, #16
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b085      	sub	sp, #20
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9c0:	095b      	lsrs	r3, r3, #5
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	68db      	ldr	r3, [r3, #12]
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	3307      	adds	r3, #7
 800e9d2:	08db      	lsrs	r3, r3, #3
 800e9d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	68fa      	ldr	r2, [r7, #12]
 800e9da:	fb02 f303 	mul.w	r3, r2, r3
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3714      	adds	r7, #20
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr

0800e9ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e9ea:	b580      	push	{r7, lr}
 800e9ec:	b082      	sub	sp, #8
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d101      	bne.n	800e9fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	e049      	b.n	800ea90 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d106      	bne.n	800ea16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f7f5 fe13 	bl	800463c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2202      	movs	r2, #2
 800ea1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681a      	ldr	r2, [r3, #0]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	3304      	adds	r3, #4
 800ea26:	4619      	mov	r1, r3
 800ea28:	4610      	mov	r0, r2
 800ea2a:	f000 fda1 	bl	800f570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2201      	movs	r2, #1
 800ea32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2201      	movs	r2, #1
 800ea42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2201      	movs	r2, #1
 800ea4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2201      	movs	r2, #1
 800ea52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2201      	movs	r2, #1
 800ea5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2201      	movs	r2, #1
 800ea62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2201      	movs	r2, #1
 800ea6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2201      	movs	r2, #1
 800ea72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2201      	movs	r2, #1
 800ea7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2201      	movs	r2, #1
 800ea82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2201      	movs	r2, #1
 800ea8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea8e:	2300      	movs	r3, #0
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b085      	sub	sp, #20
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	2b01      	cmp	r3, #1
 800eaaa:	d001      	beq.n	800eab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800eaac:	2301      	movs	r3, #1
 800eaae:	e04f      	b.n	800eb50 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2202      	movs	r2, #2
 800eab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	68da      	ldr	r2, [r3, #12]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f042 0201 	orr.w	r2, r2, #1
 800eac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4a23      	ldr	r2, [pc, #140]	; (800eb5c <HAL_TIM_Base_Start_IT+0xc4>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d01d      	beq.n	800eb0e <HAL_TIM_Base_Start_IT+0x76>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eada:	d018      	beq.n	800eb0e <HAL_TIM_Base_Start_IT+0x76>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a1f      	ldr	r2, [pc, #124]	; (800eb60 <HAL_TIM_Base_Start_IT+0xc8>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d013      	beq.n	800eb0e <HAL_TIM_Base_Start_IT+0x76>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4a1e      	ldr	r2, [pc, #120]	; (800eb64 <HAL_TIM_Base_Start_IT+0xcc>)
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d00e      	beq.n	800eb0e <HAL_TIM_Base_Start_IT+0x76>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	4a1c      	ldr	r2, [pc, #112]	; (800eb68 <HAL_TIM_Base_Start_IT+0xd0>)
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	d009      	beq.n	800eb0e <HAL_TIM_Base_Start_IT+0x76>
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	4a1b      	ldr	r2, [pc, #108]	; (800eb6c <HAL_TIM_Base_Start_IT+0xd4>)
 800eb00:	4293      	cmp	r3, r2
 800eb02:	d004      	beq.n	800eb0e <HAL_TIM_Base_Start_IT+0x76>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	4a19      	ldr	r2, [pc, #100]	; (800eb70 <HAL_TIM_Base_Start_IT+0xd8>)
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	d115      	bne.n	800eb3a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	689a      	ldr	r2, [r3, #8]
 800eb14:	4b17      	ldr	r3, [pc, #92]	; (800eb74 <HAL_TIM_Base_Start_IT+0xdc>)
 800eb16:	4013      	ands	r3, r2
 800eb18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2b06      	cmp	r3, #6
 800eb1e:	d015      	beq.n	800eb4c <HAL_TIM_Base_Start_IT+0xb4>
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb26:	d011      	beq.n	800eb4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f042 0201 	orr.w	r2, r2, #1
 800eb36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb38:	e008      	b.n	800eb4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	681a      	ldr	r2, [r3, #0]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f042 0201 	orr.w	r2, r2, #1
 800eb48:	601a      	str	r2, [r3, #0]
 800eb4a:	e000      	b.n	800eb4e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eb4e:	2300      	movs	r3, #0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3714      	adds	r7, #20
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr
 800eb5c:	40010000 	.word	0x40010000
 800eb60:	40000400 	.word	0x40000400
 800eb64:	40000800 	.word	0x40000800
 800eb68:	40000c00 	.word	0x40000c00
 800eb6c:	40010400 	.word	0x40010400
 800eb70:	40001800 	.word	0x40001800
 800eb74:	00010007 	.word	0x00010007

0800eb78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d101      	bne.n	800eb8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800eb86:	2301      	movs	r3, #1
 800eb88:	e049      	b.n	800ec1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d106      	bne.n	800eba4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f000 f841 	bl	800ec26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2202      	movs	r2, #2
 800eba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681a      	ldr	r2, [r3, #0]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	3304      	adds	r3, #4
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	4610      	mov	r0, r2
 800ebb8:	f000 fcda 	bl	800f570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2201      	movs	r2, #1
 800ebd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2201      	movs	r2, #1
 800ec00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2201      	movs	r2, #1
 800ec08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2201      	movs	r2, #1
 800ec18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec1c:	2300      	movs	r3, #0
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3708      	adds	r7, #8
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}

0800ec26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ec26:	b480      	push	{r7}
 800ec28:	b083      	sub	sp, #12
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ec2e:	bf00      	nop
 800ec30:	370c      	adds	r7, #12
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
	...

0800ec3c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d109      	bne.n	800ec60 <HAL_TIM_PWM_Start_IT+0x24>
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ec52:	b2db      	uxtb	r3, r3
 800ec54:	2b01      	cmp	r3, #1
 800ec56:	bf14      	ite	ne
 800ec58:	2301      	movne	r3, #1
 800ec5a:	2300      	moveq	r3, #0
 800ec5c:	b2db      	uxtb	r3, r3
 800ec5e:	e03c      	b.n	800ecda <HAL_TIM_PWM_Start_IT+0x9e>
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	2b04      	cmp	r3, #4
 800ec64:	d109      	bne.n	800ec7a <HAL_TIM_PWM_Start_IT+0x3e>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	bf14      	ite	ne
 800ec72:	2301      	movne	r3, #1
 800ec74:	2300      	moveq	r3, #0
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	e02f      	b.n	800ecda <HAL_TIM_PWM_Start_IT+0x9e>
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	2b08      	cmp	r3, #8
 800ec7e:	d109      	bne.n	800ec94 <HAL_TIM_PWM_Start_IT+0x58>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec86:	b2db      	uxtb	r3, r3
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	bf14      	ite	ne
 800ec8c:	2301      	movne	r3, #1
 800ec8e:	2300      	moveq	r3, #0
 800ec90:	b2db      	uxtb	r3, r3
 800ec92:	e022      	b.n	800ecda <HAL_TIM_PWM_Start_IT+0x9e>
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	2b0c      	cmp	r3, #12
 800ec98:	d109      	bne.n	800ecae <HAL_TIM_PWM_Start_IT+0x72>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eca0:	b2db      	uxtb	r3, r3
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	bf14      	ite	ne
 800eca6:	2301      	movne	r3, #1
 800eca8:	2300      	moveq	r3, #0
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	e015      	b.n	800ecda <HAL_TIM_PWM_Start_IT+0x9e>
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	2b10      	cmp	r3, #16
 800ecb2:	d109      	bne.n	800ecc8 <HAL_TIM_PWM_Start_IT+0x8c>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ecba:	b2db      	uxtb	r3, r3
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	bf14      	ite	ne
 800ecc0:	2301      	movne	r3, #1
 800ecc2:	2300      	moveq	r3, #0
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	e008      	b.n	800ecda <HAL_TIM_PWM_Start_IT+0x9e>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ecce:	b2db      	uxtb	r3, r3
 800ecd0:	2b01      	cmp	r3, #1
 800ecd2:	bf14      	ite	ne
 800ecd4:	2301      	movne	r3, #1
 800ecd6:	2300      	moveq	r3, #0
 800ecd8:	b2db      	uxtb	r3, r3
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d001      	beq.n	800ece2 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 800ecde:	2301      	movs	r3, #1
 800ece0:	e0e2      	b.n	800eea8 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d104      	bne.n	800ecf2 <HAL_TIM_PWM_Start_IT+0xb6>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2202      	movs	r2, #2
 800ecec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ecf0:	e023      	b.n	800ed3a <HAL_TIM_PWM_Start_IT+0xfe>
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	2b04      	cmp	r3, #4
 800ecf6:	d104      	bne.n	800ed02 <HAL_TIM_PWM_Start_IT+0xc6>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2202      	movs	r2, #2
 800ecfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed00:	e01b      	b.n	800ed3a <HAL_TIM_PWM_Start_IT+0xfe>
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	2b08      	cmp	r3, #8
 800ed06:	d104      	bne.n	800ed12 <HAL_TIM_PWM_Start_IT+0xd6>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2202      	movs	r2, #2
 800ed0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed10:	e013      	b.n	800ed3a <HAL_TIM_PWM_Start_IT+0xfe>
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	2b0c      	cmp	r3, #12
 800ed16:	d104      	bne.n	800ed22 <HAL_TIM_PWM_Start_IT+0xe6>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2202      	movs	r2, #2
 800ed1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ed20:	e00b      	b.n	800ed3a <HAL_TIM_PWM_Start_IT+0xfe>
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	2b10      	cmp	r3, #16
 800ed26:	d104      	bne.n	800ed32 <HAL_TIM_PWM_Start_IT+0xf6>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2202      	movs	r2, #2
 800ed2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed30:	e003      	b.n	800ed3a <HAL_TIM_PWM_Start_IT+0xfe>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2202      	movs	r2, #2
 800ed36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	2b0c      	cmp	r3, #12
 800ed3e:	d841      	bhi.n	800edc4 <HAL_TIM_PWM_Start_IT+0x188>
 800ed40:	a201      	add	r2, pc, #4	; (adr r2, 800ed48 <HAL_TIM_PWM_Start_IT+0x10c>)
 800ed42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed46:	bf00      	nop
 800ed48:	0800ed7d 	.word	0x0800ed7d
 800ed4c:	0800edc5 	.word	0x0800edc5
 800ed50:	0800edc5 	.word	0x0800edc5
 800ed54:	0800edc5 	.word	0x0800edc5
 800ed58:	0800ed8f 	.word	0x0800ed8f
 800ed5c:	0800edc5 	.word	0x0800edc5
 800ed60:	0800edc5 	.word	0x0800edc5
 800ed64:	0800edc5 	.word	0x0800edc5
 800ed68:	0800eda1 	.word	0x0800eda1
 800ed6c:	0800edc5 	.word	0x0800edc5
 800ed70:	0800edc5 	.word	0x0800edc5
 800ed74:	0800edc5 	.word	0x0800edc5
 800ed78:	0800edb3 	.word	0x0800edb3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	68da      	ldr	r2, [r3, #12]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f042 0202 	orr.w	r2, r2, #2
 800ed8a:	60da      	str	r2, [r3, #12]
      break;
 800ed8c:	e01b      	b.n	800edc6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	68da      	ldr	r2, [r3, #12]
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f042 0204 	orr.w	r2, r2, #4
 800ed9c:	60da      	str	r2, [r3, #12]
      break;
 800ed9e:	e012      	b.n	800edc6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	68da      	ldr	r2, [r3, #12]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f042 0208 	orr.w	r2, r2, #8
 800edae:	60da      	str	r2, [r3, #12]
      break;
 800edb0:	e009      	b.n	800edc6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	68da      	ldr	r2, [r3, #12]
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f042 0210 	orr.w	r2, r2, #16
 800edc0:	60da      	str	r2, [r3, #12]
      break;
 800edc2:	e000      	b.n	800edc6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 800edc4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	2201      	movs	r2, #1
 800edcc:	6839      	ldr	r1, [r7, #0]
 800edce:	4618      	mov	r0, r3
 800edd0:	f000 ffd4 	bl	800fd7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a35      	ldr	r2, [pc, #212]	; (800eeb0 <HAL_TIM_PWM_Start_IT+0x274>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d013      	beq.n	800ee06 <HAL_TIM_PWM_Start_IT+0x1ca>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	4a34      	ldr	r2, [pc, #208]	; (800eeb4 <HAL_TIM_PWM_Start_IT+0x278>)
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d00e      	beq.n	800ee06 <HAL_TIM_PWM_Start_IT+0x1ca>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	4a32      	ldr	r2, [pc, #200]	; (800eeb8 <HAL_TIM_PWM_Start_IT+0x27c>)
 800edee:	4293      	cmp	r3, r2
 800edf0:	d009      	beq.n	800ee06 <HAL_TIM_PWM_Start_IT+0x1ca>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4a31      	ldr	r2, [pc, #196]	; (800eebc <HAL_TIM_PWM_Start_IT+0x280>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d004      	beq.n	800ee06 <HAL_TIM_PWM_Start_IT+0x1ca>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a2f      	ldr	r2, [pc, #188]	; (800eec0 <HAL_TIM_PWM_Start_IT+0x284>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d101      	bne.n	800ee0a <HAL_TIM_PWM_Start_IT+0x1ce>
 800ee06:	2301      	movs	r3, #1
 800ee08:	e000      	b.n	800ee0c <HAL_TIM_PWM_Start_IT+0x1d0>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d007      	beq.n	800ee20 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ee1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	4a22      	ldr	r2, [pc, #136]	; (800eeb0 <HAL_TIM_PWM_Start_IT+0x274>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d01d      	beq.n	800ee66 <HAL_TIM_PWM_Start_IT+0x22a>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee32:	d018      	beq.n	800ee66 <HAL_TIM_PWM_Start_IT+0x22a>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	4a22      	ldr	r2, [pc, #136]	; (800eec4 <HAL_TIM_PWM_Start_IT+0x288>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d013      	beq.n	800ee66 <HAL_TIM_PWM_Start_IT+0x22a>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	4a21      	ldr	r2, [pc, #132]	; (800eec8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d00e      	beq.n	800ee66 <HAL_TIM_PWM_Start_IT+0x22a>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4a1f      	ldr	r2, [pc, #124]	; (800eecc <HAL_TIM_PWM_Start_IT+0x290>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d009      	beq.n	800ee66 <HAL_TIM_PWM_Start_IT+0x22a>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4a17      	ldr	r2, [pc, #92]	; (800eeb4 <HAL_TIM_PWM_Start_IT+0x278>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d004      	beq.n	800ee66 <HAL_TIM_PWM_Start_IT+0x22a>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	4a1b      	ldr	r2, [pc, #108]	; (800eed0 <HAL_TIM_PWM_Start_IT+0x294>)
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d115      	bne.n	800ee92 <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	689a      	ldr	r2, [r3, #8]
 800ee6c:	4b19      	ldr	r3, [pc, #100]	; (800eed4 <HAL_TIM_PWM_Start_IT+0x298>)
 800ee6e:	4013      	ands	r3, r2
 800ee70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2b06      	cmp	r3, #6
 800ee76:	d015      	beq.n	800eea4 <HAL_TIM_PWM_Start_IT+0x268>
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee7e:	d011      	beq.n	800eea4 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	681a      	ldr	r2, [r3, #0]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f042 0201 	orr.w	r2, r2, #1
 800ee8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee90:	e008      	b.n	800eea4 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f042 0201 	orr.w	r2, r2, #1
 800eea0:	601a      	str	r2, [r3, #0]
 800eea2:	e000      	b.n	800eea6 <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eea4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eea6:	2300      	movs	r3, #0
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3710      	adds	r7, #16
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}
 800eeb0:	40010000 	.word	0x40010000
 800eeb4:	40010400 	.word	0x40010400
 800eeb8:	40014000 	.word	0x40014000
 800eebc:	40014400 	.word	0x40014400
 800eec0:	40014800 	.word	0x40014800
 800eec4:	40000400 	.word	0x40000400
 800eec8:	40000800 	.word	0x40000800
 800eecc:	40000c00 	.word	0x40000c00
 800eed0:	40001800 	.word	0x40001800
 800eed4:	00010007 	.word	0x00010007

0800eed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	691b      	ldr	r3, [r3, #16]
 800eee6:	f003 0302 	and.w	r3, r3, #2
 800eeea:	2b02      	cmp	r3, #2
 800eeec:	d122      	bne.n	800ef34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	f003 0302 	and.w	r3, r3, #2
 800eef8:	2b02      	cmp	r3, #2
 800eefa:	d11b      	bne.n	800ef34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f06f 0202 	mvn.w	r2, #2
 800ef04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2201      	movs	r2, #1
 800ef0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	699b      	ldr	r3, [r3, #24]
 800ef12:	f003 0303 	and.w	r3, r3, #3
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d003      	beq.n	800ef22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f000 fb0a 	bl	800f534 <HAL_TIM_IC_CaptureCallback>
 800ef20:	e005      	b.n	800ef2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 fafc 	bl	800f520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f000 fb0d 	bl	800f548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2200      	movs	r2, #0
 800ef32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	691b      	ldr	r3, [r3, #16]
 800ef3a:	f003 0304 	and.w	r3, r3, #4
 800ef3e:	2b04      	cmp	r3, #4
 800ef40:	d122      	bne.n	800ef88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	68db      	ldr	r3, [r3, #12]
 800ef48:	f003 0304 	and.w	r3, r3, #4
 800ef4c:	2b04      	cmp	r3, #4
 800ef4e:	d11b      	bne.n	800ef88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f06f 0204 	mvn.w	r2, #4
 800ef58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2202      	movs	r2, #2
 800ef5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	699b      	ldr	r3, [r3, #24]
 800ef66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d003      	beq.n	800ef76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 fae0 	bl	800f534 <HAL_TIM_IC_CaptureCallback>
 800ef74:	e005      	b.n	800ef82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f000 fad2 	bl	800f520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f000 fae3 	bl	800f548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2200      	movs	r2, #0
 800ef86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	691b      	ldr	r3, [r3, #16]
 800ef8e:	f003 0308 	and.w	r3, r3, #8
 800ef92:	2b08      	cmp	r3, #8
 800ef94:	d122      	bne.n	800efdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	68db      	ldr	r3, [r3, #12]
 800ef9c:	f003 0308 	and.w	r3, r3, #8
 800efa0:	2b08      	cmp	r3, #8
 800efa2:	d11b      	bne.n	800efdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f06f 0208 	mvn.w	r2, #8
 800efac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2204      	movs	r2, #4
 800efb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	69db      	ldr	r3, [r3, #28]
 800efba:	f003 0303 	and.w	r3, r3, #3
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d003      	beq.n	800efca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f000 fab6 	bl	800f534 <HAL_TIM_IC_CaptureCallback>
 800efc8:	e005      	b.n	800efd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f000 faa8 	bl	800f520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f000 fab9 	bl	800f548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2200      	movs	r2, #0
 800efda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	691b      	ldr	r3, [r3, #16]
 800efe2:	f003 0310 	and.w	r3, r3, #16
 800efe6:	2b10      	cmp	r3, #16
 800efe8:	d122      	bne.n	800f030 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	68db      	ldr	r3, [r3, #12]
 800eff0:	f003 0310 	and.w	r3, r3, #16
 800eff4:	2b10      	cmp	r3, #16
 800eff6:	d11b      	bne.n	800f030 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f06f 0210 	mvn.w	r2, #16
 800f000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2208      	movs	r2, #8
 800f006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	69db      	ldr	r3, [r3, #28]
 800f00e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f012:	2b00      	cmp	r3, #0
 800f014:	d003      	beq.n	800f01e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f000 fa8c 	bl	800f534 <HAL_TIM_IC_CaptureCallback>
 800f01c:	e005      	b.n	800f02a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f000 fa7e 	bl	800f520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 fa8f 	bl	800f548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2200      	movs	r2, #0
 800f02e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	691b      	ldr	r3, [r3, #16]
 800f036:	f003 0301 	and.w	r3, r3, #1
 800f03a:	2b01      	cmp	r3, #1
 800f03c:	d10e      	bne.n	800f05c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	68db      	ldr	r3, [r3, #12]
 800f044:	f003 0301 	and.w	r3, r3, #1
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d107      	bne.n	800f05c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f06f 0201 	mvn.w	r2, #1
 800f054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f7f5 fd70 	bl	8004b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	691b      	ldr	r3, [r3, #16]
 800f062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f066:	2b80      	cmp	r3, #128	; 0x80
 800f068:	d10e      	bne.n	800f088 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	68db      	ldr	r3, [r3, #12]
 800f070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f074:	2b80      	cmp	r3, #128	; 0x80
 800f076:	d107      	bne.n	800f088 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 ff32 	bl	800feec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	691b      	ldr	r3, [r3, #16]
 800f08e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f096:	d10e      	bne.n	800f0b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0a2:	2b80      	cmp	r3, #128	; 0x80
 800f0a4:	d107      	bne.n	800f0b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f0ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f000 ff25 	bl	800ff00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	691b      	ldr	r3, [r3, #16]
 800f0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0c0:	2b40      	cmp	r3, #64	; 0x40
 800f0c2:	d10e      	bne.n	800f0e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	68db      	ldr	r3, [r3, #12]
 800f0ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0ce:	2b40      	cmp	r3, #64	; 0x40
 800f0d0:	d107      	bne.n	800f0e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f0da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f000 fa3d 	bl	800f55c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	691b      	ldr	r3, [r3, #16]
 800f0e8:	f003 0320 	and.w	r3, r3, #32
 800f0ec:	2b20      	cmp	r3, #32
 800f0ee:	d10e      	bne.n	800f10e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	68db      	ldr	r3, [r3, #12]
 800f0f6:	f003 0320 	and.w	r3, r3, #32
 800f0fa:	2b20      	cmp	r3, #32
 800f0fc:	d107      	bne.n	800f10e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f06f 0220 	mvn.w	r2, #32
 800f106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f000 fee5 	bl	800fed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f10e:	bf00      	nop
 800f110:	3708      	adds	r7, #8
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
	...

0800f118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b084      	sub	sp, #16
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d101      	bne.n	800f132 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f12e:	2302      	movs	r3, #2
 800f130:	e0fd      	b.n	800f32e <HAL_TIM_PWM_ConfigChannel+0x216>
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2201      	movs	r2, #1
 800f136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2b14      	cmp	r3, #20
 800f13e:	f200 80f0 	bhi.w	800f322 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f142:	a201      	add	r2, pc, #4	; (adr r2, 800f148 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f148:	0800f19d 	.word	0x0800f19d
 800f14c:	0800f323 	.word	0x0800f323
 800f150:	0800f323 	.word	0x0800f323
 800f154:	0800f323 	.word	0x0800f323
 800f158:	0800f1dd 	.word	0x0800f1dd
 800f15c:	0800f323 	.word	0x0800f323
 800f160:	0800f323 	.word	0x0800f323
 800f164:	0800f323 	.word	0x0800f323
 800f168:	0800f21f 	.word	0x0800f21f
 800f16c:	0800f323 	.word	0x0800f323
 800f170:	0800f323 	.word	0x0800f323
 800f174:	0800f323 	.word	0x0800f323
 800f178:	0800f25f 	.word	0x0800f25f
 800f17c:	0800f323 	.word	0x0800f323
 800f180:	0800f323 	.word	0x0800f323
 800f184:	0800f323 	.word	0x0800f323
 800f188:	0800f2a1 	.word	0x0800f2a1
 800f18c:	0800f323 	.word	0x0800f323
 800f190:	0800f323 	.word	0x0800f323
 800f194:	0800f323 	.word	0x0800f323
 800f198:	0800f2e1 	.word	0x0800f2e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	68b9      	ldr	r1, [r7, #8]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f000 fa7e 	bl	800f6a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	699a      	ldr	r2, [r3, #24]
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f042 0208 	orr.w	r2, r2, #8
 800f1b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	699a      	ldr	r2, [r3, #24]
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f022 0204 	bic.w	r2, r2, #4
 800f1c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	6999      	ldr	r1, [r3, #24]
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	691a      	ldr	r2, [r3, #16]
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	430a      	orrs	r2, r1
 800f1d8:	619a      	str	r2, [r3, #24]
      break;
 800f1da:	e0a3      	b.n	800f324 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	68b9      	ldr	r1, [r7, #8]
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f000 faee 	bl	800f7c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	699a      	ldr	r2, [r3, #24]
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	699a      	ldr	r2, [r3, #24]
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	6999      	ldr	r1, [r3, #24]
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	691b      	ldr	r3, [r3, #16]
 800f212:	021a      	lsls	r2, r3, #8
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	430a      	orrs	r2, r1
 800f21a:	619a      	str	r2, [r3, #24]
      break;
 800f21c:	e082      	b.n	800f324 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	68b9      	ldr	r1, [r7, #8]
 800f224:	4618      	mov	r0, r3
 800f226:	f000 fb57 	bl	800f8d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	69da      	ldr	r2, [r3, #28]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f042 0208 	orr.w	r2, r2, #8
 800f238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	69da      	ldr	r2, [r3, #28]
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f022 0204 	bic.w	r2, r2, #4
 800f248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	69d9      	ldr	r1, [r3, #28]
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	691a      	ldr	r2, [r3, #16]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	430a      	orrs	r2, r1
 800f25a:	61da      	str	r2, [r3, #28]
      break;
 800f25c:	e062      	b.n	800f324 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	68b9      	ldr	r1, [r7, #8]
 800f264:	4618      	mov	r0, r3
 800f266:	f000 fbbd 	bl	800f9e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	69da      	ldr	r2, [r3, #28]
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	69da      	ldr	r2, [r3, #28]
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	69d9      	ldr	r1, [r3, #28]
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	691b      	ldr	r3, [r3, #16]
 800f294:	021a      	lsls	r2, r3, #8
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	430a      	orrs	r2, r1
 800f29c:	61da      	str	r2, [r3, #28]
      break;
 800f29e:	e041      	b.n	800f324 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	68b9      	ldr	r1, [r7, #8]
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f000 fc04 	bl	800fab4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f042 0208 	orr.w	r2, r2, #8
 800f2ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	f022 0204 	bic.w	r2, r2, #4
 800f2ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	691a      	ldr	r2, [r3, #16]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	430a      	orrs	r2, r1
 800f2dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f2de:	e021      	b.n	800f324 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	68b9      	ldr	r1, [r7, #8]
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f000 fc46 	bl	800fb78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f2fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f30a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	691b      	ldr	r3, [r3, #16]
 800f316:	021a      	lsls	r2, r3, #8
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	430a      	orrs	r2, r1
 800f31e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f320:	e000      	b.n	800f324 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800f322:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	2200      	movs	r2, #0
 800f328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f32c:	2300      	movs	r3, #0
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3710      	adds	r7, #16
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop

0800f338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b084      	sub	sp, #16
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f348:	2b01      	cmp	r3, #1
 800f34a:	d101      	bne.n	800f350 <HAL_TIM_ConfigClockSource+0x18>
 800f34c:	2302      	movs	r3, #2
 800f34e:	e0db      	b.n	800f508 <HAL_TIM_ConfigClockSource+0x1d0>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2201      	movs	r2, #1
 800f354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2202      	movs	r2, #2
 800f35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f368:	68fa      	ldr	r2, [r7, #12]
 800f36a:	4b69      	ldr	r3, [pc, #420]	; (800f510 <HAL_TIM_ConfigClockSource+0x1d8>)
 800f36c:	4013      	ands	r3, r2
 800f36e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f376:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	68fa      	ldr	r2, [r7, #12]
 800f37e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4a63      	ldr	r2, [pc, #396]	; (800f514 <HAL_TIM_ConfigClockSource+0x1dc>)
 800f386:	4293      	cmp	r3, r2
 800f388:	f000 80a9 	beq.w	800f4de <HAL_TIM_ConfigClockSource+0x1a6>
 800f38c:	4a61      	ldr	r2, [pc, #388]	; (800f514 <HAL_TIM_ConfigClockSource+0x1dc>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	f200 80ae 	bhi.w	800f4f0 <HAL_TIM_ConfigClockSource+0x1b8>
 800f394:	4a60      	ldr	r2, [pc, #384]	; (800f518 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f396:	4293      	cmp	r3, r2
 800f398:	f000 80a1 	beq.w	800f4de <HAL_TIM_ConfigClockSource+0x1a6>
 800f39c:	4a5e      	ldr	r2, [pc, #376]	; (800f518 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	f200 80a6 	bhi.w	800f4f0 <HAL_TIM_ConfigClockSource+0x1b8>
 800f3a4:	4a5d      	ldr	r2, [pc, #372]	; (800f51c <HAL_TIM_ConfigClockSource+0x1e4>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	f000 8099 	beq.w	800f4de <HAL_TIM_ConfigClockSource+0x1a6>
 800f3ac:	4a5b      	ldr	r2, [pc, #364]	; (800f51c <HAL_TIM_ConfigClockSource+0x1e4>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	f200 809e 	bhi.w	800f4f0 <HAL_TIM_ConfigClockSource+0x1b8>
 800f3b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f3b8:	f000 8091 	beq.w	800f4de <HAL_TIM_ConfigClockSource+0x1a6>
 800f3bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f3c0:	f200 8096 	bhi.w	800f4f0 <HAL_TIM_ConfigClockSource+0x1b8>
 800f3c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3c8:	f000 8089 	beq.w	800f4de <HAL_TIM_ConfigClockSource+0x1a6>
 800f3cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3d0:	f200 808e 	bhi.w	800f4f0 <HAL_TIM_ConfigClockSource+0x1b8>
 800f3d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f3d8:	d03e      	beq.n	800f458 <HAL_TIM_ConfigClockSource+0x120>
 800f3da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f3de:	f200 8087 	bhi.w	800f4f0 <HAL_TIM_ConfigClockSource+0x1b8>
 800f3e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3e6:	f000 8085 	beq.w	800f4f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f3ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3ee:	d87f      	bhi.n	800f4f0 <HAL_TIM_ConfigClockSource+0x1b8>
 800f3f0:	2b70      	cmp	r3, #112	; 0x70
 800f3f2:	d01a      	beq.n	800f42a <HAL_TIM_ConfigClockSource+0xf2>
 800f3f4:	2b70      	cmp	r3, #112	; 0x70
 800f3f6:	d87b      	bhi.n	800f4f0 <HAL_TIM_ConfigClockSource+0x1b8>
 800f3f8:	2b60      	cmp	r3, #96	; 0x60
 800f3fa:	d050      	beq.n	800f49e <HAL_TIM_ConfigClockSource+0x166>
 800f3fc:	2b60      	cmp	r3, #96	; 0x60
 800f3fe:	d877      	bhi.n	800f4f0 <HAL_TIM_ConfigClockSource+0x1b8>
 800f400:	2b50      	cmp	r3, #80	; 0x50
 800f402:	d03c      	beq.n	800f47e <HAL_TIM_ConfigClockSource+0x146>
 800f404:	2b50      	cmp	r3, #80	; 0x50
 800f406:	d873      	bhi.n	800f4f0 <HAL_TIM_ConfigClockSource+0x1b8>
 800f408:	2b40      	cmp	r3, #64	; 0x40
 800f40a:	d058      	beq.n	800f4be <HAL_TIM_ConfigClockSource+0x186>
 800f40c:	2b40      	cmp	r3, #64	; 0x40
 800f40e:	d86f      	bhi.n	800f4f0 <HAL_TIM_ConfigClockSource+0x1b8>
 800f410:	2b30      	cmp	r3, #48	; 0x30
 800f412:	d064      	beq.n	800f4de <HAL_TIM_ConfigClockSource+0x1a6>
 800f414:	2b30      	cmp	r3, #48	; 0x30
 800f416:	d86b      	bhi.n	800f4f0 <HAL_TIM_ConfigClockSource+0x1b8>
 800f418:	2b20      	cmp	r3, #32
 800f41a:	d060      	beq.n	800f4de <HAL_TIM_ConfigClockSource+0x1a6>
 800f41c:	2b20      	cmp	r3, #32
 800f41e:	d867      	bhi.n	800f4f0 <HAL_TIM_ConfigClockSource+0x1b8>
 800f420:	2b00      	cmp	r3, #0
 800f422:	d05c      	beq.n	800f4de <HAL_TIM_ConfigClockSource+0x1a6>
 800f424:	2b10      	cmp	r3, #16
 800f426:	d05a      	beq.n	800f4de <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800f428:	e062      	b.n	800f4f0 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6818      	ldr	r0, [r3, #0]
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	6899      	ldr	r1, [r3, #8]
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	685a      	ldr	r2, [r3, #4]
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	68db      	ldr	r3, [r3, #12]
 800f43a:	f000 fc7f 	bl	800fd3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f44c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	68fa      	ldr	r2, [r7, #12]
 800f454:	609a      	str	r2, [r3, #8]
      break;
 800f456:	e04e      	b.n	800f4f6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6818      	ldr	r0, [r3, #0]
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	6899      	ldr	r1, [r3, #8]
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	685a      	ldr	r2, [r3, #4]
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	68db      	ldr	r3, [r3, #12]
 800f468:	f000 fc68 	bl	800fd3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	689a      	ldr	r2, [r3, #8]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f47a:	609a      	str	r2, [r3, #8]
      break;
 800f47c:	e03b      	b.n	800f4f6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	6818      	ldr	r0, [r3, #0]
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	6859      	ldr	r1, [r3, #4]
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	68db      	ldr	r3, [r3, #12]
 800f48a:	461a      	mov	r2, r3
 800f48c:	f000 fbd8 	bl	800fc40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	2150      	movs	r1, #80	; 0x50
 800f496:	4618      	mov	r0, r3
 800f498:	f000 fc32 	bl	800fd00 <TIM_ITRx_SetConfig>
      break;
 800f49c:	e02b      	b.n	800f4f6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6818      	ldr	r0, [r3, #0]
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	6859      	ldr	r1, [r3, #4]
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	f000 fbf7 	bl	800fc9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2160      	movs	r1, #96	; 0x60
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f000 fc22 	bl	800fd00 <TIM_ITRx_SetConfig>
      break;
 800f4bc:	e01b      	b.n	800f4f6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6818      	ldr	r0, [r3, #0]
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	6859      	ldr	r1, [r3, #4]
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	f000 fbb8 	bl	800fc40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	2140      	movs	r1, #64	; 0x40
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f000 fc12 	bl	800fd00 <TIM_ITRx_SetConfig>
      break;
 800f4dc:	e00b      	b.n	800f4f6 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681a      	ldr	r2, [r3, #0]
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	4610      	mov	r0, r2
 800f4ea:	f000 fc09 	bl	800fd00 <TIM_ITRx_SetConfig>
        break;
 800f4ee:	e002      	b.n	800f4f6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800f4f0:	bf00      	nop
 800f4f2:	e000      	b.n	800f4f6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800f4f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2200      	movs	r2, #0
 800f502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f506:	2300      	movs	r3, #0
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3710      	adds	r7, #16
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	ffceff88 	.word	0xffceff88
 800f514:	00100040 	.word	0x00100040
 800f518:	00100030 	.word	0x00100030
 800f51c:	00100020 	.word	0x00100020

0800f520 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f520:	b480      	push	{r7}
 800f522:	b083      	sub	sp, #12
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f528:	bf00      	nop
 800f52a:	370c      	adds	r7, #12
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr

0800f534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f534:	b480      	push	{r7}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f53c:	bf00      	nop
 800f53e:	370c      	adds	r7, #12
 800f540:	46bd      	mov	sp, r7
 800f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f546:	4770      	bx	lr

0800f548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f548:	b480      	push	{r7}
 800f54a:	b083      	sub	sp, #12
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f550:	bf00      	nop
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr

0800f55c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f564:	bf00      	nop
 800f566:	370c      	adds	r7, #12
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f570:	b480      	push	{r7}
 800f572:	b085      	sub	sp, #20
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	4a40      	ldr	r2, [pc, #256]	; (800f684 <TIM_Base_SetConfig+0x114>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d013      	beq.n	800f5b0 <TIM_Base_SetConfig+0x40>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f58e:	d00f      	beq.n	800f5b0 <TIM_Base_SetConfig+0x40>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	4a3d      	ldr	r2, [pc, #244]	; (800f688 <TIM_Base_SetConfig+0x118>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d00b      	beq.n	800f5b0 <TIM_Base_SetConfig+0x40>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4a3c      	ldr	r2, [pc, #240]	; (800f68c <TIM_Base_SetConfig+0x11c>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d007      	beq.n	800f5b0 <TIM_Base_SetConfig+0x40>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	4a3b      	ldr	r2, [pc, #236]	; (800f690 <TIM_Base_SetConfig+0x120>)
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d003      	beq.n	800f5b0 <TIM_Base_SetConfig+0x40>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	4a3a      	ldr	r2, [pc, #232]	; (800f694 <TIM_Base_SetConfig+0x124>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d108      	bne.n	800f5c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	68fa      	ldr	r2, [r7, #12]
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	4a2f      	ldr	r2, [pc, #188]	; (800f684 <TIM_Base_SetConfig+0x114>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d01f      	beq.n	800f60a <TIM_Base_SetConfig+0x9a>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5d0:	d01b      	beq.n	800f60a <TIM_Base_SetConfig+0x9a>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	4a2c      	ldr	r2, [pc, #176]	; (800f688 <TIM_Base_SetConfig+0x118>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d017      	beq.n	800f60a <TIM_Base_SetConfig+0x9a>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4a2b      	ldr	r2, [pc, #172]	; (800f68c <TIM_Base_SetConfig+0x11c>)
 800f5de:	4293      	cmp	r3, r2
 800f5e0:	d013      	beq.n	800f60a <TIM_Base_SetConfig+0x9a>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4a2a      	ldr	r2, [pc, #168]	; (800f690 <TIM_Base_SetConfig+0x120>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d00f      	beq.n	800f60a <TIM_Base_SetConfig+0x9a>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4a29      	ldr	r2, [pc, #164]	; (800f694 <TIM_Base_SetConfig+0x124>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d00b      	beq.n	800f60a <TIM_Base_SetConfig+0x9a>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	4a28      	ldr	r2, [pc, #160]	; (800f698 <TIM_Base_SetConfig+0x128>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d007      	beq.n	800f60a <TIM_Base_SetConfig+0x9a>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	4a27      	ldr	r2, [pc, #156]	; (800f69c <TIM_Base_SetConfig+0x12c>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d003      	beq.n	800f60a <TIM_Base_SetConfig+0x9a>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	4a26      	ldr	r2, [pc, #152]	; (800f6a0 <TIM_Base_SetConfig+0x130>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d108      	bne.n	800f61c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	68db      	ldr	r3, [r3, #12]
 800f616:	68fa      	ldr	r2, [r7, #12]
 800f618:	4313      	orrs	r3, r2
 800f61a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	695b      	ldr	r3, [r3, #20]
 800f626:	4313      	orrs	r3, r2
 800f628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	689a      	ldr	r2, [r3, #8]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	4a10      	ldr	r2, [pc, #64]	; (800f684 <TIM_Base_SetConfig+0x114>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d00f      	beq.n	800f668 <TIM_Base_SetConfig+0xf8>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	4a12      	ldr	r2, [pc, #72]	; (800f694 <TIM_Base_SetConfig+0x124>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d00b      	beq.n	800f668 <TIM_Base_SetConfig+0xf8>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4a11      	ldr	r2, [pc, #68]	; (800f698 <TIM_Base_SetConfig+0x128>)
 800f654:	4293      	cmp	r3, r2
 800f656:	d007      	beq.n	800f668 <TIM_Base_SetConfig+0xf8>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	4a10      	ldr	r2, [pc, #64]	; (800f69c <TIM_Base_SetConfig+0x12c>)
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d003      	beq.n	800f668 <TIM_Base_SetConfig+0xf8>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	4a0f      	ldr	r2, [pc, #60]	; (800f6a0 <TIM_Base_SetConfig+0x130>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d103      	bne.n	800f670 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	691a      	ldr	r2, [r3, #16]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2201      	movs	r2, #1
 800f674:	615a      	str	r2, [r3, #20]
}
 800f676:	bf00      	nop
 800f678:	3714      	adds	r7, #20
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr
 800f682:	bf00      	nop
 800f684:	40010000 	.word	0x40010000
 800f688:	40000400 	.word	0x40000400
 800f68c:	40000800 	.word	0x40000800
 800f690:	40000c00 	.word	0x40000c00
 800f694:	40010400 	.word	0x40010400
 800f698:	40014000 	.word	0x40014000
 800f69c:	40014400 	.word	0x40014400
 800f6a0:	40014800 	.word	0x40014800

0800f6a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b087      	sub	sp, #28
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6a1b      	ldr	r3, [r3, #32]
 800f6b2:	f023 0201 	bic.w	r2, r3, #1
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6a1b      	ldr	r3, [r3, #32]
 800f6be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	699b      	ldr	r3, [r3, #24]
 800f6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f6cc:	68fa      	ldr	r2, [r7, #12]
 800f6ce:	4b37      	ldr	r3, [pc, #220]	; (800f7ac <TIM_OC1_SetConfig+0x108>)
 800f6d0:	4013      	ands	r3, r2
 800f6d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f023 0303 	bic.w	r3, r3, #3
 800f6da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	68fa      	ldr	r2, [r7, #12]
 800f6e2:	4313      	orrs	r3, r2
 800f6e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	f023 0302 	bic.w	r3, r3, #2
 800f6ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	689b      	ldr	r3, [r3, #8]
 800f6f2:	697a      	ldr	r2, [r7, #20]
 800f6f4:	4313      	orrs	r3, r2
 800f6f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	4a2d      	ldr	r2, [pc, #180]	; (800f7b0 <TIM_OC1_SetConfig+0x10c>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d00f      	beq.n	800f720 <TIM_OC1_SetConfig+0x7c>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	4a2c      	ldr	r2, [pc, #176]	; (800f7b4 <TIM_OC1_SetConfig+0x110>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d00b      	beq.n	800f720 <TIM_OC1_SetConfig+0x7c>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	4a2b      	ldr	r2, [pc, #172]	; (800f7b8 <TIM_OC1_SetConfig+0x114>)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d007      	beq.n	800f720 <TIM_OC1_SetConfig+0x7c>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	4a2a      	ldr	r2, [pc, #168]	; (800f7bc <TIM_OC1_SetConfig+0x118>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d003      	beq.n	800f720 <TIM_OC1_SetConfig+0x7c>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	4a29      	ldr	r2, [pc, #164]	; (800f7c0 <TIM_OC1_SetConfig+0x11c>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d10c      	bne.n	800f73a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	f023 0308 	bic.w	r3, r3, #8
 800f726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	697a      	ldr	r2, [r7, #20]
 800f72e:	4313      	orrs	r3, r2
 800f730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	f023 0304 	bic.w	r3, r3, #4
 800f738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	4a1c      	ldr	r2, [pc, #112]	; (800f7b0 <TIM_OC1_SetConfig+0x10c>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d00f      	beq.n	800f762 <TIM_OC1_SetConfig+0xbe>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4a1b      	ldr	r2, [pc, #108]	; (800f7b4 <TIM_OC1_SetConfig+0x110>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d00b      	beq.n	800f762 <TIM_OC1_SetConfig+0xbe>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	4a1a      	ldr	r2, [pc, #104]	; (800f7b8 <TIM_OC1_SetConfig+0x114>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d007      	beq.n	800f762 <TIM_OC1_SetConfig+0xbe>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4a19      	ldr	r2, [pc, #100]	; (800f7bc <TIM_OC1_SetConfig+0x118>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d003      	beq.n	800f762 <TIM_OC1_SetConfig+0xbe>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4a18      	ldr	r2, [pc, #96]	; (800f7c0 <TIM_OC1_SetConfig+0x11c>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d111      	bne.n	800f786 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	695b      	ldr	r3, [r3, #20]
 800f776:	693a      	ldr	r2, [r7, #16]
 800f778:	4313      	orrs	r3, r2
 800f77a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	699b      	ldr	r3, [r3, #24]
 800f780:	693a      	ldr	r2, [r7, #16]
 800f782:	4313      	orrs	r3, r2
 800f784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	693a      	ldr	r2, [r7, #16]
 800f78a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	68fa      	ldr	r2, [r7, #12]
 800f790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	685a      	ldr	r2, [r3, #4]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	697a      	ldr	r2, [r7, #20]
 800f79e:	621a      	str	r2, [r3, #32]
}
 800f7a0:	bf00      	nop
 800f7a2:	371c      	adds	r7, #28
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr
 800f7ac:	fffeff8f 	.word	0xfffeff8f
 800f7b0:	40010000 	.word	0x40010000
 800f7b4:	40010400 	.word	0x40010400
 800f7b8:	40014000 	.word	0x40014000
 800f7bc:	40014400 	.word	0x40014400
 800f7c0:	40014800 	.word	0x40014800

0800f7c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f7c4:	b480      	push	{r7}
 800f7c6:	b087      	sub	sp, #28
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6a1b      	ldr	r3, [r3, #32]
 800f7d2:	f023 0210 	bic.w	r2, r3, #16
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6a1b      	ldr	r3, [r3, #32]
 800f7de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	699b      	ldr	r3, [r3, #24]
 800f7ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f7ec:	68fa      	ldr	r2, [r7, #12]
 800f7ee:	4b34      	ldr	r3, [pc, #208]	; (800f8c0 <TIM_OC2_SetConfig+0xfc>)
 800f7f0:	4013      	ands	r3, r2
 800f7f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f7fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	021b      	lsls	r3, r3, #8
 800f802:	68fa      	ldr	r2, [r7, #12]
 800f804:	4313      	orrs	r3, r2
 800f806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	f023 0320 	bic.w	r3, r3, #32
 800f80e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	689b      	ldr	r3, [r3, #8]
 800f814:	011b      	lsls	r3, r3, #4
 800f816:	697a      	ldr	r2, [r7, #20]
 800f818:	4313      	orrs	r3, r2
 800f81a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	4a29      	ldr	r2, [pc, #164]	; (800f8c4 <TIM_OC2_SetConfig+0x100>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d003      	beq.n	800f82c <TIM_OC2_SetConfig+0x68>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	4a28      	ldr	r2, [pc, #160]	; (800f8c8 <TIM_OC2_SetConfig+0x104>)
 800f828:	4293      	cmp	r3, r2
 800f82a:	d10d      	bne.n	800f848 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	68db      	ldr	r3, [r3, #12]
 800f838:	011b      	lsls	r3, r3, #4
 800f83a:	697a      	ldr	r2, [r7, #20]
 800f83c:	4313      	orrs	r3, r2
 800f83e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f846:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4a1e      	ldr	r2, [pc, #120]	; (800f8c4 <TIM_OC2_SetConfig+0x100>)
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d00f      	beq.n	800f870 <TIM_OC2_SetConfig+0xac>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	4a1d      	ldr	r2, [pc, #116]	; (800f8c8 <TIM_OC2_SetConfig+0x104>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d00b      	beq.n	800f870 <TIM_OC2_SetConfig+0xac>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	4a1c      	ldr	r2, [pc, #112]	; (800f8cc <TIM_OC2_SetConfig+0x108>)
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d007      	beq.n	800f870 <TIM_OC2_SetConfig+0xac>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	4a1b      	ldr	r2, [pc, #108]	; (800f8d0 <TIM_OC2_SetConfig+0x10c>)
 800f864:	4293      	cmp	r3, r2
 800f866:	d003      	beq.n	800f870 <TIM_OC2_SetConfig+0xac>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	4a1a      	ldr	r2, [pc, #104]	; (800f8d4 <TIM_OC2_SetConfig+0x110>)
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d113      	bne.n	800f898 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f87e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	695b      	ldr	r3, [r3, #20]
 800f884:	009b      	lsls	r3, r3, #2
 800f886:	693a      	ldr	r2, [r7, #16]
 800f888:	4313      	orrs	r3, r2
 800f88a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	699b      	ldr	r3, [r3, #24]
 800f890:	009b      	lsls	r3, r3, #2
 800f892:	693a      	ldr	r2, [r7, #16]
 800f894:	4313      	orrs	r3, r2
 800f896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	693a      	ldr	r2, [r7, #16]
 800f89c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	68fa      	ldr	r2, [r7, #12]
 800f8a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	685a      	ldr	r2, [r3, #4]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	697a      	ldr	r2, [r7, #20]
 800f8b0:	621a      	str	r2, [r3, #32]
}
 800f8b2:	bf00      	nop
 800f8b4:	371c      	adds	r7, #28
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr
 800f8be:	bf00      	nop
 800f8c0:	feff8fff 	.word	0xfeff8fff
 800f8c4:	40010000 	.word	0x40010000
 800f8c8:	40010400 	.word	0x40010400
 800f8cc:	40014000 	.word	0x40014000
 800f8d0:	40014400 	.word	0x40014400
 800f8d4:	40014800 	.word	0x40014800

0800f8d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b087      	sub	sp, #28
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6a1b      	ldr	r3, [r3, #32]
 800f8e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6a1b      	ldr	r3, [r3, #32]
 800f8f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	69db      	ldr	r3, [r3, #28]
 800f8fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f023 0303 	bic.w	r3, r3, #3
 800f90e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	68fa      	ldr	r2, [r7, #12]
 800f916:	4313      	orrs	r3, r2
 800f918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	689b      	ldr	r3, [r3, #8]
 800f926:	021b      	lsls	r3, r3, #8
 800f928:	697a      	ldr	r2, [r7, #20]
 800f92a:	4313      	orrs	r3, r2
 800f92c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4a27      	ldr	r2, [pc, #156]	; (800f9d0 <TIM_OC3_SetConfig+0xf8>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d003      	beq.n	800f93e <TIM_OC3_SetConfig+0x66>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4a26      	ldr	r2, [pc, #152]	; (800f9d4 <TIM_OC3_SetConfig+0xfc>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d10d      	bne.n	800f95a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	68db      	ldr	r3, [r3, #12]
 800f94a:	021b      	lsls	r3, r3, #8
 800f94c:	697a      	ldr	r2, [r7, #20]
 800f94e:	4313      	orrs	r3, r2
 800f950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	4a1c      	ldr	r2, [pc, #112]	; (800f9d0 <TIM_OC3_SetConfig+0xf8>)
 800f95e:	4293      	cmp	r3, r2
 800f960:	d00f      	beq.n	800f982 <TIM_OC3_SetConfig+0xaa>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	4a1b      	ldr	r2, [pc, #108]	; (800f9d4 <TIM_OC3_SetConfig+0xfc>)
 800f966:	4293      	cmp	r3, r2
 800f968:	d00b      	beq.n	800f982 <TIM_OC3_SetConfig+0xaa>
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	4a1a      	ldr	r2, [pc, #104]	; (800f9d8 <TIM_OC3_SetConfig+0x100>)
 800f96e:	4293      	cmp	r3, r2
 800f970:	d007      	beq.n	800f982 <TIM_OC3_SetConfig+0xaa>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	4a19      	ldr	r2, [pc, #100]	; (800f9dc <TIM_OC3_SetConfig+0x104>)
 800f976:	4293      	cmp	r3, r2
 800f978:	d003      	beq.n	800f982 <TIM_OC3_SetConfig+0xaa>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	4a18      	ldr	r2, [pc, #96]	; (800f9e0 <TIM_OC3_SetConfig+0x108>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d113      	bne.n	800f9aa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	695b      	ldr	r3, [r3, #20]
 800f996:	011b      	lsls	r3, r3, #4
 800f998:	693a      	ldr	r2, [r7, #16]
 800f99a:	4313      	orrs	r3, r2
 800f99c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	699b      	ldr	r3, [r3, #24]
 800f9a2:	011b      	lsls	r3, r3, #4
 800f9a4:	693a      	ldr	r2, [r7, #16]
 800f9a6:	4313      	orrs	r3, r2
 800f9a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	693a      	ldr	r2, [r7, #16]
 800f9ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	68fa      	ldr	r2, [r7, #12]
 800f9b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	685a      	ldr	r2, [r3, #4]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	697a      	ldr	r2, [r7, #20]
 800f9c2:	621a      	str	r2, [r3, #32]
}
 800f9c4:	bf00      	nop
 800f9c6:	371c      	adds	r7, #28
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr
 800f9d0:	40010000 	.word	0x40010000
 800f9d4:	40010400 	.word	0x40010400
 800f9d8:	40014000 	.word	0x40014000
 800f9dc:	40014400 	.word	0x40014400
 800f9e0:	40014800 	.word	0x40014800

0800f9e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b087      	sub	sp, #28
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6a1b      	ldr	r3, [r3, #32]
 800f9f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6a1b      	ldr	r3, [r3, #32]
 800f9fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	685b      	ldr	r3, [r3, #4]
 800fa04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	69db      	ldr	r3, [r3, #28]
 800fa0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	021b      	lsls	r3, r3, #8
 800fa22:	68fa      	ldr	r2, [r7, #12]
 800fa24:	4313      	orrs	r3, r2
 800fa26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	689b      	ldr	r3, [r3, #8]
 800fa34:	031b      	lsls	r3, r3, #12
 800fa36:	693a      	ldr	r2, [r7, #16]
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	4a18      	ldr	r2, [pc, #96]	; (800faa0 <TIM_OC4_SetConfig+0xbc>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d00f      	beq.n	800fa64 <TIM_OC4_SetConfig+0x80>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	4a17      	ldr	r2, [pc, #92]	; (800faa4 <TIM_OC4_SetConfig+0xc0>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d00b      	beq.n	800fa64 <TIM_OC4_SetConfig+0x80>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	4a16      	ldr	r2, [pc, #88]	; (800faa8 <TIM_OC4_SetConfig+0xc4>)
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d007      	beq.n	800fa64 <TIM_OC4_SetConfig+0x80>
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	4a15      	ldr	r2, [pc, #84]	; (800faac <TIM_OC4_SetConfig+0xc8>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d003      	beq.n	800fa64 <TIM_OC4_SetConfig+0x80>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	4a14      	ldr	r2, [pc, #80]	; (800fab0 <TIM_OC4_SetConfig+0xcc>)
 800fa60:	4293      	cmp	r3, r2
 800fa62:	d109      	bne.n	800fa78 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	695b      	ldr	r3, [r3, #20]
 800fa70:	019b      	lsls	r3, r3, #6
 800fa72:	697a      	ldr	r2, [r7, #20]
 800fa74:	4313      	orrs	r3, r2
 800fa76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	697a      	ldr	r2, [r7, #20]
 800fa7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	68fa      	ldr	r2, [r7, #12]
 800fa82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	685a      	ldr	r2, [r3, #4]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	693a      	ldr	r2, [r7, #16]
 800fa90:	621a      	str	r2, [r3, #32]
}
 800fa92:	bf00      	nop
 800fa94:	371c      	adds	r7, #28
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop
 800faa0:	40010000 	.word	0x40010000
 800faa4:	40010400 	.word	0x40010400
 800faa8:	40014000 	.word	0x40014000
 800faac:	40014400 	.word	0x40014400
 800fab0:	40014800 	.word	0x40014800

0800fab4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fab4:	b480      	push	{r7}
 800fab6:	b087      	sub	sp, #28
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6a1b      	ldr	r3, [r3, #32]
 800fac2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6a1b      	ldr	r3, [r3, #32]
 800face:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	685b      	ldr	r3, [r3, #4]
 800fad4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	68fa      	ldr	r2, [r7, #12]
 800faea:	4313      	orrs	r3, r2
 800faec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800faf4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	689b      	ldr	r3, [r3, #8]
 800fafa:	041b      	lsls	r3, r3, #16
 800fafc:	693a      	ldr	r2, [r7, #16]
 800fafe:	4313      	orrs	r3, r2
 800fb00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	4a17      	ldr	r2, [pc, #92]	; (800fb64 <TIM_OC5_SetConfig+0xb0>)
 800fb06:	4293      	cmp	r3, r2
 800fb08:	d00f      	beq.n	800fb2a <TIM_OC5_SetConfig+0x76>
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	4a16      	ldr	r2, [pc, #88]	; (800fb68 <TIM_OC5_SetConfig+0xb4>)
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d00b      	beq.n	800fb2a <TIM_OC5_SetConfig+0x76>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	4a15      	ldr	r2, [pc, #84]	; (800fb6c <TIM_OC5_SetConfig+0xb8>)
 800fb16:	4293      	cmp	r3, r2
 800fb18:	d007      	beq.n	800fb2a <TIM_OC5_SetConfig+0x76>
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	4a14      	ldr	r2, [pc, #80]	; (800fb70 <TIM_OC5_SetConfig+0xbc>)
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d003      	beq.n	800fb2a <TIM_OC5_SetConfig+0x76>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	4a13      	ldr	r2, [pc, #76]	; (800fb74 <TIM_OC5_SetConfig+0xc0>)
 800fb26:	4293      	cmp	r3, r2
 800fb28:	d109      	bne.n	800fb3e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fb30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	695b      	ldr	r3, [r3, #20]
 800fb36:	021b      	lsls	r3, r3, #8
 800fb38:	697a      	ldr	r2, [r7, #20]
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	697a      	ldr	r2, [r7, #20]
 800fb42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	68fa      	ldr	r2, [r7, #12]
 800fb48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	685a      	ldr	r2, [r3, #4]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	693a      	ldr	r2, [r7, #16]
 800fb56:	621a      	str	r2, [r3, #32]
}
 800fb58:	bf00      	nop
 800fb5a:	371c      	adds	r7, #28
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr
 800fb64:	40010000 	.word	0x40010000
 800fb68:	40010400 	.word	0x40010400
 800fb6c:	40014000 	.word	0x40014000
 800fb70:	40014400 	.word	0x40014400
 800fb74:	40014800 	.word	0x40014800

0800fb78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b087      	sub	sp, #28
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6a1b      	ldr	r3, [r3, #32]
 800fb86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6a1b      	ldr	r3, [r3, #32]
 800fb92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	021b      	lsls	r3, r3, #8
 800fbae:	68fa      	ldr	r2, [r7, #12]
 800fbb0:	4313      	orrs	r3, r2
 800fbb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fbba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	689b      	ldr	r3, [r3, #8]
 800fbc0:	051b      	lsls	r3, r3, #20
 800fbc2:	693a      	ldr	r2, [r7, #16]
 800fbc4:	4313      	orrs	r3, r2
 800fbc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	4a18      	ldr	r2, [pc, #96]	; (800fc2c <TIM_OC6_SetConfig+0xb4>)
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d00f      	beq.n	800fbf0 <TIM_OC6_SetConfig+0x78>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	4a17      	ldr	r2, [pc, #92]	; (800fc30 <TIM_OC6_SetConfig+0xb8>)
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	d00b      	beq.n	800fbf0 <TIM_OC6_SetConfig+0x78>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	4a16      	ldr	r2, [pc, #88]	; (800fc34 <TIM_OC6_SetConfig+0xbc>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d007      	beq.n	800fbf0 <TIM_OC6_SetConfig+0x78>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	4a15      	ldr	r2, [pc, #84]	; (800fc38 <TIM_OC6_SetConfig+0xc0>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d003      	beq.n	800fbf0 <TIM_OC6_SetConfig+0x78>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	4a14      	ldr	r2, [pc, #80]	; (800fc3c <TIM_OC6_SetConfig+0xc4>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d109      	bne.n	800fc04 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fbf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	695b      	ldr	r3, [r3, #20]
 800fbfc:	029b      	lsls	r3, r3, #10
 800fbfe:	697a      	ldr	r2, [r7, #20]
 800fc00:	4313      	orrs	r3, r2
 800fc02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	697a      	ldr	r2, [r7, #20]
 800fc08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	68fa      	ldr	r2, [r7, #12]
 800fc0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	685a      	ldr	r2, [r3, #4]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	693a      	ldr	r2, [r7, #16]
 800fc1c:	621a      	str	r2, [r3, #32]
}
 800fc1e:	bf00      	nop
 800fc20:	371c      	adds	r7, #28
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr
 800fc2a:	bf00      	nop
 800fc2c:	40010000 	.word	0x40010000
 800fc30:	40010400 	.word	0x40010400
 800fc34:	40014000 	.word	0x40014000
 800fc38:	40014400 	.word	0x40014400
 800fc3c:	40014800 	.word	0x40014800

0800fc40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b087      	sub	sp, #28
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	6a1b      	ldr	r3, [r3, #32]
 800fc50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	6a1b      	ldr	r3, [r3, #32]
 800fc56:	f023 0201 	bic.w	r2, r3, #1
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	699b      	ldr	r3, [r3, #24]
 800fc62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fc6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	011b      	lsls	r3, r3, #4
 800fc70:	693a      	ldr	r2, [r7, #16]
 800fc72:	4313      	orrs	r3, r2
 800fc74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	f023 030a 	bic.w	r3, r3, #10
 800fc7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fc7e:	697a      	ldr	r2, [r7, #20]
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	4313      	orrs	r3, r2
 800fc84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	693a      	ldr	r2, [r7, #16]
 800fc8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	697a      	ldr	r2, [r7, #20]
 800fc90:	621a      	str	r2, [r3, #32]
}
 800fc92:	bf00      	nop
 800fc94:	371c      	adds	r7, #28
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr

0800fc9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc9e:	b480      	push	{r7}
 800fca0:	b087      	sub	sp, #28
 800fca2:	af00      	add	r7, sp, #0
 800fca4:	60f8      	str	r0, [r7, #12]
 800fca6:	60b9      	str	r1, [r7, #8]
 800fca8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	6a1b      	ldr	r3, [r3, #32]
 800fcae:	f023 0210 	bic.w	r2, r3, #16
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	699b      	ldr	r3, [r3, #24]
 800fcba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	6a1b      	ldr	r3, [r3, #32]
 800fcc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fcc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	031b      	lsls	r3, r3, #12
 800fcce:	697a      	ldr	r2, [r7, #20]
 800fcd0:	4313      	orrs	r3, r2
 800fcd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fcda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	011b      	lsls	r3, r3, #4
 800fce0:	693a      	ldr	r2, [r7, #16]
 800fce2:	4313      	orrs	r3, r2
 800fce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	697a      	ldr	r2, [r7, #20]
 800fcea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	693a      	ldr	r2, [r7, #16]
 800fcf0:	621a      	str	r2, [r3, #32]
}
 800fcf2:	bf00      	nop
 800fcf4:	371c      	adds	r7, #28
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfc:	4770      	bx	lr
	...

0800fd00 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fd00:	b480      	push	{r7}
 800fd02:	b085      	sub	sp, #20
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	689b      	ldr	r3, [r3, #8]
 800fd0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fd10:	68fa      	ldr	r2, [r7, #12]
 800fd12:	4b09      	ldr	r3, [pc, #36]	; (800fd38 <TIM_ITRx_SetConfig+0x38>)
 800fd14:	4013      	ands	r3, r2
 800fd16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fd18:	683a      	ldr	r2, [r7, #0]
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	4313      	orrs	r3, r2
 800fd1e:	f043 0307 	orr.w	r3, r3, #7
 800fd22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	68fa      	ldr	r2, [r7, #12]
 800fd28:	609a      	str	r2, [r3, #8]
}
 800fd2a:	bf00      	nop
 800fd2c:	3714      	adds	r7, #20
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd34:	4770      	bx	lr
 800fd36:	bf00      	nop
 800fd38:	ffcfff8f 	.word	0xffcfff8f

0800fd3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b087      	sub	sp, #28
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	60b9      	str	r1, [r7, #8]
 800fd46:	607a      	str	r2, [r7, #4]
 800fd48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	689b      	ldr	r3, [r3, #8]
 800fd4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fd56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	021a      	lsls	r2, r3, #8
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	431a      	orrs	r2, r3
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	4313      	orrs	r3, r2
 800fd64:	697a      	ldr	r2, [r7, #20]
 800fd66:	4313      	orrs	r3, r2
 800fd68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	697a      	ldr	r2, [r7, #20]
 800fd6e:	609a      	str	r2, [r3, #8]
}
 800fd70:	bf00      	nop
 800fd72:	371c      	adds	r7, #28
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr

0800fd7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b087      	sub	sp, #28
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	60f8      	str	r0, [r7, #12]
 800fd84:	60b9      	str	r1, [r7, #8]
 800fd86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	f003 031f 	and.w	r3, r3, #31
 800fd8e:	2201      	movs	r2, #1
 800fd90:	fa02 f303 	lsl.w	r3, r2, r3
 800fd94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	6a1a      	ldr	r2, [r3, #32]
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	43db      	mvns	r3, r3
 800fd9e:	401a      	ands	r2, r3
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	6a1a      	ldr	r2, [r3, #32]
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	f003 031f 	and.w	r3, r3, #31
 800fdae:	6879      	ldr	r1, [r7, #4]
 800fdb0:	fa01 f303 	lsl.w	r3, r1, r3
 800fdb4:	431a      	orrs	r2, r3
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	621a      	str	r2, [r3, #32]
}
 800fdba:	bf00      	nop
 800fdbc:	371c      	adds	r7, #28
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc4:	4770      	bx	lr
	...

0800fdc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b085      	sub	sp, #20
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fdd8:	2b01      	cmp	r3, #1
 800fdda:	d101      	bne.n	800fde0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fddc:	2302      	movs	r3, #2
 800fdde:	e068      	b.n	800feb2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2201      	movs	r2, #1
 800fde4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2202      	movs	r2, #2
 800fdec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	689b      	ldr	r3, [r3, #8]
 800fdfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	4a2e      	ldr	r2, [pc, #184]	; (800fec0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d004      	beq.n	800fe14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	4a2d      	ldr	r2, [pc, #180]	; (800fec4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800fe10:	4293      	cmp	r3, r2
 800fe12:	d108      	bne.n	800fe26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fe1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	68fa      	ldr	r2, [r7, #12]
 800fe22:	4313      	orrs	r3, r2
 800fe24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	68fa      	ldr	r2, [r7, #12]
 800fe34:	4313      	orrs	r3, r2
 800fe36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	68fa      	ldr	r2, [r7, #12]
 800fe3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	4a1e      	ldr	r2, [pc, #120]	; (800fec0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fe46:	4293      	cmp	r3, r2
 800fe48:	d01d      	beq.n	800fe86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe52:	d018      	beq.n	800fe86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	4a1b      	ldr	r2, [pc, #108]	; (800fec8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fe5a:	4293      	cmp	r3, r2
 800fe5c:	d013      	beq.n	800fe86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	4a1a      	ldr	r2, [pc, #104]	; (800fecc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fe64:	4293      	cmp	r3, r2
 800fe66:	d00e      	beq.n	800fe86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	4a18      	ldr	r2, [pc, #96]	; (800fed0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	d009      	beq.n	800fe86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	4a13      	ldr	r2, [pc, #76]	; (800fec4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800fe78:	4293      	cmp	r3, r2
 800fe7a:	d004      	beq.n	800fe86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	4a14      	ldr	r2, [pc, #80]	; (800fed4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fe82:	4293      	cmp	r3, r2
 800fe84:	d10c      	bne.n	800fea0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	689b      	ldr	r3, [r3, #8]
 800fe92:	68ba      	ldr	r2, [r7, #8]
 800fe94:	4313      	orrs	r3, r2
 800fe96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	68ba      	ldr	r2, [r7, #8]
 800fe9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2201      	movs	r2, #1
 800fea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2200      	movs	r2, #0
 800feac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800feb0:	2300      	movs	r3, #0
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3714      	adds	r7, #20
 800feb6:	46bd      	mov	sp, r7
 800feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febc:	4770      	bx	lr
 800febe:	bf00      	nop
 800fec0:	40010000 	.word	0x40010000
 800fec4:	40010400 	.word	0x40010400
 800fec8:	40000400 	.word	0x40000400
 800fecc:	40000800 	.word	0x40000800
 800fed0:	40000c00 	.word	0x40000c00
 800fed4:	40001800 	.word	0x40001800

0800fed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fee0:	bf00      	nop
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800feec:	b480      	push	{r7}
 800feee:	b083      	sub	sp, #12
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fef4:	bf00      	nop
 800fef6:	370c      	adds	r7, #12
 800fef8:	46bd      	mov	sp, r7
 800fefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefe:	4770      	bx	lr

0800ff00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff08:	bf00      	nop
 800ff0a:	370c      	adds	r7, #12
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr

0800ff14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d101      	bne.n	800ff26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff22:	2301      	movs	r3, #1
 800ff24:	e042      	b.n	800ffac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d106      	bne.n	800ff3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2200      	movs	r2, #0
 800ff34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f7f4 fc23 	bl	8004784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2224      	movs	r2, #36	; 0x24
 800ff42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	681a      	ldr	r2, [r3, #0]
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f022 0201 	bic.w	r2, r2, #1
 800ff54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f000 fbe0 	bl	801071c <UART_SetConfig>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2b01      	cmp	r3, #1
 800ff60:	d101      	bne.n	800ff66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ff62:	2301      	movs	r3, #1
 800ff64:	e022      	b.n	800ffac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d002      	beq.n	800ff74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f001 f934 	bl	80111dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	685a      	ldr	r2, [r3, #4]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ff82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	689a      	ldr	r2, [r3, #8]
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ff92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	681a      	ldr	r2, [r3, #0]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	f042 0201 	orr.w	r2, r2, #1
 800ffa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f001 f9bb 	bl	8011320 <UART_CheckIdleState>
 800ffaa:	4603      	mov	r3, r0
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	3708      	adds	r7, #8
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}

0800ffb4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b084      	sub	sp, #16
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	60f8      	str	r0, [r7, #12]
 800ffbc:	60b9      	str	r1, [r7, #8]
 800ffbe:	4613      	mov	r3, r2
 800ffc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffc8:	2b20      	cmp	r3, #32
 800ffca:	d168      	bne.n	801009e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d002      	beq.n	800ffd8 <HAL_UART_Transmit_DMA+0x24>
 800ffd2:	88fb      	ldrh	r3, [r7, #6]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d101      	bne.n	800ffdc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ffd8:	2301      	movs	r3, #1
 800ffda:	e061      	b.n	80100a0 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ffe2:	2b01      	cmp	r3, #1
 800ffe4:	d101      	bne.n	800ffea <HAL_UART_Transmit_DMA+0x36>
 800ffe6:	2302      	movs	r3, #2
 800ffe8:	e05a      	b.n	80100a0 <HAL_UART_Transmit_DMA+0xec>
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2201      	movs	r2, #1
 800ffee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	68ba      	ldr	r2, [r7, #8]
 800fff6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	88fa      	ldrh	r2, [r7, #6]
 800fffc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	88fa      	ldrh	r2, [r7, #6]
 8010004:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2200      	movs	r2, #0
 801000c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	2221      	movs	r2, #33	; 0x21
 8010014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801001c:	2b00      	cmp	r3, #0
 801001e:	d02c      	beq.n	801007a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010024:	4a20      	ldr	r2, [pc, #128]	; (80100a8 <HAL_UART_Transmit_DMA+0xf4>)
 8010026:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801002c:	4a1f      	ldr	r2, [pc, #124]	; (80100ac <HAL_UART_Transmit_DMA+0xf8>)
 801002e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010034:	4a1e      	ldr	r2, [pc, #120]	; (80100b0 <HAL_UART_Transmit_DMA+0xfc>)
 8010036:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801003c:	2200      	movs	r2, #0
 801003e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010048:	4619      	mov	r1, r3
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	3328      	adds	r3, #40	; 0x28
 8010050:	461a      	mov	r2, r3
 8010052:	88fb      	ldrh	r3, [r7, #6]
 8010054:	f7f6 f9c0 	bl	80063d8 <HAL_DMA_Start_IT>
 8010058:	4603      	mov	r3, r0
 801005a:	2b00      	cmp	r3, #0
 801005c:	d00d      	beq.n	801007a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2210      	movs	r2, #16
 8010062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	2200      	movs	r2, #0
 801006a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	2220      	movs	r2, #32
 8010072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8010076:	2301      	movs	r3, #1
 8010078:	e012      	b.n	80100a0 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	2240      	movs	r2, #64	; 0x40
 8010080:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2200      	movs	r2, #0
 8010086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	689a      	ldr	r2, [r3, #8]
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010098:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 801009a:	2300      	movs	r3, #0
 801009c:	e000      	b.n	80100a0 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 801009e:	2302      	movs	r3, #2
  }
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3710      	adds	r7, #16
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	08011635 	.word	0x08011635
 80100ac:	08011685 	.word	0x08011685
 80100b0:	0801176f 	.word	0x0801176f

080100b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b084      	sub	sp, #16
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	60b9      	str	r1, [r7, #8]
 80100be:	4613      	mov	r3, r2
 80100c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100c8:	2b20      	cmp	r3, #32
 80100ca:	d131      	bne.n	8010130 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d002      	beq.n	80100d8 <HAL_UART_Receive_DMA+0x24>
 80100d2:	88fb      	ldrh	r3, [r7, #6]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d101      	bne.n	80100dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80100d8:	2301      	movs	r3, #1
 80100da:	e02a      	b.n	8010132 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80100e2:	2b01      	cmp	r3, #1
 80100e4:	d101      	bne.n	80100ea <HAL_UART_Receive_DMA+0x36>
 80100e6:	2302      	movs	r3, #2
 80100e8:	e023      	b.n	8010132 <HAL_UART_Receive_DMA+0x7e>
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	2201      	movs	r2, #1
 80100ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	2200      	movs	r2, #0
 80100f6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	4a0f      	ldr	r2, [pc, #60]	; (801013c <HAL_UART_Receive_DMA+0x88>)
 80100fe:	4293      	cmp	r3, r2
 8010100:	d00e      	beq.n	8010120 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	685b      	ldr	r3, [r3, #4]
 8010108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801010c:	2b00      	cmp	r3, #0
 801010e:	d007      	beq.n	8010120 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	681a      	ldr	r2, [r3, #0]
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801011e:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010120:	88fb      	ldrh	r3, [r7, #6]
 8010122:	461a      	mov	r2, r3
 8010124:	68b9      	ldr	r1, [r7, #8]
 8010126:	68f8      	ldr	r0, [r7, #12]
 8010128:	f001 f9c6 	bl	80114b8 <UART_Start_Receive_DMA>
 801012c:	4603      	mov	r3, r0
 801012e:	e000      	b.n	8010132 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8010130:	2302      	movs	r3, #2
  }
}
 8010132:	4618      	mov	r0, r3
 8010134:	3710      	adds	r7, #16
 8010136:	46bd      	mov	sp, r7
 8010138:	bd80      	pop	{r7, pc}
 801013a:	bf00      	nop
 801013c:	58000c00 	.word	0x58000c00

08010140 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b088      	sub	sp, #32
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	69db      	ldr	r3, [r3, #28]
 801014e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	689b      	ldr	r3, [r3, #8]
 801015e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010160:	69fa      	ldr	r2, [r7, #28]
 8010162:	f640 030f 	movw	r3, #2063	; 0x80f
 8010166:	4013      	ands	r3, r2
 8010168:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 801016a:	693b      	ldr	r3, [r7, #16]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d118      	bne.n	80101a2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	f003 0320 	and.w	r3, r3, #32
 8010176:	2b00      	cmp	r3, #0
 8010178:	d013      	beq.n	80101a2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801017a:	69bb      	ldr	r3, [r7, #24]
 801017c:	f003 0320 	and.w	r3, r3, #32
 8010180:	2b00      	cmp	r3, #0
 8010182:	d104      	bne.n	801018e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801018a:	2b00      	cmp	r3, #0
 801018c:	d009      	beq.n	80101a2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010192:	2b00      	cmp	r3, #0
 8010194:	f000 8282 	beq.w	801069c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	4798      	blx	r3
      }
      return;
 80101a0:	e27c      	b.n	801069c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	f000 80ef 	beq.w	8010388 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80101aa:	697a      	ldr	r2, [r7, #20]
 80101ac:	4b73      	ldr	r3, [pc, #460]	; (801037c <HAL_UART_IRQHandler+0x23c>)
 80101ae:	4013      	ands	r3, r2
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d105      	bne.n	80101c0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80101b4:	69ba      	ldr	r2, [r7, #24]
 80101b6:	4b72      	ldr	r3, [pc, #456]	; (8010380 <HAL_UART_IRQHandler+0x240>)
 80101b8:	4013      	ands	r3, r2
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	f000 80e4 	beq.w	8010388 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80101c0:	69fb      	ldr	r3, [r7, #28]
 80101c2:	f003 0301 	and.w	r3, r3, #1
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d010      	beq.n	80101ec <HAL_UART_IRQHandler+0xac>
 80101ca:	69bb      	ldr	r3, [r7, #24]
 80101cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d00b      	beq.n	80101ec <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	2201      	movs	r2, #1
 80101da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80101e2:	f043 0201 	orr.w	r2, r3, #1
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80101ec:	69fb      	ldr	r3, [r7, #28]
 80101ee:	f003 0302 	and.w	r3, r3, #2
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d010      	beq.n	8010218 <HAL_UART_IRQHandler+0xd8>
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	f003 0301 	and.w	r3, r3, #1
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d00b      	beq.n	8010218 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2202      	movs	r2, #2
 8010206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801020e:	f043 0204 	orr.w	r2, r3, #4
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	f003 0304 	and.w	r3, r3, #4
 801021e:	2b00      	cmp	r3, #0
 8010220:	d010      	beq.n	8010244 <HAL_UART_IRQHandler+0x104>
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	f003 0301 	and.w	r3, r3, #1
 8010228:	2b00      	cmp	r3, #0
 801022a:	d00b      	beq.n	8010244 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	2204      	movs	r2, #4
 8010232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801023a:	f043 0202 	orr.w	r2, r3, #2
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	f003 0308 	and.w	r3, r3, #8
 801024a:	2b00      	cmp	r3, #0
 801024c:	d015      	beq.n	801027a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801024e:	69bb      	ldr	r3, [r7, #24]
 8010250:	f003 0320 	and.w	r3, r3, #32
 8010254:	2b00      	cmp	r3, #0
 8010256:	d104      	bne.n	8010262 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010258:	697a      	ldr	r2, [r7, #20]
 801025a:	4b48      	ldr	r3, [pc, #288]	; (801037c <HAL_UART_IRQHandler+0x23c>)
 801025c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801025e:	2b00      	cmp	r3, #0
 8010260:	d00b      	beq.n	801027a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	2208      	movs	r2, #8
 8010268:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010270:	f043 0208 	orr.w	r2, r3, #8
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010280:	2b00      	cmp	r3, #0
 8010282:	d011      	beq.n	80102a8 <HAL_UART_IRQHandler+0x168>
 8010284:	69bb      	ldr	r3, [r7, #24]
 8010286:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801028a:	2b00      	cmp	r3, #0
 801028c:	d00c      	beq.n	80102a8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801029e:	f043 0220 	orr.w	r2, r3, #32
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	f000 81f6 	beq.w	80106a0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	f003 0320 	and.w	r3, r3, #32
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d011      	beq.n	80102e2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	f003 0320 	and.w	r3, r3, #32
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d104      	bne.n	80102d2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d007      	beq.n	80102e2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d003      	beq.n	80102e2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80102e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	689b      	ldr	r3, [r3, #8]
 80102f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102f4:	2b40      	cmp	r3, #64	; 0x40
 80102f6:	d004      	beq.n	8010302 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d031      	beq.n	8010366 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f001 f964 	bl	80115d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	689b      	ldr	r3, [r3, #8]
 801030e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010312:	2b40      	cmp	r3, #64	; 0x40
 8010314:	d123      	bne.n	801035e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	689a      	ldr	r2, [r3, #8]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010324:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801032a:	2b00      	cmp	r3, #0
 801032c:	d013      	beq.n	8010356 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010332:	4a14      	ldr	r2, [pc, #80]	; (8010384 <HAL_UART_IRQHandler+0x244>)
 8010334:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801033a:	4618      	mov	r0, r3
 801033c:	f7f6 fdd4 	bl	8006ee8 <HAL_DMA_Abort_IT>
 8010340:	4603      	mov	r3, r0
 8010342:	2b00      	cmp	r3, #0
 8010344:	d017      	beq.n	8010376 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801034a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8010350:	4610      	mov	r0, r2
 8010352:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010354:	e00f      	b.n	8010376 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f000 f9ca 	bl	80106f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801035c:	e00b      	b.n	8010376 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f000 f9c6 	bl	80106f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010364:	e007      	b.n	8010376 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f000 f9c2 	bl	80106f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2200      	movs	r2, #0
 8010370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8010374:	e194      	b.n	80106a0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010376:	bf00      	nop
    return;
 8010378:	e192      	b.n	80106a0 <HAL_UART_IRQHandler+0x560>
 801037a:	bf00      	nop
 801037c:	10000001 	.word	0x10000001
 8010380:	04000120 	.word	0x04000120
 8010384:	080117ef 	.word	0x080117ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801038c:	2b01      	cmp	r3, #1
 801038e:	f040 810f 	bne.w	80105b0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010392:	69fb      	ldr	r3, [r7, #28]
 8010394:	f003 0310 	and.w	r3, r3, #16
 8010398:	2b00      	cmp	r3, #0
 801039a:	f000 8109 	beq.w	80105b0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801039e:	69bb      	ldr	r3, [r7, #24]
 80103a0:	f003 0310 	and.w	r3, r3, #16
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	f000 8103 	beq.w	80105b0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	2210      	movs	r2, #16
 80103b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	689b      	ldr	r3, [r3, #8]
 80103b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103bc:	2b40      	cmp	r3, #64	; 0x40
 80103be:	f040 80bb 	bne.w	8010538 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	4a96      	ldr	r2, [pc, #600]	; (8010624 <HAL_UART_IRQHandler+0x4e4>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d059      	beq.n	8010482 <HAL_UART_IRQHandler+0x342>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	4a94      	ldr	r2, [pc, #592]	; (8010628 <HAL_UART_IRQHandler+0x4e8>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d053      	beq.n	8010482 <HAL_UART_IRQHandler+0x342>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	4a92      	ldr	r2, [pc, #584]	; (801062c <HAL_UART_IRQHandler+0x4ec>)
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d04d      	beq.n	8010482 <HAL_UART_IRQHandler+0x342>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	4a90      	ldr	r2, [pc, #576]	; (8010630 <HAL_UART_IRQHandler+0x4f0>)
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d047      	beq.n	8010482 <HAL_UART_IRQHandler+0x342>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4a8e      	ldr	r2, [pc, #568]	; (8010634 <HAL_UART_IRQHandler+0x4f4>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d041      	beq.n	8010482 <HAL_UART_IRQHandler+0x342>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	4a8c      	ldr	r2, [pc, #560]	; (8010638 <HAL_UART_IRQHandler+0x4f8>)
 8010406:	4293      	cmp	r3, r2
 8010408:	d03b      	beq.n	8010482 <HAL_UART_IRQHandler+0x342>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4a8a      	ldr	r2, [pc, #552]	; (801063c <HAL_UART_IRQHandler+0x4fc>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d035      	beq.n	8010482 <HAL_UART_IRQHandler+0x342>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	4a88      	ldr	r2, [pc, #544]	; (8010640 <HAL_UART_IRQHandler+0x500>)
 801041e:	4293      	cmp	r3, r2
 8010420:	d02f      	beq.n	8010482 <HAL_UART_IRQHandler+0x342>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4a86      	ldr	r2, [pc, #536]	; (8010644 <HAL_UART_IRQHandler+0x504>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d029      	beq.n	8010482 <HAL_UART_IRQHandler+0x342>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4a84      	ldr	r2, [pc, #528]	; (8010648 <HAL_UART_IRQHandler+0x508>)
 8010436:	4293      	cmp	r3, r2
 8010438:	d023      	beq.n	8010482 <HAL_UART_IRQHandler+0x342>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	4a82      	ldr	r2, [pc, #520]	; (801064c <HAL_UART_IRQHandler+0x50c>)
 8010442:	4293      	cmp	r3, r2
 8010444:	d01d      	beq.n	8010482 <HAL_UART_IRQHandler+0x342>
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a80      	ldr	r2, [pc, #512]	; (8010650 <HAL_UART_IRQHandler+0x510>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d017      	beq.n	8010482 <HAL_UART_IRQHandler+0x342>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4a7e      	ldr	r2, [pc, #504]	; (8010654 <HAL_UART_IRQHandler+0x514>)
 801045a:	4293      	cmp	r3, r2
 801045c:	d011      	beq.n	8010482 <HAL_UART_IRQHandler+0x342>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	4a7c      	ldr	r2, [pc, #496]	; (8010658 <HAL_UART_IRQHandler+0x518>)
 8010466:	4293      	cmp	r3, r2
 8010468:	d00b      	beq.n	8010482 <HAL_UART_IRQHandler+0x342>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	4a7a      	ldr	r2, [pc, #488]	; (801065c <HAL_UART_IRQHandler+0x51c>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d005      	beq.n	8010482 <HAL_UART_IRQHandler+0x342>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	4a78      	ldr	r2, [pc, #480]	; (8010660 <HAL_UART_IRQHandler+0x520>)
 801047e:	4293      	cmp	r3, r2
 8010480:	d105      	bne.n	801048e <HAL_UART_IRQHandler+0x34e>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	b29b      	uxth	r3, r3
 801048c:	e004      	b.n	8010498 <HAL_UART_IRQHandler+0x358>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	b29b      	uxth	r3, r3
 8010498:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 801049a:	893b      	ldrh	r3, [r7, #8]
 801049c:	2b00      	cmp	r3, #0
 801049e:	f000 8101 	beq.w	80106a4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80104a8:	893a      	ldrh	r2, [r7, #8]
 80104aa:	429a      	cmp	r2, r3
 80104ac:	f080 80fa 	bcs.w	80106a4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	893a      	ldrh	r2, [r7, #8]
 80104b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104bc:	69db      	ldr	r3, [r3, #28]
 80104be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104c2:	d02b      	beq.n	801051c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	681a      	ldr	r2, [r3, #0]
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80104d2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	689a      	ldr	r2, [r3, #8]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	f022 0201 	bic.w	r2, r2, #1
 80104e2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	689a      	ldr	r2, [r3, #8]
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80104f2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2220      	movs	r2, #32
 80104f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2200      	movs	r2, #0
 8010500:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	681a      	ldr	r2, [r3, #0]
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	f022 0210 	bic.w	r2, r2, #16
 8010510:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010516:	4618      	mov	r0, r3
 8010518:	f7f6 f9c8 	bl	80068ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010528:	b29b      	uxth	r3, r3
 801052a:	1ad3      	subs	r3, r2, r3
 801052c:	b29b      	uxth	r3, r3
 801052e:	4619      	mov	r1, r3
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f000 f8e7 	bl	8010704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010536:	e0b5      	b.n	80106a4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010544:	b29b      	uxth	r3, r3
 8010546:	1ad3      	subs	r3, r2, r3
 8010548:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010550:	b29b      	uxth	r3, r3
 8010552:	2b00      	cmp	r3, #0
 8010554:	f000 80a8 	beq.w	80106a8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8010558:	897b      	ldrh	r3, [r7, #10]
 801055a:	2b00      	cmp	r3, #0
 801055c:	f000 80a4 	beq.w	80106a8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	681a      	ldr	r2, [r3, #0]
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801056e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	6899      	ldr	r1, [r3, #8]
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681a      	ldr	r2, [r3, #0]
 801057a:	4b3a      	ldr	r3, [pc, #232]	; (8010664 <HAL_UART_IRQHandler+0x524>)
 801057c:	400b      	ands	r3, r1
 801057e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2220      	movs	r2, #32
 8010584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2200      	movs	r2, #0
 801058c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2200      	movs	r2, #0
 8010592:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	681a      	ldr	r2, [r3, #0]
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	f022 0210 	bic.w	r2, r2, #16
 80105a2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80105a4:	897b      	ldrh	r3, [r7, #10]
 80105a6:	4619      	mov	r1, r3
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f000 f8ab 	bl	8010704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80105ae:	e07b      	b.n	80106a8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80105b0:	69fb      	ldr	r3, [r7, #28]
 80105b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d00d      	beq.n	80105d6 <HAL_UART_IRQHandler+0x496>
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d008      	beq.n	80105d6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80105cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f001 f93d 	bl	801184e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80105d4:	e06b      	b.n	80106ae <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80105d6:	69fb      	ldr	r3, [r7, #28]
 80105d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d012      	beq.n	8010606 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80105e0:	69bb      	ldr	r3, [r7, #24]
 80105e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d104      	bne.n	80105f4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d008      	beq.n	8010606 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d057      	beq.n	80106ac <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	4798      	blx	r3
    }
    return;
 8010604:	e052      	b.n	80106ac <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010606:	69fb      	ldr	r3, [r7, #28]
 8010608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801060c:	2b00      	cmp	r3, #0
 801060e:	d02b      	beq.n	8010668 <HAL_UART_IRQHandler+0x528>
 8010610:	69bb      	ldr	r3, [r7, #24]
 8010612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010616:	2b00      	cmp	r3, #0
 8010618:	d026      	beq.n	8010668 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f001 f8fd 	bl	801181a <UART_EndTransmit_IT>
    return;
 8010620:	e045      	b.n	80106ae <HAL_UART_IRQHandler+0x56e>
 8010622:	bf00      	nop
 8010624:	40020010 	.word	0x40020010
 8010628:	40020028 	.word	0x40020028
 801062c:	40020040 	.word	0x40020040
 8010630:	40020058 	.word	0x40020058
 8010634:	40020070 	.word	0x40020070
 8010638:	40020088 	.word	0x40020088
 801063c:	400200a0 	.word	0x400200a0
 8010640:	400200b8 	.word	0x400200b8
 8010644:	40020410 	.word	0x40020410
 8010648:	40020428 	.word	0x40020428
 801064c:	40020440 	.word	0x40020440
 8010650:	40020458 	.word	0x40020458
 8010654:	40020470 	.word	0x40020470
 8010658:	40020488 	.word	0x40020488
 801065c:	400204a0 	.word	0x400204a0
 8010660:	400204b8 	.word	0x400204b8
 8010664:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801066e:	2b00      	cmp	r3, #0
 8010670:	d008      	beq.n	8010684 <HAL_UART_IRQHandler+0x544>
 8010672:	69bb      	ldr	r3, [r7, #24]
 8010674:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010678:	2b00      	cmp	r3, #0
 801067a:	d003      	beq.n	8010684 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f001 f8fa 	bl	8011876 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010682:	e014      	b.n	80106ae <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010684:	69fb      	ldr	r3, [r7, #28]
 8010686:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801068a:	2b00      	cmp	r3, #0
 801068c:	d00f      	beq.n	80106ae <HAL_UART_IRQHandler+0x56e>
 801068e:	69bb      	ldr	r3, [r7, #24]
 8010690:	2b00      	cmp	r3, #0
 8010692:	da0c      	bge.n	80106ae <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f001 f8e4 	bl	8011862 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801069a:	e008      	b.n	80106ae <HAL_UART_IRQHandler+0x56e>
      return;
 801069c:	bf00      	nop
 801069e:	e006      	b.n	80106ae <HAL_UART_IRQHandler+0x56e>
    return;
 80106a0:	bf00      	nop
 80106a2:	e004      	b.n	80106ae <HAL_UART_IRQHandler+0x56e>
      return;
 80106a4:	bf00      	nop
 80106a6:	e002      	b.n	80106ae <HAL_UART_IRQHandler+0x56e>
      return;
 80106a8:	bf00      	nop
 80106aa:	e000      	b.n	80106ae <HAL_UART_IRQHandler+0x56e>
    return;
 80106ac:	bf00      	nop
  }
}
 80106ae:	3720      	adds	r7, #32
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}

080106b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b083      	sub	sp, #12
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80106bc:	bf00      	nop
 80106be:	370c      	adds	r7, #12
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr

080106c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80106c8:	b480      	push	{r7}
 80106ca:	b083      	sub	sp, #12
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80106d0:	bf00      	nop
 80106d2:	370c      	adds	r7, #12
 80106d4:	46bd      	mov	sp, r7
 80106d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106da:	4770      	bx	lr

080106dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80106dc:	b480      	push	{r7}
 80106de:	b083      	sub	sp, #12
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80106e4:	bf00      	nop
 80106e6:	370c      	adds	r7, #12
 80106e8:	46bd      	mov	sp, r7
 80106ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ee:	4770      	bx	lr

080106f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80106f0:	b480      	push	{r7}
 80106f2:	b083      	sub	sp, #12
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80106f8:	bf00      	nop
 80106fa:	370c      	adds	r7, #12
 80106fc:	46bd      	mov	sp, r7
 80106fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010702:	4770      	bx	lr

08010704 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010704:	b480      	push	{r7}
 8010706:	b083      	sub	sp, #12
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	460b      	mov	r3, r1
 801070e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010710:	bf00      	nop
 8010712:	370c      	adds	r7, #12
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr

0801071c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801071c:	b5b0      	push	{r4, r5, r7, lr}
 801071e:	b08e      	sub	sp, #56	; 0x38
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010724:	2300      	movs	r3, #0
 8010726:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	689a      	ldr	r2, [r3, #8]
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	691b      	ldr	r3, [r3, #16]
 8010732:	431a      	orrs	r2, r3
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	695b      	ldr	r3, [r3, #20]
 8010738:	431a      	orrs	r2, r3
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	69db      	ldr	r3, [r3, #28]
 801073e:	4313      	orrs	r3, r2
 8010740:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	681a      	ldr	r2, [r3, #0]
 8010748:	4bbf      	ldr	r3, [pc, #764]	; (8010a48 <UART_SetConfig+0x32c>)
 801074a:	4013      	ands	r3, r2
 801074c:	687a      	ldr	r2, [r7, #4]
 801074e:	6812      	ldr	r2, [r2, #0]
 8010750:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010752:	430b      	orrs	r3, r1
 8010754:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	68da      	ldr	r2, [r3, #12]
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	430a      	orrs	r2, r1
 801076a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	699b      	ldr	r3, [r3, #24]
 8010770:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4ab5      	ldr	r2, [pc, #724]	; (8010a4c <UART_SetConfig+0x330>)
 8010778:	4293      	cmp	r3, r2
 801077a:	d004      	beq.n	8010786 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6a1b      	ldr	r3, [r3, #32]
 8010780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010782:	4313      	orrs	r3, r2
 8010784:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	689a      	ldr	r2, [r3, #8]
 801078c:	4bb0      	ldr	r3, [pc, #704]	; (8010a50 <UART_SetConfig+0x334>)
 801078e:	4013      	ands	r3, r2
 8010790:	687a      	ldr	r2, [r7, #4]
 8010792:	6812      	ldr	r2, [r2, #0]
 8010794:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010796:	430b      	orrs	r3, r1
 8010798:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107a0:	f023 010f 	bic.w	r1, r3, #15
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	430a      	orrs	r2, r1
 80107ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	4aa7      	ldr	r2, [pc, #668]	; (8010a54 <UART_SetConfig+0x338>)
 80107b6:	4293      	cmp	r3, r2
 80107b8:	d176      	bne.n	80108a8 <UART_SetConfig+0x18c>
 80107ba:	4ba7      	ldr	r3, [pc, #668]	; (8010a58 <UART_SetConfig+0x33c>)
 80107bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80107c2:	2b28      	cmp	r3, #40	; 0x28
 80107c4:	d86c      	bhi.n	80108a0 <UART_SetConfig+0x184>
 80107c6:	a201      	add	r2, pc, #4	; (adr r2, 80107cc <UART_SetConfig+0xb0>)
 80107c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107cc:	08010871 	.word	0x08010871
 80107d0:	080108a1 	.word	0x080108a1
 80107d4:	080108a1 	.word	0x080108a1
 80107d8:	080108a1 	.word	0x080108a1
 80107dc:	080108a1 	.word	0x080108a1
 80107e0:	080108a1 	.word	0x080108a1
 80107e4:	080108a1 	.word	0x080108a1
 80107e8:	080108a1 	.word	0x080108a1
 80107ec:	08010879 	.word	0x08010879
 80107f0:	080108a1 	.word	0x080108a1
 80107f4:	080108a1 	.word	0x080108a1
 80107f8:	080108a1 	.word	0x080108a1
 80107fc:	080108a1 	.word	0x080108a1
 8010800:	080108a1 	.word	0x080108a1
 8010804:	080108a1 	.word	0x080108a1
 8010808:	080108a1 	.word	0x080108a1
 801080c:	08010881 	.word	0x08010881
 8010810:	080108a1 	.word	0x080108a1
 8010814:	080108a1 	.word	0x080108a1
 8010818:	080108a1 	.word	0x080108a1
 801081c:	080108a1 	.word	0x080108a1
 8010820:	080108a1 	.word	0x080108a1
 8010824:	080108a1 	.word	0x080108a1
 8010828:	080108a1 	.word	0x080108a1
 801082c:	08010889 	.word	0x08010889
 8010830:	080108a1 	.word	0x080108a1
 8010834:	080108a1 	.word	0x080108a1
 8010838:	080108a1 	.word	0x080108a1
 801083c:	080108a1 	.word	0x080108a1
 8010840:	080108a1 	.word	0x080108a1
 8010844:	080108a1 	.word	0x080108a1
 8010848:	080108a1 	.word	0x080108a1
 801084c:	08010891 	.word	0x08010891
 8010850:	080108a1 	.word	0x080108a1
 8010854:	080108a1 	.word	0x080108a1
 8010858:	080108a1 	.word	0x080108a1
 801085c:	080108a1 	.word	0x080108a1
 8010860:	080108a1 	.word	0x080108a1
 8010864:	080108a1 	.word	0x080108a1
 8010868:	080108a1 	.word	0x080108a1
 801086c:	08010899 	.word	0x08010899
 8010870:	2301      	movs	r3, #1
 8010872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010876:	e222      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010878:	2304      	movs	r3, #4
 801087a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801087e:	e21e      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010880:	2308      	movs	r3, #8
 8010882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010886:	e21a      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010888:	2310      	movs	r3, #16
 801088a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801088e:	e216      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010890:	2320      	movs	r3, #32
 8010892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010896:	e212      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010898:	2340      	movs	r3, #64	; 0x40
 801089a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801089e:	e20e      	b.n	8010cbe <UART_SetConfig+0x5a2>
 80108a0:	2380      	movs	r3, #128	; 0x80
 80108a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108a6:	e20a      	b.n	8010cbe <UART_SetConfig+0x5a2>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	4a6b      	ldr	r2, [pc, #428]	; (8010a5c <UART_SetConfig+0x340>)
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d130      	bne.n	8010914 <UART_SetConfig+0x1f8>
 80108b2:	4b69      	ldr	r3, [pc, #420]	; (8010a58 <UART_SetConfig+0x33c>)
 80108b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108b6:	f003 0307 	and.w	r3, r3, #7
 80108ba:	2b05      	cmp	r3, #5
 80108bc:	d826      	bhi.n	801090c <UART_SetConfig+0x1f0>
 80108be:	a201      	add	r2, pc, #4	; (adr r2, 80108c4 <UART_SetConfig+0x1a8>)
 80108c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108c4:	080108dd 	.word	0x080108dd
 80108c8:	080108e5 	.word	0x080108e5
 80108cc:	080108ed 	.word	0x080108ed
 80108d0:	080108f5 	.word	0x080108f5
 80108d4:	080108fd 	.word	0x080108fd
 80108d8:	08010905 	.word	0x08010905
 80108dc:	2300      	movs	r3, #0
 80108de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108e2:	e1ec      	b.n	8010cbe <UART_SetConfig+0x5a2>
 80108e4:	2304      	movs	r3, #4
 80108e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108ea:	e1e8      	b.n	8010cbe <UART_SetConfig+0x5a2>
 80108ec:	2308      	movs	r3, #8
 80108ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108f2:	e1e4      	b.n	8010cbe <UART_SetConfig+0x5a2>
 80108f4:	2310      	movs	r3, #16
 80108f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108fa:	e1e0      	b.n	8010cbe <UART_SetConfig+0x5a2>
 80108fc:	2320      	movs	r3, #32
 80108fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010902:	e1dc      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010904:	2340      	movs	r3, #64	; 0x40
 8010906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801090a:	e1d8      	b.n	8010cbe <UART_SetConfig+0x5a2>
 801090c:	2380      	movs	r3, #128	; 0x80
 801090e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010912:	e1d4      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	4a51      	ldr	r2, [pc, #324]	; (8010a60 <UART_SetConfig+0x344>)
 801091a:	4293      	cmp	r3, r2
 801091c:	d130      	bne.n	8010980 <UART_SetConfig+0x264>
 801091e:	4b4e      	ldr	r3, [pc, #312]	; (8010a58 <UART_SetConfig+0x33c>)
 8010920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010922:	f003 0307 	and.w	r3, r3, #7
 8010926:	2b05      	cmp	r3, #5
 8010928:	d826      	bhi.n	8010978 <UART_SetConfig+0x25c>
 801092a:	a201      	add	r2, pc, #4	; (adr r2, 8010930 <UART_SetConfig+0x214>)
 801092c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010930:	08010949 	.word	0x08010949
 8010934:	08010951 	.word	0x08010951
 8010938:	08010959 	.word	0x08010959
 801093c:	08010961 	.word	0x08010961
 8010940:	08010969 	.word	0x08010969
 8010944:	08010971 	.word	0x08010971
 8010948:	2300      	movs	r3, #0
 801094a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801094e:	e1b6      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010950:	2304      	movs	r3, #4
 8010952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010956:	e1b2      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010958:	2308      	movs	r3, #8
 801095a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801095e:	e1ae      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010960:	2310      	movs	r3, #16
 8010962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010966:	e1aa      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010968:	2320      	movs	r3, #32
 801096a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801096e:	e1a6      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010970:	2340      	movs	r3, #64	; 0x40
 8010972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010976:	e1a2      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010978:	2380      	movs	r3, #128	; 0x80
 801097a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801097e:	e19e      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	4a37      	ldr	r2, [pc, #220]	; (8010a64 <UART_SetConfig+0x348>)
 8010986:	4293      	cmp	r3, r2
 8010988:	d130      	bne.n	80109ec <UART_SetConfig+0x2d0>
 801098a:	4b33      	ldr	r3, [pc, #204]	; (8010a58 <UART_SetConfig+0x33c>)
 801098c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801098e:	f003 0307 	and.w	r3, r3, #7
 8010992:	2b05      	cmp	r3, #5
 8010994:	d826      	bhi.n	80109e4 <UART_SetConfig+0x2c8>
 8010996:	a201      	add	r2, pc, #4	; (adr r2, 801099c <UART_SetConfig+0x280>)
 8010998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801099c:	080109b5 	.word	0x080109b5
 80109a0:	080109bd 	.word	0x080109bd
 80109a4:	080109c5 	.word	0x080109c5
 80109a8:	080109cd 	.word	0x080109cd
 80109ac:	080109d5 	.word	0x080109d5
 80109b0:	080109dd 	.word	0x080109dd
 80109b4:	2300      	movs	r3, #0
 80109b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109ba:	e180      	b.n	8010cbe <UART_SetConfig+0x5a2>
 80109bc:	2304      	movs	r3, #4
 80109be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109c2:	e17c      	b.n	8010cbe <UART_SetConfig+0x5a2>
 80109c4:	2308      	movs	r3, #8
 80109c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109ca:	e178      	b.n	8010cbe <UART_SetConfig+0x5a2>
 80109cc:	2310      	movs	r3, #16
 80109ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109d2:	e174      	b.n	8010cbe <UART_SetConfig+0x5a2>
 80109d4:	2320      	movs	r3, #32
 80109d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109da:	e170      	b.n	8010cbe <UART_SetConfig+0x5a2>
 80109dc:	2340      	movs	r3, #64	; 0x40
 80109de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109e2:	e16c      	b.n	8010cbe <UART_SetConfig+0x5a2>
 80109e4:	2380      	movs	r3, #128	; 0x80
 80109e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109ea:	e168      	b.n	8010cbe <UART_SetConfig+0x5a2>
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	4a1d      	ldr	r2, [pc, #116]	; (8010a68 <UART_SetConfig+0x34c>)
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d142      	bne.n	8010a7c <UART_SetConfig+0x360>
 80109f6:	4b18      	ldr	r3, [pc, #96]	; (8010a58 <UART_SetConfig+0x33c>)
 80109f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109fa:	f003 0307 	and.w	r3, r3, #7
 80109fe:	2b05      	cmp	r3, #5
 8010a00:	d838      	bhi.n	8010a74 <UART_SetConfig+0x358>
 8010a02:	a201      	add	r2, pc, #4	; (adr r2, 8010a08 <UART_SetConfig+0x2ec>)
 8010a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a08:	08010a21 	.word	0x08010a21
 8010a0c:	08010a29 	.word	0x08010a29
 8010a10:	08010a31 	.word	0x08010a31
 8010a14:	08010a39 	.word	0x08010a39
 8010a18:	08010a41 	.word	0x08010a41
 8010a1c:	08010a6d 	.word	0x08010a6d
 8010a20:	2300      	movs	r3, #0
 8010a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a26:	e14a      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010a28:	2304      	movs	r3, #4
 8010a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a2e:	e146      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010a30:	2308      	movs	r3, #8
 8010a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a36:	e142      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010a38:	2310      	movs	r3, #16
 8010a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a3e:	e13e      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010a40:	2320      	movs	r3, #32
 8010a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a46:	e13a      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010a48:	cfff69f3 	.word	0xcfff69f3
 8010a4c:	58000c00 	.word	0x58000c00
 8010a50:	11fff4ff 	.word	0x11fff4ff
 8010a54:	40011000 	.word	0x40011000
 8010a58:	58024400 	.word	0x58024400
 8010a5c:	40004400 	.word	0x40004400
 8010a60:	40004800 	.word	0x40004800
 8010a64:	40004c00 	.word	0x40004c00
 8010a68:	40005000 	.word	0x40005000
 8010a6c:	2340      	movs	r3, #64	; 0x40
 8010a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a72:	e124      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010a74:	2380      	movs	r3, #128	; 0x80
 8010a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a7a:	e120      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	4acc      	ldr	r2, [pc, #816]	; (8010db4 <UART_SetConfig+0x698>)
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d176      	bne.n	8010b74 <UART_SetConfig+0x458>
 8010a86:	4bcc      	ldr	r3, [pc, #816]	; (8010db8 <UART_SetConfig+0x69c>)
 8010a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010a8e:	2b28      	cmp	r3, #40	; 0x28
 8010a90:	d86c      	bhi.n	8010b6c <UART_SetConfig+0x450>
 8010a92:	a201      	add	r2, pc, #4	; (adr r2, 8010a98 <UART_SetConfig+0x37c>)
 8010a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a98:	08010b3d 	.word	0x08010b3d
 8010a9c:	08010b6d 	.word	0x08010b6d
 8010aa0:	08010b6d 	.word	0x08010b6d
 8010aa4:	08010b6d 	.word	0x08010b6d
 8010aa8:	08010b6d 	.word	0x08010b6d
 8010aac:	08010b6d 	.word	0x08010b6d
 8010ab0:	08010b6d 	.word	0x08010b6d
 8010ab4:	08010b6d 	.word	0x08010b6d
 8010ab8:	08010b45 	.word	0x08010b45
 8010abc:	08010b6d 	.word	0x08010b6d
 8010ac0:	08010b6d 	.word	0x08010b6d
 8010ac4:	08010b6d 	.word	0x08010b6d
 8010ac8:	08010b6d 	.word	0x08010b6d
 8010acc:	08010b6d 	.word	0x08010b6d
 8010ad0:	08010b6d 	.word	0x08010b6d
 8010ad4:	08010b6d 	.word	0x08010b6d
 8010ad8:	08010b4d 	.word	0x08010b4d
 8010adc:	08010b6d 	.word	0x08010b6d
 8010ae0:	08010b6d 	.word	0x08010b6d
 8010ae4:	08010b6d 	.word	0x08010b6d
 8010ae8:	08010b6d 	.word	0x08010b6d
 8010aec:	08010b6d 	.word	0x08010b6d
 8010af0:	08010b6d 	.word	0x08010b6d
 8010af4:	08010b6d 	.word	0x08010b6d
 8010af8:	08010b55 	.word	0x08010b55
 8010afc:	08010b6d 	.word	0x08010b6d
 8010b00:	08010b6d 	.word	0x08010b6d
 8010b04:	08010b6d 	.word	0x08010b6d
 8010b08:	08010b6d 	.word	0x08010b6d
 8010b0c:	08010b6d 	.word	0x08010b6d
 8010b10:	08010b6d 	.word	0x08010b6d
 8010b14:	08010b6d 	.word	0x08010b6d
 8010b18:	08010b5d 	.word	0x08010b5d
 8010b1c:	08010b6d 	.word	0x08010b6d
 8010b20:	08010b6d 	.word	0x08010b6d
 8010b24:	08010b6d 	.word	0x08010b6d
 8010b28:	08010b6d 	.word	0x08010b6d
 8010b2c:	08010b6d 	.word	0x08010b6d
 8010b30:	08010b6d 	.word	0x08010b6d
 8010b34:	08010b6d 	.word	0x08010b6d
 8010b38:	08010b65 	.word	0x08010b65
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b42:	e0bc      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010b44:	2304      	movs	r3, #4
 8010b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b4a:	e0b8      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010b4c:	2308      	movs	r3, #8
 8010b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b52:	e0b4      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010b54:	2310      	movs	r3, #16
 8010b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b5a:	e0b0      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010b5c:	2320      	movs	r3, #32
 8010b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b62:	e0ac      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010b64:	2340      	movs	r3, #64	; 0x40
 8010b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b6a:	e0a8      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010b6c:	2380      	movs	r3, #128	; 0x80
 8010b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b72:	e0a4      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	4a90      	ldr	r2, [pc, #576]	; (8010dbc <UART_SetConfig+0x6a0>)
 8010b7a:	4293      	cmp	r3, r2
 8010b7c:	d130      	bne.n	8010be0 <UART_SetConfig+0x4c4>
 8010b7e:	4b8e      	ldr	r3, [pc, #568]	; (8010db8 <UART_SetConfig+0x69c>)
 8010b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b82:	f003 0307 	and.w	r3, r3, #7
 8010b86:	2b05      	cmp	r3, #5
 8010b88:	d826      	bhi.n	8010bd8 <UART_SetConfig+0x4bc>
 8010b8a:	a201      	add	r2, pc, #4	; (adr r2, 8010b90 <UART_SetConfig+0x474>)
 8010b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b90:	08010ba9 	.word	0x08010ba9
 8010b94:	08010bb1 	.word	0x08010bb1
 8010b98:	08010bb9 	.word	0x08010bb9
 8010b9c:	08010bc1 	.word	0x08010bc1
 8010ba0:	08010bc9 	.word	0x08010bc9
 8010ba4:	08010bd1 	.word	0x08010bd1
 8010ba8:	2300      	movs	r3, #0
 8010baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bae:	e086      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010bb0:	2304      	movs	r3, #4
 8010bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bb6:	e082      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010bb8:	2308      	movs	r3, #8
 8010bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bbe:	e07e      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010bc0:	2310      	movs	r3, #16
 8010bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bc6:	e07a      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010bc8:	2320      	movs	r3, #32
 8010bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bce:	e076      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010bd0:	2340      	movs	r3, #64	; 0x40
 8010bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bd6:	e072      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010bd8:	2380      	movs	r3, #128	; 0x80
 8010bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bde:	e06e      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	4a76      	ldr	r2, [pc, #472]	; (8010dc0 <UART_SetConfig+0x6a4>)
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d130      	bne.n	8010c4c <UART_SetConfig+0x530>
 8010bea:	4b73      	ldr	r3, [pc, #460]	; (8010db8 <UART_SetConfig+0x69c>)
 8010bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bee:	f003 0307 	and.w	r3, r3, #7
 8010bf2:	2b05      	cmp	r3, #5
 8010bf4:	d826      	bhi.n	8010c44 <UART_SetConfig+0x528>
 8010bf6:	a201      	add	r2, pc, #4	; (adr r2, 8010bfc <UART_SetConfig+0x4e0>)
 8010bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bfc:	08010c15 	.word	0x08010c15
 8010c00:	08010c1d 	.word	0x08010c1d
 8010c04:	08010c25 	.word	0x08010c25
 8010c08:	08010c2d 	.word	0x08010c2d
 8010c0c:	08010c35 	.word	0x08010c35
 8010c10:	08010c3d 	.word	0x08010c3d
 8010c14:	2300      	movs	r3, #0
 8010c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c1a:	e050      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010c1c:	2304      	movs	r3, #4
 8010c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c22:	e04c      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010c24:	2308      	movs	r3, #8
 8010c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c2a:	e048      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010c2c:	2310      	movs	r3, #16
 8010c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c32:	e044      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010c34:	2320      	movs	r3, #32
 8010c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c3a:	e040      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010c3c:	2340      	movs	r3, #64	; 0x40
 8010c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c42:	e03c      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010c44:	2380      	movs	r3, #128	; 0x80
 8010c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c4a:	e038      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	4a5c      	ldr	r2, [pc, #368]	; (8010dc4 <UART_SetConfig+0x6a8>)
 8010c52:	4293      	cmp	r3, r2
 8010c54:	d130      	bne.n	8010cb8 <UART_SetConfig+0x59c>
 8010c56:	4b58      	ldr	r3, [pc, #352]	; (8010db8 <UART_SetConfig+0x69c>)
 8010c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c5a:	f003 0307 	and.w	r3, r3, #7
 8010c5e:	2b05      	cmp	r3, #5
 8010c60:	d826      	bhi.n	8010cb0 <UART_SetConfig+0x594>
 8010c62:	a201      	add	r2, pc, #4	; (adr r2, 8010c68 <UART_SetConfig+0x54c>)
 8010c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c68:	08010c81 	.word	0x08010c81
 8010c6c:	08010c89 	.word	0x08010c89
 8010c70:	08010c91 	.word	0x08010c91
 8010c74:	08010c99 	.word	0x08010c99
 8010c78:	08010ca1 	.word	0x08010ca1
 8010c7c:	08010ca9 	.word	0x08010ca9
 8010c80:	2302      	movs	r3, #2
 8010c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c86:	e01a      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010c88:	2304      	movs	r3, #4
 8010c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c8e:	e016      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010c90:	2308      	movs	r3, #8
 8010c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c96:	e012      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010c98:	2310      	movs	r3, #16
 8010c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c9e:	e00e      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010ca0:	2320      	movs	r3, #32
 8010ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ca6:	e00a      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010ca8:	2340      	movs	r3, #64	; 0x40
 8010caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010cae:	e006      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010cb0:	2380      	movs	r3, #128	; 0x80
 8010cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010cb6:	e002      	b.n	8010cbe <UART_SetConfig+0x5a2>
 8010cb8:	2380      	movs	r3, #128	; 0x80
 8010cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	4a40      	ldr	r2, [pc, #256]	; (8010dc4 <UART_SetConfig+0x6a8>)
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	f040 80ef 	bne.w	8010ea8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010cca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010cce:	2b20      	cmp	r3, #32
 8010cd0:	dc46      	bgt.n	8010d60 <UART_SetConfig+0x644>
 8010cd2:	2b02      	cmp	r3, #2
 8010cd4:	f2c0 8081 	blt.w	8010dda <UART_SetConfig+0x6be>
 8010cd8:	3b02      	subs	r3, #2
 8010cda:	2b1e      	cmp	r3, #30
 8010cdc:	d87d      	bhi.n	8010dda <UART_SetConfig+0x6be>
 8010cde:	a201      	add	r2, pc, #4	; (adr r2, 8010ce4 <UART_SetConfig+0x5c8>)
 8010ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce4:	08010d67 	.word	0x08010d67
 8010ce8:	08010ddb 	.word	0x08010ddb
 8010cec:	08010d6f 	.word	0x08010d6f
 8010cf0:	08010ddb 	.word	0x08010ddb
 8010cf4:	08010ddb 	.word	0x08010ddb
 8010cf8:	08010ddb 	.word	0x08010ddb
 8010cfc:	08010d7f 	.word	0x08010d7f
 8010d00:	08010ddb 	.word	0x08010ddb
 8010d04:	08010ddb 	.word	0x08010ddb
 8010d08:	08010ddb 	.word	0x08010ddb
 8010d0c:	08010ddb 	.word	0x08010ddb
 8010d10:	08010ddb 	.word	0x08010ddb
 8010d14:	08010ddb 	.word	0x08010ddb
 8010d18:	08010ddb 	.word	0x08010ddb
 8010d1c:	08010d8f 	.word	0x08010d8f
 8010d20:	08010ddb 	.word	0x08010ddb
 8010d24:	08010ddb 	.word	0x08010ddb
 8010d28:	08010ddb 	.word	0x08010ddb
 8010d2c:	08010ddb 	.word	0x08010ddb
 8010d30:	08010ddb 	.word	0x08010ddb
 8010d34:	08010ddb 	.word	0x08010ddb
 8010d38:	08010ddb 	.word	0x08010ddb
 8010d3c:	08010ddb 	.word	0x08010ddb
 8010d40:	08010ddb 	.word	0x08010ddb
 8010d44:	08010ddb 	.word	0x08010ddb
 8010d48:	08010ddb 	.word	0x08010ddb
 8010d4c:	08010ddb 	.word	0x08010ddb
 8010d50:	08010ddb 	.word	0x08010ddb
 8010d54:	08010ddb 	.word	0x08010ddb
 8010d58:	08010ddb 	.word	0x08010ddb
 8010d5c:	08010dcd 	.word	0x08010dcd
 8010d60:	2b40      	cmp	r3, #64	; 0x40
 8010d62:	d036      	beq.n	8010dd2 <UART_SetConfig+0x6b6>
 8010d64:	e039      	b.n	8010dda <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010d66:	f7fc f963 	bl	800d030 <HAL_RCCEx_GetD3PCLK1Freq>
 8010d6a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010d6c:	e03b      	b.n	8010de6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d6e:	f107 0314 	add.w	r3, r7, #20
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7fc f972 	bl	800d05c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d78:	69bb      	ldr	r3, [r7, #24]
 8010d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010d7c:	e033      	b.n	8010de6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d7e:	f107 0308 	add.w	r3, r7, #8
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7fc fabe 	bl	800d304 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010d8c:	e02b      	b.n	8010de6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d8e:	4b0a      	ldr	r3, [pc, #40]	; (8010db8 <UART_SetConfig+0x69c>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	f003 0320 	and.w	r3, r3, #32
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d009      	beq.n	8010dae <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010d9a:	4b07      	ldr	r3, [pc, #28]	; (8010db8 <UART_SetConfig+0x69c>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	08db      	lsrs	r3, r3, #3
 8010da0:	f003 0303 	and.w	r3, r3, #3
 8010da4:	4a08      	ldr	r2, [pc, #32]	; (8010dc8 <UART_SetConfig+0x6ac>)
 8010da6:	fa22 f303 	lsr.w	r3, r2, r3
 8010daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010dac:	e01b      	b.n	8010de6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8010dae:	4b06      	ldr	r3, [pc, #24]	; (8010dc8 <UART_SetConfig+0x6ac>)
 8010db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010db2:	e018      	b.n	8010de6 <UART_SetConfig+0x6ca>
 8010db4:	40011400 	.word	0x40011400
 8010db8:	58024400 	.word	0x58024400
 8010dbc:	40007800 	.word	0x40007800
 8010dc0:	40007c00 	.word	0x40007c00
 8010dc4:	58000c00 	.word	0x58000c00
 8010dc8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010dcc:	4bc4      	ldr	r3, [pc, #784]	; (80110e0 <UART_SetConfig+0x9c4>)
 8010dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010dd0:	e009      	b.n	8010de6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010dd8:	e005      	b.n	8010de6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010dde:	2301      	movs	r3, #1
 8010de0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010de4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	f000 81da 	beq.w	80111a2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010df2:	4abc      	ldr	r2, [pc, #752]	; (80110e4 <UART_SetConfig+0x9c8>)
 8010df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010df8:	461a      	mov	r2, r3
 8010dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e00:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	685a      	ldr	r2, [r3, #4]
 8010e06:	4613      	mov	r3, r2
 8010e08:	005b      	lsls	r3, r3, #1
 8010e0a:	4413      	add	r3, r2
 8010e0c:	6a3a      	ldr	r2, [r7, #32]
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	d305      	bcc.n	8010e1e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010e18:	6a3a      	ldr	r2, [r7, #32]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d903      	bls.n	8010e26 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8010e1e:	2301      	movs	r3, #1
 8010e20:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010e24:	e1bd      	b.n	80111a2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f04f 0100 	mov.w	r1, #0
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e32:	4aac      	ldr	r2, [pc, #688]	; (80110e4 <UART_SetConfig+0x9c8>)
 8010e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e38:	b29a      	uxth	r2, r3
 8010e3a:	f04f 0300 	mov.w	r3, #0
 8010e3e:	f7ef faa7 	bl	8000390 <__aeabi_uldivmod>
 8010e42:	4602      	mov	r2, r0
 8010e44:	460b      	mov	r3, r1
 8010e46:	4610      	mov	r0, r2
 8010e48:	4619      	mov	r1, r3
 8010e4a:	f04f 0200 	mov.w	r2, #0
 8010e4e:	f04f 0300 	mov.w	r3, #0
 8010e52:	020b      	lsls	r3, r1, #8
 8010e54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010e58:	0202      	lsls	r2, r0, #8
 8010e5a:	6879      	ldr	r1, [r7, #4]
 8010e5c:	6849      	ldr	r1, [r1, #4]
 8010e5e:	0849      	lsrs	r1, r1, #1
 8010e60:	4608      	mov	r0, r1
 8010e62:	f04f 0100 	mov.w	r1, #0
 8010e66:	1814      	adds	r4, r2, r0
 8010e68:	eb43 0501 	adc.w	r5, r3, r1
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	685b      	ldr	r3, [r3, #4]
 8010e70:	461a      	mov	r2, r3
 8010e72:	f04f 0300 	mov.w	r3, #0
 8010e76:	4620      	mov	r0, r4
 8010e78:	4629      	mov	r1, r5
 8010e7a:	f7ef fa89 	bl	8000390 <__aeabi_uldivmod>
 8010e7e:	4602      	mov	r2, r0
 8010e80:	460b      	mov	r3, r1
 8010e82:	4613      	mov	r3, r2
 8010e84:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010e8c:	d308      	bcc.n	8010ea0 <UART_SetConfig+0x784>
 8010e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e94:	d204      	bcs.n	8010ea0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e9c:	60da      	str	r2, [r3, #12]
 8010e9e:	e180      	b.n	80111a2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010ea6:	e17c      	b.n	80111a2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	69db      	ldr	r3, [r3, #28]
 8010eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010eb0:	f040 80bf 	bne.w	8011032 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8010eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010eb8:	2b20      	cmp	r3, #32
 8010eba:	dc49      	bgt.n	8010f50 <UART_SetConfig+0x834>
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	db7c      	blt.n	8010fba <UART_SetConfig+0x89e>
 8010ec0:	2b20      	cmp	r3, #32
 8010ec2:	d87a      	bhi.n	8010fba <UART_SetConfig+0x89e>
 8010ec4:	a201      	add	r2, pc, #4	; (adr r2, 8010ecc <UART_SetConfig+0x7b0>)
 8010ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eca:	bf00      	nop
 8010ecc:	08010f57 	.word	0x08010f57
 8010ed0:	08010f5f 	.word	0x08010f5f
 8010ed4:	08010fbb 	.word	0x08010fbb
 8010ed8:	08010fbb 	.word	0x08010fbb
 8010edc:	08010f67 	.word	0x08010f67
 8010ee0:	08010fbb 	.word	0x08010fbb
 8010ee4:	08010fbb 	.word	0x08010fbb
 8010ee8:	08010fbb 	.word	0x08010fbb
 8010eec:	08010f77 	.word	0x08010f77
 8010ef0:	08010fbb 	.word	0x08010fbb
 8010ef4:	08010fbb 	.word	0x08010fbb
 8010ef8:	08010fbb 	.word	0x08010fbb
 8010efc:	08010fbb 	.word	0x08010fbb
 8010f00:	08010fbb 	.word	0x08010fbb
 8010f04:	08010fbb 	.word	0x08010fbb
 8010f08:	08010fbb 	.word	0x08010fbb
 8010f0c:	08010f87 	.word	0x08010f87
 8010f10:	08010fbb 	.word	0x08010fbb
 8010f14:	08010fbb 	.word	0x08010fbb
 8010f18:	08010fbb 	.word	0x08010fbb
 8010f1c:	08010fbb 	.word	0x08010fbb
 8010f20:	08010fbb 	.word	0x08010fbb
 8010f24:	08010fbb 	.word	0x08010fbb
 8010f28:	08010fbb 	.word	0x08010fbb
 8010f2c:	08010fbb 	.word	0x08010fbb
 8010f30:	08010fbb 	.word	0x08010fbb
 8010f34:	08010fbb 	.word	0x08010fbb
 8010f38:	08010fbb 	.word	0x08010fbb
 8010f3c:	08010fbb 	.word	0x08010fbb
 8010f40:	08010fbb 	.word	0x08010fbb
 8010f44:	08010fbb 	.word	0x08010fbb
 8010f48:	08010fbb 	.word	0x08010fbb
 8010f4c:	08010fad 	.word	0x08010fad
 8010f50:	2b40      	cmp	r3, #64	; 0x40
 8010f52:	d02e      	beq.n	8010fb2 <UART_SetConfig+0x896>
 8010f54:	e031      	b.n	8010fba <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010f56:	f7fb f8ff 	bl	800c158 <HAL_RCC_GetPCLK1Freq>
 8010f5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010f5c:	e033      	b.n	8010fc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010f5e:	f7fb f911 	bl	800c184 <HAL_RCC_GetPCLK2Freq>
 8010f62:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010f64:	e02f      	b.n	8010fc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f66:	f107 0314 	add.w	r3, r7, #20
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7fc f876 	bl	800d05c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010f70:	69bb      	ldr	r3, [r7, #24]
 8010f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010f74:	e027      	b.n	8010fc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010f76:	f107 0308 	add.w	r3, r7, #8
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7fc f9c2 	bl	800d304 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010f84:	e01f      	b.n	8010fc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f86:	4b58      	ldr	r3, [pc, #352]	; (80110e8 <UART_SetConfig+0x9cc>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f003 0320 	and.w	r3, r3, #32
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d009      	beq.n	8010fa6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010f92:	4b55      	ldr	r3, [pc, #340]	; (80110e8 <UART_SetConfig+0x9cc>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	08db      	lsrs	r3, r3, #3
 8010f98:	f003 0303 	and.w	r3, r3, #3
 8010f9c:	4a53      	ldr	r2, [pc, #332]	; (80110ec <UART_SetConfig+0x9d0>)
 8010f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8010fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010fa4:	e00f      	b.n	8010fc6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8010fa6:	4b51      	ldr	r3, [pc, #324]	; (80110ec <UART_SetConfig+0x9d0>)
 8010fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010faa:	e00c      	b.n	8010fc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010fac:	4b4c      	ldr	r3, [pc, #304]	; (80110e0 <UART_SetConfig+0x9c4>)
 8010fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010fb0:	e009      	b.n	8010fc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010fb8:	e005      	b.n	8010fc6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010fc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	f000 80ea 	beq.w	80111a2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fd2:	4a44      	ldr	r2, [pc, #272]	; (80110e4 <UART_SetConfig+0x9c8>)
 8010fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fd8:	461a      	mov	r2, r3
 8010fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8010fe0:	005a      	lsls	r2, r3, #1
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	085b      	lsrs	r3, r3, #1
 8010fe8:	441a      	add	r2, r3
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	685b      	ldr	r3, [r3, #4]
 8010fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ff2:	b29b      	uxth	r3, r3
 8010ff4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff8:	2b0f      	cmp	r3, #15
 8010ffa:	d916      	bls.n	801102a <UART_SetConfig+0x90e>
 8010ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011002:	d212      	bcs.n	801102a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011006:	b29b      	uxth	r3, r3
 8011008:	f023 030f 	bic.w	r3, r3, #15
 801100c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801100e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011010:	085b      	lsrs	r3, r3, #1
 8011012:	b29b      	uxth	r3, r3
 8011014:	f003 0307 	and.w	r3, r3, #7
 8011018:	b29a      	uxth	r2, r3
 801101a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801101c:	4313      	orrs	r3, r2
 801101e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011026:	60da      	str	r2, [r3, #12]
 8011028:	e0bb      	b.n	80111a2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 801102a:	2301      	movs	r3, #1
 801102c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8011030:	e0b7      	b.n	80111a2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011032:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011036:	2b20      	cmp	r3, #32
 8011038:	dc4a      	bgt.n	80110d0 <UART_SetConfig+0x9b4>
 801103a:	2b00      	cmp	r3, #0
 801103c:	f2c0 8086 	blt.w	801114c <UART_SetConfig+0xa30>
 8011040:	2b20      	cmp	r3, #32
 8011042:	f200 8083 	bhi.w	801114c <UART_SetConfig+0xa30>
 8011046:	a201      	add	r2, pc, #4	; (adr r2, 801104c <UART_SetConfig+0x930>)
 8011048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801104c:	080110d7 	.word	0x080110d7
 8011050:	080110f1 	.word	0x080110f1
 8011054:	0801114d 	.word	0x0801114d
 8011058:	0801114d 	.word	0x0801114d
 801105c:	080110f9 	.word	0x080110f9
 8011060:	0801114d 	.word	0x0801114d
 8011064:	0801114d 	.word	0x0801114d
 8011068:	0801114d 	.word	0x0801114d
 801106c:	08011109 	.word	0x08011109
 8011070:	0801114d 	.word	0x0801114d
 8011074:	0801114d 	.word	0x0801114d
 8011078:	0801114d 	.word	0x0801114d
 801107c:	0801114d 	.word	0x0801114d
 8011080:	0801114d 	.word	0x0801114d
 8011084:	0801114d 	.word	0x0801114d
 8011088:	0801114d 	.word	0x0801114d
 801108c:	08011119 	.word	0x08011119
 8011090:	0801114d 	.word	0x0801114d
 8011094:	0801114d 	.word	0x0801114d
 8011098:	0801114d 	.word	0x0801114d
 801109c:	0801114d 	.word	0x0801114d
 80110a0:	0801114d 	.word	0x0801114d
 80110a4:	0801114d 	.word	0x0801114d
 80110a8:	0801114d 	.word	0x0801114d
 80110ac:	0801114d 	.word	0x0801114d
 80110b0:	0801114d 	.word	0x0801114d
 80110b4:	0801114d 	.word	0x0801114d
 80110b8:	0801114d 	.word	0x0801114d
 80110bc:	0801114d 	.word	0x0801114d
 80110c0:	0801114d 	.word	0x0801114d
 80110c4:	0801114d 	.word	0x0801114d
 80110c8:	0801114d 	.word	0x0801114d
 80110cc:	0801113f 	.word	0x0801113f
 80110d0:	2b40      	cmp	r3, #64	; 0x40
 80110d2:	d037      	beq.n	8011144 <UART_SetConfig+0xa28>
 80110d4:	e03a      	b.n	801114c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80110d6:	f7fb f83f 	bl	800c158 <HAL_RCC_GetPCLK1Freq>
 80110da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80110dc:	e03c      	b.n	8011158 <UART_SetConfig+0xa3c>
 80110de:	bf00      	nop
 80110e0:	003d0900 	.word	0x003d0900
 80110e4:	08014eac 	.word	0x08014eac
 80110e8:	58024400 	.word	0x58024400
 80110ec:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80110f0:	f7fb f848 	bl	800c184 <HAL_RCC_GetPCLK2Freq>
 80110f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80110f6:	e02f      	b.n	8011158 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80110f8:	f107 0314 	add.w	r3, r7, #20
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7fb ffad 	bl	800d05c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011102:	69bb      	ldr	r3, [r7, #24]
 8011104:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011106:	e027      	b.n	8011158 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011108:	f107 0308 	add.w	r3, r7, #8
 801110c:	4618      	mov	r0, r3
 801110e:	f7fc f8f9 	bl	800d304 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011116:	e01f      	b.n	8011158 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011118:	4b2c      	ldr	r3, [pc, #176]	; (80111cc <UART_SetConfig+0xab0>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	f003 0320 	and.w	r3, r3, #32
 8011120:	2b00      	cmp	r3, #0
 8011122:	d009      	beq.n	8011138 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011124:	4b29      	ldr	r3, [pc, #164]	; (80111cc <UART_SetConfig+0xab0>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	08db      	lsrs	r3, r3, #3
 801112a:	f003 0303 	and.w	r3, r3, #3
 801112e:	4a28      	ldr	r2, [pc, #160]	; (80111d0 <UART_SetConfig+0xab4>)
 8011130:	fa22 f303 	lsr.w	r3, r2, r3
 8011134:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011136:	e00f      	b.n	8011158 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8011138:	4b25      	ldr	r3, [pc, #148]	; (80111d0 <UART_SetConfig+0xab4>)
 801113a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801113c:	e00c      	b.n	8011158 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801113e:	4b25      	ldr	r3, [pc, #148]	; (80111d4 <UART_SetConfig+0xab8>)
 8011140:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011142:	e009      	b.n	8011158 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011148:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801114a:	e005      	b.n	8011158 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 801114c:	2300      	movs	r3, #0
 801114e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8011150:	2301      	movs	r3, #1
 8011152:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8011156:	bf00      	nop
    }

    if (pclk != 0U)
 8011158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801115a:	2b00      	cmp	r3, #0
 801115c:	d021      	beq.n	80111a2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011162:	4a1d      	ldr	r2, [pc, #116]	; (80111d8 <UART_SetConfig+0xabc>)
 8011164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011168:	461a      	mov	r2, r3
 801116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116c:	fbb3 f2f2 	udiv	r2, r3, r2
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	685b      	ldr	r3, [r3, #4]
 8011174:	085b      	lsrs	r3, r3, #1
 8011176:	441a      	add	r2, r3
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	685b      	ldr	r3, [r3, #4]
 801117c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011180:	b29b      	uxth	r3, r3
 8011182:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011186:	2b0f      	cmp	r3, #15
 8011188:	d908      	bls.n	801119c <UART_SetConfig+0xa80>
 801118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801118c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011190:	d204      	bcs.n	801119c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011198:	60da      	str	r2, [r3, #12]
 801119a:	e002      	b.n	80111a2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 801119c:	2301      	movs	r3, #1
 801119e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2201      	movs	r2, #1
 80111a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2201      	movs	r2, #1
 80111ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2200      	movs	r2, #0
 80111b6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2200      	movs	r2, #0
 80111bc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80111be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3738      	adds	r7, #56	; 0x38
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bdb0      	pop	{r4, r5, r7, pc}
 80111ca:	bf00      	nop
 80111cc:	58024400 	.word	0x58024400
 80111d0:	03d09000 	.word	0x03d09000
 80111d4:	003d0900 	.word	0x003d0900
 80111d8:	08014eac 	.word	0x08014eac

080111dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80111dc:	b480      	push	{r7}
 80111de:	b083      	sub	sp, #12
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111e8:	f003 0301 	and.w	r3, r3, #1
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d00a      	beq.n	8011206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	685b      	ldr	r3, [r3, #4]
 80111f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	430a      	orrs	r2, r1
 8011204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801120a:	f003 0302 	and.w	r3, r3, #2
 801120e:	2b00      	cmp	r3, #0
 8011210:	d00a      	beq.n	8011228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	430a      	orrs	r2, r1
 8011226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801122c:	f003 0304 	and.w	r3, r3, #4
 8011230:	2b00      	cmp	r3, #0
 8011232:	d00a      	beq.n	801124a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	430a      	orrs	r2, r1
 8011248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801124e:	f003 0308 	and.w	r3, r3, #8
 8011252:	2b00      	cmp	r3, #0
 8011254:	d00a      	beq.n	801126c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	430a      	orrs	r2, r1
 801126a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011270:	f003 0310 	and.w	r3, r3, #16
 8011274:	2b00      	cmp	r3, #0
 8011276:	d00a      	beq.n	801128e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	689b      	ldr	r3, [r3, #8]
 801127e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	430a      	orrs	r2, r1
 801128c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011292:	f003 0320 	and.w	r3, r3, #32
 8011296:	2b00      	cmp	r3, #0
 8011298:	d00a      	beq.n	80112b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	689b      	ldr	r3, [r3, #8]
 80112a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	430a      	orrs	r2, r1
 80112ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d01a      	beq.n	80112f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	685b      	ldr	r3, [r3, #4]
 80112c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	430a      	orrs	r2, r1
 80112d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80112da:	d10a      	bne.n	80112f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	685b      	ldr	r3, [r3, #4]
 80112e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	430a      	orrs	r2, r1
 80112f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d00a      	beq.n	8011314 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	685b      	ldr	r3, [r3, #4]
 8011304:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	430a      	orrs	r2, r1
 8011312:	605a      	str	r2, [r3, #4]
  }
}
 8011314:	bf00      	nop
 8011316:	370c      	adds	r7, #12
 8011318:	46bd      	mov	sp, r7
 801131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131e:	4770      	bx	lr

08011320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b086      	sub	sp, #24
 8011324:	af02      	add	r7, sp, #8
 8011326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2200      	movs	r2, #0
 801132c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011330:	f7f4 fbaa 	bl	8005a88 <HAL_GetTick>
 8011334:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	f003 0308 	and.w	r3, r3, #8
 8011340:	2b08      	cmp	r3, #8
 8011342:	d10e      	bne.n	8011362 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011348:	9300      	str	r3, [sp, #0]
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	2200      	movs	r2, #0
 801134e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f000 f82f 	bl	80113b6 <UART_WaitOnFlagUntilTimeout>
 8011358:	4603      	mov	r3, r0
 801135a:	2b00      	cmp	r3, #0
 801135c:	d001      	beq.n	8011362 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801135e:	2303      	movs	r3, #3
 8011360:	e025      	b.n	80113ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	f003 0304 	and.w	r3, r3, #4
 801136c:	2b04      	cmp	r3, #4
 801136e:	d10e      	bne.n	801138e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011374:	9300      	str	r3, [sp, #0]
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2200      	movs	r2, #0
 801137a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f000 f819 	bl	80113b6 <UART_WaitOnFlagUntilTimeout>
 8011384:	4603      	mov	r3, r0
 8011386:	2b00      	cmp	r3, #0
 8011388:	d001      	beq.n	801138e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801138a:	2303      	movs	r3, #3
 801138c:	e00f      	b.n	80113ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2220      	movs	r2, #32
 8011392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2220      	movs	r2, #32
 801139a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2200      	movs	r2, #0
 80113a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2200      	movs	r2, #0
 80113a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80113ac:	2300      	movs	r3, #0
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3710      	adds	r7, #16
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}

080113b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80113b6:	b580      	push	{r7, lr}
 80113b8:	b084      	sub	sp, #16
 80113ba:	af00      	add	r7, sp, #0
 80113bc:	60f8      	str	r0, [r7, #12]
 80113be:	60b9      	str	r1, [r7, #8]
 80113c0:	603b      	str	r3, [r7, #0]
 80113c2:	4613      	mov	r3, r2
 80113c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80113c6:	e062      	b.n	801148e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80113c8:	69bb      	ldr	r3, [r7, #24]
 80113ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113ce:	d05e      	beq.n	801148e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80113d0:	f7f4 fb5a 	bl	8005a88 <HAL_GetTick>
 80113d4:	4602      	mov	r2, r0
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	1ad3      	subs	r3, r2, r3
 80113da:	69ba      	ldr	r2, [r7, #24]
 80113dc:	429a      	cmp	r2, r3
 80113de:	d302      	bcc.n	80113e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80113e0:	69bb      	ldr	r3, [r7, #24]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d11d      	bne.n	8011422 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	681a      	ldr	r2, [r3, #0]
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80113f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	689a      	ldr	r2, [r3, #8]
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	f022 0201 	bic.w	r2, r2, #1
 8011404:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	2220      	movs	r2, #32
 801140a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	2220      	movs	r2, #32
 8011412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	2200      	movs	r2, #0
 801141a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801141e:	2303      	movs	r3, #3
 8011420:	e045      	b.n	80114ae <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f003 0304 	and.w	r3, r3, #4
 801142c:	2b00      	cmp	r3, #0
 801142e:	d02e      	beq.n	801148e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	69db      	ldr	r3, [r3, #28]
 8011436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801143a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801143e:	d126      	bne.n	801148e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011448:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011458:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	689a      	ldr	r2, [r3, #8]
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	f022 0201 	bic.w	r2, r2, #1
 8011468:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	2220      	movs	r2, #32
 801146e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	2220      	movs	r2, #32
 8011476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	2220      	movs	r2, #32
 801147e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	2200      	movs	r2, #0
 8011486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801148a:	2303      	movs	r3, #3
 801148c:	e00f      	b.n	80114ae <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	69da      	ldr	r2, [r3, #28]
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	4013      	ands	r3, r2
 8011498:	68ba      	ldr	r2, [r7, #8]
 801149a:	429a      	cmp	r2, r3
 801149c:	bf0c      	ite	eq
 801149e:	2301      	moveq	r3, #1
 80114a0:	2300      	movne	r3, #0
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	461a      	mov	r2, r3
 80114a6:	79fb      	ldrb	r3, [r7, #7]
 80114a8:	429a      	cmp	r2, r3
 80114aa:	d08d      	beq.n	80113c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80114ac:	2300      	movs	r3, #0
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3710      	adds	r7, #16
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
	...

080114b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
 80114be:	60f8      	str	r0, [r7, #12]
 80114c0:	60b9      	str	r1, [r7, #8]
 80114c2:	4613      	mov	r3, r2
 80114c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	68ba      	ldr	r2, [r7, #8]
 80114ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	88fa      	ldrh	r2, [r7, #6]
 80114d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	2200      	movs	r2, #0
 80114d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	2222      	movs	r2, #34	; 0x22
 80114e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d02c      	beq.n	8011546 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114f0:	4a25      	ldr	r2, [pc, #148]	; (8011588 <UART_Start_Receive_DMA+0xd0>)
 80114f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114f8:	4a24      	ldr	r2, [pc, #144]	; (801158c <UART_Start_Receive_DMA+0xd4>)
 80114fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011500:	4a23      	ldr	r2, [pc, #140]	; (8011590 <UART_Start_Receive_DMA+0xd8>)
 8011502:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011508:	2200      	movs	r2, #0
 801150a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	3324      	adds	r3, #36	; 0x24
 8011516:	4619      	mov	r1, r3
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801151c:	461a      	mov	r2, r3
 801151e:	88fb      	ldrh	r3, [r7, #6]
 8011520:	f7f4 ff5a 	bl	80063d8 <HAL_DMA_Start_IT>
 8011524:	4603      	mov	r3, r0
 8011526:	2b00      	cmp	r3, #0
 8011528:	d00d      	beq.n	8011546 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	2210      	movs	r2, #16
 801152e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	2200      	movs	r2, #0
 8011536:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	2220      	movs	r2, #32
 801153e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8011542:	2301      	movs	r3, #1
 8011544:	e01c      	b.n	8011580 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	2200      	movs	r2, #0
 801154a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	681a      	ldr	r2, [r3, #0]
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801155c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	689a      	ldr	r2, [r3, #8]
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	f042 0201 	orr.w	r2, r2, #1
 801156c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	689a      	ldr	r2, [r3, #8]
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801157c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 801157e:	2300      	movs	r3, #0
}
 8011580:	4618      	mov	r0, r3
 8011582:	3710      	adds	r7, #16
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}
 8011588:	080116a1 	.word	0x080116a1
 801158c:	08011737 	.word	0x08011737
 8011590:	0801176f 	.word	0x0801176f

08011594 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011594:	b480      	push	{r7}
 8011596:	b083      	sub	sp, #12
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	681a      	ldr	r2, [r3, #0]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80115aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	689a      	ldr	r2, [r3, #8]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80115ba:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2220      	movs	r2, #32
 80115c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80115c4:	bf00      	nop
 80115c6:	370c      	adds	r7, #12
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr

080115d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80115d0:	b480      	push	{r7}
 80115d2:	b083      	sub	sp, #12
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	681a      	ldr	r2, [r3, #0]
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80115e6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	6899      	ldr	r1, [r3, #8]
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681a      	ldr	r2, [r3, #0]
 80115f2:	4b0f      	ldr	r3, [pc, #60]	; (8011630 <UART_EndRxTransfer+0x60>)
 80115f4:	400b      	ands	r3, r1
 80115f6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115fc:	2b01      	cmp	r3, #1
 80115fe:	d107      	bne.n	8011610 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	681a      	ldr	r2, [r3, #0]
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	f022 0210 	bic.w	r2, r2, #16
 801160e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2220      	movs	r2, #32
 8011614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2200      	movs	r2, #0
 801161c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2200      	movs	r2, #0
 8011622:	671a      	str	r2, [r3, #112]	; 0x70
}
 8011624:	bf00      	nop
 8011626:	370c      	adds	r7, #12
 8011628:	46bd      	mov	sp, r7
 801162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162e:	4770      	bx	lr
 8011630:	effffffe 	.word	0xeffffffe

08011634 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b084      	sub	sp, #16
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011640:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	69db      	ldr	r3, [r3, #28]
 8011646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801164a:	d014      	beq.n	8011676 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	2200      	movs	r2, #0
 8011650:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	689a      	ldr	r2, [r3, #8]
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011662:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	681a      	ldr	r2, [r3, #0]
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011672:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011674:	e002      	b.n	801167c <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8011676:	68f8      	ldr	r0, [r7, #12]
 8011678:	f7ff f81c 	bl	80106b4 <HAL_UART_TxCpltCallback>
}
 801167c:	bf00      	nop
 801167e:	3710      	adds	r7, #16
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b084      	sub	sp, #16
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011690:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	f7ff f818 	bl	80106c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011698:	bf00      	nop
 801169a:	3710      	adds	r7, #16
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}

080116a0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b084      	sub	sp, #16
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116ac:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	69db      	ldr	r3, [r3, #28]
 80116b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80116b6:	d02b      	beq.n	8011710 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	2200      	movs	r2, #0
 80116bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	681a      	ldr	r2, [r3, #0]
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80116ce:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	689a      	ldr	r2, [r3, #8]
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	f022 0201 	bic.w	r2, r2, #1
 80116de:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	689a      	ldr	r2, [r3, #8]
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80116ee:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	2220      	movs	r2, #32
 80116f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116fc:	2b01      	cmp	r3, #1
 80116fe:	d107      	bne.n	8011710 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	681a      	ldr	r2, [r3, #0]
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	f022 0210 	bic.w	r2, r2, #16
 801170e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011714:	2b01      	cmp	r3, #1
 8011716:	d107      	bne.n	8011728 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801171e:	4619      	mov	r1, r3
 8011720:	68f8      	ldr	r0, [r7, #12]
 8011722:	f7fe ffef 	bl	8010704 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011726:	e002      	b.n	801172e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8011728:	68f8      	ldr	r0, [r7, #12]
 801172a:	f7f3 fa55 	bl	8004bd8 <HAL_UART_RxCpltCallback>
}
 801172e:	bf00      	nop
 8011730:	3710      	adds	r7, #16
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}

08011736 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011736:	b580      	push	{r7, lr}
 8011738:	b084      	sub	sp, #16
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011742:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011748:	2b01      	cmp	r3, #1
 801174a:	d109      	bne.n	8011760 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011752:	085b      	lsrs	r3, r3, #1
 8011754:	b29b      	uxth	r3, r3
 8011756:	4619      	mov	r1, r3
 8011758:	68f8      	ldr	r0, [r7, #12]
 801175a:	f7fe ffd3 	bl	8010704 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801175e:	e002      	b.n	8011766 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8011760:	68f8      	ldr	r0, [r7, #12]
 8011762:	f7fe ffbb 	bl	80106dc <HAL_UART_RxHalfCpltCallback>
}
 8011766:	bf00      	nop
 8011768:	3710      	adds	r7, #16
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}

0801176e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801176e:	b580      	push	{r7, lr}
 8011770:	b086      	sub	sp, #24
 8011772:	af00      	add	r7, sp, #0
 8011774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801177a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011782:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801178a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	689b      	ldr	r3, [r3, #8]
 8011792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011796:	2b80      	cmp	r3, #128	; 0x80
 8011798:	d109      	bne.n	80117ae <UART_DMAError+0x40>
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	2b21      	cmp	r3, #33	; 0x21
 801179e:	d106      	bne.n	80117ae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	2200      	movs	r2, #0
 80117a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80117a8:	6978      	ldr	r0, [r7, #20]
 80117aa:	f7ff fef3 	bl	8011594 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	689b      	ldr	r3, [r3, #8]
 80117b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117b8:	2b40      	cmp	r3, #64	; 0x40
 80117ba:	d109      	bne.n	80117d0 <UART_DMAError+0x62>
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2b22      	cmp	r3, #34	; 0x22
 80117c0:	d106      	bne.n	80117d0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	2200      	movs	r2, #0
 80117c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80117ca:	6978      	ldr	r0, [r7, #20]
 80117cc:	f7ff ff00 	bl	80115d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80117d0:	697b      	ldr	r3, [r7, #20]
 80117d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80117d6:	f043 0210 	orr.w	r2, r3, #16
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80117e0:	6978      	ldr	r0, [r7, #20]
 80117e2:	f7fe ff85 	bl	80106f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80117e6:	bf00      	nop
 80117e8:	3718      	adds	r7, #24
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd80      	pop	{r7, pc}

080117ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80117ee:	b580      	push	{r7, lr}
 80117f0:	b084      	sub	sp, #16
 80117f2:	af00      	add	r7, sp, #0
 80117f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	2200      	movs	r2, #0
 8011800:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	2200      	movs	r2, #0
 8011808:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801180c:	68f8      	ldr	r0, [r7, #12]
 801180e:	f7fe ff6f 	bl	80106f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011812:	bf00      	nop
 8011814:	3710      	adds	r7, #16
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}

0801181a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801181a:	b580      	push	{r7, lr}
 801181c:	b082      	sub	sp, #8
 801181e:	af00      	add	r7, sp, #0
 8011820:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	681a      	ldr	r2, [r3, #0]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011830:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	2220      	movs	r2, #32
 8011836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2200      	movs	r2, #0
 801183e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f7fe ff37 	bl	80106b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011846:	bf00      	nop
 8011848:	3708      	adds	r7, #8
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}

0801184e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801184e:	b480      	push	{r7}
 8011850:	b083      	sub	sp, #12
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011856:	bf00      	nop
 8011858:	370c      	adds	r7, #12
 801185a:	46bd      	mov	sp, r7
 801185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011860:	4770      	bx	lr

08011862 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011862:	b480      	push	{r7}
 8011864:	b083      	sub	sp, #12
 8011866:	af00      	add	r7, sp, #0
 8011868:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801186a:	bf00      	nop
 801186c:	370c      	adds	r7, #12
 801186e:	46bd      	mov	sp, r7
 8011870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011874:	4770      	bx	lr

08011876 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011876:	b480      	push	{r7}
 8011878:	b083      	sub	sp, #12
 801187a:	af00      	add	r7, sp, #0
 801187c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801187e:	bf00      	nop
 8011880:	370c      	adds	r7, #12
 8011882:	46bd      	mov	sp, r7
 8011884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011888:	4770      	bx	lr

0801188a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801188a:	b480      	push	{r7}
 801188c:	b085      	sub	sp, #20
 801188e:	af00      	add	r7, sp, #0
 8011890:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011898:	2b01      	cmp	r3, #1
 801189a:	d101      	bne.n	80118a0 <HAL_UARTEx_DisableFifoMode+0x16>
 801189c:	2302      	movs	r3, #2
 801189e:	e027      	b.n	80118f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2201      	movs	r2, #1
 80118a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2224      	movs	r2, #36	; 0x24
 80118ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	681a      	ldr	r2, [r3, #0]
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	f022 0201 	bic.w	r2, r2, #1
 80118c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80118ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2200      	movs	r2, #0
 80118d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2220      	movs	r2, #32
 80118e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2200      	movs	r2, #0
 80118ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80118ee:	2300      	movs	r3, #0
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3714      	adds	r7, #20
 80118f4:	46bd      	mov	sp, r7
 80118f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fa:	4770      	bx	lr

080118fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b084      	sub	sp, #16
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801190c:	2b01      	cmp	r3, #1
 801190e:	d101      	bne.n	8011914 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011910:	2302      	movs	r3, #2
 8011912:	e02d      	b.n	8011970 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2201      	movs	r2, #1
 8011918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2224      	movs	r2, #36	; 0x24
 8011920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	681a      	ldr	r2, [r3, #0]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	f022 0201 	bic.w	r2, r2, #1
 801193a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	689b      	ldr	r3, [r3, #8]
 8011942:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	683a      	ldr	r2, [r7, #0]
 801194c:	430a      	orrs	r2, r1
 801194e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011950:	6878      	ldr	r0, [r7, #4]
 8011952:	f000 f84f 	bl	80119f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	68fa      	ldr	r2, [r7, #12]
 801195c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2220      	movs	r2, #32
 8011962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2200      	movs	r2, #0
 801196a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801196e:	2300      	movs	r3, #0
}
 8011970:	4618      	mov	r0, r3
 8011972:	3710      	adds	r7, #16
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}

08011978 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b084      	sub	sp, #16
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011988:	2b01      	cmp	r3, #1
 801198a:	d101      	bne.n	8011990 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801198c:	2302      	movs	r3, #2
 801198e:	e02d      	b.n	80119ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2201      	movs	r2, #1
 8011994:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2224      	movs	r2, #36	; 0x24
 801199c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	681a      	ldr	r2, [r3, #0]
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	f022 0201 	bic.w	r2, r2, #1
 80119b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	689b      	ldr	r3, [r3, #8]
 80119be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	683a      	ldr	r2, [r7, #0]
 80119c8:	430a      	orrs	r2, r1
 80119ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	f000 f811 	bl	80119f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	68fa      	ldr	r2, [r7, #12]
 80119d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2220      	movs	r2, #32
 80119de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	2200      	movs	r2, #0
 80119e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80119ea:	2300      	movs	r3, #0
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3710      	adds	r7, #16
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80119f4:	b480      	push	{r7}
 80119f6:	b085      	sub	sp, #20
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d108      	bne.n	8011a16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2201      	movs	r2, #1
 8011a08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2201      	movs	r2, #1
 8011a10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011a14:	e031      	b.n	8011a7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011a16:	2310      	movs	r3, #16
 8011a18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011a1a:	2310      	movs	r3, #16
 8011a1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	689b      	ldr	r3, [r3, #8]
 8011a24:	0e5b      	lsrs	r3, r3, #25
 8011a26:	b2db      	uxtb	r3, r3
 8011a28:	f003 0307 	and.w	r3, r3, #7
 8011a2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	689b      	ldr	r3, [r3, #8]
 8011a34:	0f5b      	lsrs	r3, r3, #29
 8011a36:	b2db      	uxtb	r3, r3
 8011a38:	f003 0307 	and.w	r3, r3, #7
 8011a3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a3e:	7bbb      	ldrb	r3, [r7, #14]
 8011a40:	7b3a      	ldrb	r2, [r7, #12]
 8011a42:	4911      	ldr	r1, [pc, #68]	; (8011a88 <UARTEx_SetNbDataToProcess+0x94>)
 8011a44:	5c8a      	ldrb	r2, [r1, r2]
 8011a46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011a4a:	7b3a      	ldrb	r2, [r7, #12]
 8011a4c:	490f      	ldr	r1, [pc, #60]	; (8011a8c <UARTEx_SetNbDataToProcess+0x98>)
 8011a4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a50:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a54:	b29a      	uxth	r2, r3
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011a5c:	7bfb      	ldrb	r3, [r7, #15]
 8011a5e:	7b7a      	ldrb	r2, [r7, #13]
 8011a60:	4909      	ldr	r1, [pc, #36]	; (8011a88 <UARTEx_SetNbDataToProcess+0x94>)
 8011a62:	5c8a      	ldrb	r2, [r1, r2]
 8011a64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011a68:	7b7a      	ldrb	r2, [r7, #13]
 8011a6a:	4908      	ldr	r1, [pc, #32]	; (8011a8c <UARTEx_SetNbDataToProcess+0x98>)
 8011a6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011a6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a72:	b29a      	uxth	r2, r3
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011a7a:	bf00      	nop
 8011a7c:	3714      	adds	r7, #20
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a84:	4770      	bx	lr
 8011a86:	bf00      	nop
 8011a88:	08014ec4 	.word	0x08014ec4
 8011a8c:	08014ecc 	.word	0x08014ecc

08011a90 <__errno>:
 8011a90:	4b01      	ldr	r3, [pc, #4]	; (8011a98 <__errno+0x8>)
 8011a92:	6818      	ldr	r0, [r3, #0]
 8011a94:	4770      	bx	lr
 8011a96:	bf00      	nop
 8011a98:	24000024 	.word	0x24000024

08011a9c <__libc_init_array>:
 8011a9c:	b570      	push	{r4, r5, r6, lr}
 8011a9e:	4d0d      	ldr	r5, [pc, #52]	; (8011ad4 <__libc_init_array+0x38>)
 8011aa0:	4c0d      	ldr	r4, [pc, #52]	; (8011ad8 <__libc_init_array+0x3c>)
 8011aa2:	1b64      	subs	r4, r4, r5
 8011aa4:	10a4      	asrs	r4, r4, #2
 8011aa6:	2600      	movs	r6, #0
 8011aa8:	42a6      	cmp	r6, r4
 8011aaa:	d109      	bne.n	8011ac0 <__libc_init_array+0x24>
 8011aac:	4d0b      	ldr	r5, [pc, #44]	; (8011adc <__libc_init_array+0x40>)
 8011aae:	4c0c      	ldr	r4, [pc, #48]	; (8011ae0 <__libc_init_array+0x44>)
 8011ab0:	f003 f994 	bl	8014ddc <_init>
 8011ab4:	1b64      	subs	r4, r4, r5
 8011ab6:	10a4      	asrs	r4, r4, #2
 8011ab8:	2600      	movs	r6, #0
 8011aba:	42a6      	cmp	r6, r4
 8011abc:	d105      	bne.n	8011aca <__libc_init_array+0x2e>
 8011abe:	bd70      	pop	{r4, r5, r6, pc}
 8011ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ac4:	4798      	blx	r3
 8011ac6:	3601      	adds	r6, #1
 8011ac8:	e7ee      	b.n	8011aa8 <__libc_init_array+0xc>
 8011aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ace:	4798      	blx	r3
 8011ad0:	3601      	adds	r6, #1
 8011ad2:	e7f2      	b.n	8011aba <__libc_init_array+0x1e>
 8011ad4:	08015368 	.word	0x08015368
 8011ad8:	08015368 	.word	0x08015368
 8011adc:	08015368 	.word	0x08015368
 8011ae0:	0801536c 	.word	0x0801536c

08011ae4 <memset>:
 8011ae4:	4402      	add	r2, r0
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	4293      	cmp	r3, r2
 8011aea:	d100      	bne.n	8011aee <memset+0xa>
 8011aec:	4770      	bx	lr
 8011aee:	f803 1b01 	strb.w	r1, [r3], #1
 8011af2:	e7f9      	b.n	8011ae8 <memset+0x4>

08011af4 <__cvt>:
 8011af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011af6:	ed2d 8b02 	vpush	{d8}
 8011afa:	eeb0 8b40 	vmov.f64	d8, d0
 8011afe:	b085      	sub	sp, #20
 8011b00:	4617      	mov	r7, r2
 8011b02:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011b04:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011b06:	ee18 2a90 	vmov	r2, s17
 8011b0a:	f025 0520 	bic.w	r5, r5, #32
 8011b0e:	2a00      	cmp	r2, #0
 8011b10:	bfb6      	itet	lt
 8011b12:	222d      	movlt	r2, #45	; 0x2d
 8011b14:	2200      	movge	r2, #0
 8011b16:	eeb1 8b40 	vneglt.f64	d8, d0
 8011b1a:	2d46      	cmp	r5, #70	; 0x46
 8011b1c:	460c      	mov	r4, r1
 8011b1e:	701a      	strb	r2, [r3, #0]
 8011b20:	d004      	beq.n	8011b2c <__cvt+0x38>
 8011b22:	2d45      	cmp	r5, #69	; 0x45
 8011b24:	d100      	bne.n	8011b28 <__cvt+0x34>
 8011b26:	3401      	adds	r4, #1
 8011b28:	2102      	movs	r1, #2
 8011b2a:	e000      	b.n	8011b2e <__cvt+0x3a>
 8011b2c:	2103      	movs	r1, #3
 8011b2e:	ab03      	add	r3, sp, #12
 8011b30:	9301      	str	r3, [sp, #4]
 8011b32:	ab02      	add	r3, sp, #8
 8011b34:	9300      	str	r3, [sp, #0]
 8011b36:	4622      	mov	r2, r4
 8011b38:	4633      	mov	r3, r6
 8011b3a:	eeb0 0b48 	vmov.f64	d0, d8
 8011b3e:	f000 fdf7 	bl	8012730 <_dtoa_r>
 8011b42:	2d47      	cmp	r5, #71	; 0x47
 8011b44:	d109      	bne.n	8011b5a <__cvt+0x66>
 8011b46:	07fb      	lsls	r3, r7, #31
 8011b48:	d407      	bmi.n	8011b5a <__cvt+0x66>
 8011b4a:	9b03      	ldr	r3, [sp, #12]
 8011b4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b4e:	1a1b      	subs	r3, r3, r0
 8011b50:	6013      	str	r3, [r2, #0]
 8011b52:	b005      	add	sp, #20
 8011b54:	ecbd 8b02 	vpop	{d8}
 8011b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b5a:	2d46      	cmp	r5, #70	; 0x46
 8011b5c:	eb00 0204 	add.w	r2, r0, r4
 8011b60:	d10c      	bne.n	8011b7c <__cvt+0x88>
 8011b62:	7803      	ldrb	r3, [r0, #0]
 8011b64:	2b30      	cmp	r3, #48	; 0x30
 8011b66:	d107      	bne.n	8011b78 <__cvt+0x84>
 8011b68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b70:	bf1c      	itt	ne
 8011b72:	f1c4 0401 	rsbne	r4, r4, #1
 8011b76:	6034      	strne	r4, [r6, #0]
 8011b78:	6833      	ldr	r3, [r6, #0]
 8011b7a:	441a      	add	r2, r3
 8011b7c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b84:	bf08      	it	eq
 8011b86:	9203      	streq	r2, [sp, #12]
 8011b88:	2130      	movs	r1, #48	; 0x30
 8011b8a:	9b03      	ldr	r3, [sp, #12]
 8011b8c:	4293      	cmp	r3, r2
 8011b8e:	d2dc      	bcs.n	8011b4a <__cvt+0x56>
 8011b90:	1c5c      	adds	r4, r3, #1
 8011b92:	9403      	str	r4, [sp, #12]
 8011b94:	7019      	strb	r1, [r3, #0]
 8011b96:	e7f8      	b.n	8011b8a <__cvt+0x96>

08011b98 <__exponent>:
 8011b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	2900      	cmp	r1, #0
 8011b9e:	bfb8      	it	lt
 8011ba0:	4249      	neglt	r1, r1
 8011ba2:	f803 2b02 	strb.w	r2, [r3], #2
 8011ba6:	bfb4      	ite	lt
 8011ba8:	222d      	movlt	r2, #45	; 0x2d
 8011baa:	222b      	movge	r2, #43	; 0x2b
 8011bac:	2909      	cmp	r1, #9
 8011bae:	7042      	strb	r2, [r0, #1]
 8011bb0:	dd2a      	ble.n	8011c08 <__exponent+0x70>
 8011bb2:	f10d 0407 	add.w	r4, sp, #7
 8011bb6:	46a4      	mov	ip, r4
 8011bb8:	270a      	movs	r7, #10
 8011bba:	46a6      	mov	lr, r4
 8011bbc:	460a      	mov	r2, r1
 8011bbe:	fb91 f6f7 	sdiv	r6, r1, r7
 8011bc2:	fb07 1516 	mls	r5, r7, r6, r1
 8011bc6:	3530      	adds	r5, #48	; 0x30
 8011bc8:	2a63      	cmp	r2, #99	; 0x63
 8011bca:	f104 34ff 	add.w	r4, r4, #4294967295
 8011bce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011bd2:	4631      	mov	r1, r6
 8011bd4:	dcf1      	bgt.n	8011bba <__exponent+0x22>
 8011bd6:	3130      	adds	r1, #48	; 0x30
 8011bd8:	f1ae 0502 	sub.w	r5, lr, #2
 8011bdc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011be0:	1c44      	adds	r4, r0, #1
 8011be2:	4629      	mov	r1, r5
 8011be4:	4561      	cmp	r1, ip
 8011be6:	d30a      	bcc.n	8011bfe <__exponent+0x66>
 8011be8:	f10d 0209 	add.w	r2, sp, #9
 8011bec:	eba2 020e 	sub.w	r2, r2, lr
 8011bf0:	4565      	cmp	r5, ip
 8011bf2:	bf88      	it	hi
 8011bf4:	2200      	movhi	r2, #0
 8011bf6:	4413      	add	r3, r2
 8011bf8:	1a18      	subs	r0, r3, r0
 8011bfa:	b003      	add	sp, #12
 8011bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c02:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011c06:	e7ed      	b.n	8011be4 <__exponent+0x4c>
 8011c08:	2330      	movs	r3, #48	; 0x30
 8011c0a:	3130      	adds	r1, #48	; 0x30
 8011c0c:	7083      	strb	r3, [r0, #2]
 8011c0e:	70c1      	strb	r1, [r0, #3]
 8011c10:	1d03      	adds	r3, r0, #4
 8011c12:	e7f1      	b.n	8011bf8 <__exponent+0x60>
 8011c14:	0000      	movs	r0, r0
	...

08011c18 <_printf_float>:
 8011c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c1c:	b08b      	sub	sp, #44	; 0x2c
 8011c1e:	460c      	mov	r4, r1
 8011c20:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011c24:	4616      	mov	r6, r2
 8011c26:	461f      	mov	r7, r3
 8011c28:	4605      	mov	r5, r0
 8011c2a:	f001 fcbb 	bl	80135a4 <_localeconv_r>
 8011c2e:	f8d0 b000 	ldr.w	fp, [r0]
 8011c32:	4658      	mov	r0, fp
 8011c34:	f7ee fb54 	bl	80002e0 <strlen>
 8011c38:	2300      	movs	r3, #0
 8011c3a:	9308      	str	r3, [sp, #32]
 8011c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8011c40:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011c44:	6822      	ldr	r2, [r4, #0]
 8011c46:	3307      	adds	r3, #7
 8011c48:	f023 0307 	bic.w	r3, r3, #7
 8011c4c:	f103 0108 	add.w	r1, r3, #8
 8011c50:	f8c8 1000 	str.w	r1, [r8]
 8011c54:	4682      	mov	sl, r0
 8011c56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011c5a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011c5e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011ec0 <_printf_float+0x2a8>
 8011c62:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011c66:	eeb0 6bc0 	vabs.f64	d6, d0
 8011c6a:	eeb4 6b47 	vcmp.f64	d6, d7
 8011c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c72:	dd24      	ble.n	8011cbe <_printf_float+0xa6>
 8011c74:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c7c:	d502      	bpl.n	8011c84 <_printf_float+0x6c>
 8011c7e:	232d      	movs	r3, #45	; 0x2d
 8011c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c84:	4b90      	ldr	r3, [pc, #576]	; (8011ec8 <_printf_float+0x2b0>)
 8011c86:	4891      	ldr	r0, [pc, #580]	; (8011ecc <_printf_float+0x2b4>)
 8011c88:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011c8c:	bf94      	ite	ls
 8011c8e:	4698      	movls	r8, r3
 8011c90:	4680      	movhi	r8, r0
 8011c92:	2303      	movs	r3, #3
 8011c94:	6123      	str	r3, [r4, #16]
 8011c96:	f022 0204 	bic.w	r2, r2, #4
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	6022      	str	r2, [r4, #0]
 8011c9e:	9304      	str	r3, [sp, #16]
 8011ca0:	9700      	str	r7, [sp, #0]
 8011ca2:	4633      	mov	r3, r6
 8011ca4:	aa09      	add	r2, sp, #36	; 0x24
 8011ca6:	4621      	mov	r1, r4
 8011ca8:	4628      	mov	r0, r5
 8011caa:	f000 f9d3 	bl	8012054 <_printf_common>
 8011cae:	3001      	adds	r0, #1
 8011cb0:	f040 808a 	bne.w	8011dc8 <_printf_float+0x1b0>
 8011cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8011cb8:	b00b      	add	sp, #44	; 0x2c
 8011cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cbe:	eeb4 0b40 	vcmp.f64	d0, d0
 8011cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cc6:	d709      	bvc.n	8011cdc <_printf_float+0xc4>
 8011cc8:	ee10 3a90 	vmov	r3, s1
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	bfbc      	itt	lt
 8011cd0:	232d      	movlt	r3, #45	; 0x2d
 8011cd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011cd6:	487e      	ldr	r0, [pc, #504]	; (8011ed0 <_printf_float+0x2b8>)
 8011cd8:	4b7e      	ldr	r3, [pc, #504]	; (8011ed4 <_printf_float+0x2bc>)
 8011cda:	e7d5      	b.n	8011c88 <_printf_float+0x70>
 8011cdc:	6863      	ldr	r3, [r4, #4]
 8011cde:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011ce2:	9104      	str	r1, [sp, #16]
 8011ce4:	1c59      	adds	r1, r3, #1
 8011ce6:	d13c      	bne.n	8011d62 <_printf_float+0x14a>
 8011ce8:	2306      	movs	r3, #6
 8011cea:	6063      	str	r3, [r4, #4]
 8011cec:	2300      	movs	r3, #0
 8011cee:	9303      	str	r3, [sp, #12]
 8011cf0:	ab08      	add	r3, sp, #32
 8011cf2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011cf6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011cfa:	ab07      	add	r3, sp, #28
 8011cfc:	6861      	ldr	r1, [r4, #4]
 8011cfe:	9300      	str	r3, [sp, #0]
 8011d00:	6022      	str	r2, [r4, #0]
 8011d02:	f10d 031b 	add.w	r3, sp, #27
 8011d06:	4628      	mov	r0, r5
 8011d08:	f7ff fef4 	bl	8011af4 <__cvt>
 8011d0c:	9b04      	ldr	r3, [sp, #16]
 8011d0e:	9907      	ldr	r1, [sp, #28]
 8011d10:	2b47      	cmp	r3, #71	; 0x47
 8011d12:	4680      	mov	r8, r0
 8011d14:	d108      	bne.n	8011d28 <_printf_float+0x110>
 8011d16:	1cc8      	adds	r0, r1, #3
 8011d18:	db02      	blt.n	8011d20 <_printf_float+0x108>
 8011d1a:	6863      	ldr	r3, [r4, #4]
 8011d1c:	4299      	cmp	r1, r3
 8011d1e:	dd41      	ble.n	8011da4 <_printf_float+0x18c>
 8011d20:	f1a9 0902 	sub.w	r9, r9, #2
 8011d24:	fa5f f989 	uxtb.w	r9, r9
 8011d28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011d2c:	d820      	bhi.n	8011d70 <_printf_float+0x158>
 8011d2e:	3901      	subs	r1, #1
 8011d30:	464a      	mov	r2, r9
 8011d32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011d36:	9107      	str	r1, [sp, #28]
 8011d38:	f7ff ff2e 	bl	8011b98 <__exponent>
 8011d3c:	9a08      	ldr	r2, [sp, #32]
 8011d3e:	9004      	str	r0, [sp, #16]
 8011d40:	1813      	adds	r3, r2, r0
 8011d42:	2a01      	cmp	r2, #1
 8011d44:	6123      	str	r3, [r4, #16]
 8011d46:	dc02      	bgt.n	8011d4e <_printf_float+0x136>
 8011d48:	6822      	ldr	r2, [r4, #0]
 8011d4a:	07d2      	lsls	r2, r2, #31
 8011d4c:	d501      	bpl.n	8011d52 <_printf_float+0x13a>
 8011d4e:	3301      	adds	r3, #1
 8011d50:	6123      	str	r3, [r4, #16]
 8011d52:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d0a2      	beq.n	8011ca0 <_printf_float+0x88>
 8011d5a:	232d      	movs	r3, #45	; 0x2d
 8011d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d60:	e79e      	b.n	8011ca0 <_printf_float+0x88>
 8011d62:	9904      	ldr	r1, [sp, #16]
 8011d64:	2947      	cmp	r1, #71	; 0x47
 8011d66:	d1c1      	bne.n	8011cec <_printf_float+0xd4>
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d1bf      	bne.n	8011cec <_printf_float+0xd4>
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	e7bc      	b.n	8011cea <_printf_float+0xd2>
 8011d70:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011d74:	d118      	bne.n	8011da8 <_printf_float+0x190>
 8011d76:	2900      	cmp	r1, #0
 8011d78:	6863      	ldr	r3, [r4, #4]
 8011d7a:	dd0b      	ble.n	8011d94 <_printf_float+0x17c>
 8011d7c:	6121      	str	r1, [r4, #16]
 8011d7e:	b913      	cbnz	r3, 8011d86 <_printf_float+0x16e>
 8011d80:	6822      	ldr	r2, [r4, #0]
 8011d82:	07d0      	lsls	r0, r2, #31
 8011d84:	d502      	bpl.n	8011d8c <_printf_float+0x174>
 8011d86:	3301      	adds	r3, #1
 8011d88:	440b      	add	r3, r1
 8011d8a:	6123      	str	r3, [r4, #16]
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011d90:	9304      	str	r3, [sp, #16]
 8011d92:	e7de      	b.n	8011d52 <_printf_float+0x13a>
 8011d94:	b913      	cbnz	r3, 8011d9c <_printf_float+0x184>
 8011d96:	6822      	ldr	r2, [r4, #0]
 8011d98:	07d2      	lsls	r2, r2, #31
 8011d9a:	d501      	bpl.n	8011da0 <_printf_float+0x188>
 8011d9c:	3302      	adds	r3, #2
 8011d9e:	e7f4      	b.n	8011d8a <_printf_float+0x172>
 8011da0:	2301      	movs	r3, #1
 8011da2:	e7f2      	b.n	8011d8a <_printf_float+0x172>
 8011da4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011da8:	9b08      	ldr	r3, [sp, #32]
 8011daa:	4299      	cmp	r1, r3
 8011dac:	db05      	blt.n	8011dba <_printf_float+0x1a2>
 8011dae:	6823      	ldr	r3, [r4, #0]
 8011db0:	6121      	str	r1, [r4, #16]
 8011db2:	07d8      	lsls	r0, r3, #31
 8011db4:	d5ea      	bpl.n	8011d8c <_printf_float+0x174>
 8011db6:	1c4b      	adds	r3, r1, #1
 8011db8:	e7e7      	b.n	8011d8a <_printf_float+0x172>
 8011dba:	2900      	cmp	r1, #0
 8011dbc:	bfd4      	ite	le
 8011dbe:	f1c1 0202 	rsble	r2, r1, #2
 8011dc2:	2201      	movgt	r2, #1
 8011dc4:	4413      	add	r3, r2
 8011dc6:	e7e0      	b.n	8011d8a <_printf_float+0x172>
 8011dc8:	6823      	ldr	r3, [r4, #0]
 8011dca:	055a      	lsls	r2, r3, #21
 8011dcc:	d407      	bmi.n	8011dde <_printf_float+0x1c6>
 8011dce:	6923      	ldr	r3, [r4, #16]
 8011dd0:	4642      	mov	r2, r8
 8011dd2:	4631      	mov	r1, r6
 8011dd4:	4628      	mov	r0, r5
 8011dd6:	47b8      	blx	r7
 8011dd8:	3001      	adds	r0, #1
 8011dda:	d12a      	bne.n	8011e32 <_printf_float+0x21a>
 8011ddc:	e76a      	b.n	8011cb4 <_printf_float+0x9c>
 8011dde:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011de2:	f240 80e2 	bls.w	8011faa <_printf_float+0x392>
 8011de6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011dea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011df2:	d133      	bne.n	8011e5c <_printf_float+0x244>
 8011df4:	4a38      	ldr	r2, [pc, #224]	; (8011ed8 <_printf_float+0x2c0>)
 8011df6:	2301      	movs	r3, #1
 8011df8:	4631      	mov	r1, r6
 8011dfa:	4628      	mov	r0, r5
 8011dfc:	47b8      	blx	r7
 8011dfe:	3001      	adds	r0, #1
 8011e00:	f43f af58 	beq.w	8011cb4 <_printf_float+0x9c>
 8011e04:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	db02      	blt.n	8011e12 <_printf_float+0x1fa>
 8011e0c:	6823      	ldr	r3, [r4, #0]
 8011e0e:	07d8      	lsls	r0, r3, #31
 8011e10:	d50f      	bpl.n	8011e32 <_printf_float+0x21a>
 8011e12:	4653      	mov	r3, sl
 8011e14:	465a      	mov	r2, fp
 8011e16:	4631      	mov	r1, r6
 8011e18:	4628      	mov	r0, r5
 8011e1a:	47b8      	blx	r7
 8011e1c:	3001      	adds	r0, #1
 8011e1e:	f43f af49 	beq.w	8011cb4 <_printf_float+0x9c>
 8011e22:	f04f 0800 	mov.w	r8, #0
 8011e26:	f104 091a 	add.w	r9, r4, #26
 8011e2a:	9b08      	ldr	r3, [sp, #32]
 8011e2c:	3b01      	subs	r3, #1
 8011e2e:	4543      	cmp	r3, r8
 8011e30:	dc09      	bgt.n	8011e46 <_printf_float+0x22e>
 8011e32:	6823      	ldr	r3, [r4, #0]
 8011e34:	079b      	lsls	r3, r3, #30
 8011e36:	f100 8108 	bmi.w	801204a <_printf_float+0x432>
 8011e3a:	68e0      	ldr	r0, [r4, #12]
 8011e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e3e:	4298      	cmp	r0, r3
 8011e40:	bfb8      	it	lt
 8011e42:	4618      	movlt	r0, r3
 8011e44:	e738      	b.n	8011cb8 <_printf_float+0xa0>
 8011e46:	2301      	movs	r3, #1
 8011e48:	464a      	mov	r2, r9
 8011e4a:	4631      	mov	r1, r6
 8011e4c:	4628      	mov	r0, r5
 8011e4e:	47b8      	blx	r7
 8011e50:	3001      	adds	r0, #1
 8011e52:	f43f af2f 	beq.w	8011cb4 <_printf_float+0x9c>
 8011e56:	f108 0801 	add.w	r8, r8, #1
 8011e5a:	e7e6      	b.n	8011e2a <_printf_float+0x212>
 8011e5c:	9b07      	ldr	r3, [sp, #28]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	dc3c      	bgt.n	8011edc <_printf_float+0x2c4>
 8011e62:	4a1d      	ldr	r2, [pc, #116]	; (8011ed8 <_printf_float+0x2c0>)
 8011e64:	2301      	movs	r3, #1
 8011e66:	4631      	mov	r1, r6
 8011e68:	4628      	mov	r0, r5
 8011e6a:	47b8      	blx	r7
 8011e6c:	3001      	adds	r0, #1
 8011e6e:	f43f af21 	beq.w	8011cb4 <_printf_float+0x9c>
 8011e72:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011e76:	4313      	orrs	r3, r2
 8011e78:	d102      	bne.n	8011e80 <_printf_float+0x268>
 8011e7a:	6823      	ldr	r3, [r4, #0]
 8011e7c:	07d9      	lsls	r1, r3, #31
 8011e7e:	d5d8      	bpl.n	8011e32 <_printf_float+0x21a>
 8011e80:	4653      	mov	r3, sl
 8011e82:	465a      	mov	r2, fp
 8011e84:	4631      	mov	r1, r6
 8011e86:	4628      	mov	r0, r5
 8011e88:	47b8      	blx	r7
 8011e8a:	3001      	adds	r0, #1
 8011e8c:	f43f af12 	beq.w	8011cb4 <_printf_float+0x9c>
 8011e90:	f04f 0900 	mov.w	r9, #0
 8011e94:	f104 0a1a 	add.w	sl, r4, #26
 8011e98:	9b07      	ldr	r3, [sp, #28]
 8011e9a:	425b      	negs	r3, r3
 8011e9c:	454b      	cmp	r3, r9
 8011e9e:	dc01      	bgt.n	8011ea4 <_printf_float+0x28c>
 8011ea0:	9b08      	ldr	r3, [sp, #32]
 8011ea2:	e795      	b.n	8011dd0 <_printf_float+0x1b8>
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	4652      	mov	r2, sl
 8011ea8:	4631      	mov	r1, r6
 8011eaa:	4628      	mov	r0, r5
 8011eac:	47b8      	blx	r7
 8011eae:	3001      	adds	r0, #1
 8011eb0:	f43f af00 	beq.w	8011cb4 <_printf_float+0x9c>
 8011eb4:	f109 0901 	add.w	r9, r9, #1
 8011eb8:	e7ee      	b.n	8011e98 <_printf_float+0x280>
 8011eba:	bf00      	nop
 8011ebc:	f3af 8000 	nop.w
 8011ec0:	ffffffff 	.word	0xffffffff
 8011ec4:	7fefffff 	.word	0x7fefffff
 8011ec8:	08014ed8 	.word	0x08014ed8
 8011ecc:	08014edc 	.word	0x08014edc
 8011ed0:	08014ee4 	.word	0x08014ee4
 8011ed4:	08014ee0 	.word	0x08014ee0
 8011ed8:	08014ee8 	.word	0x08014ee8
 8011edc:	9a08      	ldr	r2, [sp, #32]
 8011ede:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	bfa8      	it	ge
 8011ee4:	461a      	movge	r2, r3
 8011ee6:	2a00      	cmp	r2, #0
 8011ee8:	4691      	mov	r9, r2
 8011eea:	dc38      	bgt.n	8011f5e <_printf_float+0x346>
 8011eec:	2300      	movs	r3, #0
 8011eee:	9305      	str	r3, [sp, #20]
 8011ef0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ef4:	f104 021a 	add.w	r2, r4, #26
 8011ef8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011efa:	9905      	ldr	r1, [sp, #20]
 8011efc:	9304      	str	r3, [sp, #16]
 8011efe:	eba3 0309 	sub.w	r3, r3, r9
 8011f02:	428b      	cmp	r3, r1
 8011f04:	dc33      	bgt.n	8011f6e <_printf_float+0x356>
 8011f06:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	db3c      	blt.n	8011f88 <_printf_float+0x370>
 8011f0e:	6823      	ldr	r3, [r4, #0]
 8011f10:	07da      	lsls	r2, r3, #31
 8011f12:	d439      	bmi.n	8011f88 <_printf_float+0x370>
 8011f14:	9a08      	ldr	r2, [sp, #32]
 8011f16:	9b04      	ldr	r3, [sp, #16]
 8011f18:	9907      	ldr	r1, [sp, #28]
 8011f1a:	1ad3      	subs	r3, r2, r3
 8011f1c:	eba2 0901 	sub.w	r9, r2, r1
 8011f20:	4599      	cmp	r9, r3
 8011f22:	bfa8      	it	ge
 8011f24:	4699      	movge	r9, r3
 8011f26:	f1b9 0f00 	cmp.w	r9, #0
 8011f2a:	dc35      	bgt.n	8011f98 <_printf_float+0x380>
 8011f2c:	f04f 0800 	mov.w	r8, #0
 8011f30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011f34:	f104 0a1a 	add.w	sl, r4, #26
 8011f38:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011f3c:	1a9b      	subs	r3, r3, r2
 8011f3e:	eba3 0309 	sub.w	r3, r3, r9
 8011f42:	4543      	cmp	r3, r8
 8011f44:	f77f af75 	ble.w	8011e32 <_printf_float+0x21a>
 8011f48:	2301      	movs	r3, #1
 8011f4a:	4652      	mov	r2, sl
 8011f4c:	4631      	mov	r1, r6
 8011f4e:	4628      	mov	r0, r5
 8011f50:	47b8      	blx	r7
 8011f52:	3001      	adds	r0, #1
 8011f54:	f43f aeae 	beq.w	8011cb4 <_printf_float+0x9c>
 8011f58:	f108 0801 	add.w	r8, r8, #1
 8011f5c:	e7ec      	b.n	8011f38 <_printf_float+0x320>
 8011f5e:	4613      	mov	r3, r2
 8011f60:	4631      	mov	r1, r6
 8011f62:	4642      	mov	r2, r8
 8011f64:	4628      	mov	r0, r5
 8011f66:	47b8      	blx	r7
 8011f68:	3001      	adds	r0, #1
 8011f6a:	d1bf      	bne.n	8011eec <_printf_float+0x2d4>
 8011f6c:	e6a2      	b.n	8011cb4 <_printf_float+0x9c>
 8011f6e:	2301      	movs	r3, #1
 8011f70:	4631      	mov	r1, r6
 8011f72:	4628      	mov	r0, r5
 8011f74:	9204      	str	r2, [sp, #16]
 8011f76:	47b8      	blx	r7
 8011f78:	3001      	adds	r0, #1
 8011f7a:	f43f ae9b 	beq.w	8011cb4 <_printf_float+0x9c>
 8011f7e:	9b05      	ldr	r3, [sp, #20]
 8011f80:	9a04      	ldr	r2, [sp, #16]
 8011f82:	3301      	adds	r3, #1
 8011f84:	9305      	str	r3, [sp, #20]
 8011f86:	e7b7      	b.n	8011ef8 <_printf_float+0x2e0>
 8011f88:	4653      	mov	r3, sl
 8011f8a:	465a      	mov	r2, fp
 8011f8c:	4631      	mov	r1, r6
 8011f8e:	4628      	mov	r0, r5
 8011f90:	47b8      	blx	r7
 8011f92:	3001      	adds	r0, #1
 8011f94:	d1be      	bne.n	8011f14 <_printf_float+0x2fc>
 8011f96:	e68d      	b.n	8011cb4 <_printf_float+0x9c>
 8011f98:	9a04      	ldr	r2, [sp, #16]
 8011f9a:	464b      	mov	r3, r9
 8011f9c:	4442      	add	r2, r8
 8011f9e:	4631      	mov	r1, r6
 8011fa0:	4628      	mov	r0, r5
 8011fa2:	47b8      	blx	r7
 8011fa4:	3001      	adds	r0, #1
 8011fa6:	d1c1      	bne.n	8011f2c <_printf_float+0x314>
 8011fa8:	e684      	b.n	8011cb4 <_printf_float+0x9c>
 8011faa:	9a08      	ldr	r2, [sp, #32]
 8011fac:	2a01      	cmp	r2, #1
 8011fae:	dc01      	bgt.n	8011fb4 <_printf_float+0x39c>
 8011fb0:	07db      	lsls	r3, r3, #31
 8011fb2:	d537      	bpl.n	8012024 <_printf_float+0x40c>
 8011fb4:	2301      	movs	r3, #1
 8011fb6:	4642      	mov	r2, r8
 8011fb8:	4631      	mov	r1, r6
 8011fba:	4628      	mov	r0, r5
 8011fbc:	47b8      	blx	r7
 8011fbe:	3001      	adds	r0, #1
 8011fc0:	f43f ae78 	beq.w	8011cb4 <_printf_float+0x9c>
 8011fc4:	4653      	mov	r3, sl
 8011fc6:	465a      	mov	r2, fp
 8011fc8:	4631      	mov	r1, r6
 8011fca:	4628      	mov	r0, r5
 8011fcc:	47b8      	blx	r7
 8011fce:	3001      	adds	r0, #1
 8011fd0:	f43f ae70 	beq.w	8011cb4 <_printf_float+0x9c>
 8011fd4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011fd8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fe0:	d01b      	beq.n	801201a <_printf_float+0x402>
 8011fe2:	9b08      	ldr	r3, [sp, #32]
 8011fe4:	f108 0201 	add.w	r2, r8, #1
 8011fe8:	3b01      	subs	r3, #1
 8011fea:	4631      	mov	r1, r6
 8011fec:	4628      	mov	r0, r5
 8011fee:	47b8      	blx	r7
 8011ff0:	3001      	adds	r0, #1
 8011ff2:	d10e      	bne.n	8012012 <_printf_float+0x3fa>
 8011ff4:	e65e      	b.n	8011cb4 <_printf_float+0x9c>
 8011ff6:	2301      	movs	r3, #1
 8011ff8:	464a      	mov	r2, r9
 8011ffa:	4631      	mov	r1, r6
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	47b8      	blx	r7
 8012000:	3001      	adds	r0, #1
 8012002:	f43f ae57 	beq.w	8011cb4 <_printf_float+0x9c>
 8012006:	f108 0801 	add.w	r8, r8, #1
 801200a:	9b08      	ldr	r3, [sp, #32]
 801200c:	3b01      	subs	r3, #1
 801200e:	4543      	cmp	r3, r8
 8012010:	dcf1      	bgt.n	8011ff6 <_printf_float+0x3de>
 8012012:	9b04      	ldr	r3, [sp, #16]
 8012014:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012018:	e6db      	b.n	8011dd2 <_printf_float+0x1ba>
 801201a:	f04f 0800 	mov.w	r8, #0
 801201e:	f104 091a 	add.w	r9, r4, #26
 8012022:	e7f2      	b.n	801200a <_printf_float+0x3f2>
 8012024:	2301      	movs	r3, #1
 8012026:	4642      	mov	r2, r8
 8012028:	e7df      	b.n	8011fea <_printf_float+0x3d2>
 801202a:	2301      	movs	r3, #1
 801202c:	464a      	mov	r2, r9
 801202e:	4631      	mov	r1, r6
 8012030:	4628      	mov	r0, r5
 8012032:	47b8      	blx	r7
 8012034:	3001      	adds	r0, #1
 8012036:	f43f ae3d 	beq.w	8011cb4 <_printf_float+0x9c>
 801203a:	f108 0801 	add.w	r8, r8, #1
 801203e:	68e3      	ldr	r3, [r4, #12]
 8012040:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012042:	1a5b      	subs	r3, r3, r1
 8012044:	4543      	cmp	r3, r8
 8012046:	dcf0      	bgt.n	801202a <_printf_float+0x412>
 8012048:	e6f7      	b.n	8011e3a <_printf_float+0x222>
 801204a:	f04f 0800 	mov.w	r8, #0
 801204e:	f104 0919 	add.w	r9, r4, #25
 8012052:	e7f4      	b.n	801203e <_printf_float+0x426>

08012054 <_printf_common>:
 8012054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012058:	4616      	mov	r6, r2
 801205a:	4699      	mov	r9, r3
 801205c:	688a      	ldr	r2, [r1, #8]
 801205e:	690b      	ldr	r3, [r1, #16]
 8012060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012064:	4293      	cmp	r3, r2
 8012066:	bfb8      	it	lt
 8012068:	4613      	movlt	r3, r2
 801206a:	6033      	str	r3, [r6, #0]
 801206c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012070:	4607      	mov	r7, r0
 8012072:	460c      	mov	r4, r1
 8012074:	b10a      	cbz	r2, 801207a <_printf_common+0x26>
 8012076:	3301      	adds	r3, #1
 8012078:	6033      	str	r3, [r6, #0]
 801207a:	6823      	ldr	r3, [r4, #0]
 801207c:	0699      	lsls	r1, r3, #26
 801207e:	bf42      	ittt	mi
 8012080:	6833      	ldrmi	r3, [r6, #0]
 8012082:	3302      	addmi	r3, #2
 8012084:	6033      	strmi	r3, [r6, #0]
 8012086:	6825      	ldr	r5, [r4, #0]
 8012088:	f015 0506 	ands.w	r5, r5, #6
 801208c:	d106      	bne.n	801209c <_printf_common+0x48>
 801208e:	f104 0a19 	add.w	sl, r4, #25
 8012092:	68e3      	ldr	r3, [r4, #12]
 8012094:	6832      	ldr	r2, [r6, #0]
 8012096:	1a9b      	subs	r3, r3, r2
 8012098:	42ab      	cmp	r3, r5
 801209a:	dc26      	bgt.n	80120ea <_printf_common+0x96>
 801209c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80120a0:	1e13      	subs	r3, r2, #0
 80120a2:	6822      	ldr	r2, [r4, #0]
 80120a4:	bf18      	it	ne
 80120a6:	2301      	movne	r3, #1
 80120a8:	0692      	lsls	r2, r2, #26
 80120aa:	d42b      	bmi.n	8012104 <_printf_common+0xb0>
 80120ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80120b0:	4649      	mov	r1, r9
 80120b2:	4638      	mov	r0, r7
 80120b4:	47c0      	blx	r8
 80120b6:	3001      	adds	r0, #1
 80120b8:	d01e      	beq.n	80120f8 <_printf_common+0xa4>
 80120ba:	6823      	ldr	r3, [r4, #0]
 80120bc:	68e5      	ldr	r5, [r4, #12]
 80120be:	6832      	ldr	r2, [r6, #0]
 80120c0:	f003 0306 	and.w	r3, r3, #6
 80120c4:	2b04      	cmp	r3, #4
 80120c6:	bf08      	it	eq
 80120c8:	1aad      	subeq	r5, r5, r2
 80120ca:	68a3      	ldr	r3, [r4, #8]
 80120cc:	6922      	ldr	r2, [r4, #16]
 80120ce:	bf0c      	ite	eq
 80120d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80120d4:	2500      	movne	r5, #0
 80120d6:	4293      	cmp	r3, r2
 80120d8:	bfc4      	itt	gt
 80120da:	1a9b      	subgt	r3, r3, r2
 80120dc:	18ed      	addgt	r5, r5, r3
 80120de:	2600      	movs	r6, #0
 80120e0:	341a      	adds	r4, #26
 80120e2:	42b5      	cmp	r5, r6
 80120e4:	d11a      	bne.n	801211c <_printf_common+0xc8>
 80120e6:	2000      	movs	r0, #0
 80120e8:	e008      	b.n	80120fc <_printf_common+0xa8>
 80120ea:	2301      	movs	r3, #1
 80120ec:	4652      	mov	r2, sl
 80120ee:	4649      	mov	r1, r9
 80120f0:	4638      	mov	r0, r7
 80120f2:	47c0      	blx	r8
 80120f4:	3001      	adds	r0, #1
 80120f6:	d103      	bne.n	8012100 <_printf_common+0xac>
 80120f8:	f04f 30ff 	mov.w	r0, #4294967295
 80120fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012100:	3501      	adds	r5, #1
 8012102:	e7c6      	b.n	8012092 <_printf_common+0x3e>
 8012104:	18e1      	adds	r1, r4, r3
 8012106:	1c5a      	adds	r2, r3, #1
 8012108:	2030      	movs	r0, #48	; 0x30
 801210a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801210e:	4422      	add	r2, r4
 8012110:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012118:	3302      	adds	r3, #2
 801211a:	e7c7      	b.n	80120ac <_printf_common+0x58>
 801211c:	2301      	movs	r3, #1
 801211e:	4622      	mov	r2, r4
 8012120:	4649      	mov	r1, r9
 8012122:	4638      	mov	r0, r7
 8012124:	47c0      	blx	r8
 8012126:	3001      	adds	r0, #1
 8012128:	d0e6      	beq.n	80120f8 <_printf_common+0xa4>
 801212a:	3601      	adds	r6, #1
 801212c:	e7d9      	b.n	80120e2 <_printf_common+0x8e>
	...

08012130 <_printf_i>:
 8012130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012134:	460c      	mov	r4, r1
 8012136:	4691      	mov	r9, r2
 8012138:	7e27      	ldrb	r7, [r4, #24]
 801213a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801213c:	2f78      	cmp	r7, #120	; 0x78
 801213e:	4680      	mov	r8, r0
 8012140:	469a      	mov	sl, r3
 8012142:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012146:	d807      	bhi.n	8012158 <_printf_i+0x28>
 8012148:	2f62      	cmp	r7, #98	; 0x62
 801214a:	d80a      	bhi.n	8012162 <_printf_i+0x32>
 801214c:	2f00      	cmp	r7, #0
 801214e:	f000 80d8 	beq.w	8012302 <_printf_i+0x1d2>
 8012152:	2f58      	cmp	r7, #88	; 0x58
 8012154:	f000 80a3 	beq.w	801229e <_printf_i+0x16e>
 8012158:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801215c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012160:	e03a      	b.n	80121d8 <_printf_i+0xa8>
 8012162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012166:	2b15      	cmp	r3, #21
 8012168:	d8f6      	bhi.n	8012158 <_printf_i+0x28>
 801216a:	a001      	add	r0, pc, #4	; (adr r0, 8012170 <_printf_i+0x40>)
 801216c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012170:	080121c9 	.word	0x080121c9
 8012174:	080121dd 	.word	0x080121dd
 8012178:	08012159 	.word	0x08012159
 801217c:	08012159 	.word	0x08012159
 8012180:	08012159 	.word	0x08012159
 8012184:	08012159 	.word	0x08012159
 8012188:	080121dd 	.word	0x080121dd
 801218c:	08012159 	.word	0x08012159
 8012190:	08012159 	.word	0x08012159
 8012194:	08012159 	.word	0x08012159
 8012198:	08012159 	.word	0x08012159
 801219c:	080122e9 	.word	0x080122e9
 80121a0:	0801220d 	.word	0x0801220d
 80121a4:	080122cb 	.word	0x080122cb
 80121a8:	08012159 	.word	0x08012159
 80121ac:	08012159 	.word	0x08012159
 80121b0:	0801230b 	.word	0x0801230b
 80121b4:	08012159 	.word	0x08012159
 80121b8:	0801220d 	.word	0x0801220d
 80121bc:	08012159 	.word	0x08012159
 80121c0:	08012159 	.word	0x08012159
 80121c4:	080122d3 	.word	0x080122d3
 80121c8:	680b      	ldr	r3, [r1, #0]
 80121ca:	1d1a      	adds	r2, r3, #4
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	600a      	str	r2, [r1, #0]
 80121d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80121d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80121d8:	2301      	movs	r3, #1
 80121da:	e0a3      	b.n	8012324 <_printf_i+0x1f4>
 80121dc:	6825      	ldr	r5, [r4, #0]
 80121de:	6808      	ldr	r0, [r1, #0]
 80121e0:	062e      	lsls	r6, r5, #24
 80121e2:	f100 0304 	add.w	r3, r0, #4
 80121e6:	d50a      	bpl.n	80121fe <_printf_i+0xce>
 80121e8:	6805      	ldr	r5, [r0, #0]
 80121ea:	600b      	str	r3, [r1, #0]
 80121ec:	2d00      	cmp	r5, #0
 80121ee:	da03      	bge.n	80121f8 <_printf_i+0xc8>
 80121f0:	232d      	movs	r3, #45	; 0x2d
 80121f2:	426d      	negs	r5, r5
 80121f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121f8:	485e      	ldr	r0, [pc, #376]	; (8012374 <_printf_i+0x244>)
 80121fa:	230a      	movs	r3, #10
 80121fc:	e019      	b.n	8012232 <_printf_i+0x102>
 80121fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012202:	6805      	ldr	r5, [r0, #0]
 8012204:	600b      	str	r3, [r1, #0]
 8012206:	bf18      	it	ne
 8012208:	b22d      	sxthne	r5, r5
 801220a:	e7ef      	b.n	80121ec <_printf_i+0xbc>
 801220c:	680b      	ldr	r3, [r1, #0]
 801220e:	6825      	ldr	r5, [r4, #0]
 8012210:	1d18      	adds	r0, r3, #4
 8012212:	6008      	str	r0, [r1, #0]
 8012214:	0628      	lsls	r0, r5, #24
 8012216:	d501      	bpl.n	801221c <_printf_i+0xec>
 8012218:	681d      	ldr	r5, [r3, #0]
 801221a:	e002      	b.n	8012222 <_printf_i+0xf2>
 801221c:	0669      	lsls	r1, r5, #25
 801221e:	d5fb      	bpl.n	8012218 <_printf_i+0xe8>
 8012220:	881d      	ldrh	r5, [r3, #0]
 8012222:	4854      	ldr	r0, [pc, #336]	; (8012374 <_printf_i+0x244>)
 8012224:	2f6f      	cmp	r7, #111	; 0x6f
 8012226:	bf0c      	ite	eq
 8012228:	2308      	moveq	r3, #8
 801222a:	230a      	movne	r3, #10
 801222c:	2100      	movs	r1, #0
 801222e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012232:	6866      	ldr	r6, [r4, #4]
 8012234:	60a6      	str	r6, [r4, #8]
 8012236:	2e00      	cmp	r6, #0
 8012238:	bfa2      	ittt	ge
 801223a:	6821      	ldrge	r1, [r4, #0]
 801223c:	f021 0104 	bicge.w	r1, r1, #4
 8012240:	6021      	strge	r1, [r4, #0]
 8012242:	b90d      	cbnz	r5, 8012248 <_printf_i+0x118>
 8012244:	2e00      	cmp	r6, #0
 8012246:	d04d      	beq.n	80122e4 <_printf_i+0x1b4>
 8012248:	4616      	mov	r6, r2
 801224a:	fbb5 f1f3 	udiv	r1, r5, r3
 801224e:	fb03 5711 	mls	r7, r3, r1, r5
 8012252:	5dc7      	ldrb	r7, [r0, r7]
 8012254:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012258:	462f      	mov	r7, r5
 801225a:	42bb      	cmp	r3, r7
 801225c:	460d      	mov	r5, r1
 801225e:	d9f4      	bls.n	801224a <_printf_i+0x11a>
 8012260:	2b08      	cmp	r3, #8
 8012262:	d10b      	bne.n	801227c <_printf_i+0x14c>
 8012264:	6823      	ldr	r3, [r4, #0]
 8012266:	07df      	lsls	r7, r3, #31
 8012268:	d508      	bpl.n	801227c <_printf_i+0x14c>
 801226a:	6923      	ldr	r3, [r4, #16]
 801226c:	6861      	ldr	r1, [r4, #4]
 801226e:	4299      	cmp	r1, r3
 8012270:	bfde      	ittt	le
 8012272:	2330      	movle	r3, #48	; 0x30
 8012274:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012278:	f106 36ff 	addle.w	r6, r6, #4294967295
 801227c:	1b92      	subs	r2, r2, r6
 801227e:	6122      	str	r2, [r4, #16]
 8012280:	f8cd a000 	str.w	sl, [sp]
 8012284:	464b      	mov	r3, r9
 8012286:	aa03      	add	r2, sp, #12
 8012288:	4621      	mov	r1, r4
 801228a:	4640      	mov	r0, r8
 801228c:	f7ff fee2 	bl	8012054 <_printf_common>
 8012290:	3001      	adds	r0, #1
 8012292:	d14c      	bne.n	801232e <_printf_i+0x1fe>
 8012294:	f04f 30ff 	mov.w	r0, #4294967295
 8012298:	b004      	add	sp, #16
 801229a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801229e:	4835      	ldr	r0, [pc, #212]	; (8012374 <_printf_i+0x244>)
 80122a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80122a4:	6823      	ldr	r3, [r4, #0]
 80122a6:	680e      	ldr	r6, [r1, #0]
 80122a8:	061f      	lsls	r7, r3, #24
 80122aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80122ae:	600e      	str	r6, [r1, #0]
 80122b0:	d514      	bpl.n	80122dc <_printf_i+0x1ac>
 80122b2:	07d9      	lsls	r1, r3, #31
 80122b4:	bf44      	itt	mi
 80122b6:	f043 0320 	orrmi.w	r3, r3, #32
 80122ba:	6023      	strmi	r3, [r4, #0]
 80122bc:	b91d      	cbnz	r5, 80122c6 <_printf_i+0x196>
 80122be:	6823      	ldr	r3, [r4, #0]
 80122c0:	f023 0320 	bic.w	r3, r3, #32
 80122c4:	6023      	str	r3, [r4, #0]
 80122c6:	2310      	movs	r3, #16
 80122c8:	e7b0      	b.n	801222c <_printf_i+0xfc>
 80122ca:	6823      	ldr	r3, [r4, #0]
 80122cc:	f043 0320 	orr.w	r3, r3, #32
 80122d0:	6023      	str	r3, [r4, #0]
 80122d2:	2378      	movs	r3, #120	; 0x78
 80122d4:	4828      	ldr	r0, [pc, #160]	; (8012378 <_printf_i+0x248>)
 80122d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80122da:	e7e3      	b.n	80122a4 <_printf_i+0x174>
 80122dc:	065e      	lsls	r6, r3, #25
 80122de:	bf48      	it	mi
 80122e0:	b2ad      	uxthmi	r5, r5
 80122e2:	e7e6      	b.n	80122b2 <_printf_i+0x182>
 80122e4:	4616      	mov	r6, r2
 80122e6:	e7bb      	b.n	8012260 <_printf_i+0x130>
 80122e8:	680b      	ldr	r3, [r1, #0]
 80122ea:	6826      	ldr	r6, [r4, #0]
 80122ec:	6960      	ldr	r0, [r4, #20]
 80122ee:	1d1d      	adds	r5, r3, #4
 80122f0:	600d      	str	r5, [r1, #0]
 80122f2:	0635      	lsls	r5, r6, #24
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	d501      	bpl.n	80122fc <_printf_i+0x1cc>
 80122f8:	6018      	str	r0, [r3, #0]
 80122fa:	e002      	b.n	8012302 <_printf_i+0x1d2>
 80122fc:	0671      	lsls	r1, r6, #25
 80122fe:	d5fb      	bpl.n	80122f8 <_printf_i+0x1c8>
 8012300:	8018      	strh	r0, [r3, #0]
 8012302:	2300      	movs	r3, #0
 8012304:	6123      	str	r3, [r4, #16]
 8012306:	4616      	mov	r6, r2
 8012308:	e7ba      	b.n	8012280 <_printf_i+0x150>
 801230a:	680b      	ldr	r3, [r1, #0]
 801230c:	1d1a      	adds	r2, r3, #4
 801230e:	600a      	str	r2, [r1, #0]
 8012310:	681e      	ldr	r6, [r3, #0]
 8012312:	6862      	ldr	r2, [r4, #4]
 8012314:	2100      	movs	r1, #0
 8012316:	4630      	mov	r0, r6
 8012318:	f7ed ffea 	bl	80002f0 <memchr>
 801231c:	b108      	cbz	r0, 8012322 <_printf_i+0x1f2>
 801231e:	1b80      	subs	r0, r0, r6
 8012320:	6060      	str	r0, [r4, #4]
 8012322:	6863      	ldr	r3, [r4, #4]
 8012324:	6123      	str	r3, [r4, #16]
 8012326:	2300      	movs	r3, #0
 8012328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801232c:	e7a8      	b.n	8012280 <_printf_i+0x150>
 801232e:	6923      	ldr	r3, [r4, #16]
 8012330:	4632      	mov	r2, r6
 8012332:	4649      	mov	r1, r9
 8012334:	4640      	mov	r0, r8
 8012336:	47d0      	blx	sl
 8012338:	3001      	adds	r0, #1
 801233a:	d0ab      	beq.n	8012294 <_printf_i+0x164>
 801233c:	6823      	ldr	r3, [r4, #0]
 801233e:	079b      	lsls	r3, r3, #30
 8012340:	d413      	bmi.n	801236a <_printf_i+0x23a>
 8012342:	68e0      	ldr	r0, [r4, #12]
 8012344:	9b03      	ldr	r3, [sp, #12]
 8012346:	4298      	cmp	r0, r3
 8012348:	bfb8      	it	lt
 801234a:	4618      	movlt	r0, r3
 801234c:	e7a4      	b.n	8012298 <_printf_i+0x168>
 801234e:	2301      	movs	r3, #1
 8012350:	4632      	mov	r2, r6
 8012352:	4649      	mov	r1, r9
 8012354:	4640      	mov	r0, r8
 8012356:	47d0      	blx	sl
 8012358:	3001      	adds	r0, #1
 801235a:	d09b      	beq.n	8012294 <_printf_i+0x164>
 801235c:	3501      	adds	r5, #1
 801235e:	68e3      	ldr	r3, [r4, #12]
 8012360:	9903      	ldr	r1, [sp, #12]
 8012362:	1a5b      	subs	r3, r3, r1
 8012364:	42ab      	cmp	r3, r5
 8012366:	dcf2      	bgt.n	801234e <_printf_i+0x21e>
 8012368:	e7eb      	b.n	8012342 <_printf_i+0x212>
 801236a:	2500      	movs	r5, #0
 801236c:	f104 0619 	add.w	r6, r4, #25
 8012370:	e7f5      	b.n	801235e <_printf_i+0x22e>
 8012372:	bf00      	nop
 8012374:	08014eea 	.word	0x08014eea
 8012378:	08014efb 	.word	0x08014efb

0801237c <iprintf>:
 801237c:	b40f      	push	{r0, r1, r2, r3}
 801237e:	4b0a      	ldr	r3, [pc, #40]	; (80123a8 <iprintf+0x2c>)
 8012380:	b513      	push	{r0, r1, r4, lr}
 8012382:	681c      	ldr	r4, [r3, #0]
 8012384:	b124      	cbz	r4, 8012390 <iprintf+0x14>
 8012386:	69a3      	ldr	r3, [r4, #24]
 8012388:	b913      	cbnz	r3, 8012390 <iprintf+0x14>
 801238a:	4620      	mov	r0, r4
 801238c:	f001 f86c 	bl	8013468 <__sinit>
 8012390:	ab05      	add	r3, sp, #20
 8012392:	9a04      	ldr	r2, [sp, #16]
 8012394:	68a1      	ldr	r1, [r4, #8]
 8012396:	9301      	str	r3, [sp, #4]
 8012398:	4620      	mov	r0, r4
 801239a:	f001 fde7 	bl	8013f6c <_vfiprintf_r>
 801239e:	b002      	add	sp, #8
 80123a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123a4:	b004      	add	sp, #16
 80123a6:	4770      	bx	lr
 80123a8:	24000024 	.word	0x24000024

080123ac <_puts_r>:
 80123ac:	b570      	push	{r4, r5, r6, lr}
 80123ae:	460e      	mov	r6, r1
 80123b0:	4605      	mov	r5, r0
 80123b2:	b118      	cbz	r0, 80123bc <_puts_r+0x10>
 80123b4:	6983      	ldr	r3, [r0, #24]
 80123b6:	b90b      	cbnz	r3, 80123bc <_puts_r+0x10>
 80123b8:	f001 f856 	bl	8013468 <__sinit>
 80123bc:	69ab      	ldr	r3, [r5, #24]
 80123be:	68ac      	ldr	r4, [r5, #8]
 80123c0:	b913      	cbnz	r3, 80123c8 <_puts_r+0x1c>
 80123c2:	4628      	mov	r0, r5
 80123c4:	f001 f850 	bl	8013468 <__sinit>
 80123c8:	4b2c      	ldr	r3, [pc, #176]	; (801247c <_puts_r+0xd0>)
 80123ca:	429c      	cmp	r4, r3
 80123cc:	d120      	bne.n	8012410 <_puts_r+0x64>
 80123ce:	686c      	ldr	r4, [r5, #4]
 80123d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123d2:	07db      	lsls	r3, r3, #31
 80123d4:	d405      	bmi.n	80123e2 <_puts_r+0x36>
 80123d6:	89a3      	ldrh	r3, [r4, #12]
 80123d8:	0598      	lsls	r0, r3, #22
 80123da:	d402      	bmi.n	80123e2 <_puts_r+0x36>
 80123dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80123de:	f001 f8e6 	bl	80135ae <__retarget_lock_acquire_recursive>
 80123e2:	89a3      	ldrh	r3, [r4, #12]
 80123e4:	0719      	lsls	r1, r3, #28
 80123e6:	d51d      	bpl.n	8012424 <_puts_r+0x78>
 80123e8:	6923      	ldr	r3, [r4, #16]
 80123ea:	b1db      	cbz	r3, 8012424 <_puts_r+0x78>
 80123ec:	3e01      	subs	r6, #1
 80123ee:	68a3      	ldr	r3, [r4, #8]
 80123f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80123f4:	3b01      	subs	r3, #1
 80123f6:	60a3      	str	r3, [r4, #8]
 80123f8:	bb39      	cbnz	r1, 801244a <_puts_r+0x9e>
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	da38      	bge.n	8012470 <_puts_r+0xc4>
 80123fe:	4622      	mov	r2, r4
 8012400:	210a      	movs	r1, #10
 8012402:	4628      	mov	r0, r5
 8012404:	f000 f848 	bl	8012498 <__swbuf_r>
 8012408:	3001      	adds	r0, #1
 801240a:	d011      	beq.n	8012430 <_puts_r+0x84>
 801240c:	250a      	movs	r5, #10
 801240e:	e011      	b.n	8012434 <_puts_r+0x88>
 8012410:	4b1b      	ldr	r3, [pc, #108]	; (8012480 <_puts_r+0xd4>)
 8012412:	429c      	cmp	r4, r3
 8012414:	d101      	bne.n	801241a <_puts_r+0x6e>
 8012416:	68ac      	ldr	r4, [r5, #8]
 8012418:	e7da      	b.n	80123d0 <_puts_r+0x24>
 801241a:	4b1a      	ldr	r3, [pc, #104]	; (8012484 <_puts_r+0xd8>)
 801241c:	429c      	cmp	r4, r3
 801241e:	bf08      	it	eq
 8012420:	68ec      	ldreq	r4, [r5, #12]
 8012422:	e7d5      	b.n	80123d0 <_puts_r+0x24>
 8012424:	4621      	mov	r1, r4
 8012426:	4628      	mov	r0, r5
 8012428:	f000 f888 	bl	801253c <__swsetup_r>
 801242c:	2800      	cmp	r0, #0
 801242e:	d0dd      	beq.n	80123ec <_puts_r+0x40>
 8012430:	f04f 35ff 	mov.w	r5, #4294967295
 8012434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012436:	07da      	lsls	r2, r3, #31
 8012438:	d405      	bmi.n	8012446 <_puts_r+0x9a>
 801243a:	89a3      	ldrh	r3, [r4, #12]
 801243c:	059b      	lsls	r3, r3, #22
 801243e:	d402      	bmi.n	8012446 <_puts_r+0x9a>
 8012440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012442:	f001 f8b5 	bl	80135b0 <__retarget_lock_release_recursive>
 8012446:	4628      	mov	r0, r5
 8012448:	bd70      	pop	{r4, r5, r6, pc}
 801244a:	2b00      	cmp	r3, #0
 801244c:	da04      	bge.n	8012458 <_puts_r+0xac>
 801244e:	69a2      	ldr	r2, [r4, #24]
 8012450:	429a      	cmp	r2, r3
 8012452:	dc06      	bgt.n	8012462 <_puts_r+0xb6>
 8012454:	290a      	cmp	r1, #10
 8012456:	d004      	beq.n	8012462 <_puts_r+0xb6>
 8012458:	6823      	ldr	r3, [r4, #0]
 801245a:	1c5a      	adds	r2, r3, #1
 801245c:	6022      	str	r2, [r4, #0]
 801245e:	7019      	strb	r1, [r3, #0]
 8012460:	e7c5      	b.n	80123ee <_puts_r+0x42>
 8012462:	4622      	mov	r2, r4
 8012464:	4628      	mov	r0, r5
 8012466:	f000 f817 	bl	8012498 <__swbuf_r>
 801246a:	3001      	adds	r0, #1
 801246c:	d1bf      	bne.n	80123ee <_puts_r+0x42>
 801246e:	e7df      	b.n	8012430 <_puts_r+0x84>
 8012470:	6823      	ldr	r3, [r4, #0]
 8012472:	250a      	movs	r5, #10
 8012474:	1c5a      	adds	r2, r3, #1
 8012476:	6022      	str	r2, [r4, #0]
 8012478:	701d      	strb	r5, [r3, #0]
 801247a:	e7db      	b.n	8012434 <_puts_r+0x88>
 801247c:	08014fc0 	.word	0x08014fc0
 8012480:	08014fe0 	.word	0x08014fe0
 8012484:	08014fa0 	.word	0x08014fa0

08012488 <puts>:
 8012488:	4b02      	ldr	r3, [pc, #8]	; (8012494 <puts+0xc>)
 801248a:	4601      	mov	r1, r0
 801248c:	6818      	ldr	r0, [r3, #0]
 801248e:	f7ff bf8d 	b.w	80123ac <_puts_r>
 8012492:	bf00      	nop
 8012494:	24000024 	.word	0x24000024

08012498 <__swbuf_r>:
 8012498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801249a:	460e      	mov	r6, r1
 801249c:	4614      	mov	r4, r2
 801249e:	4605      	mov	r5, r0
 80124a0:	b118      	cbz	r0, 80124aa <__swbuf_r+0x12>
 80124a2:	6983      	ldr	r3, [r0, #24]
 80124a4:	b90b      	cbnz	r3, 80124aa <__swbuf_r+0x12>
 80124a6:	f000 ffdf 	bl	8013468 <__sinit>
 80124aa:	4b21      	ldr	r3, [pc, #132]	; (8012530 <__swbuf_r+0x98>)
 80124ac:	429c      	cmp	r4, r3
 80124ae:	d12b      	bne.n	8012508 <__swbuf_r+0x70>
 80124b0:	686c      	ldr	r4, [r5, #4]
 80124b2:	69a3      	ldr	r3, [r4, #24]
 80124b4:	60a3      	str	r3, [r4, #8]
 80124b6:	89a3      	ldrh	r3, [r4, #12]
 80124b8:	071a      	lsls	r2, r3, #28
 80124ba:	d52f      	bpl.n	801251c <__swbuf_r+0x84>
 80124bc:	6923      	ldr	r3, [r4, #16]
 80124be:	b36b      	cbz	r3, 801251c <__swbuf_r+0x84>
 80124c0:	6923      	ldr	r3, [r4, #16]
 80124c2:	6820      	ldr	r0, [r4, #0]
 80124c4:	1ac0      	subs	r0, r0, r3
 80124c6:	6963      	ldr	r3, [r4, #20]
 80124c8:	b2f6      	uxtb	r6, r6
 80124ca:	4283      	cmp	r3, r0
 80124cc:	4637      	mov	r7, r6
 80124ce:	dc04      	bgt.n	80124da <__swbuf_r+0x42>
 80124d0:	4621      	mov	r1, r4
 80124d2:	4628      	mov	r0, r5
 80124d4:	f000 ff34 	bl	8013340 <_fflush_r>
 80124d8:	bb30      	cbnz	r0, 8012528 <__swbuf_r+0x90>
 80124da:	68a3      	ldr	r3, [r4, #8]
 80124dc:	3b01      	subs	r3, #1
 80124de:	60a3      	str	r3, [r4, #8]
 80124e0:	6823      	ldr	r3, [r4, #0]
 80124e2:	1c5a      	adds	r2, r3, #1
 80124e4:	6022      	str	r2, [r4, #0]
 80124e6:	701e      	strb	r6, [r3, #0]
 80124e8:	6963      	ldr	r3, [r4, #20]
 80124ea:	3001      	adds	r0, #1
 80124ec:	4283      	cmp	r3, r0
 80124ee:	d004      	beq.n	80124fa <__swbuf_r+0x62>
 80124f0:	89a3      	ldrh	r3, [r4, #12]
 80124f2:	07db      	lsls	r3, r3, #31
 80124f4:	d506      	bpl.n	8012504 <__swbuf_r+0x6c>
 80124f6:	2e0a      	cmp	r6, #10
 80124f8:	d104      	bne.n	8012504 <__swbuf_r+0x6c>
 80124fa:	4621      	mov	r1, r4
 80124fc:	4628      	mov	r0, r5
 80124fe:	f000 ff1f 	bl	8013340 <_fflush_r>
 8012502:	b988      	cbnz	r0, 8012528 <__swbuf_r+0x90>
 8012504:	4638      	mov	r0, r7
 8012506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012508:	4b0a      	ldr	r3, [pc, #40]	; (8012534 <__swbuf_r+0x9c>)
 801250a:	429c      	cmp	r4, r3
 801250c:	d101      	bne.n	8012512 <__swbuf_r+0x7a>
 801250e:	68ac      	ldr	r4, [r5, #8]
 8012510:	e7cf      	b.n	80124b2 <__swbuf_r+0x1a>
 8012512:	4b09      	ldr	r3, [pc, #36]	; (8012538 <__swbuf_r+0xa0>)
 8012514:	429c      	cmp	r4, r3
 8012516:	bf08      	it	eq
 8012518:	68ec      	ldreq	r4, [r5, #12]
 801251a:	e7ca      	b.n	80124b2 <__swbuf_r+0x1a>
 801251c:	4621      	mov	r1, r4
 801251e:	4628      	mov	r0, r5
 8012520:	f000 f80c 	bl	801253c <__swsetup_r>
 8012524:	2800      	cmp	r0, #0
 8012526:	d0cb      	beq.n	80124c0 <__swbuf_r+0x28>
 8012528:	f04f 37ff 	mov.w	r7, #4294967295
 801252c:	e7ea      	b.n	8012504 <__swbuf_r+0x6c>
 801252e:	bf00      	nop
 8012530:	08014fc0 	.word	0x08014fc0
 8012534:	08014fe0 	.word	0x08014fe0
 8012538:	08014fa0 	.word	0x08014fa0

0801253c <__swsetup_r>:
 801253c:	4b32      	ldr	r3, [pc, #200]	; (8012608 <__swsetup_r+0xcc>)
 801253e:	b570      	push	{r4, r5, r6, lr}
 8012540:	681d      	ldr	r5, [r3, #0]
 8012542:	4606      	mov	r6, r0
 8012544:	460c      	mov	r4, r1
 8012546:	b125      	cbz	r5, 8012552 <__swsetup_r+0x16>
 8012548:	69ab      	ldr	r3, [r5, #24]
 801254a:	b913      	cbnz	r3, 8012552 <__swsetup_r+0x16>
 801254c:	4628      	mov	r0, r5
 801254e:	f000 ff8b 	bl	8013468 <__sinit>
 8012552:	4b2e      	ldr	r3, [pc, #184]	; (801260c <__swsetup_r+0xd0>)
 8012554:	429c      	cmp	r4, r3
 8012556:	d10f      	bne.n	8012578 <__swsetup_r+0x3c>
 8012558:	686c      	ldr	r4, [r5, #4]
 801255a:	89a3      	ldrh	r3, [r4, #12]
 801255c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012560:	0719      	lsls	r1, r3, #28
 8012562:	d42c      	bmi.n	80125be <__swsetup_r+0x82>
 8012564:	06dd      	lsls	r5, r3, #27
 8012566:	d411      	bmi.n	801258c <__swsetup_r+0x50>
 8012568:	2309      	movs	r3, #9
 801256a:	6033      	str	r3, [r6, #0]
 801256c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012570:	81a3      	strh	r3, [r4, #12]
 8012572:	f04f 30ff 	mov.w	r0, #4294967295
 8012576:	e03e      	b.n	80125f6 <__swsetup_r+0xba>
 8012578:	4b25      	ldr	r3, [pc, #148]	; (8012610 <__swsetup_r+0xd4>)
 801257a:	429c      	cmp	r4, r3
 801257c:	d101      	bne.n	8012582 <__swsetup_r+0x46>
 801257e:	68ac      	ldr	r4, [r5, #8]
 8012580:	e7eb      	b.n	801255a <__swsetup_r+0x1e>
 8012582:	4b24      	ldr	r3, [pc, #144]	; (8012614 <__swsetup_r+0xd8>)
 8012584:	429c      	cmp	r4, r3
 8012586:	bf08      	it	eq
 8012588:	68ec      	ldreq	r4, [r5, #12]
 801258a:	e7e6      	b.n	801255a <__swsetup_r+0x1e>
 801258c:	0758      	lsls	r0, r3, #29
 801258e:	d512      	bpl.n	80125b6 <__swsetup_r+0x7a>
 8012590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012592:	b141      	cbz	r1, 80125a6 <__swsetup_r+0x6a>
 8012594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012598:	4299      	cmp	r1, r3
 801259a:	d002      	beq.n	80125a2 <__swsetup_r+0x66>
 801259c:	4630      	mov	r0, r6
 801259e:	f001 fc11 	bl	8013dc4 <_free_r>
 80125a2:	2300      	movs	r3, #0
 80125a4:	6363      	str	r3, [r4, #52]	; 0x34
 80125a6:	89a3      	ldrh	r3, [r4, #12]
 80125a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80125ac:	81a3      	strh	r3, [r4, #12]
 80125ae:	2300      	movs	r3, #0
 80125b0:	6063      	str	r3, [r4, #4]
 80125b2:	6923      	ldr	r3, [r4, #16]
 80125b4:	6023      	str	r3, [r4, #0]
 80125b6:	89a3      	ldrh	r3, [r4, #12]
 80125b8:	f043 0308 	orr.w	r3, r3, #8
 80125bc:	81a3      	strh	r3, [r4, #12]
 80125be:	6923      	ldr	r3, [r4, #16]
 80125c0:	b94b      	cbnz	r3, 80125d6 <__swsetup_r+0x9a>
 80125c2:	89a3      	ldrh	r3, [r4, #12]
 80125c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80125c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80125cc:	d003      	beq.n	80125d6 <__swsetup_r+0x9a>
 80125ce:	4621      	mov	r1, r4
 80125d0:	4630      	mov	r0, r6
 80125d2:	f001 f813 	bl	80135fc <__smakebuf_r>
 80125d6:	89a0      	ldrh	r0, [r4, #12]
 80125d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80125dc:	f010 0301 	ands.w	r3, r0, #1
 80125e0:	d00a      	beq.n	80125f8 <__swsetup_r+0xbc>
 80125e2:	2300      	movs	r3, #0
 80125e4:	60a3      	str	r3, [r4, #8]
 80125e6:	6963      	ldr	r3, [r4, #20]
 80125e8:	425b      	negs	r3, r3
 80125ea:	61a3      	str	r3, [r4, #24]
 80125ec:	6923      	ldr	r3, [r4, #16]
 80125ee:	b943      	cbnz	r3, 8012602 <__swsetup_r+0xc6>
 80125f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80125f4:	d1ba      	bne.n	801256c <__swsetup_r+0x30>
 80125f6:	bd70      	pop	{r4, r5, r6, pc}
 80125f8:	0781      	lsls	r1, r0, #30
 80125fa:	bf58      	it	pl
 80125fc:	6963      	ldrpl	r3, [r4, #20]
 80125fe:	60a3      	str	r3, [r4, #8]
 8012600:	e7f4      	b.n	80125ec <__swsetup_r+0xb0>
 8012602:	2000      	movs	r0, #0
 8012604:	e7f7      	b.n	80125f6 <__swsetup_r+0xba>
 8012606:	bf00      	nop
 8012608:	24000024 	.word	0x24000024
 801260c:	08014fc0 	.word	0x08014fc0
 8012610:	08014fe0 	.word	0x08014fe0
 8012614:	08014fa0 	.word	0x08014fa0

08012618 <quorem>:
 8012618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801261c:	6903      	ldr	r3, [r0, #16]
 801261e:	690c      	ldr	r4, [r1, #16]
 8012620:	42a3      	cmp	r3, r4
 8012622:	4607      	mov	r7, r0
 8012624:	f2c0 8081 	blt.w	801272a <quorem+0x112>
 8012628:	3c01      	subs	r4, #1
 801262a:	f101 0814 	add.w	r8, r1, #20
 801262e:	f100 0514 	add.w	r5, r0, #20
 8012632:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012636:	9301      	str	r3, [sp, #4]
 8012638:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801263c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012640:	3301      	adds	r3, #1
 8012642:	429a      	cmp	r2, r3
 8012644:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012648:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801264c:	fbb2 f6f3 	udiv	r6, r2, r3
 8012650:	d331      	bcc.n	80126b6 <quorem+0x9e>
 8012652:	f04f 0e00 	mov.w	lr, #0
 8012656:	4640      	mov	r0, r8
 8012658:	46ac      	mov	ip, r5
 801265a:	46f2      	mov	sl, lr
 801265c:	f850 2b04 	ldr.w	r2, [r0], #4
 8012660:	b293      	uxth	r3, r2
 8012662:	fb06 e303 	mla	r3, r6, r3, lr
 8012666:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801266a:	b29b      	uxth	r3, r3
 801266c:	ebaa 0303 	sub.w	r3, sl, r3
 8012670:	0c12      	lsrs	r2, r2, #16
 8012672:	f8dc a000 	ldr.w	sl, [ip]
 8012676:	fb06 e202 	mla	r2, r6, r2, lr
 801267a:	fa13 f38a 	uxtah	r3, r3, sl
 801267e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012682:	fa1f fa82 	uxth.w	sl, r2
 8012686:	f8dc 2000 	ldr.w	r2, [ip]
 801268a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801268e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012692:	b29b      	uxth	r3, r3
 8012694:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012698:	4581      	cmp	r9, r0
 801269a:	f84c 3b04 	str.w	r3, [ip], #4
 801269e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80126a2:	d2db      	bcs.n	801265c <quorem+0x44>
 80126a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80126a8:	b92b      	cbnz	r3, 80126b6 <quorem+0x9e>
 80126aa:	9b01      	ldr	r3, [sp, #4]
 80126ac:	3b04      	subs	r3, #4
 80126ae:	429d      	cmp	r5, r3
 80126b0:	461a      	mov	r2, r3
 80126b2:	d32e      	bcc.n	8012712 <quorem+0xfa>
 80126b4:	613c      	str	r4, [r7, #16]
 80126b6:	4638      	mov	r0, r7
 80126b8:	f001 fa74 	bl	8013ba4 <__mcmp>
 80126bc:	2800      	cmp	r0, #0
 80126be:	db24      	blt.n	801270a <quorem+0xf2>
 80126c0:	3601      	adds	r6, #1
 80126c2:	4628      	mov	r0, r5
 80126c4:	f04f 0c00 	mov.w	ip, #0
 80126c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80126cc:	f8d0 e000 	ldr.w	lr, [r0]
 80126d0:	b293      	uxth	r3, r2
 80126d2:	ebac 0303 	sub.w	r3, ip, r3
 80126d6:	0c12      	lsrs	r2, r2, #16
 80126d8:	fa13 f38e 	uxtah	r3, r3, lr
 80126dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80126e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80126e4:	b29b      	uxth	r3, r3
 80126e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126ea:	45c1      	cmp	r9, r8
 80126ec:	f840 3b04 	str.w	r3, [r0], #4
 80126f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80126f4:	d2e8      	bcs.n	80126c8 <quorem+0xb0>
 80126f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80126fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80126fe:	b922      	cbnz	r2, 801270a <quorem+0xf2>
 8012700:	3b04      	subs	r3, #4
 8012702:	429d      	cmp	r5, r3
 8012704:	461a      	mov	r2, r3
 8012706:	d30a      	bcc.n	801271e <quorem+0x106>
 8012708:	613c      	str	r4, [r7, #16]
 801270a:	4630      	mov	r0, r6
 801270c:	b003      	add	sp, #12
 801270e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012712:	6812      	ldr	r2, [r2, #0]
 8012714:	3b04      	subs	r3, #4
 8012716:	2a00      	cmp	r2, #0
 8012718:	d1cc      	bne.n	80126b4 <quorem+0x9c>
 801271a:	3c01      	subs	r4, #1
 801271c:	e7c7      	b.n	80126ae <quorem+0x96>
 801271e:	6812      	ldr	r2, [r2, #0]
 8012720:	3b04      	subs	r3, #4
 8012722:	2a00      	cmp	r2, #0
 8012724:	d1f0      	bne.n	8012708 <quorem+0xf0>
 8012726:	3c01      	subs	r4, #1
 8012728:	e7eb      	b.n	8012702 <quorem+0xea>
 801272a:	2000      	movs	r0, #0
 801272c:	e7ee      	b.n	801270c <quorem+0xf4>
	...

08012730 <_dtoa_r>:
 8012730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012734:	ec59 8b10 	vmov	r8, r9, d0
 8012738:	b095      	sub	sp, #84	; 0x54
 801273a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801273c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801273e:	9107      	str	r1, [sp, #28]
 8012740:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8012744:	4606      	mov	r6, r0
 8012746:	9209      	str	r2, [sp, #36]	; 0x24
 8012748:	9310      	str	r3, [sp, #64]	; 0x40
 801274a:	b975      	cbnz	r5, 801276a <_dtoa_r+0x3a>
 801274c:	2010      	movs	r0, #16
 801274e:	f000 ff95 	bl	801367c <malloc>
 8012752:	4602      	mov	r2, r0
 8012754:	6270      	str	r0, [r6, #36]	; 0x24
 8012756:	b920      	cbnz	r0, 8012762 <_dtoa_r+0x32>
 8012758:	4bab      	ldr	r3, [pc, #684]	; (8012a08 <_dtoa_r+0x2d8>)
 801275a:	21ea      	movs	r1, #234	; 0xea
 801275c:	48ab      	ldr	r0, [pc, #684]	; (8012a0c <_dtoa_r+0x2dc>)
 801275e:	f001 fd9b 	bl	8014298 <__assert_func>
 8012762:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012766:	6005      	str	r5, [r0, #0]
 8012768:	60c5      	str	r5, [r0, #12]
 801276a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801276c:	6819      	ldr	r1, [r3, #0]
 801276e:	b151      	cbz	r1, 8012786 <_dtoa_r+0x56>
 8012770:	685a      	ldr	r2, [r3, #4]
 8012772:	604a      	str	r2, [r1, #4]
 8012774:	2301      	movs	r3, #1
 8012776:	4093      	lsls	r3, r2
 8012778:	608b      	str	r3, [r1, #8]
 801277a:	4630      	mov	r0, r6
 801277c:	f000 ffd4 	bl	8013728 <_Bfree>
 8012780:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012782:	2200      	movs	r2, #0
 8012784:	601a      	str	r2, [r3, #0]
 8012786:	f1b9 0300 	subs.w	r3, r9, #0
 801278a:	bfbb      	ittet	lt
 801278c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012790:	9303      	strlt	r3, [sp, #12]
 8012792:	2300      	movge	r3, #0
 8012794:	2201      	movlt	r2, #1
 8012796:	bfac      	ite	ge
 8012798:	6023      	strge	r3, [r4, #0]
 801279a:	6022      	strlt	r2, [r4, #0]
 801279c:	4b9c      	ldr	r3, [pc, #624]	; (8012a10 <_dtoa_r+0x2e0>)
 801279e:	9c03      	ldr	r4, [sp, #12]
 80127a0:	43a3      	bics	r3, r4
 80127a2:	d11a      	bne.n	80127da <_dtoa_r+0xaa>
 80127a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80127a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80127aa:	6013      	str	r3, [r2, #0]
 80127ac:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80127b0:	ea53 0308 	orrs.w	r3, r3, r8
 80127b4:	f000 8512 	beq.w	80131dc <_dtoa_r+0xaac>
 80127b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80127ba:	b953      	cbnz	r3, 80127d2 <_dtoa_r+0xa2>
 80127bc:	4b95      	ldr	r3, [pc, #596]	; (8012a14 <_dtoa_r+0x2e4>)
 80127be:	e01f      	b.n	8012800 <_dtoa_r+0xd0>
 80127c0:	4b95      	ldr	r3, [pc, #596]	; (8012a18 <_dtoa_r+0x2e8>)
 80127c2:	9300      	str	r3, [sp, #0]
 80127c4:	3308      	adds	r3, #8
 80127c6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80127c8:	6013      	str	r3, [r2, #0]
 80127ca:	9800      	ldr	r0, [sp, #0]
 80127cc:	b015      	add	sp, #84	; 0x54
 80127ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127d2:	4b90      	ldr	r3, [pc, #576]	; (8012a14 <_dtoa_r+0x2e4>)
 80127d4:	9300      	str	r3, [sp, #0]
 80127d6:	3303      	adds	r3, #3
 80127d8:	e7f5      	b.n	80127c6 <_dtoa_r+0x96>
 80127da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80127de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80127e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127e6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80127ea:	d10b      	bne.n	8012804 <_dtoa_r+0xd4>
 80127ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80127ee:	2301      	movs	r3, #1
 80127f0:	6013      	str	r3, [r2, #0]
 80127f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	f000 84ee 	beq.w	80131d6 <_dtoa_r+0xaa6>
 80127fa:	4888      	ldr	r0, [pc, #544]	; (8012a1c <_dtoa_r+0x2ec>)
 80127fc:	6018      	str	r0, [r3, #0]
 80127fe:	1e43      	subs	r3, r0, #1
 8012800:	9300      	str	r3, [sp, #0]
 8012802:	e7e2      	b.n	80127ca <_dtoa_r+0x9a>
 8012804:	a913      	add	r1, sp, #76	; 0x4c
 8012806:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801280a:	aa12      	add	r2, sp, #72	; 0x48
 801280c:	4630      	mov	r0, r6
 801280e:	f001 fa6d 	bl	8013cec <__d2b>
 8012812:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8012816:	4605      	mov	r5, r0
 8012818:	9812      	ldr	r0, [sp, #72]	; 0x48
 801281a:	2900      	cmp	r1, #0
 801281c:	d047      	beq.n	80128ae <_dtoa_r+0x17e>
 801281e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012820:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012824:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012828:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801282c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012830:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012834:	2400      	movs	r4, #0
 8012836:	ec43 2b16 	vmov	d6, r2, r3
 801283a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801283e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80129f0 <_dtoa_r+0x2c0>
 8012842:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012846:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80129f8 <_dtoa_r+0x2c8>
 801284a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801284e:	eeb0 7b46 	vmov.f64	d7, d6
 8012852:	ee06 1a90 	vmov	s13, r1
 8012856:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801285a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8012a00 <_dtoa_r+0x2d0>
 801285e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012862:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012866:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801286e:	ee16 ba90 	vmov	fp, s13
 8012872:	9411      	str	r4, [sp, #68]	; 0x44
 8012874:	d508      	bpl.n	8012888 <_dtoa_r+0x158>
 8012876:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801287a:	eeb4 6b47 	vcmp.f64	d6, d7
 801287e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012882:	bf18      	it	ne
 8012884:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012888:	f1bb 0f16 	cmp.w	fp, #22
 801288c:	d832      	bhi.n	80128f4 <_dtoa_r+0x1c4>
 801288e:	4b64      	ldr	r3, [pc, #400]	; (8012a20 <_dtoa_r+0x2f0>)
 8012890:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012894:	ed93 7b00 	vldr	d7, [r3]
 8012898:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801289c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80128a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a4:	d501      	bpl.n	80128aa <_dtoa_r+0x17a>
 80128a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80128aa:	2300      	movs	r3, #0
 80128ac:	e023      	b.n	80128f6 <_dtoa_r+0x1c6>
 80128ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80128b0:	4401      	add	r1, r0
 80128b2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80128b6:	2b20      	cmp	r3, #32
 80128b8:	bfc3      	ittte	gt
 80128ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80128be:	fa04 f303 	lslgt.w	r3, r4, r3
 80128c2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80128c6:	f1c3 0320 	rsble	r3, r3, #32
 80128ca:	bfc6      	itte	gt
 80128cc:	fa28 f804 	lsrgt.w	r8, r8, r4
 80128d0:	ea43 0308 	orrgt.w	r3, r3, r8
 80128d4:	fa08 f303 	lslle.w	r3, r8, r3
 80128d8:	ee07 3a90 	vmov	s15, r3
 80128dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80128e0:	3901      	subs	r1, #1
 80128e2:	ed8d 7b00 	vstr	d7, [sp]
 80128e6:	9c01      	ldr	r4, [sp, #4]
 80128e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128ec:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80128f0:	2401      	movs	r4, #1
 80128f2:	e7a0      	b.n	8012836 <_dtoa_r+0x106>
 80128f4:	2301      	movs	r3, #1
 80128f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80128f8:	1a43      	subs	r3, r0, r1
 80128fa:	1e5a      	subs	r2, r3, #1
 80128fc:	bf45      	ittet	mi
 80128fe:	f1c3 0301 	rsbmi	r3, r3, #1
 8012902:	9305      	strmi	r3, [sp, #20]
 8012904:	2300      	movpl	r3, #0
 8012906:	2300      	movmi	r3, #0
 8012908:	9206      	str	r2, [sp, #24]
 801290a:	bf54      	ite	pl
 801290c:	9305      	strpl	r3, [sp, #20]
 801290e:	9306      	strmi	r3, [sp, #24]
 8012910:	f1bb 0f00 	cmp.w	fp, #0
 8012914:	db18      	blt.n	8012948 <_dtoa_r+0x218>
 8012916:	9b06      	ldr	r3, [sp, #24]
 8012918:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801291c:	445b      	add	r3, fp
 801291e:	9306      	str	r3, [sp, #24]
 8012920:	2300      	movs	r3, #0
 8012922:	9a07      	ldr	r2, [sp, #28]
 8012924:	2a09      	cmp	r2, #9
 8012926:	d849      	bhi.n	80129bc <_dtoa_r+0x28c>
 8012928:	2a05      	cmp	r2, #5
 801292a:	bfc4      	itt	gt
 801292c:	3a04      	subgt	r2, #4
 801292e:	9207      	strgt	r2, [sp, #28]
 8012930:	9a07      	ldr	r2, [sp, #28]
 8012932:	f1a2 0202 	sub.w	r2, r2, #2
 8012936:	bfcc      	ite	gt
 8012938:	2400      	movgt	r4, #0
 801293a:	2401      	movle	r4, #1
 801293c:	2a03      	cmp	r2, #3
 801293e:	d848      	bhi.n	80129d2 <_dtoa_r+0x2a2>
 8012940:	e8df f002 	tbb	[pc, r2]
 8012944:	3a2c2e0b 	.word	0x3a2c2e0b
 8012948:	9b05      	ldr	r3, [sp, #20]
 801294a:	2200      	movs	r2, #0
 801294c:	eba3 030b 	sub.w	r3, r3, fp
 8012950:	9305      	str	r3, [sp, #20]
 8012952:	920e      	str	r2, [sp, #56]	; 0x38
 8012954:	f1cb 0300 	rsb	r3, fp, #0
 8012958:	e7e3      	b.n	8012922 <_dtoa_r+0x1f2>
 801295a:	2200      	movs	r2, #0
 801295c:	9208      	str	r2, [sp, #32]
 801295e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012960:	2a00      	cmp	r2, #0
 8012962:	dc39      	bgt.n	80129d8 <_dtoa_r+0x2a8>
 8012964:	f04f 0a01 	mov.w	sl, #1
 8012968:	46d1      	mov	r9, sl
 801296a:	4652      	mov	r2, sl
 801296c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012970:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8012972:	2100      	movs	r1, #0
 8012974:	6079      	str	r1, [r7, #4]
 8012976:	2004      	movs	r0, #4
 8012978:	f100 0c14 	add.w	ip, r0, #20
 801297c:	4594      	cmp	ip, r2
 801297e:	6879      	ldr	r1, [r7, #4]
 8012980:	d92f      	bls.n	80129e2 <_dtoa_r+0x2b2>
 8012982:	4630      	mov	r0, r6
 8012984:	930c      	str	r3, [sp, #48]	; 0x30
 8012986:	f000 fe8f 	bl	80136a8 <_Balloc>
 801298a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801298c:	9000      	str	r0, [sp, #0]
 801298e:	4602      	mov	r2, r0
 8012990:	2800      	cmp	r0, #0
 8012992:	d149      	bne.n	8012a28 <_dtoa_r+0x2f8>
 8012994:	4b23      	ldr	r3, [pc, #140]	; (8012a24 <_dtoa_r+0x2f4>)
 8012996:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801299a:	e6df      	b.n	801275c <_dtoa_r+0x2c>
 801299c:	2201      	movs	r2, #1
 801299e:	e7dd      	b.n	801295c <_dtoa_r+0x22c>
 80129a0:	2200      	movs	r2, #0
 80129a2:	9208      	str	r2, [sp, #32]
 80129a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129a6:	eb0b 0a02 	add.w	sl, fp, r2
 80129aa:	f10a 0901 	add.w	r9, sl, #1
 80129ae:	464a      	mov	r2, r9
 80129b0:	2a01      	cmp	r2, #1
 80129b2:	bfb8      	it	lt
 80129b4:	2201      	movlt	r2, #1
 80129b6:	e7db      	b.n	8012970 <_dtoa_r+0x240>
 80129b8:	2201      	movs	r2, #1
 80129ba:	e7f2      	b.n	80129a2 <_dtoa_r+0x272>
 80129bc:	2401      	movs	r4, #1
 80129be:	2200      	movs	r2, #0
 80129c0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80129c4:	f04f 3aff 	mov.w	sl, #4294967295
 80129c8:	2100      	movs	r1, #0
 80129ca:	46d1      	mov	r9, sl
 80129cc:	2212      	movs	r2, #18
 80129ce:	9109      	str	r1, [sp, #36]	; 0x24
 80129d0:	e7ce      	b.n	8012970 <_dtoa_r+0x240>
 80129d2:	2201      	movs	r2, #1
 80129d4:	9208      	str	r2, [sp, #32]
 80129d6:	e7f5      	b.n	80129c4 <_dtoa_r+0x294>
 80129d8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80129dc:	46d1      	mov	r9, sl
 80129de:	4652      	mov	r2, sl
 80129e0:	e7c6      	b.n	8012970 <_dtoa_r+0x240>
 80129e2:	3101      	adds	r1, #1
 80129e4:	6079      	str	r1, [r7, #4]
 80129e6:	0040      	lsls	r0, r0, #1
 80129e8:	e7c6      	b.n	8012978 <_dtoa_r+0x248>
 80129ea:	bf00      	nop
 80129ec:	f3af 8000 	nop.w
 80129f0:	636f4361 	.word	0x636f4361
 80129f4:	3fd287a7 	.word	0x3fd287a7
 80129f8:	8b60c8b3 	.word	0x8b60c8b3
 80129fc:	3fc68a28 	.word	0x3fc68a28
 8012a00:	509f79fb 	.word	0x509f79fb
 8012a04:	3fd34413 	.word	0x3fd34413
 8012a08:	08014f19 	.word	0x08014f19
 8012a0c:	08014f30 	.word	0x08014f30
 8012a10:	7ff00000 	.word	0x7ff00000
 8012a14:	08014f15 	.word	0x08014f15
 8012a18:	08014f0c 	.word	0x08014f0c
 8012a1c:	08014ee9 	.word	0x08014ee9
 8012a20:	08015088 	.word	0x08015088
 8012a24:	08014f8f 	.word	0x08014f8f
 8012a28:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8012a2a:	9900      	ldr	r1, [sp, #0]
 8012a2c:	6011      	str	r1, [r2, #0]
 8012a2e:	f1b9 0f0e 	cmp.w	r9, #14
 8012a32:	d872      	bhi.n	8012b1a <_dtoa_r+0x3ea>
 8012a34:	2c00      	cmp	r4, #0
 8012a36:	d070      	beq.n	8012b1a <_dtoa_r+0x3ea>
 8012a38:	f1bb 0f00 	cmp.w	fp, #0
 8012a3c:	f340 80a6 	ble.w	8012b8c <_dtoa_r+0x45c>
 8012a40:	49ca      	ldr	r1, [pc, #808]	; (8012d6c <_dtoa_r+0x63c>)
 8012a42:	f00b 020f 	and.w	r2, fp, #15
 8012a46:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012a4a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012a4e:	ed92 7b00 	vldr	d7, [r2]
 8012a52:	ea4f 112b 	mov.w	r1, fp, asr #4
 8012a56:	f000 808d 	beq.w	8012b74 <_dtoa_r+0x444>
 8012a5a:	4ac5      	ldr	r2, [pc, #788]	; (8012d70 <_dtoa_r+0x640>)
 8012a5c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8012a60:	ed92 6b08 	vldr	d6, [r2, #32]
 8012a64:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8012a68:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012a6c:	f001 010f 	and.w	r1, r1, #15
 8012a70:	2203      	movs	r2, #3
 8012a72:	48bf      	ldr	r0, [pc, #764]	; (8012d70 <_dtoa_r+0x640>)
 8012a74:	2900      	cmp	r1, #0
 8012a76:	d17f      	bne.n	8012b78 <_dtoa_r+0x448>
 8012a78:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012a7c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012a80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012a84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012a86:	2900      	cmp	r1, #0
 8012a88:	f000 80b2 	beq.w	8012bf0 <_dtoa_r+0x4c0>
 8012a8c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012a90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a9c:	f140 80a8 	bpl.w	8012bf0 <_dtoa_r+0x4c0>
 8012aa0:	f1b9 0f00 	cmp.w	r9, #0
 8012aa4:	f000 80a4 	beq.w	8012bf0 <_dtoa_r+0x4c0>
 8012aa8:	f1ba 0f00 	cmp.w	sl, #0
 8012aac:	dd31      	ble.n	8012b12 <_dtoa_r+0x3e2>
 8012aae:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012ab2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012ab6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012aba:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012abe:	3201      	adds	r2, #1
 8012ac0:	4650      	mov	r0, sl
 8012ac2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012ac6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012aca:	ee07 2a90 	vmov	s15, r2
 8012ace:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012ad2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012ad6:	ed8d 5b02 	vstr	d5, [sp, #8]
 8012ada:	9c03      	ldr	r4, [sp, #12]
 8012adc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012ae0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8012ae4:	2800      	cmp	r0, #0
 8012ae6:	f040 8086 	bne.w	8012bf6 <_dtoa_r+0x4c6>
 8012aea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012aee:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012af2:	ec42 1b17 	vmov	d7, r1, r2
 8012af6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012afe:	f300 8272 	bgt.w	8012fe6 <_dtoa_r+0x8b6>
 8012b02:	eeb1 7b47 	vneg.f64	d7, d7
 8012b06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b0e:	f100 8267 	bmi.w	8012fe0 <_dtoa_r+0x8b0>
 8012b12:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8012b16:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012b1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012b1c:	2a00      	cmp	r2, #0
 8012b1e:	f2c0 8129 	blt.w	8012d74 <_dtoa_r+0x644>
 8012b22:	f1bb 0f0e 	cmp.w	fp, #14
 8012b26:	f300 8125 	bgt.w	8012d74 <_dtoa_r+0x644>
 8012b2a:	4b90      	ldr	r3, [pc, #576]	; (8012d6c <_dtoa_r+0x63c>)
 8012b2c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012b30:	ed93 6b00 	vldr	d6, [r3]
 8012b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	f280 80c3 	bge.w	8012cc2 <_dtoa_r+0x592>
 8012b3c:	f1b9 0f00 	cmp.w	r9, #0
 8012b40:	f300 80bf 	bgt.w	8012cc2 <_dtoa_r+0x592>
 8012b44:	f040 824c 	bne.w	8012fe0 <_dtoa_r+0x8b0>
 8012b48:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012b4c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012b50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012b54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b5c:	464c      	mov	r4, r9
 8012b5e:	464f      	mov	r7, r9
 8012b60:	f280 8222 	bge.w	8012fa8 <_dtoa_r+0x878>
 8012b64:	f8dd 8000 	ldr.w	r8, [sp]
 8012b68:	2331      	movs	r3, #49	; 0x31
 8012b6a:	f808 3b01 	strb.w	r3, [r8], #1
 8012b6e:	f10b 0b01 	add.w	fp, fp, #1
 8012b72:	e21e      	b.n	8012fb2 <_dtoa_r+0x882>
 8012b74:	2202      	movs	r2, #2
 8012b76:	e77c      	b.n	8012a72 <_dtoa_r+0x342>
 8012b78:	07cc      	lsls	r4, r1, #31
 8012b7a:	d504      	bpl.n	8012b86 <_dtoa_r+0x456>
 8012b7c:	ed90 6b00 	vldr	d6, [r0]
 8012b80:	3201      	adds	r2, #1
 8012b82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012b86:	1049      	asrs	r1, r1, #1
 8012b88:	3008      	adds	r0, #8
 8012b8a:	e773      	b.n	8012a74 <_dtoa_r+0x344>
 8012b8c:	d02e      	beq.n	8012bec <_dtoa_r+0x4bc>
 8012b8e:	f1cb 0100 	rsb	r1, fp, #0
 8012b92:	4a76      	ldr	r2, [pc, #472]	; (8012d6c <_dtoa_r+0x63c>)
 8012b94:	f001 000f 	and.w	r0, r1, #15
 8012b98:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012b9c:	ed92 7b00 	vldr	d7, [r2]
 8012ba0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8012ba4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012ba8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012bac:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8012bb0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8012bb4:	486e      	ldr	r0, [pc, #440]	; (8012d70 <_dtoa_r+0x640>)
 8012bb6:	1109      	asrs	r1, r1, #4
 8012bb8:	2400      	movs	r4, #0
 8012bba:	2202      	movs	r2, #2
 8012bbc:	b939      	cbnz	r1, 8012bce <_dtoa_r+0x49e>
 8012bbe:	2c00      	cmp	r4, #0
 8012bc0:	f43f af60 	beq.w	8012a84 <_dtoa_r+0x354>
 8012bc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012bc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012bcc:	e75a      	b.n	8012a84 <_dtoa_r+0x354>
 8012bce:	07cf      	lsls	r7, r1, #31
 8012bd0:	d509      	bpl.n	8012be6 <_dtoa_r+0x4b6>
 8012bd2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8012bd6:	ed90 7b00 	vldr	d7, [r0]
 8012bda:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012bde:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012be2:	3201      	adds	r2, #1
 8012be4:	2401      	movs	r4, #1
 8012be6:	1049      	asrs	r1, r1, #1
 8012be8:	3008      	adds	r0, #8
 8012bea:	e7e7      	b.n	8012bbc <_dtoa_r+0x48c>
 8012bec:	2202      	movs	r2, #2
 8012bee:	e749      	b.n	8012a84 <_dtoa_r+0x354>
 8012bf0:	465f      	mov	r7, fp
 8012bf2:	4648      	mov	r0, r9
 8012bf4:	e765      	b.n	8012ac2 <_dtoa_r+0x392>
 8012bf6:	ec42 1b17 	vmov	d7, r1, r2
 8012bfa:	4a5c      	ldr	r2, [pc, #368]	; (8012d6c <_dtoa_r+0x63c>)
 8012bfc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012c00:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012c04:	9a00      	ldr	r2, [sp, #0]
 8012c06:	1814      	adds	r4, r2, r0
 8012c08:	9a08      	ldr	r2, [sp, #32]
 8012c0a:	b352      	cbz	r2, 8012c62 <_dtoa_r+0x532>
 8012c0c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012c10:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012c14:	f8dd 8000 	ldr.w	r8, [sp]
 8012c18:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012c1c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012c20:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012c24:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012c28:	ee14 2a90 	vmov	r2, s9
 8012c2c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012c30:	3230      	adds	r2, #48	; 0x30
 8012c32:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012c36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c3e:	f808 2b01 	strb.w	r2, [r8], #1
 8012c42:	d439      	bmi.n	8012cb8 <_dtoa_r+0x588>
 8012c44:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012c48:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c50:	d472      	bmi.n	8012d38 <_dtoa_r+0x608>
 8012c52:	45a0      	cmp	r8, r4
 8012c54:	f43f af5d 	beq.w	8012b12 <_dtoa_r+0x3e2>
 8012c58:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012c5c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012c60:	e7e0      	b.n	8012c24 <_dtoa_r+0x4f4>
 8012c62:	f8dd 8000 	ldr.w	r8, [sp]
 8012c66:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012c6a:	4621      	mov	r1, r4
 8012c6c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012c70:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012c74:	ee14 2a90 	vmov	r2, s9
 8012c78:	3230      	adds	r2, #48	; 0x30
 8012c7a:	f808 2b01 	strb.w	r2, [r8], #1
 8012c7e:	45a0      	cmp	r8, r4
 8012c80:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012c84:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012c88:	d118      	bne.n	8012cbc <_dtoa_r+0x58c>
 8012c8a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012c8e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012c92:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c9a:	dc4d      	bgt.n	8012d38 <_dtoa_r+0x608>
 8012c9c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012ca0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ca8:	f57f af33 	bpl.w	8012b12 <_dtoa_r+0x3e2>
 8012cac:	4688      	mov	r8, r1
 8012cae:	3901      	subs	r1, #1
 8012cb0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012cb4:	2b30      	cmp	r3, #48	; 0x30
 8012cb6:	d0f9      	beq.n	8012cac <_dtoa_r+0x57c>
 8012cb8:	46bb      	mov	fp, r7
 8012cba:	e02a      	b.n	8012d12 <_dtoa_r+0x5e2>
 8012cbc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012cc0:	e7d6      	b.n	8012c70 <_dtoa_r+0x540>
 8012cc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012cc6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012cca:	f8dd 8000 	ldr.w	r8, [sp]
 8012cce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012cd2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012cd6:	ee15 3a10 	vmov	r3, s10
 8012cda:	3330      	adds	r3, #48	; 0x30
 8012cdc:	f808 3b01 	strb.w	r3, [r8], #1
 8012ce0:	9b00      	ldr	r3, [sp, #0]
 8012ce2:	eba8 0303 	sub.w	r3, r8, r3
 8012ce6:	4599      	cmp	r9, r3
 8012ce8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012cec:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012cf0:	d133      	bne.n	8012d5a <_dtoa_r+0x62a>
 8012cf2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012cf6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cfe:	dc1a      	bgt.n	8012d36 <_dtoa_r+0x606>
 8012d00:	eeb4 7b46 	vcmp.f64	d7, d6
 8012d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d08:	d103      	bne.n	8012d12 <_dtoa_r+0x5e2>
 8012d0a:	ee15 3a10 	vmov	r3, s10
 8012d0e:	07d9      	lsls	r1, r3, #31
 8012d10:	d411      	bmi.n	8012d36 <_dtoa_r+0x606>
 8012d12:	4629      	mov	r1, r5
 8012d14:	4630      	mov	r0, r6
 8012d16:	f000 fd07 	bl	8013728 <_Bfree>
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012d1e:	f888 3000 	strb.w	r3, [r8]
 8012d22:	f10b 0301 	add.w	r3, fp, #1
 8012d26:	6013      	str	r3, [r2, #0]
 8012d28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	f43f ad4d 	beq.w	80127ca <_dtoa_r+0x9a>
 8012d30:	f8c3 8000 	str.w	r8, [r3]
 8012d34:	e549      	b.n	80127ca <_dtoa_r+0x9a>
 8012d36:	465f      	mov	r7, fp
 8012d38:	4643      	mov	r3, r8
 8012d3a:	4698      	mov	r8, r3
 8012d3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012d40:	2a39      	cmp	r2, #57	; 0x39
 8012d42:	d106      	bne.n	8012d52 <_dtoa_r+0x622>
 8012d44:	9a00      	ldr	r2, [sp, #0]
 8012d46:	429a      	cmp	r2, r3
 8012d48:	d1f7      	bne.n	8012d3a <_dtoa_r+0x60a>
 8012d4a:	9900      	ldr	r1, [sp, #0]
 8012d4c:	2230      	movs	r2, #48	; 0x30
 8012d4e:	3701      	adds	r7, #1
 8012d50:	700a      	strb	r2, [r1, #0]
 8012d52:	781a      	ldrb	r2, [r3, #0]
 8012d54:	3201      	adds	r2, #1
 8012d56:	701a      	strb	r2, [r3, #0]
 8012d58:	e7ae      	b.n	8012cb8 <_dtoa_r+0x588>
 8012d5a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012d5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d66:	d1b2      	bne.n	8012cce <_dtoa_r+0x59e>
 8012d68:	e7d3      	b.n	8012d12 <_dtoa_r+0x5e2>
 8012d6a:	bf00      	nop
 8012d6c:	08015088 	.word	0x08015088
 8012d70:	08015060 	.word	0x08015060
 8012d74:	9908      	ldr	r1, [sp, #32]
 8012d76:	2900      	cmp	r1, #0
 8012d78:	f000 80d1 	beq.w	8012f1e <_dtoa_r+0x7ee>
 8012d7c:	9907      	ldr	r1, [sp, #28]
 8012d7e:	2901      	cmp	r1, #1
 8012d80:	f300 80b4 	bgt.w	8012eec <_dtoa_r+0x7bc>
 8012d84:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012d86:	2900      	cmp	r1, #0
 8012d88:	f000 80ac 	beq.w	8012ee4 <_dtoa_r+0x7b4>
 8012d8c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012d90:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012d94:	461c      	mov	r4, r3
 8012d96:	930a      	str	r3, [sp, #40]	; 0x28
 8012d98:	9b05      	ldr	r3, [sp, #20]
 8012d9a:	4413      	add	r3, r2
 8012d9c:	9305      	str	r3, [sp, #20]
 8012d9e:	9b06      	ldr	r3, [sp, #24]
 8012da0:	2101      	movs	r1, #1
 8012da2:	4413      	add	r3, r2
 8012da4:	4630      	mov	r0, r6
 8012da6:	9306      	str	r3, [sp, #24]
 8012da8:	f000 fd7a 	bl	80138a0 <__i2b>
 8012dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dae:	4607      	mov	r7, r0
 8012db0:	f1b8 0f00 	cmp.w	r8, #0
 8012db4:	dd0d      	ble.n	8012dd2 <_dtoa_r+0x6a2>
 8012db6:	9a06      	ldr	r2, [sp, #24]
 8012db8:	2a00      	cmp	r2, #0
 8012dba:	dd0a      	ble.n	8012dd2 <_dtoa_r+0x6a2>
 8012dbc:	4542      	cmp	r2, r8
 8012dbe:	9905      	ldr	r1, [sp, #20]
 8012dc0:	bfa8      	it	ge
 8012dc2:	4642      	movge	r2, r8
 8012dc4:	1a89      	subs	r1, r1, r2
 8012dc6:	9105      	str	r1, [sp, #20]
 8012dc8:	9906      	ldr	r1, [sp, #24]
 8012dca:	eba8 0802 	sub.w	r8, r8, r2
 8012dce:	1a8a      	subs	r2, r1, r2
 8012dd0:	9206      	str	r2, [sp, #24]
 8012dd2:	b303      	cbz	r3, 8012e16 <_dtoa_r+0x6e6>
 8012dd4:	9a08      	ldr	r2, [sp, #32]
 8012dd6:	2a00      	cmp	r2, #0
 8012dd8:	f000 80a6 	beq.w	8012f28 <_dtoa_r+0x7f8>
 8012ddc:	2c00      	cmp	r4, #0
 8012dde:	dd13      	ble.n	8012e08 <_dtoa_r+0x6d8>
 8012de0:	4639      	mov	r1, r7
 8012de2:	4622      	mov	r2, r4
 8012de4:	4630      	mov	r0, r6
 8012de6:	930c      	str	r3, [sp, #48]	; 0x30
 8012de8:	f000 fe16 	bl	8013a18 <__pow5mult>
 8012dec:	462a      	mov	r2, r5
 8012dee:	4601      	mov	r1, r0
 8012df0:	4607      	mov	r7, r0
 8012df2:	4630      	mov	r0, r6
 8012df4:	f000 fd6a 	bl	80138cc <__multiply>
 8012df8:	4629      	mov	r1, r5
 8012dfa:	900a      	str	r0, [sp, #40]	; 0x28
 8012dfc:	4630      	mov	r0, r6
 8012dfe:	f000 fc93 	bl	8013728 <_Bfree>
 8012e02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e06:	4615      	mov	r5, r2
 8012e08:	1b1a      	subs	r2, r3, r4
 8012e0a:	d004      	beq.n	8012e16 <_dtoa_r+0x6e6>
 8012e0c:	4629      	mov	r1, r5
 8012e0e:	4630      	mov	r0, r6
 8012e10:	f000 fe02 	bl	8013a18 <__pow5mult>
 8012e14:	4605      	mov	r5, r0
 8012e16:	2101      	movs	r1, #1
 8012e18:	4630      	mov	r0, r6
 8012e1a:	f000 fd41 	bl	80138a0 <__i2b>
 8012e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	4604      	mov	r4, r0
 8012e24:	f340 8082 	ble.w	8012f2c <_dtoa_r+0x7fc>
 8012e28:	461a      	mov	r2, r3
 8012e2a:	4601      	mov	r1, r0
 8012e2c:	4630      	mov	r0, r6
 8012e2e:	f000 fdf3 	bl	8013a18 <__pow5mult>
 8012e32:	9b07      	ldr	r3, [sp, #28]
 8012e34:	2b01      	cmp	r3, #1
 8012e36:	4604      	mov	r4, r0
 8012e38:	dd7b      	ble.n	8012f32 <_dtoa_r+0x802>
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	930a      	str	r3, [sp, #40]	; 0x28
 8012e3e:	6922      	ldr	r2, [r4, #16]
 8012e40:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012e44:	6910      	ldr	r0, [r2, #16]
 8012e46:	f000 fcdb 	bl	8013800 <__hi0bits>
 8012e4a:	f1c0 0020 	rsb	r0, r0, #32
 8012e4e:	9b06      	ldr	r3, [sp, #24]
 8012e50:	4418      	add	r0, r3
 8012e52:	f010 001f 	ands.w	r0, r0, #31
 8012e56:	f000 808d 	beq.w	8012f74 <_dtoa_r+0x844>
 8012e5a:	f1c0 0220 	rsb	r2, r0, #32
 8012e5e:	2a04      	cmp	r2, #4
 8012e60:	f340 8086 	ble.w	8012f70 <_dtoa_r+0x840>
 8012e64:	f1c0 001c 	rsb	r0, r0, #28
 8012e68:	9b05      	ldr	r3, [sp, #20]
 8012e6a:	4403      	add	r3, r0
 8012e6c:	9305      	str	r3, [sp, #20]
 8012e6e:	9b06      	ldr	r3, [sp, #24]
 8012e70:	4403      	add	r3, r0
 8012e72:	4480      	add	r8, r0
 8012e74:	9306      	str	r3, [sp, #24]
 8012e76:	9b05      	ldr	r3, [sp, #20]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	dd05      	ble.n	8012e88 <_dtoa_r+0x758>
 8012e7c:	4629      	mov	r1, r5
 8012e7e:	461a      	mov	r2, r3
 8012e80:	4630      	mov	r0, r6
 8012e82:	f000 fe23 	bl	8013acc <__lshift>
 8012e86:	4605      	mov	r5, r0
 8012e88:	9b06      	ldr	r3, [sp, #24]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	dd05      	ble.n	8012e9a <_dtoa_r+0x76a>
 8012e8e:	4621      	mov	r1, r4
 8012e90:	461a      	mov	r2, r3
 8012e92:	4630      	mov	r0, r6
 8012e94:	f000 fe1a 	bl	8013acc <__lshift>
 8012e98:	4604      	mov	r4, r0
 8012e9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d06b      	beq.n	8012f78 <_dtoa_r+0x848>
 8012ea0:	4621      	mov	r1, r4
 8012ea2:	4628      	mov	r0, r5
 8012ea4:	f000 fe7e 	bl	8013ba4 <__mcmp>
 8012ea8:	2800      	cmp	r0, #0
 8012eaa:	da65      	bge.n	8012f78 <_dtoa_r+0x848>
 8012eac:	2300      	movs	r3, #0
 8012eae:	4629      	mov	r1, r5
 8012eb0:	220a      	movs	r2, #10
 8012eb2:	4630      	mov	r0, r6
 8012eb4:	f000 fc5a 	bl	801376c <__multadd>
 8012eb8:	9b08      	ldr	r3, [sp, #32]
 8012eba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012ebe:	4605      	mov	r5, r0
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	f000 8192 	beq.w	80131ea <_dtoa_r+0xaba>
 8012ec6:	4639      	mov	r1, r7
 8012ec8:	2300      	movs	r3, #0
 8012eca:	220a      	movs	r2, #10
 8012ecc:	4630      	mov	r0, r6
 8012ece:	f000 fc4d 	bl	801376c <__multadd>
 8012ed2:	f1ba 0f00 	cmp.w	sl, #0
 8012ed6:	4607      	mov	r7, r0
 8012ed8:	f300 808e 	bgt.w	8012ff8 <_dtoa_r+0x8c8>
 8012edc:	9b07      	ldr	r3, [sp, #28]
 8012ede:	2b02      	cmp	r3, #2
 8012ee0:	dc51      	bgt.n	8012f86 <_dtoa_r+0x856>
 8012ee2:	e089      	b.n	8012ff8 <_dtoa_r+0x8c8>
 8012ee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012ee6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012eea:	e751      	b.n	8012d90 <_dtoa_r+0x660>
 8012eec:	f109 34ff 	add.w	r4, r9, #4294967295
 8012ef0:	42a3      	cmp	r3, r4
 8012ef2:	bfbf      	itttt	lt
 8012ef4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8012ef6:	1ae3      	sublt	r3, r4, r3
 8012ef8:	18d2      	addlt	r2, r2, r3
 8012efa:	4613      	movlt	r3, r2
 8012efc:	bfb7      	itett	lt
 8012efe:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012f00:	1b1c      	subge	r4, r3, r4
 8012f02:	4623      	movlt	r3, r4
 8012f04:	2400      	movlt	r4, #0
 8012f06:	f1b9 0f00 	cmp.w	r9, #0
 8012f0a:	bfb5      	itete	lt
 8012f0c:	9a05      	ldrlt	r2, [sp, #20]
 8012f0e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8012f12:	eba2 0809 	sublt.w	r8, r2, r9
 8012f16:	464a      	movge	r2, r9
 8012f18:	bfb8      	it	lt
 8012f1a:	2200      	movlt	r2, #0
 8012f1c:	e73b      	b.n	8012d96 <_dtoa_r+0x666>
 8012f1e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012f22:	9f08      	ldr	r7, [sp, #32]
 8012f24:	461c      	mov	r4, r3
 8012f26:	e743      	b.n	8012db0 <_dtoa_r+0x680>
 8012f28:	461a      	mov	r2, r3
 8012f2a:	e76f      	b.n	8012e0c <_dtoa_r+0x6dc>
 8012f2c:	9b07      	ldr	r3, [sp, #28]
 8012f2e:	2b01      	cmp	r3, #1
 8012f30:	dc18      	bgt.n	8012f64 <_dtoa_r+0x834>
 8012f32:	9b02      	ldr	r3, [sp, #8]
 8012f34:	b9b3      	cbnz	r3, 8012f64 <_dtoa_r+0x834>
 8012f36:	9b03      	ldr	r3, [sp, #12]
 8012f38:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012f3c:	b9a2      	cbnz	r2, 8012f68 <_dtoa_r+0x838>
 8012f3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012f42:	0d12      	lsrs	r2, r2, #20
 8012f44:	0512      	lsls	r2, r2, #20
 8012f46:	b18a      	cbz	r2, 8012f6c <_dtoa_r+0x83c>
 8012f48:	9b05      	ldr	r3, [sp, #20]
 8012f4a:	3301      	adds	r3, #1
 8012f4c:	9305      	str	r3, [sp, #20]
 8012f4e:	9b06      	ldr	r3, [sp, #24]
 8012f50:	3301      	adds	r3, #1
 8012f52:	9306      	str	r3, [sp, #24]
 8012f54:	2301      	movs	r3, #1
 8012f56:	930a      	str	r3, [sp, #40]	; 0x28
 8012f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	f47f af6f 	bne.w	8012e3e <_dtoa_r+0x70e>
 8012f60:	2001      	movs	r0, #1
 8012f62:	e774      	b.n	8012e4e <_dtoa_r+0x71e>
 8012f64:	2300      	movs	r3, #0
 8012f66:	e7f6      	b.n	8012f56 <_dtoa_r+0x826>
 8012f68:	9b02      	ldr	r3, [sp, #8]
 8012f6a:	e7f4      	b.n	8012f56 <_dtoa_r+0x826>
 8012f6c:	920a      	str	r2, [sp, #40]	; 0x28
 8012f6e:	e7f3      	b.n	8012f58 <_dtoa_r+0x828>
 8012f70:	d081      	beq.n	8012e76 <_dtoa_r+0x746>
 8012f72:	4610      	mov	r0, r2
 8012f74:	301c      	adds	r0, #28
 8012f76:	e777      	b.n	8012e68 <_dtoa_r+0x738>
 8012f78:	f1b9 0f00 	cmp.w	r9, #0
 8012f7c:	dc37      	bgt.n	8012fee <_dtoa_r+0x8be>
 8012f7e:	9b07      	ldr	r3, [sp, #28]
 8012f80:	2b02      	cmp	r3, #2
 8012f82:	dd34      	ble.n	8012fee <_dtoa_r+0x8be>
 8012f84:	46ca      	mov	sl, r9
 8012f86:	f1ba 0f00 	cmp.w	sl, #0
 8012f8a:	d10d      	bne.n	8012fa8 <_dtoa_r+0x878>
 8012f8c:	4621      	mov	r1, r4
 8012f8e:	4653      	mov	r3, sl
 8012f90:	2205      	movs	r2, #5
 8012f92:	4630      	mov	r0, r6
 8012f94:	f000 fbea 	bl	801376c <__multadd>
 8012f98:	4601      	mov	r1, r0
 8012f9a:	4604      	mov	r4, r0
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	f000 fe01 	bl	8013ba4 <__mcmp>
 8012fa2:	2800      	cmp	r0, #0
 8012fa4:	f73f adde 	bgt.w	8012b64 <_dtoa_r+0x434>
 8012fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012faa:	f8dd 8000 	ldr.w	r8, [sp]
 8012fae:	ea6f 0b03 	mvn.w	fp, r3
 8012fb2:	f04f 0900 	mov.w	r9, #0
 8012fb6:	4621      	mov	r1, r4
 8012fb8:	4630      	mov	r0, r6
 8012fba:	f000 fbb5 	bl	8013728 <_Bfree>
 8012fbe:	2f00      	cmp	r7, #0
 8012fc0:	f43f aea7 	beq.w	8012d12 <_dtoa_r+0x5e2>
 8012fc4:	f1b9 0f00 	cmp.w	r9, #0
 8012fc8:	d005      	beq.n	8012fd6 <_dtoa_r+0x8a6>
 8012fca:	45b9      	cmp	r9, r7
 8012fcc:	d003      	beq.n	8012fd6 <_dtoa_r+0x8a6>
 8012fce:	4649      	mov	r1, r9
 8012fd0:	4630      	mov	r0, r6
 8012fd2:	f000 fba9 	bl	8013728 <_Bfree>
 8012fd6:	4639      	mov	r1, r7
 8012fd8:	4630      	mov	r0, r6
 8012fda:	f000 fba5 	bl	8013728 <_Bfree>
 8012fde:	e698      	b.n	8012d12 <_dtoa_r+0x5e2>
 8012fe0:	2400      	movs	r4, #0
 8012fe2:	4627      	mov	r7, r4
 8012fe4:	e7e0      	b.n	8012fa8 <_dtoa_r+0x878>
 8012fe6:	46bb      	mov	fp, r7
 8012fe8:	4604      	mov	r4, r0
 8012fea:	4607      	mov	r7, r0
 8012fec:	e5ba      	b.n	8012b64 <_dtoa_r+0x434>
 8012fee:	9b08      	ldr	r3, [sp, #32]
 8012ff0:	46ca      	mov	sl, r9
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	f000 8100 	beq.w	80131f8 <_dtoa_r+0xac8>
 8012ff8:	f1b8 0f00 	cmp.w	r8, #0
 8012ffc:	dd05      	ble.n	801300a <_dtoa_r+0x8da>
 8012ffe:	4639      	mov	r1, r7
 8013000:	4642      	mov	r2, r8
 8013002:	4630      	mov	r0, r6
 8013004:	f000 fd62 	bl	8013acc <__lshift>
 8013008:	4607      	mov	r7, r0
 801300a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801300c:	2b00      	cmp	r3, #0
 801300e:	d05d      	beq.n	80130cc <_dtoa_r+0x99c>
 8013010:	6879      	ldr	r1, [r7, #4]
 8013012:	4630      	mov	r0, r6
 8013014:	f000 fb48 	bl	80136a8 <_Balloc>
 8013018:	4680      	mov	r8, r0
 801301a:	b928      	cbnz	r0, 8013028 <_dtoa_r+0x8f8>
 801301c:	4b82      	ldr	r3, [pc, #520]	; (8013228 <_dtoa_r+0xaf8>)
 801301e:	4602      	mov	r2, r0
 8013020:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013024:	f7ff bb9a 	b.w	801275c <_dtoa_r+0x2c>
 8013028:	693a      	ldr	r2, [r7, #16]
 801302a:	3202      	adds	r2, #2
 801302c:	0092      	lsls	r2, r2, #2
 801302e:	f107 010c 	add.w	r1, r7, #12
 8013032:	300c      	adds	r0, #12
 8013034:	f000 fb2a 	bl	801368c <memcpy>
 8013038:	2201      	movs	r2, #1
 801303a:	4641      	mov	r1, r8
 801303c:	4630      	mov	r0, r6
 801303e:	f000 fd45 	bl	8013acc <__lshift>
 8013042:	9b00      	ldr	r3, [sp, #0]
 8013044:	3301      	adds	r3, #1
 8013046:	9305      	str	r3, [sp, #20]
 8013048:	9b00      	ldr	r3, [sp, #0]
 801304a:	4453      	add	r3, sl
 801304c:	9309      	str	r3, [sp, #36]	; 0x24
 801304e:	9b02      	ldr	r3, [sp, #8]
 8013050:	f003 0301 	and.w	r3, r3, #1
 8013054:	46b9      	mov	r9, r7
 8013056:	9308      	str	r3, [sp, #32]
 8013058:	4607      	mov	r7, r0
 801305a:	9b05      	ldr	r3, [sp, #20]
 801305c:	4621      	mov	r1, r4
 801305e:	3b01      	subs	r3, #1
 8013060:	4628      	mov	r0, r5
 8013062:	9302      	str	r3, [sp, #8]
 8013064:	f7ff fad8 	bl	8012618 <quorem>
 8013068:	4603      	mov	r3, r0
 801306a:	3330      	adds	r3, #48	; 0x30
 801306c:	9006      	str	r0, [sp, #24]
 801306e:	4649      	mov	r1, r9
 8013070:	4628      	mov	r0, r5
 8013072:	930a      	str	r3, [sp, #40]	; 0x28
 8013074:	f000 fd96 	bl	8013ba4 <__mcmp>
 8013078:	463a      	mov	r2, r7
 801307a:	4682      	mov	sl, r0
 801307c:	4621      	mov	r1, r4
 801307e:	4630      	mov	r0, r6
 8013080:	f000 fdac 	bl	8013bdc <__mdiff>
 8013084:	68c2      	ldr	r2, [r0, #12]
 8013086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013088:	4680      	mov	r8, r0
 801308a:	bb0a      	cbnz	r2, 80130d0 <_dtoa_r+0x9a0>
 801308c:	4601      	mov	r1, r0
 801308e:	4628      	mov	r0, r5
 8013090:	f000 fd88 	bl	8013ba4 <__mcmp>
 8013094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013096:	4602      	mov	r2, r0
 8013098:	4641      	mov	r1, r8
 801309a:	4630      	mov	r0, r6
 801309c:	920e      	str	r2, [sp, #56]	; 0x38
 801309e:	930a      	str	r3, [sp, #40]	; 0x28
 80130a0:	f000 fb42 	bl	8013728 <_Bfree>
 80130a4:	9b07      	ldr	r3, [sp, #28]
 80130a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80130a8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80130ac:	ea43 0102 	orr.w	r1, r3, r2
 80130b0:	9b08      	ldr	r3, [sp, #32]
 80130b2:	430b      	orrs	r3, r1
 80130b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130b6:	d10d      	bne.n	80130d4 <_dtoa_r+0x9a4>
 80130b8:	2b39      	cmp	r3, #57	; 0x39
 80130ba:	d029      	beq.n	8013110 <_dtoa_r+0x9e0>
 80130bc:	f1ba 0f00 	cmp.w	sl, #0
 80130c0:	dd01      	ble.n	80130c6 <_dtoa_r+0x996>
 80130c2:	9b06      	ldr	r3, [sp, #24]
 80130c4:	3331      	adds	r3, #49	; 0x31
 80130c6:	9a02      	ldr	r2, [sp, #8]
 80130c8:	7013      	strb	r3, [r2, #0]
 80130ca:	e774      	b.n	8012fb6 <_dtoa_r+0x886>
 80130cc:	4638      	mov	r0, r7
 80130ce:	e7b8      	b.n	8013042 <_dtoa_r+0x912>
 80130d0:	2201      	movs	r2, #1
 80130d2:	e7e1      	b.n	8013098 <_dtoa_r+0x968>
 80130d4:	f1ba 0f00 	cmp.w	sl, #0
 80130d8:	db06      	blt.n	80130e8 <_dtoa_r+0x9b8>
 80130da:	9907      	ldr	r1, [sp, #28]
 80130dc:	ea41 0a0a 	orr.w	sl, r1, sl
 80130e0:	9908      	ldr	r1, [sp, #32]
 80130e2:	ea5a 0101 	orrs.w	r1, sl, r1
 80130e6:	d120      	bne.n	801312a <_dtoa_r+0x9fa>
 80130e8:	2a00      	cmp	r2, #0
 80130ea:	ddec      	ble.n	80130c6 <_dtoa_r+0x996>
 80130ec:	4629      	mov	r1, r5
 80130ee:	2201      	movs	r2, #1
 80130f0:	4630      	mov	r0, r6
 80130f2:	9305      	str	r3, [sp, #20]
 80130f4:	f000 fcea 	bl	8013acc <__lshift>
 80130f8:	4621      	mov	r1, r4
 80130fa:	4605      	mov	r5, r0
 80130fc:	f000 fd52 	bl	8013ba4 <__mcmp>
 8013100:	2800      	cmp	r0, #0
 8013102:	9b05      	ldr	r3, [sp, #20]
 8013104:	dc02      	bgt.n	801310c <_dtoa_r+0x9dc>
 8013106:	d1de      	bne.n	80130c6 <_dtoa_r+0x996>
 8013108:	07da      	lsls	r2, r3, #31
 801310a:	d5dc      	bpl.n	80130c6 <_dtoa_r+0x996>
 801310c:	2b39      	cmp	r3, #57	; 0x39
 801310e:	d1d8      	bne.n	80130c2 <_dtoa_r+0x992>
 8013110:	9a02      	ldr	r2, [sp, #8]
 8013112:	2339      	movs	r3, #57	; 0x39
 8013114:	7013      	strb	r3, [r2, #0]
 8013116:	4643      	mov	r3, r8
 8013118:	4698      	mov	r8, r3
 801311a:	3b01      	subs	r3, #1
 801311c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013120:	2a39      	cmp	r2, #57	; 0x39
 8013122:	d051      	beq.n	80131c8 <_dtoa_r+0xa98>
 8013124:	3201      	adds	r2, #1
 8013126:	701a      	strb	r2, [r3, #0]
 8013128:	e745      	b.n	8012fb6 <_dtoa_r+0x886>
 801312a:	2a00      	cmp	r2, #0
 801312c:	dd03      	ble.n	8013136 <_dtoa_r+0xa06>
 801312e:	2b39      	cmp	r3, #57	; 0x39
 8013130:	d0ee      	beq.n	8013110 <_dtoa_r+0x9e0>
 8013132:	3301      	adds	r3, #1
 8013134:	e7c7      	b.n	80130c6 <_dtoa_r+0x996>
 8013136:	9a05      	ldr	r2, [sp, #20]
 8013138:	9909      	ldr	r1, [sp, #36]	; 0x24
 801313a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801313e:	428a      	cmp	r2, r1
 8013140:	d02b      	beq.n	801319a <_dtoa_r+0xa6a>
 8013142:	4629      	mov	r1, r5
 8013144:	2300      	movs	r3, #0
 8013146:	220a      	movs	r2, #10
 8013148:	4630      	mov	r0, r6
 801314a:	f000 fb0f 	bl	801376c <__multadd>
 801314e:	45b9      	cmp	r9, r7
 8013150:	4605      	mov	r5, r0
 8013152:	f04f 0300 	mov.w	r3, #0
 8013156:	f04f 020a 	mov.w	r2, #10
 801315a:	4649      	mov	r1, r9
 801315c:	4630      	mov	r0, r6
 801315e:	d107      	bne.n	8013170 <_dtoa_r+0xa40>
 8013160:	f000 fb04 	bl	801376c <__multadd>
 8013164:	4681      	mov	r9, r0
 8013166:	4607      	mov	r7, r0
 8013168:	9b05      	ldr	r3, [sp, #20]
 801316a:	3301      	adds	r3, #1
 801316c:	9305      	str	r3, [sp, #20]
 801316e:	e774      	b.n	801305a <_dtoa_r+0x92a>
 8013170:	f000 fafc 	bl	801376c <__multadd>
 8013174:	4639      	mov	r1, r7
 8013176:	4681      	mov	r9, r0
 8013178:	2300      	movs	r3, #0
 801317a:	220a      	movs	r2, #10
 801317c:	4630      	mov	r0, r6
 801317e:	f000 faf5 	bl	801376c <__multadd>
 8013182:	4607      	mov	r7, r0
 8013184:	e7f0      	b.n	8013168 <_dtoa_r+0xa38>
 8013186:	f1ba 0f00 	cmp.w	sl, #0
 801318a:	9a00      	ldr	r2, [sp, #0]
 801318c:	bfcc      	ite	gt
 801318e:	46d0      	movgt	r8, sl
 8013190:	f04f 0801 	movle.w	r8, #1
 8013194:	4490      	add	r8, r2
 8013196:	f04f 0900 	mov.w	r9, #0
 801319a:	4629      	mov	r1, r5
 801319c:	2201      	movs	r2, #1
 801319e:	4630      	mov	r0, r6
 80131a0:	9302      	str	r3, [sp, #8]
 80131a2:	f000 fc93 	bl	8013acc <__lshift>
 80131a6:	4621      	mov	r1, r4
 80131a8:	4605      	mov	r5, r0
 80131aa:	f000 fcfb 	bl	8013ba4 <__mcmp>
 80131ae:	2800      	cmp	r0, #0
 80131b0:	dcb1      	bgt.n	8013116 <_dtoa_r+0x9e6>
 80131b2:	d102      	bne.n	80131ba <_dtoa_r+0xa8a>
 80131b4:	9b02      	ldr	r3, [sp, #8]
 80131b6:	07db      	lsls	r3, r3, #31
 80131b8:	d4ad      	bmi.n	8013116 <_dtoa_r+0x9e6>
 80131ba:	4643      	mov	r3, r8
 80131bc:	4698      	mov	r8, r3
 80131be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80131c2:	2a30      	cmp	r2, #48	; 0x30
 80131c4:	d0fa      	beq.n	80131bc <_dtoa_r+0xa8c>
 80131c6:	e6f6      	b.n	8012fb6 <_dtoa_r+0x886>
 80131c8:	9a00      	ldr	r2, [sp, #0]
 80131ca:	429a      	cmp	r2, r3
 80131cc:	d1a4      	bne.n	8013118 <_dtoa_r+0x9e8>
 80131ce:	f10b 0b01 	add.w	fp, fp, #1
 80131d2:	2331      	movs	r3, #49	; 0x31
 80131d4:	e778      	b.n	80130c8 <_dtoa_r+0x998>
 80131d6:	4b15      	ldr	r3, [pc, #84]	; (801322c <_dtoa_r+0xafc>)
 80131d8:	f7ff bb12 	b.w	8012800 <_dtoa_r+0xd0>
 80131dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80131de:	2b00      	cmp	r3, #0
 80131e0:	f47f aaee 	bne.w	80127c0 <_dtoa_r+0x90>
 80131e4:	4b12      	ldr	r3, [pc, #72]	; (8013230 <_dtoa_r+0xb00>)
 80131e6:	f7ff bb0b 	b.w	8012800 <_dtoa_r+0xd0>
 80131ea:	f1ba 0f00 	cmp.w	sl, #0
 80131ee:	dc03      	bgt.n	80131f8 <_dtoa_r+0xac8>
 80131f0:	9b07      	ldr	r3, [sp, #28]
 80131f2:	2b02      	cmp	r3, #2
 80131f4:	f73f aec7 	bgt.w	8012f86 <_dtoa_r+0x856>
 80131f8:	f8dd 8000 	ldr.w	r8, [sp]
 80131fc:	4621      	mov	r1, r4
 80131fe:	4628      	mov	r0, r5
 8013200:	f7ff fa0a 	bl	8012618 <quorem>
 8013204:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013208:	f808 3b01 	strb.w	r3, [r8], #1
 801320c:	9a00      	ldr	r2, [sp, #0]
 801320e:	eba8 0202 	sub.w	r2, r8, r2
 8013212:	4592      	cmp	sl, r2
 8013214:	ddb7      	ble.n	8013186 <_dtoa_r+0xa56>
 8013216:	4629      	mov	r1, r5
 8013218:	2300      	movs	r3, #0
 801321a:	220a      	movs	r2, #10
 801321c:	4630      	mov	r0, r6
 801321e:	f000 faa5 	bl	801376c <__multadd>
 8013222:	4605      	mov	r5, r0
 8013224:	e7ea      	b.n	80131fc <_dtoa_r+0xacc>
 8013226:	bf00      	nop
 8013228:	08014f8f 	.word	0x08014f8f
 801322c:	08014ee8 	.word	0x08014ee8
 8013230:	08014f0c 	.word	0x08014f0c

08013234 <__sflush_r>:
 8013234:	898a      	ldrh	r2, [r1, #12]
 8013236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801323a:	4605      	mov	r5, r0
 801323c:	0710      	lsls	r0, r2, #28
 801323e:	460c      	mov	r4, r1
 8013240:	d458      	bmi.n	80132f4 <__sflush_r+0xc0>
 8013242:	684b      	ldr	r3, [r1, #4]
 8013244:	2b00      	cmp	r3, #0
 8013246:	dc05      	bgt.n	8013254 <__sflush_r+0x20>
 8013248:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801324a:	2b00      	cmp	r3, #0
 801324c:	dc02      	bgt.n	8013254 <__sflush_r+0x20>
 801324e:	2000      	movs	r0, #0
 8013250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013254:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013256:	2e00      	cmp	r6, #0
 8013258:	d0f9      	beq.n	801324e <__sflush_r+0x1a>
 801325a:	2300      	movs	r3, #0
 801325c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013260:	682f      	ldr	r7, [r5, #0]
 8013262:	602b      	str	r3, [r5, #0]
 8013264:	d032      	beq.n	80132cc <__sflush_r+0x98>
 8013266:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013268:	89a3      	ldrh	r3, [r4, #12]
 801326a:	075a      	lsls	r2, r3, #29
 801326c:	d505      	bpl.n	801327a <__sflush_r+0x46>
 801326e:	6863      	ldr	r3, [r4, #4]
 8013270:	1ac0      	subs	r0, r0, r3
 8013272:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013274:	b10b      	cbz	r3, 801327a <__sflush_r+0x46>
 8013276:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013278:	1ac0      	subs	r0, r0, r3
 801327a:	2300      	movs	r3, #0
 801327c:	4602      	mov	r2, r0
 801327e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013280:	6a21      	ldr	r1, [r4, #32]
 8013282:	4628      	mov	r0, r5
 8013284:	47b0      	blx	r6
 8013286:	1c43      	adds	r3, r0, #1
 8013288:	89a3      	ldrh	r3, [r4, #12]
 801328a:	d106      	bne.n	801329a <__sflush_r+0x66>
 801328c:	6829      	ldr	r1, [r5, #0]
 801328e:	291d      	cmp	r1, #29
 8013290:	d82c      	bhi.n	80132ec <__sflush_r+0xb8>
 8013292:	4a2a      	ldr	r2, [pc, #168]	; (801333c <__sflush_r+0x108>)
 8013294:	40ca      	lsrs	r2, r1
 8013296:	07d6      	lsls	r6, r2, #31
 8013298:	d528      	bpl.n	80132ec <__sflush_r+0xb8>
 801329a:	2200      	movs	r2, #0
 801329c:	6062      	str	r2, [r4, #4]
 801329e:	04d9      	lsls	r1, r3, #19
 80132a0:	6922      	ldr	r2, [r4, #16]
 80132a2:	6022      	str	r2, [r4, #0]
 80132a4:	d504      	bpl.n	80132b0 <__sflush_r+0x7c>
 80132a6:	1c42      	adds	r2, r0, #1
 80132a8:	d101      	bne.n	80132ae <__sflush_r+0x7a>
 80132aa:	682b      	ldr	r3, [r5, #0]
 80132ac:	b903      	cbnz	r3, 80132b0 <__sflush_r+0x7c>
 80132ae:	6560      	str	r0, [r4, #84]	; 0x54
 80132b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80132b2:	602f      	str	r7, [r5, #0]
 80132b4:	2900      	cmp	r1, #0
 80132b6:	d0ca      	beq.n	801324e <__sflush_r+0x1a>
 80132b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132bc:	4299      	cmp	r1, r3
 80132be:	d002      	beq.n	80132c6 <__sflush_r+0x92>
 80132c0:	4628      	mov	r0, r5
 80132c2:	f000 fd7f 	bl	8013dc4 <_free_r>
 80132c6:	2000      	movs	r0, #0
 80132c8:	6360      	str	r0, [r4, #52]	; 0x34
 80132ca:	e7c1      	b.n	8013250 <__sflush_r+0x1c>
 80132cc:	6a21      	ldr	r1, [r4, #32]
 80132ce:	2301      	movs	r3, #1
 80132d0:	4628      	mov	r0, r5
 80132d2:	47b0      	blx	r6
 80132d4:	1c41      	adds	r1, r0, #1
 80132d6:	d1c7      	bne.n	8013268 <__sflush_r+0x34>
 80132d8:	682b      	ldr	r3, [r5, #0]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d0c4      	beq.n	8013268 <__sflush_r+0x34>
 80132de:	2b1d      	cmp	r3, #29
 80132e0:	d001      	beq.n	80132e6 <__sflush_r+0xb2>
 80132e2:	2b16      	cmp	r3, #22
 80132e4:	d101      	bne.n	80132ea <__sflush_r+0xb6>
 80132e6:	602f      	str	r7, [r5, #0]
 80132e8:	e7b1      	b.n	801324e <__sflush_r+0x1a>
 80132ea:	89a3      	ldrh	r3, [r4, #12]
 80132ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132f0:	81a3      	strh	r3, [r4, #12]
 80132f2:	e7ad      	b.n	8013250 <__sflush_r+0x1c>
 80132f4:	690f      	ldr	r7, [r1, #16]
 80132f6:	2f00      	cmp	r7, #0
 80132f8:	d0a9      	beq.n	801324e <__sflush_r+0x1a>
 80132fa:	0793      	lsls	r3, r2, #30
 80132fc:	680e      	ldr	r6, [r1, #0]
 80132fe:	bf08      	it	eq
 8013300:	694b      	ldreq	r3, [r1, #20]
 8013302:	600f      	str	r7, [r1, #0]
 8013304:	bf18      	it	ne
 8013306:	2300      	movne	r3, #0
 8013308:	eba6 0807 	sub.w	r8, r6, r7
 801330c:	608b      	str	r3, [r1, #8]
 801330e:	f1b8 0f00 	cmp.w	r8, #0
 8013312:	dd9c      	ble.n	801324e <__sflush_r+0x1a>
 8013314:	6a21      	ldr	r1, [r4, #32]
 8013316:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013318:	4643      	mov	r3, r8
 801331a:	463a      	mov	r2, r7
 801331c:	4628      	mov	r0, r5
 801331e:	47b0      	blx	r6
 8013320:	2800      	cmp	r0, #0
 8013322:	dc06      	bgt.n	8013332 <__sflush_r+0xfe>
 8013324:	89a3      	ldrh	r3, [r4, #12]
 8013326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801332a:	81a3      	strh	r3, [r4, #12]
 801332c:	f04f 30ff 	mov.w	r0, #4294967295
 8013330:	e78e      	b.n	8013250 <__sflush_r+0x1c>
 8013332:	4407      	add	r7, r0
 8013334:	eba8 0800 	sub.w	r8, r8, r0
 8013338:	e7e9      	b.n	801330e <__sflush_r+0xda>
 801333a:	bf00      	nop
 801333c:	20400001 	.word	0x20400001

08013340 <_fflush_r>:
 8013340:	b538      	push	{r3, r4, r5, lr}
 8013342:	690b      	ldr	r3, [r1, #16]
 8013344:	4605      	mov	r5, r0
 8013346:	460c      	mov	r4, r1
 8013348:	b913      	cbnz	r3, 8013350 <_fflush_r+0x10>
 801334a:	2500      	movs	r5, #0
 801334c:	4628      	mov	r0, r5
 801334e:	bd38      	pop	{r3, r4, r5, pc}
 8013350:	b118      	cbz	r0, 801335a <_fflush_r+0x1a>
 8013352:	6983      	ldr	r3, [r0, #24]
 8013354:	b90b      	cbnz	r3, 801335a <_fflush_r+0x1a>
 8013356:	f000 f887 	bl	8013468 <__sinit>
 801335a:	4b14      	ldr	r3, [pc, #80]	; (80133ac <_fflush_r+0x6c>)
 801335c:	429c      	cmp	r4, r3
 801335e:	d11b      	bne.n	8013398 <_fflush_r+0x58>
 8013360:	686c      	ldr	r4, [r5, #4]
 8013362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d0ef      	beq.n	801334a <_fflush_r+0xa>
 801336a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801336c:	07d0      	lsls	r0, r2, #31
 801336e:	d404      	bmi.n	801337a <_fflush_r+0x3a>
 8013370:	0599      	lsls	r1, r3, #22
 8013372:	d402      	bmi.n	801337a <_fflush_r+0x3a>
 8013374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013376:	f000 f91a 	bl	80135ae <__retarget_lock_acquire_recursive>
 801337a:	4628      	mov	r0, r5
 801337c:	4621      	mov	r1, r4
 801337e:	f7ff ff59 	bl	8013234 <__sflush_r>
 8013382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013384:	07da      	lsls	r2, r3, #31
 8013386:	4605      	mov	r5, r0
 8013388:	d4e0      	bmi.n	801334c <_fflush_r+0xc>
 801338a:	89a3      	ldrh	r3, [r4, #12]
 801338c:	059b      	lsls	r3, r3, #22
 801338e:	d4dd      	bmi.n	801334c <_fflush_r+0xc>
 8013390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013392:	f000 f90d 	bl	80135b0 <__retarget_lock_release_recursive>
 8013396:	e7d9      	b.n	801334c <_fflush_r+0xc>
 8013398:	4b05      	ldr	r3, [pc, #20]	; (80133b0 <_fflush_r+0x70>)
 801339a:	429c      	cmp	r4, r3
 801339c:	d101      	bne.n	80133a2 <_fflush_r+0x62>
 801339e:	68ac      	ldr	r4, [r5, #8]
 80133a0:	e7df      	b.n	8013362 <_fflush_r+0x22>
 80133a2:	4b04      	ldr	r3, [pc, #16]	; (80133b4 <_fflush_r+0x74>)
 80133a4:	429c      	cmp	r4, r3
 80133a6:	bf08      	it	eq
 80133a8:	68ec      	ldreq	r4, [r5, #12]
 80133aa:	e7da      	b.n	8013362 <_fflush_r+0x22>
 80133ac:	08014fc0 	.word	0x08014fc0
 80133b0:	08014fe0 	.word	0x08014fe0
 80133b4:	08014fa0 	.word	0x08014fa0

080133b8 <std>:
 80133b8:	2300      	movs	r3, #0
 80133ba:	b510      	push	{r4, lr}
 80133bc:	4604      	mov	r4, r0
 80133be:	e9c0 3300 	strd	r3, r3, [r0]
 80133c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80133c6:	6083      	str	r3, [r0, #8]
 80133c8:	8181      	strh	r1, [r0, #12]
 80133ca:	6643      	str	r3, [r0, #100]	; 0x64
 80133cc:	81c2      	strh	r2, [r0, #14]
 80133ce:	6183      	str	r3, [r0, #24]
 80133d0:	4619      	mov	r1, r3
 80133d2:	2208      	movs	r2, #8
 80133d4:	305c      	adds	r0, #92	; 0x5c
 80133d6:	f7fe fb85 	bl	8011ae4 <memset>
 80133da:	4b05      	ldr	r3, [pc, #20]	; (80133f0 <std+0x38>)
 80133dc:	6263      	str	r3, [r4, #36]	; 0x24
 80133de:	4b05      	ldr	r3, [pc, #20]	; (80133f4 <std+0x3c>)
 80133e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80133e2:	4b05      	ldr	r3, [pc, #20]	; (80133f8 <std+0x40>)
 80133e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80133e6:	4b05      	ldr	r3, [pc, #20]	; (80133fc <std+0x44>)
 80133e8:	6224      	str	r4, [r4, #32]
 80133ea:	6323      	str	r3, [r4, #48]	; 0x30
 80133ec:	bd10      	pop	{r4, pc}
 80133ee:	bf00      	nop
 80133f0:	080141ed 	.word	0x080141ed
 80133f4:	0801420f 	.word	0x0801420f
 80133f8:	08014247 	.word	0x08014247
 80133fc:	0801426b 	.word	0x0801426b

08013400 <_cleanup_r>:
 8013400:	4901      	ldr	r1, [pc, #4]	; (8013408 <_cleanup_r+0x8>)
 8013402:	f000 b8af 	b.w	8013564 <_fwalk_reent>
 8013406:	bf00      	nop
 8013408:	08013341 	.word	0x08013341

0801340c <__sfmoreglue>:
 801340c:	b570      	push	{r4, r5, r6, lr}
 801340e:	1e4a      	subs	r2, r1, #1
 8013410:	2568      	movs	r5, #104	; 0x68
 8013412:	4355      	muls	r5, r2
 8013414:	460e      	mov	r6, r1
 8013416:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801341a:	f000 fd23 	bl	8013e64 <_malloc_r>
 801341e:	4604      	mov	r4, r0
 8013420:	b140      	cbz	r0, 8013434 <__sfmoreglue+0x28>
 8013422:	2100      	movs	r1, #0
 8013424:	e9c0 1600 	strd	r1, r6, [r0]
 8013428:	300c      	adds	r0, #12
 801342a:	60a0      	str	r0, [r4, #8]
 801342c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013430:	f7fe fb58 	bl	8011ae4 <memset>
 8013434:	4620      	mov	r0, r4
 8013436:	bd70      	pop	{r4, r5, r6, pc}

08013438 <__sfp_lock_acquire>:
 8013438:	4801      	ldr	r0, [pc, #4]	; (8013440 <__sfp_lock_acquire+0x8>)
 801343a:	f000 b8b8 	b.w	80135ae <__retarget_lock_acquire_recursive>
 801343e:	bf00      	nop
 8013440:	24000da8 	.word	0x24000da8

08013444 <__sfp_lock_release>:
 8013444:	4801      	ldr	r0, [pc, #4]	; (801344c <__sfp_lock_release+0x8>)
 8013446:	f000 b8b3 	b.w	80135b0 <__retarget_lock_release_recursive>
 801344a:	bf00      	nop
 801344c:	24000da8 	.word	0x24000da8

08013450 <__sinit_lock_acquire>:
 8013450:	4801      	ldr	r0, [pc, #4]	; (8013458 <__sinit_lock_acquire+0x8>)
 8013452:	f000 b8ac 	b.w	80135ae <__retarget_lock_acquire_recursive>
 8013456:	bf00      	nop
 8013458:	24000da3 	.word	0x24000da3

0801345c <__sinit_lock_release>:
 801345c:	4801      	ldr	r0, [pc, #4]	; (8013464 <__sinit_lock_release+0x8>)
 801345e:	f000 b8a7 	b.w	80135b0 <__retarget_lock_release_recursive>
 8013462:	bf00      	nop
 8013464:	24000da3 	.word	0x24000da3

08013468 <__sinit>:
 8013468:	b510      	push	{r4, lr}
 801346a:	4604      	mov	r4, r0
 801346c:	f7ff fff0 	bl	8013450 <__sinit_lock_acquire>
 8013470:	69a3      	ldr	r3, [r4, #24]
 8013472:	b11b      	cbz	r3, 801347c <__sinit+0x14>
 8013474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013478:	f7ff bff0 	b.w	801345c <__sinit_lock_release>
 801347c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013480:	6523      	str	r3, [r4, #80]	; 0x50
 8013482:	4b13      	ldr	r3, [pc, #76]	; (80134d0 <__sinit+0x68>)
 8013484:	4a13      	ldr	r2, [pc, #76]	; (80134d4 <__sinit+0x6c>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	62a2      	str	r2, [r4, #40]	; 0x28
 801348a:	42a3      	cmp	r3, r4
 801348c:	bf04      	itt	eq
 801348e:	2301      	moveq	r3, #1
 8013490:	61a3      	streq	r3, [r4, #24]
 8013492:	4620      	mov	r0, r4
 8013494:	f000 f820 	bl	80134d8 <__sfp>
 8013498:	6060      	str	r0, [r4, #4]
 801349a:	4620      	mov	r0, r4
 801349c:	f000 f81c 	bl	80134d8 <__sfp>
 80134a0:	60a0      	str	r0, [r4, #8]
 80134a2:	4620      	mov	r0, r4
 80134a4:	f000 f818 	bl	80134d8 <__sfp>
 80134a8:	2200      	movs	r2, #0
 80134aa:	60e0      	str	r0, [r4, #12]
 80134ac:	2104      	movs	r1, #4
 80134ae:	6860      	ldr	r0, [r4, #4]
 80134b0:	f7ff ff82 	bl	80133b8 <std>
 80134b4:	68a0      	ldr	r0, [r4, #8]
 80134b6:	2201      	movs	r2, #1
 80134b8:	2109      	movs	r1, #9
 80134ba:	f7ff ff7d 	bl	80133b8 <std>
 80134be:	68e0      	ldr	r0, [r4, #12]
 80134c0:	2202      	movs	r2, #2
 80134c2:	2112      	movs	r1, #18
 80134c4:	f7ff ff78 	bl	80133b8 <std>
 80134c8:	2301      	movs	r3, #1
 80134ca:	61a3      	str	r3, [r4, #24]
 80134cc:	e7d2      	b.n	8013474 <__sinit+0xc>
 80134ce:	bf00      	nop
 80134d0:	08014ed4 	.word	0x08014ed4
 80134d4:	08013401 	.word	0x08013401

080134d8 <__sfp>:
 80134d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134da:	4607      	mov	r7, r0
 80134dc:	f7ff ffac 	bl	8013438 <__sfp_lock_acquire>
 80134e0:	4b1e      	ldr	r3, [pc, #120]	; (801355c <__sfp+0x84>)
 80134e2:	681e      	ldr	r6, [r3, #0]
 80134e4:	69b3      	ldr	r3, [r6, #24]
 80134e6:	b913      	cbnz	r3, 80134ee <__sfp+0x16>
 80134e8:	4630      	mov	r0, r6
 80134ea:	f7ff ffbd 	bl	8013468 <__sinit>
 80134ee:	3648      	adds	r6, #72	; 0x48
 80134f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80134f4:	3b01      	subs	r3, #1
 80134f6:	d503      	bpl.n	8013500 <__sfp+0x28>
 80134f8:	6833      	ldr	r3, [r6, #0]
 80134fa:	b30b      	cbz	r3, 8013540 <__sfp+0x68>
 80134fc:	6836      	ldr	r6, [r6, #0]
 80134fe:	e7f7      	b.n	80134f0 <__sfp+0x18>
 8013500:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013504:	b9d5      	cbnz	r5, 801353c <__sfp+0x64>
 8013506:	4b16      	ldr	r3, [pc, #88]	; (8013560 <__sfp+0x88>)
 8013508:	60e3      	str	r3, [r4, #12]
 801350a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801350e:	6665      	str	r5, [r4, #100]	; 0x64
 8013510:	f000 f84c 	bl	80135ac <__retarget_lock_init_recursive>
 8013514:	f7ff ff96 	bl	8013444 <__sfp_lock_release>
 8013518:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801351c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013520:	6025      	str	r5, [r4, #0]
 8013522:	61a5      	str	r5, [r4, #24]
 8013524:	2208      	movs	r2, #8
 8013526:	4629      	mov	r1, r5
 8013528:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801352c:	f7fe fada 	bl	8011ae4 <memset>
 8013530:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013534:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013538:	4620      	mov	r0, r4
 801353a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801353c:	3468      	adds	r4, #104	; 0x68
 801353e:	e7d9      	b.n	80134f4 <__sfp+0x1c>
 8013540:	2104      	movs	r1, #4
 8013542:	4638      	mov	r0, r7
 8013544:	f7ff ff62 	bl	801340c <__sfmoreglue>
 8013548:	4604      	mov	r4, r0
 801354a:	6030      	str	r0, [r6, #0]
 801354c:	2800      	cmp	r0, #0
 801354e:	d1d5      	bne.n	80134fc <__sfp+0x24>
 8013550:	f7ff ff78 	bl	8013444 <__sfp_lock_release>
 8013554:	230c      	movs	r3, #12
 8013556:	603b      	str	r3, [r7, #0]
 8013558:	e7ee      	b.n	8013538 <__sfp+0x60>
 801355a:	bf00      	nop
 801355c:	08014ed4 	.word	0x08014ed4
 8013560:	ffff0001 	.word	0xffff0001

08013564 <_fwalk_reent>:
 8013564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013568:	4606      	mov	r6, r0
 801356a:	4688      	mov	r8, r1
 801356c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013570:	2700      	movs	r7, #0
 8013572:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013576:	f1b9 0901 	subs.w	r9, r9, #1
 801357a:	d505      	bpl.n	8013588 <_fwalk_reent+0x24>
 801357c:	6824      	ldr	r4, [r4, #0]
 801357e:	2c00      	cmp	r4, #0
 8013580:	d1f7      	bne.n	8013572 <_fwalk_reent+0xe>
 8013582:	4638      	mov	r0, r7
 8013584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013588:	89ab      	ldrh	r3, [r5, #12]
 801358a:	2b01      	cmp	r3, #1
 801358c:	d907      	bls.n	801359e <_fwalk_reent+0x3a>
 801358e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013592:	3301      	adds	r3, #1
 8013594:	d003      	beq.n	801359e <_fwalk_reent+0x3a>
 8013596:	4629      	mov	r1, r5
 8013598:	4630      	mov	r0, r6
 801359a:	47c0      	blx	r8
 801359c:	4307      	orrs	r7, r0
 801359e:	3568      	adds	r5, #104	; 0x68
 80135a0:	e7e9      	b.n	8013576 <_fwalk_reent+0x12>
	...

080135a4 <_localeconv_r>:
 80135a4:	4800      	ldr	r0, [pc, #0]	; (80135a8 <_localeconv_r+0x4>)
 80135a6:	4770      	bx	lr
 80135a8:	24000178 	.word	0x24000178

080135ac <__retarget_lock_init_recursive>:
 80135ac:	4770      	bx	lr

080135ae <__retarget_lock_acquire_recursive>:
 80135ae:	4770      	bx	lr

080135b0 <__retarget_lock_release_recursive>:
 80135b0:	4770      	bx	lr

080135b2 <__swhatbuf_r>:
 80135b2:	b570      	push	{r4, r5, r6, lr}
 80135b4:	460e      	mov	r6, r1
 80135b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135ba:	2900      	cmp	r1, #0
 80135bc:	b096      	sub	sp, #88	; 0x58
 80135be:	4614      	mov	r4, r2
 80135c0:	461d      	mov	r5, r3
 80135c2:	da07      	bge.n	80135d4 <__swhatbuf_r+0x22>
 80135c4:	2300      	movs	r3, #0
 80135c6:	602b      	str	r3, [r5, #0]
 80135c8:	89b3      	ldrh	r3, [r6, #12]
 80135ca:	061a      	lsls	r2, r3, #24
 80135cc:	d410      	bmi.n	80135f0 <__swhatbuf_r+0x3e>
 80135ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80135d2:	e00e      	b.n	80135f2 <__swhatbuf_r+0x40>
 80135d4:	466a      	mov	r2, sp
 80135d6:	f000 fe9f 	bl	8014318 <_fstat_r>
 80135da:	2800      	cmp	r0, #0
 80135dc:	dbf2      	blt.n	80135c4 <__swhatbuf_r+0x12>
 80135de:	9a01      	ldr	r2, [sp, #4]
 80135e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80135e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80135e8:	425a      	negs	r2, r3
 80135ea:	415a      	adcs	r2, r3
 80135ec:	602a      	str	r2, [r5, #0]
 80135ee:	e7ee      	b.n	80135ce <__swhatbuf_r+0x1c>
 80135f0:	2340      	movs	r3, #64	; 0x40
 80135f2:	2000      	movs	r0, #0
 80135f4:	6023      	str	r3, [r4, #0]
 80135f6:	b016      	add	sp, #88	; 0x58
 80135f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080135fc <__smakebuf_r>:
 80135fc:	898b      	ldrh	r3, [r1, #12]
 80135fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013600:	079d      	lsls	r5, r3, #30
 8013602:	4606      	mov	r6, r0
 8013604:	460c      	mov	r4, r1
 8013606:	d507      	bpl.n	8013618 <__smakebuf_r+0x1c>
 8013608:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801360c:	6023      	str	r3, [r4, #0]
 801360e:	6123      	str	r3, [r4, #16]
 8013610:	2301      	movs	r3, #1
 8013612:	6163      	str	r3, [r4, #20]
 8013614:	b002      	add	sp, #8
 8013616:	bd70      	pop	{r4, r5, r6, pc}
 8013618:	ab01      	add	r3, sp, #4
 801361a:	466a      	mov	r2, sp
 801361c:	f7ff ffc9 	bl	80135b2 <__swhatbuf_r>
 8013620:	9900      	ldr	r1, [sp, #0]
 8013622:	4605      	mov	r5, r0
 8013624:	4630      	mov	r0, r6
 8013626:	f000 fc1d 	bl	8013e64 <_malloc_r>
 801362a:	b948      	cbnz	r0, 8013640 <__smakebuf_r+0x44>
 801362c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013630:	059a      	lsls	r2, r3, #22
 8013632:	d4ef      	bmi.n	8013614 <__smakebuf_r+0x18>
 8013634:	f023 0303 	bic.w	r3, r3, #3
 8013638:	f043 0302 	orr.w	r3, r3, #2
 801363c:	81a3      	strh	r3, [r4, #12]
 801363e:	e7e3      	b.n	8013608 <__smakebuf_r+0xc>
 8013640:	4b0d      	ldr	r3, [pc, #52]	; (8013678 <__smakebuf_r+0x7c>)
 8013642:	62b3      	str	r3, [r6, #40]	; 0x28
 8013644:	89a3      	ldrh	r3, [r4, #12]
 8013646:	6020      	str	r0, [r4, #0]
 8013648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801364c:	81a3      	strh	r3, [r4, #12]
 801364e:	9b00      	ldr	r3, [sp, #0]
 8013650:	6163      	str	r3, [r4, #20]
 8013652:	9b01      	ldr	r3, [sp, #4]
 8013654:	6120      	str	r0, [r4, #16]
 8013656:	b15b      	cbz	r3, 8013670 <__smakebuf_r+0x74>
 8013658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801365c:	4630      	mov	r0, r6
 801365e:	f000 fe6d 	bl	801433c <_isatty_r>
 8013662:	b128      	cbz	r0, 8013670 <__smakebuf_r+0x74>
 8013664:	89a3      	ldrh	r3, [r4, #12]
 8013666:	f023 0303 	bic.w	r3, r3, #3
 801366a:	f043 0301 	orr.w	r3, r3, #1
 801366e:	81a3      	strh	r3, [r4, #12]
 8013670:	89a0      	ldrh	r0, [r4, #12]
 8013672:	4305      	orrs	r5, r0
 8013674:	81a5      	strh	r5, [r4, #12]
 8013676:	e7cd      	b.n	8013614 <__smakebuf_r+0x18>
 8013678:	08013401 	.word	0x08013401

0801367c <malloc>:
 801367c:	4b02      	ldr	r3, [pc, #8]	; (8013688 <malloc+0xc>)
 801367e:	4601      	mov	r1, r0
 8013680:	6818      	ldr	r0, [r3, #0]
 8013682:	f000 bbef 	b.w	8013e64 <_malloc_r>
 8013686:	bf00      	nop
 8013688:	24000024 	.word	0x24000024

0801368c <memcpy>:
 801368c:	440a      	add	r2, r1
 801368e:	4291      	cmp	r1, r2
 8013690:	f100 33ff 	add.w	r3, r0, #4294967295
 8013694:	d100      	bne.n	8013698 <memcpy+0xc>
 8013696:	4770      	bx	lr
 8013698:	b510      	push	{r4, lr}
 801369a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801369e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80136a2:	4291      	cmp	r1, r2
 80136a4:	d1f9      	bne.n	801369a <memcpy+0xe>
 80136a6:	bd10      	pop	{r4, pc}

080136a8 <_Balloc>:
 80136a8:	b570      	push	{r4, r5, r6, lr}
 80136aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80136ac:	4604      	mov	r4, r0
 80136ae:	460d      	mov	r5, r1
 80136b0:	b976      	cbnz	r6, 80136d0 <_Balloc+0x28>
 80136b2:	2010      	movs	r0, #16
 80136b4:	f7ff ffe2 	bl	801367c <malloc>
 80136b8:	4602      	mov	r2, r0
 80136ba:	6260      	str	r0, [r4, #36]	; 0x24
 80136bc:	b920      	cbnz	r0, 80136c8 <_Balloc+0x20>
 80136be:	4b18      	ldr	r3, [pc, #96]	; (8013720 <_Balloc+0x78>)
 80136c0:	4818      	ldr	r0, [pc, #96]	; (8013724 <_Balloc+0x7c>)
 80136c2:	2166      	movs	r1, #102	; 0x66
 80136c4:	f000 fde8 	bl	8014298 <__assert_func>
 80136c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80136cc:	6006      	str	r6, [r0, #0]
 80136ce:	60c6      	str	r6, [r0, #12]
 80136d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80136d2:	68f3      	ldr	r3, [r6, #12]
 80136d4:	b183      	cbz	r3, 80136f8 <_Balloc+0x50>
 80136d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80136d8:	68db      	ldr	r3, [r3, #12]
 80136da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80136de:	b9b8      	cbnz	r0, 8013710 <_Balloc+0x68>
 80136e0:	2101      	movs	r1, #1
 80136e2:	fa01 f605 	lsl.w	r6, r1, r5
 80136e6:	1d72      	adds	r2, r6, #5
 80136e8:	0092      	lsls	r2, r2, #2
 80136ea:	4620      	mov	r0, r4
 80136ec:	f000 fb5a 	bl	8013da4 <_calloc_r>
 80136f0:	b160      	cbz	r0, 801370c <_Balloc+0x64>
 80136f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80136f6:	e00e      	b.n	8013716 <_Balloc+0x6e>
 80136f8:	2221      	movs	r2, #33	; 0x21
 80136fa:	2104      	movs	r1, #4
 80136fc:	4620      	mov	r0, r4
 80136fe:	f000 fb51 	bl	8013da4 <_calloc_r>
 8013702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013704:	60f0      	str	r0, [r6, #12]
 8013706:	68db      	ldr	r3, [r3, #12]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d1e4      	bne.n	80136d6 <_Balloc+0x2e>
 801370c:	2000      	movs	r0, #0
 801370e:	bd70      	pop	{r4, r5, r6, pc}
 8013710:	6802      	ldr	r2, [r0, #0]
 8013712:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013716:	2300      	movs	r3, #0
 8013718:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801371c:	e7f7      	b.n	801370e <_Balloc+0x66>
 801371e:	bf00      	nop
 8013720:	08014f19 	.word	0x08014f19
 8013724:	08015000 	.word	0x08015000

08013728 <_Bfree>:
 8013728:	b570      	push	{r4, r5, r6, lr}
 801372a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801372c:	4605      	mov	r5, r0
 801372e:	460c      	mov	r4, r1
 8013730:	b976      	cbnz	r6, 8013750 <_Bfree+0x28>
 8013732:	2010      	movs	r0, #16
 8013734:	f7ff ffa2 	bl	801367c <malloc>
 8013738:	4602      	mov	r2, r0
 801373a:	6268      	str	r0, [r5, #36]	; 0x24
 801373c:	b920      	cbnz	r0, 8013748 <_Bfree+0x20>
 801373e:	4b09      	ldr	r3, [pc, #36]	; (8013764 <_Bfree+0x3c>)
 8013740:	4809      	ldr	r0, [pc, #36]	; (8013768 <_Bfree+0x40>)
 8013742:	218a      	movs	r1, #138	; 0x8a
 8013744:	f000 fda8 	bl	8014298 <__assert_func>
 8013748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801374c:	6006      	str	r6, [r0, #0]
 801374e:	60c6      	str	r6, [r0, #12]
 8013750:	b13c      	cbz	r4, 8013762 <_Bfree+0x3a>
 8013752:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013754:	6862      	ldr	r2, [r4, #4]
 8013756:	68db      	ldr	r3, [r3, #12]
 8013758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801375c:	6021      	str	r1, [r4, #0]
 801375e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013762:	bd70      	pop	{r4, r5, r6, pc}
 8013764:	08014f19 	.word	0x08014f19
 8013768:	08015000 	.word	0x08015000

0801376c <__multadd>:
 801376c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013770:	690e      	ldr	r6, [r1, #16]
 8013772:	4607      	mov	r7, r0
 8013774:	4698      	mov	r8, r3
 8013776:	460c      	mov	r4, r1
 8013778:	f101 0014 	add.w	r0, r1, #20
 801377c:	2300      	movs	r3, #0
 801377e:	6805      	ldr	r5, [r0, #0]
 8013780:	b2a9      	uxth	r1, r5
 8013782:	fb02 8101 	mla	r1, r2, r1, r8
 8013786:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801378a:	0c2d      	lsrs	r5, r5, #16
 801378c:	fb02 c505 	mla	r5, r2, r5, ip
 8013790:	b289      	uxth	r1, r1
 8013792:	3301      	adds	r3, #1
 8013794:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013798:	429e      	cmp	r6, r3
 801379a:	f840 1b04 	str.w	r1, [r0], #4
 801379e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80137a2:	dcec      	bgt.n	801377e <__multadd+0x12>
 80137a4:	f1b8 0f00 	cmp.w	r8, #0
 80137a8:	d022      	beq.n	80137f0 <__multadd+0x84>
 80137aa:	68a3      	ldr	r3, [r4, #8]
 80137ac:	42b3      	cmp	r3, r6
 80137ae:	dc19      	bgt.n	80137e4 <__multadd+0x78>
 80137b0:	6861      	ldr	r1, [r4, #4]
 80137b2:	4638      	mov	r0, r7
 80137b4:	3101      	adds	r1, #1
 80137b6:	f7ff ff77 	bl	80136a8 <_Balloc>
 80137ba:	4605      	mov	r5, r0
 80137bc:	b928      	cbnz	r0, 80137ca <__multadd+0x5e>
 80137be:	4602      	mov	r2, r0
 80137c0:	4b0d      	ldr	r3, [pc, #52]	; (80137f8 <__multadd+0x8c>)
 80137c2:	480e      	ldr	r0, [pc, #56]	; (80137fc <__multadd+0x90>)
 80137c4:	21b5      	movs	r1, #181	; 0xb5
 80137c6:	f000 fd67 	bl	8014298 <__assert_func>
 80137ca:	6922      	ldr	r2, [r4, #16]
 80137cc:	3202      	adds	r2, #2
 80137ce:	f104 010c 	add.w	r1, r4, #12
 80137d2:	0092      	lsls	r2, r2, #2
 80137d4:	300c      	adds	r0, #12
 80137d6:	f7ff ff59 	bl	801368c <memcpy>
 80137da:	4621      	mov	r1, r4
 80137dc:	4638      	mov	r0, r7
 80137de:	f7ff ffa3 	bl	8013728 <_Bfree>
 80137e2:	462c      	mov	r4, r5
 80137e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80137e8:	3601      	adds	r6, #1
 80137ea:	f8c3 8014 	str.w	r8, [r3, #20]
 80137ee:	6126      	str	r6, [r4, #16]
 80137f0:	4620      	mov	r0, r4
 80137f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137f6:	bf00      	nop
 80137f8:	08014f8f 	.word	0x08014f8f
 80137fc:	08015000 	.word	0x08015000

08013800 <__hi0bits>:
 8013800:	0c03      	lsrs	r3, r0, #16
 8013802:	041b      	lsls	r3, r3, #16
 8013804:	b9d3      	cbnz	r3, 801383c <__hi0bits+0x3c>
 8013806:	0400      	lsls	r0, r0, #16
 8013808:	2310      	movs	r3, #16
 801380a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801380e:	bf04      	itt	eq
 8013810:	0200      	lsleq	r0, r0, #8
 8013812:	3308      	addeq	r3, #8
 8013814:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013818:	bf04      	itt	eq
 801381a:	0100      	lsleq	r0, r0, #4
 801381c:	3304      	addeq	r3, #4
 801381e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013822:	bf04      	itt	eq
 8013824:	0080      	lsleq	r0, r0, #2
 8013826:	3302      	addeq	r3, #2
 8013828:	2800      	cmp	r0, #0
 801382a:	db05      	blt.n	8013838 <__hi0bits+0x38>
 801382c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013830:	f103 0301 	add.w	r3, r3, #1
 8013834:	bf08      	it	eq
 8013836:	2320      	moveq	r3, #32
 8013838:	4618      	mov	r0, r3
 801383a:	4770      	bx	lr
 801383c:	2300      	movs	r3, #0
 801383e:	e7e4      	b.n	801380a <__hi0bits+0xa>

08013840 <__lo0bits>:
 8013840:	6803      	ldr	r3, [r0, #0]
 8013842:	f013 0207 	ands.w	r2, r3, #7
 8013846:	4601      	mov	r1, r0
 8013848:	d00b      	beq.n	8013862 <__lo0bits+0x22>
 801384a:	07da      	lsls	r2, r3, #31
 801384c:	d424      	bmi.n	8013898 <__lo0bits+0x58>
 801384e:	0798      	lsls	r0, r3, #30
 8013850:	bf49      	itett	mi
 8013852:	085b      	lsrmi	r3, r3, #1
 8013854:	089b      	lsrpl	r3, r3, #2
 8013856:	2001      	movmi	r0, #1
 8013858:	600b      	strmi	r3, [r1, #0]
 801385a:	bf5c      	itt	pl
 801385c:	600b      	strpl	r3, [r1, #0]
 801385e:	2002      	movpl	r0, #2
 8013860:	4770      	bx	lr
 8013862:	b298      	uxth	r0, r3
 8013864:	b9b0      	cbnz	r0, 8013894 <__lo0bits+0x54>
 8013866:	0c1b      	lsrs	r3, r3, #16
 8013868:	2010      	movs	r0, #16
 801386a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801386e:	bf04      	itt	eq
 8013870:	0a1b      	lsreq	r3, r3, #8
 8013872:	3008      	addeq	r0, #8
 8013874:	071a      	lsls	r2, r3, #28
 8013876:	bf04      	itt	eq
 8013878:	091b      	lsreq	r3, r3, #4
 801387a:	3004      	addeq	r0, #4
 801387c:	079a      	lsls	r2, r3, #30
 801387e:	bf04      	itt	eq
 8013880:	089b      	lsreq	r3, r3, #2
 8013882:	3002      	addeq	r0, #2
 8013884:	07da      	lsls	r2, r3, #31
 8013886:	d403      	bmi.n	8013890 <__lo0bits+0x50>
 8013888:	085b      	lsrs	r3, r3, #1
 801388a:	f100 0001 	add.w	r0, r0, #1
 801388e:	d005      	beq.n	801389c <__lo0bits+0x5c>
 8013890:	600b      	str	r3, [r1, #0]
 8013892:	4770      	bx	lr
 8013894:	4610      	mov	r0, r2
 8013896:	e7e8      	b.n	801386a <__lo0bits+0x2a>
 8013898:	2000      	movs	r0, #0
 801389a:	4770      	bx	lr
 801389c:	2020      	movs	r0, #32
 801389e:	4770      	bx	lr

080138a0 <__i2b>:
 80138a0:	b510      	push	{r4, lr}
 80138a2:	460c      	mov	r4, r1
 80138a4:	2101      	movs	r1, #1
 80138a6:	f7ff feff 	bl	80136a8 <_Balloc>
 80138aa:	4602      	mov	r2, r0
 80138ac:	b928      	cbnz	r0, 80138ba <__i2b+0x1a>
 80138ae:	4b05      	ldr	r3, [pc, #20]	; (80138c4 <__i2b+0x24>)
 80138b0:	4805      	ldr	r0, [pc, #20]	; (80138c8 <__i2b+0x28>)
 80138b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80138b6:	f000 fcef 	bl	8014298 <__assert_func>
 80138ba:	2301      	movs	r3, #1
 80138bc:	6144      	str	r4, [r0, #20]
 80138be:	6103      	str	r3, [r0, #16]
 80138c0:	bd10      	pop	{r4, pc}
 80138c2:	bf00      	nop
 80138c4:	08014f8f 	.word	0x08014f8f
 80138c8:	08015000 	.word	0x08015000

080138cc <__multiply>:
 80138cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138d0:	4614      	mov	r4, r2
 80138d2:	690a      	ldr	r2, [r1, #16]
 80138d4:	6923      	ldr	r3, [r4, #16]
 80138d6:	429a      	cmp	r2, r3
 80138d8:	bfb8      	it	lt
 80138da:	460b      	movlt	r3, r1
 80138dc:	460d      	mov	r5, r1
 80138de:	bfbc      	itt	lt
 80138e0:	4625      	movlt	r5, r4
 80138e2:	461c      	movlt	r4, r3
 80138e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80138e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80138ec:	68ab      	ldr	r3, [r5, #8]
 80138ee:	6869      	ldr	r1, [r5, #4]
 80138f0:	eb0a 0709 	add.w	r7, sl, r9
 80138f4:	42bb      	cmp	r3, r7
 80138f6:	b085      	sub	sp, #20
 80138f8:	bfb8      	it	lt
 80138fa:	3101      	addlt	r1, #1
 80138fc:	f7ff fed4 	bl	80136a8 <_Balloc>
 8013900:	b930      	cbnz	r0, 8013910 <__multiply+0x44>
 8013902:	4602      	mov	r2, r0
 8013904:	4b42      	ldr	r3, [pc, #264]	; (8013a10 <__multiply+0x144>)
 8013906:	4843      	ldr	r0, [pc, #268]	; (8013a14 <__multiply+0x148>)
 8013908:	f240 115d 	movw	r1, #349	; 0x15d
 801390c:	f000 fcc4 	bl	8014298 <__assert_func>
 8013910:	f100 0614 	add.w	r6, r0, #20
 8013914:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013918:	4633      	mov	r3, r6
 801391a:	2200      	movs	r2, #0
 801391c:	4543      	cmp	r3, r8
 801391e:	d31e      	bcc.n	801395e <__multiply+0x92>
 8013920:	f105 0c14 	add.w	ip, r5, #20
 8013924:	f104 0314 	add.w	r3, r4, #20
 8013928:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801392c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013930:	9202      	str	r2, [sp, #8]
 8013932:	ebac 0205 	sub.w	r2, ip, r5
 8013936:	3a15      	subs	r2, #21
 8013938:	f022 0203 	bic.w	r2, r2, #3
 801393c:	3204      	adds	r2, #4
 801393e:	f105 0115 	add.w	r1, r5, #21
 8013942:	458c      	cmp	ip, r1
 8013944:	bf38      	it	cc
 8013946:	2204      	movcc	r2, #4
 8013948:	9201      	str	r2, [sp, #4]
 801394a:	9a02      	ldr	r2, [sp, #8]
 801394c:	9303      	str	r3, [sp, #12]
 801394e:	429a      	cmp	r2, r3
 8013950:	d808      	bhi.n	8013964 <__multiply+0x98>
 8013952:	2f00      	cmp	r7, #0
 8013954:	dc55      	bgt.n	8013a02 <__multiply+0x136>
 8013956:	6107      	str	r7, [r0, #16]
 8013958:	b005      	add	sp, #20
 801395a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801395e:	f843 2b04 	str.w	r2, [r3], #4
 8013962:	e7db      	b.n	801391c <__multiply+0x50>
 8013964:	f8b3 a000 	ldrh.w	sl, [r3]
 8013968:	f1ba 0f00 	cmp.w	sl, #0
 801396c:	d020      	beq.n	80139b0 <__multiply+0xe4>
 801396e:	f105 0e14 	add.w	lr, r5, #20
 8013972:	46b1      	mov	r9, r6
 8013974:	2200      	movs	r2, #0
 8013976:	f85e 4b04 	ldr.w	r4, [lr], #4
 801397a:	f8d9 b000 	ldr.w	fp, [r9]
 801397e:	b2a1      	uxth	r1, r4
 8013980:	fa1f fb8b 	uxth.w	fp, fp
 8013984:	fb0a b101 	mla	r1, sl, r1, fp
 8013988:	4411      	add	r1, r2
 801398a:	f8d9 2000 	ldr.w	r2, [r9]
 801398e:	0c24      	lsrs	r4, r4, #16
 8013990:	0c12      	lsrs	r2, r2, #16
 8013992:	fb0a 2404 	mla	r4, sl, r4, r2
 8013996:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801399a:	b289      	uxth	r1, r1
 801399c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80139a0:	45f4      	cmp	ip, lr
 80139a2:	f849 1b04 	str.w	r1, [r9], #4
 80139a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80139aa:	d8e4      	bhi.n	8013976 <__multiply+0xaa>
 80139ac:	9901      	ldr	r1, [sp, #4]
 80139ae:	5072      	str	r2, [r6, r1]
 80139b0:	9a03      	ldr	r2, [sp, #12]
 80139b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80139b6:	3304      	adds	r3, #4
 80139b8:	f1b9 0f00 	cmp.w	r9, #0
 80139bc:	d01f      	beq.n	80139fe <__multiply+0x132>
 80139be:	6834      	ldr	r4, [r6, #0]
 80139c0:	f105 0114 	add.w	r1, r5, #20
 80139c4:	46b6      	mov	lr, r6
 80139c6:	f04f 0a00 	mov.w	sl, #0
 80139ca:	880a      	ldrh	r2, [r1, #0]
 80139cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80139d0:	fb09 b202 	mla	r2, r9, r2, fp
 80139d4:	4492      	add	sl, r2
 80139d6:	b2a4      	uxth	r4, r4
 80139d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80139dc:	f84e 4b04 	str.w	r4, [lr], #4
 80139e0:	f851 4b04 	ldr.w	r4, [r1], #4
 80139e4:	f8be 2000 	ldrh.w	r2, [lr]
 80139e8:	0c24      	lsrs	r4, r4, #16
 80139ea:	fb09 2404 	mla	r4, r9, r4, r2
 80139ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80139f2:	458c      	cmp	ip, r1
 80139f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80139f8:	d8e7      	bhi.n	80139ca <__multiply+0xfe>
 80139fa:	9a01      	ldr	r2, [sp, #4]
 80139fc:	50b4      	str	r4, [r6, r2]
 80139fe:	3604      	adds	r6, #4
 8013a00:	e7a3      	b.n	801394a <__multiply+0x7e>
 8013a02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d1a5      	bne.n	8013956 <__multiply+0x8a>
 8013a0a:	3f01      	subs	r7, #1
 8013a0c:	e7a1      	b.n	8013952 <__multiply+0x86>
 8013a0e:	bf00      	nop
 8013a10:	08014f8f 	.word	0x08014f8f
 8013a14:	08015000 	.word	0x08015000

08013a18 <__pow5mult>:
 8013a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a1c:	4615      	mov	r5, r2
 8013a1e:	f012 0203 	ands.w	r2, r2, #3
 8013a22:	4606      	mov	r6, r0
 8013a24:	460f      	mov	r7, r1
 8013a26:	d007      	beq.n	8013a38 <__pow5mult+0x20>
 8013a28:	4c25      	ldr	r4, [pc, #148]	; (8013ac0 <__pow5mult+0xa8>)
 8013a2a:	3a01      	subs	r2, #1
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013a32:	f7ff fe9b 	bl	801376c <__multadd>
 8013a36:	4607      	mov	r7, r0
 8013a38:	10ad      	asrs	r5, r5, #2
 8013a3a:	d03d      	beq.n	8013ab8 <__pow5mult+0xa0>
 8013a3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013a3e:	b97c      	cbnz	r4, 8013a60 <__pow5mult+0x48>
 8013a40:	2010      	movs	r0, #16
 8013a42:	f7ff fe1b 	bl	801367c <malloc>
 8013a46:	4602      	mov	r2, r0
 8013a48:	6270      	str	r0, [r6, #36]	; 0x24
 8013a4a:	b928      	cbnz	r0, 8013a58 <__pow5mult+0x40>
 8013a4c:	4b1d      	ldr	r3, [pc, #116]	; (8013ac4 <__pow5mult+0xac>)
 8013a4e:	481e      	ldr	r0, [pc, #120]	; (8013ac8 <__pow5mult+0xb0>)
 8013a50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013a54:	f000 fc20 	bl	8014298 <__assert_func>
 8013a58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013a5c:	6004      	str	r4, [r0, #0]
 8013a5e:	60c4      	str	r4, [r0, #12]
 8013a60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013a64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013a68:	b94c      	cbnz	r4, 8013a7e <__pow5mult+0x66>
 8013a6a:	f240 2171 	movw	r1, #625	; 0x271
 8013a6e:	4630      	mov	r0, r6
 8013a70:	f7ff ff16 	bl	80138a0 <__i2b>
 8013a74:	2300      	movs	r3, #0
 8013a76:	f8c8 0008 	str.w	r0, [r8, #8]
 8013a7a:	4604      	mov	r4, r0
 8013a7c:	6003      	str	r3, [r0, #0]
 8013a7e:	f04f 0900 	mov.w	r9, #0
 8013a82:	07eb      	lsls	r3, r5, #31
 8013a84:	d50a      	bpl.n	8013a9c <__pow5mult+0x84>
 8013a86:	4639      	mov	r1, r7
 8013a88:	4622      	mov	r2, r4
 8013a8a:	4630      	mov	r0, r6
 8013a8c:	f7ff ff1e 	bl	80138cc <__multiply>
 8013a90:	4639      	mov	r1, r7
 8013a92:	4680      	mov	r8, r0
 8013a94:	4630      	mov	r0, r6
 8013a96:	f7ff fe47 	bl	8013728 <_Bfree>
 8013a9a:	4647      	mov	r7, r8
 8013a9c:	106d      	asrs	r5, r5, #1
 8013a9e:	d00b      	beq.n	8013ab8 <__pow5mult+0xa0>
 8013aa0:	6820      	ldr	r0, [r4, #0]
 8013aa2:	b938      	cbnz	r0, 8013ab4 <__pow5mult+0x9c>
 8013aa4:	4622      	mov	r2, r4
 8013aa6:	4621      	mov	r1, r4
 8013aa8:	4630      	mov	r0, r6
 8013aaa:	f7ff ff0f 	bl	80138cc <__multiply>
 8013aae:	6020      	str	r0, [r4, #0]
 8013ab0:	f8c0 9000 	str.w	r9, [r0]
 8013ab4:	4604      	mov	r4, r0
 8013ab6:	e7e4      	b.n	8013a82 <__pow5mult+0x6a>
 8013ab8:	4638      	mov	r0, r7
 8013aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013abe:	bf00      	nop
 8013ac0:	08015150 	.word	0x08015150
 8013ac4:	08014f19 	.word	0x08014f19
 8013ac8:	08015000 	.word	0x08015000

08013acc <__lshift>:
 8013acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ad0:	460c      	mov	r4, r1
 8013ad2:	6849      	ldr	r1, [r1, #4]
 8013ad4:	6923      	ldr	r3, [r4, #16]
 8013ad6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013ada:	68a3      	ldr	r3, [r4, #8]
 8013adc:	4607      	mov	r7, r0
 8013ade:	4691      	mov	r9, r2
 8013ae0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013ae4:	f108 0601 	add.w	r6, r8, #1
 8013ae8:	42b3      	cmp	r3, r6
 8013aea:	db0b      	blt.n	8013b04 <__lshift+0x38>
 8013aec:	4638      	mov	r0, r7
 8013aee:	f7ff fddb 	bl	80136a8 <_Balloc>
 8013af2:	4605      	mov	r5, r0
 8013af4:	b948      	cbnz	r0, 8013b0a <__lshift+0x3e>
 8013af6:	4602      	mov	r2, r0
 8013af8:	4b28      	ldr	r3, [pc, #160]	; (8013b9c <__lshift+0xd0>)
 8013afa:	4829      	ldr	r0, [pc, #164]	; (8013ba0 <__lshift+0xd4>)
 8013afc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013b00:	f000 fbca 	bl	8014298 <__assert_func>
 8013b04:	3101      	adds	r1, #1
 8013b06:	005b      	lsls	r3, r3, #1
 8013b08:	e7ee      	b.n	8013ae8 <__lshift+0x1c>
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	f100 0114 	add.w	r1, r0, #20
 8013b10:	f100 0210 	add.w	r2, r0, #16
 8013b14:	4618      	mov	r0, r3
 8013b16:	4553      	cmp	r3, sl
 8013b18:	db33      	blt.n	8013b82 <__lshift+0xb6>
 8013b1a:	6920      	ldr	r0, [r4, #16]
 8013b1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013b20:	f104 0314 	add.w	r3, r4, #20
 8013b24:	f019 091f 	ands.w	r9, r9, #31
 8013b28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013b2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013b30:	d02b      	beq.n	8013b8a <__lshift+0xbe>
 8013b32:	f1c9 0e20 	rsb	lr, r9, #32
 8013b36:	468a      	mov	sl, r1
 8013b38:	2200      	movs	r2, #0
 8013b3a:	6818      	ldr	r0, [r3, #0]
 8013b3c:	fa00 f009 	lsl.w	r0, r0, r9
 8013b40:	4302      	orrs	r2, r0
 8013b42:	f84a 2b04 	str.w	r2, [sl], #4
 8013b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b4a:	459c      	cmp	ip, r3
 8013b4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013b50:	d8f3      	bhi.n	8013b3a <__lshift+0x6e>
 8013b52:	ebac 0304 	sub.w	r3, ip, r4
 8013b56:	3b15      	subs	r3, #21
 8013b58:	f023 0303 	bic.w	r3, r3, #3
 8013b5c:	3304      	adds	r3, #4
 8013b5e:	f104 0015 	add.w	r0, r4, #21
 8013b62:	4584      	cmp	ip, r0
 8013b64:	bf38      	it	cc
 8013b66:	2304      	movcc	r3, #4
 8013b68:	50ca      	str	r2, [r1, r3]
 8013b6a:	b10a      	cbz	r2, 8013b70 <__lshift+0xa4>
 8013b6c:	f108 0602 	add.w	r6, r8, #2
 8013b70:	3e01      	subs	r6, #1
 8013b72:	4638      	mov	r0, r7
 8013b74:	612e      	str	r6, [r5, #16]
 8013b76:	4621      	mov	r1, r4
 8013b78:	f7ff fdd6 	bl	8013728 <_Bfree>
 8013b7c:	4628      	mov	r0, r5
 8013b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b82:	f842 0f04 	str.w	r0, [r2, #4]!
 8013b86:	3301      	adds	r3, #1
 8013b88:	e7c5      	b.n	8013b16 <__lshift+0x4a>
 8013b8a:	3904      	subs	r1, #4
 8013b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b90:	f841 2f04 	str.w	r2, [r1, #4]!
 8013b94:	459c      	cmp	ip, r3
 8013b96:	d8f9      	bhi.n	8013b8c <__lshift+0xc0>
 8013b98:	e7ea      	b.n	8013b70 <__lshift+0xa4>
 8013b9a:	bf00      	nop
 8013b9c:	08014f8f 	.word	0x08014f8f
 8013ba0:	08015000 	.word	0x08015000

08013ba4 <__mcmp>:
 8013ba4:	b530      	push	{r4, r5, lr}
 8013ba6:	6902      	ldr	r2, [r0, #16]
 8013ba8:	690c      	ldr	r4, [r1, #16]
 8013baa:	1b12      	subs	r2, r2, r4
 8013bac:	d10e      	bne.n	8013bcc <__mcmp+0x28>
 8013bae:	f100 0314 	add.w	r3, r0, #20
 8013bb2:	3114      	adds	r1, #20
 8013bb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013bb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013bbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013bc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013bc4:	42a5      	cmp	r5, r4
 8013bc6:	d003      	beq.n	8013bd0 <__mcmp+0x2c>
 8013bc8:	d305      	bcc.n	8013bd6 <__mcmp+0x32>
 8013bca:	2201      	movs	r2, #1
 8013bcc:	4610      	mov	r0, r2
 8013bce:	bd30      	pop	{r4, r5, pc}
 8013bd0:	4283      	cmp	r3, r0
 8013bd2:	d3f3      	bcc.n	8013bbc <__mcmp+0x18>
 8013bd4:	e7fa      	b.n	8013bcc <__mcmp+0x28>
 8013bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8013bda:	e7f7      	b.n	8013bcc <__mcmp+0x28>

08013bdc <__mdiff>:
 8013bdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013be0:	460c      	mov	r4, r1
 8013be2:	4606      	mov	r6, r0
 8013be4:	4611      	mov	r1, r2
 8013be6:	4620      	mov	r0, r4
 8013be8:	4617      	mov	r7, r2
 8013bea:	f7ff ffdb 	bl	8013ba4 <__mcmp>
 8013bee:	1e05      	subs	r5, r0, #0
 8013bf0:	d110      	bne.n	8013c14 <__mdiff+0x38>
 8013bf2:	4629      	mov	r1, r5
 8013bf4:	4630      	mov	r0, r6
 8013bf6:	f7ff fd57 	bl	80136a8 <_Balloc>
 8013bfa:	b930      	cbnz	r0, 8013c0a <__mdiff+0x2e>
 8013bfc:	4b39      	ldr	r3, [pc, #228]	; (8013ce4 <__mdiff+0x108>)
 8013bfe:	4602      	mov	r2, r0
 8013c00:	f240 2132 	movw	r1, #562	; 0x232
 8013c04:	4838      	ldr	r0, [pc, #224]	; (8013ce8 <__mdiff+0x10c>)
 8013c06:	f000 fb47 	bl	8014298 <__assert_func>
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013c10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c14:	bfa4      	itt	ge
 8013c16:	463b      	movge	r3, r7
 8013c18:	4627      	movge	r7, r4
 8013c1a:	4630      	mov	r0, r6
 8013c1c:	6879      	ldr	r1, [r7, #4]
 8013c1e:	bfa6      	itte	ge
 8013c20:	461c      	movge	r4, r3
 8013c22:	2500      	movge	r5, #0
 8013c24:	2501      	movlt	r5, #1
 8013c26:	f7ff fd3f 	bl	80136a8 <_Balloc>
 8013c2a:	b920      	cbnz	r0, 8013c36 <__mdiff+0x5a>
 8013c2c:	4b2d      	ldr	r3, [pc, #180]	; (8013ce4 <__mdiff+0x108>)
 8013c2e:	4602      	mov	r2, r0
 8013c30:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013c34:	e7e6      	b.n	8013c04 <__mdiff+0x28>
 8013c36:	693e      	ldr	r6, [r7, #16]
 8013c38:	60c5      	str	r5, [r0, #12]
 8013c3a:	6925      	ldr	r5, [r4, #16]
 8013c3c:	f107 0114 	add.w	r1, r7, #20
 8013c40:	f104 0914 	add.w	r9, r4, #20
 8013c44:	f100 0e14 	add.w	lr, r0, #20
 8013c48:	f107 0210 	add.w	r2, r7, #16
 8013c4c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013c50:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013c54:	46f2      	mov	sl, lr
 8013c56:	2700      	movs	r7, #0
 8013c58:	f859 3b04 	ldr.w	r3, [r9], #4
 8013c5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013c60:	fa1f f883 	uxth.w	r8, r3
 8013c64:	fa17 f78b 	uxtah	r7, r7, fp
 8013c68:	0c1b      	lsrs	r3, r3, #16
 8013c6a:	eba7 0808 	sub.w	r8, r7, r8
 8013c6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013c72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013c76:	fa1f f888 	uxth.w	r8, r8
 8013c7a:	141f      	asrs	r7, r3, #16
 8013c7c:	454d      	cmp	r5, r9
 8013c7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013c82:	f84a 3b04 	str.w	r3, [sl], #4
 8013c86:	d8e7      	bhi.n	8013c58 <__mdiff+0x7c>
 8013c88:	1b2b      	subs	r3, r5, r4
 8013c8a:	3b15      	subs	r3, #21
 8013c8c:	f023 0303 	bic.w	r3, r3, #3
 8013c90:	3304      	adds	r3, #4
 8013c92:	3415      	adds	r4, #21
 8013c94:	42a5      	cmp	r5, r4
 8013c96:	bf38      	it	cc
 8013c98:	2304      	movcc	r3, #4
 8013c9a:	4419      	add	r1, r3
 8013c9c:	4473      	add	r3, lr
 8013c9e:	469e      	mov	lr, r3
 8013ca0:	460d      	mov	r5, r1
 8013ca2:	4565      	cmp	r5, ip
 8013ca4:	d30e      	bcc.n	8013cc4 <__mdiff+0xe8>
 8013ca6:	f10c 0203 	add.w	r2, ip, #3
 8013caa:	1a52      	subs	r2, r2, r1
 8013cac:	f022 0203 	bic.w	r2, r2, #3
 8013cb0:	3903      	subs	r1, #3
 8013cb2:	458c      	cmp	ip, r1
 8013cb4:	bf38      	it	cc
 8013cb6:	2200      	movcc	r2, #0
 8013cb8:	441a      	add	r2, r3
 8013cba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013cbe:	b17b      	cbz	r3, 8013ce0 <__mdiff+0x104>
 8013cc0:	6106      	str	r6, [r0, #16]
 8013cc2:	e7a5      	b.n	8013c10 <__mdiff+0x34>
 8013cc4:	f855 8b04 	ldr.w	r8, [r5], #4
 8013cc8:	fa17 f488 	uxtah	r4, r7, r8
 8013ccc:	1422      	asrs	r2, r4, #16
 8013cce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013cd2:	b2a4      	uxth	r4, r4
 8013cd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013cd8:	f84e 4b04 	str.w	r4, [lr], #4
 8013cdc:	1417      	asrs	r7, r2, #16
 8013cde:	e7e0      	b.n	8013ca2 <__mdiff+0xc6>
 8013ce0:	3e01      	subs	r6, #1
 8013ce2:	e7ea      	b.n	8013cba <__mdiff+0xde>
 8013ce4:	08014f8f 	.word	0x08014f8f
 8013ce8:	08015000 	.word	0x08015000

08013cec <__d2b>:
 8013cec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013cf0:	4689      	mov	r9, r1
 8013cf2:	2101      	movs	r1, #1
 8013cf4:	ec57 6b10 	vmov	r6, r7, d0
 8013cf8:	4690      	mov	r8, r2
 8013cfa:	f7ff fcd5 	bl	80136a8 <_Balloc>
 8013cfe:	4604      	mov	r4, r0
 8013d00:	b930      	cbnz	r0, 8013d10 <__d2b+0x24>
 8013d02:	4602      	mov	r2, r0
 8013d04:	4b25      	ldr	r3, [pc, #148]	; (8013d9c <__d2b+0xb0>)
 8013d06:	4826      	ldr	r0, [pc, #152]	; (8013da0 <__d2b+0xb4>)
 8013d08:	f240 310a 	movw	r1, #778	; 0x30a
 8013d0c:	f000 fac4 	bl	8014298 <__assert_func>
 8013d10:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013d14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013d18:	bb35      	cbnz	r5, 8013d68 <__d2b+0x7c>
 8013d1a:	2e00      	cmp	r6, #0
 8013d1c:	9301      	str	r3, [sp, #4]
 8013d1e:	d028      	beq.n	8013d72 <__d2b+0x86>
 8013d20:	4668      	mov	r0, sp
 8013d22:	9600      	str	r6, [sp, #0]
 8013d24:	f7ff fd8c 	bl	8013840 <__lo0bits>
 8013d28:	9900      	ldr	r1, [sp, #0]
 8013d2a:	b300      	cbz	r0, 8013d6e <__d2b+0x82>
 8013d2c:	9a01      	ldr	r2, [sp, #4]
 8013d2e:	f1c0 0320 	rsb	r3, r0, #32
 8013d32:	fa02 f303 	lsl.w	r3, r2, r3
 8013d36:	430b      	orrs	r3, r1
 8013d38:	40c2      	lsrs	r2, r0
 8013d3a:	6163      	str	r3, [r4, #20]
 8013d3c:	9201      	str	r2, [sp, #4]
 8013d3e:	9b01      	ldr	r3, [sp, #4]
 8013d40:	61a3      	str	r3, [r4, #24]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	bf14      	ite	ne
 8013d46:	2202      	movne	r2, #2
 8013d48:	2201      	moveq	r2, #1
 8013d4a:	6122      	str	r2, [r4, #16]
 8013d4c:	b1d5      	cbz	r5, 8013d84 <__d2b+0x98>
 8013d4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013d52:	4405      	add	r5, r0
 8013d54:	f8c9 5000 	str.w	r5, [r9]
 8013d58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013d5c:	f8c8 0000 	str.w	r0, [r8]
 8013d60:	4620      	mov	r0, r4
 8013d62:	b003      	add	sp, #12
 8013d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013d6c:	e7d5      	b.n	8013d1a <__d2b+0x2e>
 8013d6e:	6161      	str	r1, [r4, #20]
 8013d70:	e7e5      	b.n	8013d3e <__d2b+0x52>
 8013d72:	a801      	add	r0, sp, #4
 8013d74:	f7ff fd64 	bl	8013840 <__lo0bits>
 8013d78:	9b01      	ldr	r3, [sp, #4]
 8013d7a:	6163      	str	r3, [r4, #20]
 8013d7c:	2201      	movs	r2, #1
 8013d7e:	6122      	str	r2, [r4, #16]
 8013d80:	3020      	adds	r0, #32
 8013d82:	e7e3      	b.n	8013d4c <__d2b+0x60>
 8013d84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013d88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013d8c:	f8c9 0000 	str.w	r0, [r9]
 8013d90:	6918      	ldr	r0, [r3, #16]
 8013d92:	f7ff fd35 	bl	8013800 <__hi0bits>
 8013d96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013d9a:	e7df      	b.n	8013d5c <__d2b+0x70>
 8013d9c:	08014f8f 	.word	0x08014f8f
 8013da0:	08015000 	.word	0x08015000

08013da4 <_calloc_r>:
 8013da4:	b513      	push	{r0, r1, r4, lr}
 8013da6:	434a      	muls	r2, r1
 8013da8:	4611      	mov	r1, r2
 8013daa:	9201      	str	r2, [sp, #4]
 8013dac:	f000 f85a 	bl	8013e64 <_malloc_r>
 8013db0:	4604      	mov	r4, r0
 8013db2:	b118      	cbz	r0, 8013dbc <_calloc_r+0x18>
 8013db4:	9a01      	ldr	r2, [sp, #4]
 8013db6:	2100      	movs	r1, #0
 8013db8:	f7fd fe94 	bl	8011ae4 <memset>
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	b002      	add	sp, #8
 8013dc0:	bd10      	pop	{r4, pc}
	...

08013dc4 <_free_r>:
 8013dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013dc6:	2900      	cmp	r1, #0
 8013dc8:	d048      	beq.n	8013e5c <_free_r+0x98>
 8013dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013dce:	9001      	str	r0, [sp, #4]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	f1a1 0404 	sub.w	r4, r1, #4
 8013dd6:	bfb8      	it	lt
 8013dd8:	18e4      	addlt	r4, r4, r3
 8013dda:	f000 fae3 	bl	80143a4 <__malloc_lock>
 8013dde:	4a20      	ldr	r2, [pc, #128]	; (8013e60 <_free_r+0x9c>)
 8013de0:	9801      	ldr	r0, [sp, #4]
 8013de2:	6813      	ldr	r3, [r2, #0]
 8013de4:	4615      	mov	r5, r2
 8013de6:	b933      	cbnz	r3, 8013df6 <_free_r+0x32>
 8013de8:	6063      	str	r3, [r4, #4]
 8013dea:	6014      	str	r4, [r2, #0]
 8013dec:	b003      	add	sp, #12
 8013dee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013df2:	f000 badd 	b.w	80143b0 <__malloc_unlock>
 8013df6:	42a3      	cmp	r3, r4
 8013df8:	d90b      	bls.n	8013e12 <_free_r+0x4e>
 8013dfa:	6821      	ldr	r1, [r4, #0]
 8013dfc:	1862      	adds	r2, r4, r1
 8013dfe:	4293      	cmp	r3, r2
 8013e00:	bf04      	itt	eq
 8013e02:	681a      	ldreq	r2, [r3, #0]
 8013e04:	685b      	ldreq	r3, [r3, #4]
 8013e06:	6063      	str	r3, [r4, #4]
 8013e08:	bf04      	itt	eq
 8013e0a:	1852      	addeq	r2, r2, r1
 8013e0c:	6022      	streq	r2, [r4, #0]
 8013e0e:	602c      	str	r4, [r5, #0]
 8013e10:	e7ec      	b.n	8013dec <_free_r+0x28>
 8013e12:	461a      	mov	r2, r3
 8013e14:	685b      	ldr	r3, [r3, #4]
 8013e16:	b10b      	cbz	r3, 8013e1c <_free_r+0x58>
 8013e18:	42a3      	cmp	r3, r4
 8013e1a:	d9fa      	bls.n	8013e12 <_free_r+0x4e>
 8013e1c:	6811      	ldr	r1, [r2, #0]
 8013e1e:	1855      	adds	r5, r2, r1
 8013e20:	42a5      	cmp	r5, r4
 8013e22:	d10b      	bne.n	8013e3c <_free_r+0x78>
 8013e24:	6824      	ldr	r4, [r4, #0]
 8013e26:	4421      	add	r1, r4
 8013e28:	1854      	adds	r4, r2, r1
 8013e2a:	42a3      	cmp	r3, r4
 8013e2c:	6011      	str	r1, [r2, #0]
 8013e2e:	d1dd      	bne.n	8013dec <_free_r+0x28>
 8013e30:	681c      	ldr	r4, [r3, #0]
 8013e32:	685b      	ldr	r3, [r3, #4]
 8013e34:	6053      	str	r3, [r2, #4]
 8013e36:	4421      	add	r1, r4
 8013e38:	6011      	str	r1, [r2, #0]
 8013e3a:	e7d7      	b.n	8013dec <_free_r+0x28>
 8013e3c:	d902      	bls.n	8013e44 <_free_r+0x80>
 8013e3e:	230c      	movs	r3, #12
 8013e40:	6003      	str	r3, [r0, #0]
 8013e42:	e7d3      	b.n	8013dec <_free_r+0x28>
 8013e44:	6825      	ldr	r5, [r4, #0]
 8013e46:	1961      	adds	r1, r4, r5
 8013e48:	428b      	cmp	r3, r1
 8013e4a:	bf04      	itt	eq
 8013e4c:	6819      	ldreq	r1, [r3, #0]
 8013e4e:	685b      	ldreq	r3, [r3, #4]
 8013e50:	6063      	str	r3, [r4, #4]
 8013e52:	bf04      	itt	eq
 8013e54:	1949      	addeq	r1, r1, r5
 8013e56:	6021      	streq	r1, [r4, #0]
 8013e58:	6054      	str	r4, [r2, #4]
 8013e5a:	e7c7      	b.n	8013dec <_free_r+0x28>
 8013e5c:	b003      	add	sp, #12
 8013e5e:	bd30      	pop	{r4, r5, pc}
 8013e60:	24000250 	.word	0x24000250

08013e64 <_malloc_r>:
 8013e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e66:	1ccd      	adds	r5, r1, #3
 8013e68:	f025 0503 	bic.w	r5, r5, #3
 8013e6c:	3508      	adds	r5, #8
 8013e6e:	2d0c      	cmp	r5, #12
 8013e70:	bf38      	it	cc
 8013e72:	250c      	movcc	r5, #12
 8013e74:	2d00      	cmp	r5, #0
 8013e76:	4606      	mov	r6, r0
 8013e78:	db01      	blt.n	8013e7e <_malloc_r+0x1a>
 8013e7a:	42a9      	cmp	r1, r5
 8013e7c:	d903      	bls.n	8013e86 <_malloc_r+0x22>
 8013e7e:	230c      	movs	r3, #12
 8013e80:	6033      	str	r3, [r6, #0]
 8013e82:	2000      	movs	r0, #0
 8013e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e86:	f000 fa8d 	bl	80143a4 <__malloc_lock>
 8013e8a:	4921      	ldr	r1, [pc, #132]	; (8013f10 <_malloc_r+0xac>)
 8013e8c:	680a      	ldr	r2, [r1, #0]
 8013e8e:	4614      	mov	r4, r2
 8013e90:	b99c      	cbnz	r4, 8013eba <_malloc_r+0x56>
 8013e92:	4f20      	ldr	r7, [pc, #128]	; (8013f14 <_malloc_r+0xb0>)
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	b923      	cbnz	r3, 8013ea2 <_malloc_r+0x3e>
 8013e98:	4621      	mov	r1, r4
 8013e9a:	4630      	mov	r0, r6
 8013e9c:	f000 f996 	bl	80141cc <_sbrk_r>
 8013ea0:	6038      	str	r0, [r7, #0]
 8013ea2:	4629      	mov	r1, r5
 8013ea4:	4630      	mov	r0, r6
 8013ea6:	f000 f991 	bl	80141cc <_sbrk_r>
 8013eaa:	1c43      	adds	r3, r0, #1
 8013eac:	d123      	bne.n	8013ef6 <_malloc_r+0x92>
 8013eae:	230c      	movs	r3, #12
 8013eb0:	6033      	str	r3, [r6, #0]
 8013eb2:	4630      	mov	r0, r6
 8013eb4:	f000 fa7c 	bl	80143b0 <__malloc_unlock>
 8013eb8:	e7e3      	b.n	8013e82 <_malloc_r+0x1e>
 8013eba:	6823      	ldr	r3, [r4, #0]
 8013ebc:	1b5b      	subs	r3, r3, r5
 8013ebe:	d417      	bmi.n	8013ef0 <_malloc_r+0x8c>
 8013ec0:	2b0b      	cmp	r3, #11
 8013ec2:	d903      	bls.n	8013ecc <_malloc_r+0x68>
 8013ec4:	6023      	str	r3, [r4, #0]
 8013ec6:	441c      	add	r4, r3
 8013ec8:	6025      	str	r5, [r4, #0]
 8013eca:	e004      	b.n	8013ed6 <_malloc_r+0x72>
 8013ecc:	6863      	ldr	r3, [r4, #4]
 8013ece:	42a2      	cmp	r2, r4
 8013ed0:	bf0c      	ite	eq
 8013ed2:	600b      	streq	r3, [r1, #0]
 8013ed4:	6053      	strne	r3, [r2, #4]
 8013ed6:	4630      	mov	r0, r6
 8013ed8:	f000 fa6a 	bl	80143b0 <__malloc_unlock>
 8013edc:	f104 000b 	add.w	r0, r4, #11
 8013ee0:	1d23      	adds	r3, r4, #4
 8013ee2:	f020 0007 	bic.w	r0, r0, #7
 8013ee6:	1ac2      	subs	r2, r0, r3
 8013ee8:	d0cc      	beq.n	8013e84 <_malloc_r+0x20>
 8013eea:	1a1b      	subs	r3, r3, r0
 8013eec:	50a3      	str	r3, [r4, r2]
 8013eee:	e7c9      	b.n	8013e84 <_malloc_r+0x20>
 8013ef0:	4622      	mov	r2, r4
 8013ef2:	6864      	ldr	r4, [r4, #4]
 8013ef4:	e7cc      	b.n	8013e90 <_malloc_r+0x2c>
 8013ef6:	1cc4      	adds	r4, r0, #3
 8013ef8:	f024 0403 	bic.w	r4, r4, #3
 8013efc:	42a0      	cmp	r0, r4
 8013efe:	d0e3      	beq.n	8013ec8 <_malloc_r+0x64>
 8013f00:	1a21      	subs	r1, r4, r0
 8013f02:	4630      	mov	r0, r6
 8013f04:	f000 f962 	bl	80141cc <_sbrk_r>
 8013f08:	3001      	adds	r0, #1
 8013f0a:	d1dd      	bne.n	8013ec8 <_malloc_r+0x64>
 8013f0c:	e7cf      	b.n	8013eae <_malloc_r+0x4a>
 8013f0e:	bf00      	nop
 8013f10:	24000250 	.word	0x24000250
 8013f14:	24000254 	.word	0x24000254

08013f18 <__sfputc_r>:
 8013f18:	6893      	ldr	r3, [r2, #8]
 8013f1a:	3b01      	subs	r3, #1
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	b410      	push	{r4}
 8013f20:	6093      	str	r3, [r2, #8]
 8013f22:	da08      	bge.n	8013f36 <__sfputc_r+0x1e>
 8013f24:	6994      	ldr	r4, [r2, #24]
 8013f26:	42a3      	cmp	r3, r4
 8013f28:	db01      	blt.n	8013f2e <__sfputc_r+0x16>
 8013f2a:	290a      	cmp	r1, #10
 8013f2c:	d103      	bne.n	8013f36 <__sfputc_r+0x1e>
 8013f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f32:	f7fe bab1 	b.w	8012498 <__swbuf_r>
 8013f36:	6813      	ldr	r3, [r2, #0]
 8013f38:	1c58      	adds	r0, r3, #1
 8013f3a:	6010      	str	r0, [r2, #0]
 8013f3c:	7019      	strb	r1, [r3, #0]
 8013f3e:	4608      	mov	r0, r1
 8013f40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f44:	4770      	bx	lr

08013f46 <__sfputs_r>:
 8013f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f48:	4606      	mov	r6, r0
 8013f4a:	460f      	mov	r7, r1
 8013f4c:	4614      	mov	r4, r2
 8013f4e:	18d5      	adds	r5, r2, r3
 8013f50:	42ac      	cmp	r4, r5
 8013f52:	d101      	bne.n	8013f58 <__sfputs_r+0x12>
 8013f54:	2000      	movs	r0, #0
 8013f56:	e007      	b.n	8013f68 <__sfputs_r+0x22>
 8013f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f5c:	463a      	mov	r2, r7
 8013f5e:	4630      	mov	r0, r6
 8013f60:	f7ff ffda 	bl	8013f18 <__sfputc_r>
 8013f64:	1c43      	adds	r3, r0, #1
 8013f66:	d1f3      	bne.n	8013f50 <__sfputs_r+0xa>
 8013f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013f6c <_vfiprintf_r>:
 8013f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f70:	460d      	mov	r5, r1
 8013f72:	b09d      	sub	sp, #116	; 0x74
 8013f74:	4614      	mov	r4, r2
 8013f76:	4698      	mov	r8, r3
 8013f78:	4606      	mov	r6, r0
 8013f7a:	b118      	cbz	r0, 8013f84 <_vfiprintf_r+0x18>
 8013f7c:	6983      	ldr	r3, [r0, #24]
 8013f7e:	b90b      	cbnz	r3, 8013f84 <_vfiprintf_r+0x18>
 8013f80:	f7ff fa72 	bl	8013468 <__sinit>
 8013f84:	4b89      	ldr	r3, [pc, #548]	; (80141ac <_vfiprintf_r+0x240>)
 8013f86:	429d      	cmp	r5, r3
 8013f88:	d11b      	bne.n	8013fc2 <_vfiprintf_r+0x56>
 8013f8a:	6875      	ldr	r5, [r6, #4]
 8013f8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013f8e:	07d9      	lsls	r1, r3, #31
 8013f90:	d405      	bmi.n	8013f9e <_vfiprintf_r+0x32>
 8013f92:	89ab      	ldrh	r3, [r5, #12]
 8013f94:	059a      	lsls	r2, r3, #22
 8013f96:	d402      	bmi.n	8013f9e <_vfiprintf_r+0x32>
 8013f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f9a:	f7ff fb08 	bl	80135ae <__retarget_lock_acquire_recursive>
 8013f9e:	89ab      	ldrh	r3, [r5, #12]
 8013fa0:	071b      	lsls	r3, r3, #28
 8013fa2:	d501      	bpl.n	8013fa8 <_vfiprintf_r+0x3c>
 8013fa4:	692b      	ldr	r3, [r5, #16]
 8013fa6:	b9eb      	cbnz	r3, 8013fe4 <_vfiprintf_r+0x78>
 8013fa8:	4629      	mov	r1, r5
 8013faa:	4630      	mov	r0, r6
 8013fac:	f7fe fac6 	bl	801253c <__swsetup_r>
 8013fb0:	b1c0      	cbz	r0, 8013fe4 <_vfiprintf_r+0x78>
 8013fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013fb4:	07dc      	lsls	r4, r3, #31
 8013fb6:	d50e      	bpl.n	8013fd6 <_vfiprintf_r+0x6a>
 8013fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8013fbc:	b01d      	add	sp, #116	; 0x74
 8013fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fc2:	4b7b      	ldr	r3, [pc, #492]	; (80141b0 <_vfiprintf_r+0x244>)
 8013fc4:	429d      	cmp	r5, r3
 8013fc6:	d101      	bne.n	8013fcc <_vfiprintf_r+0x60>
 8013fc8:	68b5      	ldr	r5, [r6, #8]
 8013fca:	e7df      	b.n	8013f8c <_vfiprintf_r+0x20>
 8013fcc:	4b79      	ldr	r3, [pc, #484]	; (80141b4 <_vfiprintf_r+0x248>)
 8013fce:	429d      	cmp	r5, r3
 8013fd0:	bf08      	it	eq
 8013fd2:	68f5      	ldreq	r5, [r6, #12]
 8013fd4:	e7da      	b.n	8013f8c <_vfiprintf_r+0x20>
 8013fd6:	89ab      	ldrh	r3, [r5, #12]
 8013fd8:	0598      	lsls	r0, r3, #22
 8013fda:	d4ed      	bmi.n	8013fb8 <_vfiprintf_r+0x4c>
 8013fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013fde:	f7ff fae7 	bl	80135b0 <__retarget_lock_release_recursive>
 8013fe2:	e7e9      	b.n	8013fb8 <_vfiprintf_r+0x4c>
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8013fe8:	2320      	movs	r3, #32
 8013fea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ff2:	2330      	movs	r3, #48	; 0x30
 8013ff4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80141b8 <_vfiprintf_r+0x24c>
 8013ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013ffc:	f04f 0901 	mov.w	r9, #1
 8014000:	4623      	mov	r3, r4
 8014002:	469a      	mov	sl, r3
 8014004:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014008:	b10a      	cbz	r2, 801400e <_vfiprintf_r+0xa2>
 801400a:	2a25      	cmp	r2, #37	; 0x25
 801400c:	d1f9      	bne.n	8014002 <_vfiprintf_r+0x96>
 801400e:	ebba 0b04 	subs.w	fp, sl, r4
 8014012:	d00b      	beq.n	801402c <_vfiprintf_r+0xc0>
 8014014:	465b      	mov	r3, fp
 8014016:	4622      	mov	r2, r4
 8014018:	4629      	mov	r1, r5
 801401a:	4630      	mov	r0, r6
 801401c:	f7ff ff93 	bl	8013f46 <__sfputs_r>
 8014020:	3001      	adds	r0, #1
 8014022:	f000 80aa 	beq.w	801417a <_vfiprintf_r+0x20e>
 8014026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014028:	445a      	add	r2, fp
 801402a:	9209      	str	r2, [sp, #36]	; 0x24
 801402c:	f89a 3000 	ldrb.w	r3, [sl]
 8014030:	2b00      	cmp	r3, #0
 8014032:	f000 80a2 	beq.w	801417a <_vfiprintf_r+0x20e>
 8014036:	2300      	movs	r3, #0
 8014038:	f04f 32ff 	mov.w	r2, #4294967295
 801403c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014040:	f10a 0a01 	add.w	sl, sl, #1
 8014044:	9304      	str	r3, [sp, #16]
 8014046:	9307      	str	r3, [sp, #28]
 8014048:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801404c:	931a      	str	r3, [sp, #104]	; 0x68
 801404e:	4654      	mov	r4, sl
 8014050:	2205      	movs	r2, #5
 8014052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014056:	4858      	ldr	r0, [pc, #352]	; (80141b8 <_vfiprintf_r+0x24c>)
 8014058:	f7ec f94a 	bl	80002f0 <memchr>
 801405c:	9a04      	ldr	r2, [sp, #16]
 801405e:	b9d8      	cbnz	r0, 8014098 <_vfiprintf_r+0x12c>
 8014060:	06d1      	lsls	r1, r2, #27
 8014062:	bf44      	itt	mi
 8014064:	2320      	movmi	r3, #32
 8014066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801406a:	0713      	lsls	r3, r2, #28
 801406c:	bf44      	itt	mi
 801406e:	232b      	movmi	r3, #43	; 0x2b
 8014070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014074:	f89a 3000 	ldrb.w	r3, [sl]
 8014078:	2b2a      	cmp	r3, #42	; 0x2a
 801407a:	d015      	beq.n	80140a8 <_vfiprintf_r+0x13c>
 801407c:	9a07      	ldr	r2, [sp, #28]
 801407e:	4654      	mov	r4, sl
 8014080:	2000      	movs	r0, #0
 8014082:	f04f 0c0a 	mov.w	ip, #10
 8014086:	4621      	mov	r1, r4
 8014088:	f811 3b01 	ldrb.w	r3, [r1], #1
 801408c:	3b30      	subs	r3, #48	; 0x30
 801408e:	2b09      	cmp	r3, #9
 8014090:	d94e      	bls.n	8014130 <_vfiprintf_r+0x1c4>
 8014092:	b1b0      	cbz	r0, 80140c2 <_vfiprintf_r+0x156>
 8014094:	9207      	str	r2, [sp, #28]
 8014096:	e014      	b.n	80140c2 <_vfiprintf_r+0x156>
 8014098:	eba0 0308 	sub.w	r3, r0, r8
 801409c:	fa09 f303 	lsl.w	r3, r9, r3
 80140a0:	4313      	orrs	r3, r2
 80140a2:	9304      	str	r3, [sp, #16]
 80140a4:	46a2      	mov	sl, r4
 80140a6:	e7d2      	b.n	801404e <_vfiprintf_r+0xe2>
 80140a8:	9b03      	ldr	r3, [sp, #12]
 80140aa:	1d19      	adds	r1, r3, #4
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	9103      	str	r1, [sp, #12]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	bfbb      	ittet	lt
 80140b4:	425b      	neglt	r3, r3
 80140b6:	f042 0202 	orrlt.w	r2, r2, #2
 80140ba:	9307      	strge	r3, [sp, #28]
 80140bc:	9307      	strlt	r3, [sp, #28]
 80140be:	bfb8      	it	lt
 80140c0:	9204      	strlt	r2, [sp, #16]
 80140c2:	7823      	ldrb	r3, [r4, #0]
 80140c4:	2b2e      	cmp	r3, #46	; 0x2e
 80140c6:	d10c      	bne.n	80140e2 <_vfiprintf_r+0x176>
 80140c8:	7863      	ldrb	r3, [r4, #1]
 80140ca:	2b2a      	cmp	r3, #42	; 0x2a
 80140cc:	d135      	bne.n	801413a <_vfiprintf_r+0x1ce>
 80140ce:	9b03      	ldr	r3, [sp, #12]
 80140d0:	1d1a      	adds	r2, r3, #4
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	9203      	str	r2, [sp, #12]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	bfb8      	it	lt
 80140da:	f04f 33ff 	movlt.w	r3, #4294967295
 80140de:	3402      	adds	r4, #2
 80140e0:	9305      	str	r3, [sp, #20]
 80140e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80141c8 <_vfiprintf_r+0x25c>
 80140e6:	7821      	ldrb	r1, [r4, #0]
 80140e8:	2203      	movs	r2, #3
 80140ea:	4650      	mov	r0, sl
 80140ec:	f7ec f900 	bl	80002f0 <memchr>
 80140f0:	b140      	cbz	r0, 8014104 <_vfiprintf_r+0x198>
 80140f2:	2340      	movs	r3, #64	; 0x40
 80140f4:	eba0 000a 	sub.w	r0, r0, sl
 80140f8:	fa03 f000 	lsl.w	r0, r3, r0
 80140fc:	9b04      	ldr	r3, [sp, #16]
 80140fe:	4303      	orrs	r3, r0
 8014100:	3401      	adds	r4, #1
 8014102:	9304      	str	r3, [sp, #16]
 8014104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014108:	482c      	ldr	r0, [pc, #176]	; (80141bc <_vfiprintf_r+0x250>)
 801410a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801410e:	2206      	movs	r2, #6
 8014110:	f7ec f8ee 	bl	80002f0 <memchr>
 8014114:	2800      	cmp	r0, #0
 8014116:	d03f      	beq.n	8014198 <_vfiprintf_r+0x22c>
 8014118:	4b29      	ldr	r3, [pc, #164]	; (80141c0 <_vfiprintf_r+0x254>)
 801411a:	bb1b      	cbnz	r3, 8014164 <_vfiprintf_r+0x1f8>
 801411c:	9b03      	ldr	r3, [sp, #12]
 801411e:	3307      	adds	r3, #7
 8014120:	f023 0307 	bic.w	r3, r3, #7
 8014124:	3308      	adds	r3, #8
 8014126:	9303      	str	r3, [sp, #12]
 8014128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801412a:	443b      	add	r3, r7
 801412c:	9309      	str	r3, [sp, #36]	; 0x24
 801412e:	e767      	b.n	8014000 <_vfiprintf_r+0x94>
 8014130:	fb0c 3202 	mla	r2, ip, r2, r3
 8014134:	460c      	mov	r4, r1
 8014136:	2001      	movs	r0, #1
 8014138:	e7a5      	b.n	8014086 <_vfiprintf_r+0x11a>
 801413a:	2300      	movs	r3, #0
 801413c:	3401      	adds	r4, #1
 801413e:	9305      	str	r3, [sp, #20]
 8014140:	4619      	mov	r1, r3
 8014142:	f04f 0c0a 	mov.w	ip, #10
 8014146:	4620      	mov	r0, r4
 8014148:	f810 2b01 	ldrb.w	r2, [r0], #1
 801414c:	3a30      	subs	r2, #48	; 0x30
 801414e:	2a09      	cmp	r2, #9
 8014150:	d903      	bls.n	801415a <_vfiprintf_r+0x1ee>
 8014152:	2b00      	cmp	r3, #0
 8014154:	d0c5      	beq.n	80140e2 <_vfiprintf_r+0x176>
 8014156:	9105      	str	r1, [sp, #20]
 8014158:	e7c3      	b.n	80140e2 <_vfiprintf_r+0x176>
 801415a:	fb0c 2101 	mla	r1, ip, r1, r2
 801415e:	4604      	mov	r4, r0
 8014160:	2301      	movs	r3, #1
 8014162:	e7f0      	b.n	8014146 <_vfiprintf_r+0x1da>
 8014164:	ab03      	add	r3, sp, #12
 8014166:	9300      	str	r3, [sp, #0]
 8014168:	462a      	mov	r2, r5
 801416a:	4b16      	ldr	r3, [pc, #88]	; (80141c4 <_vfiprintf_r+0x258>)
 801416c:	a904      	add	r1, sp, #16
 801416e:	4630      	mov	r0, r6
 8014170:	f7fd fd52 	bl	8011c18 <_printf_float>
 8014174:	4607      	mov	r7, r0
 8014176:	1c78      	adds	r0, r7, #1
 8014178:	d1d6      	bne.n	8014128 <_vfiprintf_r+0x1bc>
 801417a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801417c:	07d9      	lsls	r1, r3, #31
 801417e:	d405      	bmi.n	801418c <_vfiprintf_r+0x220>
 8014180:	89ab      	ldrh	r3, [r5, #12]
 8014182:	059a      	lsls	r2, r3, #22
 8014184:	d402      	bmi.n	801418c <_vfiprintf_r+0x220>
 8014186:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014188:	f7ff fa12 	bl	80135b0 <__retarget_lock_release_recursive>
 801418c:	89ab      	ldrh	r3, [r5, #12]
 801418e:	065b      	lsls	r3, r3, #25
 8014190:	f53f af12 	bmi.w	8013fb8 <_vfiprintf_r+0x4c>
 8014194:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014196:	e711      	b.n	8013fbc <_vfiprintf_r+0x50>
 8014198:	ab03      	add	r3, sp, #12
 801419a:	9300      	str	r3, [sp, #0]
 801419c:	462a      	mov	r2, r5
 801419e:	4b09      	ldr	r3, [pc, #36]	; (80141c4 <_vfiprintf_r+0x258>)
 80141a0:	a904      	add	r1, sp, #16
 80141a2:	4630      	mov	r0, r6
 80141a4:	f7fd ffc4 	bl	8012130 <_printf_i>
 80141a8:	e7e4      	b.n	8014174 <_vfiprintf_r+0x208>
 80141aa:	bf00      	nop
 80141ac:	08014fc0 	.word	0x08014fc0
 80141b0:	08014fe0 	.word	0x08014fe0
 80141b4:	08014fa0 	.word	0x08014fa0
 80141b8:	0801515c 	.word	0x0801515c
 80141bc:	08015166 	.word	0x08015166
 80141c0:	08011c19 	.word	0x08011c19
 80141c4:	08013f47 	.word	0x08013f47
 80141c8:	08015162 	.word	0x08015162

080141cc <_sbrk_r>:
 80141cc:	b538      	push	{r3, r4, r5, lr}
 80141ce:	4d06      	ldr	r5, [pc, #24]	; (80141e8 <_sbrk_r+0x1c>)
 80141d0:	2300      	movs	r3, #0
 80141d2:	4604      	mov	r4, r0
 80141d4:	4608      	mov	r0, r1
 80141d6:	602b      	str	r3, [r5, #0]
 80141d8:	f7f0 fed6 	bl	8004f88 <_sbrk>
 80141dc:	1c43      	adds	r3, r0, #1
 80141de:	d102      	bne.n	80141e6 <_sbrk_r+0x1a>
 80141e0:	682b      	ldr	r3, [r5, #0]
 80141e2:	b103      	cbz	r3, 80141e6 <_sbrk_r+0x1a>
 80141e4:	6023      	str	r3, [r4, #0]
 80141e6:	bd38      	pop	{r3, r4, r5, pc}
 80141e8:	24000dac 	.word	0x24000dac

080141ec <__sread>:
 80141ec:	b510      	push	{r4, lr}
 80141ee:	460c      	mov	r4, r1
 80141f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141f4:	f000 f8e2 	bl	80143bc <_read_r>
 80141f8:	2800      	cmp	r0, #0
 80141fa:	bfab      	itete	ge
 80141fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80141fe:	89a3      	ldrhlt	r3, [r4, #12]
 8014200:	181b      	addge	r3, r3, r0
 8014202:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014206:	bfac      	ite	ge
 8014208:	6563      	strge	r3, [r4, #84]	; 0x54
 801420a:	81a3      	strhlt	r3, [r4, #12]
 801420c:	bd10      	pop	{r4, pc}

0801420e <__swrite>:
 801420e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014212:	461f      	mov	r7, r3
 8014214:	898b      	ldrh	r3, [r1, #12]
 8014216:	05db      	lsls	r3, r3, #23
 8014218:	4605      	mov	r5, r0
 801421a:	460c      	mov	r4, r1
 801421c:	4616      	mov	r6, r2
 801421e:	d505      	bpl.n	801422c <__swrite+0x1e>
 8014220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014224:	2302      	movs	r3, #2
 8014226:	2200      	movs	r2, #0
 8014228:	f000 f898 	bl	801435c <_lseek_r>
 801422c:	89a3      	ldrh	r3, [r4, #12]
 801422e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014232:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014236:	81a3      	strh	r3, [r4, #12]
 8014238:	4632      	mov	r2, r6
 801423a:	463b      	mov	r3, r7
 801423c:	4628      	mov	r0, r5
 801423e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014242:	f000 b817 	b.w	8014274 <_write_r>

08014246 <__sseek>:
 8014246:	b510      	push	{r4, lr}
 8014248:	460c      	mov	r4, r1
 801424a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801424e:	f000 f885 	bl	801435c <_lseek_r>
 8014252:	1c43      	adds	r3, r0, #1
 8014254:	89a3      	ldrh	r3, [r4, #12]
 8014256:	bf15      	itete	ne
 8014258:	6560      	strne	r0, [r4, #84]	; 0x54
 801425a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801425e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014262:	81a3      	strheq	r3, [r4, #12]
 8014264:	bf18      	it	ne
 8014266:	81a3      	strhne	r3, [r4, #12]
 8014268:	bd10      	pop	{r4, pc}

0801426a <__sclose>:
 801426a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801426e:	f000 b831 	b.w	80142d4 <_close_r>
	...

08014274 <_write_r>:
 8014274:	b538      	push	{r3, r4, r5, lr}
 8014276:	4d07      	ldr	r5, [pc, #28]	; (8014294 <_write_r+0x20>)
 8014278:	4604      	mov	r4, r0
 801427a:	4608      	mov	r0, r1
 801427c:	4611      	mov	r1, r2
 801427e:	2200      	movs	r2, #0
 8014280:	602a      	str	r2, [r5, #0]
 8014282:	461a      	mov	r2, r3
 8014284:	f7ee fefc 	bl	8003080 <_write>
 8014288:	1c43      	adds	r3, r0, #1
 801428a:	d102      	bne.n	8014292 <_write_r+0x1e>
 801428c:	682b      	ldr	r3, [r5, #0]
 801428e:	b103      	cbz	r3, 8014292 <_write_r+0x1e>
 8014290:	6023      	str	r3, [r4, #0]
 8014292:	bd38      	pop	{r3, r4, r5, pc}
 8014294:	24000dac 	.word	0x24000dac

08014298 <__assert_func>:
 8014298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801429a:	4614      	mov	r4, r2
 801429c:	461a      	mov	r2, r3
 801429e:	4b09      	ldr	r3, [pc, #36]	; (80142c4 <__assert_func+0x2c>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	4605      	mov	r5, r0
 80142a4:	68d8      	ldr	r0, [r3, #12]
 80142a6:	b14c      	cbz	r4, 80142bc <__assert_func+0x24>
 80142a8:	4b07      	ldr	r3, [pc, #28]	; (80142c8 <__assert_func+0x30>)
 80142aa:	9100      	str	r1, [sp, #0]
 80142ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80142b0:	4906      	ldr	r1, [pc, #24]	; (80142cc <__assert_func+0x34>)
 80142b2:	462b      	mov	r3, r5
 80142b4:	f000 f81e 	bl	80142f4 <fiprintf>
 80142b8:	f000 f89f 	bl	80143fa <abort>
 80142bc:	4b04      	ldr	r3, [pc, #16]	; (80142d0 <__assert_func+0x38>)
 80142be:	461c      	mov	r4, r3
 80142c0:	e7f3      	b.n	80142aa <__assert_func+0x12>
 80142c2:	bf00      	nop
 80142c4:	24000024 	.word	0x24000024
 80142c8:	0801516d 	.word	0x0801516d
 80142cc:	0801517a 	.word	0x0801517a
 80142d0:	080151a8 	.word	0x080151a8

080142d4 <_close_r>:
 80142d4:	b538      	push	{r3, r4, r5, lr}
 80142d6:	4d06      	ldr	r5, [pc, #24]	; (80142f0 <_close_r+0x1c>)
 80142d8:	2300      	movs	r3, #0
 80142da:	4604      	mov	r4, r0
 80142dc:	4608      	mov	r0, r1
 80142de:	602b      	str	r3, [r5, #0]
 80142e0:	f7f0 fe1d 	bl	8004f1e <_close>
 80142e4:	1c43      	adds	r3, r0, #1
 80142e6:	d102      	bne.n	80142ee <_close_r+0x1a>
 80142e8:	682b      	ldr	r3, [r5, #0]
 80142ea:	b103      	cbz	r3, 80142ee <_close_r+0x1a>
 80142ec:	6023      	str	r3, [r4, #0]
 80142ee:	bd38      	pop	{r3, r4, r5, pc}
 80142f0:	24000dac 	.word	0x24000dac

080142f4 <fiprintf>:
 80142f4:	b40e      	push	{r1, r2, r3}
 80142f6:	b503      	push	{r0, r1, lr}
 80142f8:	4601      	mov	r1, r0
 80142fa:	ab03      	add	r3, sp, #12
 80142fc:	4805      	ldr	r0, [pc, #20]	; (8014314 <fiprintf+0x20>)
 80142fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8014302:	6800      	ldr	r0, [r0, #0]
 8014304:	9301      	str	r3, [sp, #4]
 8014306:	f7ff fe31 	bl	8013f6c <_vfiprintf_r>
 801430a:	b002      	add	sp, #8
 801430c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014310:	b003      	add	sp, #12
 8014312:	4770      	bx	lr
 8014314:	24000024 	.word	0x24000024

08014318 <_fstat_r>:
 8014318:	b538      	push	{r3, r4, r5, lr}
 801431a:	4d07      	ldr	r5, [pc, #28]	; (8014338 <_fstat_r+0x20>)
 801431c:	2300      	movs	r3, #0
 801431e:	4604      	mov	r4, r0
 8014320:	4608      	mov	r0, r1
 8014322:	4611      	mov	r1, r2
 8014324:	602b      	str	r3, [r5, #0]
 8014326:	f7f0 fe06 	bl	8004f36 <_fstat>
 801432a:	1c43      	adds	r3, r0, #1
 801432c:	d102      	bne.n	8014334 <_fstat_r+0x1c>
 801432e:	682b      	ldr	r3, [r5, #0]
 8014330:	b103      	cbz	r3, 8014334 <_fstat_r+0x1c>
 8014332:	6023      	str	r3, [r4, #0]
 8014334:	bd38      	pop	{r3, r4, r5, pc}
 8014336:	bf00      	nop
 8014338:	24000dac 	.word	0x24000dac

0801433c <_isatty_r>:
 801433c:	b538      	push	{r3, r4, r5, lr}
 801433e:	4d06      	ldr	r5, [pc, #24]	; (8014358 <_isatty_r+0x1c>)
 8014340:	2300      	movs	r3, #0
 8014342:	4604      	mov	r4, r0
 8014344:	4608      	mov	r0, r1
 8014346:	602b      	str	r3, [r5, #0]
 8014348:	f7f0 fe05 	bl	8004f56 <_isatty>
 801434c:	1c43      	adds	r3, r0, #1
 801434e:	d102      	bne.n	8014356 <_isatty_r+0x1a>
 8014350:	682b      	ldr	r3, [r5, #0]
 8014352:	b103      	cbz	r3, 8014356 <_isatty_r+0x1a>
 8014354:	6023      	str	r3, [r4, #0]
 8014356:	bd38      	pop	{r3, r4, r5, pc}
 8014358:	24000dac 	.word	0x24000dac

0801435c <_lseek_r>:
 801435c:	b538      	push	{r3, r4, r5, lr}
 801435e:	4d07      	ldr	r5, [pc, #28]	; (801437c <_lseek_r+0x20>)
 8014360:	4604      	mov	r4, r0
 8014362:	4608      	mov	r0, r1
 8014364:	4611      	mov	r1, r2
 8014366:	2200      	movs	r2, #0
 8014368:	602a      	str	r2, [r5, #0]
 801436a:	461a      	mov	r2, r3
 801436c:	f7f0 fdfe 	bl	8004f6c <_lseek>
 8014370:	1c43      	adds	r3, r0, #1
 8014372:	d102      	bne.n	801437a <_lseek_r+0x1e>
 8014374:	682b      	ldr	r3, [r5, #0]
 8014376:	b103      	cbz	r3, 801437a <_lseek_r+0x1e>
 8014378:	6023      	str	r3, [r4, #0]
 801437a:	bd38      	pop	{r3, r4, r5, pc}
 801437c:	24000dac 	.word	0x24000dac

08014380 <__ascii_mbtowc>:
 8014380:	b082      	sub	sp, #8
 8014382:	b901      	cbnz	r1, 8014386 <__ascii_mbtowc+0x6>
 8014384:	a901      	add	r1, sp, #4
 8014386:	b142      	cbz	r2, 801439a <__ascii_mbtowc+0x1a>
 8014388:	b14b      	cbz	r3, 801439e <__ascii_mbtowc+0x1e>
 801438a:	7813      	ldrb	r3, [r2, #0]
 801438c:	600b      	str	r3, [r1, #0]
 801438e:	7812      	ldrb	r2, [r2, #0]
 8014390:	1e10      	subs	r0, r2, #0
 8014392:	bf18      	it	ne
 8014394:	2001      	movne	r0, #1
 8014396:	b002      	add	sp, #8
 8014398:	4770      	bx	lr
 801439a:	4610      	mov	r0, r2
 801439c:	e7fb      	b.n	8014396 <__ascii_mbtowc+0x16>
 801439e:	f06f 0001 	mvn.w	r0, #1
 80143a2:	e7f8      	b.n	8014396 <__ascii_mbtowc+0x16>

080143a4 <__malloc_lock>:
 80143a4:	4801      	ldr	r0, [pc, #4]	; (80143ac <__malloc_lock+0x8>)
 80143a6:	f7ff b902 	b.w	80135ae <__retarget_lock_acquire_recursive>
 80143aa:	bf00      	nop
 80143ac:	24000da4 	.word	0x24000da4

080143b0 <__malloc_unlock>:
 80143b0:	4801      	ldr	r0, [pc, #4]	; (80143b8 <__malloc_unlock+0x8>)
 80143b2:	f7ff b8fd 	b.w	80135b0 <__retarget_lock_release_recursive>
 80143b6:	bf00      	nop
 80143b8:	24000da4 	.word	0x24000da4

080143bc <_read_r>:
 80143bc:	b538      	push	{r3, r4, r5, lr}
 80143be:	4d07      	ldr	r5, [pc, #28]	; (80143dc <_read_r+0x20>)
 80143c0:	4604      	mov	r4, r0
 80143c2:	4608      	mov	r0, r1
 80143c4:	4611      	mov	r1, r2
 80143c6:	2200      	movs	r2, #0
 80143c8:	602a      	str	r2, [r5, #0]
 80143ca:	461a      	mov	r2, r3
 80143cc:	f7f0 fd8a 	bl	8004ee4 <_read>
 80143d0:	1c43      	adds	r3, r0, #1
 80143d2:	d102      	bne.n	80143da <_read_r+0x1e>
 80143d4:	682b      	ldr	r3, [r5, #0]
 80143d6:	b103      	cbz	r3, 80143da <_read_r+0x1e>
 80143d8:	6023      	str	r3, [r4, #0]
 80143da:	bd38      	pop	{r3, r4, r5, pc}
 80143dc:	24000dac 	.word	0x24000dac

080143e0 <__ascii_wctomb>:
 80143e0:	b149      	cbz	r1, 80143f6 <__ascii_wctomb+0x16>
 80143e2:	2aff      	cmp	r2, #255	; 0xff
 80143e4:	bf85      	ittet	hi
 80143e6:	238a      	movhi	r3, #138	; 0x8a
 80143e8:	6003      	strhi	r3, [r0, #0]
 80143ea:	700a      	strbls	r2, [r1, #0]
 80143ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80143f0:	bf98      	it	ls
 80143f2:	2001      	movls	r0, #1
 80143f4:	4770      	bx	lr
 80143f6:	4608      	mov	r0, r1
 80143f8:	4770      	bx	lr

080143fa <abort>:
 80143fa:	b508      	push	{r3, lr}
 80143fc:	2006      	movs	r0, #6
 80143fe:	f000 f82b 	bl	8014458 <raise>
 8014402:	2001      	movs	r0, #1
 8014404:	f7f0 fd64 	bl	8004ed0 <_exit>

08014408 <_raise_r>:
 8014408:	291f      	cmp	r1, #31
 801440a:	b538      	push	{r3, r4, r5, lr}
 801440c:	4604      	mov	r4, r0
 801440e:	460d      	mov	r5, r1
 8014410:	d904      	bls.n	801441c <_raise_r+0x14>
 8014412:	2316      	movs	r3, #22
 8014414:	6003      	str	r3, [r0, #0]
 8014416:	f04f 30ff 	mov.w	r0, #4294967295
 801441a:	bd38      	pop	{r3, r4, r5, pc}
 801441c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801441e:	b112      	cbz	r2, 8014426 <_raise_r+0x1e>
 8014420:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014424:	b94b      	cbnz	r3, 801443a <_raise_r+0x32>
 8014426:	4620      	mov	r0, r4
 8014428:	f000 f830 	bl	801448c <_getpid_r>
 801442c:	462a      	mov	r2, r5
 801442e:	4601      	mov	r1, r0
 8014430:	4620      	mov	r0, r4
 8014432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014436:	f000 b817 	b.w	8014468 <_kill_r>
 801443a:	2b01      	cmp	r3, #1
 801443c:	d00a      	beq.n	8014454 <_raise_r+0x4c>
 801443e:	1c59      	adds	r1, r3, #1
 8014440:	d103      	bne.n	801444a <_raise_r+0x42>
 8014442:	2316      	movs	r3, #22
 8014444:	6003      	str	r3, [r0, #0]
 8014446:	2001      	movs	r0, #1
 8014448:	e7e7      	b.n	801441a <_raise_r+0x12>
 801444a:	2400      	movs	r4, #0
 801444c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014450:	4628      	mov	r0, r5
 8014452:	4798      	blx	r3
 8014454:	2000      	movs	r0, #0
 8014456:	e7e0      	b.n	801441a <_raise_r+0x12>

08014458 <raise>:
 8014458:	4b02      	ldr	r3, [pc, #8]	; (8014464 <raise+0xc>)
 801445a:	4601      	mov	r1, r0
 801445c:	6818      	ldr	r0, [r3, #0]
 801445e:	f7ff bfd3 	b.w	8014408 <_raise_r>
 8014462:	bf00      	nop
 8014464:	24000024 	.word	0x24000024

08014468 <_kill_r>:
 8014468:	b538      	push	{r3, r4, r5, lr}
 801446a:	4d07      	ldr	r5, [pc, #28]	; (8014488 <_kill_r+0x20>)
 801446c:	2300      	movs	r3, #0
 801446e:	4604      	mov	r4, r0
 8014470:	4608      	mov	r0, r1
 8014472:	4611      	mov	r1, r2
 8014474:	602b      	str	r3, [r5, #0]
 8014476:	f7f0 fd1b 	bl	8004eb0 <_kill>
 801447a:	1c43      	adds	r3, r0, #1
 801447c:	d102      	bne.n	8014484 <_kill_r+0x1c>
 801447e:	682b      	ldr	r3, [r5, #0]
 8014480:	b103      	cbz	r3, 8014484 <_kill_r+0x1c>
 8014482:	6023      	str	r3, [r4, #0]
 8014484:	bd38      	pop	{r3, r4, r5, pc}
 8014486:	bf00      	nop
 8014488:	24000dac 	.word	0x24000dac

0801448c <_getpid_r>:
 801448c:	f7f0 bd08 	b.w	8004ea0 <_getpid>

08014490 <atan2>:
 8014490:	f000 b862 	b.w	8014558 <__ieee754_atan2>
 8014494:	0000      	movs	r0, r0
	...

08014498 <sqrt>:
 8014498:	b508      	push	{r3, lr}
 801449a:	ed2d 8b04 	vpush	{d8-d9}
 801449e:	eeb0 8b40 	vmov.f64	d8, d0
 80144a2:	f000 f927 	bl	80146f4 <__ieee754_sqrt>
 80144a6:	4b10      	ldr	r3, [pc, #64]	; (80144e8 <sqrt+0x50>)
 80144a8:	f993 3000 	ldrsb.w	r3, [r3]
 80144ac:	3301      	adds	r3, #1
 80144ae:	d011      	beq.n	80144d4 <sqrt+0x3c>
 80144b0:	eeb4 8b48 	vcmp.f64	d8, d8
 80144b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144b8:	d60c      	bvs.n	80144d4 <sqrt+0x3c>
 80144ba:	ed9f 9b09 	vldr	d9, [pc, #36]	; 80144e0 <sqrt+0x48>
 80144be:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80144c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144c6:	d505      	bpl.n	80144d4 <sqrt+0x3c>
 80144c8:	f7fd fae2 	bl	8011a90 <__errno>
 80144cc:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80144d0:	2321      	movs	r3, #33	; 0x21
 80144d2:	6003      	str	r3, [r0, #0]
 80144d4:	ecbd 8b04 	vpop	{d8-d9}
 80144d8:	bd08      	pop	{r3, pc}
 80144da:	bf00      	nop
 80144dc:	f3af 8000 	nop.w
	...
 80144e8:	240001f4 	.word	0x240001f4

080144ec <asinf>:
 80144ec:	b508      	push	{r3, lr}
 80144ee:	ed2d 8b02 	vpush	{d8}
 80144f2:	eeb0 8a40 	vmov.f32	s16, s0
 80144f6:	f000 f901 	bl	80146fc <__ieee754_asinf>
 80144fa:	4b13      	ldr	r3, [pc, #76]	; (8014548 <asinf+0x5c>)
 80144fc:	f993 3000 	ldrsb.w	r3, [r3]
 8014500:	3301      	adds	r3, #1
 8014502:	eef0 8a40 	vmov.f32	s17, s0
 8014506:	d01a      	beq.n	801453e <asinf+0x52>
 8014508:	eeb4 8a48 	vcmp.f32	s16, s16
 801450c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014510:	d615      	bvs.n	801453e <asinf+0x52>
 8014512:	eeb0 0a48 	vmov.f32	s0, s16
 8014516:	f000 fc53 	bl	8014dc0 <fabsf>
 801451a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801451e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014526:	dd0a      	ble.n	801453e <asinf+0x52>
 8014528:	f7fd fab2 	bl	8011a90 <__errno>
 801452c:	ecbd 8b02 	vpop	{d8}
 8014530:	2321      	movs	r3, #33	; 0x21
 8014532:	6003      	str	r3, [r0, #0]
 8014534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014538:	4804      	ldr	r0, [pc, #16]	; (801454c <asinf+0x60>)
 801453a:	f000 bc49 	b.w	8014dd0 <nanf>
 801453e:	eeb0 0a68 	vmov.f32	s0, s17
 8014542:	ecbd 8b02 	vpop	{d8}
 8014546:	bd08      	pop	{r3, pc}
 8014548:	240001f4 	.word	0x240001f4
 801454c:	080151a8 	.word	0x080151a8

08014550 <atan2f>:
 8014550:	f000 b9ba 	b.w	80148c8 <__ieee754_atan2f>
 8014554:	0000      	movs	r0, r0
	...

08014558 <__ieee754_atan2>:
 8014558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801455a:	ee11 6a10 	vmov	r6, s2
 801455e:	ee11 0a90 	vmov	r0, s3
 8014562:	4273      	negs	r3, r6
 8014564:	4f60      	ldr	r7, [pc, #384]	; (80146e8 <__ieee754_atan2+0x190>)
 8014566:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 801456a:	4333      	orrs	r3, r6
 801456c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8014570:	42bb      	cmp	r3, r7
 8014572:	ed8d 0b00 	vstr	d0, [sp]
 8014576:	d80b      	bhi.n	8014590 <__ieee754_atan2+0x38>
 8014578:	e9dd c500 	ldrd	ip, r5, [sp]
 801457c:	f1cc 0100 	rsb	r1, ip, #0
 8014580:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014584:	ea41 010c 	orr.w	r1, r1, ip
 8014588:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 801458c:	42b9      	cmp	r1, r7
 801458e:	d906      	bls.n	801459e <__ieee754_atan2+0x46>
 8014590:	ed9d 7b00 	vldr	d7, [sp]
 8014594:	ee37 7b01 	vadd.f64	d7, d7, d1
 8014598:	ed8d 7b00 	vstr	d7, [sp]
 801459c:	e054      	b.n	8014648 <__ieee754_atan2+0xf0>
 801459e:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 80145a2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80145a6:	4331      	orrs	r1, r6
 80145a8:	d104      	bne.n	80145b4 <__ieee754_atan2+0x5c>
 80145aa:	b003      	add	sp, #12
 80145ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80145b0:	f000 ba2e 	b.w	8014a10 <atan>
 80145b4:	1784      	asrs	r4, r0, #30
 80145b6:	f004 0402 	and.w	r4, r4, #2
 80145ba:	ea53 010c 	orrs.w	r1, r3, ip
 80145be:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 80145c2:	d109      	bne.n	80145d8 <__ieee754_atan2+0x80>
 80145c4:	2c02      	cmp	r4, #2
 80145c6:	d069      	beq.n	801469c <__ieee754_atan2+0x144>
 80145c8:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80146b0 <__ieee754_atan2+0x158>
 80145cc:	ed9d 6b00 	vldr	d6, [sp]
 80145d0:	2c03      	cmp	r4, #3
 80145d2:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80145d6:	e7df      	b.n	8014598 <__ieee754_atan2+0x40>
 80145d8:	ea52 0106 	orrs.w	r1, r2, r6
 80145dc:	d107      	bne.n	80145ee <__ieee754_atan2+0x96>
 80145de:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80146b8 <__ieee754_atan2+0x160>
 80145e2:	ed9f 7b37 	vldr	d7, [pc, #220]	; 80146c0 <__ieee754_atan2+0x168>
 80145e6:	2d00      	cmp	r5, #0
 80145e8:	fe26 7b07 	vselge.f64	d7, d6, d7
 80145ec:	e7d4      	b.n	8014598 <__ieee754_atan2+0x40>
 80145ee:	42ba      	cmp	r2, r7
 80145f0:	d10f      	bne.n	8014612 <__ieee754_atan2+0xba>
 80145f2:	4293      	cmp	r3, r2
 80145f4:	f104 34ff 	add.w	r4, r4, #4294967295
 80145f8:	d107      	bne.n	801460a <__ieee754_atan2+0xb2>
 80145fa:	2c02      	cmp	r4, #2
 80145fc:	d851      	bhi.n	80146a2 <__ieee754_atan2+0x14a>
 80145fe:	4b3b      	ldr	r3, [pc, #236]	; (80146ec <__ieee754_atan2+0x194>)
 8014600:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8014604:	ed94 7b00 	vldr	d7, [r4]
 8014608:	e7c6      	b.n	8014598 <__ieee754_atan2+0x40>
 801460a:	2c02      	cmp	r4, #2
 801460c:	d84c      	bhi.n	80146a8 <__ieee754_atan2+0x150>
 801460e:	4b38      	ldr	r3, [pc, #224]	; (80146f0 <__ieee754_atan2+0x198>)
 8014610:	e7f6      	b.n	8014600 <__ieee754_atan2+0xa8>
 8014612:	42bb      	cmp	r3, r7
 8014614:	d0e3      	beq.n	80145de <__ieee754_atan2+0x86>
 8014616:	1a9b      	subs	r3, r3, r2
 8014618:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801461c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014620:	da16      	bge.n	8014650 <__ieee754_atan2+0xf8>
 8014622:	2800      	cmp	r0, #0
 8014624:	da01      	bge.n	801462a <__ieee754_atan2+0xd2>
 8014626:	323c      	adds	r2, #60	; 0x3c
 8014628:	db17      	blt.n	801465a <__ieee754_atan2+0x102>
 801462a:	ed9d 7b00 	vldr	d7, [sp]
 801462e:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8014632:	f000 fae7 	bl	8014c04 <fabs>
 8014636:	f000 f9eb 	bl	8014a10 <atan>
 801463a:	ed8d 0b00 	vstr	d0, [sp]
 801463e:	2c01      	cmp	r4, #1
 8014640:	d00e      	beq.n	8014660 <__ieee754_atan2+0x108>
 8014642:	2c02      	cmp	r4, #2
 8014644:	d014      	beq.n	8014670 <__ieee754_atan2+0x118>
 8014646:	b9f4      	cbnz	r4, 8014686 <__ieee754_atan2+0x12e>
 8014648:	ed9d 0b00 	vldr	d0, [sp]
 801464c:	b003      	add	sp, #12
 801464e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014650:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80146b8 <__ieee754_atan2+0x160>
 8014654:	ed8d 7b00 	vstr	d7, [sp]
 8014658:	e7f1      	b.n	801463e <__ieee754_atan2+0xe6>
 801465a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 80146c8 <__ieee754_atan2+0x170>
 801465e:	e7f9      	b.n	8014654 <__ieee754_atan2+0xfc>
 8014660:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014664:	9901      	ldr	r1, [sp, #4]
 8014666:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801466a:	e9cd 2300 	strd	r2, r3, [sp]
 801466e:	e7eb      	b.n	8014648 <__ieee754_atan2+0xf0>
 8014670:	ed9d 6b00 	vldr	d6, [sp]
 8014674:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80146d0 <__ieee754_atan2+0x178>
 8014678:	ee36 7b47 	vsub.f64	d7, d6, d7
 801467c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80146d8 <__ieee754_atan2+0x180>
 8014680:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014684:	e788      	b.n	8014598 <__ieee754_atan2+0x40>
 8014686:	ed9d 6b00 	vldr	d6, [sp]
 801468a:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80146d0 <__ieee754_atan2+0x178>
 801468e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014692:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80146d8 <__ieee754_atan2+0x180>
 8014696:	ee37 7b46 	vsub.f64	d7, d7, d6
 801469a:	e77d      	b.n	8014598 <__ieee754_atan2+0x40>
 801469c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80146d8 <__ieee754_atan2+0x180>
 80146a0:	e77a      	b.n	8014598 <__ieee754_atan2+0x40>
 80146a2:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80146e0 <__ieee754_atan2+0x188>
 80146a6:	e777      	b.n	8014598 <__ieee754_atan2+0x40>
 80146a8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80146c8 <__ieee754_atan2+0x170>
 80146ac:	e774      	b.n	8014598 <__ieee754_atan2+0x40>
 80146ae:	bf00      	nop
 80146b0:	54442d18 	.word	0x54442d18
 80146b4:	c00921fb 	.word	0xc00921fb
 80146b8:	54442d18 	.word	0x54442d18
 80146bc:	3ff921fb 	.word	0x3ff921fb
 80146c0:	54442d18 	.word	0x54442d18
 80146c4:	bff921fb 	.word	0xbff921fb
	...
 80146d0:	33145c07 	.word	0x33145c07
 80146d4:	3ca1a626 	.word	0x3ca1a626
 80146d8:	54442d18 	.word	0x54442d18
 80146dc:	400921fb 	.word	0x400921fb
 80146e0:	54442d18 	.word	0x54442d18
 80146e4:	3fe921fb 	.word	0x3fe921fb
 80146e8:	7ff00000 	.word	0x7ff00000
 80146ec:	080152b8 	.word	0x080152b8
 80146f0:	080152d0 	.word	0x080152d0

080146f4 <__ieee754_sqrt>:
 80146f4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80146f8:	4770      	bx	lr
	...

080146fc <__ieee754_asinf>:
 80146fc:	b538      	push	{r3, r4, r5, lr}
 80146fe:	ee10 5a10 	vmov	r5, s0
 8014702:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014706:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801470a:	ed2d 8b04 	vpush	{d8-d9}
 801470e:	d10c      	bne.n	801472a <__ieee754_asinf+0x2e>
 8014710:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8014888 <__ieee754_asinf+0x18c>
 8014714:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801488c <__ieee754_asinf+0x190>
 8014718:	ee60 7a27 	vmul.f32	s15, s0, s15
 801471c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014720:	eeb0 0a67 	vmov.f32	s0, s15
 8014724:	ecbd 8b04 	vpop	{d8-d9}
 8014728:	bd38      	pop	{r3, r4, r5, pc}
 801472a:	dd04      	ble.n	8014736 <__ieee754_asinf+0x3a>
 801472c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014730:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8014734:	e7f6      	b.n	8014724 <__ieee754_asinf+0x28>
 8014736:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801473a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801473e:	da0b      	bge.n	8014758 <__ieee754_asinf+0x5c>
 8014740:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8014744:	da52      	bge.n	80147ec <__ieee754_asinf+0xf0>
 8014746:	eddf 7a52 	vldr	s15, [pc, #328]	; 8014890 <__ieee754_asinf+0x194>
 801474a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801474e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014756:	dce5      	bgt.n	8014724 <__ieee754_asinf+0x28>
 8014758:	f000 fb32 	bl	8014dc0 <fabsf>
 801475c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8014760:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8014764:	ee20 8a08 	vmul.f32	s16, s0, s16
 8014768:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8014894 <__ieee754_asinf+0x198>
 801476c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8014898 <__ieee754_asinf+0x19c>
 8014770:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801489c <__ieee754_asinf+0x1a0>
 8014774:	eea8 7a27 	vfma.f32	s14, s16, s15
 8014778:	eddf 7a49 	vldr	s15, [pc, #292]	; 80148a0 <__ieee754_asinf+0x1a4>
 801477c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014780:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80148a4 <__ieee754_asinf+0x1a8>
 8014784:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014788:	eddf 7a47 	vldr	s15, [pc, #284]	; 80148a8 <__ieee754_asinf+0x1ac>
 801478c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014790:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80148ac <__ieee754_asinf+0x1b0>
 8014794:	eea7 9a88 	vfma.f32	s18, s15, s16
 8014798:	eddf 7a45 	vldr	s15, [pc, #276]	; 80148b0 <__ieee754_asinf+0x1b4>
 801479c:	eee8 7a07 	vfma.f32	s15, s16, s14
 80147a0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80148b4 <__ieee754_asinf+0x1b8>
 80147a4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80147a8:	eddf 7a43 	vldr	s15, [pc, #268]	; 80148b8 <__ieee754_asinf+0x1bc>
 80147ac:	eee7 7a08 	vfma.f32	s15, s14, s16
 80147b0:	eeb0 0a48 	vmov.f32	s0, s16
 80147b4:	eee7 8a88 	vfma.f32	s17, s15, s16
 80147b8:	f000 f924 	bl	8014a04 <__ieee754_sqrtf>
 80147bc:	4b3f      	ldr	r3, [pc, #252]	; (80148bc <__ieee754_asinf+0x1c0>)
 80147be:	ee29 9a08 	vmul.f32	s18, s18, s16
 80147c2:	429c      	cmp	r4, r3
 80147c4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80147c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80147cc:	dd3d      	ble.n	801484a <__ieee754_asinf+0x14e>
 80147ce:	eea0 0a06 	vfma.f32	s0, s0, s12
 80147d2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80148c0 <__ieee754_asinf+0x1c4>
 80147d6:	eee0 7a26 	vfma.f32	s15, s0, s13
 80147da:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801488c <__ieee754_asinf+0x190>
 80147de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80147e2:	2d00      	cmp	r5, #0
 80147e4:	bfd8      	it	le
 80147e6:	eeb1 0a40 	vnegle.f32	s0, s0
 80147ea:	e79b      	b.n	8014724 <__ieee754_asinf+0x28>
 80147ec:	ee60 7a00 	vmul.f32	s15, s0, s0
 80147f0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8014894 <__ieee754_asinf+0x198>
 80147f4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8014898 <__ieee754_asinf+0x19c>
 80147f8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80148ac <__ieee754_asinf+0x1b0>
 80147fc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014800:	eddf 6a27 	vldr	s13, [pc, #156]	; 80148a0 <__ieee754_asinf+0x1a4>
 8014804:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014808:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80148a4 <__ieee754_asinf+0x1a8>
 801480c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014810:	eddf 6a25 	vldr	s13, [pc, #148]	; 80148a8 <__ieee754_asinf+0x1ac>
 8014814:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014818:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801489c <__ieee754_asinf+0x1a0>
 801481c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014820:	eddf 6a23 	vldr	s13, [pc, #140]	; 80148b0 <__ieee754_asinf+0x1b4>
 8014824:	eee7 6a86 	vfma.f32	s13, s15, s12
 8014828:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80148b4 <__ieee754_asinf+0x1b8>
 801482c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8014830:	eddf 6a21 	vldr	s13, [pc, #132]	; 80148b8 <__ieee754_asinf+0x1bc>
 8014834:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014838:	ee27 7a27 	vmul.f32	s14, s14, s15
 801483c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8014840:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8014844:	eea0 0a27 	vfma.f32	s0, s0, s15
 8014848:	e76c      	b.n	8014724 <__ieee754_asinf+0x28>
 801484a:	ee10 3a10 	vmov	r3, s0
 801484e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014852:	f023 030f 	bic.w	r3, r3, #15
 8014856:	ee07 3a10 	vmov	s14, r3
 801485a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801485e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014862:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014866:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801486a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8014888 <__ieee754_asinf+0x18c>
 801486e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8014872:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8014876:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80148c4 <__ieee754_asinf+0x1c8>
 801487a:	eeb0 6a40 	vmov.f32	s12, s0
 801487e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014882:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014886:	e7aa      	b.n	80147de <__ieee754_asinf+0xe2>
 8014888:	b33bbd2e 	.word	0xb33bbd2e
 801488c:	3fc90fdb 	.word	0x3fc90fdb
 8014890:	7149f2ca 	.word	0x7149f2ca
 8014894:	3811ef08 	.word	0x3811ef08
 8014898:	3a4f7f04 	.word	0x3a4f7f04
 801489c:	3e2aaaab 	.word	0x3e2aaaab
 80148a0:	bd241146 	.word	0xbd241146
 80148a4:	3e4e0aa8 	.word	0x3e4e0aa8
 80148a8:	bea6b090 	.word	0xbea6b090
 80148ac:	3d9dc62e 	.word	0x3d9dc62e
 80148b0:	bf303361 	.word	0xbf303361
 80148b4:	4001572d 	.word	0x4001572d
 80148b8:	c019d139 	.word	0xc019d139
 80148bc:	3f799999 	.word	0x3f799999
 80148c0:	333bbd2e 	.word	0x333bbd2e
 80148c4:	3f490fdb 	.word	0x3f490fdb

080148c8 <__ieee754_atan2f>:
 80148c8:	ee10 2a90 	vmov	r2, s1
 80148cc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80148d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80148d4:	b510      	push	{r4, lr}
 80148d6:	eef0 7a40 	vmov.f32	s15, s0
 80148da:	dc06      	bgt.n	80148ea <__ieee754_atan2f+0x22>
 80148dc:	ee10 0a10 	vmov	r0, s0
 80148e0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80148e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80148e8:	dd04      	ble.n	80148f4 <__ieee754_atan2f+0x2c>
 80148ea:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80148ee:	eeb0 0a67 	vmov.f32	s0, s15
 80148f2:	bd10      	pop	{r4, pc}
 80148f4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80148f8:	d103      	bne.n	8014902 <__ieee754_atan2f+0x3a>
 80148fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148fe:	f000 b98b 	b.w	8014c18 <atanf>
 8014902:	1794      	asrs	r4, r2, #30
 8014904:	f004 0402 	and.w	r4, r4, #2
 8014908:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801490c:	b93b      	cbnz	r3, 801491e <__ieee754_atan2f+0x56>
 801490e:	2c02      	cmp	r4, #2
 8014910:	d05c      	beq.n	80149cc <__ieee754_atan2f+0x104>
 8014912:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80149e0 <__ieee754_atan2f+0x118>
 8014916:	2c03      	cmp	r4, #3
 8014918:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801491c:	e7e7      	b.n	80148ee <__ieee754_atan2f+0x26>
 801491e:	b939      	cbnz	r1, 8014930 <__ieee754_atan2f+0x68>
 8014920:	eddf 7a30 	vldr	s15, [pc, #192]	; 80149e4 <__ieee754_atan2f+0x11c>
 8014924:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80149e8 <__ieee754_atan2f+0x120>
 8014928:	2800      	cmp	r0, #0
 801492a:	fe67 7a80 	vselge.f32	s15, s15, s0
 801492e:	e7de      	b.n	80148ee <__ieee754_atan2f+0x26>
 8014930:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014934:	d110      	bne.n	8014958 <__ieee754_atan2f+0x90>
 8014936:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801493a:	f104 34ff 	add.w	r4, r4, #4294967295
 801493e:	d107      	bne.n	8014950 <__ieee754_atan2f+0x88>
 8014940:	2c02      	cmp	r4, #2
 8014942:	d846      	bhi.n	80149d2 <__ieee754_atan2f+0x10a>
 8014944:	4b29      	ldr	r3, [pc, #164]	; (80149ec <__ieee754_atan2f+0x124>)
 8014946:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801494a:	edd4 7a00 	vldr	s15, [r4]
 801494e:	e7ce      	b.n	80148ee <__ieee754_atan2f+0x26>
 8014950:	2c02      	cmp	r4, #2
 8014952:	d841      	bhi.n	80149d8 <__ieee754_atan2f+0x110>
 8014954:	4b26      	ldr	r3, [pc, #152]	; (80149f0 <__ieee754_atan2f+0x128>)
 8014956:	e7f6      	b.n	8014946 <__ieee754_atan2f+0x7e>
 8014958:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801495c:	d0e0      	beq.n	8014920 <__ieee754_atan2f+0x58>
 801495e:	1a5b      	subs	r3, r3, r1
 8014960:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8014964:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8014968:	da1a      	bge.n	80149a0 <__ieee754_atan2f+0xd8>
 801496a:	2a00      	cmp	r2, #0
 801496c:	da01      	bge.n	8014972 <__ieee754_atan2f+0xaa>
 801496e:	313c      	adds	r1, #60	; 0x3c
 8014970:	db19      	blt.n	80149a6 <__ieee754_atan2f+0xde>
 8014972:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8014976:	f000 fa23 	bl	8014dc0 <fabsf>
 801497a:	f000 f94d 	bl	8014c18 <atanf>
 801497e:	eef0 7a40 	vmov.f32	s15, s0
 8014982:	2c01      	cmp	r4, #1
 8014984:	d012      	beq.n	80149ac <__ieee754_atan2f+0xe4>
 8014986:	2c02      	cmp	r4, #2
 8014988:	d017      	beq.n	80149ba <__ieee754_atan2f+0xf2>
 801498a:	2c00      	cmp	r4, #0
 801498c:	d0af      	beq.n	80148ee <__ieee754_atan2f+0x26>
 801498e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80149f4 <__ieee754_atan2f+0x12c>
 8014992:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014996:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80149f8 <__ieee754_atan2f+0x130>
 801499a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801499e:	e7a6      	b.n	80148ee <__ieee754_atan2f+0x26>
 80149a0:	eddf 7a10 	vldr	s15, [pc, #64]	; 80149e4 <__ieee754_atan2f+0x11c>
 80149a4:	e7ed      	b.n	8014982 <__ieee754_atan2f+0xba>
 80149a6:	eddf 7a15 	vldr	s15, [pc, #84]	; 80149fc <__ieee754_atan2f+0x134>
 80149aa:	e7ea      	b.n	8014982 <__ieee754_atan2f+0xba>
 80149ac:	ee17 3a90 	vmov	r3, s15
 80149b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80149b4:	ee07 3a90 	vmov	s15, r3
 80149b8:	e799      	b.n	80148ee <__ieee754_atan2f+0x26>
 80149ba:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80149f4 <__ieee754_atan2f+0x12c>
 80149be:	ee77 7a80 	vadd.f32	s15, s15, s0
 80149c2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80149f8 <__ieee754_atan2f+0x130>
 80149c6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80149ca:	e790      	b.n	80148ee <__ieee754_atan2f+0x26>
 80149cc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80149f8 <__ieee754_atan2f+0x130>
 80149d0:	e78d      	b.n	80148ee <__ieee754_atan2f+0x26>
 80149d2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014a00 <__ieee754_atan2f+0x138>
 80149d6:	e78a      	b.n	80148ee <__ieee754_atan2f+0x26>
 80149d8:	eddf 7a08 	vldr	s15, [pc, #32]	; 80149fc <__ieee754_atan2f+0x134>
 80149dc:	e787      	b.n	80148ee <__ieee754_atan2f+0x26>
 80149de:	bf00      	nop
 80149e0:	c0490fdb 	.word	0xc0490fdb
 80149e4:	3fc90fdb 	.word	0x3fc90fdb
 80149e8:	bfc90fdb 	.word	0xbfc90fdb
 80149ec:	080152e8 	.word	0x080152e8
 80149f0:	080152f4 	.word	0x080152f4
 80149f4:	33bbbd2e 	.word	0x33bbbd2e
 80149f8:	40490fdb 	.word	0x40490fdb
 80149fc:	00000000 	.word	0x00000000
 8014a00:	3f490fdb 	.word	0x3f490fdb

08014a04 <__ieee754_sqrtf>:
 8014a04:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014a08:	4770      	bx	lr
 8014a0a:	0000      	movs	r0, r0
 8014a0c:	0000      	movs	r0, r0
	...

08014a10 <atan>:
 8014a10:	b538      	push	{r3, r4, r5, lr}
 8014a12:	eeb0 7b40 	vmov.f64	d7, d0
 8014a16:	ee17 5a90 	vmov	r5, s15
 8014a1a:	4b73      	ldr	r3, [pc, #460]	; (8014be8 <atan+0x1d8>)
 8014a1c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014a20:	429c      	cmp	r4, r3
 8014a22:	dd13      	ble.n	8014a4c <atan+0x3c>
 8014a24:	4b71      	ldr	r3, [pc, #452]	; (8014bec <atan+0x1dc>)
 8014a26:	429c      	cmp	r4, r3
 8014a28:	dc03      	bgt.n	8014a32 <atan+0x22>
 8014a2a:	d107      	bne.n	8014a3c <atan+0x2c>
 8014a2c:	ee10 3a10 	vmov	r3, s0
 8014a30:	b123      	cbz	r3, 8014a3c <atan+0x2c>
 8014a32:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014a36:	eeb0 0b47 	vmov.f64	d0, d7
 8014a3a:	bd38      	pop	{r3, r4, r5, pc}
 8014a3c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8014b78 <atan+0x168>
 8014a40:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8014b80 <atan+0x170>
 8014a44:	2d00      	cmp	r5, #0
 8014a46:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8014a4a:	e7f4      	b.n	8014a36 <atan+0x26>
 8014a4c:	4b68      	ldr	r3, [pc, #416]	; (8014bf0 <atan+0x1e0>)
 8014a4e:	429c      	cmp	r4, r3
 8014a50:	dc11      	bgt.n	8014a76 <atan+0x66>
 8014a52:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8014a56:	429c      	cmp	r4, r3
 8014a58:	dc0a      	bgt.n	8014a70 <atan+0x60>
 8014a5a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8014a5e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8014b88 <atan+0x178>
 8014a62:	ee30 6b06 	vadd.f64	d6, d0, d6
 8014a66:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8014a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a6e:	dce2      	bgt.n	8014a36 <atan+0x26>
 8014a70:	f04f 33ff 	mov.w	r3, #4294967295
 8014a74:	e013      	b.n	8014a9e <atan+0x8e>
 8014a76:	f000 f8c5 	bl	8014c04 <fabs>
 8014a7a:	4b5e      	ldr	r3, [pc, #376]	; (8014bf4 <atan+0x1e4>)
 8014a7c:	429c      	cmp	r4, r3
 8014a7e:	dc4f      	bgt.n	8014b20 <atan+0x110>
 8014a80:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8014a84:	429c      	cmp	r4, r3
 8014a86:	dc41      	bgt.n	8014b0c <atan+0xfc>
 8014a88:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8014a8c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8014a90:	2300      	movs	r3, #0
 8014a92:	eea0 6b07 	vfma.f64	d6, d0, d7
 8014a96:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014a9a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014a9e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014b90 <atan+0x180>
 8014aa2:	ee27 4b07 	vmul.f64	d4, d7, d7
 8014aa6:	ee24 5b04 	vmul.f64	d5, d4, d4
 8014aaa:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014b98 <atan+0x188>
 8014aae:	eea5 3b06 	vfma.f64	d3, d5, d6
 8014ab2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8014ba0 <atan+0x190>
 8014ab6:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014aba:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014ba8 <atan+0x198>
 8014abe:	eea6 3b05 	vfma.f64	d3, d6, d5
 8014ac2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8014bb0 <atan+0x1a0>
 8014ac6:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014aca:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014bb8 <atan+0x1a8>
 8014ace:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8014bc0 <atan+0x1b0>
 8014ad2:	eea6 3b05 	vfma.f64	d3, d6, d5
 8014ad6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014bc8 <atan+0x1b8>
 8014ada:	eea5 2b06 	vfma.f64	d2, d5, d6
 8014ade:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014bd0 <atan+0x1c0>
 8014ae2:	eea2 6b05 	vfma.f64	d6, d2, d5
 8014ae6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8014bd8 <atan+0x1c8>
 8014aea:	eea6 2b05 	vfma.f64	d2, d6, d5
 8014aee:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014be0 <atan+0x1d0>
 8014af2:	1c5a      	adds	r2, r3, #1
 8014af4:	eea2 6b05 	vfma.f64	d6, d2, d5
 8014af8:	ee26 6b05 	vmul.f64	d6, d6, d5
 8014afc:	eea3 6b04 	vfma.f64	d6, d3, d4
 8014b00:	ee27 6b06 	vmul.f64	d6, d7, d6
 8014b04:	d121      	bne.n	8014b4a <atan+0x13a>
 8014b06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014b0a:	e794      	b.n	8014a36 <atan+0x26>
 8014b0c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014b10:	2301      	movs	r3, #1
 8014b12:	ee30 6b47 	vsub.f64	d6, d0, d7
 8014b16:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014b1a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014b1e:	e7be      	b.n	8014a9e <atan+0x8e>
 8014b20:	4b35      	ldr	r3, [pc, #212]	; (8014bf8 <atan+0x1e8>)
 8014b22:	429c      	cmp	r4, r3
 8014b24:	da0b      	bge.n	8014b3e <atan+0x12e>
 8014b26:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8014b2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014b2e:	ee30 5b47 	vsub.f64	d5, d0, d7
 8014b32:	eea0 6b07 	vfma.f64	d6, d0, d7
 8014b36:	2302      	movs	r3, #2
 8014b38:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8014b3c:	e7af      	b.n	8014a9e <atan+0x8e>
 8014b3e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8014b42:	2303      	movs	r3, #3
 8014b44:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014b48:	e7a9      	b.n	8014a9e <atan+0x8e>
 8014b4a:	4a2c      	ldr	r2, [pc, #176]	; (8014bfc <atan+0x1ec>)
 8014b4c:	492c      	ldr	r1, [pc, #176]	; (8014c00 <atan+0x1f0>)
 8014b4e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014b52:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8014b56:	ed93 5b00 	vldr	d5, [r3]
 8014b5a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014b5e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014b62:	ed92 6b00 	vldr	d6, [r2]
 8014b66:	2d00      	cmp	r5, #0
 8014b68:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014b6c:	bfb8      	it	lt
 8014b6e:	eeb1 7b47 	vneglt.f64	d7, d7
 8014b72:	e760      	b.n	8014a36 <atan+0x26>
 8014b74:	f3af 8000 	nop.w
 8014b78:	54442d18 	.word	0x54442d18
 8014b7c:	3ff921fb 	.word	0x3ff921fb
 8014b80:	54442d18 	.word	0x54442d18
 8014b84:	bff921fb 	.word	0xbff921fb
 8014b88:	8800759c 	.word	0x8800759c
 8014b8c:	7e37e43c 	.word	0x7e37e43c
 8014b90:	e322da11 	.word	0xe322da11
 8014b94:	3f90ad3a 	.word	0x3f90ad3a
 8014b98:	24760deb 	.word	0x24760deb
 8014b9c:	3fa97b4b 	.word	0x3fa97b4b
 8014ba0:	a0d03d51 	.word	0xa0d03d51
 8014ba4:	3fb10d66 	.word	0x3fb10d66
 8014ba8:	c54c206e 	.word	0xc54c206e
 8014bac:	3fb745cd 	.word	0x3fb745cd
 8014bb0:	920083ff 	.word	0x920083ff
 8014bb4:	3fc24924 	.word	0x3fc24924
 8014bb8:	5555550d 	.word	0x5555550d
 8014bbc:	3fd55555 	.word	0x3fd55555
 8014bc0:	52defd9a 	.word	0x52defd9a
 8014bc4:	bfadde2d 	.word	0xbfadde2d
 8014bc8:	2c6a6c2f 	.word	0x2c6a6c2f
 8014bcc:	bfa2b444 	.word	0xbfa2b444
 8014bd0:	af749a6d 	.word	0xaf749a6d
 8014bd4:	bfb3b0f2 	.word	0xbfb3b0f2
 8014bd8:	fe231671 	.word	0xfe231671
 8014bdc:	bfbc71c6 	.word	0xbfbc71c6
 8014be0:	9998ebc4 	.word	0x9998ebc4
 8014be4:	bfc99999 	.word	0xbfc99999
 8014be8:	440fffff 	.word	0x440fffff
 8014bec:	7ff00000 	.word	0x7ff00000
 8014bf0:	3fdbffff 	.word	0x3fdbffff
 8014bf4:	3ff2ffff 	.word	0x3ff2ffff
 8014bf8:	40038000 	.word	0x40038000
 8014bfc:	08015300 	.word	0x08015300
 8014c00:	08015320 	.word	0x08015320

08014c04 <fabs>:
 8014c04:	ec51 0b10 	vmov	r0, r1, d0
 8014c08:	ee10 2a10 	vmov	r2, s0
 8014c0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014c10:	ec43 2b10 	vmov	d0, r2, r3
 8014c14:	4770      	bx	lr
	...

08014c18 <atanf>:
 8014c18:	b538      	push	{r3, r4, r5, lr}
 8014c1a:	ee10 5a10 	vmov	r5, s0
 8014c1e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014c22:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8014c26:	eef0 7a40 	vmov.f32	s15, s0
 8014c2a:	db0f      	blt.n	8014c4c <atanf+0x34>
 8014c2c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014c30:	dd04      	ble.n	8014c3c <atanf+0x24>
 8014c32:	ee70 7a00 	vadd.f32	s15, s0, s0
 8014c36:	eeb0 0a67 	vmov.f32	s0, s15
 8014c3a:	bd38      	pop	{r3, r4, r5, pc}
 8014c3c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014d74 <atanf+0x15c>
 8014c40:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8014d78 <atanf+0x160>
 8014c44:	2d00      	cmp	r5, #0
 8014c46:	fe77 7a80 	vselgt.f32	s15, s15, s0
 8014c4a:	e7f4      	b.n	8014c36 <atanf+0x1e>
 8014c4c:	4b4b      	ldr	r3, [pc, #300]	; (8014d7c <atanf+0x164>)
 8014c4e:	429c      	cmp	r4, r3
 8014c50:	dc10      	bgt.n	8014c74 <atanf+0x5c>
 8014c52:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8014c56:	da0a      	bge.n	8014c6e <atanf+0x56>
 8014c58:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014d80 <atanf+0x168>
 8014c5c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014c60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014c64:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c6c:	dce3      	bgt.n	8014c36 <atanf+0x1e>
 8014c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c72:	e013      	b.n	8014c9c <atanf+0x84>
 8014c74:	f000 f8a4 	bl	8014dc0 <fabsf>
 8014c78:	4b42      	ldr	r3, [pc, #264]	; (8014d84 <atanf+0x16c>)
 8014c7a:	429c      	cmp	r4, r3
 8014c7c:	dc4f      	bgt.n	8014d1e <atanf+0x106>
 8014c7e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014c82:	429c      	cmp	r4, r3
 8014c84:	dc41      	bgt.n	8014d0a <atanf+0xf2>
 8014c86:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014c8a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014c8e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014c92:	2300      	movs	r3, #0
 8014c94:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014c98:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014c9c:	1c5a      	adds	r2, r3, #1
 8014c9e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014ca2:	eddf 5a39 	vldr	s11, [pc, #228]	; 8014d88 <atanf+0x170>
 8014ca6:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8014d8c <atanf+0x174>
 8014caa:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8014d90 <atanf+0x178>
 8014cae:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8014d94 <atanf+0x17c>
 8014cb2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014cb6:	eea7 6a25 	vfma.f32	s12, s14, s11
 8014cba:	eddf 5a37 	vldr	s11, [pc, #220]	; 8014d98 <atanf+0x180>
 8014cbe:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014cc2:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8014d9c <atanf+0x184>
 8014cc6:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014cca:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014da0 <atanf+0x188>
 8014cce:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014cd2:	ed9f 6a34 	vldr	s12, [pc, #208]	; 8014da4 <atanf+0x18c>
 8014cd6:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014cda:	eddf 5a33 	vldr	s11, [pc, #204]	; 8014da8 <atanf+0x190>
 8014cde:	eee7 5a05 	vfma.f32	s11, s14, s10
 8014ce2:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8014dac <atanf+0x194>
 8014ce6:	eea5 5a87 	vfma.f32	s10, s11, s14
 8014cea:	eddf 5a31 	vldr	s11, [pc, #196]	; 8014db0 <atanf+0x198>
 8014cee:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014cf2:	eea5 0a87 	vfma.f32	s0, s11, s14
 8014cf6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014cfa:	eea6 0a26 	vfma.f32	s0, s12, s13
 8014cfe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014d02:	d121      	bne.n	8014d48 <atanf+0x130>
 8014d04:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014d08:	e795      	b.n	8014c36 <atanf+0x1e>
 8014d0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014d0e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014d12:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014d16:	2301      	movs	r3, #1
 8014d18:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014d1c:	e7be      	b.n	8014c9c <atanf+0x84>
 8014d1e:	4b25      	ldr	r3, [pc, #148]	; (8014db4 <atanf+0x19c>)
 8014d20:	429c      	cmp	r4, r3
 8014d22:	dc0b      	bgt.n	8014d3c <atanf+0x124>
 8014d24:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014d28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014d2c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014d30:	2302      	movs	r3, #2
 8014d32:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014d3a:	e7af      	b.n	8014c9c <atanf+0x84>
 8014d3c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014d40:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014d44:	2303      	movs	r3, #3
 8014d46:	e7a9      	b.n	8014c9c <atanf+0x84>
 8014d48:	4a1b      	ldr	r2, [pc, #108]	; (8014db8 <atanf+0x1a0>)
 8014d4a:	491c      	ldr	r1, [pc, #112]	; (8014dbc <atanf+0x1a4>)
 8014d4c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014d50:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014d54:	ed93 7a00 	vldr	s14, [r3]
 8014d58:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014d5c:	2d00      	cmp	r5, #0
 8014d5e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014d62:	ed92 0a00 	vldr	s0, [r2]
 8014d66:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014d6a:	bfb8      	it	lt
 8014d6c:	eef1 7a67 	vneglt.f32	s15, s15
 8014d70:	e761      	b.n	8014c36 <atanf+0x1e>
 8014d72:	bf00      	nop
 8014d74:	3fc90fdb 	.word	0x3fc90fdb
 8014d78:	bfc90fdb 	.word	0xbfc90fdb
 8014d7c:	3edfffff 	.word	0x3edfffff
 8014d80:	7149f2ca 	.word	0x7149f2ca
 8014d84:	3f97ffff 	.word	0x3f97ffff
 8014d88:	3c8569d7 	.word	0x3c8569d7
 8014d8c:	3d4bda59 	.word	0x3d4bda59
 8014d90:	bd15a221 	.word	0xbd15a221
 8014d94:	be4ccccd 	.word	0xbe4ccccd
 8014d98:	3d886b35 	.word	0x3d886b35
 8014d9c:	3dba2e6e 	.word	0x3dba2e6e
 8014da0:	3e124925 	.word	0x3e124925
 8014da4:	3eaaaaab 	.word	0x3eaaaaab
 8014da8:	bd6ef16b 	.word	0xbd6ef16b
 8014dac:	bd9d8795 	.word	0xbd9d8795
 8014db0:	bde38e38 	.word	0xbde38e38
 8014db4:	401bffff 	.word	0x401bffff
 8014db8:	08015340 	.word	0x08015340
 8014dbc:	08015350 	.word	0x08015350

08014dc0 <fabsf>:
 8014dc0:	ee10 3a10 	vmov	r3, s0
 8014dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014dc8:	ee00 3a10 	vmov	s0, r3
 8014dcc:	4770      	bx	lr
	...

08014dd0 <nanf>:
 8014dd0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014dd8 <nanf+0x8>
 8014dd4:	4770      	bx	lr
 8014dd6:	bf00      	nop
 8014dd8:	7fc00000 	.word	0x7fc00000

08014ddc <_init>:
 8014ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dde:	bf00      	nop
 8014de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014de2:	bc08      	pop	{r3}
 8014de4:	469e      	mov	lr, r3
 8014de6:	4770      	bx	lr

08014de8 <_fini>:
 8014de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dea:	bf00      	nop
 8014dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014dee:	bc08      	pop	{r3}
 8014df0:	469e      	mov	lr, r3
 8014df2:	4770      	bx	lr
