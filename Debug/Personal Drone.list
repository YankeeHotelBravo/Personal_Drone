
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012bb4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  08012e58  08012e58  00022e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013368  08013368  00023368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013370  08013370  00023370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013374  08013374  00023374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  24000000  08013378  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003cc  240001f8  08013570  000301f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240005c4  08013570  000305c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a6aa  00000000  00000000  00030226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000041f1  00000000  00000000  0005a8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001758  00000000  00000000  0005eac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001670  00000000  00000000  00060220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000391e3  00000000  00000000  00061890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e6f0  00000000  00000000  0009aa73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168334  00000000  00000000  000b9163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00221497  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000074dc  00000000  00000000  002214ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012e3c 	.word	0x08012e3c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	08012e3c 	.word	0x08012e3c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15f;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af04      	add	r7, sp, #16
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	4608      	mov	r0, r1
 8000692:	4611      	mov	r1, r2
 8000694:	461a      	mov	r2, r3
 8000696:	4603      	mov	r3, r0
 8000698:	70fb      	strb	r3, [r7, #3]
 800069a:	460b      	mov	r3, r1
 800069c:	70bb      	strb	r3, [r7, #2]
 800069e:	4613      	mov	r3, r2
 80006a0:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d81b      	bhi.n	80006e0 <MPU9250_Init+0x58>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <MPU9250_Init+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006c9 	.word	0x080006c9
 80006b8:	080006d1 	.word	0x080006d1
 80006bc:	080006d9 	.word	0x080006d9
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 80006c0:	4b5d      	ldr	r3, [pc, #372]	; (8000838 <MPU9250_Init+0x1b0>)
 80006c2:	4a5e      	ldr	r2, [pc, #376]	; (800083c <MPU9250_Init+0x1b4>)
 80006c4:	601a      	str	r2, [r3, #0]
		break;
 80006c6:	e00c      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80006c8:	4b5b      	ldr	r3, [pc, #364]	; (8000838 <MPU9250_Init+0x1b0>)
 80006ca:	4a5d      	ldr	r2, [pc, #372]	; (8000840 <MPU9250_Init+0x1b8>)
 80006cc:	601a      	str	r2, [r3, #0]
		break;
 80006ce:	e008      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80006d0:	4b59      	ldr	r3, [pc, #356]	; (8000838 <MPU9250_Init+0x1b0>)
 80006d2:	4a5c      	ldr	r2, [pc, #368]	; (8000844 <MPU9250_Init+0x1bc>)
 80006d4:	601a      	str	r2, [r3, #0]
		break;
 80006d6:	e004      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80006d8:	4b57      	ldr	r3, [pc, #348]	; (8000838 <MPU9250_Init+0x1b0>)
 80006da:	4a5b      	ldr	r2, [pc, #364]	; (8000848 <MPU9250_Init+0x1c0>)
 80006dc:	601a      	str	r2, [r3, #0]
		break;
 80006de:	e000      	b.n	80006e2 <MPU9250_Init+0x5a>
	default:
		break;
 80006e0:	bf00      	nop
	}

	switch(Acc_FS)
 80006e2:	78bb      	ldrb	r3, [r7, #2]
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81f      	bhi.n	8000728 <MPU9250_Init+0xa0>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <MPU9250_Init+0x68>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	0800070b 	.word	0x0800070b
 80006f8:	08000715 	.word	0x08000715
 80006fc:	0800071f 	.word	0x0800071f
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 8000700:	4b52      	ldr	r3, [pc, #328]	; (800084c <MPU9250_Init+0x1c4>)
 8000702:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000706:	601a      	str	r2, [r3, #0]
		break;
 8000708:	e00f      	b.n	800072a <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 800070a:	4b50      	ldr	r3, [pc, #320]	; (800084c <MPU9250_Init+0x1c4>)
 800070c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000710:	601a      	str	r2, [r3, #0]
		break;
 8000712:	e00a      	b.n	800072a <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 8000714:	4b4d      	ldr	r3, [pc, #308]	; (800084c <MPU9250_Init+0x1c4>)
 8000716:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800071a:	601a      	str	r2, [r3, #0]
		break;
 800071c:	e005      	b.n	800072a <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 800071e:	4b4b      	ldr	r3, [pc, #300]	; (800084c <MPU9250_Init+0x1c4>)
 8000720:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8000724:	601a      	str	r2, [r3, #0]
		break;
 8000726:	e000      	b.n	800072a <MPU9250_Init+0xa2>
	default:
		break;
 8000728:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2301      	movs	r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	4b47      	ldr	r3, [pc, #284]	; (8000850 <MPU9250_Init+0x1c8>)
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	2275      	movs	r2, #117	; 0x75
 800073a:	21d0      	movs	r1, #208	; 0xd0
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f007 f96b 	bl	8007a18 <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 8000742:	4b43      	ldr	r3, [pc, #268]	; (8000850 <MPU9250_Init+0x1c8>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b71      	cmp	r3, #113	; 0x71
 8000748:	d171      	bne.n	800082e <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 800074a:	4b42      	ldr	r3, [pc, #264]	; (8000854 <MPU9250_Init+0x1cc>)
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	9302      	str	r3, [sp, #8]
 8000754:	2301      	movs	r3, #1
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	4b3e      	ldr	r3, [pc, #248]	; (8000854 <MPU9250_Init+0x1cc>)
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	2219      	movs	r2, #25
 8000760:	21d0      	movs	r1, #208	; 0xd0
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f007 f844 	bl	80077f0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000768:	200a      	movs	r0, #10
 800076a:	f003 fe39 	bl	80043e0 <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 800076e:	4a39      	ldr	r2, [pc, #228]	; (8000854 <MPU9250_Init+0x1cc>)
 8000770:	787b      	ldrb	r3, [r7, #1]
 8000772:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2301      	movs	r3, #1
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	4b35      	ldr	r3, [pc, #212]	; (8000854 <MPU9250_Init+0x1cc>)
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	221a      	movs	r2, #26
 8000784:	21d0      	movs	r1, #208	; 0xd0
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f007 f832 	bl	80077f0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 800078c:	200a      	movs	r0, #10
 800078e:	f003 fe27 	bl	80043e0 <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <MPU9250_Init+0x1cc>)
 800079a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	2301      	movs	r3, #1
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <MPU9250_Init+0x1cc>)
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	221b      	movs	r2, #27
 80007ac:	21d0      	movs	r1, #208	; 0xd0
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f007 f81e 	bl	80077f0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80007b4:	200a      	movs	r0, #10
 80007b6:	f003 fe13 	bl	80043e0 <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 80007ba:	78bb      	ldrb	r3, [r7, #2]
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MPU9250_Init+0x1cc>)
 80007c2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	9302      	str	r3, [sp, #8]
 80007c8:	2301      	movs	r3, #1
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MPU9250_Init+0x1cc>)
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2301      	movs	r3, #1
 80007d2:	221c      	movs	r2, #28
 80007d4:	21d0      	movs	r1, #208	; 0xd0
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f007 f80a 	bl	80077f0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80007dc:	200a      	movs	r0, #10
 80007de:	f003 fdff 	bl	80043e0 <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MPU9250_Init+0x1cc>)
 80007e4:	7c3b      	ldrb	r3, [r7, #16]
 80007e6:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	9302      	str	r3, [sp, #8]
 80007ec:	2301      	movs	r3, #1
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MPU9250_Init+0x1cc>)
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2301      	movs	r3, #1
 80007f6:	221d      	movs	r2, #29
 80007f8:	21d0      	movs	r1, #208	; 0xd0
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f006 fff8 	bl	80077f0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000800:	200a      	movs	r0, #10
 8000802:	f003 fded 	bl	80043e0 <HAL_Delay>

		MPU9250_tx = 0x00;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MPU9250_Init+0x1cc>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 800080c:	2364      	movs	r3, #100	; 0x64
 800080e:	9302      	str	r3, [sp, #8]
 8000810:	2301      	movs	r3, #1
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MPU9250_Init+0x1cc>)
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2301      	movs	r3, #1
 800081a:	226b      	movs	r2, #107	; 0x6b
 800081c:	21d0      	movs	r1, #208	; 0xd0
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f006 ffe6 	bl	80077f0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000824:	200a      	movs	r0, #10
 8000826:	f003 fddb 	bl	80043e0 <HAL_Delay>

		return 1;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <MPU9250_Init+0x1a8>
	}
	else
	{
		return 0;
 800082e:	2300      	movs	r3, #0
	}
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	24000000 	.word	0x24000000
 800083c:	43030000 	.word	0x43030000
 8000840:	42830000 	.word	0x42830000
 8000844:	42033333 	.word	0x42033333
 8000848:	41833333 	.word	0x41833333
 800084c:	24000004 	.word	0x24000004
 8000850:	240002b9 	.word	0x240002b9
 8000854:	24000241 	.word	0x24000241

08000858 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af04      	add	r7, sp, #16
 800085e:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	9302      	str	r3, [sp, #8]
 800086a:	2301      	movs	r3, #1
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2301      	movs	r3, #1
 8000874:	226a      	movs	r2, #106	; 0x6a
 8000876:	21d0      	movs	r1, #208	; 0xd0
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f006 ffb9 	bl	80077f0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800087e:	200a      	movs	r0, #10
 8000880:	f003 fdae 	bl	80043e0 <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000886:	2202      	movs	r2, #2
 8000888:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 800088a:	2364      	movs	r3, #100	; 0x64
 800088c:	9302      	str	r3, [sp, #8]
 800088e:	2301      	movs	r3, #1
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2301      	movs	r3, #1
 8000898:	2237      	movs	r2, #55	; 0x37
 800089a:	21d0      	movs	r1, #208	; 0xd0
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f006 ffa7 	bl	80077f0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f003 fd9c 	bl	80043e0 <HAL_Delay>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	24000241 	.word	0x24000241

080008b4 <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af04      	add	r7, sp, #16
 80008ba:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <MPU9250_Master+0xa0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	9302      	str	r3, [sp, #8]
 80008c6:	2301      	movs	r3, #1
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	4b22      	ldr	r3, [pc, #136]	; (8000954 <MPU9250_Master+0xa0>)
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2301      	movs	r3, #1
 80008d0:	2237      	movs	r2, #55	; 0x37
 80008d2:	21d0      	movs	r1, #208	; 0xd0
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f006 ff8b 	bl	80077f0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008da:	200a      	movs	r0, #10
 80008dc:	f003 fd80 	bl	80043e0 <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MPU9250_Master+0xa0>)
 80008e2:	2220      	movs	r2, #32
 80008e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 80008e6:	2364      	movs	r3, #100	; 0x64
 80008e8:	9302      	str	r3, [sp, #8]
 80008ea:	2301      	movs	r3, #1
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MPU9250_Master+0xa0>)
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2301      	movs	r3, #1
 80008f4:	226a      	movs	r2, #106	; 0x6a
 80008f6:	21d0      	movs	r1, #208	; 0xd0
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f006 ff79 	bl	80077f0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008fe:	200a      	movs	r0, #10
 8000900:	f003 fd6e 	bl	80043e0 <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MPU9250_Master+0xa0>)
 8000906:	220d      	movs	r2, #13
 8000908:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 800090a:	2364      	movs	r3, #100	; 0x64
 800090c:	9302      	str	r3, [sp, #8]
 800090e:	2301      	movs	r3, #1
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MPU9250_Master+0xa0>)
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2301      	movs	r3, #1
 8000918:	2224      	movs	r2, #36	; 0x24
 800091a:	21d0      	movs	r1, #208	; 0xd0
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f006 ff67 	bl	80077f0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000922:	200a      	movs	r0, #10
 8000924:	f003 fd5c 	bl	80043e0 <HAL_Delay>

	MPU9250_tx = 0x00;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MPU9250_Master+0xa0>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	9302      	str	r3, [sp, #8]
 8000932:	2301      	movs	r3, #1
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MPU9250_Master+0xa0>)
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2301      	movs	r3, #1
 800093c:	226b      	movs	r2, #107	; 0x6b
 800093e:	21d0      	movs	r1, #208	; 0xd0
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f006 ff55 	bl	80077f0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f003 fd4a 	bl	80043e0 <HAL_Delay>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	24000241 	.word	0x24000241

08000958 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *Datastruct)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af04      	add	r7, sp, #16
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <MPU9250_AK8963_Setup+0xa0>)
 8000964:	2216      	movs	r2, #22
 8000966:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000968:	2364      	movs	r3, #100	; 0x64
 800096a:	9302      	str	r3, [sp, #8]
 800096c:	2301      	movs	r3, #1
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MPU9250_AK8963_Setup+0xa0>)
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2301      	movs	r3, #1
 8000976:	220a      	movs	r2, #10
 8000978:	2118      	movs	r1, #24
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f006 ff38 	bl	80077f0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000980:	200a      	movs	r0, #10
 8000982:	f003 fd2d 	bl	80043e0 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000986:	2364      	movs	r3, #100	; 0x64
 8000988:	9302      	str	r3, [sp, #8]
 800098a:	2303      	movs	r3, #3
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	2301      	movs	r3, #1
 8000994:	2210      	movs	r2, #16
 8000996:	2118      	movs	r1, #24
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f007 f83d 	bl	8007a18 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 800099e:	200a      	movs	r0, #10
 80009a0:	f003 fd1e 	bl	80043e0 <HAL_Delay>

	Datastruct->ASAX = MPU9250_rx_buf[0];
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009a6:	781a      	ldrb	r2, [r3, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Datastruct->ASAY = MPU9250_rx_buf[1];
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009b0:	785a      	ldrb	r2, [r3, #1]
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	Datastruct->ASAZ = MPU9250_rx_buf[2];
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009ba:	789a      	ldrb	r2, [r3, #2]
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 80009c2:	2364      	movs	r3, #100	; 0x64
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	2303      	movs	r3, #3
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <MPU9250_AK8963_Setup+0xa8>)
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	2200      	movs	r2, #0
 80009d2:	2118      	movs	r1, #24
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f007 f81f 	bl	8007a18 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 80009da:	200a      	movs	r0, #10
 80009dc:	f003 fd00 	bl	80043e0 <HAL_Delay>

	if(AK8963_WAI == 0b01001000) return 1;
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <MPU9250_AK8963_Setup+0xa8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b48      	cmp	r3, #72	; 0x48
 80009e6:	d101      	bne.n	80009ec <MPU9250_AK8963_Setup+0x94>
 80009e8:	2301      	movs	r3, #1
 80009ea:	e000      	b.n	80009ee <MPU9250_AK8963_Setup+0x96>
	else return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	24000241 	.word	0x24000241
 80009fc:	240002bc 	.word	0x240002bc
 8000a00:	240002b8 	.word	0x240002b8

08000a04 <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af04      	add	r7, sp, #16
 8000a0a:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a0e:	228c      	movs	r2, #140	; 0x8c
 8000a10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	2301      	movs	r3, #1
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2301      	movs	r3, #1
 8000a20:	2225      	movs	r2, #37	; 0x25
 8000a22:	21d0      	movs	r1, #208	; 0xd0
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f006 fee3 	bl	80077f0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	f003 fcd8 	bl	80043e0 <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000a36:	2364      	movs	r3, #100	; 0x64
 8000a38:	9302      	str	r3, [sp, #8]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	2226      	movs	r2, #38	; 0x26
 8000a46:	21d0      	movs	r1, #208	; 0xd0
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f006 fed1 	bl	80077f0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f003 fcc6 	bl	80043e0 <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a56:	2287      	movs	r2, #135	; 0x87
 8000a58:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000a5a:	2364      	movs	r3, #100	; 0x64
 8000a5c:	9302      	str	r3, [sp, #8]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2301      	movs	r3, #1
 8000a68:	2227      	movs	r2, #39	; 0x27
 8000a6a:	21d0      	movs	r1, #208	; 0xd0
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f006 febf 	bl	80077f0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a72:	200a      	movs	r0, #10
 8000a74:	f003 fcb4 	bl	80043e0 <HAL_Delay>
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	24000241 	.word	0x24000241

08000a84 <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000a8c:	2314      	movs	r3, #20
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MPU9250_Read_All+0x24>)
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2301      	movs	r3, #1
 8000a96:	223b      	movs	r2, #59	; 0x3b
 8000a98:	21d0      	movs	r1, #208	; 0xd0
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f007 f8d6 	bl	8007c4c <HAL_I2C_Mem_Read_DMA>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	240002bc 	.word	0x240002bc

08000aac <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = (MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000ab4:	4bb5      	ldr	r3, [pc, #724]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	021b      	lsls	r3, r3, #8
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	4bb3      	ldr	r3, [pc, #716]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000abe:	785b      	ldrb	r3, [r3, #1]
 8000ac0:	b21b      	sxth	r3, r3
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	b21a      	sxth	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = -(MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000aca:	4bb0      	ldr	r3, [pc, #704]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000acc:	789b      	ldrb	r3, [r3, #2]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	b21a      	sxth	r2, r3
 8000ad2:	4bae      	ldr	r3, [pc, #696]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000ad4:	78db      	ldrb	r3, [r3, #3]
 8000ad6:	b21b      	sxth	r3, r3
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	425b      	negs	r3, r3
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = -(MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000ae8:	4ba8      	ldr	r3, [pc, #672]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000aea:	791b      	ldrb	r3, [r3, #4]
 8000aec:	021b      	lsls	r3, r3, #8
 8000aee:	b21a      	sxth	r2, r3
 8000af0:	4ba6      	ldr	r3, [pc, #664]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000af2:	795b      	ldrb	r3, [r3, #5]
 8000af4:	b21b      	sxth	r3, r3
 8000af6:	4313      	orrs	r3, r2
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	425b      	negs	r3, r3
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	b21a      	sxth	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000b06:	4ba1      	ldr	r3, [pc, #644]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000b08:	7a1b      	ldrb	r3, [r3, #8]
 8000b0a:	021b      	lsls	r3, r3, #8
 8000b0c:	b21a      	sxth	r2, r3
 8000b0e:	4b9f      	ldr	r3, [pc, #636]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000b10:	7a5b      	ldrb	r3, [r3, #9]
 8000b12:	b21b      	sxth	r3, r3
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000b1c:	4b9b      	ldr	r3, [pc, #620]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000b1e:	7a9b      	ldrb	r3, [r3, #10]
 8000b20:	021b      	lsls	r3, r3, #8
 8000b22:	b21a      	sxth	r2, r3
 8000b24:	4b99      	ldr	r3, [pc, #612]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000b26:	7adb      	ldrb	r3, [r3, #11]
 8000b28:	b21b      	sxth	r3, r3
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	425b      	negs	r3, r3
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	b21a      	sxth	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000b3a:	4b94      	ldr	r3, [pc, #592]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000b3c:	7b1b      	ldrb	r3, [r3, #12]
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	4b92      	ldr	r3, [pc, #584]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000b44:	7b5b      	ldrb	r3, [r3, #13]
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	425b      	negs	r3, r3
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000b58:	4b8c      	ldr	r3, [pc, #560]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000b5a:	7bdb      	ldrb	r3, [r3, #15]
 8000b5c:	021b      	lsls	r3, r3, #8
 8000b5e:	b21a      	sxth	r2, r3
 8000b60:	4b8a      	ldr	r3, [pc, #552]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000b62:	7b9b      	ldrb	r3, [r3, #14]
 8000b64:	b21b      	sxth	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	425b      	negs	r3, r3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	b21a      	sxth	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	875a      	strh	r2, [r3, #58]	; 0x3a
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000b76:	4b85      	ldr	r3, [pc, #532]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000b78:	7c5b      	ldrb	r3, [r3, #17]
 8000b7a:	021b      	lsls	r3, r3, #8
 8000b7c:	b21a      	sxth	r2, r3
 8000b7e:	4b83      	ldr	r3, [pc, #524]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000b80:	7c1b      	ldrb	r3, [r3, #16]
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	871a      	strh	r2, [r3, #56]	; 0x38
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000b8c:	4b7f      	ldr	r3, [pc, #508]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000b8e:	7cdb      	ldrb	r3, [r3, #19]
 8000b90:	021b      	lsls	r3, r3, #8
 8000b92:	b21a      	sxth	r2, r3
 8000b94:	4b7d      	ldr	r3, [pc, #500]	; (8000d8c <MPU9250_Parsing+0x2e0>)
 8000b96:	7c9b      	ldrb	r3, [r3, #18]
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	b21a      	sxth	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	879a      	strh	r2, [r3, #60]	; 0x3c

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000ba8:	ee07 3a90 	vmov	s15, r3
 8000bac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bb0:	4b77      	ldr	r3, [pc, #476]	; (8000d90 <MPU9250_Parsing+0x2e4>)
 8000bb2:	ed93 7a00 	vldr	s14, [r3]
 8000bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000bc6:	ee07 3a90 	vmov	s15, r3
 8000bca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bce:	4b70      	ldr	r3, [pc, #448]	; (8000d90 <MPU9250_Parsing+0x2e4>)
 8000bd0:	ed93 7a00 	vldr	s14, [r3]
 8000bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000be4:	ee07 3a90 	vmov	s15, r3
 8000be8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bec:	4b68      	ldr	r3, [pc, #416]	; (8000d90 <MPU9250_Parsing+0x2e4>)
 8000bee:	ed93 7a00 	vldr	s14, [r3]
 8000bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c02:	ee07 3a90 	vmov	s15, r3
 8000c06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c0a:	4b62      	ldr	r3, [pc, #392]	; (8000d94 <MPU9250_Parsing+0x2e8>)
 8000c0c:	ed93 7a00 	vldr	s14, [r3]
 8000c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c20:	ee07 3a90 	vmov	s15, r3
 8000c24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c28:	4b5a      	ldr	r3, [pc, #360]	; (8000d94 <MPU9250_Parsing+0x2e8>)
 8000c2a:	ed93 7a00 	vldr	s14, [r3]
 8000c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Az_Raw / MPU9250_Acc_LSB;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c3e:	ee07 3a90 	vmov	s15, r3
 8000c42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c46:	4b53      	ldr	r3, [pc, #332]	; (8000d94 <MPU9250_Parsing+0x2e8>)
 8000c48:	ed93 7a00 	vldr	s14, [r3]
 8000c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000c64:	3b80      	subs	r3, #128	; 0x80
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	da00      	bge.n	8000c6c <MPU9250_Parsing+0x1c0>
 8000c6a:	33ff      	adds	r3, #255	; 0xff
 8000c6c:	121b      	asrs	r3, r3, #8
 8000c6e:	3301      	adds	r3, #1
 8000c70:	fb03 f302 	mul.w	r3, r3, r2
 8000c74:	ee07 3a90 	vmov	s15, r3
 8000c78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c7c:	4b46      	ldr	r3, [pc, #280]	; (8000d98 <MPU9250_Parsing+0x2ec>)
 8000c7e:	ed93 7a00 	vldr	s14, [r3]
 8000c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000c92:	461a      	mov	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000c9a:	3b80      	subs	r3, #128	; 0x80
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	da00      	bge.n	8000ca2 <MPU9250_Parsing+0x1f6>
 8000ca0:	33ff      	adds	r3, #255	; 0xff
 8000ca2:	121b      	asrs	r3, r3, #8
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	fb03 f302 	mul.w	r3, r3, r2
 8000caa:	ee07 3a90 	vmov	s15, r3
 8000cae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cb2:	4b39      	ldr	r3, [pc, #228]	; (8000d98 <MPU9250_Parsing+0x2ec>)
 8000cb4:	ed93 7a00 	vldr	s14, [r3]
 8000cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8000cc8:	461a      	mov	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000cd0:	3b80      	subs	r3, #128	; 0x80
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	da00      	bge.n	8000cd8 <MPU9250_Parsing+0x22c>
 8000cd6:	33ff      	adds	r3, #255	; 0xff
 8000cd8:	121b      	asrs	r3, r3, #8
 8000cda:	3301      	adds	r3, #1
 8000cdc:	fb03 f302 	mul.w	r3, r3, r2
 8000ce0:	ee07 3a90 	vmov	s15, r3
 8000ce4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ce8:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <MPU9250_Parsing+0x2ec>)
 8000cea:	ed93 7a00 	vldr	s14, [r3]
 8000cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	ed93 7a08 	vldr	s14, [r3, #32]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000d04:	ee07 3a90 	vmov	s15, r3
 8000d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000d40:	ee07 3a90 	vmov	s15, r3
 8000d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d58:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000d9c <MPU9250_Parsing+0x2f0>
 8000d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000d6c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000d9c <MPU9250_Parsing+0x2f0>
 8000d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000d80:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000d9c <MPU9250_Parsing+0x2f0>
 8000d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	e009      	b.n	8000da0 <MPU9250_Parsing+0x2f4>
 8000d8c:	240002bc 	.word	0x240002bc
 8000d90:	24000000 	.word	0x24000000
 8000d94:	24000004 	.word	0x24000004
 8000d98:	24000008 	.word	0x24000008
 8000d9c:	3c8efa35 	.word	0x3c8efa35
 8000da0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My -= DataStruct->My_Offset;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8000dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <MPU9250_Parsing_NoOffset>:

void MPU9250_Parsing_NoOffset(MPU9250_t *DataStruct)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = (MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000dfc:	4ba8      	ldr	r3, [pc, #672]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	4ba6      	ldr	r3, [pc, #664]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000e06:	785b      	ldrb	r3, [r3, #1]
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	b21a      	sxth	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = -(MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000e12:	4ba3      	ldr	r3, [pc, #652]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000e14:	789b      	ldrb	r3, [r3, #2]
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	4ba1      	ldr	r3, [pc, #644]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000e1c:	78db      	ldrb	r3, [r3, #3]
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	425b      	negs	r3, r3
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = -(MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000e30:	4b9b      	ldr	r3, [pc, #620]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000e32:	791b      	ldrb	r3, [r3, #4]
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	b21a      	sxth	r2, r3
 8000e38:	4b99      	ldr	r3, [pc, #612]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000e3a:	795b      	ldrb	r3, [r3, #5]
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	425b      	negs	r3, r3
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	b21a      	sxth	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000e4e:	4b94      	ldr	r3, [pc, #592]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000e50:	7a1b      	ldrb	r3, [r3, #8]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	4b92      	ldr	r3, [pc, #584]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000e58:	7a5b      	ldrb	r3, [r3, #9]
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000e64:	4b8e      	ldr	r3, [pc, #568]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000e66:	7a9b      	ldrb	r3, [r3, #10]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b21a      	sxth	r2, r3
 8000e6c:	4b8c      	ldr	r3, [pc, #560]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000e6e:	7adb      	ldrb	r3, [r3, #11]
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	4313      	orrs	r3, r2
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	425b      	negs	r3, r3
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	b21a      	sxth	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000e82:	4b87      	ldr	r3, [pc, #540]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000e84:	7b1b      	ldrb	r3, [r3, #12]
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	b21a      	sxth	r2, r3
 8000e8a:	4b85      	ldr	r3, [pc, #532]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000e8c:	7b5b      	ldrb	r3, [r3, #13]
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	4313      	orrs	r3, r2
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	425b      	negs	r3, r3
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	b21a      	sxth	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000ea0:	4b7f      	ldr	r3, [pc, #508]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000ea2:	7bdb      	ldrb	r3, [r3, #15]
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	4b7d      	ldr	r3, [pc, #500]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000eaa:	7b9b      	ldrb	r3, [r3, #14]
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	875a      	strh	r2, [r3, #58]	; 0x3a
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000ebe:	4b78      	ldr	r3, [pc, #480]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000ec0:	7c5b      	ldrb	r3, [r3, #17]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	4b76      	ldr	r3, [pc, #472]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000ec8:	7c1b      	ldrb	r3, [r3, #16]
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	871a      	strh	r2, [r3, #56]	; 0x38
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000ed4:	4b72      	ldr	r3, [pc, #456]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000ed6:	7cdb      	ldrb	r3, [r3, #19]
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	4b70      	ldr	r3, [pc, #448]	; (80010a0 <MPU9250_Parsing_NoOffset+0x2ac>)
 8000ede:	7c9b      	ldrb	r3, [r3, #18]
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	879a      	strh	r2, [r3, #60]	; 0x3c

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB* D2R;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000ef0:	ee07 3a90 	vmov	s15, r3
 8000ef4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ef8:	4b6a      	ldr	r3, [pc, #424]	; (80010a4 <MPU9250_Parsing_NoOffset+0x2b0>)
 8000efa:	ed93 7a00 	vldr	s14, [r3]
 8000efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f02:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80010a8 <MPU9250_Parsing_NoOffset+0x2b4>
 8000f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB* D2R;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000f16:	ee07 3a90 	vmov	s15, r3
 8000f1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f1e:	4b61      	ldr	r3, [pc, #388]	; (80010a4 <MPU9250_Parsing_NoOffset+0x2b0>)
 8000f20:	ed93 7a00 	vldr	s14, [r3]
 8000f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f28:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80010a8 <MPU9250_Parsing_NoOffset+0x2b4>
 8000f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB* D2R;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f44:	4b57      	ldr	r3, [pc, #348]	; (80010a4 <MPU9250_Parsing_NoOffset+0x2b0>)
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f4e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80010a8 <MPU9250_Parsing_NoOffset+0x2b4>
 8000f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	edd3 7a08 	vldr	s15, [r3, #32]
 8000f62:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80010a8 <MPU9250_Parsing_NoOffset+0x2b4>
 8000f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f76:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80010a8 <MPU9250_Parsing_NoOffset+0x2b4>
 8000f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000f8a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80010a8 <MPU9250_Parsing_NoOffset+0x2b4>
 8000f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9e:	ee07 3a90 	vmov	s15, r3
 8000fa2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fa6:	4b41      	ldr	r3, [pc, #260]	; (80010ac <MPU9250_Parsing_NoOffset+0x2b8>)
 8000fa8:	ed93 7a00 	vldr	s14, [r3]
 8000fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fc4:	4b39      	ldr	r3, [pc, #228]	; (80010ac <MPU9250_Parsing_NoOffset+0x2b8>)
 8000fc6:	ed93 7a00 	vldr	s14, [r3]
 8000fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Az_Raw / MPU9250_Acc_LSB;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fe2:	4b32      	ldr	r3, [pc, #200]	; (80010ac <MPU9250_Parsing_NoOffset+0x2b8>)
 8000fe4:	ed93 7a00 	vldr	s14, [r3]
 8000fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001000:	3b80      	subs	r3, #128	; 0x80
 8001002:	2b00      	cmp	r3, #0
 8001004:	da00      	bge.n	8001008 <MPU9250_Parsing_NoOffset+0x214>
 8001006:	33ff      	adds	r3, #255	; 0xff
 8001008:	121b      	asrs	r3, r3, #8
 800100a:	3301      	adds	r3, #1
 800100c:	fb03 f302 	mul.w	r3, r3, r2
 8001010:	ee07 3a90 	vmov	s15, r3
 8001014:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001018:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <MPU9250_Parsing_NoOffset+0x2bc>)
 800101a:	ed93 7a00 	vldr	s14, [r3]
 800101e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800102e:	461a      	mov	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001036:	3b80      	subs	r3, #128	; 0x80
 8001038:	2b00      	cmp	r3, #0
 800103a:	da00      	bge.n	800103e <MPU9250_Parsing_NoOffset+0x24a>
 800103c:	33ff      	adds	r3, #255	; 0xff
 800103e:	121b      	asrs	r3, r3, #8
 8001040:	3301      	adds	r3, #1
 8001042:	fb03 f302 	mul.w	r3, r3, r2
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <MPU9250_Parsing_NoOffset+0x2bc>)
 8001050:	ed93 7a00 	vldr	s14, [r3]
 8001054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8001064:	461a      	mov	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800106c:	3b80      	subs	r3, #128	; 0x80
 800106e:	2b00      	cmp	r3, #0
 8001070:	da00      	bge.n	8001074 <MPU9250_Parsing_NoOffset+0x280>
 8001072:	33ff      	adds	r3, #255	; 0xff
 8001074:	121b      	asrs	r3, r3, #8
 8001076:	3301      	adds	r3, #1
 8001078:	fb03 f302 	mul.w	r3, r3, r2
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <MPU9250_Parsing_NoOffset+0x2bc>)
 8001086:	ed93 7a00 	vldr	s14, [r3]
 800108a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	240002bc 	.word	0x240002bc
 80010a4:	24000000 	.word	0x24000000
 80010a8:	3c8efa35 	.word	0x3c8efa35
 80010ac:	24000004 	.word	0x24000004
 80010b0:	24000008 	.word	0x24000008

080010b4 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0ae      	sub	sp, #184	; 0xb8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80010be:	edc7 0a08 	vstr	s1, [r7, #32]
 80010c2:	ed87 1a07 	vstr	s2, [r7, #28]
 80010c6:	edc7 1a06 	vstr	s3, [r7, #24]
 80010ca:	ed87 2a05 	vstr	s4, [r7, #20]
 80010ce:	edc7 2a04 	vstr	s5, [r7, #16]
 80010d2:	ed87 3a03 	vstr	s6, [r7, #12]
 80010d6:	edc7 3a02 	vstr	s7, [r7, #8]
 80010da:	ed87 4a01 	vstr	s8, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 80010de:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ea:	d11d      	bne.n	8001128 <MadgwickAHRSupdate+0x74>
 80010ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80010f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f8:	d116      	bne.n	8001128 <MadgwickAHRSupdate+0x74>
 80010fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	d10f      	bne.n	8001128 <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8001108:	edd7 2a04 	vldr	s5, [r7, #16]
 800110c:	ed97 2a05 	vldr	s4, [r7, #20]
 8001110:	edd7 1a06 	vldr	s3, [r7, #24]
 8001114:	ed97 1a07 	vldr	s2, [r7, #28]
 8001118:	edd7 0a08 	vldr	s1, [r7, #32]
 800111c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001120:	f000 ffd6 	bl	80020d0 <MadgwickAHRSupdateIMU>
		return;
 8001124:	f000 bfb4 	b.w	8002090 <MadgwickAHRSupdate+0xfdc>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001128:	4be6      	ldr	r3, [pc, #920]	; (80014c4 <MadgwickAHRSupdate+0x410>)
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	eeb1 7a67 	vneg.f32	s14, s15
 8001132:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113a:	4be3      	ldr	r3, [pc, #908]	; (80014c8 <MadgwickAHRSupdate+0x414>)
 800113c:	edd3 6a00 	vldr	s13, [r3]
 8001140:	edd7 7a08 	vldr	s15, [r7, #32]
 8001144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001148:	ee37 7a67 	vsub.f32	s14, s14, s15
 800114c:	4bdf      	ldr	r3, [pc, #892]	; (80014cc <MadgwickAHRSupdate+0x418>)
 800114e:	edd3 6a00 	vldr	s13, [r3]
 8001152:	edd7 7a07 	vldr	s15, [r7, #28]
 8001156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001166:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800116a:	4bd9      	ldr	r3, [pc, #868]	; (80014d0 <MadgwickAHRSupdate+0x41c>)
 800116c:	ed93 7a00 	vldr	s14, [r3]
 8001170:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001178:	4bd3      	ldr	r3, [pc, #844]	; (80014c8 <MadgwickAHRSupdate+0x414>)
 800117a:	edd3 6a00 	vldr	s13, [r3]
 800117e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800118a:	4bd0      	ldr	r3, [pc, #832]	; (80014cc <MadgwickAHRSupdate+0x418>)
 800118c:	edd3 6a00 	vldr	s13, [r3]
 8001190:	edd7 7a08 	vldr	s15, [r7, #32]
 8001194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800119c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80011a8:	4bc9      	ldr	r3, [pc, #804]	; (80014d0 <MadgwickAHRSupdate+0x41c>)
 80011aa:	ed93 7a00 	vldr	s14, [r3]
 80011ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80011b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011b6:	4bc3      	ldr	r3, [pc, #780]	; (80014c4 <MadgwickAHRSupdate+0x410>)
 80011b8:	edd3 6a00 	vldr	s13, [r3]
 80011bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80011c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011c8:	4bc0      	ldr	r3, [pc, #768]	; (80014cc <MadgwickAHRSupdate+0x418>)
 80011ca:	edd3 6a00 	vldr	s13, [r3]
 80011ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80011d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80011e6:	4bba      	ldr	r3, [pc, #744]	; (80014d0 <MadgwickAHRSupdate+0x41c>)
 80011e8:	ed93 7a00 	vldr	s14, [r3]
 80011ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80011f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f4:	4bb3      	ldr	r3, [pc, #716]	; (80014c4 <MadgwickAHRSupdate+0x410>)
 80011f6:	edd3 6a00 	vldr	s13, [r3]
 80011fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001206:	4bb0      	ldr	r3, [pc, #704]	; (80014c8 <MadgwickAHRSupdate+0x414>)
 8001208:	edd3 6a00 	vldr	s13, [r3]
 800120c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001218:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800121c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001220:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001224:	edd7 7a06 	vldr	s15, [r7, #24]
 8001228:	eef5 7a40 	vcmp.f32	s15, #0.0
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	d10e      	bne.n	8001250 <MadgwickAHRSupdate+0x19c>
 8001232:	edd7 7a05 	vldr	s15, [r7, #20]
 8001236:	eef5 7a40 	vcmp.f32	s15, #0.0
 800123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123e:	d107      	bne.n	8001250 <MadgwickAHRSupdate+0x19c>
 8001240:	edd7 7a04 	vldr	s15, [r7, #16]
 8001244:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	f000 85a6 	beq.w	8001d9c <MadgwickAHRSupdate+0xce8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001250:	edd7 7a06 	vldr	s15, [r7, #24]
 8001254:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001258:	edd7 7a05 	vldr	s15, [r7, #20]
 800125c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001260:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001264:	edd7 7a04 	vldr	s15, [r7, #16]
 8001268:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800126c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001270:	eeb0 0a67 	vmov.f32	s0, s15
 8001274:	f001 fb5a 	bl	800292c <invSqrt>
 8001278:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 800127c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001280:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 800128c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001290:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 800129c:	ed97 7a04 	vldr	s14, [r7, #16]
 80012a0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80012ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80012b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012cc:	eeb0 0a67 	vmov.f32	s0, s15
 80012d0:	f001 fb2c 	bl	800292c <invSqrt>
 80012d4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 80012d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80012dc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80012e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e4:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 80012e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80012ec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80012f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f4:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 80012f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80012fc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001304:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001308:	4b71      	ldr	r3, [pc, #452]	; (80014d0 <MadgwickAHRSupdate+0x41c>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001312:	ed97 7a03 	vldr	s14, [r7, #12]
 8001316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 800131e:	4b6c      	ldr	r3, [pc, #432]	; (80014d0 <MadgwickAHRSupdate+0x41c>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001328:	ed97 7a02 	vldr	s14, [r7, #8]
 800132c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001330:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8001334:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <MadgwickAHRSupdate+0x41c>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800133e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001346:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 800134a:	4b5e      	ldr	r3, [pc, #376]	; (80014c4 <MadgwickAHRSupdate+0x410>)
 800134c:	edd3 7a00 	vldr	s15, [r3]
 8001350:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001354:	ed97 7a03 	vldr	s14, [r7, #12]
 8001358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 8001360:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <MadgwickAHRSupdate+0x41c>)
 8001362:	edd3 7a00 	vldr	s15, [r3]
 8001366:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800136a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 800136e:	4b55      	ldr	r3, [pc, #340]	; (80014c4 <MadgwickAHRSupdate+0x410>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001378:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 800137c:	4b52      	ldr	r3, [pc, #328]	; (80014c8 <MadgwickAHRSupdate+0x414>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001386:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 800138a:	4b50      	ldr	r3, [pc, #320]	; (80014cc <MadgwickAHRSupdate+0x418>)
 800138c:	edd3 7a00 	vldr	s15, [r3]
 8001390:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001394:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 8001398:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <MadgwickAHRSupdate+0x41c>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <MadgwickAHRSupdate+0x414>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ac:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <MadgwickAHRSupdate+0x414>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80013ba:	4b44      	ldr	r3, [pc, #272]	; (80014cc <MadgwickAHRSupdate+0x418>)
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 80013c8:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <MadgwickAHRSupdate+0x41c>)
 80013ca:	ed93 7a00 	vldr	s14, [r3]
 80013ce:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <MadgwickAHRSupdate+0x41c>)
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 80013dc:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <MadgwickAHRSupdate+0x41c>)
 80013de:	ed93 7a00 	vldr	s14, [r3]
 80013e2:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <MadgwickAHRSupdate+0x410>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ec:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 80013f0:	4b37      	ldr	r3, [pc, #220]	; (80014d0 <MadgwickAHRSupdate+0x41c>)
 80013f2:	ed93 7a00 	vldr	s14, [r3]
 80013f6:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <MadgwickAHRSupdate+0x414>)
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001400:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 8001404:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <MadgwickAHRSupdate+0x41c>)
 8001406:	ed93 7a00 	vldr	s14, [r3]
 800140a:	4b30      	ldr	r3, [pc, #192]	; (80014cc <MadgwickAHRSupdate+0x418>)
 800140c:	edd3 7a00 	vldr	s15, [r3]
 8001410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001414:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <MadgwickAHRSupdate+0x410>)
 800141a:	ed93 7a00 	vldr	s14, [r3]
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <MadgwickAHRSupdate+0x410>)
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001428:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 800142c:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <MadgwickAHRSupdate+0x410>)
 800142e:	ed93 7a00 	vldr	s14, [r3]
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <MadgwickAHRSupdate+0x414>)
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 8001440:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <MadgwickAHRSupdate+0x410>)
 8001442:	ed93 7a00 	vldr	s14, [r3]
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <MadgwickAHRSupdate+0x418>)
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001450:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <MadgwickAHRSupdate+0x414>)
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MadgwickAHRSupdate+0x414>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001464:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <MadgwickAHRSupdate+0x414>)
 800146a:	ed93 7a00 	vldr	s14, [r3]
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MadgwickAHRSupdate+0x418>)
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001478:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MadgwickAHRSupdate+0x418>)
 800147e:	ed93 7a00 	vldr	s14, [r3]
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MadgwickAHRSupdate+0x418>)
 8001484:	edd3 7a00 	vldr	s15, [r3]
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001490:	ed97 7a03 	vldr	s14, [r7, #12]
 8001494:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MadgwickAHRSupdate+0x418>)
 800149e:	edd3 6a00 	vldr	s13, [r3]
 80014a2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80014a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MadgwickAHRSupdate+0x414>)
 80014b0:	edd3 6a00 	vldr	s13, [r3]
 80014b4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80014b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014c0:	e008      	b.n	80014d4 <MadgwickAHRSupdate+0x420>
 80014c2:	bf00      	nop
 80014c4:	24000214 	.word	0x24000214
 80014c8:	24000218 	.word	0x24000218
 80014cc:	2400021c 	.word	0x2400021c
 80014d0:	24000010 	.word	0x24000010
 80014d4:	edd7 6a03 	vldr	s13, [r7, #12]
 80014d8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80014dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e4:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80014e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80014ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014f0:	4bf5      	ldr	r3, [pc, #980]	; (80018c8 <MadgwickAHRSupdate+0x814>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014fe:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001502:	edd7 7a01 	vldr	s15, [r7, #4]
 8001506:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800150a:	4bf0      	ldr	r3, [pc, #960]	; (80018cc <MadgwickAHRSupdate+0x818>)
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001514:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001518:	edd7 6a03 	vldr	s13, [r7, #12]
 800151c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001524:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001528:	edd7 6a03 	vldr	s13, [r7, #12]
 800152c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001538:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 800153c:	4be3      	ldr	r3, [pc, #908]	; (80018cc <MadgwickAHRSupdate+0x818>)
 800153e:	ed93 7a00 	vldr	s14, [r3]
 8001542:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001546:	ee27 7a27 	vmul.f32	s14, s14, s15
 800154a:	edd7 6a02 	vldr	s13, [r7, #8]
 800154e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001556:	ee37 7a27 	vadd.f32	s14, s14, s15
 800155a:	4bdd      	ldr	r3, [pc, #884]	; (80018d0 <MadgwickAHRSupdate+0x81c>)
 800155c:	edd3 6a00 	vldr	s13, [r3]
 8001560:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001568:	ee37 7a67 	vsub.f32	s14, s14, s15
 800156c:	4bd6      	ldr	r3, [pc, #856]	; (80018c8 <MadgwickAHRSupdate+0x814>)
 800156e:	edd3 6a00 	vldr	s13, [r3]
 8001572:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800157a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800157e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001582:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800158e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001592:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800159e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80015a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015aa:	4bc8      	ldr	r3, [pc, #800]	; (80018cc <MadgwickAHRSupdate+0x818>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015b8:	edd7 6a02 	vldr	s13, [r7, #8]
 80015bc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80015c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 80015cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80015d0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015d4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80015d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015e4:	eeb0 0b47 	vmov.f64	d0, d7
 80015e8:	f010 ff86 	bl	80124f8 <sqrt>
 80015ec:	eeb0 7b40 	vmov.f64	d7, d0
 80015f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015f4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80015f8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80015fc:	eeb1 7a67 	vneg.f32	s14, s15
 8001600:	4bb1      	ldr	r3, [pc, #708]	; (80018c8 <MadgwickAHRSupdate+0x814>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	ee27 7a27 	vmul.f32	s14, s14, s15
 800160a:	4bb1      	ldr	r3, [pc, #708]	; (80018d0 <MadgwickAHRSupdate+0x81c>)
 800160c:	edd3 6a00 	vldr	s13, [r3]
 8001610:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001618:	ee37 7a27 	vadd.f32	s14, s14, s15
 800161c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001620:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800162c:	4ba7      	ldr	r3, [pc, #668]	; (80018cc <MadgwickAHRSupdate+0x818>)
 800162e:	edd3 6a00 	vldr	s13, [r3]
 8001632:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001636:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800163a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800163e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001642:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800164a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800164e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001652:	edd7 7a02 	vldr	s15, [r7, #8]
 8001656:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800165a:	4b9c      	ldr	r3, [pc, #624]	; (80018cc <MadgwickAHRSupdate+0x818>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001668:	edd7 6a01 	vldr	s13, [r7, #4]
 800166c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001674:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001678:	edd7 6a01 	vldr	s13, [r7, #4]
 800167c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001688:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 800168c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001690:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001694:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 8001698:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800169c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016a0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80016a4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80016a8:	eeb1 7a67 	vneg.f32	s14, s15
 80016ac:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80016b0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80016b4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80016b8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80016c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80016cc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80016d0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80016d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016e0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80016e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ec:	4b76      	ldr	r3, [pc, #472]	; (80018c8 <MadgwickAHRSupdate+0x814>)
 80016ee:	edd3 6a00 	vldr	s13, [r3]
 80016f2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016fa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80016fe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001702:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001706:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800170a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800170e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001712:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001716:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800171a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800171e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001722:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001726:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800172a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800172e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001732:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001736:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800173e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001742:	eef1 6a67 	vneg.f32	s13, s15
 8001746:	4b61      	ldr	r3, [pc, #388]	; (80018cc <MadgwickAHRSupdate+0x818>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001750:	4b5f      	ldr	r3, [pc, #380]	; (80018d0 <MadgwickAHRSupdate+0x81c>)
 8001752:	ed93 6a00 	vldr	s12, [r3]
 8001756:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800175a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800175e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001762:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001766:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800176a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800176e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001772:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001776:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800177a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800177e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001782:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001786:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800178a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800178e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001792:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001796:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800179a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800179e:	4b4a      	ldr	r3, [pc, #296]	; (80018c8 <MadgwickAHRSupdate+0x814>)
 80017a0:	edd3 6a00 	vldr	s13, [r3]
 80017a4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017ac:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80017b0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80017b4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80017b8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80017c0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80017c4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017c8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80017cc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017d0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80017d4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017d8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80017dc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80017e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80017e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80017f4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80017f8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017fc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001800:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001804:	edd7 7a06 	vldr	s15, [r7, #24]
 8001808:	ee37 7a67 	vsub.f32	s14, s14, s15
 800180c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001814:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001818:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800181c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001820:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001824:	edd7 7a05 	vldr	s15, [r7, #20]
 8001828:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800182c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001834:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <MadgwickAHRSupdate+0x81c>)
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001842:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001846:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800184a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800184e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001852:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001856:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800185a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800185e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001862:	edd7 7a04 	vldr	s15, [r7, #16]
 8001866:	ee76 7a67 	vsub.f32	s15, s12, s15
 800186a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800186e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MadgwickAHRSupdate+0x818>)
 8001874:	edd3 6a00 	vldr	s13, [r3]
 8001878:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800187c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001880:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001884:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001888:	ee36 6a67 	vsub.f32	s12, s12, s15
 800188c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001890:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001894:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001898:	ee26 6a27 	vmul.f32	s12, s12, s15
 800189c:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80018a0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80018a4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018a8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c4:	e006      	b.n	80018d4 <MadgwickAHRSupdate+0x820>
 80018c6:	bf00      	nop
 80018c8:	24000218 	.word	0x24000218
 80018cc:	2400021c 	.word	0x2400021c
 80018d0:	24000214 	.word	0x24000214
 80018d4:	4bf6      	ldr	r3, [pc, #984]	; (8001cb0 <MadgwickAHRSupdate+0xbfc>)
 80018d6:	edd3 6a00 	vldr	s13, [r3]
 80018da:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018e2:	4bf4      	ldr	r3, [pc, #976]	; (8001cb4 <MadgwickAHRSupdate+0xc00>)
 80018e4:	ed93 6a00 	vldr	s12, [r3]
 80018e8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018f4:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80018f8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80018fc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001900:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001904:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001908:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800190c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001910:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001914:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001918:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800191c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001920:	edd7 7a02 	vldr	s15, [r7, #8]
 8001924:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800192c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001930:	4be1      	ldr	r3, [pc, #900]	; (8001cb8 <MadgwickAHRSupdate+0xc04>)
 8001932:	edd3 6a00 	vldr	s13, [r3]
 8001936:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800193a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800193e:	4bdf      	ldr	r3, [pc, #892]	; (8001cbc <MadgwickAHRSupdate+0xc08>)
 8001940:	ed93 6a00 	vldr	s12, [r3]
 8001944:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001948:	ee66 7a27 	vmul.f32	s15, s12, s15
 800194c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001950:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001954:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001958:	ee36 6a27 	vadd.f32	s12, s12, s15
 800195c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001960:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001964:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001968:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800196c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001970:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001974:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001978:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800197c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001980:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001984:	edd7 7a01 	vldr	s15, [r7, #4]
 8001988:	ee76 7a67 	vsub.f32	s15, s12, s15
 800198c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001994:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001998:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800199c:	eeb1 7a67 	vneg.f32	s14, s15
 80019a0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019a4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019a8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80019ac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80019b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019bc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80019c0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019c4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80019c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80019d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019d4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80019d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019e0:	4bb3      	ldr	r3, [pc, #716]	; (8001cb0 <MadgwickAHRSupdate+0xbfc>)
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80019ea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80019ee:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80019f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80019fa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019fe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a06:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a0e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a1a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a1e:	eef1 6a67 	vneg.f32	s13, s15
 8001a22:	4ba3      	ldr	r3, [pc, #652]	; (8001cb0 <MadgwickAHRSupdate+0xbfc>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a2c:	4ba1      	ldr	r3, [pc, #644]	; (8001cb4 <MadgwickAHRSupdate+0xc00>)
 8001a2e:	ed93 6a00 	vldr	s12, [r3]
 8001a32:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a36:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a3a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a3e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001a42:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a46:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a4a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a4e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a52:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a56:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a5a:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001a5e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001a62:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a66:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a6a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a6e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a72:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a76:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a82:	4b8e      	ldr	r3, [pc, #568]	; (8001cbc <MadgwickAHRSupdate+0xc08>)
 8001a84:	edd3 6a00 	vldr	s13, [r3]
 8001a88:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a90:	4b89      	ldr	r3, [pc, #548]	; (8001cb8 <MadgwickAHRSupdate+0xc04>)
 8001a92:	ed93 6a00 	vldr	s12, [r3]
 8001a96:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a9a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a9e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001aa2:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001aa6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001aaa:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001aae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ab2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ab6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001aba:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001abe:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001ac2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ac6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001aca:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ace:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ad2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ade:	4b75      	ldr	r3, [pc, #468]	; (8001cb4 <MadgwickAHRSupdate+0xc00>)
 8001ae0:	edd3 6a00 	vldr	s13, [r3]
 8001ae4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ae8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001aec:	4b70      	ldr	r3, [pc, #448]	; (8001cb0 <MadgwickAHRSupdate+0xbfc>)
 8001aee:	ed93 6a00 	vldr	s12, [r3]
 8001af2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001af6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001afa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001afe:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001b02:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b06:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b0a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b0e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b12:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b16:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b1a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b1e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b22:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b26:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b2a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b2e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b36:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b42:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b46:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b4a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b4e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b56:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b5e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b66:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b6a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b6e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001b72:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b76:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b7a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b7e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b8a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001b8e:	eef1 6a67 	vneg.f32	s13, s15
 8001b92:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <MadgwickAHRSupdate+0xc04>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b9c:	4b47      	ldr	r3, [pc, #284]	; (8001cbc <MadgwickAHRSupdate+0xc08>)
 8001b9e:	ed93 6a00 	vldr	s12, [r3]
 8001ba2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ba6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001baa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001bae:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001bb2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bb6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bba:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001bbe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bc2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001bc6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001bca:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001bce:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001bd2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001bd6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bda:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001bde:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001be2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001be6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bf2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001bf6:	eef1 6a67 	vneg.f32	s13, s15
 8001bfa:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <MadgwickAHRSupdate+0xc00>)
 8001bfc:	edd3 7a00 	vldr	s15, [r3]
 8001c00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <MadgwickAHRSupdate+0xbfc>)
 8001c06:	ed93 6a00 	vldr	s12, [r3]
 8001c0a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c0e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c12:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c16:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001c1a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001c1e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c22:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c26:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c2a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001c2e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c32:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001c36:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c3a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c3e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c42:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c46:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <MadgwickAHRSupdate+0xc08>)
 8001c54:	edd3 6a00 	vldr	s13, [r3]
 8001c58:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c60:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001c64:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001c68:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c6c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c70:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c74:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001c78:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001c7c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c80:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c84:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c88:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c8c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c90:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c94:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c98:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001ca8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001cac:	e008      	b.n	8001cc0 <MadgwickAHRSupdate+0xc0c>
 8001cae:	bf00      	nop
 8001cb0:	24000218 	.word	0x24000218
 8001cb4:	24000010 	.word	0x24000010
 8001cb8:	2400021c 	.word	0x2400021c
 8001cbc:	24000214 	.word	0x24000214
 8001cc0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001cc4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001cc8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001cd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cdc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ce0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cec:	f000 fe1e 	bl	800292c <invSqrt>
 8001cf0:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001cf4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001cf8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d00:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001d04:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001d08:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d10:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001d14:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001d18:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d20:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001d24:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001d28:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d30:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001d34:	4bd8      	ldr	r3, [pc, #864]	; (8002098 <MadgwickAHRSupdate+0xfe4>)
 8001d36:	ed93 7a00 	vldr	s14, [r3]
 8001d3a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d42:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001d4e:	4bd2      	ldr	r3, [pc, #840]	; (8002098 <MadgwickAHRSupdate+0xfe4>)
 8001d50:	ed93 7a00 	vldr	s14, [r3]
 8001d54:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d64:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001d68:	4bcb      	ldr	r3, [pc, #812]	; (8002098 <MadgwickAHRSupdate+0xfe4>)
 8001d6a:	ed93 7a00 	vldr	s14, [r3]
 8001d6e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d76:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001d82:	4bc5      	ldr	r3, [pc, #788]	; (8002098 <MadgwickAHRSupdate+0xfe4>)
 8001d84:	ed93 7a00 	vldr	s14, [r3]
 8001d88:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d90:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d98:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001d9c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001da0:	ed9f 7abe 	vldr	s14, [pc, #760]	; 800209c <MadgwickAHRSupdate+0xfe8>
 8001da4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001da8:	4bbd      	ldr	r3, [pc, #756]	; (80020a0 <MadgwickAHRSupdate+0xfec>)
 8001daa:	edd3 7a00 	vldr	s15, [r3]
 8001dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db2:	4bbb      	ldr	r3, [pc, #748]	; (80020a0 <MadgwickAHRSupdate+0xfec>)
 8001db4:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001db8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001dbc:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800209c <MadgwickAHRSupdate+0xfe8>
 8001dc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dc4:	4bb7      	ldr	r3, [pc, #732]	; (80020a4 <MadgwickAHRSupdate+0xff0>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dce:	4bb5      	ldr	r3, [pc, #724]	; (80020a4 <MadgwickAHRSupdate+0xff0>)
 8001dd0:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001dd4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001dd8:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800209c <MadgwickAHRSupdate+0xfe8>
 8001ddc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001de0:	4bb1      	ldr	r3, [pc, #708]	; (80020a8 <MadgwickAHRSupdate+0xff4>)
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dea:	4baf      	ldr	r3, [pc, #700]	; (80020a8 <MadgwickAHRSupdate+0xff4>)
 8001dec:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001df0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001df4:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800209c <MadgwickAHRSupdate+0xfe8>
 8001df8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dfc:	4bab      	ldr	r3, [pc, #684]	; (80020ac <MadgwickAHRSupdate+0xff8>)
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e06:	4ba9      	ldr	r3, [pc, #676]	; (80020ac <MadgwickAHRSupdate+0xff8>)
 8001e08:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001e0c:	4ba4      	ldr	r3, [pc, #656]	; (80020a0 <MadgwickAHRSupdate+0xfec>)
 8001e0e:	ed93 7a00 	vldr	s14, [r3]
 8001e12:	4ba3      	ldr	r3, [pc, #652]	; (80020a0 <MadgwickAHRSupdate+0xfec>)
 8001e14:	edd3 7a00 	vldr	s15, [r3]
 8001e18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e1c:	4ba1      	ldr	r3, [pc, #644]	; (80020a4 <MadgwickAHRSupdate+0xff0>)
 8001e1e:	edd3 6a00 	vldr	s13, [r3]
 8001e22:	4ba0      	ldr	r3, [pc, #640]	; (80020a4 <MadgwickAHRSupdate+0xff0>)
 8001e24:	edd3 7a00 	vldr	s15, [r3]
 8001e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e30:	4b9d      	ldr	r3, [pc, #628]	; (80020a8 <MadgwickAHRSupdate+0xff4>)
 8001e32:	edd3 6a00 	vldr	s13, [r3]
 8001e36:	4b9c      	ldr	r3, [pc, #624]	; (80020a8 <MadgwickAHRSupdate+0xff4>)
 8001e38:	edd3 7a00 	vldr	s15, [r3]
 8001e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e44:	4b99      	ldr	r3, [pc, #612]	; (80020ac <MadgwickAHRSupdate+0xff8>)
 8001e46:	edd3 6a00 	vldr	s13, [r3]
 8001e4a:	4b98      	ldr	r3, [pc, #608]	; (80020ac <MadgwickAHRSupdate+0xff8>)
 8001e4c:	edd3 7a00 	vldr	s15, [r3]
 8001e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e58:	eeb0 0a67 	vmov.f32	s0, s15
 8001e5c:	f000 fd66 	bl	800292c <invSqrt>
 8001e60:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8001e64:	4b8e      	ldr	r3, [pc, #568]	; (80020a0 <MadgwickAHRSupdate+0xfec>)
 8001e66:	ed93 7a00 	vldr	s14, [r3]
 8001e6a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e72:	4b8b      	ldr	r3, [pc, #556]	; (80020a0 <MadgwickAHRSupdate+0xfec>)
 8001e74:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8001e78:	4b8a      	ldr	r3, [pc, #552]	; (80020a4 <MadgwickAHRSupdate+0xff0>)
 8001e7a:	ed93 7a00 	vldr	s14, [r3]
 8001e7e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e86:	4b87      	ldr	r3, [pc, #540]	; (80020a4 <MadgwickAHRSupdate+0xff0>)
 8001e88:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001e8c:	4b86      	ldr	r3, [pc, #536]	; (80020a8 <MadgwickAHRSupdate+0xff4>)
 8001e8e:	ed93 7a00 	vldr	s14, [r3]
 8001e92:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9a:	4b83      	ldr	r3, [pc, #524]	; (80020a8 <MadgwickAHRSupdate+0xff4>)
 8001e9c:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001ea0:	4b82      	ldr	r3, [pc, #520]	; (80020ac <MadgwickAHRSupdate+0xff8>)
 8001ea2:	ed93 7a00 	vldr	s14, [r3]
 8001ea6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eae:	4b7f      	ldr	r3, [pc, #508]	; (80020ac <MadgwickAHRSupdate+0xff8>)
 8001eb0:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8001eb4:	4b7a      	ldr	r3, [pc, #488]	; (80020a0 <MadgwickAHRSupdate+0xfec>)
 8001eb6:	ed93 7a00 	vldr	s14, [r3]
 8001eba:	4b7a      	ldr	r3, [pc, #488]	; (80020a4 <MadgwickAHRSupdate+0xff0>)
 8001ebc:	edd3 7a00 	vldr	s15, [r3]
 8001ec0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec4:	4b78      	ldr	r3, [pc, #480]	; (80020a8 <MadgwickAHRSupdate+0xff4>)
 8001ec6:	edd3 6a00 	vldr	s13, [r3]
 8001eca:	4b78      	ldr	r3, [pc, #480]	; (80020ac <MadgwickAHRSupdate+0xff8>)
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed4:	ee37 6a27 	vadd.f32	s12, s14, s15
 8001ed8:	4b72      	ldr	r3, [pc, #456]	; (80020a4 <MadgwickAHRSupdate+0xff0>)
 8001eda:	ed93 7a00 	vldr	s14, [r3]
 8001ede:	4b71      	ldr	r3, [pc, #452]	; (80020a4 <MadgwickAHRSupdate+0xff0>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001eec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ef0:	4b6d      	ldr	r3, [pc, #436]	; (80020a8 <MadgwickAHRSupdate+0xff4>)
 8001ef2:	edd3 6a00 	vldr	s13, [r3]
 8001ef6:	4b6c      	ldr	r3, [pc, #432]	; (80020a8 <MadgwickAHRSupdate+0xff4>)
 8001ef8:	edd3 7a00 	vldr	s15, [r3]
 8001efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f04:	eef0 0a67 	vmov.f32	s1, s15
 8001f08:	eeb0 0a46 	vmov.f32	s0, s12
 8001f0c:	f010 fb50 	bl	80125b0 <atan2f>
 8001f10:	eef0 7a40 	vmov.f32	s15, s0
 8001f14:	4b66      	ldr	r3, [pc, #408]	; (80020b0 <MadgwickAHRSupdate+0xffc>)
 8001f16:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8001f1a:	4b62      	ldr	r3, [pc, #392]	; (80020a4 <MadgwickAHRSupdate+0xff0>)
 8001f1c:	ed93 7a00 	vldr	s14, [r3]
 8001f20:	4b62      	ldr	r3, [pc, #392]	; (80020ac <MadgwickAHRSupdate+0xff8>)
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f2a:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <MadgwickAHRSupdate+0xfec>)
 8001f2c:	edd3 6a00 	vldr	s13, [r3]
 8001f30:	4b5d      	ldr	r3, [pc, #372]	; (80020a8 <MadgwickAHRSupdate+0xff4>)
 8001f32:	edd3 7a00 	vldr	s15, [r3]
 8001f36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f3e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f46:	eeb0 0a67 	vmov.f32	s0, s15
 8001f4a:	f010 faff 	bl	801254c <asinf>
 8001f4e:	eef0 7a40 	vmov.f32	s15, s0
 8001f52:	4b58      	ldr	r3, [pc, #352]	; (80020b4 <MadgwickAHRSupdate+0x1000>)
 8001f54:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 8001f58:	4b52      	ldr	r3, [pc, #328]	; (80020a4 <MadgwickAHRSupdate+0xff0>)
 8001f5a:	ed93 7a00 	vldr	s14, [r3]
 8001f5e:	4b52      	ldr	r3, [pc, #328]	; (80020a8 <MadgwickAHRSupdate+0xff4>)
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f68:	4b4d      	ldr	r3, [pc, #308]	; (80020a0 <MadgwickAHRSupdate+0xfec>)
 8001f6a:	edd3 6a00 	vldr	s13, [r3]
 8001f6e:	4b4f      	ldr	r3, [pc, #316]	; (80020ac <MadgwickAHRSupdate+0xff8>)
 8001f70:	edd3 7a00 	vldr	s15, [r3]
 8001f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f84:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <MadgwickAHRSupdate+0xfec>)
 8001f86:	ed93 6a00 	vldr	s12, [r3]
 8001f8a:	4b45      	ldr	r3, [pc, #276]	; (80020a0 <MadgwickAHRSupdate+0xfec>)
 8001f8c:	edd3 6a00 	vldr	s13, [r3]
 8001f90:	ee26 6a26 	vmul.f32	s12, s12, s13
 8001f94:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <MadgwickAHRSupdate+0xff0>)
 8001f96:	edd3 5a00 	vldr	s11, [r3]
 8001f9a:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <MadgwickAHRSupdate+0xff0>)
 8001f9c:	edd3 6a00 	vldr	s13, [r3]
 8001fa0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8001fa4:	ee36 6a26 	vadd.f32	s12, s12, s13
 8001fa8:	4b3f      	ldr	r3, [pc, #252]	; (80020a8 <MadgwickAHRSupdate+0xff4>)
 8001faa:	edd3 5a00 	vldr	s11, [r3]
 8001fae:	4b3e      	ldr	r3, [pc, #248]	; (80020a8 <MadgwickAHRSupdate+0xff4>)
 8001fb0:	edd3 6a00 	vldr	s13, [r3]
 8001fb4:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8001fb8:	ee36 6a66 	vsub.f32	s12, s12, s13
 8001fbc:	4b3b      	ldr	r3, [pc, #236]	; (80020ac <MadgwickAHRSupdate+0xff8>)
 8001fbe:	edd3 5a00 	vldr	s11, [r3]
 8001fc2:	4b3a      	ldr	r3, [pc, #232]	; (80020ac <MadgwickAHRSupdate+0xff8>)
 8001fc4:	edd3 6a00 	vldr	s13, [r3]
 8001fc8:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8001fcc:	ee76 6a66 	vsub.f32	s13, s12, s13
 8001fd0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001fd4:	eeb0 1b46 	vmov.f64	d1, d6
 8001fd8:	eeb0 0b47 	vmov.f64	d0, d7
 8001fdc:	f010 fa88 	bl	80124f0 <atan2>
 8001fe0:	eeb0 7b40 	vmov.f64	d7, d0
 8001fe4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fe8:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <MadgwickAHRSupdate+0x1004>)
 8001fea:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8001fee:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <MadgwickAHRSupdate+0xffc>)
 8001ff0:	edd3 7a00 	vldr	s15, [r3]
 8001ff4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80020bc <MadgwickAHRSupdate+0x1008>
 8001ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ffc:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <MadgwickAHRSupdate+0xffc>)
 8001ffe:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002002:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <MadgwickAHRSupdate+0x1000>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80020bc <MadgwickAHRSupdate+0x1008>
 800200c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002010:	4b28      	ldr	r3, [pc, #160]	; (80020b4 <MadgwickAHRSupdate+0x1000>)
 8002012:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 8002016:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <MadgwickAHRSupdate+0x1004>)
 8002018:	edd3 7a00 	vldr	s15, [r3]
 800201c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80020bc <MadgwickAHRSupdate+0x1008>
 8002020:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <MadgwickAHRSupdate+0x1004>)
 8002026:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 800202a:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <MadgwickAHRSupdate+0xffc>)
 800202c:	ed93 7a00 	vldr	s14, [r3]
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <MadgwickAHRSupdate+0x100c>)
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	ee77 7a67 	vsub.f32	s15, s14, s15
 800203a:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <MadgwickAHRSupdate+0xffc>)
 800203c:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002040:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <MadgwickAHRSupdate+0x1000>)
 8002042:	ed93 7a00 	vldr	s14, [r3]
 8002046:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <MadgwickAHRSupdate+0x1010>)
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002050:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <MadgwickAHRSupdate+0x1000>)
 8002052:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <MadgwickAHRSupdate+0x1004>)
 8002058:	ed93 7a00 	vldr	s14, [r3]
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <MadgwickAHRSupdate+0x1014>)
 800205e:	edd3 7a00 	vldr	s15, [r3]
 8002062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002066:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <MadgwickAHRSupdate+0x1004>)
 8002068:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <MadgwickAHRSupdate+0x1004>)
 800206e:	edd3 7a00 	vldr	s15, [r3]
 8002072:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	d509      	bpl.n	8002090 <MadgwickAHRSupdate+0xfdc>
	{
		System_Yaw = 360.0f + System_Yaw;
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <MadgwickAHRSupdate+0x1004>)
 800207e:	edd3 7a00 	vldr	s15, [r3]
 8002082:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80020cc <MadgwickAHRSupdate+0x1018>
 8002086:	ee77 7a87 	vadd.f32	s15, s15, s14
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <MadgwickAHRSupdate+0x1004>)
 800208c:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002090:	37b8      	adds	r7, #184	; 0xb8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2400000c 	.word	0x2400000c
 800209c:	3b03126f 	.word	0x3b03126f
 80020a0:	24000010 	.word	0x24000010
 80020a4:	24000214 	.word	0x24000214
 80020a8:	24000218 	.word	0x24000218
 80020ac:	2400021c 	.word	0x2400021c
 80020b0:	240002d4 	.word	0x240002d4
 80020b4:	240002d8 	.word	0x240002d8
 80020b8:	240002d0 	.word	0x240002d0
 80020bc:	42652ee1 	.word	0x42652ee1
 80020c0:	24000220 	.word	0x24000220
 80020c4:	24000224 	.word	0x24000224
 80020c8:	24000228 	.word	0x24000228
 80020cc:	43b40000 	.word	0x43b40000

080020d0 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b09c      	sub	sp, #112	; 0x70
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	ed87 0a05 	vstr	s0, [r7, #20]
 80020da:	edc7 0a04 	vstr	s1, [r7, #16]
 80020de:	ed87 1a03 	vstr	s2, [r7, #12]
 80020e2:	edc7 1a02 	vstr	s3, [r7, #8]
 80020e6:	ed87 2a01 	vstr	s4, [r7, #4]
 80020ea:	edc7 2a00 	vstr	s5, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80020ee:	4bee      	ldr	r3, [pc, #952]	; (80024a8 <MadgwickAHRSupdateIMU+0x3d8>)
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	eeb1 7a67 	vneg.f32	s14, s15
 80020f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002100:	4bea      	ldr	r3, [pc, #936]	; (80024ac <MadgwickAHRSupdateIMU+0x3dc>)
 8002102:	edd3 6a00 	vldr	s13, [r3]
 8002106:	edd7 7a04 	vldr	s15, [r7, #16]
 800210a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002112:	4be7      	ldr	r3, [pc, #924]	; (80024b0 <MadgwickAHRSupdateIMU+0x3e0>)
 8002114:	edd3 6a00 	vldr	s13, [r3]
 8002118:	edd7 7a03 	vldr	s15, [r7, #12]
 800211c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002124:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002128:	ee67 7a87 	vmul.f32	s15, s15, s14
 800212c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002130:	4be0      	ldr	r3, [pc, #896]	; (80024b4 <MadgwickAHRSupdateIMU+0x3e4>)
 8002132:	ed93 7a00 	vldr	s14, [r3]
 8002136:	edd7 7a05 	vldr	s15, [r7, #20]
 800213a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800213e:	4bdb      	ldr	r3, [pc, #876]	; (80024ac <MadgwickAHRSupdateIMU+0x3dc>)
 8002140:	edd3 6a00 	vldr	s13, [r3]
 8002144:	edd7 7a03 	vldr	s15, [r7, #12]
 8002148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800214c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002150:	4bd7      	ldr	r3, [pc, #860]	; (80024b0 <MadgwickAHRSupdateIMU+0x3e0>)
 8002152:	edd3 6a00 	vldr	s13, [r3]
 8002156:	edd7 7a04 	vldr	s15, [r7, #16]
 800215a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800215e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002162:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800216a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800216e:	4bd1      	ldr	r3, [pc, #836]	; (80024b4 <MadgwickAHRSupdateIMU+0x3e4>)
 8002170:	ed93 7a00 	vldr	s14, [r3]
 8002174:	edd7 7a04 	vldr	s15, [r7, #16]
 8002178:	ee27 7a27 	vmul.f32	s14, s14, s15
 800217c:	4bca      	ldr	r3, [pc, #808]	; (80024a8 <MadgwickAHRSupdateIMU+0x3d8>)
 800217e:	edd3 6a00 	vldr	s13, [r3]
 8002182:	edd7 7a03 	vldr	s15, [r7, #12]
 8002186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800218a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800218e:	4bc8      	ldr	r3, [pc, #800]	; (80024b0 <MadgwickAHRSupdateIMU+0x3e0>)
 8002190:	edd3 6a00 	vldr	s13, [r3]
 8002194:	edd7 7a05 	vldr	s15, [r7, #20]
 8002198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021a8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80021ac:	4bc1      	ldr	r3, [pc, #772]	; (80024b4 <MadgwickAHRSupdateIMU+0x3e4>)
 80021ae:	ed93 7a00 	vldr	s14, [r3]
 80021b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80021b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ba:	4bbb      	ldr	r3, [pc, #748]	; (80024a8 <MadgwickAHRSupdateIMU+0x3d8>)
 80021bc:	edd3 6a00 	vldr	s13, [r3]
 80021c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80021c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021cc:	4bb7      	ldr	r3, [pc, #732]	; (80024ac <MadgwickAHRSupdateIMU+0x3dc>)
 80021ce:	edd3 6a00 	vldr	s13, [r3]
 80021d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80021d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80021ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80021ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f6:	d10e      	bne.n	8002216 <MadgwickAHRSupdateIMU+0x146>
 80021f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002204:	d107      	bne.n	8002216 <MadgwickAHRSupdateIMU+0x146>
 8002206:	edd7 7a00 	vldr	s15, [r7]
 800220a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800220e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002212:	f000 81e5 	beq.w	80025e0 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002216:	edd7 7a02 	vldr	s15, [r7, #8]
 800221a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800221e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002222:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002226:	ee37 7a27 	vadd.f32	s14, s14, s15
 800222a:	edd7 7a00 	vldr	s15, [r7]
 800222e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002236:	eeb0 0a67 	vmov.f32	s0, s15
 800223a:	f000 fb77 	bl	800292c <invSqrt>
 800223e:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8002242:	ed97 7a02 	vldr	s14, [r7, #8]
 8002246:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800224a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224e:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8002252:	ed97 7a01 	vldr	s14, [r7, #4]
 8002256:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800225a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225e:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 8002262:	ed97 7a00 	vldr	s14, [r7]
 8002266:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800226a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226e:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8002272:	4b90      	ldr	r3, [pc, #576]	; (80024b4 <MadgwickAHRSupdateIMU+0x3e4>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800227c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 8002280:	4b89      	ldr	r3, [pc, #548]	; (80024a8 <MadgwickAHRSupdateIMU+0x3d8>)
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800228a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 800228e:	4b87      	ldr	r3, [pc, #540]	; (80024ac <MadgwickAHRSupdateIMU+0x3dc>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002298:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 800229c:	4b84      	ldr	r3, [pc, #528]	; (80024b0 <MadgwickAHRSupdateIMU+0x3e0>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022a6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 80022aa:	4b82      	ldr	r3, [pc, #520]	; (80024b4 <MadgwickAHRSupdateIMU+0x3e4>)
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80022b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 80022bc:	4b7a      	ldr	r3, [pc, #488]	; (80024a8 <MadgwickAHRSupdateIMU+0x3d8>)
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80022c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ca:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 80022ce:	4b77      	ldr	r3, [pc, #476]	; (80024ac <MadgwickAHRSupdateIMU+0x3dc>)
 80022d0:	edd3 7a00 	vldr	s15, [r3]
 80022d4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80022d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022dc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 80022e0:	4b71      	ldr	r3, [pc, #452]	; (80024a8 <MadgwickAHRSupdateIMU+0x3d8>)
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80022ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ee:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 80022f2:	4b6e      	ldr	r3, [pc, #440]	; (80024ac <MadgwickAHRSupdateIMU+0x3dc>)
 80022f4:	edd3 7a00 	vldr	s15, [r3]
 80022f8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80022fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002300:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8002304:	4b6b      	ldr	r3, [pc, #428]	; (80024b4 <MadgwickAHRSupdateIMU+0x3e4>)
 8002306:	ed93 7a00 	vldr	s14, [r3]
 800230a:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <MadgwickAHRSupdateIMU+0x3e4>)
 800230c:	edd3 7a00 	vldr	s15, [r3]
 8002310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002314:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8002318:	4b63      	ldr	r3, [pc, #396]	; (80024a8 <MadgwickAHRSupdateIMU+0x3d8>)
 800231a:	ed93 7a00 	vldr	s14, [r3]
 800231e:	4b62      	ldr	r3, [pc, #392]	; (80024a8 <MadgwickAHRSupdateIMU+0x3d8>)
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002328:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 800232c:	4b5f      	ldr	r3, [pc, #380]	; (80024ac <MadgwickAHRSupdateIMU+0x3dc>)
 800232e:	ed93 7a00 	vldr	s14, [r3]
 8002332:	4b5e      	ldr	r3, [pc, #376]	; (80024ac <MadgwickAHRSupdateIMU+0x3dc>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8002340:	4b5b      	ldr	r3, [pc, #364]	; (80024b0 <MadgwickAHRSupdateIMU+0x3e0>)
 8002342:	ed93 7a00 	vldr	s14, [r3]
 8002346:	4b5a      	ldr	r3, [pc, #360]	; (80024b0 <MadgwickAHRSupdateIMU+0x3e0>)
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002350:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002354:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002358:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800235c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002360:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002364:	edd7 7a02 	vldr	s15, [r7, #8]
 8002368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002370:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002374:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800237c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002380:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002384:	edd7 7a01 	vldr	s15, [r7, #4]
 8002388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002390:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002394:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002398:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800239c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80023a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80023a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023b0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80023b4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80023b8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80023bc:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <MadgwickAHRSupdateIMU+0x3d8>)
 80023be:	edd3 7a00 	vldr	s15, [r3]
 80023c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ca:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80023ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80023d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023da:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023e2:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80023e6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80023ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023f2:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80023f6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002402:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002406:	edd7 7a00 	vldr	s15, [r7]
 800240a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800240e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002412:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002416:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800241a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800241e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002422:	4b22      	ldr	r3, [pc, #136]	; (80024ac <MadgwickAHRSupdateIMU+0x3dc>)
 8002424:	edd3 7a00 	vldr	s15, [r3]
 8002428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800242c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002430:	edd7 7a02 	vldr	s15, [r7, #8]
 8002434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002438:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002440:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002448:	ee37 7a27 	vadd.f32	s14, s14, s15
 800244c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002450:	edd7 7a01 	vldr	s15, [r7, #4]
 8002454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002458:	ee37 7a67 	vsub.f32	s14, s14, s15
 800245c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002460:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002464:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002468:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800246c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002474:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002478:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800247c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002480:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002484:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002488:	edd7 7a00 	vldr	s15, [r7]
 800248c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002494:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002498:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800249c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024a4:	e008      	b.n	80024b8 <MadgwickAHRSupdateIMU+0x3e8>
 80024a6:	bf00      	nop
 80024a8:	24000214 	.word	0x24000214
 80024ac:	24000218 	.word	0x24000218
 80024b0:	2400021c 	.word	0x2400021c
 80024b4:	24000010 	.word	0x24000010
 80024b8:	4be0      	ldr	r3, [pc, #896]	; (800283c <MadgwickAHRSupdateIMU+0x76c>)
 80024ba:	edd3 7a00 	vldr	s15, [r3]
 80024be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c2:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80024c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80024ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024d2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024d6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80024da:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80024de:	4bd7      	ldr	r3, [pc, #860]	; (800283c <MadgwickAHRSupdateIMU+0x76c>)
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024ec:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80024f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80024f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024fc:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002500:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002504:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002508:	edd7 7a08 	vldr	s15, [r7, #32]
 800250c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002510:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002514:	edd7 7a07 	vldr	s15, [r7, #28]
 8002518:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800251c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002520:	edd7 7a06 	vldr	s15, [r7, #24]
 8002524:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800252c:	eeb0 0a67 	vmov.f32	s0, s15
 8002530:	f000 f9fc 	bl	800292c <invSqrt>
 8002534:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 8002538:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800253c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002544:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 8002548:	ed97 7a08 	vldr	s14, [r7, #32]
 800254c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002554:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8002558:	ed97 7a07 	vldr	s14, [r7, #28]
 800255c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002564:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8002568:	ed97 7a06 	vldr	s14, [r7, #24]
 800256c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002574:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002578:	4bb1      	ldr	r3, [pc, #708]	; (8002840 <MadgwickAHRSupdateIMU+0x770>)
 800257a:	ed93 7a00 	vldr	s14, [r3]
 800257e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002586:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800258a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8002592:	4bab      	ldr	r3, [pc, #684]	; (8002840 <MadgwickAHRSupdateIMU+0x770>)
 8002594:	ed93 7a00 	vldr	s14, [r3]
 8002598:	edd7 7a08 	vldr	s15, [r7, #32]
 800259c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80025a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 80025ac:	4ba4      	ldr	r3, [pc, #656]	; (8002840 <MadgwickAHRSupdateIMU+0x770>)
 80025ae:	ed93 7a00 	vldr	s14, [r3]
 80025b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80025b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ba:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80025be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 80025c6:	4b9e      	ldr	r3, [pc, #632]	; (8002840 <MadgwickAHRSupdateIMU+0x770>)
 80025c8:	ed93 7a00 	vldr	s14, [r3]
 80025cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80025d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80025d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025dc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80025e0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80025e4:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8002844 <MadgwickAHRSupdateIMU+0x774>
 80025e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025ec:	4b96      	ldr	r3, [pc, #600]	; (8002848 <MadgwickAHRSupdateIMU+0x778>)
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f6:	4b94      	ldr	r3, [pc, #592]	; (8002848 <MadgwickAHRSupdateIMU+0x778>)
 80025f8:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 80025fc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002600:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002844 <MadgwickAHRSupdateIMU+0x774>
 8002604:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002608:	4b90      	ldr	r3, [pc, #576]	; (800284c <MadgwickAHRSupdateIMU+0x77c>)
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002612:	4b8e      	ldr	r3, [pc, #568]	; (800284c <MadgwickAHRSupdateIMU+0x77c>)
 8002614:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002618:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800261c:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002844 <MadgwickAHRSupdateIMU+0x774>
 8002620:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002624:	4b8a      	ldr	r3, [pc, #552]	; (8002850 <MadgwickAHRSupdateIMU+0x780>)
 8002626:	edd3 7a00 	vldr	s15, [r3]
 800262a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262e:	4b88      	ldr	r3, [pc, #544]	; (8002850 <MadgwickAHRSupdateIMU+0x780>)
 8002630:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002634:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002638:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002844 <MadgwickAHRSupdateIMU+0x774>
 800263c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002640:	4b7e      	ldr	r3, [pc, #504]	; (800283c <MadgwickAHRSupdateIMU+0x76c>)
 8002642:	edd3 7a00 	vldr	s15, [r3]
 8002646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800264a:	4b7c      	ldr	r3, [pc, #496]	; (800283c <MadgwickAHRSupdateIMU+0x76c>)
 800264c:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002650:	4b7d      	ldr	r3, [pc, #500]	; (8002848 <MadgwickAHRSupdateIMU+0x778>)
 8002652:	ed93 7a00 	vldr	s14, [r3]
 8002656:	4b7c      	ldr	r3, [pc, #496]	; (8002848 <MadgwickAHRSupdateIMU+0x778>)
 8002658:	edd3 7a00 	vldr	s15, [r3]
 800265c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002660:	4b7a      	ldr	r3, [pc, #488]	; (800284c <MadgwickAHRSupdateIMU+0x77c>)
 8002662:	edd3 6a00 	vldr	s13, [r3]
 8002666:	4b79      	ldr	r3, [pc, #484]	; (800284c <MadgwickAHRSupdateIMU+0x77c>)
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002674:	4b76      	ldr	r3, [pc, #472]	; (8002850 <MadgwickAHRSupdateIMU+0x780>)
 8002676:	edd3 6a00 	vldr	s13, [r3]
 800267a:	4b75      	ldr	r3, [pc, #468]	; (8002850 <MadgwickAHRSupdateIMU+0x780>)
 800267c:	edd3 7a00 	vldr	s15, [r3]
 8002680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002684:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002688:	4b6c      	ldr	r3, [pc, #432]	; (800283c <MadgwickAHRSupdateIMU+0x76c>)
 800268a:	edd3 6a00 	vldr	s13, [r3]
 800268e:	4b6b      	ldr	r3, [pc, #428]	; (800283c <MadgwickAHRSupdateIMU+0x76c>)
 8002690:	edd3 7a00 	vldr	s15, [r3]
 8002694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269c:	eeb0 0a67 	vmov.f32	s0, s15
 80026a0:	f000 f944 	bl	800292c <invSqrt>
 80026a4:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 80026a8:	4b67      	ldr	r3, [pc, #412]	; (8002848 <MadgwickAHRSupdateIMU+0x778>)
 80026aa:	ed93 7a00 	vldr	s14, [r3]
 80026ae:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80026b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b6:	4b64      	ldr	r3, [pc, #400]	; (8002848 <MadgwickAHRSupdateIMU+0x778>)
 80026b8:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80026bc:	4b63      	ldr	r3, [pc, #396]	; (800284c <MadgwickAHRSupdateIMU+0x77c>)
 80026be:	ed93 7a00 	vldr	s14, [r3]
 80026c2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80026c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ca:	4b60      	ldr	r3, [pc, #384]	; (800284c <MadgwickAHRSupdateIMU+0x77c>)
 80026cc:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80026d0:	4b5f      	ldr	r3, [pc, #380]	; (8002850 <MadgwickAHRSupdateIMU+0x780>)
 80026d2:	ed93 7a00 	vldr	s14, [r3]
 80026d6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80026da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026de:	4b5c      	ldr	r3, [pc, #368]	; (8002850 <MadgwickAHRSupdateIMU+0x780>)
 80026e0:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80026e4:	4b55      	ldr	r3, [pc, #340]	; (800283c <MadgwickAHRSupdateIMU+0x76c>)
 80026e6:	ed93 7a00 	vldr	s14, [r3]
 80026ea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80026ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f2:	4b52      	ldr	r3, [pc, #328]	; (800283c <MadgwickAHRSupdateIMU+0x76c>)
 80026f4:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 80026f8:	4b53      	ldr	r3, [pc, #332]	; (8002848 <MadgwickAHRSupdateIMU+0x778>)
 80026fa:	ed93 7a00 	vldr	s14, [r3]
 80026fe:	4b53      	ldr	r3, [pc, #332]	; (800284c <MadgwickAHRSupdateIMU+0x77c>)
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002708:	4b51      	ldr	r3, [pc, #324]	; (8002850 <MadgwickAHRSupdateIMU+0x780>)
 800270a:	edd3 6a00 	vldr	s13, [r3]
 800270e:	4b4b      	ldr	r3, [pc, #300]	; (800283c <MadgwickAHRSupdateIMU+0x76c>)
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002718:	ee37 6a27 	vadd.f32	s12, s14, s15
 800271c:	4b4b      	ldr	r3, [pc, #300]	; (800284c <MadgwickAHRSupdateIMU+0x77c>)
 800271e:	ed93 7a00 	vldr	s14, [r3]
 8002722:	4b4a      	ldr	r3, [pc, #296]	; (800284c <MadgwickAHRSupdateIMU+0x77c>)
 8002724:	edd3 7a00 	vldr	s15, [r3]
 8002728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002730:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002734:	4b46      	ldr	r3, [pc, #280]	; (8002850 <MadgwickAHRSupdateIMU+0x780>)
 8002736:	edd3 6a00 	vldr	s13, [r3]
 800273a:	4b45      	ldr	r3, [pc, #276]	; (8002850 <MadgwickAHRSupdateIMU+0x780>)
 800273c:	edd3 7a00 	vldr	s15, [r3]
 8002740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002748:	eef0 0a67 	vmov.f32	s1, s15
 800274c:	eeb0 0a46 	vmov.f32	s0, s12
 8002750:	f00f ff2e 	bl	80125b0 <atan2f>
 8002754:	eef0 7a40 	vmov.f32	s15, s0
 8002758:	4b3e      	ldr	r3, [pc, #248]	; (8002854 <MadgwickAHRSupdateIMU+0x784>)
 800275a:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 800275e:	4b3b      	ldr	r3, [pc, #236]	; (800284c <MadgwickAHRSupdateIMU+0x77c>)
 8002760:	ed93 7a00 	vldr	s14, [r3]
 8002764:	4b35      	ldr	r3, [pc, #212]	; (800283c <MadgwickAHRSupdateIMU+0x76c>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800276e:	4b36      	ldr	r3, [pc, #216]	; (8002848 <MadgwickAHRSupdateIMU+0x778>)
 8002770:	edd3 6a00 	vldr	s13, [r3]
 8002774:	4b36      	ldr	r3, [pc, #216]	; (8002850 <MadgwickAHRSupdateIMU+0x780>)
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800277e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002782:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002786:	ee67 7a87 	vmul.f32	s15, s15, s14
 800278a:	eeb0 0a67 	vmov.f32	s0, s15
 800278e:	f00f fedd 	bl	801254c <asinf>
 8002792:	eef0 7a40 	vmov.f32	s15, s0
 8002796:	4b30      	ldr	r3, [pc, #192]	; (8002858 <MadgwickAHRSupdateIMU+0x788>)
 8002798:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <MadgwickAHRSupdateIMU+0x77c>)
 800279e:	ed93 7a00 	vldr	s14, [r3]
 80027a2:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <MadgwickAHRSupdateIMU+0x780>)
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ac:	4b26      	ldr	r3, [pc, #152]	; (8002848 <MadgwickAHRSupdateIMU+0x778>)
 80027ae:	edd3 6a00 	vldr	s13, [r3]
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <MadgwickAHRSupdateIMU+0x76c>)
 80027b4:	edd3 7a00 	vldr	s15, [r3]
 80027b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80027c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027c8:	4b1f      	ldr	r3, [pc, #124]	; (8002848 <MadgwickAHRSupdateIMU+0x778>)
 80027ca:	ed93 6a00 	vldr	s12, [r3]
 80027ce:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <MadgwickAHRSupdateIMU+0x778>)
 80027d0:	edd3 6a00 	vldr	s13, [r3]
 80027d4:	ee26 6a26 	vmul.f32	s12, s12, s13
 80027d8:	4b1c      	ldr	r3, [pc, #112]	; (800284c <MadgwickAHRSupdateIMU+0x77c>)
 80027da:	edd3 5a00 	vldr	s11, [r3]
 80027de:	4b1b      	ldr	r3, [pc, #108]	; (800284c <MadgwickAHRSupdateIMU+0x77c>)
 80027e0:	edd3 6a00 	vldr	s13, [r3]
 80027e4:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80027e8:	ee36 6a26 	vadd.f32	s12, s12, s13
 80027ec:	4b18      	ldr	r3, [pc, #96]	; (8002850 <MadgwickAHRSupdateIMU+0x780>)
 80027ee:	edd3 5a00 	vldr	s11, [r3]
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <MadgwickAHRSupdateIMU+0x780>)
 80027f4:	edd3 6a00 	vldr	s13, [r3]
 80027f8:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80027fc:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <MadgwickAHRSupdateIMU+0x76c>)
 8002802:	edd3 5a00 	vldr	s11, [r3]
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <MadgwickAHRSupdateIMU+0x76c>)
 8002808:	edd3 6a00 	vldr	s13, [r3]
 800280c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002810:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002814:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002818:	eeb0 1b46 	vmov.f64	d1, d6
 800281c:	eeb0 0b47 	vmov.f64	d0, d7
 8002820:	f00f fe66 	bl	80124f0 <atan2>
 8002824:	eeb0 7b40 	vmov.f64	d7, d0
 8002828:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <MadgwickAHRSupdateIMU+0x78c>)
 800282e:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <MadgwickAHRSupdateIMU+0x784>)
 8002834:	edd3 7a00 	vldr	s15, [r3]
 8002838:	e014      	b.n	8002864 <MadgwickAHRSupdateIMU+0x794>
 800283a:	bf00      	nop
 800283c:	2400021c 	.word	0x2400021c
 8002840:	2400000c 	.word	0x2400000c
 8002844:	3b03126f 	.word	0x3b03126f
 8002848:	24000010 	.word	0x24000010
 800284c:	24000214 	.word	0x24000214
 8002850:	24000218 	.word	0x24000218
 8002854:	240002d4 	.word	0x240002d4
 8002858:	240002d8 	.word	0x240002d8
 800285c:	240002d0 	.word	0x240002d0
 8002860:	42652ee1 	.word	0x42652ee1
 8002864:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002860 <MadgwickAHRSupdateIMU+0x790>
 8002868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <MadgwickAHRSupdateIMU+0x83c>)
 800286e:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002872:	4b27      	ldr	r3, [pc, #156]	; (8002910 <MadgwickAHRSupdateIMU+0x840>)
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002914 <MadgwickAHRSupdateIMU+0x844>
 800287c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <MadgwickAHRSupdateIMU+0x840>)
 8002882:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 8002886:	4b24      	ldr	r3, [pc, #144]	; (8002918 <MadgwickAHRSupdateIMU+0x848>)
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002914 <MadgwickAHRSupdateIMU+0x844>
 8002890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002894:	4b20      	ldr	r3, [pc, #128]	; (8002918 <MadgwickAHRSupdateIMU+0x848>)
 8002896:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <MadgwickAHRSupdateIMU+0x83c>)
 800289c:	ed93 7a00 	vldr	s14, [r3]
 80028a0:	4b1e      	ldr	r3, [pc, #120]	; (800291c <MadgwickAHRSupdateIMU+0x84c>)
 80028a2:	edd3 7a00 	vldr	s15, [r3]
 80028a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028aa:	4b18      	ldr	r3, [pc, #96]	; (800290c <MadgwickAHRSupdateIMU+0x83c>)
 80028ac:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 80028b0:	4b17      	ldr	r3, [pc, #92]	; (8002910 <MadgwickAHRSupdateIMU+0x840>)
 80028b2:	ed93 7a00 	vldr	s14, [r3]
 80028b6:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <MadgwickAHRSupdateIMU+0x850>)
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c0:	4b13      	ldr	r3, [pc, #76]	; (8002910 <MadgwickAHRSupdateIMU+0x840>)
 80028c2:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 80028c6:	4b14      	ldr	r3, [pc, #80]	; (8002918 <MadgwickAHRSupdateIMU+0x848>)
 80028c8:	ed93 7a00 	vldr	s14, [r3]
 80028cc:	4b15      	ldr	r3, [pc, #84]	; (8002924 <MadgwickAHRSupdateIMU+0x854>)
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <MadgwickAHRSupdateIMU+0x848>)
 80028d8:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <MadgwickAHRSupdateIMU+0x848>)
 80028de:	edd3 7a00 	vldr	s15, [r3]
 80028e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ea:	d400      	bmi.n	80028ee <MadgwickAHRSupdateIMU+0x81e>
	{
		System_Yaw = 360.0f + System_Yaw;
	}
}
 80028ec:	e009      	b.n	8002902 <MadgwickAHRSupdateIMU+0x832>
		System_Yaw = 360.0f + System_Yaw;
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <MadgwickAHRSupdateIMU+0x848>)
 80028f0:	edd3 7a00 	vldr	s15, [r3]
 80028f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002928 <MadgwickAHRSupdateIMU+0x858>
 80028f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <MadgwickAHRSupdateIMU+0x848>)
 80028fe:	edc3 7a00 	vstr	s15, [r3]
}
 8002902:	bf00      	nop
 8002904:	3770      	adds	r7, #112	; 0x70
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	240002d4 	.word	0x240002d4
 8002910:	240002d8 	.word	0x240002d8
 8002914:	42652ee1 	.word	0x42652ee1
 8002918:	240002d0 	.word	0x240002d0
 800291c:	24000220 	.word	0x24000220
 8002920:	24000224 	.word	0x24000224
 8002924:	24000228 	.word	0x24000228
 8002928:	43b40000 	.word	0x43b40000

0800292c <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002936:	edd7 7a01 	vldr	s15, [r7, #4]
 800293a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800293e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002942:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800294a:	f107 0310 	add.w	r3, r7, #16
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	105a      	asrs	r2, r3, #1
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <invSqrt+0x74>)
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800295c:	f107 030c 	add.w	r3, r7, #12
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002964:	ed97 7a04 	vldr	s14, [r7, #16]
 8002968:	edd7 7a05 	vldr	s15, [r7, #20]
 800296c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002970:	edd7 7a04 	vldr	s15, [r7, #16]
 8002974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002978:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800297c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002980:	edd7 7a04 	vldr	s15, [r7, #16]
 8002984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002988:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	ee07 3a90 	vmov	s15, r3
}
 8002992:	eeb0 0a67 	vmov.f32	s0, s15
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	5f3759df 	.word	0x5f3759df

080029a4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	4803      	ldr	r0, [pc, #12]	; (80029c8 <_write+0x24>)
 80029ba:	f00b f8b5 	bl	800db28 <HAL_UART_Transmit_DMA>
}
 80029be:	bf00      	nop
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	240003a0 	.word	0x240003a0

080029cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029d2:	f001 fc73 	bl	80042bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029d6:	f000 fa23 	bl	8002e20 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80029da:	f000 fa9f 	bl	8002f1c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029de:	f000 fbf9 	bl	80031d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80029e2:	f000 fbcf 	bl	8003184 <MX_DMA_Init>
  MX_TIM7_Init();
 80029e6:	f000 fb4b 	bl	8003080 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80029ea:	f000 fb7f 	bl	80030ec <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80029ee:	f000 fab1 	bl	8002f54 <MX_I2C1_Init>
  MX_SPI1_Init();
 80029f2:	f000 faef 	bl	8002fd4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim7);
 80029f6:	4896      	ldr	r0, [pc, #600]	; (8002c50 <main+0x284>)
 80029f8:	f00a fd08 	bl	800d40c <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 80029fc:	2201      	movs	r2, #1
 80029fe:	4995      	ldr	r1, [pc, #596]	; (8002c54 <main+0x288>)
 8002a00:	4895      	ldr	r0, [pc, #596]	; (8002c58 <main+0x28c>)
 8002a02:	f00b f84b 	bl	800da9c <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002a06:	e009      	b.n	8002a1c <main+0x50>
	{
		if(tim1_20ms_flag == 1)
 8002a08:	4b94      	ldr	r3, [pc, #592]	; (8002c5c <main+0x290>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d105      	bne.n	8002a1c <main+0x50>
		{
			tim1_20ms_flag = 0;
 8002a10:	4b92      	ldr	r3, [pc, #584]	; (8002c5c <main+0x290>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialing \n");
 8002a16:	4892      	ldr	r0, [pc, #584]	; (8002c60 <main+0x294>)
 8002a18:	f00d fd66 	bl	80104e8 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	2303      	movs	r3, #3
 8002a22:	2203      	movs	r2, #3
 8002a24:	2103      	movs	r1, #3
 8002a26:	488f      	ldr	r0, [pc, #572]	; (8002c64 <main+0x298>)
 8002a28:	f7fd fe2e 	bl	8000688 <MPU9250_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0ea      	beq.n	8002a08 <main+0x3c>
		}
	}
	MPU9250_Bypass(&hi2c1);
 8002a32:	488c      	ldr	r0, [pc, #560]	; (8002c64 <main+0x298>)
 8002a34:	f7fd ff10 	bl	8000858 <MPU9250_Bypass>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002a38:	e009      	b.n	8002a4e <main+0x82>
	{
		if(tim1_20ms_flag == 1)
 8002a3a:	4b88      	ldr	r3, [pc, #544]	; (8002c5c <main+0x290>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <main+0x82>
		{
			tim1_20ms_flag = 0;
 8002a42:	4b86      	ldr	r3, [pc, #536]	; (8002c5c <main+0x290>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialing \n");
 8002a48:	4887      	ldr	r0, [pc, #540]	; (8002c68 <main+0x29c>)
 8002a4a:	f00d fd4d 	bl	80104e8 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002a4e:	4987      	ldr	r1, [pc, #540]	; (8002c6c <main+0x2a0>)
 8002a50:	4884      	ldr	r0, [pc, #528]	; (8002c64 <main+0x298>)
 8002a52:	f7fd ff81 	bl	8000958 <MPU9250_AK8963_Setup>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0ee      	beq.n	8002a3a <main+0x6e>
		}
	}
	MPU9250_Master(&hi2c1);
 8002a5c:	4881      	ldr	r0, [pc, #516]	; (8002c64 <main+0x298>)
 8002a5e:	f7fd ff29 	bl	80008b4 <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 8002a62:	4880      	ldr	r0, [pc, #512]	; (8002c64 <main+0x298>)
 8002a64:	f7fd ffce 	bl	8000a04 <MPU9250_Slave0_Enable>


	//Initialize MS5611

	//EEPROM
	W25qxx_Init();
 8002a68:	f001 f8f8 	bl	8003c5c <W25qxx_Init>


	// Compass Calibration //
	int SwC = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	603b      	str	r3, [r7, #0]
	if(SwC == 1500)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002a76:	4293      	cmp	r3, r2
 8002a78:	f040 80a3 	bne.w	8002bc2 <main+0x1f6>
	{
		for(int i =0;i<20;i++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	607b      	str	r3, [r7, #4]
 8002a80:	e00b      	b.n	8002a9a <main+0xce>
		{
			MPU9250_Read_All(&hi2c1);
 8002a82:	4878      	ldr	r0, [pc, #480]	; (8002c64 <main+0x298>)
 8002a84:	f7fd fffe 	bl	8000a84 <MPU9250_Read_All>
			HAL_Delay(20);
 8002a88:	2014      	movs	r0, #20
 8002a8a:	f001 fca9 	bl	80043e0 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 8002a8e:	4877      	ldr	r0, [pc, #476]	; (8002c6c <main+0x2a0>)
 8002a90:	f7fe f9b0 	bl	8000df4 <MPU9250_Parsing_NoOffset>
		for(int i =0;i<20;i++)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3301      	adds	r3, #1
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b13      	cmp	r3, #19
 8002a9e:	ddf0      	ble.n	8002a82 <main+0xb6>
		}
		MPU9250.Mx_Max = MPU9250.Mx_Raw;
 8002aa0:	4b72      	ldr	r3, [pc, #456]	; (8002c6c <main+0x2a0>)
 8002aa2:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8002aa6:	ee07 3a90 	vmov	s15, r3
 8002aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aae:	4b6f      	ldr	r3, [pc, #444]	; (8002c6c <main+0x2a0>)
 8002ab0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		MPU9250.Mx_Min = MPU9250.Mx_Raw;
 8002ab4:	4b6d      	ldr	r3, [pc, #436]	; (8002c6c <main+0x2a0>)
 8002ab6:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac2:	4b6a      	ldr	r3, [pc, #424]	; (8002c6c <main+0x2a0>)
 8002ac4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		MPU9250.My_Max = MPU9250.My_Raw;
 8002ac8:	4b68      	ldr	r3, [pc, #416]	; (8002c6c <main+0x2a0>)
 8002aca:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8002ace:	ee07 3a90 	vmov	s15, r3
 8002ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad6:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <main+0x2a0>)
 8002ad8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		MPU9250.My_Min = MPU9250.My_Raw;
 8002adc:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <main+0x2a0>)
 8002ade:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aea:	4b60      	ldr	r3, [pc, #384]	; (8002c6c <main+0x2a0>)
 8002aec:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		MPU9250.Mz_Max = MPU9250.Mz_Raw;
 8002af0:	4b5e      	ldr	r3, [pc, #376]	; (8002c6c <main+0x2a0>)
 8002af2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002afe:	4b5b      	ldr	r3, [pc, #364]	; (8002c6c <main+0x2a0>)
 8002b00:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		MPU9250.Mz_Min = MPU9250.Mz_Raw;
 8002b04:	4b59      	ldr	r3, [pc, #356]	; (8002c6c <main+0x2a0>)
 8002b06:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b12:	4b56      	ldr	r3, [pc, #344]	; (8002c6c <main+0x2a0>)
 8002b14:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

		while(SwC != 1000)
 8002b18:	e00d      	b.n	8002b36 <main+0x16a>
		{
			//			Is_iBus_Received();
			MPU9250_Read_All(&hi2c1);
 8002b1a:	4852      	ldr	r0, [pc, #328]	; (8002c64 <main+0x298>)
 8002b1c:	f7fd ffb2 	bl	8000a84 <MPU9250_Read_All>
			HAL_Delay(10);
 8002b20:	200a      	movs	r0, #10
 8002b22:	f001 fc5d 	bl	80043e0 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 8002b26:	4851      	ldr	r0, [pc, #324]	; (8002c6c <main+0x2a0>)
 8002b28:	f7fe f964 	bl	8000df4 <MPU9250_Parsing_NoOffset>
			if(MPU9250.My > MPU9250.My) MPU9250.My_Max = MPU9250.My_Raw;
			if(MPU9250.My < MPU9250.My) MPU9250.My_Min = MPU9250.My_Raw;

			if(MPU9250.Mz > MPU9250.Mz) MPU9250.Mz_Max = MPU9250.Mz_Raw;
			if(MPU9250.Mz < MPU9250.Mz) MPU9250.Mz_Min = MPU9250.Mz_Raw;
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8002b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b30:	484f      	ldr	r0, [pc, #316]	; (8002c70 <main+0x2a4>)
 8002b32:	f004 fdb2 	bl	800769a <HAL_GPIO_TogglePin>
		while(SwC != 1000)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b3c:	d1ed      	bne.n	8002b1a <main+0x14e>
		}
		MPU9250.Mx_Offset = (MPU9250.Mx_Max + MPU9250.Mx_Min) / 2;
 8002b3e:	4b4b      	ldr	r3, [pc, #300]	; (8002c6c <main+0x2a0>)
 8002b40:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002b44:	4b49      	ldr	r3, [pc, #292]	; (8002c6c <main+0x2a0>)
 8002b46:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002b4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b4e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b56:	4b45      	ldr	r3, [pc, #276]	; (8002c6c <main+0x2a0>)
 8002b58:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		MPU9250.My_Offset = (MPU9250.My_Max + MPU9250.My_Min) / 2;
 8002b5c:	4b43      	ldr	r3, [pc, #268]	; (8002c6c <main+0x2a0>)
 8002b5e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8002b62:	4b42      	ldr	r3, [pc, #264]	; (8002c6c <main+0x2a0>)
 8002b64:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b6c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b74:	4b3d      	ldr	r3, [pc, #244]	; (8002c6c <main+0x2a0>)
 8002b76:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		MPU9250.Mz_Offset = (MPU9250.Mz_Max + MPU9250.Mz_Min) / 2;
 8002b7a:	4b3c      	ldr	r3, [pc, #240]	; (8002c6c <main+0x2a0>)
 8002b7c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002b80:	4b3a      	ldr	r3, [pc, #232]	; (8002c6c <main+0x2a0>)
 8002b82:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b92:	4b36      	ldr	r3, [pc, #216]	; (8002c6c <main+0x2a0>)
 8002b94:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		*(float*)&Mag_Calib[0] = MPU9250.Mx_Offset;
 8002b98:	4a36      	ldr	r2, [pc, #216]	; (8002c74 <main+0x2a8>)
 8002b9a:	4b34      	ldr	r3, [pc, #208]	; (8002c6c <main+0x2a0>)
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[4] = MPU9250.My_Offset;
 8002ba0:	4a35      	ldr	r2, [pc, #212]	; (8002c78 <main+0x2ac>)
 8002ba2:	4b32      	ldr	r3, [pc, #200]	; (8002c6c <main+0x2a0>)
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba6:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[8] = MPU9250.Mz_Offset;
 8002ba8:	4a34      	ldr	r2, [pc, #208]	; (8002c7c <main+0x2b0>)
 8002baa:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <main+0x2a0>)
 8002bac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bae:	6013      	str	r3, [r2, #0]

		W25qxx_EraseSector(0);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f001 f925 	bl	8003e00 <W25qxx_EraseSector>
		W25qxx_WriteSector(Mag_Calib, 0, 0, 12);
 8002bb6:	230c      	movs	r3, #12
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2100      	movs	r1, #0
 8002bbc:	482d      	ldr	r0, [pc, #180]	; (8002c74 <main+0x2a8>)
 8002bbe:	f001 fa11 	bl	8003fe4 <W25qxx_WriteSector>
	}

	HAL_Delay(100);
 8002bc2:	2064      	movs	r0, #100	; 0x64
 8002bc4:	f001 fc0c 	bl	80043e0 <HAL_Delay>
	W25qxx_ReadSector(Mag_Calib, 0, 0, 12);
 8002bc8:	230c      	movs	r3, #12
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4829      	ldr	r0, [pc, #164]	; (8002c74 <main+0x2a8>)
 8002bd0:	f001 fae8 	bl	80041a4 <W25qxx_ReadSector>
	MPU9250.Mx_Offset = *(float*)&Mag_Calib[0];
 8002bd4:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <main+0x2a8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a24      	ldr	r2, [pc, #144]	; (8002c6c <main+0x2a0>)
 8002bda:	65d3      	str	r3, [r2, #92]	; 0x5c
	MPU9250.My_Offset = *(float*)&Mag_Calib[4];
 8002bdc:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <main+0x2ac>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <main+0x2a0>)
 8002be2:	6613      	str	r3, [r2, #96]	; 0x60
	MPU9250.Mz_Offset = *(float*)&Mag_Calib[8];
 8002be4:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <main+0x2b0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a20      	ldr	r2, [pc, #128]	; (8002c6c <main+0x2a0>)
 8002bea:	6653      	str	r3, [r2, #100]	; 0x64
	// Compass Calibration //

	while (1)
	{
		if(uart1_rx_flag == 1)
 8002bec:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <main+0x2b4>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d149      	bne.n	8002c88 <main+0x2bc>
		{
			uart1_rx_flag = 0;
 8002bf4:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <main+0x2b4>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]

			switch(uart1_rx_data)
 8002bfa:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <main+0x288>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	3b31      	subs	r3, #49	; 0x31
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d821      	bhi.n	8002c48 <main+0x27c>
 8002c04:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <main+0x240>)
 8002c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0a:	bf00      	nop
 8002c0c:	08002c21 	.word	0x08002c21
 8002c10:	08002c29 	.word	0x08002c29
 8002c14:	08002c31 	.word	0x08002c31
 8002c18:	08002c39 	.word	0x08002c39
 8002c1c:	08002c41 	.word	0x08002c41
			{
			case '1': print_mode = 1; break; //Roll, Pitch, Yaw
 8002c20:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <main+0x2b8>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	e030      	b.n	8002c8a <main+0x2be>
			case '2': print_mode = 2; break; //Alt Raw, Alt Filt
 8002c28:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <main+0x2b8>)
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e02c      	b.n	8002c8a <main+0x2be>
			case '3': print_mode = 3; break; //Gyro
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <main+0x2b8>)
 8002c32:	2203      	movs	r2, #3
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e028      	b.n	8002c8a <main+0x2be>
			case '4': print_mode = 4; break; //Accel
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <main+0x2b8>)
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	e024      	b.n	8002c8a <main+0x2be>
			case '5': print_mode = 5; break; //Mag
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <main+0x2b8>)
 8002c42:	2205      	movs	r2, #5
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	e020      	b.n	8002c8a <main+0x2be>
			default: print_mode = 0; break; // Stop Printing
 8002c48:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <main+0x2b8>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e01c      	b.n	8002c8a <main+0x2be>
 8002c50:	2400053c 	.word	0x2400053c
 8002c54:	24000230 	.word	0x24000230
 8002c58:	240003a0 	.word	0x240003a0
 8002c5c:	2400022e 	.word	0x2400022e
 8002c60:	08012e58 	.word	0x08012e58
 8002c64:	240002dc 	.word	0x240002dc
 8002c68:	08012e6c 	.word	0x08012e6c
 8002c6c:	24000244 	.word	0x24000244
 8002c70:	58020000 	.word	0x58020000
 8002c74:	24000530 	.word	0x24000530
 8002c78:	24000534 	.word	0x24000534
 8002c7c:	24000538 	.word	0x24000538
 8002c80:	2400022f 	.word	0x2400022f
 8002c84:	2400022c 	.word	0x2400022c
			}
		}
 8002c88:	bf00      	nop

		if(tim1_2ms_flag == 1)
 8002c8a:	4b5c      	ldr	r3, [pc, #368]	; (8002dfc <main+0x430>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d133      	bne.n	8002cfa <main+0x32e>
		{
			tim1_2ms_flag = 0;
 8002c92:	4b5a      	ldr	r3, [pc, #360]	; (8002dfc <main+0x430>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
			MPU9250_Read_All(&hi2c1);
 8002c98:	4859      	ldr	r0, [pc, #356]	; (8002e00 <main+0x434>)
 8002c9a:	f7fd fef3 	bl	8000a84 <MPU9250_Read_All>
			MPU9250_Parsing(&MPU9250);
 8002c9e:	4859      	ldr	r0, [pc, #356]	; (8002e04 <main+0x438>)
 8002ca0:	f7fd ff04 	bl	8000aac <MPU9250_Parsing>
			MadgwickAHRSupdate(MPU9250.Gx_Rad, MPU9250.Gy_Rad, MPU9250.Gz_Rad, MPU9250.Ax, MPU9250.Ay, MPU9250.Az, MPU9250.Mx, MPU9250.My, MPU9250.Mz);
 8002ca4:	4b57      	ldr	r3, [pc, #348]	; (8002e04 <main+0x438>)
 8002ca6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002caa:	4b56      	ldr	r3, [pc, #344]	; (8002e04 <main+0x438>)
 8002cac:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002cb0:	4b54      	ldr	r3, [pc, #336]	; (8002e04 <main+0x438>)
 8002cb2:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002cb6:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <main+0x438>)
 8002cb8:	ed93 6a02 	vldr	s12, [r3, #8]
 8002cbc:	4b51      	ldr	r3, [pc, #324]	; (8002e04 <main+0x438>)
 8002cbe:	edd3 5a03 	vldr	s11, [r3, #12]
 8002cc2:	4b50      	ldr	r3, [pc, #320]	; (8002e04 <main+0x438>)
 8002cc4:	ed93 5a04 	vldr	s10, [r3, #16]
 8002cc8:	4b4e      	ldr	r3, [pc, #312]	; (8002e04 <main+0x438>)
 8002cca:	edd3 4a1a 	vldr	s9, [r3, #104]	; 0x68
 8002cce:	4b4d      	ldr	r3, [pc, #308]	; (8002e04 <main+0x438>)
 8002cd0:	edd3 3a1b 	vldr	s7, [r3, #108]	; 0x6c
 8002cd4:	4b4b      	ldr	r3, [pc, #300]	; (8002e04 <main+0x438>)
 8002cd6:	ed93 4a1c 	vldr	s8, [r3, #112]	; 0x70
 8002cda:	eeb0 3a64 	vmov.f32	s6, s9
 8002cde:	eef0 2a45 	vmov.f32	s5, s10
 8002ce2:	eeb0 2a65 	vmov.f32	s4, s11
 8002ce6:	eef0 1a46 	vmov.f32	s3, s12
 8002cea:	eeb0 1a66 	vmov.f32	s2, s13
 8002cee:	eef0 0a47 	vmov.f32	s1, s14
 8002cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf6:	f7fe f9dd 	bl	80010b4 <MadgwickAHRSupdate>
		}

		//Print According to the Input
		if(tim1_20ms_flag == 1)
 8002cfa:	4b43      	ldr	r3, [pc, #268]	; (8002e08 <main+0x43c>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d178      	bne.n	8002df4 <main+0x428>
		{
			tim1_20ms_flag = 0;
 8002d02:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <main+0x43c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]

			switch(print_mode)
 8002d08:	4b40      	ldr	r3, [pc, #256]	; (8002e0c <main+0x440>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d872      	bhi.n	8002df8 <main+0x42c>
 8002d12:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <main+0x34c>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d2d 	.word	0x08002d2d
 8002d1c:	08002df9 	.word	0x08002df9
 8002d20:	08002d5f 	.word	0x08002d5f
 8002d24:	08002d91 	.word	0x08002d91
 8002d28:	08002dc3 	.word	0x08002dc3
			{
			case 1: printf("%.2f \t %.2f \t %.2f \t \n", System_Roll, System_Pitch, System_Yaw); break; //Roll, Pitch, Yaw
 8002d2c:	4b38      	ldr	r3, [pc, #224]	; (8002e10 <main+0x444>)
 8002d2e:	edd3 7a00 	vldr	s15, [r3]
 8002d32:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002d36:	4b37      	ldr	r3, [pc, #220]	; (8002e14 <main+0x448>)
 8002d38:	edd3 7a00 	vldr	s15, [r3]
 8002d3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d40:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <main+0x44c>)
 8002d42:	edd3 6a00 	vldr	s13, [r3]
 8002d46:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002d4a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002d4e:	ed8d 7b00 	vstr	d7, [sp]
 8002d52:	ec53 2b15 	vmov	r2, r3, d5
 8002d56:	4831      	ldr	r0, [pc, #196]	; (8002e1c <main+0x450>)
 8002d58:	f00d fb40 	bl	80103dc <iprintf>
 8002d5c:	e04d      	b.n	8002dfa <main+0x42e>
			case 2: /* printf("%.2f \t %.2f \t \m", Alt, Alt_Filt); */ break; //Alt Raw, Alt Filt
			case 3: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Gx, MPU9250.Gy, MPU9250.Gz); break; //Gyro
 8002d5e:	4b29      	ldr	r3, [pc, #164]	; (8002e04 <main+0x438>)
 8002d60:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d64:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002d68:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <main+0x438>)
 8002d6a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002d6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d72:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <main+0x438>)
 8002d74:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002d78:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002d7c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002d80:	ed8d 7b00 	vstr	d7, [sp]
 8002d84:	ec53 2b15 	vmov	r2, r3, d5
 8002d88:	4824      	ldr	r0, [pc, #144]	; (8002e1c <main+0x450>)
 8002d8a:	f00d fb27 	bl	80103dc <iprintf>
 8002d8e:	e034      	b.n	8002dfa <main+0x42e>
			case 4: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Ax, MPU9250.Ay, MPU9250.Az); break; //Accel
 8002d90:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <main+0x438>)
 8002d92:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d96:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <main+0x438>)
 8002d9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002da0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002da4:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <main+0x438>)
 8002da6:	edd3 6a04 	vldr	s13, [r3, #16]
 8002daa:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002dae:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002db2:	ed8d 7b00 	vstr	d7, [sp]
 8002db6:	ec53 2b15 	vmov	r2, r3, d5
 8002dba:	4818      	ldr	r0, [pc, #96]	; (8002e1c <main+0x450>)
 8002dbc:	f00d fb0e 	bl	80103dc <iprintf>
 8002dc0:	e01b      	b.n	8002dfa <main+0x42e>
			case 5: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Mx, MPU9250.My, MPU9250.Mz); break; //Mag
 8002dc2:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <main+0x438>)
 8002dc4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002dc8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002dcc:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <main+0x438>)
 8002dce:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002dd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <main+0x438>)
 8002dd8:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002ddc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002de0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002de4:	ed8d 7b00 	vstr	d7, [sp]
 8002de8:	ec53 2b15 	vmov	r2, r3, d5
 8002dec:	480b      	ldr	r0, [pc, #44]	; (8002e1c <main+0x450>)
 8002dee:	f00d faf5 	bl	80103dc <iprintf>
 8002df2:	e002      	b.n	8002dfa <main+0x42e>
			default: break;
			}
		}
 8002df4:	bf00      	nop
 8002df6:	e6f9      	b.n	8002bec <main+0x220>
			default: break;
 8002df8:	bf00      	nop
		if(uart1_rx_flag == 1)
 8002dfa:	e6f7      	b.n	8002bec <main+0x220>
 8002dfc:	2400022d 	.word	0x2400022d
 8002e00:	240002dc 	.word	0x240002dc
 8002e04:	24000244 	.word	0x24000244
 8002e08:	2400022e 	.word	0x2400022e
 8002e0c:	2400022c 	.word	0x2400022c
 8002e10:	240002d4 	.word	0x240002d4
 8002e14:	240002d8 	.word	0x240002d8
 8002e18:	240002d0 	.word	0x240002d0
 8002e1c:	08012e80 	.word	0x08012e80

08002e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b09c      	sub	sp, #112	; 0x70
 8002e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2a:	224c      	movs	r2, #76	; 0x4c
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f00c fe88 	bl	800fb44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e34:	1d3b      	adds	r3, r7, #4
 8002e36:	2220      	movs	r2, #32
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f00c fe82 	bl	800fb44 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002e40:	2002      	movs	r0, #2
 8002e42:	f006 fe99 	bl	8009b78 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002e46:	2300      	movs	r3, #0
 8002e48:	603b      	str	r3, [r7, #0]
 8002e4a:	4b32      	ldr	r3, [pc, #200]	; (8002f14 <SystemClock_Config+0xf4>)
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	4a31      	ldr	r2, [pc, #196]	; (8002f14 <SystemClock_Config+0xf4>)
 8002e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e54:	6193      	str	r3, [r2, #24]
 8002e56:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <SystemClock_Config+0xf4>)
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	4b2d      	ldr	r3, [pc, #180]	; (8002f18 <SystemClock_Config+0xf8>)
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	4a2c      	ldr	r2, [pc, #176]	; (8002f18 <SystemClock_Config+0xf8>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002e6c:	4b2a      	ldr	r3, [pc, #168]	; (8002f18 <SystemClock_Config+0xf8>)
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002e78:	bf00      	nop
 8002e7a:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <SystemClock_Config+0xf4>)
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e86:	d1f8      	bne.n	8002e7a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002e92:	2301      	movs	r3, #1
 8002e94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e96:	2340      	movs	r3, #64	; 0x40
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002ea2:	2305      	movs	r3, #5
 8002ea4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002ea6:	23c0      	movs	r3, #192	; 0xc0
 8002ea8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f006 fe90 	bl	8009bec <HAL_RCC_OscConfig>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002ed2:	f000 f9e7 	bl	80032a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ed6:	233f      	movs	r3, #63	; 0x3f
 8002ed8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eda:	2303      	movs	r3, #3
 8002edc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002ee2:	2308      	movs	r3, #8
 8002ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002ee6:	2340      	movs	r3, #64	; 0x40
 8002ee8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002eea:	2340      	movs	r3, #64	; 0x40
 8002eec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ef2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002ef4:	2340      	movs	r3, #64	; 0x40
 8002ef6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002ef8:	1d3b      	adds	r3, r7, #4
 8002efa:	2104      	movs	r1, #4
 8002efc:	4618      	mov	r0, r3
 8002efe:	f007 fa85 	bl	800a40c <HAL_RCC_ClockConfig>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8002f08:	f000 f9cc 	bl	80032a4 <Error_Handler>
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	3770      	adds	r7, #112	; 0x70
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	58024800 	.word	0x58024800
 8002f18:	58000400 	.word	0x58000400

08002f1c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b0b0      	sub	sp, #192	; 0xc0
 8002f20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	22bc      	movs	r2, #188	; 0xbc
 8002f26:	2100      	movs	r1, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f00c fe0b 	bl	800fb44 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8002f2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f32:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8002f34:	2300      	movs	r3, #0
 8002f36:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f007 fdf2 	bl	800ab24 <HAL_RCCEx_PeriphCLKConfig>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8002f46:	f000 f9ad 	bl	80032a4 <Error_Handler>
  }
}
 8002f4a:	bf00      	nop
 8002f4c:	37c0      	adds	r7, #192	; 0xc0
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <MX_I2C1_Init+0x78>)
 8002f5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f60:	4a1b      	ldr	r2, [pc, #108]	; (8002fd0 <MX_I2C1_Init+0x7c>)
 8002f62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002f64:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f70:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f76:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f88:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f8e:	480e      	ldr	r0, [pc, #56]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f90:	f004 fb9e 	bl	80076d0 <HAL_I2C_Init>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002f9a:	f000 f983 	bl	80032a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4809      	ldr	r0, [pc, #36]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002fa2:	f006 fd51 	bl	8009a48 <HAL_I2CEx_ConfigAnalogFilter>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002fac:	f000 f97a 	bl	80032a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4805      	ldr	r0, [pc, #20]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002fb4:	f006 fd93 	bl	8009ade <HAL_I2CEx_ConfigDigitalFilter>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002fbe:	f000 f971 	bl	80032a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	240002dc 	.word	0x240002dc
 8002fcc:	40005400 	.word	0x40005400
 8002fd0:	00b03fdb 	.word	0x00b03fdb

08002fd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002fd8:	4b27      	ldr	r3, [pc, #156]	; (8003078 <MX_SPI1_Init+0xa4>)
 8002fda:	4a28      	ldr	r2, [pc, #160]	; (800307c <MX_SPI1_Init+0xa8>)
 8002fdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fde:	4b26      	ldr	r3, [pc, #152]	; (8003078 <MX_SPI1_Init+0xa4>)
 8002fe0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002fe4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fe6:	4b24      	ldr	r3, [pc, #144]	; (8003078 <MX_SPI1_Init+0xa4>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fec:	4b22      	ldr	r3, [pc, #136]	; (8003078 <MX_SPI1_Init+0xa4>)
 8002fee:	2207      	movs	r2, #7
 8002ff0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ff2:	4b21      	ldr	r3, [pc, #132]	; (8003078 <MX_SPI1_Init+0xa4>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <MX_SPI1_Init+0xa4>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ffe:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <MX_SPI1_Init+0xa4>)
 8003000:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003004:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003006:	4b1c      	ldr	r3, [pc, #112]	; (8003078 <MX_SPI1_Init+0xa4>)
 8003008:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800300c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800300e:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <MX_SPI1_Init+0xa4>)
 8003010:	2200      	movs	r2, #0
 8003012:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003014:	4b18      	ldr	r3, [pc, #96]	; (8003078 <MX_SPI1_Init+0xa4>)
 8003016:	2200      	movs	r2, #0
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800301a:	4b17      	ldr	r3, [pc, #92]	; (8003078 <MX_SPI1_Init+0xa4>)
 800301c:	2200      	movs	r2, #0
 800301e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003020:	4b15      	ldr	r3, [pc, #84]	; (8003078 <MX_SPI1_Init+0xa4>)
 8003022:	2200      	movs	r2, #0
 8003024:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003026:	4b14      	ldr	r3, [pc, #80]	; (8003078 <MX_SPI1_Init+0xa4>)
 8003028:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800302c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <MX_SPI1_Init+0xa4>)
 8003030:	2200      	movs	r2, #0
 8003032:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003034:	4b10      	ldr	r3, [pc, #64]	; (8003078 <MX_SPI1_Init+0xa4>)
 8003036:	2200      	movs	r2, #0
 8003038:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800303a:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <MX_SPI1_Init+0xa4>)
 800303c:	2200      	movs	r2, #0
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <MX_SPI1_Init+0xa4>)
 8003042:	2200      	movs	r2, #0
 8003044:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003046:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <MX_SPI1_Init+0xa4>)
 8003048:	2200      	movs	r2, #0
 800304a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <MX_SPI1_Init+0xa4>)
 800304e:	2200      	movs	r2, #0
 8003050:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <MX_SPI1_Init+0xa4>)
 8003054:	2200      	movs	r2, #0
 8003056:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003058:	4b07      	ldr	r3, [pc, #28]	; (8003078 <MX_SPI1_Init+0xa4>)
 800305a:	2200      	movs	r2, #0
 800305c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800305e:	4b06      	ldr	r3, [pc, #24]	; (8003078 <MX_SPI1_Init+0xa4>)
 8003060:	2200      	movs	r2, #0
 8003062:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003064:	4804      	ldr	r0, [pc, #16]	; (8003078 <MX_SPI1_Init+0xa4>)
 8003066:	f009 f8bf 	bl	800c1e8 <HAL_SPI_Init>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003070:	f000 f918 	bl	80032a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003074:	bf00      	nop
 8003076:	bd80      	pop	{r7, pc}
 8003078:	240004a8 	.word	0x240004a8
 800307c:	40013000 	.word	0x40013000

08003080 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003086:	1d3b      	adds	r3, r7, #4
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <MX_TIM7_Init+0x64>)
 8003092:	4a15      	ldr	r2, [pc, #84]	; (80030e8 <MX_TIM7_Init+0x68>)
 8003094:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 8003096:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <MX_TIM7_Init+0x64>)
 8003098:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800309c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800309e:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <MX_TIM7_Init+0x64>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <MX_TIM7_Init+0x64>)
 80030a6:	2205      	movs	r2, #5
 80030a8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <MX_TIM7_Init+0x64>)
 80030ac:	2280      	movs	r2, #128	; 0x80
 80030ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80030b0:	480c      	ldr	r0, [pc, #48]	; (80030e4 <MX_TIM7_Init+0x64>)
 80030b2:	f00a f954 	bl	800d35e <HAL_TIM_Base_Init>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80030bc:	f000 f8f2 	bl	80032a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030c0:	2300      	movs	r3, #0
 80030c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80030c8:	1d3b      	adds	r3, r7, #4
 80030ca:	4619      	mov	r1, r3
 80030cc:	4805      	ldr	r0, [pc, #20]	; (80030e4 <MX_TIM7_Init+0x64>)
 80030ce:	f00a fbef 	bl	800d8b0 <HAL_TIMEx_MasterConfigSynchronization>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80030d8:	f000 f8e4 	bl	80032a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80030dc:	bf00      	nop
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	2400053c 	.word	0x2400053c
 80030e8:	40001400 	.word	0x40001400

080030ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030f0:	4b22      	ldr	r3, [pc, #136]	; (800317c <MX_USART1_UART_Init+0x90>)
 80030f2:	4a23      	ldr	r2, [pc, #140]	; (8003180 <MX_USART1_UART_Init+0x94>)
 80030f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80030f6:	4b21      	ldr	r3, [pc, #132]	; (800317c <MX_USART1_UART_Init+0x90>)
 80030f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030fe:	4b1f      	ldr	r3, [pc, #124]	; (800317c <MX_USART1_UART_Init+0x90>)
 8003100:	2200      	movs	r2, #0
 8003102:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003104:	4b1d      	ldr	r3, [pc, #116]	; (800317c <MX_USART1_UART_Init+0x90>)
 8003106:	2200      	movs	r2, #0
 8003108:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800310a:	4b1c      	ldr	r3, [pc, #112]	; (800317c <MX_USART1_UART_Init+0x90>)
 800310c:	2200      	movs	r2, #0
 800310e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <MX_USART1_UART_Init+0x90>)
 8003112:	220c      	movs	r2, #12
 8003114:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003116:	4b19      	ldr	r3, [pc, #100]	; (800317c <MX_USART1_UART_Init+0x90>)
 8003118:	2200      	movs	r2, #0
 800311a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800311c:	4b17      	ldr	r3, [pc, #92]	; (800317c <MX_USART1_UART_Init+0x90>)
 800311e:	2200      	movs	r2, #0
 8003120:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <MX_USART1_UART_Init+0x90>)
 8003124:	2200      	movs	r2, #0
 8003126:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003128:	4b14      	ldr	r3, [pc, #80]	; (800317c <MX_USART1_UART_Init+0x90>)
 800312a:	2200      	movs	r2, #0
 800312c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800312e:	4b13      	ldr	r3, [pc, #76]	; (800317c <MX_USART1_UART_Init+0x90>)
 8003130:	2200      	movs	r2, #0
 8003132:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003134:	4811      	ldr	r0, [pc, #68]	; (800317c <MX_USART1_UART_Init+0x90>)
 8003136:	f00a fc61 	bl	800d9fc <HAL_UART_Init>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003140:	f000 f8b0 	bl	80032a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003144:	2100      	movs	r1, #0
 8003146:	480d      	ldr	r0, [pc, #52]	; (800317c <MX_USART1_UART_Init+0x90>)
 8003148:	f00c fc07 	bl	800f95a <HAL_UARTEx_SetTxFifoThreshold>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003152:	f000 f8a7 	bl	80032a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003156:	2100      	movs	r1, #0
 8003158:	4808      	ldr	r0, [pc, #32]	; (800317c <MX_USART1_UART_Init+0x90>)
 800315a:	f00c fc3c 	bl	800f9d6 <HAL_UARTEx_SetRxFifoThreshold>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003164:	f000 f89e 	bl	80032a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003168:	4804      	ldr	r0, [pc, #16]	; (800317c <MX_USART1_UART_Init+0x90>)
 800316a:	f00c fbbd 	bl	800f8e8 <HAL_UARTEx_DisableFifoMode>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003174:	f000 f896 	bl	80032a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}
 800317c:	240003a0 	.word	0x240003a0
 8003180:	40011000 	.word	0x40011000

08003184 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <MX_DMA_Init+0x4c>)
 800318c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003190:	4a0f      	ldr	r2, [pc, #60]	; (80031d0 <MX_DMA_Init+0x4c>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <MX_DMA_Init+0x4c>)
 800319c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80031a8:	2200      	movs	r2, #0
 80031aa:	2100      	movs	r1, #0
 80031ac:	200b      	movs	r0, #11
 80031ae:	f001 fa22 	bl	80045f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80031b2:	200b      	movs	r0, #11
 80031b4:	f001 fa39 	bl	800462a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80031b8:	2200      	movs	r2, #0
 80031ba:	2100      	movs	r1, #0
 80031bc:	200c      	movs	r0, #12
 80031be:	f001 fa1a 	bl	80045f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80031c2:	200c      	movs	r0, #12
 80031c4:	f001 fa31 	bl	800462a <HAL_NVIC_EnableIRQ>

}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	58024400 	.word	0x58024400

080031d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031da:	f107 030c 	add.w	r3, r7, #12
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	60da      	str	r2, [r3, #12]
 80031e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031ea:	4b2b      	ldr	r3, [pc, #172]	; (8003298 <MX_GPIO_Init+0xc4>)
 80031ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f0:	4a29      	ldr	r2, [pc, #164]	; (8003298 <MX_GPIO_Init+0xc4>)
 80031f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031fa:	4b27      	ldr	r3, [pc, #156]	; (8003298 <MX_GPIO_Init+0xc4>)
 80031fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003208:	4b23      	ldr	r3, [pc, #140]	; (8003298 <MX_GPIO_Init+0xc4>)
 800320a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800320e:	4a22      	ldr	r2, [pc, #136]	; (8003298 <MX_GPIO_Init+0xc4>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003218:	4b1f      	ldr	r3, [pc, #124]	; (8003298 <MX_GPIO_Init+0xc4>)
 800321a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	607b      	str	r3, [r7, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003226:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <MX_GPIO_Init+0xc4>)
 8003228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800322c:	4a1a      	ldr	r2, [pc, #104]	; (8003298 <MX_GPIO_Init+0xc4>)
 800322e:	f043 0302 	orr.w	r3, r3, #2
 8003232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003236:	4b18      	ldr	r3, [pc, #96]	; (8003298 <MX_GPIO_Init+0xc4>)
 8003238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	603b      	str	r3, [r7, #0]
 8003242:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003244:	2200      	movs	r2, #0
 8003246:	2102      	movs	r1, #2
 8003248:	4814      	ldr	r0, [pc, #80]	; (800329c <MX_GPIO_Init+0xc8>)
 800324a:	f004 fa0d 	bl	8007668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800324e:	2200      	movs	r2, #0
 8003250:	2140      	movs	r1, #64	; 0x40
 8003252:	4813      	ldr	r0, [pc, #76]	; (80032a0 <MX_GPIO_Init+0xcc>)
 8003254:	f004 fa08 	bl	8007668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003258:	2302      	movs	r3, #2
 800325a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800325c:	2301      	movs	r3, #1
 800325e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003264:	2300      	movs	r3, #0
 8003266:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003268:	f107 030c 	add.w	r3, r7, #12
 800326c:	4619      	mov	r1, r3
 800326e:	480b      	ldr	r0, [pc, #44]	; (800329c <MX_GPIO_Init+0xc8>)
 8003270:	f004 f84a 	bl	8007308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003274:	2340      	movs	r3, #64	; 0x40
 8003276:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003278:	2301      	movs	r3, #1
 800327a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003284:	f107 030c 	add.w	r3, r7, #12
 8003288:	4619      	mov	r1, r3
 800328a:	4805      	ldr	r0, [pc, #20]	; (80032a0 <MX_GPIO_Init+0xcc>)
 800328c:	f004 f83c 	bl	8007308 <HAL_GPIO_Init>

}
 8003290:	bf00      	nop
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	58024400 	.word	0x58024400
 800329c:	58020000 	.word	0x58020000
 80032a0:	58020400 	.word	0x58020400

080032a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032a8:	b672      	cpsid	i
}
 80032aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80032ac:	e7fe      	b.n	80032ac <Error_Handler+0x8>
	...

080032b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b6:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <HAL_MspInit+0x30>)
 80032b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032bc:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <HAL_MspInit+0x30>)
 80032be:	f043 0302 	orr.w	r3, r3, #2
 80032c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_MspInit+0x30>)
 80032c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	58024400 	.word	0x58024400

080032e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b0b8      	sub	sp, #224	; 0xe0
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032fc:	f107 0310 	add.w	r3, r7, #16
 8003300:	22bc      	movs	r2, #188	; 0xbc
 8003302:	2100      	movs	r1, #0
 8003304:	4618      	mov	r0, r3
 8003306:	f00c fc1d 	bl	800fb44 <memset>
  if(hi2c->Instance==I2C1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a3f      	ldr	r2, [pc, #252]	; (800340c <HAL_I2C_MspInit+0x128>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d177      	bne.n	8003404 <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003314:	2308      	movs	r3, #8
 8003316:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003318:	2300      	movs	r3, #0
 800331a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800331e:	f107 0310 	add.w	r3, r7, #16
 8003322:	4618      	mov	r0, r3
 8003324:	f007 fbfe 	bl	800ab24 <HAL_RCCEx_PeriphCLKConfig>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800332e:	f7ff ffb9 	bl	80032a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003332:	4b37      	ldr	r3, [pc, #220]	; (8003410 <HAL_I2C_MspInit+0x12c>)
 8003334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003338:	4a35      	ldr	r2, [pc, #212]	; (8003410 <HAL_I2C_MspInit+0x12c>)
 800333a:	f043 0302 	orr.w	r3, r3, #2
 800333e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003342:	4b33      	ldr	r3, [pc, #204]	; (8003410 <HAL_I2C_MspInit+0x12c>)
 8003344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003350:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003354:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003358:	2312      	movs	r3, #18
 800335a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003364:	2300      	movs	r3, #0
 8003366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800336a:	2304      	movs	r3, #4
 800336c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003370:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003374:	4619      	mov	r1, r3
 8003376:	4827      	ldr	r0, [pc, #156]	; (8003414 <HAL_I2C_MspInit+0x130>)
 8003378:	f003 ffc6 	bl	8007308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800337c:	4b24      	ldr	r3, [pc, #144]	; (8003410 <HAL_I2C_MspInit+0x12c>)
 800337e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003382:	4a23      	ldr	r2, [pc, #140]	; (8003410 <HAL_I2C_MspInit+0x12c>)
 8003384:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003388:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800338c:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_I2C_MspInit+0x12c>)
 800338e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 800339a:	4b1f      	ldr	r3, [pc, #124]	; (8003418 <HAL_I2C_MspInit+0x134>)
 800339c:	4a1f      	ldr	r2, [pc, #124]	; (800341c <HAL_I2C_MspInit+0x138>)
 800339e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80033a0:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <HAL_I2C_MspInit+0x134>)
 80033a2:	2221      	movs	r2, #33	; 0x21
 80033a4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033a6:	4b1c      	ldr	r3, [pc, #112]	; (8003418 <HAL_I2C_MspInit+0x134>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ac:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <HAL_I2C_MspInit+0x134>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033b2:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_I2C_MspInit+0x134>)
 80033b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033b8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033ba:	4b17      	ldr	r3, [pc, #92]	; (8003418 <HAL_I2C_MspInit+0x134>)
 80033bc:	2200      	movs	r2, #0
 80033be:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033c0:	4b15      	ldr	r3, [pc, #84]	; (8003418 <HAL_I2C_MspInit+0x134>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80033c6:	4b14      	ldr	r3, [pc, #80]	; (8003418 <HAL_I2C_MspInit+0x134>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033cc:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_I2C_MspInit+0x134>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033d2:	4b11      	ldr	r3, [pc, #68]	; (8003418 <HAL_I2C_MspInit+0x134>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80033d8:	480f      	ldr	r0, [pc, #60]	; (8003418 <HAL_I2C_MspInit+0x134>)
 80033da:	f001 f941 	bl	8004660 <HAL_DMA_Init>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 80033e4:	f7ff ff5e 	bl	80032a4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a0b      	ldr	r2, [pc, #44]	; (8003418 <HAL_I2C_MspInit+0x134>)
 80033ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80033ee:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <HAL_I2C_MspInit+0x134>)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80033f4:	2200      	movs	r2, #0
 80033f6:	2100      	movs	r1, #0
 80033f8:	201f      	movs	r0, #31
 80033fa:	f001 f8fc 	bl	80045f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80033fe:	201f      	movs	r0, #31
 8003400:	f001 f913 	bl	800462a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003404:	bf00      	nop
 8003406:	37e0      	adds	r7, #224	; 0xe0
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40005400 	.word	0x40005400
 8003410:	58024400 	.word	0x58024400
 8003414:	58020400 	.word	0x58020400
 8003418:	24000430 	.word	0x24000430
 800341c:	40020028 	.word	0x40020028

08003420 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b0b8      	sub	sp, #224	; 0xe0
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003428:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003438:	f107 0310 	add.w	r3, r7, #16
 800343c:	22bc      	movs	r2, #188	; 0xbc
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f00c fb7f 	bl	800fb44 <memset>
  if(hspi->Instance==SPI1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a25      	ldr	r2, [pc, #148]	; (80034e0 <HAL_SPI_MspInit+0xc0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d142      	bne.n	80034d6 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003454:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003456:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800345a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800345c:	f107 0310 	add.w	r3, r7, #16
 8003460:	4618      	mov	r0, r3
 8003462:	f007 fb5f 	bl	800ab24 <HAL_RCCEx_PeriphCLKConfig>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 800346c:	f7ff ff1a 	bl	80032a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003470:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <HAL_SPI_MspInit+0xc4>)
 8003472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003476:	4a1b      	ldr	r2, [pc, #108]	; (80034e4 <HAL_SPI_MspInit+0xc4>)
 8003478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800347c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003480:	4b18      	ldr	r3, [pc, #96]	; (80034e4 <HAL_SPI_MspInit+0xc4>)
 8003482:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <HAL_SPI_MspInit+0xc4>)
 8003490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003494:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <HAL_SPI_MspInit+0xc4>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800349e:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <HAL_SPI_MspInit+0xc4>)
 80034a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034ac:	23e0      	movs	r3, #224	; 0xe0
 80034ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b2:	2302      	movs	r3, #2
 80034b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034be:	2300      	movs	r3, #0
 80034c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034c4:	2305      	movs	r3, #5
 80034c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80034ce:	4619      	mov	r1, r3
 80034d0:	4805      	ldr	r0, [pc, #20]	; (80034e8 <HAL_SPI_MspInit+0xc8>)
 80034d2:	f003 ff19 	bl	8007308 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80034d6:	bf00      	nop
 80034d8:	37e0      	adds	r7, #224	; 0xe0
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40013000 	.word	0x40013000
 80034e4:	58024400 	.word	0x58024400
 80034e8:	58020000 	.word	0x58020000

080034ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a0e      	ldr	r2, [pc, #56]	; (8003534 <HAL_TIM_Base_MspInit+0x48>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d116      	bne.n	800352c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80034fe:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <HAL_TIM_Base_MspInit+0x4c>)
 8003500:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003504:	4a0c      	ldr	r2, [pc, #48]	; (8003538 <HAL_TIM_Base_MspInit+0x4c>)
 8003506:	f043 0320 	orr.w	r3, r3, #32
 800350a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800350e:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <HAL_TIM_Base_MspInit+0x4c>)
 8003510:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800351c:	2200      	movs	r2, #0
 800351e:	2100      	movs	r1, #0
 8003520:	2037      	movs	r0, #55	; 0x37
 8003522:	f001 f868 	bl	80045f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003526:	2037      	movs	r0, #55	; 0x37
 8003528:	f001 f87f 	bl	800462a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800352c:	bf00      	nop
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40001400 	.word	0x40001400
 8003538:	58024400 	.word	0x58024400

0800353c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b0b8      	sub	sp, #224	; 0xe0
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003544:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003554:	f107 0310 	add.w	r3, r7, #16
 8003558:	22bc      	movs	r2, #188	; 0xbc
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f00c faf1 	bl	800fb44 <memset>
  if(huart->Instance==USART1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a3f      	ldr	r2, [pc, #252]	; (8003664 <HAL_UART_MspInit+0x128>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d177      	bne.n	800365c <HAL_UART_MspInit+0x120>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800356c:	2301      	movs	r3, #1
 800356e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003570:	2300      	movs	r3, #0
 8003572:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003576:	f107 0310 	add.w	r3, r7, #16
 800357a:	4618      	mov	r0, r3
 800357c:	f007 fad2 	bl	800ab24 <HAL_RCCEx_PeriphCLKConfig>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003586:	f7ff fe8d 	bl	80032a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800358a:	4b37      	ldr	r3, [pc, #220]	; (8003668 <HAL_UART_MspInit+0x12c>)
 800358c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003590:	4a35      	ldr	r2, [pc, #212]	; (8003668 <HAL_UART_MspInit+0x12c>)
 8003592:	f043 0310 	orr.w	r3, r3, #16
 8003596:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800359a:	4b33      	ldr	r3, [pc, #204]	; (8003668 <HAL_UART_MspInit+0x12c>)
 800359c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a8:	4b2f      	ldr	r3, [pc, #188]	; (8003668 <HAL_UART_MspInit+0x12c>)
 80035aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ae:	4a2e      	ldr	r2, [pc, #184]	; (8003668 <HAL_UART_MspInit+0x12c>)
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035b8:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <HAL_UART_MspInit+0x12c>)
 80035ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80035c6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80035ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ce:	2302      	movs	r3, #2
 80035d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035da:	2300      	movs	r3, #0
 80035dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80035e0:	2304      	movs	r3, #4
 80035e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80035ea:	4619      	mov	r1, r3
 80035ec:	481f      	ldr	r0, [pc, #124]	; (800366c <HAL_UART_MspInit+0x130>)
 80035ee:	f003 fe8b 	bl	8007308 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 80035f2:	4b1f      	ldr	r3, [pc, #124]	; (8003670 <HAL_UART_MspInit+0x134>)
 80035f4:	4a1f      	ldr	r2, [pc, #124]	; (8003674 <HAL_UART_MspInit+0x138>)
 80035f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_UART_MspInit+0x134>)
 80035fa:	222a      	movs	r2, #42	; 0x2a
 80035fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035fe:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <HAL_UART_MspInit+0x134>)
 8003600:	2240      	movs	r2, #64	; 0x40
 8003602:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003604:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <HAL_UART_MspInit+0x134>)
 8003606:	2200      	movs	r2, #0
 8003608:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800360a:	4b19      	ldr	r3, [pc, #100]	; (8003670 <HAL_UART_MspInit+0x134>)
 800360c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003610:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003612:	4b17      	ldr	r3, [pc, #92]	; (8003670 <HAL_UART_MspInit+0x134>)
 8003614:	2200      	movs	r2, #0
 8003616:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003618:	4b15      	ldr	r3, [pc, #84]	; (8003670 <HAL_UART_MspInit+0x134>)
 800361a:	2200      	movs	r2, #0
 800361c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800361e:	4b14      	ldr	r3, [pc, #80]	; (8003670 <HAL_UART_MspInit+0x134>)
 8003620:	2200      	movs	r2, #0
 8003622:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003624:	4b12      	ldr	r3, [pc, #72]	; (8003670 <HAL_UART_MspInit+0x134>)
 8003626:	2200      	movs	r2, #0
 8003628:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_UART_MspInit+0x134>)
 800362c:	2200      	movs	r2, #0
 800362e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003630:	480f      	ldr	r0, [pc, #60]	; (8003670 <HAL_UART_MspInit+0x134>)
 8003632:	f001 f815 	bl	8004660 <HAL_DMA_Init>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 800363c:	f7ff fe32 	bl	80032a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <HAL_UART_MspInit+0x134>)
 8003644:	679a      	str	r2, [r3, #120]	; 0x78
 8003646:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <HAL_UART_MspInit+0x134>)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800364c:	2200      	movs	r2, #0
 800364e:	2100      	movs	r1, #0
 8003650:	2025      	movs	r0, #37	; 0x25
 8003652:	f000 ffd0 	bl	80045f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003656:	2025      	movs	r0, #37	; 0x25
 8003658:	f000 ffe7 	bl	800462a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800365c:	bf00      	nop
 800365e:	37e0      	adds	r7, #224	; 0xe0
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40011000 	.word	0x40011000
 8003668:	58024400 	.word	0x58024400
 800366c:	58020400 	.word	0x58020400
 8003670:	24000328 	.word	0x24000328
 8003674:	40020010 	.word	0x40020010

08003678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800367c:	e7fe      	b.n	800367c <NMI_Handler+0x4>

0800367e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800367e:	b480      	push	{r7}
 8003680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003682:	e7fe      	b.n	8003682 <HardFault_Handler+0x4>

08003684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003688:	e7fe      	b.n	8003688 <MemManage_Handler+0x4>

0800368a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800368a:	b480      	push	{r7}
 800368c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800368e:	e7fe      	b.n	800368e <BusFault_Handler+0x4>

08003690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003694:	e7fe      	b.n	8003694 <UsageFault_Handler+0x4>

08003696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003696:	b480      	push	{r7}
 8003698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800369a:	bf00      	nop
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036a8:	bf00      	nop
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036b2:	b480      	push	{r7}
 80036b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036c4:	f000 fe6c 	bl	80043a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036c8:	bf00      	nop
 80036ca:	bd80      	pop	{r7, pc}

080036cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80036d0:	4802      	ldr	r0, [pc, #8]	; (80036dc <DMA1_Stream0_IRQHandler+0x10>)
 80036d2:	f002 faed 	bl	8005cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	24000328 	.word	0x24000328

080036e0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80036e4:	4802      	ldr	r0, [pc, #8]	; (80036f0 <DMA1_Stream1_IRQHandler+0x10>)
 80036e6:	f002 fae3 	bl	8005cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	24000430 	.word	0x24000430

080036f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80036f8:	4802      	ldr	r0, [pc, #8]	; (8003704 <I2C1_EV_IRQHandler+0x10>)
 80036fa:	f004 fb9f 	bl	8007e3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	240002dc 	.word	0x240002dc

08003708 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800370c:	4802      	ldr	r0, [pc, #8]	; (8003718 <USART1_IRQHandler+0x10>)
 800370e:	f00a fa8b 	bl	800dc28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	240003a0 	.word	0x240003a0

0800371c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <TIM7_IRQHandler+0x10>)
 8003722:	f009 fee3 	bl	800d4ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	2400053c 	.word	0x2400053c

08003730 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	static uint8_t tim1_2ms_count = 0;
	static uint8_t tim1_20ms_count = 0;

	if(htim->Instance == TIM7)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a14      	ldr	r2, [pc, #80]	; (8003790 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d11f      	bne.n	8003782 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		tim1_2ms_count++;
 8003742:	4b14      	ldr	r3, [pc, #80]	; (8003794 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	3301      	adds	r3, #1
 8003748:	b2da      	uxtb	r2, r3
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800374c:	701a      	strb	r2, [r3, #0]
		if(tim1_2ms_count == 2)
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d105      	bne.n	8003762 <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			tim1_2ms_count = 0;
 8003756:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
			tim1_2ms_flag = 1;
 800375c:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
		}
		tim1_20ms_count++;
 8003762:	4b0e      	ldr	r3, [pc, #56]	; (800379c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	3301      	adds	r3, #1
 8003768:	b2da      	uxtb	r2, r3
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800376c:	701a      	strb	r2, [r3, #0]
		if(tim1_20ms_count == 20)
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b14      	cmp	r3, #20
 8003774:	d105      	bne.n	8003782 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			tim1_20ms_count = 0;
 8003776:	4b09      	ldr	r3, [pc, #36]	; (800379c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003778:	2200      	movs	r2, #0
 800377a:	701a      	strb	r2, [r3, #0]
			tim1_20ms_flag = 1;
 800377c:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800377e:	2201      	movs	r2, #1
 8003780:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40001400 	.word	0x40001400
 8003794:	24000231 	.word	0x24000231
 8003798:	2400022d 	.word	0x2400022d
 800379c:	24000232 	.word	0x24000232
 80037a0:	2400022e 	.word	0x2400022e

080037a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a07      	ldr	r2, [pc, #28]	; (80037d0 <HAL_UART_RxCpltCallback+0x2c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d107      	bne.n	80037c6 <HAL_UART_RxCpltCallback+0x22>
	{
		uart1_rx_flag = 1;
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_UART_RxCpltCallback+0x30>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 80037bc:	2201      	movs	r2, #1
 80037be:	4906      	ldr	r1, [pc, #24]	; (80037d8 <HAL_UART_RxCpltCallback+0x34>)
 80037c0:	4806      	ldr	r0, [pc, #24]	; (80037dc <HAL_UART_RxCpltCallback+0x38>)
 80037c2:	f00a f96b 	bl	800da9c <HAL_UART_Receive_IT>
	}
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40011000 	.word	0x40011000
 80037d4:	2400022f 	.word	0x2400022f
 80037d8:	24000230 	.word	0x24000230
 80037dc:	240003a0 	.word	0x240003a0

080037e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
	return 1;
 80037e4:	2301      	movs	r3, #1
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <_kill>:

int _kill(int pid, int sig)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037fa:	f00c f979 	bl	800faf0 <__errno>
 80037fe:	4603      	mov	r3, r0
 8003800:	2216      	movs	r2, #22
 8003802:	601a      	str	r2, [r3, #0]
	return -1;
 8003804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <_exit>:

void _exit (int status)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003818:	f04f 31ff 	mov.w	r1, #4294967295
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ffe7 	bl	80037f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003822:	e7fe      	b.n	8003822 <_exit+0x12>

08003824 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	e00a      	b.n	800384c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003836:	f3af 8000 	nop.w
 800383a:	4601      	mov	r1, r0
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	60ba      	str	r2, [r7, #8]
 8003842:	b2ca      	uxtb	r2, r1
 8003844:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	3301      	adds	r3, #1
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	dbf0      	blt.n	8003836 <_read+0x12>
	}

return len;
 8003854:	687b      	ldr	r3, [r7, #4]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <_close>:
	}
	return len;
}

int _close(int file)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
	return -1;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003886:	605a      	str	r2, [r3, #4]
	return 0;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <_isatty>:

int _isatty(int file)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
	return 1;
 800389e:	2301      	movs	r3, #1
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
	return 0;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038d0:	4a14      	ldr	r2, [pc, #80]	; (8003924 <_sbrk+0x5c>)
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <_sbrk+0x60>)
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038dc:	4b13      	ldr	r3, [pc, #76]	; (800392c <_sbrk+0x64>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d102      	bne.n	80038ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038e4:	4b11      	ldr	r3, [pc, #68]	; (800392c <_sbrk+0x64>)
 80038e6:	4a12      	ldr	r2, [pc, #72]	; (8003930 <_sbrk+0x68>)
 80038e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ea:	4b10      	ldr	r3, [pc, #64]	; (800392c <_sbrk+0x64>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d207      	bcs.n	8003908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038f8:	f00c f8fa 	bl	800faf0 <__errno>
 80038fc:	4603      	mov	r3, r0
 80038fe:	220c      	movs	r2, #12
 8003900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003902:	f04f 33ff 	mov.w	r3, #4294967295
 8003906:	e009      	b.n	800391c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <_sbrk+0x64>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800390e:	4b07      	ldr	r3, [pc, #28]	; (800392c <_sbrk+0x64>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4413      	add	r3, r2
 8003916:	4a05      	ldr	r2, [pc, #20]	; (800392c <_sbrk+0x64>)
 8003918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800391a:	68fb      	ldr	r3, [r7, #12]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	24080000 	.word	0x24080000
 8003928:	00000400 	.word	0x00000400
 800392c:	24000234 	.word	0x24000234
 8003930:	240005c8 	.word	0x240005c8

08003934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003938:	4b39      	ldr	r3, [pc, #228]	; (8003a20 <SystemInit+0xec>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393e:	4a38      	ldr	r2, [pc, #224]	; (8003a20 <SystemInit+0xec>)
 8003940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003948:	4b36      	ldr	r3, [pc, #216]	; (8003a24 <SystemInit+0xf0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	2b06      	cmp	r3, #6
 8003952:	d807      	bhi.n	8003964 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003954:	4b33      	ldr	r3, [pc, #204]	; (8003a24 <SystemInit+0xf0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 030f 	bic.w	r3, r3, #15
 800395c:	4a31      	ldr	r2, [pc, #196]	; (8003a24 <SystemInit+0xf0>)
 800395e:	f043 0307 	orr.w	r3, r3, #7
 8003962:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003964:	4b30      	ldr	r3, [pc, #192]	; (8003a28 <SystemInit+0xf4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a2f      	ldr	r2, [pc, #188]	; (8003a28 <SystemInit+0xf4>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003970:	4b2d      	ldr	r3, [pc, #180]	; (8003a28 <SystemInit+0xf4>)
 8003972:	2200      	movs	r2, #0
 8003974:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003976:	4b2c      	ldr	r3, [pc, #176]	; (8003a28 <SystemInit+0xf4>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	492b      	ldr	r1, [pc, #172]	; (8003a28 <SystemInit+0xf4>)
 800397c:	4b2b      	ldr	r3, [pc, #172]	; (8003a2c <SystemInit+0xf8>)
 800397e:	4013      	ands	r3, r2
 8003980:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003982:	4b28      	ldr	r3, [pc, #160]	; (8003a24 <SystemInit+0xf0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800398e:	4b25      	ldr	r3, [pc, #148]	; (8003a24 <SystemInit+0xf0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 030f 	bic.w	r3, r3, #15
 8003996:	4a23      	ldr	r2, [pc, #140]	; (8003a24 <SystemInit+0xf0>)
 8003998:	f043 0307 	orr.w	r3, r3, #7
 800399c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800399e:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <SystemInit+0xf4>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80039a4:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <SystemInit+0xf4>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80039aa:	4b1f      	ldr	r3, [pc, #124]	; (8003a28 <SystemInit+0xf4>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80039b0:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <SystemInit+0xf4>)
 80039b2:	4a1f      	ldr	r2, [pc, #124]	; (8003a30 <SystemInit+0xfc>)
 80039b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80039b6:	4b1c      	ldr	r3, [pc, #112]	; (8003a28 <SystemInit+0xf4>)
 80039b8:	4a1e      	ldr	r2, [pc, #120]	; (8003a34 <SystemInit+0x100>)
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80039bc:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <SystemInit+0xf4>)
 80039be:	4a1e      	ldr	r2, [pc, #120]	; (8003a38 <SystemInit+0x104>)
 80039c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80039c2:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <SystemInit+0xf4>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80039c8:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <SystemInit+0xf4>)
 80039ca:	4a1b      	ldr	r2, [pc, #108]	; (8003a38 <SystemInit+0x104>)
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80039ce:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <SystemInit+0xf4>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80039d4:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <SystemInit+0xf4>)
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <SystemInit+0x104>)
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <SystemInit+0xf4>)
 80039dc:	2200      	movs	r2, #0
 80039de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <SystemInit+0xf4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a10      	ldr	r2, [pc, #64]	; (8003a28 <SystemInit+0xf4>)
 80039e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80039ec:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <SystemInit+0xf4>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <SystemInit+0x108>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <SystemInit+0x10c>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039fe:	d202      	bcs.n	8003a06 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003a00:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <SystemInit+0x110>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <SystemInit+0x114>)
 8003a08:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a0e:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <SystemInit+0xec>)
 8003a10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a14:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003a16:	bf00      	nop
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	e000ed00 	.word	0xe000ed00
 8003a24:	52002000 	.word	0x52002000
 8003a28:	58024400 	.word	0x58024400
 8003a2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a30:	02020200 	.word	0x02020200
 8003a34:	01ff0000 	.word	0x01ff0000
 8003a38:	01010280 	.word	0x01010280
 8003a3c:	5c001000 	.word	0x5c001000
 8003a40:	ffff0000 	.word	0xffff0000
 8003a44:	51008108 	.word	0x51008108
 8003a48:	52004000 	.word	0x52004000

08003a4c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	4603      	mov	r3, r0
 8003a54:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003a56:	f107 020f 	add.w	r2, r7, #15
 8003a5a:	1df9      	adds	r1, r7, #7
 8003a5c:	2364      	movs	r3, #100	; 0x64
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	2301      	movs	r3, #1
 8003a62:	4804      	ldr	r0, [pc, #16]	; (8003a74 <W25qxx_Spi+0x28>)
 8003a64:	f009 f8a6 	bl	800cbb4 <HAL_SPI_TransmitReceive>
	return ret;
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	240004a8 	.word	0x240004a8

08003a78 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	2300      	movs	r3, #0
 8003a88:	607b      	str	r3, [r7, #4]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2140      	movs	r1, #64	; 0x40
 8003a92:	4813      	ldr	r0, [pc, #76]	; (8003ae0 <W25qxx_ReadID+0x68>)
 8003a94:	f003 fde8 	bl	8007668 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003a98:	209f      	movs	r0, #159	; 0x9f
 8003a9a:	f7ff ffd7 	bl	8003a4c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003a9e:	20a5      	movs	r0, #165	; 0xa5
 8003aa0:	f7ff ffd4 	bl	8003a4c <W25qxx_Spi>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003aa8:	20a5      	movs	r0, #165	; 0xa5
 8003aaa:	f7ff ffcf 	bl	8003a4c <W25qxx_Spi>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003ab2:	20a5      	movs	r0, #165	; 0xa5
 8003ab4:	f7ff ffca 	bl	8003a4c <W25qxx_Spi>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003abc:	2201      	movs	r2, #1
 8003abe:	2140      	movs	r1, #64	; 0x40
 8003ac0:	4807      	ldr	r0, [pc, #28]	; (8003ae0 <W25qxx_ReadID+0x68>)
 8003ac2:	f003 fdd1 	bl	8007668 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	041a      	lsls	r2, r3, #16
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	58020400 	.word	0x58020400

08003ae4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003ae4:	b590      	push	{r4, r7, lr}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003aea:	2200      	movs	r2, #0
 8003aec:	2140      	movs	r1, #64	; 0x40
 8003aee:	4816      	ldr	r0, [pc, #88]	; (8003b48 <W25qxx_ReadUniqID+0x64>)
 8003af0:	f003 fdba 	bl	8007668 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003af4:	204b      	movs	r0, #75	; 0x4b
 8003af6:	f7ff ffa9 	bl	8003a4c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	71fb      	strb	r3, [r7, #7]
 8003afe:	e005      	b.n	8003b0c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b00:	20a5      	movs	r0, #165	; 0xa5
 8003b02:	f7ff ffa3 	bl	8003a4c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	71fb      	strb	r3, [r7, #7]
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d9f6      	bls.n	8003b00 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003b12:	2300      	movs	r3, #0
 8003b14:	71bb      	strb	r3, [r7, #6]
 8003b16:	e00b      	b.n	8003b30 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b18:	79bc      	ldrb	r4, [r7, #6]
 8003b1a:	20a5      	movs	r0, #165	; 0xa5
 8003b1c:	f7ff ff96 	bl	8003a4c <W25qxx_Spi>
 8003b20:	4603      	mov	r3, r0
 8003b22:	461a      	mov	r2, r3
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <W25qxx_ReadUniqID+0x68>)
 8003b26:	4423      	add	r3, r4
 8003b28:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003b2a:	79bb      	ldrb	r3, [r7, #6]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	71bb      	strb	r3, [r7, #6]
 8003b30:	79bb      	ldrb	r3, [r7, #6]
 8003b32:	2b07      	cmp	r3, #7
 8003b34:	d9f0      	bls.n	8003b18 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003b36:	2201      	movs	r2, #1
 8003b38:	2140      	movs	r1, #64	; 0x40
 8003b3a:	4803      	ldr	r0, [pc, #12]	; (8003b48 <W25qxx_ReadUniqID+0x64>)
 8003b3c:	f003 fd94 	bl	8007668 <HAL_GPIO_WritePin>
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd90      	pop	{r4, r7, pc}
 8003b48:	58020400 	.word	0x58020400
 8003b4c:	24000588 	.word	0x24000588

08003b50 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003b54:	2200      	movs	r2, #0
 8003b56:	2140      	movs	r1, #64	; 0x40
 8003b58:	4807      	ldr	r0, [pc, #28]	; (8003b78 <W25qxx_WriteEnable+0x28>)
 8003b5a:	f003 fd85 	bl	8007668 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8003b5e:	2006      	movs	r0, #6
 8003b60:	f7ff ff74 	bl	8003a4c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003b64:	2201      	movs	r2, #1
 8003b66:	2140      	movs	r1, #64	; 0x40
 8003b68:	4803      	ldr	r0, [pc, #12]	; (8003b78 <W25qxx_WriteEnable+0x28>)
 8003b6a:	f003 fd7d 	bl	8007668 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003b6e:	2001      	movs	r0, #1
 8003b70:	f000 fc36 	bl	80043e0 <HAL_Delay>
}
 8003b74:	bf00      	nop
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	58020400 	.word	0x58020400

08003b7c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2140      	movs	r1, #64	; 0x40
 8003b8e:	481c      	ldr	r0, [pc, #112]	; (8003c00 <W25qxx_ReadStatusRegister+0x84>)
 8003b90:	f003 fd6a 	bl	8007668 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d10c      	bne.n	8003bb4 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003b9a:	2005      	movs	r0, #5
 8003b9c:	f7ff ff56 	bl	8003a4c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003ba0:	20a5      	movs	r0, #165	; 0xa5
 8003ba2:	f7ff ff53 	bl	8003a4c <W25qxx_Spi>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003baa:	4a16      	ldr	r2, [pc, #88]	; (8003c04 <W25qxx_ReadStatusRegister+0x88>)
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8003bb2:	e01b      	b.n	8003bec <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d10c      	bne.n	8003bd4 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003bba:	2035      	movs	r0, #53	; 0x35
 8003bbc:	f7ff ff46 	bl	8003a4c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003bc0:	20a5      	movs	r0, #165	; 0xa5
 8003bc2:	f7ff ff43 	bl	8003a4c <W25qxx_Spi>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003bca:	4a0e      	ldr	r2, [pc, #56]	; (8003c04 <W25qxx_ReadStatusRegister+0x88>)
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003bd2:	e00b      	b.n	8003bec <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003bd4:	2015      	movs	r0, #21
 8003bd6:	f7ff ff39 	bl	8003a4c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003bda:	20a5      	movs	r0, #165	; 0xa5
 8003bdc:	f7ff ff36 	bl	8003a4c <W25qxx_Spi>
 8003be0:	4603      	mov	r3, r0
 8003be2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003be4:	4a07      	ldr	r2, [pc, #28]	; (8003c04 <W25qxx_ReadStatusRegister+0x88>)
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003bec:	2201      	movs	r2, #1
 8003bee:	2140      	movs	r1, #64	; 0x40
 8003bf0:	4803      	ldr	r0, [pc, #12]	; (8003c00 <W25qxx_ReadStatusRegister+0x84>)
 8003bf2:	f003 fd39 	bl	8007668 <HAL_GPIO_WritePin>
	return status;
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	58020400 	.word	0x58020400
 8003c04:	24000588 	.word	0x24000588

08003c08 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	f000 fbe7 	bl	80043e0 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003c12:	2200      	movs	r2, #0
 8003c14:	2140      	movs	r1, #64	; 0x40
 8003c16:	480f      	ldr	r0, [pc, #60]	; (8003c54 <W25qxx_WaitForWriteEnd+0x4c>)
 8003c18:	f003 fd26 	bl	8007668 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003c1c:	2005      	movs	r0, #5
 8003c1e:	f7ff ff15 	bl	8003a4c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c22:	20a5      	movs	r0, #165	; 0xa5
 8003c24:	f7ff ff12 	bl	8003a4c <W25qxx_Spi>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <W25qxx_WaitForWriteEnd+0x50>)
 8003c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003c32:	2001      	movs	r0, #1
 8003c34:	f000 fbd4 	bl	80043e0 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003c38:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <W25qxx_WaitForWriteEnd+0x50>)
 8003c3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1ed      	bne.n	8003c22 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003c46:	2201      	movs	r2, #1
 8003c48:	2140      	movs	r1, #64	; 0x40
 8003c4a:	4802      	ldr	r0, [pc, #8]	; (8003c54 <W25qxx_WaitForWriteEnd+0x4c>)
 8003c4c:	f003 fd0c 	bl	8007668 <HAL_GPIO_WritePin>
}
 8003c50:	bf00      	nop
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	58020400 	.word	0x58020400
 8003c58:	24000588 	.word	0x24000588

08003c5c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003c62:	4b65      	ldr	r3, [pc, #404]	; (8003df8 <W25qxx_Init+0x19c>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003c6a:	e002      	b.n	8003c72 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	f000 fbb7 	bl	80043e0 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8003c72:	f000 fba9 	bl	80043c8 <HAL_GetTick>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b63      	cmp	r3, #99	; 0x63
 8003c7a:	d9f7      	bls.n	8003c6c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	2140      	movs	r1, #64	; 0x40
 8003c80:	485e      	ldr	r0, [pc, #376]	; (8003dfc <W25qxx_Init+0x1a0>)
 8003c82:	f003 fcf1 	bl	8007668 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003c86:	2064      	movs	r0, #100	; 0x64
 8003c88:	f000 fbaa 	bl	80043e0 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8003c8c:	f7ff fef4 	bl	8003a78 <W25qxx_ReadID>
 8003c90:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	3b11      	subs	r3, #17
 8003c98:	2b0f      	cmp	r3, #15
 8003c9a:	d86c      	bhi.n	8003d76 <W25qxx_Init+0x11a>
 8003c9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <W25qxx_Init+0x48>)
 8003c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca2:	bf00      	nop
 8003ca4:	08003d69 	.word	0x08003d69
 8003ca8:	08003d5b 	.word	0x08003d5b
 8003cac:	08003d4d 	.word	0x08003d4d
 8003cb0:	08003d3f 	.word	0x08003d3f
 8003cb4:	08003d31 	.word	0x08003d31
 8003cb8:	08003d23 	.word	0x08003d23
 8003cbc:	08003d15 	.word	0x08003d15
 8003cc0:	08003d05 	.word	0x08003d05
 8003cc4:	08003cf5 	.word	0x08003cf5
 8003cc8:	08003d77 	.word	0x08003d77
 8003ccc:	08003d77 	.word	0x08003d77
 8003cd0:	08003d77 	.word	0x08003d77
 8003cd4:	08003d77 	.word	0x08003d77
 8003cd8:	08003d77 	.word	0x08003d77
 8003cdc:	08003d77 	.word	0x08003d77
 8003ce0:	08003ce5 	.word	0x08003ce5
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8003ce4:	4b44      	ldr	r3, [pc, #272]	; (8003df8 <W25qxx_Init+0x19c>)
 8003ce6:	220a      	movs	r2, #10
 8003ce8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8003cea:	4b43      	ldr	r3, [pc, #268]	; (8003df8 <W25qxx_Init+0x19c>)
 8003cec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cf0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8003cf2:	e046      	b.n	8003d82 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8003cf4:	4b40      	ldr	r3, [pc, #256]	; (8003df8 <W25qxx_Init+0x19c>)
 8003cf6:	2209      	movs	r2, #9
 8003cf8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8003cfa:	4b3f      	ldr	r3, [pc, #252]	; (8003df8 <W25qxx_Init+0x19c>)
 8003cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d00:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8003d02:	e03e      	b.n	8003d82 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003d04:	4b3c      	ldr	r3, [pc, #240]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d06:	2208      	movs	r2, #8
 8003d08:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003d0a:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d10:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8003d12:	e036      	b.n	8003d82 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003d14:	4b38      	ldr	r3, [pc, #224]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d16:	2207      	movs	r2, #7
 8003d18:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8003d1a:	4b37      	ldr	r3, [pc, #220]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d1c:	2280      	movs	r2, #128	; 0x80
 8003d1e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8003d20:	e02f      	b.n	8003d82 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003d22:	4b35      	ldr	r3, [pc, #212]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d24:	2206      	movs	r2, #6
 8003d26:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003d28:	4b33      	ldr	r3, [pc, #204]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d2a:	2240      	movs	r2, #64	; 0x40
 8003d2c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8003d2e:	e028      	b.n	8003d82 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8003d30:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d32:	2205      	movs	r2, #5
 8003d34:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003d36:	4b30      	ldr	r3, [pc, #192]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d38:	2220      	movs	r2, #32
 8003d3a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8003d3c:	e021      	b.n	8003d82 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8003d3e:	4b2e      	ldr	r3, [pc, #184]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d40:	2204      	movs	r2, #4
 8003d42:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003d44:	4b2c      	ldr	r3, [pc, #176]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d46:	2210      	movs	r2, #16
 8003d48:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8003d4a:	e01a      	b.n	8003d82 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003d4c:	4b2a      	ldr	r3, [pc, #168]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d4e:	2203      	movs	r2, #3
 8003d50:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003d52:	4b29      	ldr	r3, [pc, #164]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d54:	2208      	movs	r2, #8
 8003d56:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8003d58:	e013      	b.n	8003d82 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8003d5a:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003d60:	4b25      	ldr	r3, [pc, #148]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d62:	2204      	movs	r2, #4
 8003d64:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8003d66:	e00c      	b.n	8003d82 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8003d68:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003d6e:	4b22      	ldr	r3, [pc, #136]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d70:	2202      	movs	r2, #2
 8003d72:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8003d74:	e005      	b.n	8003d82 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8003d76:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e036      	b.n	8003df0 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8003d82:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d88:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d90:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003d92:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d9a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8003d9c:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <W25qxx_Init+0x19c>)
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <W25qxx_Init+0x19c>)
 8003da2:	6912      	ldr	r2, [r2, #16]
 8003da4:	fb02 f303 	mul.w	r3, r2, r3
 8003da8:	4a13      	ldr	r2, [pc, #76]	; (8003df8 <W25qxx_Init+0x19c>)
 8003daa:	8952      	ldrh	r2, [r2, #10]
 8003dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8003db0:	4a11      	ldr	r2, [pc, #68]	; (8003df8 <W25qxx_Init+0x19c>)
 8003db2:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003db4:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <W25qxx_Init+0x19c>)
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	4a0f      	ldr	r2, [pc, #60]	; (8003df8 <W25qxx_Init+0x19c>)
 8003dbc:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <W25qxx_Init+0x19c>)
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	4a0d      	ldr	r2, [pc, #52]	; (8003df8 <W25qxx_Init+0x19c>)
 8003dc4:	6912      	ldr	r2, [r2, #16]
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	0a9b      	lsrs	r3, r3, #10
 8003dcc:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <W25qxx_Init+0x19c>)
 8003dce:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003dd0:	f7ff fe88 	bl	8003ae4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	f7ff fed1 	bl	8003b7c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8003dda:	2002      	movs	r0, #2
 8003ddc:	f7ff fece 	bl	8003b7c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003de0:	2003      	movs	r0, #3
 8003de2:	f7ff fecb 	bl	8003b7c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8003de6:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <W25qxx_Init+0x19c>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003dee:	2301      	movs	r3, #1
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	24000588 	.word	0x24000588
 8003dfc:	58020400 	.word	0x58020400

08003e00 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003e08:	e002      	b.n	8003e10 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	f000 fae8 	bl	80043e0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003e10:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <W25qxx_EraseSector+0xa8>)
 8003e12:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d0f7      	beq.n	8003e0a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8003e1a:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <W25qxx_EraseSector+0xa8>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8003e22:	f7ff fef1 	bl	8003c08 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <W25qxx_EraseSector+0xa8>)
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	fb02 f303 	mul.w	r3, r2, r3
 8003e30:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8003e32:	f7ff fe8d 	bl	8003b50 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003e36:	2200      	movs	r2, #0
 8003e38:	2140      	movs	r1, #64	; 0x40
 8003e3a:	481c      	ldr	r0, [pc, #112]	; (8003eac <W25qxx_EraseSector+0xac>)
 8003e3c:	f003 fc14 	bl	8007668 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003e40:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <W25qxx_EraseSector+0xa8>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d909      	bls.n	8003e5c <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8003e48:	2021      	movs	r0, #33	; 0x21
 8003e4a:	f7ff fdff 	bl	8003a4c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	0e1b      	lsrs	r3, r3, #24
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fdf9 	bl	8003a4c <W25qxx_Spi>
 8003e5a:	e002      	b.n	8003e62 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8003e5c:	2020      	movs	r0, #32
 8003e5e:	f7ff fdf5 	bl	8003a4c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fdef 	bl	8003a4c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	0a1b      	lsrs	r3, r3, #8
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fde9 	bl	8003a4c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff fde4 	bl	8003a4c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003e84:	2201      	movs	r2, #1
 8003e86:	2140      	movs	r1, #64	; 0x40
 8003e88:	4808      	ldr	r0, [pc, #32]	; (8003eac <W25qxx_EraseSector+0xac>)
 8003e8a:	f003 fbed 	bl	8007668 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003e8e:	f7ff febb 	bl	8003c08 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8003e92:	2001      	movs	r0, #1
 8003e94:	f000 faa4 	bl	80043e0 <HAL_Delay>
	w25qxx.Lock = 0;
 8003e98:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <W25qxx_EraseSector+0xa8>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	24000588 	.word	0x24000588
 8003eac:	58020400 	.word	0x58020400

08003eb0 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8003eb8:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <W25qxx_SectorToPage+0x28>)
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	4a05      	ldr	r2, [pc, #20]	; (8003ed8 <W25qxx_SectorToPage+0x28>)
 8003ec4:	8952      	ldrh	r2, [r2, #10]
 8003ec6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	24000588 	.word	0x24000588

08003edc <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003eea:	e002      	b.n	8003ef2 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003eec:	2001      	movs	r0, #1
 8003eee:	f000 fa77 	bl	80043e0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003ef2:	4b39      	ldr	r3, [pc, #228]	; (8003fd8 <W25qxx_WritePage+0xfc>)
 8003ef4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d0f7      	beq.n	8003eec <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8003efc:	4b36      	ldr	r3, [pc, #216]	; (8003fd8 <W25qxx_WritePage+0xfc>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4413      	add	r3, r2
 8003f0a:	4a33      	ldr	r2, [pc, #204]	; (8003fd8 <W25qxx_WritePage+0xfc>)
 8003f0c:	8952      	ldrh	r2, [r2, #10]
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d802      	bhi.n	8003f18 <W25qxx_WritePage+0x3c>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003f18:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <W25qxx_WritePage+0xfc>)
 8003f1a:	895b      	ldrh	r3, [r3, #10]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	4413      	add	r3, r2
 8003f2a:	4a2b      	ldr	r2, [pc, #172]	; (8003fd8 <W25qxx_WritePage+0xfc>)
 8003f2c:	8952      	ldrh	r2, [r2, #10]
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d905      	bls.n	8003f3e <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003f32:	4b29      	ldr	r3, [pc, #164]	; (8003fd8 <W25qxx_WritePage+0xfc>)
 8003f34:	895b      	ldrh	r3, [r3, #10]
 8003f36:	461a      	mov	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8003f3e:	f7ff fe63 	bl	8003c08 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8003f42:	f7ff fe05 	bl	8003b50 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003f46:	2200      	movs	r2, #0
 8003f48:	2140      	movs	r1, #64	; 0x40
 8003f4a:	4824      	ldr	r0, [pc, #144]	; (8003fdc <W25qxx_WritePage+0x100>)
 8003f4c:	f003 fb8c 	bl	8007668 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8003f50:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <W25qxx_WritePage+0xfc>)
 8003f52:	895b      	ldrh	r3, [r3, #10]
 8003f54:	461a      	mov	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	fb03 f302 	mul.w	r3, r3, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	4413      	add	r3, r2
 8003f60:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8003f62:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <W25qxx_WritePage+0xfc>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d909      	bls.n	8003f7e <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8003f6a:	2012      	movs	r0, #18
 8003f6c:	f7ff fd6e 	bl	8003a4c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	0e1b      	lsrs	r3, r3, #24
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fd68 	bl	8003a4c <W25qxx_Spi>
 8003f7c:	e002      	b.n	8003f84 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8003f7e:	2002      	movs	r0, #2
 8003f80:	f7ff fd64 	bl	8003a4c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	0c1b      	lsrs	r3, r3, #16
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff fd5e 	bl	8003a4c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	0a1b      	lsrs	r3, r3, #8
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fd58 	bl	8003a4c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff fd53 	bl	8003a4c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	2364      	movs	r3, #100	; 0x64
 8003fac:	68f9      	ldr	r1, [r7, #12]
 8003fae:	480c      	ldr	r0, [pc, #48]	; (8003fe0 <W25qxx_WritePage+0x104>)
 8003fb0:	f008 fa1c 	bl	800c3ec <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	2140      	movs	r1, #64	; 0x40
 8003fb8:	4808      	ldr	r0, [pc, #32]	; (8003fdc <W25qxx_WritePage+0x100>)
 8003fba:	f003 fb55 	bl	8007668 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003fbe:	f7ff fe23 	bl	8003c08 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8003fc2:	2001      	movs	r0, #1
 8003fc4:	f000 fa0c 	bl	80043e0 <HAL_Delay>
	w25qxx.Lock = 0;
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <W25qxx_WritePage+0xfc>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	24000588 	.word	0x24000588
 8003fdc:	58020400 	.word	0x58020400
 8003fe0:	240004a8 	.word	0x240004a8

08003fe4 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8003ff2:	4b2c      	ldr	r3, [pc, #176]	; (80040a4 <W25qxx_WriteSector+0xc0>)
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d802      	bhi.n	8004002 <W25qxx_WriteSector+0x1e>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004002:	4b28      	ldr	r3, [pc, #160]	; (80040a4 <W25qxx_WriteSector+0xc0>)
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004008:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <W25qxx_WriteSector+0xc0>)
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	429a      	cmp	r2, r3
 8004010:	d243      	bcs.n	800409a <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	441a      	add	r2, r3
 8004018:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <W25qxx_WriteSector+0xc0>)
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	429a      	cmp	r2, r3
 800401e:	d905      	bls.n	800402c <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004020:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <W25qxx_WriteSector+0xc0>)
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	e001      	b.n	8004030 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004030:	68b8      	ldr	r0, [r7, #8]
 8004032:	f7ff ff3d 	bl	8003eb0 <W25qxx_SectorToPage>
 8004036:	4602      	mov	r2, r0
 8004038:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <W25qxx_WriteSector+0xc0>)
 800403a:	895b      	ldrh	r3, [r3, #10]
 800403c:	4619      	mov	r1, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	fbb3 f3f1 	udiv	r3, r3, r1
 8004044:	4413      	add	r3, r2
 8004046:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004048:	4b16      	ldr	r3, [pc, #88]	; (80040a4 <W25qxx_WriteSector+0xc0>)
 800404a:	895b      	ldrh	r3, [r3, #10]
 800404c:	461a      	mov	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	fbb3 f1f2 	udiv	r1, r3, r2
 8004054:	fb02 f201 	mul.w	r2, r2, r1
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	69f9      	ldr	r1, [r7, #28]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f7ff ff3a 	bl	8003edc <W25qxx_WritePage>
		StartPage++;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	3301      	adds	r3, #1
 800406c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800406e:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <W25qxx_WriteSector+0xc0>)
 8004070:	895b      	ldrh	r3, [r3, #10]
 8004072:	461a      	mov	r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	1a9a      	subs	r2, r3, r2
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	4413      	add	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <W25qxx_WriteSector+0xc0>)
 8004080:	895b      	ldrh	r3, [r3, #10]
 8004082:	461a      	mov	r2, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	2b00      	cmp	r3, #0
 8004096:	dce1      	bgt.n	800405c <W25qxx_WriteSector+0x78>
 8004098:	e000      	b.n	800409c <W25qxx_WriteSector+0xb8>
		return;
 800409a:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800409c:	3720      	adds	r7, #32
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	24000588 	.word	0x24000588

080040a8 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80040b6:	e002      	b.n	80040be <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80040b8:	2001      	movs	r0, #1
 80040ba:	f000 f991 	bl	80043e0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80040be:	4b36      	ldr	r3, [pc, #216]	; (8004198 <W25qxx_ReadPage+0xf0>)
 80040c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d0f7      	beq.n	80040b8 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80040c8:	4b33      	ldr	r3, [pc, #204]	; (8004198 <W25qxx_ReadPage+0xf0>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80040d0:	4b31      	ldr	r3, [pc, #196]	; (8004198 <W25qxx_ReadPage+0xf0>)
 80040d2:	895b      	ldrh	r3, [r3, #10]
 80040d4:	461a      	mov	r2, r3
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	4293      	cmp	r3, r2
 80040da:	d802      	bhi.n	80040e2 <W25qxx_ReadPage+0x3a>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80040e2:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <W25qxx_ReadPage+0xf0>)
 80040e4:	895b      	ldrh	r3, [r3, #10]
 80040e6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	4413      	add	r3, r2
 80040ee:	4a2a      	ldr	r2, [pc, #168]	; (8004198 <W25qxx_ReadPage+0xf0>)
 80040f0:	8952      	ldrh	r2, [r2, #10]
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d905      	bls.n	8004102 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80040f6:	4b28      	ldr	r3, [pc, #160]	; (8004198 <W25qxx_ReadPage+0xf0>)
 80040f8:	895b      	ldrh	r3, [r3, #10]
 80040fa:	461a      	mov	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004102:	4b25      	ldr	r3, [pc, #148]	; (8004198 <W25qxx_ReadPage+0xf0>)
 8004104:	895b      	ldrh	r3, [r3, #10]
 8004106:	461a      	mov	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	fb03 f302 	mul.w	r3, r3, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004114:	2200      	movs	r2, #0
 8004116:	2140      	movs	r1, #64	; 0x40
 8004118:	4820      	ldr	r0, [pc, #128]	; (800419c <W25qxx_ReadPage+0xf4>)
 800411a:	f003 faa5 	bl	8007668 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800411e:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <W25qxx_ReadPage+0xf0>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b08      	cmp	r3, #8
 8004124:	d909      	bls.n	800413a <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8004126:	200c      	movs	r0, #12
 8004128:	f7ff fc90 	bl	8003a4c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	0e1b      	lsrs	r3, r3, #24
 8004130:	b2db      	uxtb	r3, r3
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fc8a 	bl	8003a4c <W25qxx_Spi>
 8004138:	e002      	b.n	8004140 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800413a:	200b      	movs	r0, #11
 800413c:	f7ff fc86 	bl	8003a4c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	0c1b      	lsrs	r3, r3, #16
 8004144:	b2db      	uxtb	r3, r3
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff fc80 	bl	8003a4c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	b2db      	uxtb	r3, r3
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fc7a 	bl	8003a4c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fc75 	bl	8003a4c <W25qxx_Spi>
	W25qxx_Spi(0);
 8004162:	2000      	movs	r0, #0
 8004164:	f7ff fc72 	bl	8003a4c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	b29a      	uxth	r2, r3
 800416c:	2364      	movs	r3, #100	; 0x64
 800416e:	68f9      	ldr	r1, [r7, #12]
 8004170:	480b      	ldr	r0, [pc, #44]	; (80041a0 <W25qxx_ReadPage+0xf8>)
 8004172:	f008 fb2d 	bl	800c7d0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004176:	2201      	movs	r2, #1
 8004178:	2140      	movs	r1, #64	; 0x40
 800417a:	4808      	ldr	r0, [pc, #32]	; (800419c <W25qxx_ReadPage+0xf4>)
 800417c:	f003 fa74 	bl	8007668 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8004180:	2001      	movs	r0, #1
 8004182:	f000 f92d 	bl	80043e0 <HAL_Delay>
	w25qxx.Lock = 0;
 8004186:	4b04      	ldr	r3, [pc, #16]	; (8004198 <W25qxx_ReadPage+0xf0>)
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800418e:	bf00      	nop
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	24000588 	.word	0x24000588
 800419c:	58020400 	.word	0x58020400
 80041a0:	240004a8 	.word	0x240004a8

080041a4 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80041b2:	4b2c      	ldr	r3, [pc, #176]	; (8004264 <W25qxx_ReadSector+0xc0>)
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d802      	bhi.n	80041c2 <W25qxx_ReadSector+0x1e>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d102      	bne.n	80041c8 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80041c2:	4b28      	ldr	r3, [pc, #160]	; (8004264 <W25qxx_ReadSector+0xc0>)
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80041c8:	4b26      	ldr	r3, [pc, #152]	; (8004264 <W25qxx_ReadSector+0xc0>)
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d243      	bcs.n	800425a <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	441a      	add	r2, r3
 80041d8:	4b22      	ldr	r3, [pc, #136]	; (8004264 <W25qxx_ReadSector+0xc0>)
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d905      	bls.n	80041ec <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80041e0:	4b20      	ldr	r3, [pc, #128]	; (8004264 <W25qxx_ReadSector+0xc0>)
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e001      	b.n	80041f0 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80041f0:	68b8      	ldr	r0, [r7, #8]
 80041f2:	f7ff fe5d 	bl	8003eb0 <W25qxx_SectorToPage>
 80041f6:	4602      	mov	r2, r0
 80041f8:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <W25qxx_ReadSector+0xc0>)
 80041fa:	895b      	ldrh	r3, [r3, #10]
 80041fc:	4619      	mov	r1, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	fbb3 f3f1 	udiv	r3, r3, r1
 8004204:	4413      	add	r3, r2
 8004206:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004208:	4b16      	ldr	r3, [pc, #88]	; (8004264 <W25qxx_ReadSector+0xc0>)
 800420a:	895b      	ldrh	r3, [r3, #10]
 800420c:	461a      	mov	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	fbb3 f1f2 	udiv	r1, r3, r2
 8004214:	fb02 f201 	mul.w	r2, r2, r1
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	69f9      	ldr	r1, [r7, #28]
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f7ff ff40 	bl	80040a8 <W25qxx_ReadPage>
		StartPage++;
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	3301      	adds	r3, #1
 800422c:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800422e:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <W25qxx_ReadSector+0xc0>)
 8004230:	895b      	ldrh	r3, [r3, #10]
 8004232:	461a      	mov	r2, r3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	1a9a      	subs	r2, r3, r2
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	4413      	add	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <W25qxx_ReadSector+0xc0>)
 8004240:	895b      	ldrh	r3, [r3, #10]
 8004242:	461a      	mov	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	dce1      	bgt.n	800421c <W25qxx_ReadSector+0x78>
 8004258:	e000      	b.n	800425c <W25qxx_ReadSector+0xb8>
		return;
 800425a:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	24000588 	.word	0x24000588

08004268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800426c:	f7ff fb62 	bl	8003934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004270:	480c      	ldr	r0, [pc, #48]	; (80042a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004272:	490d      	ldr	r1, [pc, #52]	; (80042a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004274:	4a0d      	ldr	r2, [pc, #52]	; (80042ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004278:	e002      	b.n	8004280 <LoopCopyDataInit>

0800427a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800427a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800427c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800427e:	3304      	adds	r3, #4

08004280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004284:	d3f9      	bcc.n	800427a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004286:	4a0a      	ldr	r2, [pc, #40]	; (80042b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004288:	4c0a      	ldr	r4, [pc, #40]	; (80042b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800428a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800428c:	e001      	b.n	8004292 <LoopFillZerobss>

0800428e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800428e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004290:	3204      	adds	r2, #4

08004292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004294:	d3fb      	bcc.n	800428e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004296:	f00b fc31 	bl	800fafc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800429a:	f7fe fb97 	bl	80029cc <main>
  bx  lr
 800429e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80042a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80042a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80042a8:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 80042ac:	08013378 	.word	0x08013378
  ldr r2, =_sbss
 80042b0:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 80042b4:	240005c4 	.word	0x240005c4

080042b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042b8:	e7fe      	b.n	80042b8 <ADC3_IRQHandler>
	...

080042bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042c2:	2003      	movs	r0, #3
 80042c4:	f000 f98c 	bl	80045e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042c8:	f006 fa56 	bl	800a778 <HAL_RCC_GetSysClockFreq>
 80042cc:	4602      	mov	r2, r0
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <HAL_Init+0x68>)
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	0a1b      	lsrs	r3, r3, #8
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	4913      	ldr	r1, [pc, #76]	; (8004328 <HAL_Init+0x6c>)
 80042da:	5ccb      	ldrb	r3, [r1, r3]
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
 80042e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042e6:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <HAL_Init+0x68>)
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	4a0e      	ldr	r2, [pc, #56]	; (8004328 <HAL_Init+0x6c>)
 80042f0:	5cd3      	ldrb	r3, [r2, r3]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
 80042fc:	4a0b      	ldr	r2, [pc, #44]	; (800432c <HAL_Init+0x70>)
 80042fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004300:	4a0b      	ldr	r2, [pc, #44]	; (8004330 <HAL_Init+0x74>)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004306:	200f      	movs	r0, #15
 8004308:	f000 f814 	bl	8004334 <HAL_InitTick>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e002      	b.n	800431c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004316:	f7fe ffcb 	bl	80032b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	58024400 	.word	0x58024400
 8004328:	08012e98 	.word	0x08012e98
 800432c:	24000018 	.word	0x24000018
 8004330:	24000014 	.word	0x24000014

08004334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800433c:	4b15      	ldr	r3, [pc, #84]	; (8004394 <HAL_InitTick+0x60>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e021      	b.n	800438c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <HAL_InitTick+0x64>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <HAL_InitTick+0x60>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	4619      	mov	r1, r3
 8004352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004356:	fbb3 f3f1 	udiv	r3, r3, r1
 800435a:	fbb2 f3f3 	udiv	r3, r2, r3
 800435e:	4618      	mov	r0, r3
 8004360:	f000 f971 	bl	8004646 <HAL_SYSTICK_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e00e      	b.n	800438c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b0f      	cmp	r3, #15
 8004372:	d80a      	bhi.n	800438a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004374:	2200      	movs	r2, #0
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	f04f 30ff 	mov.w	r0, #4294967295
 800437c:	f000 f93b 	bl	80045f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004380:	4a06      	ldr	r2, [pc, #24]	; (800439c <HAL_InitTick+0x68>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	24000020 	.word	0x24000020
 8004398:	24000014 	.word	0x24000014
 800439c:	2400001c 	.word	0x2400001c

080043a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_IncTick+0x20>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_IncTick+0x24>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4413      	add	r3, r2
 80043b0:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <HAL_IncTick+0x24>)
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	24000020 	.word	0x24000020
 80043c4:	240005b0 	.word	0x240005b0

080043c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return uwTick;
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <HAL_GetTick+0x14>)
 80043ce:	681b      	ldr	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	240005b0 	.word	0x240005b0

080043e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043e8:	f7ff ffee 	bl	80043c8 <HAL_GetTick>
 80043ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f8:	d005      	beq.n	8004406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043fa:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <HAL_Delay+0x44>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004406:	bf00      	nop
 8004408:	f7ff ffde 	bl	80043c8 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	429a      	cmp	r2, r3
 8004416:	d8f7      	bhi.n	8004408 <HAL_Delay+0x28>
  {
  }
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	24000020 	.word	0x24000020

08004428 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <HAL_GetREVID+0x14>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	0c1b      	lsrs	r3, r3, #16
}
 8004432:	4618      	mov	r0, r3
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	5c001000 	.word	0x5c001000

08004440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <__NVIC_SetPriorityGrouping+0x40>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800445c:	4013      	ands	r3, r2
 800445e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004468:	4b06      	ldr	r3, [pc, #24]	; (8004484 <__NVIC_SetPriorityGrouping+0x44>)
 800446a:	4313      	orrs	r3, r2
 800446c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800446e:	4a04      	ldr	r2, [pc, #16]	; (8004480 <__NVIC_SetPriorityGrouping+0x40>)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	60d3      	str	r3, [r2, #12]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	e000ed00 	.word	0xe000ed00
 8004484:	05fa0000 	.word	0x05fa0000

08004488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800448c:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <__NVIC_GetPriorityGrouping+0x18>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	f003 0307 	and.w	r3, r3, #7
}
 8004496:	4618      	mov	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	e000ed00 	.word	0xe000ed00

080044a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80044ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	db0b      	blt.n	80044ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	f003 021f 	and.w	r2, r3, #31
 80044bc:	4907      	ldr	r1, [pc, #28]	; (80044dc <__NVIC_EnableIRQ+0x38>)
 80044be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	2001      	movs	r0, #1
 80044c6:	fa00 f202 	lsl.w	r2, r0, r2
 80044ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	e000e100 	.word	0xe000e100

080044e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	6039      	str	r1, [r7, #0]
 80044ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80044ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	db0a      	blt.n	800450a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	490c      	ldr	r1, [pc, #48]	; (800452c <__NVIC_SetPriority+0x4c>)
 80044fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044fe:	0112      	lsls	r2, r2, #4
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	440b      	add	r3, r1
 8004504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004508:	e00a      	b.n	8004520 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	b2da      	uxtb	r2, r3
 800450e:	4908      	ldr	r1, [pc, #32]	; (8004530 <__NVIC_SetPriority+0x50>)
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	3b04      	subs	r3, #4
 8004518:	0112      	lsls	r2, r2, #4
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	440b      	add	r3, r1
 800451e:	761a      	strb	r2, [r3, #24]
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	e000e100 	.word	0xe000e100
 8004530:	e000ed00 	.word	0xe000ed00

08004534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004534:	b480      	push	{r7}
 8004536:	b089      	sub	sp, #36	; 0x24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f1c3 0307 	rsb	r3, r3, #7
 800454e:	2b04      	cmp	r3, #4
 8004550:	bf28      	it	cs
 8004552:	2304      	movcs	r3, #4
 8004554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	3304      	adds	r3, #4
 800455a:	2b06      	cmp	r3, #6
 800455c:	d902      	bls.n	8004564 <NVIC_EncodePriority+0x30>
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3b03      	subs	r3, #3
 8004562:	e000      	b.n	8004566 <NVIC_EncodePriority+0x32>
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004568:	f04f 32ff 	mov.w	r2, #4294967295
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43da      	mvns	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	401a      	ands	r2, r3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800457c:	f04f 31ff 	mov.w	r1, #4294967295
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	fa01 f303 	lsl.w	r3, r1, r3
 8004586:	43d9      	mvns	r1, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800458c:	4313      	orrs	r3, r2
         );
}
 800458e:	4618      	mov	r0, r3
 8004590:	3724      	adds	r7, #36	; 0x24
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
	...

0800459c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045ac:	d301      	bcc.n	80045b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045ae:	2301      	movs	r3, #1
 80045b0:	e00f      	b.n	80045d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045b2:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <SysTick_Config+0x40>)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ba:	210f      	movs	r1, #15
 80045bc:	f04f 30ff 	mov.w	r0, #4294967295
 80045c0:	f7ff ff8e 	bl	80044e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <SysTick_Config+0x40>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045ca:	4b04      	ldr	r3, [pc, #16]	; (80045dc <SysTick_Config+0x40>)
 80045cc:	2207      	movs	r2, #7
 80045ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	e000e010 	.word	0xe000e010

080045e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff ff29 	bl	8004440 <__NVIC_SetPriorityGrouping>
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b086      	sub	sp, #24
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	4603      	mov	r3, r0
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	607a      	str	r2, [r7, #4]
 8004602:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004604:	f7ff ff40 	bl	8004488 <__NVIC_GetPriorityGrouping>
 8004608:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	6978      	ldr	r0, [r7, #20]
 8004610:	f7ff ff90 	bl	8004534 <NVIC_EncodePriority>
 8004614:	4602      	mov	r2, r0
 8004616:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800461a:	4611      	mov	r1, r2
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff ff5f 	bl	80044e0 <__NVIC_SetPriority>
}
 8004622:	bf00      	nop
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	4603      	mov	r3, r0
 8004632:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff ff33 	bl	80044a4 <__NVIC_EnableIRQ>
}
 800463e:	bf00      	nop
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff ffa4 	bl	800459c <SysTick_Config>
 8004654:	4603      	mov	r3, r0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004668:	f7ff feae 	bl	80043c8 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e316      	b.n	8004ca6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a66      	ldr	r2, [pc, #408]	; (8004818 <HAL_DMA_Init+0x1b8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d04a      	beq.n	8004718 <HAL_DMA_Init+0xb8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a65      	ldr	r2, [pc, #404]	; (800481c <HAL_DMA_Init+0x1bc>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d045      	beq.n	8004718 <HAL_DMA_Init+0xb8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a63      	ldr	r2, [pc, #396]	; (8004820 <HAL_DMA_Init+0x1c0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d040      	beq.n	8004718 <HAL_DMA_Init+0xb8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a62      	ldr	r2, [pc, #392]	; (8004824 <HAL_DMA_Init+0x1c4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d03b      	beq.n	8004718 <HAL_DMA_Init+0xb8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a60      	ldr	r2, [pc, #384]	; (8004828 <HAL_DMA_Init+0x1c8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d036      	beq.n	8004718 <HAL_DMA_Init+0xb8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a5f      	ldr	r2, [pc, #380]	; (800482c <HAL_DMA_Init+0x1cc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d031      	beq.n	8004718 <HAL_DMA_Init+0xb8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a5d      	ldr	r2, [pc, #372]	; (8004830 <HAL_DMA_Init+0x1d0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d02c      	beq.n	8004718 <HAL_DMA_Init+0xb8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a5c      	ldr	r2, [pc, #368]	; (8004834 <HAL_DMA_Init+0x1d4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d027      	beq.n	8004718 <HAL_DMA_Init+0xb8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a5a      	ldr	r2, [pc, #360]	; (8004838 <HAL_DMA_Init+0x1d8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d022      	beq.n	8004718 <HAL_DMA_Init+0xb8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a59      	ldr	r2, [pc, #356]	; (800483c <HAL_DMA_Init+0x1dc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d01d      	beq.n	8004718 <HAL_DMA_Init+0xb8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a57      	ldr	r2, [pc, #348]	; (8004840 <HAL_DMA_Init+0x1e0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d018      	beq.n	8004718 <HAL_DMA_Init+0xb8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a56      	ldr	r2, [pc, #344]	; (8004844 <HAL_DMA_Init+0x1e4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d013      	beq.n	8004718 <HAL_DMA_Init+0xb8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a54      	ldr	r2, [pc, #336]	; (8004848 <HAL_DMA_Init+0x1e8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00e      	beq.n	8004718 <HAL_DMA_Init+0xb8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a53      	ldr	r2, [pc, #332]	; (800484c <HAL_DMA_Init+0x1ec>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d009      	beq.n	8004718 <HAL_DMA_Init+0xb8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a51      	ldr	r2, [pc, #324]	; (8004850 <HAL_DMA_Init+0x1f0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d004      	beq.n	8004718 <HAL_DMA_Init+0xb8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a50      	ldr	r2, [pc, #320]	; (8004854 <HAL_DMA_Init+0x1f4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d101      	bne.n	800471c <HAL_DMA_Init+0xbc>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <HAL_DMA_Init+0xbe>
 800471c:	2300      	movs	r3, #0
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 813b 	beq.w	800499a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a37      	ldr	r2, [pc, #220]	; (8004818 <HAL_DMA_Init+0x1b8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d04a      	beq.n	80047d4 <HAL_DMA_Init+0x174>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a36      	ldr	r2, [pc, #216]	; (800481c <HAL_DMA_Init+0x1bc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d045      	beq.n	80047d4 <HAL_DMA_Init+0x174>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a34      	ldr	r2, [pc, #208]	; (8004820 <HAL_DMA_Init+0x1c0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d040      	beq.n	80047d4 <HAL_DMA_Init+0x174>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a33      	ldr	r2, [pc, #204]	; (8004824 <HAL_DMA_Init+0x1c4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d03b      	beq.n	80047d4 <HAL_DMA_Init+0x174>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a31      	ldr	r2, [pc, #196]	; (8004828 <HAL_DMA_Init+0x1c8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d036      	beq.n	80047d4 <HAL_DMA_Init+0x174>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a30      	ldr	r2, [pc, #192]	; (800482c <HAL_DMA_Init+0x1cc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d031      	beq.n	80047d4 <HAL_DMA_Init+0x174>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a2e      	ldr	r2, [pc, #184]	; (8004830 <HAL_DMA_Init+0x1d0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d02c      	beq.n	80047d4 <HAL_DMA_Init+0x174>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2d      	ldr	r2, [pc, #180]	; (8004834 <HAL_DMA_Init+0x1d4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d027      	beq.n	80047d4 <HAL_DMA_Init+0x174>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a2b      	ldr	r2, [pc, #172]	; (8004838 <HAL_DMA_Init+0x1d8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d022      	beq.n	80047d4 <HAL_DMA_Init+0x174>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a2a      	ldr	r2, [pc, #168]	; (800483c <HAL_DMA_Init+0x1dc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d01d      	beq.n	80047d4 <HAL_DMA_Init+0x174>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a28      	ldr	r2, [pc, #160]	; (8004840 <HAL_DMA_Init+0x1e0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d018      	beq.n	80047d4 <HAL_DMA_Init+0x174>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a27      	ldr	r2, [pc, #156]	; (8004844 <HAL_DMA_Init+0x1e4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d013      	beq.n	80047d4 <HAL_DMA_Init+0x174>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a25      	ldr	r2, [pc, #148]	; (8004848 <HAL_DMA_Init+0x1e8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00e      	beq.n	80047d4 <HAL_DMA_Init+0x174>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a24      	ldr	r2, [pc, #144]	; (800484c <HAL_DMA_Init+0x1ec>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d009      	beq.n	80047d4 <HAL_DMA_Init+0x174>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a22      	ldr	r2, [pc, #136]	; (8004850 <HAL_DMA_Init+0x1f0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d004      	beq.n	80047d4 <HAL_DMA_Init+0x174>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a21      	ldr	r2, [pc, #132]	; (8004854 <HAL_DMA_Init+0x1f4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d108      	bne.n	80047e6 <HAL_DMA_Init+0x186>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0201 	bic.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	e007      	b.n	80047f6 <HAL_DMA_Init+0x196>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047f6:	e02f      	b.n	8004858 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047f8:	f7ff fde6 	bl	80043c8 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b05      	cmp	r3, #5
 8004804:	d928      	bls.n	8004858 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2203      	movs	r2, #3
 8004810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e246      	b.n	8004ca6 <HAL_DMA_Init+0x646>
 8004818:	40020010 	.word	0x40020010
 800481c:	40020028 	.word	0x40020028
 8004820:	40020040 	.word	0x40020040
 8004824:	40020058 	.word	0x40020058
 8004828:	40020070 	.word	0x40020070
 800482c:	40020088 	.word	0x40020088
 8004830:	400200a0 	.word	0x400200a0
 8004834:	400200b8 	.word	0x400200b8
 8004838:	40020410 	.word	0x40020410
 800483c:	40020428 	.word	0x40020428
 8004840:	40020440 	.word	0x40020440
 8004844:	40020458 	.word	0x40020458
 8004848:	40020470 	.word	0x40020470
 800484c:	40020488 	.word	0x40020488
 8004850:	400204a0 	.word	0x400204a0
 8004854:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1c8      	bne.n	80047f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4b83      	ldr	r3, [pc, #524]	; (8004a80 <HAL_DMA_Init+0x420>)
 8004872:	4013      	ands	r3, r2
 8004874:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800487e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800488a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004896:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d107      	bne.n	80048bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	4313      	orrs	r3, r2
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80048bc:	4b71      	ldr	r3, [pc, #452]	; (8004a84 <HAL_DMA_Init+0x424>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b71      	ldr	r3, [pc, #452]	; (8004a88 <HAL_DMA_Init+0x428>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048c8:	d328      	bcc.n	800491c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b28      	cmp	r3, #40	; 0x28
 80048d0:	d903      	bls.n	80048da <HAL_DMA_Init+0x27a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b2e      	cmp	r3, #46	; 0x2e
 80048d8:	d917      	bls.n	800490a <HAL_DMA_Init+0x2aa>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b3e      	cmp	r3, #62	; 0x3e
 80048e0:	d903      	bls.n	80048ea <HAL_DMA_Init+0x28a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b42      	cmp	r3, #66	; 0x42
 80048e8:	d90f      	bls.n	800490a <HAL_DMA_Init+0x2aa>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b46      	cmp	r3, #70	; 0x46
 80048f0:	d903      	bls.n	80048fa <HAL_DMA_Init+0x29a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b48      	cmp	r3, #72	; 0x48
 80048f8:	d907      	bls.n	800490a <HAL_DMA_Init+0x2aa>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b4e      	cmp	r3, #78	; 0x4e
 8004900:	d905      	bls.n	800490e <HAL_DMA_Init+0x2ae>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b52      	cmp	r3, #82	; 0x52
 8004908:	d801      	bhi.n	800490e <HAL_DMA_Init+0x2ae>
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <HAL_DMA_Init+0x2b0>
 800490e:	2300      	movs	r3, #0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800491a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f023 0307 	bic.w	r3, r3, #7
 8004932:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	2b04      	cmp	r3, #4
 8004944:	d117      	bne.n	8004976 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00e      	beq.n	8004976 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f002 fb4b 	bl	8006ff4 <DMA_CheckFifoParam>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2240      	movs	r2, #64	; 0x40
 8004968:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e197      	b.n	8004ca6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f002 fa86 	bl	8006e90 <DMA_CalcBaseAndBitshift>
 8004984:	4603      	mov	r3, r0
 8004986:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498c:	f003 031f 	and.w	r3, r3, #31
 8004990:	223f      	movs	r2, #63	; 0x3f
 8004992:	409a      	lsls	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	609a      	str	r2, [r3, #8]
 8004998:	e0cd      	b.n	8004b36 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a3b      	ldr	r2, [pc, #236]	; (8004a8c <HAL_DMA_Init+0x42c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d022      	beq.n	80049ea <HAL_DMA_Init+0x38a>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a39      	ldr	r2, [pc, #228]	; (8004a90 <HAL_DMA_Init+0x430>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d01d      	beq.n	80049ea <HAL_DMA_Init+0x38a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a38      	ldr	r2, [pc, #224]	; (8004a94 <HAL_DMA_Init+0x434>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d018      	beq.n	80049ea <HAL_DMA_Init+0x38a>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a36      	ldr	r2, [pc, #216]	; (8004a98 <HAL_DMA_Init+0x438>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d013      	beq.n	80049ea <HAL_DMA_Init+0x38a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a35      	ldr	r2, [pc, #212]	; (8004a9c <HAL_DMA_Init+0x43c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00e      	beq.n	80049ea <HAL_DMA_Init+0x38a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a33      	ldr	r2, [pc, #204]	; (8004aa0 <HAL_DMA_Init+0x440>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d009      	beq.n	80049ea <HAL_DMA_Init+0x38a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a32      	ldr	r2, [pc, #200]	; (8004aa4 <HAL_DMA_Init+0x444>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d004      	beq.n	80049ea <HAL_DMA_Init+0x38a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a30      	ldr	r2, [pc, #192]	; (8004aa8 <HAL_DMA_Init+0x448>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d101      	bne.n	80049ee <HAL_DMA_Init+0x38e>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <HAL_DMA_Init+0x390>
 80049ee:	2300      	movs	r3, #0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8097 	beq.w	8004b24 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a24      	ldr	r2, [pc, #144]	; (8004a8c <HAL_DMA_Init+0x42c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d021      	beq.n	8004a44 <HAL_DMA_Init+0x3e4>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a22      	ldr	r2, [pc, #136]	; (8004a90 <HAL_DMA_Init+0x430>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d01c      	beq.n	8004a44 <HAL_DMA_Init+0x3e4>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a21      	ldr	r2, [pc, #132]	; (8004a94 <HAL_DMA_Init+0x434>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d017      	beq.n	8004a44 <HAL_DMA_Init+0x3e4>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1f      	ldr	r2, [pc, #124]	; (8004a98 <HAL_DMA_Init+0x438>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d012      	beq.n	8004a44 <HAL_DMA_Init+0x3e4>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1e      	ldr	r2, [pc, #120]	; (8004a9c <HAL_DMA_Init+0x43c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00d      	beq.n	8004a44 <HAL_DMA_Init+0x3e4>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1c      	ldr	r2, [pc, #112]	; (8004aa0 <HAL_DMA_Init+0x440>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d008      	beq.n	8004a44 <HAL_DMA_Init+0x3e4>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1b      	ldr	r2, [pc, #108]	; (8004aa4 <HAL_DMA_Init+0x444>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d003      	beq.n	8004a44 <HAL_DMA_Init+0x3e4>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a19      	ldr	r2, [pc, #100]	; (8004aa8 <HAL_DMA_Init+0x448>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4b12      	ldr	r3, [pc, #72]	; (8004aac <HAL_DMA_Init+0x44c>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	d020      	beq.n	8004ab0 <HAL_DMA_Init+0x450>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b80      	cmp	r3, #128	; 0x80
 8004a74:	d102      	bne.n	8004a7c <HAL_DMA_Init+0x41c>
 8004a76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a7a:	e01a      	b.n	8004ab2 <HAL_DMA_Init+0x452>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e018      	b.n	8004ab2 <HAL_DMA_Init+0x452>
 8004a80:	fe10803f 	.word	0xfe10803f
 8004a84:	5c001000 	.word	0x5c001000
 8004a88:	ffff0000 	.word	0xffff0000
 8004a8c:	58025408 	.word	0x58025408
 8004a90:	5802541c 	.word	0x5802541c
 8004a94:	58025430 	.word	0x58025430
 8004a98:	58025444 	.word	0x58025444
 8004a9c:	58025458 	.word	0x58025458
 8004aa0:	5802546c 	.word	0x5802546c
 8004aa4:	58025480 	.word	0x58025480
 8004aa8:	58025494 	.word	0x58025494
 8004aac:	fffe000f 	.word	0xfffe000f
 8004ab0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	68d2      	ldr	r2, [r2, #12]
 8004ab6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ab8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ac0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ac8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ad0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ad8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ae0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	4b6e      	ldr	r3, [pc, #440]	; (8004cb0 <HAL_DMA_Init+0x650>)
 8004af8:	4413      	add	r3, r2
 8004afa:	4a6e      	ldr	r2, [pc, #440]	; (8004cb4 <HAL_DMA_Init+0x654>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	009a      	lsls	r2, r3, #2
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f002 f9c1 	bl	8006e90 <DMA_CalcBaseAndBitshift>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b16:	f003 031f 	and.w	r3, r3, #31
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	409a      	lsls	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	e008      	b.n	8004b36 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2240      	movs	r2, #64	; 0x40
 8004b28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e0b7      	b.n	8004ca6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a5f      	ldr	r2, [pc, #380]	; (8004cb8 <HAL_DMA_Init+0x658>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d072      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a5d      	ldr	r2, [pc, #372]	; (8004cbc <HAL_DMA_Init+0x65c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d06d      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a5c      	ldr	r2, [pc, #368]	; (8004cc0 <HAL_DMA_Init+0x660>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d068      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a5a      	ldr	r2, [pc, #360]	; (8004cc4 <HAL_DMA_Init+0x664>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d063      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a59      	ldr	r2, [pc, #356]	; (8004cc8 <HAL_DMA_Init+0x668>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d05e      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a57      	ldr	r2, [pc, #348]	; (8004ccc <HAL_DMA_Init+0x66c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d059      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a56      	ldr	r2, [pc, #344]	; (8004cd0 <HAL_DMA_Init+0x670>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d054      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a54      	ldr	r2, [pc, #336]	; (8004cd4 <HAL_DMA_Init+0x674>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d04f      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a53      	ldr	r2, [pc, #332]	; (8004cd8 <HAL_DMA_Init+0x678>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d04a      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a51      	ldr	r2, [pc, #324]	; (8004cdc <HAL_DMA_Init+0x67c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d045      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a50      	ldr	r2, [pc, #320]	; (8004ce0 <HAL_DMA_Init+0x680>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d040      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a4e      	ldr	r2, [pc, #312]	; (8004ce4 <HAL_DMA_Init+0x684>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d03b      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a4d      	ldr	r2, [pc, #308]	; (8004ce8 <HAL_DMA_Init+0x688>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d036      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a4b      	ldr	r2, [pc, #300]	; (8004cec <HAL_DMA_Init+0x68c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d031      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a4a      	ldr	r2, [pc, #296]	; (8004cf0 <HAL_DMA_Init+0x690>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d02c      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a48      	ldr	r2, [pc, #288]	; (8004cf4 <HAL_DMA_Init+0x694>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d027      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a47      	ldr	r2, [pc, #284]	; (8004cf8 <HAL_DMA_Init+0x698>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d022      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a45      	ldr	r2, [pc, #276]	; (8004cfc <HAL_DMA_Init+0x69c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d01d      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a44      	ldr	r2, [pc, #272]	; (8004d00 <HAL_DMA_Init+0x6a0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d018      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a42      	ldr	r2, [pc, #264]	; (8004d04 <HAL_DMA_Init+0x6a4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d013      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a41      	ldr	r2, [pc, #260]	; (8004d08 <HAL_DMA_Init+0x6a8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a3f      	ldr	r2, [pc, #252]	; (8004d0c <HAL_DMA_Init+0x6ac>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d009      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a3e      	ldr	r2, [pc, #248]	; (8004d10 <HAL_DMA_Init+0x6b0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_DMA_Init+0x5c6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a3c      	ldr	r2, [pc, #240]	; (8004d14 <HAL_DMA_Init+0x6b4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d101      	bne.n	8004c2a <HAL_DMA_Init+0x5ca>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <HAL_DMA_Init+0x5cc>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d032      	beq.n	8004c96 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f002 fa5b 	bl	80070ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b80      	cmp	r3, #128	; 0x80
 8004c3c:	d102      	bne.n	8004c44 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c58:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d010      	beq.n	8004c84 <HAL_DMA_Init+0x624>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d80c      	bhi.n	8004c84 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f002 fad8 	bl	8007220 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c80:	605a      	str	r2, [r3, #4]
 8004c82:	e008      	b.n	8004c96 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	a7fdabf8 	.word	0xa7fdabf8
 8004cb4:	cccccccd 	.word	0xcccccccd
 8004cb8:	40020010 	.word	0x40020010
 8004cbc:	40020028 	.word	0x40020028
 8004cc0:	40020040 	.word	0x40020040
 8004cc4:	40020058 	.word	0x40020058
 8004cc8:	40020070 	.word	0x40020070
 8004ccc:	40020088 	.word	0x40020088
 8004cd0:	400200a0 	.word	0x400200a0
 8004cd4:	400200b8 	.word	0x400200b8
 8004cd8:	40020410 	.word	0x40020410
 8004cdc:	40020428 	.word	0x40020428
 8004ce0:	40020440 	.word	0x40020440
 8004ce4:	40020458 	.word	0x40020458
 8004ce8:	40020470 	.word	0x40020470
 8004cec:	40020488 	.word	0x40020488
 8004cf0:	400204a0 	.word	0x400204a0
 8004cf4:	400204b8 	.word	0x400204b8
 8004cf8:	58025408 	.word	0x58025408
 8004cfc:	5802541c 	.word	0x5802541c
 8004d00:	58025430 	.word	0x58025430
 8004d04:	58025444 	.word	0x58025444
 8004d08:	58025458 	.word	0x58025458
 8004d0c:	5802546c 	.word	0x5802546c
 8004d10:	58025480 	.word	0x58025480
 8004d14:	58025494 	.word	0x58025494

08004d18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e226      	b.n	8005182 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <HAL_DMA_Start_IT+0x2a>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e21f      	b.n	8005182 <HAL_DMA_Start_IT+0x46a>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	f040 820a 	bne.w	800516c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a68      	ldr	r2, [pc, #416]	; (8004f0c <HAL_DMA_Start_IT+0x1f4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d04a      	beq.n	8004e06 <HAL_DMA_Start_IT+0xee>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a66      	ldr	r2, [pc, #408]	; (8004f10 <HAL_DMA_Start_IT+0x1f8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d045      	beq.n	8004e06 <HAL_DMA_Start_IT+0xee>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a65      	ldr	r2, [pc, #404]	; (8004f14 <HAL_DMA_Start_IT+0x1fc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d040      	beq.n	8004e06 <HAL_DMA_Start_IT+0xee>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a63      	ldr	r2, [pc, #396]	; (8004f18 <HAL_DMA_Start_IT+0x200>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d03b      	beq.n	8004e06 <HAL_DMA_Start_IT+0xee>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a62      	ldr	r2, [pc, #392]	; (8004f1c <HAL_DMA_Start_IT+0x204>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d036      	beq.n	8004e06 <HAL_DMA_Start_IT+0xee>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a60      	ldr	r2, [pc, #384]	; (8004f20 <HAL_DMA_Start_IT+0x208>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d031      	beq.n	8004e06 <HAL_DMA_Start_IT+0xee>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a5f      	ldr	r2, [pc, #380]	; (8004f24 <HAL_DMA_Start_IT+0x20c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d02c      	beq.n	8004e06 <HAL_DMA_Start_IT+0xee>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a5d      	ldr	r2, [pc, #372]	; (8004f28 <HAL_DMA_Start_IT+0x210>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d027      	beq.n	8004e06 <HAL_DMA_Start_IT+0xee>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a5c      	ldr	r2, [pc, #368]	; (8004f2c <HAL_DMA_Start_IT+0x214>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d022      	beq.n	8004e06 <HAL_DMA_Start_IT+0xee>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a5a      	ldr	r2, [pc, #360]	; (8004f30 <HAL_DMA_Start_IT+0x218>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d01d      	beq.n	8004e06 <HAL_DMA_Start_IT+0xee>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a59      	ldr	r2, [pc, #356]	; (8004f34 <HAL_DMA_Start_IT+0x21c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d018      	beq.n	8004e06 <HAL_DMA_Start_IT+0xee>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a57      	ldr	r2, [pc, #348]	; (8004f38 <HAL_DMA_Start_IT+0x220>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d013      	beq.n	8004e06 <HAL_DMA_Start_IT+0xee>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a56      	ldr	r2, [pc, #344]	; (8004f3c <HAL_DMA_Start_IT+0x224>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00e      	beq.n	8004e06 <HAL_DMA_Start_IT+0xee>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a54      	ldr	r2, [pc, #336]	; (8004f40 <HAL_DMA_Start_IT+0x228>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d009      	beq.n	8004e06 <HAL_DMA_Start_IT+0xee>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a53      	ldr	r2, [pc, #332]	; (8004f44 <HAL_DMA_Start_IT+0x22c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d004      	beq.n	8004e06 <HAL_DMA_Start_IT+0xee>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a51      	ldr	r2, [pc, #324]	; (8004f48 <HAL_DMA_Start_IT+0x230>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d108      	bne.n	8004e18 <HAL_DMA_Start_IT+0x100>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0201 	bic.w	r2, r2, #1
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	e007      	b.n	8004e28 <HAL_DMA_Start_IT+0x110>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0201 	bic.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f001 fe82 	bl	8006b38 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a34      	ldr	r2, [pc, #208]	; (8004f0c <HAL_DMA_Start_IT+0x1f4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d04a      	beq.n	8004ed4 <HAL_DMA_Start_IT+0x1bc>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a33      	ldr	r2, [pc, #204]	; (8004f10 <HAL_DMA_Start_IT+0x1f8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d045      	beq.n	8004ed4 <HAL_DMA_Start_IT+0x1bc>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a31      	ldr	r2, [pc, #196]	; (8004f14 <HAL_DMA_Start_IT+0x1fc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d040      	beq.n	8004ed4 <HAL_DMA_Start_IT+0x1bc>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a30      	ldr	r2, [pc, #192]	; (8004f18 <HAL_DMA_Start_IT+0x200>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d03b      	beq.n	8004ed4 <HAL_DMA_Start_IT+0x1bc>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2e      	ldr	r2, [pc, #184]	; (8004f1c <HAL_DMA_Start_IT+0x204>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d036      	beq.n	8004ed4 <HAL_DMA_Start_IT+0x1bc>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a2d      	ldr	r2, [pc, #180]	; (8004f20 <HAL_DMA_Start_IT+0x208>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d031      	beq.n	8004ed4 <HAL_DMA_Start_IT+0x1bc>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a2b      	ldr	r2, [pc, #172]	; (8004f24 <HAL_DMA_Start_IT+0x20c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d02c      	beq.n	8004ed4 <HAL_DMA_Start_IT+0x1bc>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a2a      	ldr	r2, [pc, #168]	; (8004f28 <HAL_DMA_Start_IT+0x210>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d027      	beq.n	8004ed4 <HAL_DMA_Start_IT+0x1bc>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a28      	ldr	r2, [pc, #160]	; (8004f2c <HAL_DMA_Start_IT+0x214>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d022      	beq.n	8004ed4 <HAL_DMA_Start_IT+0x1bc>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a27      	ldr	r2, [pc, #156]	; (8004f30 <HAL_DMA_Start_IT+0x218>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d01d      	beq.n	8004ed4 <HAL_DMA_Start_IT+0x1bc>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a25      	ldr	r2, [pc, #148]	; (8004f34 <HAL_DMA_Start_IT+0x21c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d018      	beq.n	8004ed4 <HAL_DMA_Start_IT+0x1bc>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a24      	ldr	r2, [pc, #144]	; (8004f38 <HAL_DMA_Start_IT+0x220>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d013      	beq.n	8004ed4 <HAL_DMA_Start_IT+0x1bc>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a22      	ldr	r2, [pc, #136]	; (8004f3c <HAL_DMA_Start_IT+0x224>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00e      	beq.n	8004ed4 <HAL_DMA_Start_IT+0x1bc>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a21      	ldr	r2, [pc, #132]	; (8004f40 <HAL_DMA_Start_IT+0x228>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d009      	beq.n	8004ed4 <HAL_DMA_Start_IT+0x1bc>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1f      	ldr	r2, [pc, #124]	; (8004f44 <HAL_DMA_Start_IT+0x22c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d004      	beq.n	8004ed4 <HAL_DMA_Start_IT+0x1bc>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <HAL_DMA_Start_IT+0x230>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d101      	bne.n	8004ed8 <HAL_DMA_Start_IT+0x1c0>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <HAL_DMA_Start_IT+0x1c2>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d036      	beq.n	8004f4c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f023 021e 	bic.w	r2, r3, #30
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0216 	orr.w	r2, r2, #22
 8004ef0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d03e      	beq.n	8004f78 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0208 	orr.w	r2, r2, #8
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	e035      	b.n	8004f78 <HAL_DMA_Start_IT+0x260>
 8004f0c:	40020010 	.word	0x40020010
 8004f10:	40020028 	.word	0x40020028
 8004f14:	40020040 	.word	0x40020040
 8004f18:	40020058 	.word	0x40020058
 8004f1c:	40020070 	.word	0x40020070
 8004f20:	40020088 	.word	0x40020088
 8004f24:	400200a0 	.word	0x400200a0
 8004f28:	400200b8 	.word	0x400200b8
 8004f2c:	40020410 	.word	0x40020410
 8004f30:	40020428 	.word	0x40020428
 8004f34:	40020440 	.word	0x40020440
 8004f38:	40020458 	.word	0x40020458
 8004f3c:	40020470 	.word	0x40020470
 8004f40:	40020488 	.word	0x40020488
 8004f44:	400204a0 	.word	0x400204a0
 8004f48:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f023 020e 	bic.w	r2, r3, #14
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 020a 	orr.w	r2, r2, #10
 8004f5e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d007      	beq.n	8004f78 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0204 	orr.w	r2, r2, #4
 8004f76:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a83      	ldr	r2, [pc, #524]	; (800518c <HAL_DMA_Start_IT+0x474>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d072      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a82      	ldr	r2, [pc, #520]	; (8005190 <HAL_DMA_Start_IT+0x478>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d06d      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a80      	ldr	r2, [pc, #512]	; (8005194 <HAL_DMA_Start_IT+0x47c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d068      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a7f      	ldr	r2, [pc, #508]	; (8005198 <HAL_DMA_Start_IT+0x480>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d063      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a7d      	ldr	r2, [pc, #500]	; (800519c <HAL_DMA_Start_IT+0x484>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d05e      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a7c      	ldr	r2, [pc, #496]	; (80051a0 <HAL_DMA_Start_IT+0x488>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d059      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a7a      	ldr	r2, [pc, #488]	; (80051a4 <HAL_DMA_Start_IT+0x48c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d054      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a79      	ldr	r2, [pc, #484]	; (80051a8 <HAL_DMA_Start_IT+0x490>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d04f      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a77      	ldr	r2, [pc, #476]	; (80051ac <HAL_DMA_Start_IT+0x494>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d04a      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a76      	ldr	r2, [pc, #472]	; (80051b0 <HAL_DMA_Start_IT+0x498>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d045      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a74      	ldr	r2, [pc, #464]	; (80051b4 <HAL_DMA_Start_IT+0x49c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d040      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a73      	ldr	r2, [pc, #460]	; (80051b8 <HAL_DMA_Start_IT+0x4a0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d03b      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a71      	ldr	r2, [pc, #452]	; (80051bc <HAL_DMA_Start_IT+0x4a4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d036      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a70      	ldr	r2, [pc, #448]	; (80051c0 <HAL_DMA_Start_IT+0x4a8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d031      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a6e      	ldr	r2, [pc, #440]	; (80051c4 <HAL_DMA_Start_IT+0x4ac>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d02c      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a6d      	ldr	r2, [pc, #436]	; (80051c8 <HAL_DMA_Start_IT+0x4b0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d027      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a6b      	ldr	r2, [pc, #428]	; (80051cc <HAL_DMA_Start_IT+0x4b4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d022      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a6a      	ldr	r2, [pc, #424]	; (80051d0 <HAL_DMA_Start_IT+0x4b8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d01d      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a68      	ldr	r2, [pc, #416]	; (80051d4 <HAL_DMA_Start_IT+0x4bc>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d018      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a67      	ldr	r2, [pc, #412]	; (80051d8 <HAL_DMA_Start_IT+0x4c0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a65      	ldr	r2, [pc, #404]	; (80051dc <HAL_DMA_Start_IT+0x4c4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00e      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a64      	ldr	r2, [pc, #400]	; (80051e0 <HAL_DMA_Start_IT+0x4c8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d009      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a62      	ldr	r2, [pc, #392]	; (80051e4 <HAL_DMA_Start_IT+0x4cc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <HAL_DMA_Start_IT+0x350>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a61      	ldr	r2, [pc, #388]	; (80051e8 <HAL_DMA_Start_IT+0x4d0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d101      	bne.n	800506c <HAL_DMA_Start_IT+0x354>
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <HAL_DMA_Start_IT+0x356>
 800506c:	2300      	movs	r3, #0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d01a      	beq.n	80050a8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800508e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d007      	beq.n	80050a8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a37      	ldr	r2, [pc, #220]	; (800518c <HAL_DMA_Start_IT+0x474>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d04a      	beq.n	8005148 <HAL_DMA_Start_IT+0x430>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a36      	ldr	r2, [pc, #216]	; (8005190 <HAL_DMA_Start_IT+0x478>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d045      	beq.n	8005148 <HAL_DMA_Start_IT+0x430>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a34      	ldr	r2, [pc, #208]	; (8005194 <HAL_DMA_Start_IT+0x47c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d040      	beq.n	8005148 <HAL_DMA_Start_IT+0x430>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a33      	ldr	r2, [pc, #204]	; (8005198 <HAL_DMA_Start_IT+0x480>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d03b      	beq.n	8005148 <HAL_DMA_Start_IT+0x430>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a31      	ldr	r2, [pc, #196]	; (800519c <HAL_DMA_Start_IT+0x484>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d036      	beq.n	8005148 <HAL_DMA_Start_IT+0x430>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a30      	ldr	r2, [pc, #192]	; (80051a0 <HAL_DMA_Start_IT+0x488>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d031      	beq.n	8005148 <HAL_DMA_Start_IT+0x430>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a2e      	ldr	r2, [pc, #184]	; (80051a4 <HAL_DMA_Start_IT+0x48c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d02c      	beq.n	8005148 <HAL_DMA_Start_IT+0x430>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2d      	ldr	r2, [pc, #180]	; (80051a8 <HAL_DMA_Start_IT+0x490>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d027      	beq.n	8005148 <HAL_DMA_Start_IT+0x430>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a2b      	ldr	r2, [pc, #172]	; (80051ac <HAL_DMA_Start_IT+0x494>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d022      	beq.n	8005148 <HAL_DMA_Start_IT+0x430>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <HAL_DMA_Start_IT+0x498>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d01d      	beq.n	8005148 <HAL_DMA_Start_IT+0x430>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a28      	ldr	r2, [pc, #160]	; (80051b4 <HAL_DMA_Start_IT+0x49c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d018      	beq.n	8005148 <HAL_DMA_Start_IT+0x430>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a27      	ldr	r2, [pc, #156]	; (80051b8 <HAL_DMA_Start_IT+0x4a0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <HAL_DMA_Start_IT+0x430>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a25      	ldr	r2, [pc, #148]	; (80051bc <HAL_DMA_Start_IT+0x4a4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00e      	beq.n	8005148 <HAL_DMA_Start_IT+0x430>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a24      	ldr	r2, [pc, #144]	; (80051c0 <HAL_DMA_Start_IT+0x4a8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d009      	beq.n	8005148 <HAL_DMA_Start_IT+0x430>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a22      	ldr	r2, [pc, #136]	; (80051c4 <HAL_DMA_Start_IT+0x4ac>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_DMA_Start_IT+0x430>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a21      	ldr	r2, [pc, #132]	; (80051c8 <HAL_DMA_Start_IT+0x4b0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d108      	bne.n	800515a <HAL_DMA_Start_IT+0x442>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	e012      	b.n	8005180 <HAL_DMA_Start_IT+0x468>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0201 	orr.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	e009      	b.n	8005180 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800517a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005180:	7dfb      	ldrb	r3, [r7, #23]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40020010 	.word	0x40020010
 8005190:	40020028 	.word	0x40020028
 8005194:	40020040 	.word	0x40020040
 8005198:	40020058 	.word	0x40020058
 800519c:	40020070 	.word	0x40020070
 80051a0:	40020088 	.word	0x40020088
 80051a4:	400200a0 	.word	0x400200a0
 80051a8:	400200b8 	.word	0x400200b8
 80051ac:	40020410 	.word	0x40020410
 80051b0:	40020428 	.word	0x40020428
 80051b4:	40020440 	.word	0x40020440
 80051b8:	40020458 	.word	0x40020458
 80051bc:	40020470 	.word	0x40020470
 80051c0:	40020488 	.word	0x40020488
 80051c4:	400204a0 	.word	0x400204a0
 80051c8:	400204b8 	.word	0x400204b8
 80051cc:	58025408 	.word	0x58025408
 80051d0:	5802541c 	.word	0x5802541c
 80051d4:	58025430 	.word	0x58025430
 80051d8:	58025444 	.word	0x58025444
 80051dc:	58025458 	.word	0x58025458
 80051e0:	5802546c 	.word	0x5802546c
 80051e4:	58025480 	.word	0x58025480
 80051e8:	58025494 	.word	0x58025494

080051ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80051f4:	f7ff f8e8 	bl	80043c8 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e2dc      	b.n	80057be <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d008      	beq.n	8005222 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2280      	movs	r2, #128	; 0x80
 8005214:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e2cd      	b.n	80057be <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a76      	ldr	r2, [pc, #472]	; (8005400 <HAL_DMA_Abort+0x214>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d04a      	beq.n	80052c2 <HAL_DMA_Abort+0xd6>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a74      	ldr	r2, [pc, #464]	; (8005404 <HAL_DMA_Abort+0x218>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d045      	beq.n	80052c2 <HAL_DMA_Abort+0xd6>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a73      	ldr	r2, [pc, #460]	; (8005408 <HAL_DMA_Abort+0x21c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d040      	beq.n	80052c2 <HAL_DMA_Abort+0xd6>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a71      	ldr	r2, [pc, #452]	; (800540c <HAL_DMA_Abort+0x220>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d03b      	beq.n	80052c2 <HAL_DMA_Abort+0xd6>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a70      	ldr	r2, [pc, #448]	; (8005410 <HAL_DMA_Abort+0x224>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d036      	beq.n	80052c2 <HAL_DMA_Abort+0xd6>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a6e      	ldr	r2, [pc, #440]	; (8005414 <HAL_DMA_Abort+0x228>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d031      	beq.n	80052c2 <HAL_DMA_Abort+0xd6>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a6d      	ldr	r2, [pc, #436]	; (8005418 <HAL_DMA_Abort+0x22c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d02c      	beq.n	80052c2 <HAL_DMA_Abort+0xd6>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a6b      	ldr	r2, [pc, #428]	; (800541c <HAL_DMA_Abort+0x230>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d027      	beq.n	80052c2 <HAL_DMA_Abort+0xd6>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a6a      	ldr	r2, [pc, #424]	; (8005420 <HAL_DMA_Abort+0x234>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d022      	beq.n	80052c2 <HAL_DMA_Abort+0xd6>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a68      	ldr	r2, [pc, #416]	; (8005424 <HAL_DMA_Abort+0x238>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01d      	beq.n	80052c2 <HAL_DMA_Abort+0xd6>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a67      	ldr	r2, [pc, #412]	; (8005428 <HAL_DMA_Abort+0x23c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d018      	beq.n	80052c2 <HAL_DMA_Abort+0xd6>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a65      	ldr	r2, [pc, #404]	; (800542c <HAL_DMA_Abort+0x240>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <HAL_DMA_Abort+0xd6>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a64      	ldr	r2, [pc, #400]	; (8005430 <HAL_DMA_Abort+0x244>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00e      	beq.n	80052c2 <HAL_DMA_Abort+0xd6>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a62      	ldr	r2, [pc, #392]	; (8005434 <HAL_DMA_Abort+0x248>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d009      	beq.n	80052c2 <HAL_DMA_Abort+0xd6>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a61      	ldr	r2, [pc, #388]	; (8005438 <HAL_DMA_Abort+0x24c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d004      	beq.n	80052c2 <HAL_DMA_Abort+0xd6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a5f      	ldr	r2, [pc, #380]	; (800543c <HAL_DMA_Abort+0x250>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d101      	bne.n	80052c6 <HAL_DMA_Abort+0xda>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <HAL_DMA_Abort+0xdc>
 80052c6:	2300      	movs	r3, #0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d013      	beq.n	80052f4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 021e 	bic.w	r2, r2, #30
 80052da:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052ea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	e00a      	b.n	800530a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 020e 	bic.w	r2, r2, #14
 8005302:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a3c      	ldr	r2, [pc, #240]	; (8005400 <HAL_DMA_Abort+0x214>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d072      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a3a      	ldr	r2, [pc, #232]	; (8005404 <HAL_DMA_Abort+0x218>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d06d      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a39      	ldr	r2, [pc, #228]	; (8005408 <HAL_DMA_Abort+0x21c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d068      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a37      	ldr	r2, [pc, #220]	; (800540c <HAL_DMA_Abort+0x220>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d063      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a36      	ldr	r2, [pc, #216]	; (8005410 <HAL_DMA_Abort+0x224>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d05e      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a34      	ldr	r2, [pc, #208]	; (8005414 <HAL_DMA_Abort+0x228>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d059      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a33      	ldr	r2, [pc, #204]	; (8005418 <HAL_DMA_Abort+0x22c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d054      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a31      	ldr	r2, [pc, #196]	; (800541c <HAL_DMA_Abort+0x230>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d04f      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a30      	ldr	r2, [pc, #192]	; (8005420 <HAL_DMA_Abort+0x234>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d04a      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a2e      	ldr	r2, [pc, #184]	; (8005424 <HAL_DMA_Abort+0x238>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d045      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a2d      	ldr	r2, [pc, #180]	; (8005428 <HAL_DMA_Abort+0x23c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d040      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a2b      	ldr	r2, [pc, #172]	; (800542c <HAL_DMA_Abort+0x240>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d03b      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a2a      	ldr	r2, [pc, #168]	; (8005430 <HAL_DMA_Abort+0x244>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d036      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a28      	ldr	r2, [pc, #160]	; (8005434 <HAL_DMA_Abort+0x248>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d031      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a27      	ldr	r2, [pc, #156]	; (8005438 <HAL_DMA_Abort+0x24c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d02c      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a25      	ldr	r2, [pc, #148]	; (800543c <HAL_DMA_Abort+0x250>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d027      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a24      	ldr	r2, [pc, #144]	; (8005440 <HAL_DMA_Abort+0x254>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d022      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a22      	ldr	r2, [pc, #136]	; (8005444 <HAL_DMA_Abort+0x258>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01d      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a21      	ldr	r2, [pc, #132]	; (8005448 <HAL_DMA_Abort+0x25c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d018      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1f      	ldr	r2, [pc, #124]	; (800544c <HAL_DMA_Abort+0x260>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1e      	ldr	r2, [pc, #120]	; (8005450 <HAL_DMA_Abort+0x264>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1c      	ldr	r2, [pc, #112]	; (8005454 <HAL_DMA_Abort+0x268>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a1b      	ldr	r2, [pc, #108]	; (8005458 <HAL_DMA_Abort+0x26c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_DMA_Abort+0x20e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a19      	ldr	r2, [pc, #100]	; (800545c <HAL_DMA_Abort+0x270>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d132      	bne.n	8005460 <HAL_DMA_Abort+0x274>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e031      	b.n	8005462 <HAL_DMA_Abort+0x276>
 80053fe:	bf00      	nop
 8005400:	40020010 	.word	0x40020010
 8005404:	40020028 	.word	0x40020028
 8005408:	40020040 	.word	0x40020040
 800540c:	40020058 	.word	0x40020058
 8005410:	40020070 	.word	0x40020070
 8005414:	40020088 	.word	0x40020088
 8005418:	400200a0 	.word	0x400200a0
 800541c:	400200b8 	.word	0x400200b8
 8005420:	40020410 	.word	0x40020410
 8005424:	40020428 	.word	0x40020428
 8005428:	40020440 	.word	0x40020440
 800542c:	40020458 	.word	0x40020458
 8005430:	40020470 	.word	0x40020470
 8005434:	40020488 	.word	0x40020488
 8005438:	400204a0 	.word	0x400204a0
 800543c:	400204b8 	.word	0x400204b8
 8005440:	58025408 	.word	0x58025408
 8005444:	5802541c 	.word	0x5802541c
 8005448:	58025430 	.word	0x58025430
 800544c:	58025444 	.word	0x58025444
 8005450:	58025458 	.word	0x58025458
 8005454:	5802546c 	.word	0x5802546c
 8005458:	58025480 	.word	0x58025480
 800545c:	58025494 	.word	0x58025494
 8005460:	2300      	movs	r3, #0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005474:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a6d      	ldr	r2, [pc, #436]	; (8005630 <HAL_DMA_Abort+0x444>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d04a      	beq.n	8005516 <HAL_DMA_Abort+0x32a>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a6b      	ldr	r2, [pc, #428]	; (8005634 <HAL_DMA_Abort+0x448>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d045      	beq.n	8005516 <HAL_DMA_Abort+0x32a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a6a      	ldr	r2, [pc, #424]	; (8005638 <HAL_DMA_Abort+0x44c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d040      	beq.n	8005516 <HAL_DMA_Abort+0x32a>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a68      	ldr	r2, [pc, #416]	; (800563c <HAL_DMA_Abort+0x450>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d03b      	beq.n	8005516 <HAL_DMA_Abort+0x32a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a67      	ldr	r2, [pc, #412]	; (8005640 <HAL_DMA_Abort+0x454>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d036      	beq.n	8005516 <HAL_DMA_Abort+0x32a>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a65      	ldr	r2, [pc, #404]	; (8005644 <HAL_DMA_Abort+0x458>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d031      	beq.n	8005516 <HAL_DMA_Abort+0x32a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a64      	ldr	r2, [pc, #400]	; (8005648 <HAL_DMA_Abort+0x45c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d02c      	beq.n	8005516 <HAL_DMA_Abort+0x32a>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a62      	ldr	r2, [pc, #392]	; (800564c <HAL_DMA_Abort+0x460>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d027      	beq.n	8005516 <HAL_DMA_Abort+0x32a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a61      	ldr	r2, [pc, #388]	; (8005650 <HAL_DMA_Abort+0x464>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d022      	beq.n	8005516 <HAL_DMA_Abort+0x32a>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a5f      	ldr	r2, [pc, #380]	; (8005654 <HAL_DMA_Abort+0x468>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01d      	beq.n	8005516 <HAL_DMA_Abort+0x32a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a5e      	ldr	r2, [pc, #376]	; (8005658 <HAL_DMA_Abort+0x46c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d018      	beq.n	8005516 <HAL_DMA_Abort+0x32a>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a5c      	ldr	r2, [pc, #368]	; (800565c <HAL_DMA_Abort+0x470>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d013      	beq.n	8005516 <HAL_DMA_Abort+0x32a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a5b      	ldr	r2, [pc, #364]	; (8005660 <HAL_DMA_Abort+0x474>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00e      	beq.n	8005516 <HAL_DMA_Abort+0x32a>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a59      	ldr	r2, [pc, #356]	; (8005664 <HAL_DMA_Abort+0x478>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d009      	beq.n	8005516 <HAL_DMA_Abort+0x32a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a58      	ldr	r2, [pc, #352]	; (8005668 <HAL_DMA_Abort+0x47c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d004      	beq.n	8005516 <HAL_DMA_Abort+0x32a>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a56      	ldr	r2, [pc, #344]	; (800566c <HAL_DMA_Abort+0x480>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d108      	bne.n	8005528 <HAL_DMA_Abort+0x33c>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0201 	bic.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	e007      	b.n	8005538 <HAL_DMA_Abort+0x34c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0201 	bic.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005538:	e013      	b.n	8005562 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800553a:	f7fe ff45 	bl	80043c8 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b05      	cmp	r3, #5
 8005546:	d90c      	bls.n	8005562 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2203      	movs	r2, #3
 800555a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e12d      	b.n	80057be <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e5      	bne.n	800553a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a2f      	ldr	r2, [pc, #188]	; (8005630 <HAL_DMA_Abort+0x444>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d04a      	beq.n	800560e <HAL_DMA_Abort+0x422>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a2d      	ldr	r2, [pc, #180]	; (8005634 <HAL_DMA_Abort+0x448>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d045      	beq.n	800560e <HAL_DMA_Abort+0x422>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a2c      	ldr	r2, [pc, #176]	; (8005638 <HAL_DMA_Abort+0x44c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d040      	beq.n	800560e <HAL_DMA_Abort+0x422>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a2a      	ldr	r2, [pc, #168]	; (800563c <HAL_DMA_Abort+0x450>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d03b      	beq.n	800560e <HAL_DMA_Abort+0x422>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a29      	ldr	r2, [pc, #164]	; (8005640 <HAL_DMA_Abort+0x454>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d036      	beq.n	800560e <HAL_DMA_Abort+0x422>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a27      	ldr	r2, [pc, #156]	; (8005644 <HAL_DMA_Abort+0x458>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d031      	beq.n	800560e <HAL_DMA_Abort+0x422>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a26      	ldr	r2, [pc, #152]	; (8005648 <HAL_DMA_Abort+0x45c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d02c      	beq.n	800560e <HAL_DMA_Abort+0x422>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a24      	ldr	r2, [pc, #144]	; (800564c <HAL_DMA_Abort+0x460>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d027      	beq.n	800560e <HAL_DMA_Abort+0x422>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a23      	ldr	r2, [pc, #140]	; (8005650 <HAL_DMA_Abort+0x464>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d022      	beq.n	800560e <HAL_DMA_Abort+0x422>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a21      	ldr	r2, [pc, #132]	; (8005654 <HAL_DMA_Abort+0x468>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d01d      	beq.n	800560e <HAL_DMA_Abort+0x422>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a20      	ldr	r2, [pc, #128]	; (8005658 <HAL_DMA_Abort+0x46c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d018      	beq.n	800560e <HAL_DMA_Abort+0x422>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1e      	ldr	r2, [pc, #120]	; (800565c <HAL_DMA_Abort+0x470>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <HAL_DMA_Abort+0x422>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1d      	ldr	r2, [pc, #116]	; (8005660 <HAL_DMA_Abort+0x474>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00e      	beq.n	800560e <HAL_DMA_Abort+0x422>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1b      	ldr	r2, [pc, #108]	; (8005664 <HAL_DMA_Abort+0x478>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_DMA_Abort+0x422>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1a      	ldr	r2, [pc, #104]	; (8005668 <HAL_DMA_Abort+0x47c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d004      	beq.n	800560e <HAL_DMA_Abort+0x422>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a18      	ldr	r2, [pc, #96]	; (800566c <HAL_DMA_Abort+0x480>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d101      	bne.n	8005612 <HAL_DMA_Abort+0x426>
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <HAL_DMA_Abort+0x428>
 8005612:	2300      	movs	r3, #0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d02b      	beq.n	8005670 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005622:	f003 031f 	and.w	r3, r3, #31
 8005626:	223f      	movs	r2, #63	; 0x3f
 8005628:	409a      	lsls	r2, r3
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	609a      	str	r2, [r3, #8]
 800562e:	e02a      	b.n	8005686 <HAL_DMA_Abort+0x49a>
 8005630:	40020010 	.word	0x40020010
 8005634:	40020028 	.word	0x40020028
 8005638:	40020040 	.word	0x40020040
 800563c:	40020058 	.word	0x40020058
 8005640:	40020070 	.word	0x40020070
 8005644:	40020088 	.word	0x40020088
 8005648:	400200a0 	.word	0x400200a0
 800564c:	400200b8 	.word	0x400200b8
 8005650:	40020410 	.word	0x40020410
 8005654:	40020428 	.word	0x40020428
 8005658:	40020440 	.word	0x40020440
 800565c:	40020458 	.word	0x40020458
 8005660:	40020470 	.word	0x40020470
 8005664:	40020488 	.word	0x40020488
 8005668:	400204a0 	.word	0x400204a0
 800566c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005674:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800567a:	f003 031f 	and.w	r3, r3, #31
 800567e:	2201      	movs	r2, #1
 8005680:	409a      	lsls	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a4f      	ldr	r2, [pc, #316]	; (80057c8 <HAL_DMA_Abort+0x5dc>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d072      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a4d      	ldr	r2, [pc, #308]	; (80057cc <HAL_DMA_Abort+0x5e0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d06d      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a4c      	ldr	r2, [pc, #304]	; (80057d0 <HAL_DMA_Abort+0x5e4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d068      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a4a      	ldr	r2, [pc, #296]	; (80057d4 <HAL_DMA_Abort+0x5e8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d063      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a49      	ldr	r2, [pc, #292]	; (80057d8 <HAL_DMA_Abort+0x5ec>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d05e      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a47      	ldr	r2, [pc, #284]	; (80057dc <HAL_DMA_Abort+0x5f0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d059      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a46      	ldr	r2, [pc, #280]	; (80057e0 <HAL_DMA_Abort+0x5f4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d054      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a44      	ldr	r2, [pc, #272]	; (80057e4 <HAL_DMA_Abort+0x5f8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d04f      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a43      	ldr	r2, [pc, #268]	; (80057e8 <HAL_DMA_Abort+0x5fc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d04a      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a41      	ldr	r2, [pc, #260]	; (80057ec <HAL_DMA_Abort+0x600>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d045      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a40      	ldr	r2, [pc, #256]	; (80057f0 <HAL_DMA_Abort+0x604>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d040      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a3e      	ldr	r2, [pc, #248]	; (80057f4 <HAL_DMA_Abort+0x608>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d03b      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a3d      	ldr	r2, [pc, #244]	; (80057f8 <HAL_DMA_Abort+0x60c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d036      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a3b      	ldr	r2, [pc, #236]	; (80057fc <HAL_DMA_Abort+0x610>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d031      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a3a      	ldr	r2, [pc, #232]	; (8005800 <HAL_DMA_Abort+0x614>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d02c      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a38      	ldr	r2, [pc, #224]	; (8005804 <HAL_DMA_Abort+0x618>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d027      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a37      	ldr	r2, [pc, #220]	; (8005808 <HAL_DMA_Abort+0x61c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d022      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a35      	ldr	r2, [pc, #212]	; (800580c <HAL_DMA_Abort+0x620>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01d      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a34      	ldr	r2, [pc, #208]	; (8005810 <HAL_DMA_Abort+0x624>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d018      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a32      	ldr	r2, [pc, #200]	; (8005814 <HAL_DMA_Abort+0x628>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a31      	ldr	r2, [pc, #196]	; (8005818 <HAL_DMA_Abort+0x62c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00e      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a2f      	ldr	r2, [pc, #188]	; (800581c <HAL_DMA_Abort+0x630>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d009      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a2e      	ldr	r2, [pc, #184]	; (8005820 <HAL_DMA_Abort+0x634>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d004      	beq.n	8005776 <HAL_DMA_Abort+0x58a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a2c      	ldr	r2, [pc, #176]	; (8005824 <HAL_DMA_Abort+0x638>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d101      	bne.n	800577a <HAL_DMA_Abort+0x58e>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <HAL_DMA_Abort+0x590>
 800577a:	2300      	movs	r3, #0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d015      	beq.n	80057ac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005788:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00c      	beq.n	80057ac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800579c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057a0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057aa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	40020010 	.word	0x40020010
 80057cc:	40020028 	.word	0x40020028
 80057d0:	40020040 	.word	0x40020040
 80057d4:	40020058 	.word	0x40020058
 80057d8:	40020070 	.word	0x40020070
 80057dc:	40020088 	.word	0x40020088
 80057e0:	400200a0 	.word	0x400200a0
 80057e4:	400200b8 	.word	0x400200b8
 80057e8:	40020410 	.word	0x40020410
 80057ec:	40020428 	.word	0x40020428
 80057f0:	40020440 	.word	0x40020440
 80057f4:	40020458 	.word	0x40020458
 80057f8:	40020470 	.word	0x40020470
 80057fc:	40020488 	.word	0x40020488
 8005800:	400204a0 	.word	0x400204a0
 8005804:	400204b8 	.word	0x400204b8
 8005808:	58025408 	.word	0x58025408
 800580c:	5802541c 	.word	0x5802541c
 8005810:	58025430 	.word	0x58025430
 8005814:	58025444 	.word	0x58025444
 8005818:	58025458 	.word	0x58025458
 800581c:	5802546c 	.word	0x5802546c
 8005820:	58025480 	.word	0x58025480
 8005824:	58025494 	.word	0x58025494

08005828 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e205      	b.n	8005c46 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d004      	beq.n	8005850 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2280      	movs	r2, #128	; 0x80
 800584a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e1fa      	b.n	8005c46 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a8c      	ldr	r2, [pc, #560]	; (8005a88 <HAL_DMA_Abort_IT+0x260>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d04a      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc8>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a8b      	ldr	r2, [pc, #556]	; (8005a8c <HAL_DMA_Abort_IT+0x264>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d045      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc8>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a89      	ldr	r2, [pc, #548]	; (8005a90 <HAL_DMA_Abort_IT+0x268>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d040      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc8>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a88      	ldr	r2, [pc, #544]	; (8005a94 <HAL_DMA_Abort_IT+0x26c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d03b      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a86      	ldr	r2, [pc, #536]	; (8005a98 <HAL_DMA_Abort_IT+0x270>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d036      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc8>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a85      	ldr	r2, [pc, #532]	; (8005a9c <HAL_DMA_Abort_IT+0x274>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d031      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a83      	ldr	r2, [pc, #524]	; (8005aa0 <HAL_DMA_Abort_IT+0x278>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d02c      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc8>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a82      	ldr	r2, [pc, #520]	; (8005aa4 <HAL_DMA_Abort_IT+0x27c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d027      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a80      	ldr	r2, [pc, #512]	; (8005aa8 <HAL_DMA_Abort_IT+0x280>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d022      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc8>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a7f      	ldr	r2, [pc, #508]	; (8005aac <HAL_DMA_Abort_IT+0x284>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d01d      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a7d      	ldr	r2, [pc, #500]	; (8005ab0 <HAL_DMA_Abort_IT+0x288>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d018      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a7c      	ldr	r2, [pc, #496]	; (8005ab4 <HAL_DMA_Abort_IT+0x28c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d013      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a7a      	ldr	r2, [pc, #488]	; (8005ab8 <HAL_DMA_Abort_IT+0x290>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00e      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a79      	ldr	r2, [pc, #484]	; (8005abc <HAL_DMA_Abort_IT+0x294>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d009      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a77      	ldr	r2, [pc, #476]	; (8005ac0 <HAL_DMA_Abort_IT+0x298>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a76      	ldr	r2, [pc, #472]	; (8005ac4 <HAL_DMA_Abort_IT+0x29c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d101      	bne.n	80058f4 <HAL_DMA_Abort_IT+0xcc>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e000      	b.n	80058f6 <HAL_DMA_Abort_IT+0xce>
 80058f4:	2300      	movs	r3, #0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d065      	beq.n	80059c6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2204      	movs	r2, #4
 80058fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a60      	ldr	r2, [pc, #384]	; (8005a88 <HAL_DMA_Abort_IT+0x260>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d04a      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x17a>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a5e      	ldr	r2, [pc, #376]	; (8005a8c <HAL_DMA_Abort_IT+0x264>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d045      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x17a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a5d      	ldr	r2, [pc, #372]	; (8005a90 <HAL_DMA_Abort_IT+0x268>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d040      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x17a>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a5b      	ldr	r2, [pc, #364]	; (8005a94 <HAL_DMA_Abort_IT+0x26c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d03b      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x17a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a5a      	ldr	r2, [pc, #360]	; (8005a98 <HAL_DMA_Abort_IT+0x270>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d036      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x17a>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a58      	ldr	r2, [pc, #352]	; (8005a9c <HAL_DMA_Abort_IT+0x274>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d031      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x17a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a57      	ldr	r2, [pc, #348]	; (8005aa0 <HAL_DMA_Abort_IT+0x278>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d02c      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x17a>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a55      	ldr	r2, [pc, #340]	; (8005aa4 <HAL_DMA_Abort_IT+0x27c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d027      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x17a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a54      	ldr	r2, [pc, #336]	; (8005aa8 <HAL_DMA_Abort_IT+0x280>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d022      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x17a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a52      	ldr	r2, [pc, #328]	; (8005aac <HAL_DMA_Abort_IT+0x284>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d01d      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x17a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a51      	ldr	r2, [pc, #324]	; (8005ab0 <HAL_DMA_Abort_IT+0x288>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d018      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x17a>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a4f      	ldr	r2, [pc, #316]	; (8005ab4 <HAL_DMA_Abort_IT+0x28c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d013      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x17a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a4e      	ldr	r2, [pc, #312]	; (8005ab8 <HAL_DMA_Abort_IT+0x290>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00e      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x17a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a4c      	ldr	r2, [pc, #304]	; (8005abc <HAL_DMA_Abort_IT+0x294>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d009      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x17a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a4b      	ldr	r2, [pc, #300]	; (8005ac0 <HAL_DMA_Abort_IT+0x298>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d004      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x17a>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a49      	ldr	r2, [pc, #292]	; (8005ac4 <HAL_DMA_Abort_IT+0x29c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d108      	bne.n	80059b4 <HAL_DMA_Abort_IT+0x18c>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0201 	bic.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	e147      	b.n	8005c44 <HAL_DMA_Abort_IT+0x41c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0201 	bic.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	e13e      	b.n	8005c44 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 020e 	bic.w	r2, r2, #14
 80059d4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a2b      	ldr	r2, [pc, #172]	; (8005a88 <HAL_DMA_Abort_IT+0x260>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d04a      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x24e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a29      	ldr	r2, [pc, #164]	; (8005a8c <HAL_DMA_Abort_IT+0x264>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d045      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x24e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a28      	ldr	r2, [pc, #160]	; (8005a90 <HAL_DMA_Abort_IT+0x268>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d040      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x24e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a26      	ldr	r2, [pc, #152]	; (8005a94 <HAL_DMA_Abort_IT+0x26c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d03b      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x24e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a25      	ldr	r2, [pc, #148]	; (8005a98 <HAL_DMA_Abort_IT+0x270>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d036      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x24e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a23      	ldr	r2, [pc, #140]	; (8005a9c <HAL_DMA_Abort_IT+0x274>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d031      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x24e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a22      	ldr	r2, [pc, #136]	; (8005aa0 <HAL_DMA_Abort_IT+0x278>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d02c      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x24e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a20      	ldr	r2, [pc, #128]	; (8005aa4 <HAL_DMA_Abort_IT+0x27c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d027      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x24e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1f      	ldr	r2, [pc, #124]	; (8005aa8 <HAL_DMA_Abort_IT+0x280>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d022      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x24e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a1d      	ldr	r2, [pc, #116]	; (8005aac <HAL_DMA_Abort_IT+0x284>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01d      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x24e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1c      	ldr	r2, [pc, #112]	; (8005ab0 <HAL_DMA_Abort_IT+0x288>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d018      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x24e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a1a      	ldr	r2, [pc, #104]	; (8005ab4 <HAL_DMA_Abort_IT+0x28c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d013      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x24e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a19      	ldr	r2, [pc, #100]	; (8005ab8 <HAL_DMA_Abort_IT+0x290>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00e      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x24e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a17      	ldr	r2, [pc, #92]	; (8005abc <HAL_DMA_Abort_IT+0x294>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d009      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x24e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a16      	ldr	r2, [pc, #88]	; (8005ac0 <HAL_DMA_Abort_IT+0x298>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d004      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x24e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a14      	ldr	r2, [pc, #80]	; (8005ac4 <HAL_DMA_Abort_IT+0x29c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d128      	bne.n	8005ac8 <HAL_DMA_Abort_IT+0x2a0>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0201 	bic.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	e027      	b.n	8005ad8 <HAL_DMA_Abort_IT+0x2b0>
 8005a88:	40020010 	.word	0x40020010
 8005a8c:	40020028 	.word	0x40020028
 8005a90:	40020040 	.word	0x40020040
 8005a94:	40020058 	.word	0x40020058
 8005a98:	40020070 	.word	0x40020070
 8005a9c:	40020088 	.word	0x40020088
 8005aa0:	400200a0 	.word	0x400200a0
 8005aa4:	400200b8 	.word	0x400200b8
 8005aa8:	40020410 	.word	0x40020410
 8005aac:	40020428 	.word	0x40020428
 8005ab0:	40020440 	.word	0x40020440
 8005ab4:	40020458 	.word	0x40020458
 8005ab8:	40020470 	.word	0x40020470
 8005abc:	40020488 	.word	0x40020488
 8005ac0:	400204a0 	.word	0x400204a0
 8005ac4:	400204b8 	.word	0x400204b8
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0201 	bic.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a5c      	ldr	r2, [pc, #368]	; (8005c50 <HAL_DMA_Abort_IT+0x428>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d072      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a5b      	ldr	r2, [pc, #364]	; (8005c54 <HAL_DMA_Abort_IT+0x42c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d06d      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a59      	ldr	r2, [pc, #356]	; (8005c58 <HAL_DMA_Abort_IT+0x430>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d068      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a58      	ldr	r2, [pc, #352]	; (8005c5c <HAL_DMA_Abort_IT+0x434>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d063      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a56      	ldr	r2, [pc, #344]	; (8005c60 <HAL_DMA_Abort_IT+0x438>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d05e      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a55      	ldr	r2, [pc, #340]	; (8005c64 <HAL_DMA_Abort_IT+0x43c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d059      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a53      	ldr	r2, [pc, #332]	; (8005c68 <HAL_DMA_Abort_IT+0x440>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d054      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a52      	ldr	r2, [pc, #328]	; (8005c6c <HAL_DMA_Abort_IT+0x444>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d04f      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a50      	ldr	r2, [pc, #320]	; (8005c70 <HAL_DMA_Abort_IT+0x448>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d04a      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a4f      	ldr	r2, [pc, #316]	; (8005c74 <HAL_DMA_Abort_IT+0x44c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d045      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a4d      	ldr	r2, [pc, #308]	; (8005c78 <HAL_DMA_Abort_IT+0x450>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d040      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a4c      	ldr	r2, [pc, #304]	; (8005c7c <HAL_DMA_Abort_IT+0x454>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d03b      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a4a      	ldr	r2, [pc, #296]	; (8005c80 <HAL_DMA_Abort_IT+0x458>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d036      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a49      	ldr	r2, [pc, #292]	; (8005c84 <HAL_DMA_Abort_IT+0x45c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d031      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a47      	ldr	r2, [pc, #284]	; (8005c88 <HAL_DMA_Abort_IT+0x460>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d02c      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a46      	ldr	r2, [pc, #280]	; (8005c8c <HAL_DMA_Abort_IT+0x464>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d027      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a44      	ldr	r2, [pc, #272]	; (8005c90 <HAL_DMA_Abort_IT+0x468>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d022      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a43      	ldr	r2, [pc, #268]	; (8005c94 <HAL_DMA_Abort_IT+0x46c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d01d      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a41      	ldr	r2, [pc, #260]	; (8005c98 <HAL_DMA_Abort_IT+0x470>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d018      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a40      	ldr	r2, [pc, #256]	; (8005c9c <HAL_DMA_Abort_IT+0x474>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d013      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a3e      	ldr	r2, [pc, #248]	; (8005ca0 <HAL_DMA_Abort_IT+0x478>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00e      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a3d      	ldr	r2, [pc, #244]	; (8005ca4 <HAL_DMA_Abort_IT+0x47c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d009      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a3b      	ldr	r2, [pc, #236]	; (8005ca8 <HAL_DMA_Abort_IT+0x480>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d004      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0x3a0>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a3a      	ldr	r2, [pc, #232]	; (8005cac <HAL_DMA_Abort_IT+0x484>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d101      	bne.n	8005bcc <HAL_DMA_Abort_IT+0x3a4>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <HAL_DMA_Abort_IT+0x3a6>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d028      	beq.n	8005c24 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005be0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bec:	f003 031f 	and.w	r3, r3, #31
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	409a      	lsls	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c00:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00c      	beq.n	8005c24 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c18:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c22:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	40020010 	.word	0x40020010
 8005c54:	40020028 	.word	0x40020028
 8005c58:	40020040 	.word	0x40020040
 8005c5c:	40020058 	.word	0x40020058
 8005c60:	40020070 	.word	0x40020070
 8005c64:	40020088 	.word	0x40020088
 8005c68:	400200a0 	.word	0x400200a0
 8005c6c:	400200b8 	.word	0x400200b8
 8005c70:	40020410 	.word	0x40020410
 8005c74:	40020428 	.word	0x40020428
 8005c78:	40020440 	.word	0x40020440
 8005c7c:	40020458 	.word	0x40020458
 8005c80:	40020470 	.word	0x40020470
 8005c84:	40020488 	.word	0x40020488
 8005c88:	400204a0 	.word	0x400204a0
 8005c8c:	400204b8 	.word	0x400204b8
 8005c90:	58025408 	.word	0x58025408
 8005c94:	5802541c 	.word	0x5802541c
 8005c98:	58025430 	.word	0x58025430
 8005c9c:	58025444 	.word	0x58025444
 8005ca0:	58025458 	.word	0x58025458
 8005ca4:	5802546c 	.word	0x5802546c
 8005ca8:	58025480 	.word	0x58025480
 8005cac:	58025494 	.word	0x58025494

08005cb0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	; 0x28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005cbc:	4b67      	ldr	r3, [pc, #412]	; (8005e5c <HAL_DMA_IRQHandler+0x1ac>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a67      	ldr	r2, [pc, #412]	; (8005e60 <HAL_DMA_IRQHandler+0x1b0>)
 8005cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc6:	0a9b      	lsrs	r3, r3, #10
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a5f      	ldr	r2, [pc, #380]	; (8005e64 <HAL_DMA_IRQHandler+0x1b4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d04a      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xd2>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a5d      	ldr	r2, [pc, #372]	; (8005e68 <HAL_DMA_IRQHandler+0x1b8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d045      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xd2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a5c      	ldr	r2, [pc, #368]	; (8005e6c <HAL_DMA_IRQHandler+0x1bc>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d040      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xd2>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a5a      	ldr	r2, [pc, #360]	; (8005e70 <HAL_DMA_IRQHandler+0x1c0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d03b      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xd2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a59      	ldr	r2, [pc, #356]	; (8005e74 <HAL_DMA_IRQHandler+0x1c4>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d036      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xd2>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a57      	ldr	r2, [pc, #348]	; (8005e78 <HAL_DMA_IRQHandler+0x1c8>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d031      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xd2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a56      	ldr	r2, [pc, #344]	; (8005e7c <HAL_DMA_IRQHandler+0x1cc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d02c      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xd2>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a54      	ldr	r2, [pc, #336]	; (8005e80 <HAL_DMA_IRQHandler+0x1d0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d027      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xd2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a53      	ldr	r2, [pc, #332]	; (8005e84 <HAL_DMA_IRQHandler+0x1d4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d022      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xd2>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a51      	ldr	r2, [pc, #324]	; (8005e88 <HAL_DMA_IRQHandler+0x1d8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d01d      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xd2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a50      	ldr	r2, [pc, #320]	; (8005e8c <HAL_DMA_IRQHandler+0x1dc>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d018      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xd2>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a4e      	ldr	r2, [pc, #312]	; (8005e90 <HAL_DMA_IRQHandler+0x1e0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d013      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xd2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a4d      	ldr	r2, [pc, #308]	; (8005e94 <HAL_DMA_IRQHandler+0x1e4>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00e      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xd2>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a4b      	ldr	r2, [pc, #300]	; (8005e98 <HAL_DMA_IRQHandler+0x1e8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d009      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xd2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a4a      	ldr	r2, [pc, #296]	; (8005e9c <HAL_DMA_IRQHandler+0x1ec>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d004      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xd2>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a48      	ldr	r2, [pc, #288]	; (8005ea0 <HAL_DMA_IRQHandler+0x1f0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d101      	bne.n	8005d86 <HAL_DMA_IRQHandler+0xd6>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <HAL_DMA_IRQHandler+0xd8>
 8005d86:	2300      	movs	r3, #0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 842b 	beq.w	80065e4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	2208      	movs	r2, #8
 8005d98:	409a      	lsls	r2, r3
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 80a2 	beq.w	8005ee8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a2e      	ldr	r2, [pc, #184]	; (8005e64 <HAL_DMA_IRQHandler+0x1b4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d04a      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x194>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a2d      	ldr	r2, [pc, #180]	; (8005e68 <HAL_DMA_IRQHandler+0x1b8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d045      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x194>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a2b      	ldr	r2, [pc, #172]	; (8005e6c <HAL_DMA_IRQHandler+0x1bc>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d040      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x194>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a2a      	ldr	r2, [pc, #168]	; (8005e70 <HAL_DMA_IRQHandler+0x1c0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d03b      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x194>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a28      	ldr	r2, [pc, #160]	; (8005e74 <HAL_DMA_IRQHandler+0x1c4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d036      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x194>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a27      	ldr	r2, [pc, #156]	; (8005e78 <HAL_DMA_IRQHandler+0x1c8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d031      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x194>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a25      	ldr	r2, [pc, #148]	; (8005e7c <HAL_DMA_IRQHandler+0x1cc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d02c      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x194>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a24      	ldr	r2, [pc, #144]	; (8005e80 <HAL_DMA_IRQHandler+0x1d0>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d027      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x194>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a22      	ldr	r2, [pc, #136]	; (8005e84 <HAL_DMA_IRQHandler+0x1d4>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d022      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x194>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a21      	ldr	r2, [pc, #132]	; (8005e88 <HAL_DMA_IRQHandler+0x1d8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d01d      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x194>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1f      	ldr	r2, [pc, #124]	; (8005e8c <HAL_DMA_IRQHandler+0x1dc>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d018      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x194>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a1e      	ldr	r2, [pc, #120]	; (8005e90 <HAL_DMA_IRQHandler+0x1e0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d013      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x194>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1c      	ldr	r2, [pc, #112]	; (8005e94 <HAL_DMA_IRQHandler+0x1e4>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00e      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x194>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a1b      	ldr	r2, [pc, #108]	; (8005e98 <HAL_DMA_IRQHandler+0x1e8>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d009      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x194>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a19      	ldr	r2, [pc, #100]	; (8005e9c <HAL_DMA_IRQHandler+0x1ec>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d004      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x194>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a18      	ldr	r2, [pc, #96]	; (8005ea0 <HAL_DMA_IRQHandler+0x1f0>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d12f      	bne.n	8005ea4 <HAL_DMA_IRQHandler+0x1f4>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	bf14      	ite	ne
 8005e52:	2301      	movne	r3, #1
 8005e54:	2300      	moveq	r3, #0
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	e02e      	b.n	8005eb8 <HAL_DMA_IRQHandler+0x208>
 8005e5a:	bf00      	nop
 8005e5c:	24000014 	.word	0x24000014
 8005e60:	1b4e81b5 	.word	0x1b4e81b5
 8005e64:	40020010 	.word	0x40020010
 8005e68:	40020028 	.word	0x40020028
 8005e6c:	40020040 	.word	0x40020040
 8005e70:	40020058 	.word	0x40020058
 8005e74:	40020070 	.word	0x40020070
 8005e78:	40020088 	.word	0x40020088
 8005e7c:	400200a0 	.word	0x400200a0
 8005e80:	400200b8 	.word	0x400200b8
 8005e84:	40020410 	.word	0x40020410
 8005e88:	40020428 	.word	0x40020428
 8005e8c:	40020440 	.word	0x40020440
 8005e90:	40020458 	.word	0x40020458
 8005e94:	40020470 	.word	0x40020470
 8005e98:	40020488 	.word	0x40020488
 8005e9c:	400204a0 	.word	0x400204a0
 8005ea0:	400204b8 	.word	0x400204b8
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	bf14      	ite	ne
 8005eb2:	2301      	movne	r3, #1
 8005eb4:	2300      	moveq	r3, #0
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d015      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0204 	bic.w	r2, r2, #4
 8005eca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	2208      	movs	r2, #8
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee0:	f043 0201 	orr.w	r2, r3, #1
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eec:	f003 031f 	and.w	r3, r3, #31
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d06e      	beq.n	8005fdc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a69      	ldr	r2, [pc, #420]	; (80060a8 <HAL_DMA_IRQHandler+0x3f8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d04a      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x2ee>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a67      	ldr	r2, [pc, #412]	; (80060ac <HAL_DMA_IRQHandler+0x3fc>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d045      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x2ee>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a66      	ldr	r2, [pc, #408]	; (80060b0 <HAL_DMA_IRQHandler+0x400>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d040      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x2ee>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a64      	ldr	r2, [pc, #400]	; (80060b4 <HAL_DMA_IRQHandler+0x404>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d03b      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x2ee>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a63      	ldr	r2, [pc, #396]	; (80060b8 <HAL_DMA_IRQHandler+0x408>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d036      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x2ee>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a61      	ldr	r2, [pc, #388]	; (80060bc <HAL_DMA_IRQHandler+0x40c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d031      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x2ee>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a60      	ldr	r2, [pc, #384]	; (80060c0 <HAL_DMA_IRQHandler+0x410>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d02c      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x2ee>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a5e      	ldr	r2, [pc, #376]	; (80060c4 <HAL_DMA_IRQHandler+0x414>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d027      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x2ee>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a5d      	ldr	r2, [pc, #372]	; (80060c8 <HAL_DMA_IRQHandler+0x418>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d022      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x2ee>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a5b      	ldr	r2, [pc, #364]	; (80060cc <HAL_DMA_IRQHandler+0x41c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d01d      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x2ee>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a5a      	ldr	r2, [pc, #360]	; (80060d0 <HAL_DMA_IRQHandler+0x420>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d018      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x2ee>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a58      	ldr	r2, [pc, #352]	; (80060d4 <HAL_DMA_IRQHandler+0x424>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d013      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x2ee>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a57      	ldr	r2, [pc, #348]	; (80060d8 <HAL_DMA_IRQHandler+0x428>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00e      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x2ee>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a55      	ldr	r2, [pc, #340]	; (80060dc <HAL_DMA_IRQHandler+0x42c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d009      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x2ee>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a54      	ldr	r2, [pc, #336]	; (80060e0 <HAL_DMA_IRQHandler+0x430>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d004      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x2ee>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a52      	ldr	r2, [pc, #328]	; (80060e4 <HAL_DMA_IRQHandler+0x434>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d10a      	bne.n	8005fb4 <HAL_DMA_IRQHandler+0x304>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	bf14      	ite	ne
 8005fac:	2301      	movne	r3, #1
 8005fae:	2300      	moveq	r3, #0
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	e003      	b.n	8005fbc <HAL_DMA_IRQHandler+0x30c>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00d      	beq.n	8005fdc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc4:	f003 031f 	and.w	r3, r3, #31
 8005fc8:	2201      	movs	r2, #1
 8005fca:	409a      	lsls	r2, r3
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd4:	f043 0202 	orr.w	r2, r3, #2
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe0:	f003 031f 	and.w	r3, r3, #31
 8005fe4:	2204      	movs	r2, #4
 8005fe6:	409a      	lsls	r2, r3
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	4013      	ands	r3, r2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 808f 	beq.w	8006110 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a2c      	ldr	r2, [pc, #176]	; (80060a8 <HAL_DMA_IRQHandler+0x3f8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d04a      	beq.n	8006092 <HAL_DMA_IRQHandler+0x3e2>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a2a      	ldr	r2, [pc, #168]	; (80060ac <HAL_DMA_IRQHandler+0x3fc>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d045      	beq.n	8006092 <HAL_DMA_IRQHandler+0x3e2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a29      	ldr	r2, [pc, #164]	; (80060b0 <HAL_DMA_IRQHandler+0x400>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d040      	beq.n	8006092 <HAL_DMA_IRQHandler+0x3e2>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a27      	ldr	r2, [pc, #156]	; (80060b4 <HAL_DMA_IRQHandler+0x404>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d03b      	beq.n	8006092 <HAL_DMA_IRQHandler+0x3e2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a26      	ldr	r2, [pc, #152]	; (80060b8 <HAL_DMA_IRQHandler+0x408>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d036      	beq.n	8006092 <HAL_DMA_IRQHandler+0x3e2>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a24      	ldr	r2, [pc, #144]	; (80060bc <HAL_DMA_IRQHandler+0x40c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d031      	beq.n	8006092 <HAL_DMA_IRQHandler+0x3e2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a23      	ldr	r2, [pc, #140]	; (80060c0 <HAL_DMA_IRQHandler+0x410>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d02c      	beq.n	8006092 <HAL_DMA_IRQHandler+0x3e2>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a21      	ldr	r2, [pc, #132]	; (80060c4 <HAL_DMA_IRQHandler+0x414>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d027      	beq.n	8006092 <HAL_DMA_IRQHandler+0x3e2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a20      	ldr	r2, [pc, #128]	; (80060c8 <HAL_DMA_IRQHandler+0x418>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d022      	beq.n	8006092 <HAL_DMA_IRQHandler+0x3e2>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1e      	ldr	r2, [pc, #120]	; (80060cc <HAL_DMA_IRQHandler+0x41c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d01d      	beq.n	8006092 <HAL_DMA_IRQHandler+0x3e2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a1d      	ldr	r2, [pc, #116]	; (80060d0 <HAL_DMA_IRQHandler+0x420>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d018      	beq.n	8006092 <HAL_DMA_IRQHandler+0x3e2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1b      	ldr	r2, [pc, #108]	; (80060d4 <HAL_DMA_IRQHandler+0x424>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d013      	beq.n	8006092 <HAL_DMA_IRQHandler+0x3e2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1a      	ldr	r2, [pc, #104]	; (80060d8 <HAL_DMA_IRQHandler+0x428>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00e      	beq.n	8006092 <HAL_DMA_IRQHandler+0x3e2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a18      	ldr	r2, [pc, #96]	; (80060dc <HAL_DMA_IRQHandler+0x42c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d009      	beq.n	8006092 <HAL_DMA_IRQHandler+0x3e2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a17      	ldr	r2, [pc, #92]	; (80060e0 <HAL_DMA_IRQHandler+0x430>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d004      	beq.n	8006092 <HAL_DMA_IRQHandler+0x3e2>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a15      	ldr	r2, [pc, #84]	; (80060e4 <HAL_DMA_IRQHandler+0x434>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d12a      	bne.n	80060e8 <HAL_DMA_IRQHandler+0x438>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	bf14      	ite	ne
 80060a0:	2301      	movne	r3, #1
 80060a2:	2300      	moveq	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	e023      	b.n	80060f0 <HAL_DMA_IRQHandler+0x440>
 80060a8:	40020010 	.word	0x40020010
 80060ac:	40020028 	.word	0x40020028
 80060b0:	40020040 	.word	0x40020040
 80060b4:	40020058 	.word	0x40020058
 80060b8:	40020070 	.word	0x40020070
 80060bc:	40020088 	.word	0x40020088
 80060c0:	400200a0 	.word	0x400200a0
 80060c4:	400200b8 	.word	0x400200b8
 80060c8:	40020410 	.word	0x40020410
 80060cc:	40020428 	.word	0x40020428
 80060d0:	40020440 	.word	0x40020440
 80060d4:	40020458 	.word	0x40020458
 80060d8:	40020470 	.word	0x40020470
 80060dc:	40020488 	.word	0x40020488
 80060e0:	400204a0 	.word	0x400204a0
 80060e4:	400204b8 	.word	0x400204b8
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00d      	beq.n	8006110 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f8:	f003 031f 	and.w	r3, r3, #31
 80060fc:	2204      	movs	r2, #4
 80060fe:	409a      	lsls	r2, r3
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006108:	f043 0204 	orr.w	r2, r3, #4
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	2210      	movs	r2, #16
 800611a:	409a      	lsls	r2, r3
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	4013      	ands	r3, r2
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 80a6 	beq.w	8006272 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a85      	ldr	r2, [pc, #532]	; (8006340 <HAL_DMA_IRQHandler+0x690>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d04a      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x516>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a83      	ldr	r2, [pc, #524]	; (8006344 <HAL_DMA_IRQHandler+0x694>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d045      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x516>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a82      	ldr	r2, [pc, #520]	; (8006348 <HAL_DMA_IRQHandler+0x698>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d040      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x516>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a80      	ldr	r2, [pc, #512]	; (800634c <HAL_DMA_IRQHandler+0x69c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d03b      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x516>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a7f      	ldr	r2, [pc, #508]	; (8006350 <HAL_DMA_IRQHandler+0x6a0>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d036      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x516>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a7d      	ldr	r2, [pc, #500]	; (8006354 <HAL_DMA_IRQHandler+0x6a4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d031      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x516>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a7c      	ldr	r2, [pc, #496]	; (8006358 <HAL_DMA_IRQHandler+0x6a8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d02c      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x516>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a7a      	ldr	r2, [pc, #488]	; (800635c <HAL_DMA_IRQHandler+0x6ac>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d027      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x516>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a79      	ldr	r2, [pc, #484]	; (8006360 <HAL_DMA_IRQHandler+0x6b0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d022      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x516>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a77      	ldr	r2, [pc, #476]	; (8006364 <HAL_DMA_IRQHandler+0x6b4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d01d      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x516>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a76      	ldr	r2, [pc, #472]	; (8006368 <HAL_DMA_IRQHandler+0x6b8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d018      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x516>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a74      	ldr	r2, [pc, #464]	; (800636c <HAL_DMA_IRQHandler+0x6bc>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d013      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x516>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a73      	ldr	r2, [pc, #460]	; (8006370 <HAL_DMA_IRQHandler+0x6c0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00e      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x516>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a71      	ldr	r2, [pc, #452]	; (8006374 <HAL_DMA_IRQHandler+0x6c4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d009      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x516>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a70      	ldr	r2, [pc, #448]	; (8006378 <HAL_DMA_IRQHandler+0x6c8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d004      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x516>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a6e      	ldr	r2, [pc, #440]	; (800637c <HAL_DMA_IRQHandler+0x6cc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d10a      	bne.n	80061dc <HAL_DMA_IRQHandler+0x52c>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	bf14      	ite	ne
 80061d4:	2301      	movne	r3, #1
 80061d6:	2300      	moveq	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	e009      	b.n	80061f0 <HAL_DMA_IRQHandler+0x540>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0304 	and.w	r3, r3, #4
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	bf14      	ite	ne
 80061ea:	2301      	movne	r3, #1
 80061ec:	2300      	moveq	r3, #0
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d03e      	beq.n	8006272 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f8:	f003 031f 	and.w	r3, r3, #31
 80061fc:	2210      	movs	r2, #16
 80061fe:	409a      	lsls	r2, r3
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d018      	beq.n	8006244 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d108      	bne.n	8006232 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006224:	2b00      	cmp	r3, #0
 8006226:	d024      	beq.n	8006272 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	4798      	blx	r3
 8006230:	e01f      	b.n	8006272 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01b      	beq.n	8006272 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	4798      	blx	r3
 8006242:	e016      	b.n	8006272 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624e:	2b00      	cmp	r3, #0
 8006250:	d107      	bne.n	8006262 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0208 	bic.w	r2, r2, #8
 8006260:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006276:	f003 031f 	and.w	r3, r3, #31
 800627a:	2220      	movs	r2, #32
 800627c:	409a      	lsls	r2, r3
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	4013      	ands	r3, r2
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 8110 	beq.w	80064a8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a2c      	ldr	r2, [pc, #176]	; (8006340 <HAL_DMA_IRQHandler+0x690>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d04a      	beq.n	8006328 <HAL_DMA_IRQHandler+0x678>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a2b      	ldr	r2, [pc, #172]	; (8006344 <HAL_DMA_IRQHandler+0x694>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d045      	beq.n	8006328 <HAL_DMA_IRQHandler+0x678>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a29      	ldr	r2, [pc, #164]	; (8006348 <HAL_DMA_IRQHandler+0x698>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d040      	beq.n	8006328 <HAL_DMA_IRQHandler+0x678>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a28      	ldr	r2, [pc, #160]	; (800634c <HAL_DMA_IRQHandler+0x69c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d03b      	beq.n	8006328 <HAL_DMA_IRQHandler+0x678>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a26      	ldr	r2, [pc, #152]	; (8006350 <HAL_DMA_IRQHandler+0x6a0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d036      	beq.n	8006328 <HAL_DMA_IRQHandler+0x678>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a25      	ldr	r2, [pc, #148]	; (8006354 <HAL_DMA_IRQHandler+0x6a4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d031      	beq.n	8006328 <HAL_DMA_IRQHandler+0x678>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a23      	ldr	r2, [pc, #140]	; (8006358 <HAL_DMA_IRQHandler+0x6a8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d02c      	beq.n	8006328 <HAL_DMA_IRQHandler+0x678>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a22      	ldr	r2, [pc, #136]	; (800635c <HAL_DMA_IRQHandler+0x6ac>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d027      	beq.n	8006328 <HAL_DMA_IRQHandler+0x678>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a20      	ldr	r2, [pc, #128]	; (8006360 <HAL_DMA_IRQHandler+0x6b0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d022      	beq.n	8006328 <HAL_DMA_IRQHandler+0x678>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1f      	ldr	r2, [pc, #124]	; (8006364 <HAL_DMA_IRQHandler+0x6b4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d01d      	beq.n	8006328 <HAL_DMA_IRQHandler+0x678>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1d      	ldr	r2, [pc, #116]	; (8006368 <HAL_DMA_IRQHandler+0x6b8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d018      	beq.n	8006328 <HAL_DMA_IRQHandler+0x678>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a1c      	ldr	r2, [pc, #112]	; (800636c <HAL_DMA_IRQHandler+0x6bc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d013      	beq.n	8006328 <HAL_DMA_IRQHandler+0x678>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a1a      	ldr	r2, [pc, #104]	; (8006370 <HAL_DMA_IRQHandler+0x6c0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00e      	beq.n	8006328 <HAL_DMA_IRQHandler+0x678>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a19      	ldr	r2, [pc, #100]	; (8006374 <HAL_DMA_IRQHandler+0x6c4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d009      	beq.n	8006328 <HAL_DMA_IRQHandler+0x678>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a17      	ldr	r2, [pc, #92]	; (8006378 <HAL_DMA_IRQHandler+0x6c8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d004      	beq.n	8006328 <HAL_DMA_IRQHandler+0x678>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a16      	ldr	r2, [pc, #88]	; (800637c <HAL_DMA_IRQHandler+0x6cc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d12b      	bne.n	8006380 <HAL_DMA_IRQHandler+0x6d0>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	2b00      	cmp	r3, #0
 8006334:	bf14      	ite	ne
 8006336:	2301      	movne	r3, #1
 8006338:	2300      	moveq	r3, #0
 800633a:	b2db      	uxtb	r3, r3
 800633c:	e02a      	b.n	8006394 <HAL_DMA_IRQHandler+0x6e4>
 800633e:	bf00      	nop
 8006340:	40020010 	.word	0x40020010
 8006344:	40020028 	.word	0x40020028
 8006348:	40020040 	.word	0x40020040
 800634c:	40020058 	.word	0x40020058
 8006350:	40020070 	.word	0x40020070
 8006354:	40020088 	.word	0x40020088
 8006358:	400200a0 	.word	0x400200a0
 800635c:	400200b8 	.word	0x400200b8
 8006360:	40020410 	.word	0x40020410
 8006364:	40020428 	.word	0x40020428
 8006368:	40020440 	.word	0x40020440
 800636c:	40020458 	.word	0x40020458
 8006370:	40020470 	.word	0x40020470
 8006374:	40020488 	.word	0x40020488
 8006378:	400204a0 	.word	0x400204a0
 800637c:	400204b8 	.word	0x400204b8
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	bf14      	ite	ne
 800638e:	2301      	movne	r3, #1
 8006390:	2300      	moveq	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8087 	beq.w	80064a8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800639e:	f003 031f 	and.w	r3, r3, #31
 80063a2:	2220      	movs	r2, #32
 80063a4:	409a      	lsls	r2, r3
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d139      	bne.n	800642a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0216 	bic.w	r2, r2, #22
 80063c4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	695a      	ldr	r2, [r3, #20]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063d4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d103      	bne.n	80063e6 <HAL_DMA_IRQHandler+0x736>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d007      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0208 	bic.w	r2, r2, #8
 80063f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	223f      	movs	r2, #63	; 0x3f
 8006400:	409a      	lsls	r2, r3
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 834a 	beq.w	8006ab4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	4798      	blx	r3
          }
          return;
 8006428:	e344      	b.n	8006ab4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d018      	beq.n	800646a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d108      	bne.n	8006458 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644a:	2b00      	cmp	r3, #0
 800644c:	d02c      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	4798      	blx	r3
 8006456:	e027      	b.n	80064a8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645c:	2b00      	cmp	r3, #0
 800645e:	d023      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	4798      	blx	r3
 8006468:	e01e      	b.n	80064a8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10f      	bne.n	8006498 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0210 	bic.w	r2, r2, #16
 8006486:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649c:	2b00      	cmp	r3, #0
 800649e:	d003      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8306 	beq.w	8006abe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 8088 	beq.w	80065d0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2204      	movs	r2, #4
 80064c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a7a      	ldr	r2, [pc, #488]	; (80066b8 <HAL_DMA_IRQHandler+0xa08>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d04a      	beq.n	8006568 <HAL_DMA_IRQHandler+0x8b8>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a79      	ldr	r2, [pc, #484]	; (80066bc <HAL_DMA_IRQHandler+0xa0c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d045      	beq.n	8006568 <HAL_DMA_IRQHandler+0x8b8>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a77      	ldr	r2, [pc, #476]	; (80066c0 <HAL_DMA_IRQHandler+0xa10>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d040      	beq.n	8006568 <HAL_DMA_IRQHandler+0x8b8>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a76      	ldr	r2, [pc, #472]	; (80066c4 <HAL_DMA_IRQHandler+0xa14>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d03b      	beq.n	8006568 <HAL_DMA_IRQHandler+0x8b8>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a74      	ldr	r2, [pc, #464]	; (80066c8 <HAL_DMA_IRQHandler+0xa18>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d036      	beq.n	8006568 <HAL_DMA_IRQHandler+0x8b8>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a73      	ldr	r2, [pc, #460]	; (80066cc <HAL_DMA_IRQHandler+0xa1c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d031      	beq.n	8006568 <HAL_DMA_IRQHandler+0x8b8>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a71      	ldr	r2, [pc, #452]	; (80066d0 <HAL_DMA_IRQHandler+0xa20>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d02c      	beq.n	8006568 <HAL_DMA_IRQHandler+0x8b8>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a70      	ldr	r2, [pc, #448]	; (80066d4 <HAL_DMA_IRQHandler+0xa24>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d027      	beq.n	8006568 <HAL_DMA_IRQHandler+0x8b8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a6e      	ldr	r2, [pc, #440]	; (80066d8 <HAL_DMA_IRQHandler+0xa28>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d022      	beq.n	8006568 <HAL_DMA_IRQHandler+0x8b8>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a6d      	ldr	r2, [pc, #436]	; (80066dc <HAL_DMA_IRQHandler+0xa2c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d01d      	beq.n	8006568 <HAL_DMA_IRQHandler+0x8b8>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a6b      	ldr	r2, [pc, #428]	; (80066e0 <HAL_DMA_IRQHandler+0xa30>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d018      	beq.n	8006568 <HAL_DMA_IRQHandler+0x8b8>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a6a      	ldr	r2, [pc, #424]	; (80066e4 <HAL_DMA_IRQHandler+0xa34>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d013      	beq.n	8006568 <HAL_DMA_IRQHandler+0x8b8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a68      	ldr	r2, [pc, #416]	; (80066e8 <HAL_DMA_IRQHandler+0xa38>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00e      	beq.n	8006568 <HAL_DMA_IRQHandler+0x8b8>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a67      	ldr	r2, [pc, #412]	; (80066ec <HAL_DMA_IRQHandler+0xa3c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d009      	beq.n	8006568 <HAL_DMA_IRQHandler+0x8b8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a65      	ldr	r2, [pc, #404]	; (80066f0 <HAL_DMA_IRQHandler+0xa40>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d004      	beq.n	8006568 <HAL_DMA_IRQHandler+0x8b8>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a64      	ldr	r2, [pc, #400]	; (80066f4 <HAL_DMA_IRQHandler+0xa44>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d108      	bne.n	800657a <HAL_DMA_IRQHandler+0x8ca>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0201 	bic.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	e007      	b.n	800658a <HAL_DMA_IRQHandler+0x8da>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0201 	bic.w	r2, r2, #1
 8006588:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3301      	adds	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006592:	429a      	cmp	r2, r3
 8006594:	d307      	bcc.n	80065a6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1f2      	bne.n	800658a <HAL_DMA_IRQHandler+0x8da>
 80065a4:	e000      	b.n	80065a8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80065a6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d004      	beq.n	80065c8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2203      	movs	r2, #3
 80065c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80065c6:	e003      	b.n	80065d0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8272 	beq.w	8006abe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	4798      	blx	r3
 80065e2:	e26c      	b.n	8006abe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a43      	ldr	r2, [pc, #268]	; (80066f8 <HAL_DMA_IRQHandler+0xa48>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d022      	beq.n	8006634 <HAL_DMA_IRQHandler+0x984>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a42      	ldr	r2, [pc, #264]	; (80066fc <HAL_DMA_IRQHandler+0xa4c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d01d      	beq.n	8006634 <HAL_DMA_IRQHandler+0x984>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a40      	ldr	r2, [pc, #256]	; (8006700 <HAL_DMA_IRQHandler+0xa50>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d018      	beq.n	8006634 <HAL_DMA_IRQHandler+0x984>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a3f      	ldr	r2, [pc, #252]	; (8006704 <HAL_DMA_IRQHandler+0xa54>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d013      	beq.n	8006634 <HAL_DMA_IRQHandler+0x984>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a3d      	ldr	r2, [pc, #244]	; (8006708 <HAL_DMA_IRQHandler+0xa58>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00e      	beq.n	8006634 <HAL_DMA_IRQHandler+0x984>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a3c      	ldr	r2, [pc, #240]	; (800670c <HAL_DMA_IRQHandler+0xa5c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d009      	beq.n	8006634 <HAL_DMA_IRQHandler+0x984>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a3a      	ldr	r2, [pc, #232]	; (8006710 <HAL_DMA_IRQHandler+0xa60>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d004      	beq.n	8006634 <HAL_DMA_IRQHandler+0x984>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a39      	ldr	r2, [pc, #228]	; (8006714 <HAL_DMA_IRQHandler+0xa64>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d101      	bne.n	8006638 <HAL_DMA_IRQHandler+0x988>
 8006634:	2301      	movs	r3, #1
 8006636:	e000      	b.n	800663a <HAL_DMA_IRQHandler+0x98a>
 8006638:	2300      	movs	r3, #0
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 823f 	beq.w	8006abe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664c:	f003 031f 	and.w	r3, r3, #31
 8006650:	2204      	movs	r2, #4
 8006652:	409a      	lsls	r2, r3
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	4013      	ands	r3, r2
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 80cd 	beq.w	80067f8 <HAL_DMA_IRQHandler+0xb48>
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 80c7 	beq.w	80067f8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	2204      	movs	r2, #4
 8006674:	409a      	lsls	r2, r3
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d049      	beq.n	8006718 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d109      	bne.n	80066a2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 8210 	beq.w	8006ab8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066a0:	e20a      	b.n	8006ab8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 8206 	beq.w	8006ab8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066b4:	e200      	b.n	8006ab8 <HAL_DMA_IRQHandler+0xe08>
 80066b6:	bf00      	nop
 80066b8:	40020010 	.word	0x40020010
 80066bc:	40020028 	.word	0x40020028
 80066c0:	40020040 	.word	0x40020040
 80066c4:	40020058 	.word	0x40020058
 80066c8:	40020070 	.word	0x40020070
 80066cc:	40020088 	.word	0x40020088
 80066d0:	400200a0 	.word	0x400200a0
 80066d4:	400200b8 	.word	0x400200b8
 80066d8:	40020410 	.word	0x40020410
 80066dc:	40020428 	.word	0x40020428
 80066e0:	40020440 	.word	0x40020440
 80066e4:	40020458 	.word	0x40020458
 80066e8:	40020470 	.word	0x40020470
 80066ec:	40020488 	.word	0x40020488
 80066f0:	400204a0 	.word	0x400204a0
 80066f4:	400204b8 	.word	0x400204b8
 80066f8:	58025408 	.word	0x58025408
 80066fc:	5802541c 	.word	0x5802541c
 8006700:	58025430 	.word	0x58025430
 8006704:	58025444 	.word	0x58025444
 8006708:	58025458 	.word	0x58025458
 800670c:	5802546c 	.word	0x5802546c
 8006710:	58025480 	.word	0x58025480
 8006714:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	d160      	bne.n	80067e4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a8c      	ldr	r2, [pc, #560]	; (8006958 <HAL_DMA_IRQHandler+0xca8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d04a      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xb12>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a8a      	ldr	r2, [pc, #552]	; (800695c <HAL_DMA_IRQHandler+0xcac>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d045      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xb12>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a89      	ldr	r2, [pc, #548]	; (8006960 <HAL_DMA_IRQHandler+0xcb0>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d040      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xb12>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a87      	ldr	r2, [pc, #540]	; (8006964 <HAL_DMA_IRQHandler+0xcb4>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d03b      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xb12>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a86      	ldr	r2, [pc, #536]	; (8006968 <HAL_DMA_IRQHandler+0xcb8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d036      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xb12>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a84      	ldr	r2, [pc, #528]	; (800696c <HAL_DMA_IRQHandler+0xcbc>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d031      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xb12>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a83      	ldr	r2, [pc, #524]	; (8006970 <HAL_DMA_IRQHandler+0xcc0>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d02c      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xb12>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a81      	ldr	r2, [pc, #516]	; (8006974 <HAL_DMA_IRQHandler+0xcc4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d027      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xb12>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a80      	ldr	r2, [pc, #512]	; (8006978 <HAL_DMA_IRQHandler+0xcc8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d022      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xb12>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a7e      	ldr	r2, [pc, #504]	; (800697c <HAL_DMA_IRQHandler+0xccc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d01d      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xb12>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a7d      	ldr	r2, [pc, #500]	; (8006980 <HAL_DMA_IRQHandler+0xcd0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d018      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xb12>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a7b      	ldr	r2, [pc, #492]	; (8006984 <HAL_DMA_IRQHandler+0xcd4>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d013      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xb12>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a7a      	ldr	r2, [pc, #488]	; (8006988 <HAL_DMA_IRQHandler+0xcd8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00e      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xb12>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a78      	ldr	r2, [pc, #480]	; (800698c <HAL_DMA_IRQHandler+0xcdc>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d009      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xb12>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a77      	ldr	r2, [pc, #476]	; (8006990 <HAL_DMA_IRQHandler+0xce0>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d004      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xb12>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a75      	ldr	r2, [pc, #468]	; (8006994 <HAL_DMA_IRQHandler+0xce4>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d108      	bne.n	80067d4 <HAL_DMA_IRQHandler+0xb24>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0208 	bic.w	r2, r2, #8
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	e007      	b.n	80067e4 <HAL_DMA_IRQHandler+0xb34>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0204 	bic.w	r2, r2, #4
 80067e2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 8165 	beq.w	8006ab8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067f6:	e15f      	b.n	8006ab8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fc:	f003 031f 	and.w	r3, r3, #31
 8006800:	2202      	movs	r2, #2
 8006802:	409a      	lsls	r2, r3
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4013      	ands	r3, r2
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 80c5 	beq.w	8006998 <HAL_DMA_IRQHandler+0xce8>
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 80bf 	beq.w	8006998 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	2202      	movs	r2, #2
 8006824:	409a      	lsls	r2, r3
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d018      	beq.n	8006866 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d109      	bne.n	8006852 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 813a 	beq.w	8006abc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006850:	e134      	b.n	8006abc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 8130 	beq.w	8006abc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006864:	e12a      	b.n	8006abc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b00      	cmp	r3, #0
 800686e:	d168      	bne.n	8006942 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a38      	ldr	r2, [pc, #224]	; (8006958 <HAL_DMA_IRQHandler+0xca8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d04a      	beq.n	8006910 <HAL_DMA_IRQHandler+0xc60>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a37      	ldr	r2, [pc, #220]	; (800695c <HAL_DMA_IRQHandler+0xcac>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d045      	beq.n	8006910 <HAL_DMA_IRQHandler+0xc60>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a35      	ldr	r2, [pc, #212]	; (8006960 <HAL_DMA_IRQHandler+0xcb0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d040      	beq.n	8006910 <HAL_DMA_IRQHandler+0xc60>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a34      	ldr	r2, [pc, #208]	; (8006964 <HAL_DMA_IRQHandler+0xcb4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d03b      	beq.n	8006910 <HAL_DMA_IRQHandler+0xc60>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a32      	ldr	r2, [pc, #200]	; (8006968 <HAL_DMA_IRQHandler+0xcb8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d036      	beq.n	8006910 <HAL_DMA_IRQHandler+0xc60>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a31      	ldr	r2, [pc, #196]	; (800696c <HAL_DMA_IRQHandler+0xcbc>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d031      	beq.n	8006910 <HAL_DMA_IRQHandler+0xc60>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a2f      	ldr	r2, [pc, #188]	; (8006970 <HAL_DMA_IRQHandler+0xcc0>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d02c      	beq.n	8006910 <HAL_DMA_IRQHandler+0xc60>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a2e      	ldr	r2, [pc, #184]	; (8006974 <HAL_DMA_IRQHandler+0xcc4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d027      	beq.n	8006910 <HAL_DMA_IRQHandler+0xc60>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a2c      	ldr	r2, [pc, #176]	; (8006978 <HAL_DMA_IRQHandler+0xcc8>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d022      	beq.n	8006910 <HAL_DMA_IRQHandler+0xc60>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a2b      	ldr	r2, [pc, #172]	; (800697c <HAL_DMA_IRQHandler+0xccc>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d01d      	beq.n	8006910 <HAL_DMA_IRQHandler+0xc60>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a29      	ldr	r2, [pc, #164]	; (8006980 <HAL_DMA_IRQHandler+0xcd0>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d018      	beq.n	8006910 <HAL_DMA_IRQHandler+0xc60>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a28      	ldr	r2, [pc, #160]	; (8006984 <HAL_DMA_IRQHandler+0xcd4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d013      	beq.n	8006910 <HAL_DMA_IRQHandler+0xc60>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a26      	ldr	r2, [pc, #152]	; (8006988 <HAL_DMA_IRQHandler+0xcd8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d00e      	beq.n	8006910 <HAL_DMA_IRQHandler+0xc60>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a25      	ldr	r2, [pc, #148]	; (800698c <HAL_DMA_IRQHandler+0xcdc>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d009      	beq.n	8006910 <HAL_DMA_IRQHandler+0xc60>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a23      	ldr	r2, [pc, #140]	; (8006990 <HAL_DMA_IRQHandler+0xce0>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d004      	beq.n	8006910 <HAL_DMA_IRQHandler+0xc60>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a22      	ldr	r2, [pc, #136]	; (8006994 <HAL_DMA_IRQHandler+0xce4>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d108      	bne.n	8006922 <HAL_DMA_IRQHandler+0xc72>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0214 	bic.w	r2, r2, #20
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	e007      	b.n	8006932 <HAL_DMA_IRQHandler+0xc82>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 020a 	bic.w	r2, r2, #10
 8006930:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 80b8 	beq.w	8006abc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006954:	e0b2      	b.n	8006abc <HAL_DMA_IRQHandler+0xe0c>
 8006956:	bf00      	nop
 8006958:	40020010 	.word	0x40020010
 800695c:	40020028 	.word	0x40020028
 8006960:	40020040 	.word	0x40020040
 8006964:	40020058 	.word	0x40020058
 8006968:	40020070 	.word	0x40020070
 800696c:	40020088 	.word	0x40020088
 8006970:	400200a0 	.word	0x400200a0
 8006974:	400200b8 	.word	0x400200b8
 8006978:	40020410 	.word	0x40020410
 800697c:	40020428 	.word	0x40020428
 8006980:	40020440 	.word	0x40020440
 8006984:	40020458 	.word	0x40020458
 8006988:	40020470 	.word	0x40020470
 800698c:	40020488 	.word	0x40020488
 8006990:	400204a0 	.word	0x400204a0
 8006994:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699c:	f003 031f 	and.w	r3, r3, #31
 80069a0:	2208      	movs	r2, #8
 80069a2:	409a      	lsls	r2, r3
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	4013      	ands	r3, r2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 8088 	beq.w	8006abe <HAL_DMA_IRQHandler+0xe0e>
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f003 0308 	and.w	r3, r3, #8
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 8082 	beq.w	8006abe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a41      	ldr	r2, [pc, #260]	; (8006ac4 <HAL_DMA_IRQHandler+0xe14>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d04a      	beq.n	8006a5a <HAL_DMA_IRQHandler+0xdaa>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a3f      	ldr	r2, [pc, #252]	; (8006ac8 <HAL_DMA_IRQHandler+0xe18>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d045      	beq.n	8006a5a <HAL_DMA_IRQHandler+0xdaa>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a3e      	ldr	r2, [pc, #248]	; (8006acc <HAL_DMA_IRQHandler+0xe1c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d040      	beq.n	8006a5a <HAL_DMA_IRQHandler+0xdaa>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a3c      	ldr	r2, [pc, #240]	; (8006ad0 <HAL_DMA_IRQHandler+0xe20>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d03b      	beq.n	8006a5a <HAL_DMA_IRQHandler+0xdaa>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a3b      	ldr	r2, [pc, #236]	; (8006ad4 <HAL_DMA_IRQHandler+0xe24>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d036      	beq.n	8006a5a <HAL_DMA_IRQHandler+0xdaa>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a39      	ldr	r2, [pc, #228]	; (8006ad8 <HAL_DMA_IRQHandler+0xe28>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d031      	beq.n	8006a5a <HAL_DMA_IRQHandler+0xdaa>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a38      	ldr	r2, [pc, #224]	; (8006adc <HAL_DMA_IRQHandler+0xe2c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d02c      	beq.n	8006a5a <HAL_DMA_IRQHandler+0xdaa>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a36      	ldr	r2, [pc, #216]	; (8006ae0 <HAL_DMA_IRQHandler+0xe30>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d027      	beq.n	8006a5a <HAL_DMA_IRQHandler+0xdaa>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a35      	ldr	r2, [pc, #212]	; (8006ae4 <HAL_DMA_IRQHandler+0xe34>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d022      	beq.n	8006a5a <HAL_DMA_IRQHandler+0xdaa>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a33      	ldr	r2, [pc, #204]	; (8006ae8 <HAL_DMA_IRQHandler+0xe38>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d01d      	beq.n	8006a5a <HAL_DMA_IRQHandler+0xdaa>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a32      	ldr	r2, [pc, #200]	; (8006aec <HAL_DMA_IRQHandler+0xe3c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d018      	beq.n	8006a5a <HAL_DMA_IRQHandler+0xdaa>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a30      	ldr	r2, [pc, #192]	; (8006af0 <HAL_DMA_IRQHandler+0xe40>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d013      	beq.n	8006a5a <HAL_DMA_IRQHandler+0xdaa>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a2f      	ldr	r2, [pc, #188]	; (8006af4 <HAL_DMA_IRQHandler+0xe44>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00e      	beq.n	8006a5a <HAL_DMA_IRQHandler+0xdaa>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a2d      	ldr	r2, [pc, #180]	; (8006af8 <HAL_DMA_IRQHandler+0xe48>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d009      	beq.n	8006a5a <HAL_DMA_IRQHandler+0xdaa>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a2c      	ldr	r2, [pc, #176]	; (8006afc <HAL_DMA_IRQHandler+0xe4c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d004      	beq.n	8006a5a <HAL_DMA_IRQHandler+0xdaa>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a2a      	ldr	r2, [pc, #168]	; (8006b00 <HAL_DMA_IRQHandler+0xe50>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d108      	bne.n	8006a6c <HAL_DMA_IRQHandler+0xdbc>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 021c 	bic.w	r2, r2, #28
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	e007      	b.n	8006a7c <HAL_DMA_IRQHandler+0xdcc>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 020e 	bic.w	r2, r2, #14
 8006a7a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a80:	f003 031f 	and.w	r3, r3, #31
 8006a84:	2201      	movs	r2, #1
 8006a86:	409a      	lsls	r2, r3
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d009      	beq.n	8006abe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	4798      	blx	r3
 8006ab2:	e004      	b.n	8006abe <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006ab4:	bf00      	nop
 8006ab6:	e002      	b.n	8006abe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ab8:	bf00      	nop
 8006aba:	e000      	b.n	8006abe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006abc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006abe:	3728      	adds	r7, #40	; 0x28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40020010 	.word	0x40020010
 8006ac8:	40020028 	.word	0x40020028
 8006acc:	40020040 	.word	0x40020040
 8006ad0:	40020058 	.word	0x40020058
 8006ad4:	40020070 	.word	0x40020070
 8006ad8:	40020088 	.word	0x40020088
 8006adc:	400200a0 	.word	0x400200a0
 8006ae0:	400200b8 	.word	0x400200b8
 8006ae4:	40020410 	.word	0x40020410
 8006ae8:	40020428 	.word	0x40020428
 8006aec:	40020440 	.word	0x40020440
 8006af0:	40020458 	.word	0x40020458
 8006af4:	40020470 	.word	0x40020470
 8006af8:	40020488 	.word	0x40020488
 8006afc:	400204a0 	.word	0x400204a0
 8006b00:	400204b8 	.word	0x400204b8

08006b04 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b12:	b2db      	uxtb	r3, r3
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b50:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a84      	ldr	r2, [pc, #528]	; (8006d68 <DMA_SetConfig+0x230>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d072      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a82      	ldr	r2, [pc, #520]	; (8006d6c <DMA_SetConfig+0x234>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d06d      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a81      	ldr	r2, [pc, #516]	; (8006d70 <DMA_SetConfig+0x238>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d068      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a7f      	ldr	r2, [pc, #508]	; (8006d74 <DMA_SetConfig+0x23c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d063      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a7e      	ldr	r2, [pc, #504]	; (8006d78 <DMA_SetConfig+0x240>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d05e      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a7c      	ldr	r2, [pc, #496]	; (8006d7c <DMA_SetConfig+0x244>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d059      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a7b      	ldr	r2, [pc, #492]	; (8006d80 <DMA_SetConfig+0x248>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d054      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a79      	ldr	r2, [pc, #484]	; (8006d84 <DMA_SetConfig+0x24c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d04f      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a78      	ldr	r2, [pc, #480]	; (8006d88 <DMA_SetConfig+0x250>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d04a      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a76      	ldr	r2, [pc, #472]	; (8006d8c <DMA_SetConfig+0x254>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d045      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a75      	ldr	r2, [pc, #468]	; (8006d90 <DMA_SetConfig+0x258>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d040      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a73      	ldr	r2, [pc, #460]	; (8006d94 <DMA_SetConfig+0x25c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d03b      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a72      	ldr	r2, [pc, #456]	; (8006d98 <DMA_SetConfig+0x260>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d036      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a70      	ldr	r2, [pc, #448]	; (8006d9c <DMA_SetConfig+0x264>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d031      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a6f      	ldr	r2, [pc, #444]	; (8006da0 <DMA_SetConfig+0x268>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d02c      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a6d      	ldr	r2, [pc, #436]	; (8006da4 <DMA_SetConfig+0x26c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d027      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a6c      	ldr	r2, [pc, #432]	; (8006da8 <DMA_SetConfig+0x270>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d022      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a6a      	ldr	r2, [pc, #424]	; (8006dac <DMA_SetConfig+0x274>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d01d      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a69      	ldr	r2, [pc, #420]	; (8006db0 <DMA_SetConfig+0x278>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d018      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a67      	ldr	r2, [pc, #412]	; (8006db4 <DMA_SetConfig+0x27c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d013      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a66      	ldr	r2, [pc, #408]	; (8006db8 <DMA_SetConfig+0x280>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00e      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a64      	ldr	r2, [pc, #400]	; (8006dbc <DMA_SetConfig+0x284>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d009      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a63      	ldr	r2, [pc, #396]	; (8006dc0 <DMA_SetConfig+0x288>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d004      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a61      	ldr	r2, [pc, #388]	; (8006dc4 <DMA_SetConfig+0x28c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d101      	bne.n	8006c46 <DMA_SetConfig+0x10e>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <DMA_SetConfig+0x110>
 8006c46:	2300      	movs	r3, #0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00d      	beq.n	8006c68 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006c54:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d004      	beq.n	8006c68 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c66:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a3e      	ldr	r2, [pc, #248]	; (8006d68 <DMA_SetConfig+0x230>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d04a      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a3d      	ldr	r2, [pc, #244]	; (8006d6c <DMA_SetConfig+0x234>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d045      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a3b      	ldr	r2, [pc, #236]	; (8006d70 <DMA_SetConfig+0x238>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d040      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a3a      	ldr	r2, [pc, #232]	; (8006d74 <DMA_SetConfig+0x23c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d03b      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a38      	ldr	r2, [pc, #224]	; (8006d78 <DMA_SetConfig+0x240>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d036      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a37      	ldr	r2, [pc, #220]	; (8006d7c <DMA_SetConfig+0x244>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d031      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a35      	ldr	r2, [pc, #212]	; (8006d80 <DMA_SetConfig+0x248>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d02c      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a34      	ldr	r2, [pc, #208]	; (8006d84 <DMA_SetConfig+0x24c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d027      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a32      	ldr	r2, [pc, #200]	; (8006d88 <DMA_SetConfig+0x250>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d022      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a31      	ldr	r2, [pc, #196]	; (8006d8c <DMA_SetConfig+0x254>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d01d      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a2f      	ldr	r2, [pc, #188]	; (8006d90 <DMA_SetConfig+0x258>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d018      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a2e      	ldr	r2, [pc, #184]	; (8006d94 <DMA_SetConfig+0x25c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d013      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a2c      	ldr	r2, [pc, #176]	; (8006d98 <DMA_SetConfig+0x260>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00e      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a2b      	ldr	r2, [pc, #172]	; (8006d9c <DMA_SetConfig+0x264>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d009      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a29      	ldr	r2, [pc, #164]	; (8006da0 <DMA_SetConfig+0x268>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d004      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a28      	ldr	r2, [pc, #160]	; (8006da4 <DMA_SetConfig+0x26c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d101      	bne.n	8006d0c <DMA_SetConfig+0x1d4>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e000      	b.n	8006d0e <DMA_SetConfig+0x1d6>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d05a      	beq.n	8006dc8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d16:	f003 031f 	and.w	r3, r3, #31
 8006d1a:	223f      	movs	r2, #63	; 0x3f
 8006d1c:	409a      	lsls	r2, r3
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d30:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	2b40      	cmp	r3, #64	; 0x40
 8006d40:	d108      	bne.n	8006d54 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d52:	e087      	b.n	8006e64 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	60da      	str	r2, [r3, #12]
}
 8006d64:	e07e      	b.n	8006e64 <DMA_SetConfig+0x32c>
 8006d66:	bf00      	nop
 8006d68:	40020010 	.word	0x40020010
 8006d6c:	40020028 	.word	0x40020028
 8006d70:	40020040 	.word	0x40020040
 8006d74:	40020058 	.word	0x40020058
 8006d78:	40020070 	.word	0x40020070
 8006d7c:	40020088 	.word	0x40020088
 8006d80:	400200a0 	.word	0x400200a0
 8006d84:	400200b8 	.word	0x400200b8
 8006d88:	40020410 	.word	0x40020410
 8006d8c:	40020428 	.word	0x40020428
 8006d90:	40020440 	.word	0x40020440
 8006d94:	40020458 	.word	0x40020458
 8006d98:	40020470 	.word	0x40020470
 8006d9c:	40020488 	.word	0x40020488
 8006da0:	400204a0 	.word	0x400204a0
 8006da4:	400204b8 	.word	0x400204b8
 8006da8:	58025408 	.word	0x58025408
 8006dac:	5802541c 	.word	0x5802541c
 8006db0:	58025430 	.word	0x58025430
 8006db4:	58025444 	.word	0x58025444
 8006db8:	58025458 	.word	0x58025458
 8006dbc:	5802546c 	.word	0x5802546c
 8006dc0:	58025480 	.word	0x58025480
 8006dc4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a28      	ldr	r2, [pc, #160]	; (8006e70 <DMA_SetConfig+0x338>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d022      	beq.n	8006e18 <DMA_SetConfig+0x2e0>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a27      	ldr	r2, [pc, #156]	; (8006e74 <DMA_SetConfig+0x33c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d01d      	beq.n	8006e18 <DMA_SetConfig+0x2e0>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a25      	ldr	r2, [pc, #148]	; (8006e78 <DMA_SetConfig+0x340>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d018      	beq.n	8006e18 <DMA_SetConfig+0x2e0>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a24      	ldr	r2, [pc, #144]	; (8006e7c <DMA_SetConfig+0x344>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d013      	beq.n	8006e18 <DMA_SetConfig+0x2e0>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a22      	ldr	r2, [pc, #136]	; (8006e80 <DMA_SetConfig+0x348>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00e      	beq.n	8006e18 <DMA_SetConfig+0x2e0>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a21      	ldr	r2, [pc, #132]	; (8006e84 <DMA_SetConfig+0x34c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d009      	beq.n	8006e18 <DMA_SetConfig+0x2e0>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a1f      	ldr	r2, [pc, #124]	; (8006e88 <DMA_SetConfig+0x350>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d004      	beq.n	8006e18 <DMA_SetConfig+0x2e0>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a1e      	ldr	r2, [pc, #120]	; (8006e8c <DMA_SetConfig+0x354>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d101      	bne.n	8006e1c <DMA_SetConfig+0x2e4>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e000      	b.n	8006e1e <DMA_SetConfig+0x2e6>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d020      	beq.n	8006e64 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e26:	f003 031f 	and.w	r3, r3, #31
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	409a      	lsls	r2, r3
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	2b40      	cmp	r3, #64	; 0x40
 8006e40:	d108      	bne.n	8006e54 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	60da      	str	r2, [r3, #12]
}
 8006e52:	e007      	b.n	8006e64 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	60da      	str	r2, [r3, #12]
}
 8006e64:	bf00      	nop
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	58025408 	.word	0x58025408
 8006e74:	5802541c 	.word	0x5802541c
 8006e78:	58025430 	.word	0x58025430
 8006e7c:	58025444 	.word	0x58025444
 8006e80:	58025458 	.word	0x58025458
 8006e84:	5802546c 	.word	0x5802546c
 8006e88:	58025480 	.word	0x58025480
 8006e8c:	58025494 	.word	0x58025494

08006e90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a42      	ldr	r2, [pc, #264]	; (8006fa8 <DMA_CalcBaseAndBitshift+0x118>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d04a      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a41      	ldr	r2, [pc, #260]	; (8006fac <DMA_CalcBaseAndBitshift+0x11c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d045      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a3f      	ldr	r2, [pc, #252]	; (8006fb0 <DMA_CalcBaseAndBitshift+0x120>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d040      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a3e      	ldr	r2, [pc, #248]	; (8006fb4 <DMA_CalcBaseAndBitshift+0x124>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d03b      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a3c      	ldr	r2, [pc, #240]	; (8006fb8 <DMA_CalcBaseAndBitshift+0x128>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d036      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a3b      	ldr	r2, [pc, #236]	; (8006fbc <DMA_CalcBaseAndBitshift+0x12c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d031      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a39      	ldr	r2, [pc, #228]	; (8006fc0 <DMA_CalcBaseAndBitshift+0x130>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d02c      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a38      	ldr	r2, [pc, #224]	; (8006fc4 <DMA_CalcBaseAndBitshift+0x134>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d027      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a36      	ldr	r2, [pc, #216]	; (8006fc8 <DMA_CalcBaseAndBitshift+0x138>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d022      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a35      	ldr	r2, [pc, #212]	; (8006fcc <DMA_CalcBaseAndBitshift+0x13c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d01d      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a33      	ldr	r2, [pc, #204]	; (8006fd0 <DMA_CalcBaseAndBitshift+0x140>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d018      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a32      	ldr	r2, [pc, #200]	; (8006fd4 <DMA_CalcBaseAndBitshift+0x144>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d013      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a30      	ldr	r2, [pc, #192]	; (8006fd8 <DMA_CalcBaseAndBitshift+0x148>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00e      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a2f      	ldr	r2, [pc, #188]	; (8006fdc <DMA_CalcBaseAndBitshift+0x14c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d009      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a2d      	ldr	r2, [pc, #180]	; (8006fe0 <DMA_CalcBaseAndBitshift+0x150>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d004      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a2c      	ldr	r2, [pc, #176]	; (8006fe4 <DMA_CalcBaseAndBitshift+0x154>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d101      	bne.n	8006f3c <DMA_CalcBaseAndBitshift+0xac>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <DMA_CalcBaseAndBitshift+0xae>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d024      	beq.n	8006f8c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	3b10      	subs	r3, #16
 8006f4a:	4a27      	ldr	r2, [pc, #156]	; (8006fe8 <DMA_CalcBaseAndBitshift+0x158>)
 8006f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f50:	091b      	lsrs	r3, r3, #4
 8006f52:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	4a24      	ldr	r2, [pc, #144]	; (8006fec <DMA_CalcBaseAndBitshift+0x15c>)
 8006f5c:	5cd3      	ldrb	r3, [r2, r3]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d908      	bls.n	8006f7c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	4b1f      	ldr	r3, [pc, #124]	; (8006ff0 <DMA_CalcBaseAndBitshift+0x160>)
 8006f72:	4013      	ands	r3, r2
 8006f74:	1d1a      	adds	r2, r3, #4
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	659a      	str	r2, [r3, #88]	; 0x58
 8006f7a:	e00d      	b.n	8006f98 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	4b1b      	ldr	r3, [pc, #108]	; (8006ff0 <DMA_CalcBaseAndBitshift+0x160>)
 8006f84:	4013      	ands	r3, r2
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	6593      	str	r3, [r2, #88]	; 0x58
 8006f8a:	e005      	b.n	8006f98 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	40020010 	.word	0x40020010
 8006fac:	40020028 	.word	0x40020028
 8006fb0:	40020040 	.word	0x40020040
 8006fb4:	40020058 	.word	0x40020058
 8006fb8:	40020070 	.word	0x40020070
 8006fbc:	40020088 	.word	0x40020088
 8006fc0:	400200a0 	.word	0x400200a0
 8006fc4:	400200b8 	.word	0x400200b8
 8006fc8:	40020410 	.word	0x40020410
 8006fcc:	40020428 	.word	0x40020428
 8006fd0:	40020440 	.word	0x40020440
 8006fd4:	40020458 	.word	0x40020458
 8006fd8:	40020470 	.word	0x40020470
 8006fdc:	40020488 	.word	0x40020488
 8006fe0:	400204a0 	.word	0x400204a0
 8006fe4:	400204b8 	.word	0x400204b8
 8006fe8:	aaaaaaab 	.word	0xaaaaaaab
 8006fec:	08012ea8 	.word	0x08012ea8
 8006ff0:	fffffc00 	.word	0xfffffc00

08006ff4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d120      	bne.n	800704a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700c:	2b03      	cmp	r3, #3
 800700e:	d858      	bhi.n	80070c2 <DMA_CheckFifoParam+0xce>
 8007010:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <DMA_CheckFifoParam+0x24>)
 8007012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007016:	bf00      	nop
 8007018:	08007029 	.word	0x08007029
 800701c:	0800703b 	.word	0x0800703b
 8007020:	08007029 	.word	0x08007029
 8007024:	080070c3 	.word	0x080070c3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d048      	beq.n	80070c6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007038:	e045      	b.n	80070c6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007042:	d142      	bne.n	80070ca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007048:	e03f      	b.n	80070ca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007052:	d123      	bne.n	800709c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007058:	2b03      	cmp	r3, #3
 800705a:	d838      	bhi.n	80070ce <DMA_CheckFifoParam+0xda>
 800705c:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <DMA_CheckFifoParam+0x70>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	08007075 	.word	0x08007075
 8007068:	0800707b 	.word	0x0800707b
 800706c:	08007075 	.word	0x08007075
 8007070:	0800708d 	.word	0x0800708d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	73fb      	strb	r3, [r7, #15]
        break;
 8007078:	e030      	b.n	80070dc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d025      	beq.n	80070d2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800708a:	e022      	b.n	80070d2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007094:	d11f      	bne.n	80070d6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800709a:	e01c      	b.n	80070d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d902      	bls.n	80070aa <DMA_CheckFifoParam+0xb6>
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	d003      	beq.n	80070b0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80070a8:	e018      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	73fb      	strb	r3, [r7, #15]
        break;
 80070ae:	e015      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00e      	beq.n	80070da <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	73fb      	strb	r3, [r7, #15]
    break;
 80070c0:	e00b      	b.n	80070da <DMA_CheckFifoParam+0xe6>
        break;
 80070c2:	bf00      	nop
 80070c4:	e00a      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
        break;
 80070c6:	bf00      	nop
 80070c8:	e008      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
        break;
 80070ca:	bf00      	nop
 80070cc:	e006      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
        break;
 80070ce:	bf00      	nop
 80070d0:	e004      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
        break;
 80070d2:	bf00      	nop
 80070d4:	e002      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
        break;
 80070d6:	bf00      	nop
 80070d8:	e000      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
    break;
 80070da:	bf00      	nop
    }
  }

  return status;
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop

080070ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a38      	ldr	r2, [pc, #224]	; (80071e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d022      	beq.n	800714a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a36      	ldr	r2, [pc, #216]	; (80071e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d01d      	beq.n	800714a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a35      	ldr	r2, [pc, #212]	; (80071e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d018      	beq.n	800714a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a33      	ldr	r2, [pc, #204]	; (80071ec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d013      	beq.n	800714a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a32      	ldr	r2, [pc, #200]	; (80071f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00e      	beq.n	800714a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a30      	ldr	r2, [pc, #192]	; (80071f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d009      	beq.n	800714a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a2f      	ldr	r2, [pc, #188]	; (80071f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d004      	beq.n	800714a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a2d      	ldr	r2, [pc, #180]	; (80071fc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d101      	bne.n	800714e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800714a:	2301      	movs	r3, #1
 800714c:	e000      	b.n	8007150 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800714e:	2300      	movs	r3, #0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d01a      	beq.n	800718a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	3b08      	subs	r3, #8
 800715c:	4a28      	ldr	r2, [pc, #160]	; (8007200 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800715e:	fba2 2303 	umull	r2, r3, r2, r3
 8007162:	091b      	lsrs	r3, r3, #4
 8007164:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	4b26      	ldr	r3, [pc, #152]	; (8007204 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	461a      	mov	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a24      	ldr	r2, [pc, #144]	; (8007208 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007178:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	2201      	movs	r2, #1
 8007182:	409a      	lsls	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007188:	e024      	b.n	80071d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	b2db      	uxtb	r3, r3
 8007190:	3b10      	subs	r3, #16
 8007192:	4a1e      	ldr	r2, [pc, #120]	; (800720c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007194:	fba2 2303 	umull	r2, r3, r2, r3
 8007198:	091b      	lsrs	r3, r3, #4
 800719a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4a1c      	ldr	r2, [pc, #112]	; (8007210 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d806      	bhi.n	80071b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4a1b      	ldr	r2, [pc, #108]	; (8007214 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d902      	bls.n	80071b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3308      	adds	r3, #8
 80071b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4b18      	ldr	r3, [pc, #96]	; (8007218 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	461a      	mov	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a16      	ldr	r2, [pc, #88]	; (800721c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80071c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f003 031f 	and.w	r3, r3, #31
 80071cc:	2201      	movs	r2, #1
 80071ce:	409a      	lsls	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80071d4:	bf00      	nop
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	58025408 	.word	0x58025408
 80071e4:	5802541c 	.word	0x5802541c
 80071e8:	58025430 	.word	0x58025430
 80071ec:	58025444 	.word	0x58025444
 80071f0:	58025458 	.word	0x58025458
 80071f4:	5802546c 	.word	0x5802546c
 80071f8:	58025480 	.word	0x58025480
 80071fc:	58025494 	.word	0x58025494
 8007200:	cccccccd 	.word	0xcccccccd
 8007204:	16009600 	.word	0x16009600
 8007208:	58025880 	.word	0x58025880
 800720c:	aaaaaaab 	.word	0xaaaaaaab
 8007210:	400204b8 	.word	0x400204b8
 8007214:	4002040f 	.word	0x4002040f
 8007218:	10008200 	.word	0x10008200
 800721c:	40020880 	.word	0x40020880

08007220 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d04a      	beq.n	80072cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2b08      	cmp	r3, #8
 800723a:	d847      	bhi.n	80072cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a25      	ldr	r2, [pc, #148]	; (80072d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d022      	beq.n	800728c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a24      	ldr	r2, [pc, #144]	; (80072dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d01d      	beq.n	800728c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a22      	ldr	r2, [pc, #136]	; (80072e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d018      	beq.n	800728c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a21      	ldr	r2, [pc, #132]	; (80072e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d013      	beq.n	800728c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1f      	ldr	r2, [pc, #124]	; (80072e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d00e      	beq.n	800728c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a1e      	ldr	r2, [pc, #120]	; (80072ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d009      	beq.n	800728c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1c      	ldr	r2, [pc, #112]	; (80072f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d004      	beq.n	800728c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a1b      	ldr	r2, [pc, #108]	; (80072f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d101      	bne.n	8007290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800728c:	2301      	movs	r3, #1
 800728e:	e000      	b.n	8007292 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007290:	2300      	movs	r3, #0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4b17      	ldr	r3, [pc, #92]	; (80072f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	461a      	mov	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a15      	ldr	r2, [pc, #84]	; (80072fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80072a8:	671a      	str	r2, [r3, #112]	; 0x70
 80072aa:	e009      	b.n	80072c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	4b14      	ldr	r3, [pc, #80]	; (8007300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80072b0:	4413      	add	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	461a      	mov	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a11      	ldr	r2, [pc, #68]	; (8007304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80072be:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	2201      	movs	r2, #1
 80072c6:	409a      	lsls	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80072cc:	bf00      	nop
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	58025408 	.word	0x58025408
 80072dc:	5802541c 	.word	0x5802541c
 80072e0:	58025430 	.word	0x58025430
 80072e4:	58025444 	.word	0x58025444
 80072e8:	58025458 	.word	0x58025458
 80072ec:	5802546c 	.word	0x5802546c
 80072f0:	58025480 	.word	0x58025480
 80072f4:	58025494 	.word	0x58025494
 80072f8:	1600963f 	.word	0x1600963f
 80072fc:	58025940 	.word	0x58025940
 8007300:	1000823f 	.word	0x1000823f
 8007304:	40020940 	.word	0x40020940

08007308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007308:	b480      	push	{r7}
 800730a:	b089      	sub	sp, #36	; 0x24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007312:	2300      	movs	r3, #0
 8007314:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007316:	4b89      	ldr	r3, [pc, #548]	; (800753c <HAL_GPIO_Init+0x234>)
 8007318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800731a:	e194      	b.n	8007646 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	2101      	movs	r1, #1
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	fa01 f303 	lsl.w	r3, r1, r3
 8007328:	4013      	ands	r3, r2
 800732a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 8186 	beq.w	8007640 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d00b      	beq.n	8007354 <HAL_GPIO_Init+0x4c>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	2b02      	cmp	r3, #2
 8007342:	d007      	beq.n	8007354 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007348:	2b11      	cmp	r3, #17
 800734a:	d003      	beq.n	8007354 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	2b12      	cmp	r3, #18
 8007352:	d130      	bne.n	80073b6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	2203      	movs	r2, #3
 8007360:	fa02 f303 	lsl.w	r3, r2, r3
 8007364:	43db      	mvns	r3, r3
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	4013      	ands	r3, r2
 800736a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	fa02 f303 	lsl.w	r3, r2, r3
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	4313      	orrs	r3, r2
 800737c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800738a:	2201      	movs	r2, #1
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	fa02 f303 	lsl.w	r3, r2, r3
 8007392:	43db      	mvns	r3, r3
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	4013      	ands	r3, r2
 8007398:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	091b      	lsrs	r3, r3, #4
 80073a0:	f003 0201 	and.w	r2, r3, #1
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	fa02 f303 	lsl.w	r3, r2, r3
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	69ba      	ldr	r2, [r7, #24]
 80073b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	2203      	movs	r2, #3
 80073c2:	fa02 f303 	lsl.w	r3, r2, r3
 80073c6:	43db      	mvns	r3, r3
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	4013      	ands	r3, r2
 80073cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	689a      	ldr	r2, [r3, #8]
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	005b      	lsls	r3, r3, #1
 80073d6:	fa02 f303 	lsl.w	r3, r2, r3
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	4313      	orrs	r3, r2
 80073de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d003      	beq.n	80073f6 <HAL_GPIO_Init+0xee>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2b12      	cmp	r3, #18
 80073f4:	d123      	bne.n	800743e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	08da      	lsrs	r2, r3, #3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3208      	adds	r2, #8
 80073fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	220f      	movs	r2, #15
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	43db      	mvns	r3, r3
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	4013      	ands	r3, r2
 8007418:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	691a      	ldr	r2, [r3, #16]
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	f003 0307 	and.w	r3, r3, #7
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	fa02 f303 	lsl.w	r3, r2, r3
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	4313      	orrs	r3, r2
 800742e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	08da      	lsrs	r2, r3, #3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3208      	adds	r2, #8
 8007438:	69b9      	ldr	r1, [r7, #24]
 800743a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	2203      	movs	r2, #3
 800744a:	fa02 f303 	lsl.w	r3, r2, r3
 800744e:	43db      	mvns	r3, r3
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	4013      	ands	r3, r2
 8007454:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f003 0203 	and.w	r2, r3, #3
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	69ba      	ldr	r2, [r7, #24]
 8007468:	4313      	orrs	r3, r2
 800746a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 80e0 	beq.w	8007640 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007480:	4b2f      	ldr	r3, [pc, #188]	; (8007540 <HAL_GPIO_Init+0x238>)
 8007482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007486:	4a2e      	ldr	r2, [pc, #184]	; (8007540 <HAL_GPIO_Init+0x238>)
 8007488:	f043 0302 	orr.w	r3, r3, #2
 800748c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007490:	4b2b      	ldr	r3, [pc, #172]	; (8007540 <HAL_GPIO_Init+0x238>)
 8007492:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800749e:	4a29      	ldr	r2, [pc, #164]	; (8007544 <HAL_GPIO_Init+0x23c>)
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	089b      	lsrs	r3, r3, #2
 80074a4:	3302      	adds	r3, #2
 80074a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	220f      	movs	r2, #15
 80074b6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ba:	43db      	mvns	r3, r3
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	4013      	ands	r3, r2
 80074c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a20      	ldr	r2, [pc, #128]	; (8007548 <HAL_GPIO_Init+0x240>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d052      	beq.n	8007570 <HAL_GPIO_Init+0x268>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a1f      	ldr	r2, [pc, #124]	; (800754c <HAL_GPIO_Init+0x244>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d031      	beq.n	8007536 <HAL_GPIO_Init+0x22e>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a1e      	ldr	r2, [pc, #120]	; (8007550 <HAL_GPIO_Init+0x248>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d02b      	beq.n	8007532 <HAL_GPIO_Init+0x22a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a1d      	ldr	r2, [pc, #116]	; (8007554 <HAL_GPIO_Init+0x24c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d025      	beq.n	800752e <HAL_GPIO_Init+0x226>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a1c      	ldr	r2, [pc, #112]	; (8007558 <HAL_GPIO_Init+0x250>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d01f      	beq.n	800752a <HAL_GPIO_Init+0x222>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a1b      	ldr	r2, [pc, #108]	; (800755c <HAL_GPIO_Init+0x254>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d019      	beq.n	8007526 <HAL_GPIO_Init+0x21e>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a1a      	ldr	r2, [pc, #104]	; (8007560 <HAL_GPIO_Init+0x258>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d013      	beq.n	8007522 <HAL_GPIO_Init+0x21a>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a19      	ldr	r2, [pc, #100]	; (8007564 <HAL_GPIO_Init+0x25c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d00d      	beq.n	800751e <HAL_GPIO_Init+0x216>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a18      	ldr	r2, [pc, #96]	; (8007568 <HAL_GPIO_Init+0x260>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d007      	beq.n	800751a <HAL_GPIO_Init+0x212>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a17      	ldr	r2, [pc, #92]	; (800756c <HAL_GPIO_Init+0x264>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d101      	bne.n	8007516 <HAL_GPIO_Init+0x20e>
 8007512:	2309      	movs	r3, #9
 8007514:	e02d      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 8007516:	230a      	movs	r3, #10
 8007518:	e02b      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 800751a:	2308      	movs	r3, #8
 800751c:	e029      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 800751e:	2307      	movs	r3, #7
 8007520:	e027      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 8007522:	2306      	movs	r3, #6
 8007524:	e025      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 8007526:	2305      	movs	r3, #5
 8007528:	e023      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 800752a:	2304      	movs	r3, #4
 800752c:	e021      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 800752e:	2303      	movs	r3, #3
 8007530:	e01f      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 8007532:	2302      	movs	r3, #2
 8007534:	e01d      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 8007536:	2301      	movs	r3, #1
 8007538:	e01b      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 800753a:	bf00      	nop
 800753c:	58000080 	.word	0x58000080
 8007540:	58024400 	.word	0x58024400
 8007544:	58000400 	.word	0x58000400
 8007548:	58020000 	.word	0x58020000
 800754c:	58020400 	.word	0x58020400
 8007550:	58020800 	.word	0x58020800
 8007554:	58020c00 	.word	0x58020c00
 8007558:	58021000 	.word	0x58021000
 800755c:	58021400 	.word	0x58021400
 8007560:	58021800 	.word	0x58021800
 8007564:	58021c00 	.word	0x58021c00
 8007568:	58022000 	.word	0x58022000
 800756c:	58022400 	.word	0x58022400
 8007570:	2300      	movs	r3, #0
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	f002 0203 	and.w	r2, r2, #3
 8007578:	0092      	lsls	r2, r2, #2
 800757a:	4093      	lsls	r3, r2
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	4313      	orrs	r3, r2
 8007580:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007582:	4938      	ldr	r1, [pc, #224]	; (8007664 <HAL_GPIO_Init+0x35c>)
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	089b      	lsrs	r3, r3, #2
 8007588:	3302      	adds	r3, #2
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	43db      	mvns	r3, r3
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	4013      	ands	r3, r2
 800759e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	43db      	mvns	r3, r3
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	4013      	ands	r3, r2
 80075c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	4313      	orrs	r3, r2
 80075dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	43db      	mvns	r3, r3
 80075f0:	69ba      	ldr	r2, [r7, #24]
 80075f2:	4013      	ands	r3, r2
 80075f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800760a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	43db      	mvns	r3, r3
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	4013      	ands	r3, r2
 8007622:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	4313      	orrs	r3, r2
 8007636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	3301      	adds	r3, #1
 8007644:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	fa22 f303 	lsr.w	r3, r2, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	f47f ae63 	bne.w	800731c <HAL_GPIO_Init+0x14>
  }
}
 8007656:	bf00      	nop
 8007658:	bf00      	nop
 800765a:	3724      	adds	r7, #36	; 0x24
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	58000400 	.word	0x58000400

08007668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	807b      	strh	r3, [r7, #2]
 8007674:	4613      	mov	r3, r2
 8007676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007678:	787b      	ldrb	r3, [r7, #1]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800767e:	887a      	ldrh	r2, [r7, #2]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007684:	e003      	b.n	800768e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007686:	887b      	ldrh	r3, [r7, #2]
 8007688:	041a      	lsls	r2, r3, #16
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	619a      	str	r2, [r3, #24]
}
 800768e:	bf00      	nop
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800769a:	b480      	push	{r7}
 800769c:	b085      	sub	sp, #20
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	460b      	mov	r3, r1
 80076a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80076ac:	887a      	ldrh	r2, [r7, #2]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	4013      	ands	r3, r2
 80076b2:	041a      	lsls	r2, r3, #16
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	43d9      	mvns	r1, r3
 80076b8:	887b      	ldrh	r3, [r7, #2]
 80076ba:	400b      	ands	r3, r1
 80076bc:	431a      	orrs	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	619a      	str	r2, [r3, #24]
}
 80076c2:	bf00      	nop
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
	...

080076d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e07f      	b.n	80077e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d106      	bne.n	80076fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7fb fdf4 	bl	80032e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2224      	movs	r2, #36	; 0x24
 8007700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f022 0201 	bic.w	r2, r2, #1
 8007712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007720:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007730:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d107      	bne.n	800774a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007746:	609a      	str	r2, [r3, #8]
 8007748:	e006      	b.n	8007758 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007756:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d104      	bne.n	800776a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007768:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6859      	ldr	r1, [r3, #4]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	4b1d      	ldr	r3, [pc, #116]	; (80077ec <HAL_I2C_Init+0x11c>)
 8007776:	430b      	orrs	r3, r1
 8007778:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68da      	ldr	r2, [r3, #12]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007788:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	691a      	ldr	r2, [r3, #16]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	ea42 0103 	orr.w	r1, r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	021a      	lsls	r2, r3, #8
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	69d9      	ldr	r1, [r3, #28]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a1a      	ldr	r2, [r3, #32]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	430a      	orrs	r2, r1
 80077b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0201 	orr.w	r2, r2, #1
 80077c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	02008000 	.word	0x02008000

080077f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af02      	add	r7, sp, #8
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	4608      	mov	r0, r1
 80077fa:	4611      	mov	r1, r2
 80077fc:	461a      	mov	r2, r3
 80077fe:	4603      	mov	r3, r0
 8007800:	817b      	strh	r3, [r7, #10]
 8007802:	460b      	mov	r3, r1
 8007804:	813b      	strh	r3, [r7, #8]
 8007806:	4613      	mov	r3, r2
 8007808:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b20      	cmp	r3, #32
 8007814:	f040 80f9 	bne.w	8007a0a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <HAL_I2C_Mem_Write+0x34>
 800781e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007820:	2b00      	cmp	r3, #0
 8007822:	d105      	bne.n	8007830 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800782a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e0ed      	b.n	8007a0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007836:	2b01      	cmp	r3, #1
 8007838:	d101      	bne.n	800783e <HAL_I2C_Mem_Write+0x4e>
 800783a:	2302      	movs	r3, #2
 800783c:	e0e6      	b.n	8007a0c <HAL_I2C_Mem_Write+0x21c>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007846:	f7fc fdbf 	bl	80043c8 <HAL_GetTick>
 800784a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	2319      	movs	r3, #25
 8007852:	2201      	movs	r2, #1
 8007854:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f001 fee3 	bl	8009624 <I2C_WaitOnFlagUntilTimeout>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e0d1      	b.n	8007a0c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2221      	movs	r2, #33	; 0x21
 800786c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2240      	movs	r2, #64	; 0x40
 8007874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6a3a      	ldr	r2, [r7, #32]
 8007882:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007888:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007890:	88f8      	ldrh	r0, [r7, #6]
 8007892:	893a      	ldrh	r2, [r7, #8]
 8007894:	8979      	ldrh	r1, [r7, #10]
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	4603      	mov	r3, r0
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 ff23 	bl	80086ec <I2C_RequestMemoryWrite>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d005      	beq.n	80078b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e0a9      	b.n	8007a0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078bc:	b29b      	uxth	r3, r3
 80078be:	2bff      	cmp	r3, #255	; 0xff
 80078c0:	d90e      	bls.n	80078e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	22ff      	movs	r2, #255	; 0xff
 80078c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	8979      	ldrh	r1, [r7, #10]
 80078d0:	2300      	movs	r3, #0
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f001 ffc5 	bl	8009868 <I2C_TransferConfig>
 80078de:	e00f      	b.n	8007900 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	8979      	ldrh	r1, [r7, #10]
 80078f2:	2300      	movs	r3, #0
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f001 ffb4 	bl	8009868 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f001 fecd 	bl	80096a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e07b      	b.n	8007a0c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	781a      	ldrb	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800792e:	b29b      	uxth	r3, r3
 8007930:	3b01      	subs	r3, #1
 8007932:	b29a      	uxth	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800793c:	3b01      	subs	r3, #1
 800793e:	b29a      	uxth	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007948:	b29b      	uxth	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d034      	beq.n	80079b8 <HAL_I2C_Mem_Write+0x1c8>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007952:	2b00      	cmp	r3, #0
 8007954:	d130      	bne.n	80079b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	2200      	movs	r2, #0
 800795e:	2180      	movs	r1, #128	; 0x80
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f001 fe5f 	bl	8009624 <I2C_WaitOnFlagUntilTimeout>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e04d      	b.n	8007a0c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007974:	b29b      	uxth	r3, r3
 8007976:	2bff      	cmp	r3, #255	; 0xff
 8007978:	d90e      	bls.n	8007998 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	22ff      	movs	r2, #255	; 0xff
 800797e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007984:	b2da      	uxtb	r2, r3
 8007986:	8979      	ldrh	r1, [r7, #10]
 8007988:	2300      	movs	r3, #0
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f001 ff69 	bl	8009868 <I2C_TransferConfig>
 8007996:	e00f      	b.n	80079b8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	8979      	ldrh	r1, [r7, #10]
 80079aa:	2300      	movs	r3, #0
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f001 ff58 	bl	8009868 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079bc:	b29b      	uxth	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d19e      	bne.n	8007900 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f001 feac 	bl	8009724 <I2C_WaitOnSTOPFlagUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e01a      	b.n	8007a0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2220      	movs	r2, #32
 80079dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6859      	ldr	r1, [r3, #4]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <HAL_I2C_Mem_Write+0x224>)
 80079ea:	400b      	ands	r3, r1
 80079ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2220      	movs	r2, #32
 80079f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	e000      	b.n	8007a0c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007a0a:	2302      	movs	r3, #2
  }
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	fe00e800 	.word	0xfe00e800

08007a18 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	4608      	mov	r0, r1
 8007a22:	4611      	mov	r1, r2
 8007a24:	461a      	mov	r2, r3
 8007a26:	4603      	mov	r3, r0
 8007a28:	817b      	strh	r3, [r7, #10]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	813b      	strh	r3, [r7, #8]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	f040 80fd 	bne.w	8007c3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <HAL_I2C_Mem_Read+0x34>
 8007a46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d105      	bne.n	8007a58 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e0f1      	b.n	8007c3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d101      	bne.n	8007a66 <HAL_I2C_Mem_Read+0x4e>
 8007a62:	2302      	movs	r3, #2
 8007a64:	e0ea      	b.n	8007c3c <HAL_I2C_Mem_Read+0x224>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a6e:	f7fc fcab 	bl	80043c8 <HAL_GetTick>
 8007a72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	2319      	movs	r3, #25
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f001 fdcf 	bl	8009624 <I2C_WaitOnFlagUntilTimeout>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d001      	beq.n	8007a90 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e0d5      	b.n	8007c3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2222      	movs	r2, #34	; 0x22
 8007a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2240      	movs	r2, #64	; 0x40
 8007a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6a3a      	ldr	r2, [r7, #32]
 8007aaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ab8:	88f8      	ldrh	r0, [r7, #6]
 8007aba:	893a      	ldrh	r2, [r7, #8]
 8007abc:	8979      	ldrh	r1, [r7, #10]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	9301      	str	r3, [sp, #4]
 8007ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 fe63 	bl	8008794 <I2C_RequestMemoryRead>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e0ad      	b.n	8007c3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	2bff      	cmp	r3, #255	; 0xff
 8007ae8:	d90e      	bls.n	8007b08 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	22ff      	movs	r2, #255	; 0xff
 8007aee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	8979      	ldrh	r1, [r7, #10]
 8007af8:	4b52      	ldr	r3, [pc, #328]	; (8007c44 <HAL_I2C_Mem_Read+0x22c>)
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f001 feb1 	bl	8009868 <I2C_TransferConfig>
 8007b06:	e00f      	b.n	8007b28 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	8979      	ldrh	r1, [r7, #10]
 8007b1a:	4b4a      	ldr	r3, [pc, #296]	; (8007c44 <HAL_I2C_Mem_Read+0x22c>)
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f001 fea0 	bl	8009868 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2e:	2200      	movs	r2, #0
 8007b30:	2104      	movs	r1, #4
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f001 fd76 	bl	8009624 <I2C_WaitOnFlagUntilTimeout>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e07c      	b.n	8007c3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	b2d2      	uxtb	r2, r2
 8007b4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d034      	beq.n	8007be8 <HAL_I2C_Mem_Read+0x1d0>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d130      	bne.n	8007be8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	2180      	movs	r1, #128	; 0x80
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f001 fd47 	bl	8009624 <I2C_WaitOnFlagUntilTimeout>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e04d      	b.n	8007c3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	2bff      	cmp	r3, #255	; 0xff
 8007ba8:	d90e      	bls.n	8007bc8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	22ff      	movs	r2, #255	; 0xff
 8007bae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	8979      	ldrh	r1, [r7, #10]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f001 fe51 	bl	8009868 <I2C_TransferConfig>
 8007bc6:	e00f      	b.n	8007be8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	8979      	ldrh	r1, [r7, #10]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f001 fe40 	bl	8009868 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d19a      	bne.n	8007b28 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f001 fd94 	bl	8009724 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e01a      	b.n	8007c3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6859      	ldr	r1, [r3, #4]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	4b0b      	ldr	r3, [pc, #44]	; (8007c48 <HAL_I2C_Mem_Read+0x230>)
 8007c1a:	400b      	ands	r3, r1
 8007c1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2220      	movs	r2, #32
 8007c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	e000      	b.n	8007c3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007c3a:	2302      	movs	r3, #2
  }
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3718      	adds	r7, #24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	80002400 	.word	0x80002400
 8007c48:	fe00e800 	.word	0xfe00e800

08007c4c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b08a      	sub	sp, #40	; 0x28
 8007c50:	af02      	add	r7, sp, #8
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	4608      	mov	r0, r1
 8007c56:	4611      	mov	r1, r2
 8007c58:	461a      	mov	r2, r3
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	817b      	strh	r3, [r7, #10]
 8007c5e:	460b      	mov	r3, r1
 8007c60:	813b      	strh	r3, [r7, #8]
 8007c62:	4613      	mov	r3, r2
 8007c64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b20      	cmp	r3, #32
 8007c70:	f040 80d5 	bne.w	8007e1e <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <HAL_I2C_Mem_Read_DMA+0x34>
 8007c7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d105      	bne.n	8007c8c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e0c9      	b.n	8007e20 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c9a:	d101      	bne.n	8007ca0 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	e0bf      	b.n	8007e20 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d101      	bne.n	8007cae <HAL_I2C_Mem_Read_DMA+0x62>
 8007caa:	2302      	movs	r3, #2
 8007cac:	e0b8      	b.n	8007e20 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007cb6:	f7fc fb87 	bl	80043c8 <HAL_GetTick>
 8007cba:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2222      	movs	r2, #34	; 0x22
 8007cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2240      	movs	r2, #64	; 0x40
 8007cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	4a51      	ldr	r2, [pc, #324]	; (8007e28 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8007ce2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4a51      	ldr	r2, [pc, #324]	; (8007e2c <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8007ce8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	2bff      	cmp	r3, #255	; 0xff
 8007cf2:	d906      	bls.n	8007d02 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	22ff      	movs	r2, #255	; 0xff
 8007cf8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007cfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cfe:	61fb      	str	r3, [r7, #28]
 8007d00:	e007      	b.n	8007d12 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007d0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d10:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007d12:	88f8      	ldrh	r0, [r7, #6]
 8007d14:	893a      	ldrh	r2, [r7, #8]
 8007d16:	8979      	ldrh	r1, [r7, #10]
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	9301      	str	r3, [sp, #4]
 8007d1c:	2319      	movs	r3, #25
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	4603      	mov	r3, r0
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 fd36 	bl	8008794 <I2C_RequestMemoryRead>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d005      	beq.n	8007d3a <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e072      	b.n	8007e20 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d020      	beq.n	8007d84 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d46:	4a3a      	ldr	r2, [pc, #232]	; (8007e30 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8007d48:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4e:	4a39      	ldr	r2, [pc, #228]	; (8007e34 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8007d50:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d56:	2200      	movs	r2, #0
 8007d58:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5e:	2200      	movs	r2, #0
 8007d60:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3324      	adds	r3, #36	; 0x24
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d74:	f7fc ffd0 	bl	8004d18 <HAL_DMA_Start_IT>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d139      	bne.n	8007df6 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8007d82:	e013      	b.n	8007dac <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e039      	b.n	8007e20 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	8979      	ldrh	r1, [r7, #10]
 8007db4:	4b20      	ldr	r3, [pc, #128]	; (8007e38 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f001 fd54 	bl	8009868 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007dda:	2110      	movs	r1, #16
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f001 fd71 	bl	80098c4 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007df0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	e014      	b.n	8007e20 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0a:	f043 0210 	orr.w	r2, r3, #16
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e000      	b.n	8007e20 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8007e1e:	2302      	movs	r3, #2
  }
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3720      	adds	r7, #32
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	ffff0000 	.word	0xffff0000
 8007e2c:	08008147 	.word	0x08008147
 8007e30:	080092e3 	.word	0x080092e3
 8007e34:	08009379 	.word	0x08009379
 8007e38:	80002400 	.word	0x80002400

08007e3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d005      	beq.n	8007e68 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	68f9      	ldr	r1, [r7, #12]
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	4798      	blx	r3
  }
}
 8007e68:	bf00      	nop
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f50:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d101      	bne.n	8007f64 <I2C_Slave_ISR_IT+0x24>
 8007f60:	2302      	movs	r3, #2
 8007f62:	e0ec      	b.n	800813e <I2C_Slave_ISR_IT+0x1fe>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	095b      	lsrs	r3, r3, #5
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d009      	beq.n	8007f8c <I2C_Slave_ISR_IT+0x4c>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	095b      	lsrs	r3, r3, #5
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d003      	beq.n	8007f8c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007f84:	6939      	ldr	r1, [r7, #16]
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 fe42 	bl	8008c10 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	091b      	lsrs	r3, r3, #4
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d04d      	beq.n	8008034 <I2C_Slave_ISR_IT+0xf4>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	091b      	lsrs	r3, r3, #4
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d047      	beq.n	8008034 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d128      	bne.n	8008000 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b28      	cmp	r3, #40	; 0x28
 8007fb8:	d108      	bne.n	8007fcc <I2C_Slave_ISR_IT+0x8c>
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fc0:	d104      	bne.n	8007fcc <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007fc2:	6939      	ldr	r1, [r7, #16]
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f001 f81b 	bl	8009000 <I2C_ITListenCplt>
 8007fca:	e032      	b.n	8008032 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b29      	cmp	r3, #41	; 0x29
 8007fd6:	d10e      	bne.n	8007ff6 <I2C_Slave_ISR_IT+0xb6>
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007fde:	d00a      	beq.n	8007ff6 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2210      	movs	r2, #16
 8007fe6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f001 f956 	bl	800929a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 fce5 	bl	80089be <I2C_ITSlaveSeqCplt>
 8007ff4:	e01d      	b.n	8008032 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2210      	movs	r2, #16
 8007ffc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007ffe:	e096      	b.n	800812e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2210      	movs	r2, #16
 8008006:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800800c:	f043 0204 	orr.w	r2, r3, #4
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d004      	beq.n	8008024 <I2C_Slave_ISR_IT+0xe4>
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008020:	f040 8085 	bne.w	800812e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008028:	4619      	mov	r1, r3
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f001 f83e 	bl	80090ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008030:	e07d      	b.n	800812e <I2C_Slave_ISR_IT+0x1ee>
 8008032:	e07c      	b.n	800812e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	089b      	lsrs	r3, r3, #2
 8008038:	f003 0301 	and.w	r3, r3, #1
 800803c:	2b00      	cmp	r3, #0
 800803e:	d030      	beq.n	80080a2 <I2C_Slave_ISR_IT+0x162>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	089b      	lsrs	r3, r3, #2
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b00      	cmp	r3, #0
 800804a:	d02a      	beq.n	80080a2 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008050:	b29b      	uxth	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d018      	beq.n	8008088 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008060:	b2d2      	uxtb	r2, r2
 8008062:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008072:	3b01      	subs	r3, #1
 8008074:	b29a      	uxth	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800807e:	b29b      	uxth	r3, r3
 8008080:	3b01      	subs	r3, #1
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800808c:	b29b      	uxth	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d14f      	bne.n	8008132 <I2C_Slave_ISR_IT+0x1f2>
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008098:	d04b      	beq.n	8008132 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 fc8f 	bl	80089be <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80080a0:	e047      	b.n	8008132 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	08db      	lsrs	r3, r3, #3
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00a      	beq.n	80080c4 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	08db      	lsrs	r3, r3, #3
 80080b2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d004      	beq.n	80080c4 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80080ba:	6939      	ldr	r1, [r7, #16]
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 fbbd 	bl	800883c <I2C_ITAddrCplt>
 80080c2:	e037      	b.n	8008134 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	085b      	lsrs	r3, r3, #1
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d031      	beq.n	8008134 <I2C_Slave_ISR_IT+0x1f4>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	085b      	lsrs	r3, r3, #1
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d02b      	beq.n	8008134 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d018      	beq.n	8008118 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ea:	781a      	ldrb	r2, [r3, #0]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	1c5a      	adds	r2, r3, #1
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b01      	subs	r3, #1
 8008104:	b29a      	uxth	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800810e:	3b01      	subs	r3, #1
 8008110:	b29a      	uxth	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	851a      	strh	r2, [r3, #40]	; 0x28
 8008116:	e00d      	b.n	8008134 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800811e:	d002      	beq.n	8008126 <I2C_Slave_ISR_IT+0x1e6>
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d106      	bne.n	8008134 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 fc49 	bl	80089be <I2C_ITSlaveSeqCplt>
 800812c:	e002      	b.n	8008134 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800812e:	bf00      	nop
 8008130:	e000      	b.n	8008134 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008132:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3718      	adds	r7, #24
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b088      	sub	sp, #32
 800814a:	af02      	add	r7, sp, #8
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008158:	2b01      	cmp	r3, #1
 800815a:	d101      	bne.n	8008160 <I2C_Master_ISR_DMA+0x1a>
 800815c:	2302      	movs	r3, #2
 800815e:	e0e1      	b.n	8008324 <I2C_Master_ISR_DMA+0x1de>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	091b      	lsrs	r3, r3, #4
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	2b00      	cmp	r3, #0
 8008172:	d017      	beq.n	80081a4 <I2C_Master_ISR_DMA+0x5e>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	091b      	lsrs	r3, r3, #4
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d011      	beq.n	80081a4 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2210      	movs	r2, #16
 8008186:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800818c:	f043 0204 	orr.w	r2, r3, #4
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008194:	2120      	movs	r1, #32
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f001 fb94 	bl	80098c4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f001 f87c 	bl	800929a <I2C_Flush_TXDR>
 80081a2:	e0ba      	b.n	800831a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	09db      	lsrs	r3, r3, #7
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d072      	beq.n	8008296 <I2C_Master_ISR_DMA+0x150>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	099b      	lsrs	r3, r3, #6
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d06c      	beq.n	8008296 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081ca:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d04e      	beq.n	8008274 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	b29b      	uxth	r3, r3
 80081de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081e2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	2bff      	cmp	r3, #255	; 0xff
 80081ec:	d906      	bls.n	80081fc <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	22ff      	movs	r2, #255	; 0xff
 80081f2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80081f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081f8:	617b      	str	r3, [r7, #20]
 80081fa:	e010      	b.n	800821e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008200:	b29a      	uxth	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800820e:	d003      	beq.n	8008218 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	e002      	b.n	800821e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008218:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800821c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008222:	b2da      	uxtb	r2, r3
 8008224:	8a79      	ldrh	r1, [r7, #18]
 8008226:	2300      	movs	r3, #0
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f001 fb1b 	bl	8009868 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008236:	b29a      	uxth	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	b29a      	uxth	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b22      	cmp	r3, #34	; 0x22
 800824e:	d108      	bne.n	8008262 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800825e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008260:	e05b      	b.n	800831a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008270:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008272:	e052      	b.n	800831a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800827e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008282:	d003      	beq.n	800828c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 fb5d 	bl	8008944 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800828a:	e046      	b.n	800831a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800828c:	2140      	movs	r1, #64	; 0x40
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 ff0c 	bl	80090ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008294:	e041      	b.n	800831a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	099b      	lsrs	r3, r3, #6
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d029      	beq.n	80082f6 <I2C_Master_ISR_DMA+0x1b0>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	099b      	lsrs	r3, r3, #6
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d023      	beq.n	80082f6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d119      	bne.n	80082ec <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082c6:	d027      	beq.n	8008318 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082d0:	d108      	bne.n	80082e4 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082e0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80082e2:	e019      	b.n	8008318 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 fb2d 	bl	8008944 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80082ea:	e015      	b.n	8008318 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80082ec:	2140      	movs	r1, #64	; 0x40
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f000 fedc 	bl	80090ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80082f4:	e010      	b.n	8008318 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	095b      	lsrs	r3, r3, #5
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00b      	beq.n	800831a <I2C_Master_ISR_DMA+0x1d4>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	095b      	lsrs	r3, r3, #5
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b00      	cmp	r3, #0
 800830c:	d005      	beq.n	800831a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800830e:	68b9      	ldr	r1, [r7, #8]
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 fbb3 	bl	8008a7c <I2C_ITMasterCplt>
 8008316:	e000      	b.n	800831a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8008318:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3718      	adds	r7, #24
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b088      	sub	sp, #32
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800833e:	2300      	movs	r3, #0
 8008340:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008348:	2b01      	cmp	r3, #1
 800834a:	d101      	bne.n	8008350 <I2C_Slave_ISR_DMA+0x24>
 800834c:	2302      	movs	r3, #2
 800834e:	e1c8      	b.n	80086e2 <I2C_Slave_ISR_DMA+0x3b6>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	095b      	lsrs	r3, r3, #5
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	2b00      	cmp	r3, #0
 8008362:	d009      	beq.n	8008378 <I2C_Slave_ISR_DMA+0x4c>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	095b      	lsrs	r3, r3, #5
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b00      	cmp	r3, #0
 800836e:	d003      	beq.n	8008378 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008370:	68b9      	ldr	r1, [r7, #8]
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 fc4c 	bl	8008c10 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	091b      	lsrs	r3, r3, #4
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	2b00      	cmp	r3, #0
 8008382:	f000 8199 	beq.w	80086b8 <I2C_Slave_ISR_DMA+0x38c>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	091b      	lsrs	r3, r3, #4
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 8192 	beq.w	80086b8 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	0b9b      	lsrs	r3, r3, #14
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	d106      	bne.n	80083ae <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	0bdb      	lsrs	r3, r3, #15
 80083a4:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 817e 	beq.w	80086aa <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d07c      	beq.n	80084b0 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	0bdb      	lsrs	r3, r3, #15
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d076      	beq.n	80084b0 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a8d      	ldr	r2, [pc, #564]	; (8008600 <I2C_Slave_ISR_DMA+0x2d4>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d059      	beq.n	8008482 <I2C_Slave_ISR_DMA+0x156>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a8b      	ldr	r2, [pc, #556]	; (8008604 <I2C_Slave_ISR_DMA+0x2d8>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d053      	beq.n	8008482 <I2C_Slave_ISR_DMA+0x156>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a89      	ldr	r2, [pc, #548]	; (8008608 <I2C_Slave_ISR_DMA+0x2dc>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d04d      	beq.n	8008482 <I2C_Slave_ISR_DMA+0x156>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a87      	ldr	r2, [pc, #540]	; (800860c <I2C_Slave_ISR_DMA+0x2e0>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d047      	beq.n	8008482 <I2C_Slave_ISR_DMA+0x156>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a85      	ldr	r2, [pc, #532]	; (8008610 <I2C_Slave_ISR_DMA+0x2e4>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d041      	beq.n	8008482 <I2C_Slave_ISR_DMA+0x156>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a83      	ldr	r2, [pc, #524]	; (8008614 <I2C_Slave_ISR_DMA+0x2e8>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d03b      	beq.n	8008482 <I2C_Slave_ISR_DMA+0x156>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a81      	ldr	r2, [pc, #516]	; (8008618 <I2C_Slave_ISR_DMA+0x2ec>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d035      	beq.n	8008482 <I2C_Slave_ISR_DMA+0x156>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a7f      	ldr	r2, [pc, #508]	; (800861c <I2C_Slave_ISR_DMA+0x2f0>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d02f      	beq.n	8008482 <I2C_Slave_ISR_DMA+0x156>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a7d      	ldr	r2, [pc, #500]	; (8008620 <I2C_Slave_ISR_DMA+0x2f4>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d029      	beq.n	8008482 <I2C_Slave_ISR_DMA+0x156>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a7b      	ldr	r2, [pc, #492]	; (8008624 <I2C_Slave_ISR_DMA+0x2f8>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d023      	beq.n	8008482 <I2C_Slave_ISR_DMA+0x156>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a79      	ldr	r2, [pc, #484]	; (8008628 <I2C_Slave_ISR_DMA+0x2fc>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d01d      	beq.n	8008482 <I2C_Slave_ISR_DMA+0x156>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a77      	ldr	r2, [pc, #476]	; (800862c <I2C_Slave_ISR_DMA+0x300>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d017      	beq.n	8008482 <I2C_Slave_ISR_DMA+0x156>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a75      	ldr	r2, [pc, #468]	; (8008630 <I2C_Slave_ISR_DMA+0x304>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d011      	beq.n	8008482 <I2C_Slave_ISR_DMA+0x156>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a73      	ldr	r2, [pc, #460]	; (8008634 <I2C_Slave_ISR_DMA+0x308>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d00b      	beq.n	8008482 <I2C_Slave_ISR_DMA+0x156>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a71      	ldr	r2, [pc, #452]	; (8008638 <I2C_Slave_ISR_DMA+0x30c>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d005      	beq.n	8008482 <I2C_Slave_ISR_DMA+0x156>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a6f      	ldr	r2, [pc, #444]	; (800863c <I2C_Slave_ISR_DMA+0x310>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d109      	bne.n	8008496 <I2C_Slave_ISR_DMA+0x16a>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	bf0c      	ite	eq
 800848e:	2301      	moveq	r3, #1
 8008490:	2300      	movne	r3, #0
 8008492:	b2db      	uxtb	r3, r3
 8008494:	e008      	b.n	80084a8 <I2C_Slave_ISR_DMA+0x17c>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	bf0c      	ite	eq
 80084a2:	2301      	moveq	r3, #1
 80084a4:	2300      	movne	r3, #0
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 80084ac:	2301      	movs	r3, #1
 80084ae:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d07c      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	0b9b      	lsrs	r3, r3, #14
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d076      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a4d      	ldr	r2, [pc, #308]	; (8008600 <I2C_Slave_ISR_DMA+0x2d4>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d059      	beq.n	8008584 <I2C_Slave_ISR_DMA+0x258>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a4b      	ldr	r2, [pc, #300]	; (8008604 <I2C_Slave_ISR_DMA+0x2d8>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d053      	beq.n	8008584 <I2C_Slave_ISR_DMA+0x258>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a49      	ldr	r2, [pc, #292]	; (8008608 <I2C_Slave_ISR_DMA+0x2dc>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d04d      	beq.n	8008584 <I2C_Slave_ISR_DMA+0x258>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a47      	ldr	r2, [pc, #284]	; (800860c <I2C_Slave_ISR_DMA+0x2e0>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d047      	beq.n	8008584 <I2C_Slave_ISR_DMA+0x258>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a45      	ldr	r2, [pc, #276]	; (8008610 <I2C_Slave_ISR_DMA+0x2e4>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d041      	beq.n	8008584 <I2C_Slave_ISR_DMA+0x258>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a43      	ldr	r2, [pc, #268]	; (8008614 <I2C_Slave_ISR_DMA+0x2e8>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d03b      	beq.n	8008584 <I2C_Slave_ISR_DMA+0x258>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a41      	ldr	r2, [pc, #260]	; (8008618 <I2C_Slave_ISR_DMA+0x2ec>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d035      	beq.n	8008584 <I2C_Slave_ISR_DMA+0x258>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a3f      	ldr	r2, [pc, #252]	; (800861c <I2C_Slave_ISR_DMA+0x2f0>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d02f      	beq.n	8008584 <I2C_Slave_ISR_DMA+0x258>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a3d      	ldr	r2, [pc, #244]	; (8008620 <I2C_Slave_ISR_DMA+0x2f4>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d029      	beq.n	8008584 <I2C_Slave_ISR_DMA+0x258>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a3b      	ldr	r2, [pc, #236]	; (8008624 <I2C_Slave_ISR_DMA+0x2f8>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d023      	beq.n	8008584 <I2C_Slave_ISR_DMA+0x258>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a39      	ldr	r2, [pc, #228]	; (8008628 <I2C_Slave_ISR_DMA+0x2fc>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d01d      	beq.n	8008584 <I2C_Slave_ISR_DMA+0x258>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a37      	ldr	r2, [pc, #220]	; (800862c <I2C_Slave_ISR_DMA+0x300>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d017      	beq.n	8008584 <I2C_Slave_ISR_DMA+0x258>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a35      	ldr	r2, [pc, #212]	; (8008630 <I2C_Slave_ISR_DMA+0x304>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d011      	beq.n	8008584 <I2C_Slave_ISR_DMA+0x258>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a33      	ldr	r2, [pc, #204]	; (8008634 <I2C_Slave_ISR_DMA+0x308>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d00b      	beq.n	8008584 <I2C_Slave_ISR_DMA+0x258>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a31      	ldr	r2, [pc, #196]	; (8008638 <I2C_Slave_ISR_DMA+0x30c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d005      	beq.n	8008584 <I2C_Slave_ISR_DMA+0x258>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a2f      	ldr	r2, [pc, #188]	; (800863c <I2C_Slave_ISR_DMA+0x310>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d109      	bne.n	8008598 <I2C_Slave_ISR_DMA+0x26c>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	bf0c      	ite	eq
 8008590:	2301      	moveq	r3, #1
 8008592:	2300      	movne	r3, #0
 8008594:	b2db      	uxtb	r3, r3
 8008596:	e008      	b.n	80085aa <I2C_Slave_ISR_DMA+0x27e>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	bf0c      	ite	eq
 80085a4:	2301      	moveq	r3, #1
 80085a6:	2300      	movne	r3, #0
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 80085ae:	2301      	movs	r3, #1
 80085b0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d148      	bne.n	800864a <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b28      	cmp	r3, #40	; 0x28
 80085c2:	d108      	bne.n	80085d6 <I2C_Slave_ISR_DMA+0x2aa>
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085ca:	d104      	bne.n	80085d6 <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fd16 	bl	8009000 <I2C_ITListenCplt>
 80085d4:	e068      	b.n	80086a8 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b29      	cmp	r3, #41	; 0x29
 80085e0:	d12e      	bne.n	8008640 <I2C_Slave_ISR_DMA+0x314>
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80085e8:	d02a      	beq.n	8008640 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2210      	movs	r2, #16
 80085f0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 fe51 	bl	800929a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 f9e0 	bl	80089be <I2C_ITSlaveSeqCplt>
 80085fe:	e053      	b.n	80086a8 <I2C_Slave_ISR_DMA+0x37c>
 8008600:	40020010 	.word	0x40020010
 8008604:	40020028 	.word	0x40020028
 8008608:	40020040 	.word	0x40020040
 800860c:	40020058 	.word	0x40020058
 8008610:	40020070 	.word	0x40020070
 8008614:	40020088 	.word	0x40020088
 8008618:	400200a0 	.word	0x400200a0
 800861c:	400200b8 	.word	0x400200b8
 8008620:	40020410 	.word	0x40020410
 8008624:	40020428 	.word	0x40020428
 8008628:	40020440 	.word	0x40020440
 800862c:	40020458 	.word	0x40020458
 8008630:	40020470 	.word	0x40020470
 8008634:	40020488 	.word	0x40020488
 8008638:	400204a0 	.word	0x400204a0
 800863c:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2210      	movs	r2, #16
 8008646:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008648:	e034      	b.n	80086b4 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2210      	movs	r2, #16
 8008650:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008656:	f043 0204 	orr.w	r2, r3, #4
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008664:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <I2C_Slave_ISR_DMA+0x348>
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008672:	d11f      	bne.n	80086b4 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008674:	7dfb      	ldrb	r3, [r7, #23]
 8008676:	2b21      	cmp	r3, #33	; 0x21
 8008678:	d002      	beq.n	8008680 <I2C_Slave_ISR_DMA+0x354>
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	2b29      	cmp	r3, #41	; 0x29
 800867e:	d103      	bne.n	8008688 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2221      	movs	r2, #33	; 0x21
 8008684:	631a      	str	r2, [r3, #48]	; 0x30
 8008686:	e008      	b.n	800869a <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008688:	7dfb      	ldrb	r3, [r7, #23]
 800868a:	2b22      	cmp	r3, #34	; 0x22
 800868c:	d002      	beq.n	8008694 <I2C_Slave_ISR_DMA+0x368>
 800868e:	7dfb      	ldrb	r3, [r7, #23]
 8008690:	2b2a      	cmp	r3, #42	; 0x2a
 8008692:	d102      	bne.n	800869a <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2222      	movs	r2, #34	; 0x22
 8008698:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800869e:	4619      	mov	r1, r3
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 fd03 	bl	80090ac <I2C_ITError>
      if (treatdmanack == 1U)
 80086a6:	e005      	b.n	80086b4 <I2C_Slave_ISR_DMA+0x388>
 80086a8:	e004      	b.n	80086b4 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2210      	movs	r2, #16
 80086b0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80086b2:	e011      	b.n	80086d8 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 80086b4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80086b6:	e00f      	b.n	80086d8 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	08db      	lsrs	r3, r3, #3
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d009      	beq.n	80086d8 <I2C_Slave_ISR_DMA+0x3ac>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	08db      	lsrs	r3, r3, #3
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d003      	beq.n	80086d8 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80086d0:	68b9      	ldr	r1, [r7, #8]
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f000 f8b2 	bl	800883c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3720      	adds	r7, #32
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop

080086ec <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af02      	add	r7, sp, #8
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	4608      	mov	r0, r1
 80086f6:	4611      	mov	r1, r2
 80086f8:	461a      	mov	r2, r3
 80086fa:	4603      	mov	r3, r0
 80086fc:	817b      	strh	r3, [r7, #10]
 80086fe:	460b      	mov	r3, r1
 8008700:	813b      	strh	r3, [r7, #8]
 8008702:	4613      	mov	r3, r2
 8008704:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008706:	88fb      	ldrh	r3, [r7, #6]
 8008708:	b2da      	uxtb	r2, r3
 800870a:	8979      	ldrh	r1, [r7, #10]
 800870c:	4b20      	ldr	r3, [pc, #128]	; (8008790 <I2C_RequestMemoryWrite+0xa4>)
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f001 f8a7 	bl	8009868 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800871a:	69fa      	ldr	r2, [r7, #28]
 800871c:	69b9      	ldr	r1, [r7, #24]
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f000 ffc0 	bl	80096a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e02c      	b.n	8008788 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800872e:	88fb      	ldrh	r3, [r7, #6]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d105      	bne.n	8008740 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008734:	893b      	ldrh	r3, [r7, #8]
 8008736:	b2da      	uxtb	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	629a      	str	r2, [r3, #40]	; 0x28
 800873e:	e015      	b.n	800876c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008740:	893b      	ldrh	r3, [r7, #8]
 8008742:	0a1b      	lsrs	r3, r3, #8
 8008744:	b29b      	uxth	r3, r3
 8008746:	b2da      	uxtb	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800874e:	69fa      	ldr	r2, [r7, #28]
 8008750:	69b9      	ldr	r1, [r7, #24]
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 ffa6 	bl	80096a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e012      	b.n	8008788 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008762:	893b      	ldrh	r3, [r7, #8]
 8008764:	b2da      	uxtb	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	2200      	movs	r2, #0
 8008774:	2180      	movs	r1, #128	; 0x80
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 ff54 	bl	8009624 <I2C_WaitOnFlagUntilTimeout>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d001      	beq.n	8008786 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e000      	b.n	8008788 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	80002000 	.word	0x80002000

08008794 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af02      	add	r7, sp, #8
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	4608      	mov	r0, r1
 800879e:	4611      	mov	r1, r2
 80087a0:	461a      	mov	r2, r3
 80087a2:	4603      	mov	r3, r0
 80087a4:	817b      	strh	r3, [r7, #10]
 80087a6:	460b      	mov	r3, r1
 80087a8:	813b      	strh	r3, [r7, #8]
 80087aa:	4613      	mov	r3, r2
 80087ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80087ae:	88fb      	ldrh	r3, [r7, #6]
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	8979      	ldrh	r1, [r7, #10]
 80087b4:	4b20      	ldr	r3, [pc, #128]	; (8008838 <I2C_RequestMemoryRead+0xa4>)
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	2300      	movs	r3, #0
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f001 f854 	bl	8009868 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	69b9      	ldr	r1, [r7, #24]
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 ff6d 	bl	80096a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e02c      	b.n	800882e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087d4:	88fb      	ldrh	r3, [r7, #6]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d105      	bne.n	80087e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80087da:	893b      	ldrh	r3, [r7, #8]
 80087dc:	b2da      	uxtb	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	629a      	str	r2, [r3, #40]	; 0x28
 80087e4:	e015      	b.n	8008812 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80087e6:	893b      	ldrh	r3, [r7, #8]
 80087e8:	0a1b      	lsrs	r3, r3, #8
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087f4:	69fa      	ldr	r2, [r7, #28]
 80087f6:	69b9      	ldr	r1, [r7, #24]
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 ff53 	bl	80096a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e012      	b.n	800882e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008808:	893b      	ldrh	r3, [r7, #8]
 800880a:	b2da      	uxtb	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	2200      	movs	r2, #0
 800881a:	2140      	movs	r1, #64	; 0x40
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 ff01 	bl	8009624 <I2C_WaitOnFlagUntilTimeout>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e000      	b.n	800882e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	80002000 	.word	0x80002000

0800883c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800884c:	b2db      	uxtb	r3, r3
 800884e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008852:	2b28      	cmp	r3, #40	; 0x28
 8008854:	d16a      	bne.n	800892c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	0c1b      	lsrs	r3, r3, #16
 800885e:	b2db      	uxtb	r3, r3
 8008860:	f003 0301 	and.w	r3, r3, #1
 8008864:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	0c1b      	lsrs	r3, r3, #16
 800886e:	b29b      	uxth	r3, r3
 8008870:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008874:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	b29b      	uxth	r3, r3
 800887e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008882:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	b29b      	uxth	r3, r3
 800888c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008890:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	2b02      	cmp	r3, #2
 8008898:	d138      	bne.n	800890c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800889a:	897b      	ldrh	r3, [r7, #10]
 800889c:	09db      	lsrs	r3, r3, #7
 800889e:	b29a      	uxth	r2, r3
 80088a0:	89bb      	ldrh	r3, [r7, #12]
 80088a2:	4053      	eors	r3, r2
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	f003 0306 	and.w	r3, r3, #6
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d11c      	bne.n	80088e8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80088ae:	897b      	ldrh	r3, [r7, #10]
 80088b0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b6:	1c5a      	adds	r2, r3, #1
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d13b      	bne.n	800893c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2208      	movs	r2, #8
 80088d0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80088da:	89ba      	ldrh	r2, [r7, #12]
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff faed 	bl	8007ec0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80088e6:	e029      	b.n	800893c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80088e8:	893b      	ldrh	r3, [r7, #8]
 80088ea:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80088ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 f84b 	bl	800998c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80088fe:	89ba      	ldrh	r2, [r7, #12]
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7ff fadb 	bl	8007ec0 <HAL_I2C_AddrCallback>
}
 800890a:	e017      	b.n	800893c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800890c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f001 f83b 	bl	800998c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800891e:	89ba      	ldrh	r2, [r7, #12]
 8008920:	7bfb      	ldrb	r3, [r7, #15]
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff facb 	bl	8007ec0 <HAL_I2C_AddrCallback>
}
 800892a:	e007      	b.n	800893c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2208      	movs	r2, #8
 8008932:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800893c:	bf00      	nop
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b21      	cmp	r3, #33	; 0x21
 800895e:	d115      	bne.n	800898c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2220      	movs	r2, #32
 8008964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2211      	movs	r2, #17
 800896c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008974:	2101      	movs	r1, #1
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f001 f808 	bl	800998c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7ff fa73 	bl	8007e70 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800898a:	e014      	b.n	80089b6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2220      	movs	r2, #32
 8008990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2212      	movs	r2, #18
 8008998:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80089a0:	2102      	movs	r1, #2
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fff2 	bl	800998c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff fa67 	bl	8007e84 <HAL_I2C_MasterRxCpltCallback>
}
 80089b6:	bf00      	nop
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	0b9b      	lsrs	r3, r3, #14
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d008      	beq.n	80089f4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	e00d      	b.n	8008a10 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	0bdb      	lsrs	r3, r3, #15
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d007      	beq.n	8008a10 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a0e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b29      	cmp	r3, #41	; 0x29
 8008a1a:	d112      	bne.n	8008a42 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2228      	movs	r2, #40	; 0x28
 8008a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2221      	movs	r2, #33	; 0x21
 8008a28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 ffad 	bl	800998c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7ff fa2c 	bl	8007e98 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008a40:	e017      	b.n	8008a72 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a4c:	d111      	bne.n	8008a72 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2228      	movs	r2, #40	; 0x28
 8008a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2222      	movs	r2, #34	; 0x22
 8008a5a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008a5c:	2102      	movs	r1, #2
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 ff94 	bl	800998c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7ff fa1d 	bl	8007eac <HAL_I2C_SlaveRxCpltCallback>
}
 8008a72:	bf00      	nop
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
	...

08008a7c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2220      	movs	r2, #32
 8008a90:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b21      	cmp	r3, #33	; 0x21
 8008a9c:	d107      	bne.n	8008aae <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 ff73 	bl	800998c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2211      	movs	r2, #17
 8008aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8008aac:	e00c      	b.n	8008ac8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b22      	cmp	r3, #34	; 0x22
 8008ab8:	d106      	bne.n	8008ac8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008aba:	2102      	movs	r1, #2
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 ff65 	bl	800998c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2212      	movs	r2, #18
 8008ac6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6859      	ldr	r1, [r3, #4]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	4b4d      	ldr	r3, [pc, #308]	; (8008c08 <I2C_ITMasterCplt+0x18c>)
 8008ad4:	400b      	ands	r3, r1
 8008ad6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a4a      	ldr	r2, [pc, #296]	; (8008c0c <I2C_ITMasterCplt+0x190>)
 8008ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	091b      	lsrs	r3, r3, #4
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d009      	beq.n	8008b04 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2210      	movs	r2, #16
 8008af6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008afc:	f043 0204 	orr.w	r2, r3, #4
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b60      	cmp	r3, #96	; 0x60
 8008b0e:	d10b      	bne.n	8008b28 <I2C_ITMasterCplt+0xac>
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	089b      	lsrs	r3, r3, #2
 8008b14:	f003 0301 	and.w	r3, r3, #1
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d005      	beq.n	8008b28 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008b26:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fbb6 	bl	800929a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b32:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b60      	cmp	r3, #96	; 0x60
 8008b3e:	d002      	beq.n	8008b46 <I2C_ITMasterCplt+0xca>
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d006      	beq.n	8008b54 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 faad 	bl	80090ac <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b52:	e054      	b.n	8008bfe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b21      	cmp	r3, #33	; 0x21
 8008b5e:	d124      	bne.n	8008baa <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2220      	movs	r2, #32
 8008b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b40      	cmp	r3, #64	; 0x40
 8008b78:	d10b      	bne.n	8008b92 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7ff f9b0 	bl	8007ef0 <HAL_I2C_MemTxCpltCallback>
}
 8008b90:	e035      	b.n	8008bfe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7ff f964 	bl	8007e70 <HAL_I2C_MasterTxCpltCallback>
}
 8008ba8:	e029      	b.n	8008bfe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b22      	cmp	r3, #34	; 0x22
 8008bb4:	d123      	bne.n	8008bfe <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2220      	movs	r2, #32
 8008bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b40      	cmp	r3, #64	; 0x40
 8008bce:	d10b      	bne.n	8008be8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7ff f98f 	bl	8007f04 <HAL_I2C_MemRxCpltCallback>
}
 8008be6:	e00a      	b.n	8008bfe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7ff f943 	bl	8007e84 <HAL_I2C_MasterRxCpltCallback>
}
 8008bfe:	bf00      	nop
 8008c00:	3718      	adds	r7, #24
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	fe00e800 	.word	0xfe00e800
 8008c0c:	ffff0000 	.word	0xffff0000

08008c10 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c2c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2220      	movs	r2, #32
 8008c34:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	2b21      	cmp	r3, #33	; 0x21
 8008c3a:	d002      	beq.n	8008c42 <I2C_ITSlaveCplt+0x32>
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
 8008c3e:	2b29      	cmp	r3, #41	; 0x29
 8008c40:	d108      	bne.n	8008c54 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008c42:	f248 0101 	movw	r1, #32769	; 0x8001
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fea0 	bl	800998c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2221      	movs	r2, #33	; 0x21
 8008c50:	631a      	str	r2, [r3, #48]	; 0x30
 8008c52:	e00d      	b.n	8008c70 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	2b22      	cmp	r3, #34	; 0x22
 8008c58:	d002      	beq.n	8008c60 <I2C_ITSlaveCplt+0x50>
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c5e:	d107      	bne.n	8008c70 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008c60:	f248 0102 	movw	r1, #32770	; 0x8002
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fe91 	bl	800998c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2222      	movs	r2, #34	; 0x22
 8008c6e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c7e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6859      	ldr	r1, [r3, #4]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	4b80      	ldr	r3, [pc, #512]	; (8008e8c <I2C_ITSlaveCplt+0x27c>)
 8008c8c:	400b      	ands	r3, r1
 8008c8e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fb02 	bl	800929a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	0b9b      	lsrs	r3, r3, #14
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d07a      	beq.n	8008d98 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008cb0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f000 8111 	beq.w	8008ede <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a73      	ldr	r2, [pc, #460]	; (8008e90 <I2C_ITSlaveCplt+0x280>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d059      	beq.n	8008d7c <I2C_ITSlaveCplt+0x16c>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a71      	ldr	r2, [pc, #452]	; (8008e94 <I2C_ITSlaveCplt+0x284>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d053      	beq.n	8008d7c <I2C_ITSlaveCplt+0x16c>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a6f      	ldr	r2, [pc, #444]	; (8008e98 <I2C_ITSlaveCplt+0x288>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d04d      	beq.n	8008d7c <I2C_ITSlaveCplt+0x16c>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a6d      	ldr	r2, [pc, #436]	; (8008e9c <I2C_ITSlaveCplt+0x28c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d047      	beq.n	8008d7c <I2C_ITSlaveCplt+0x16c>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a6b      	ldr	r2, [pc, #428]	; (8008ea0 <I2C_ITSlaveCplt+0x290>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d041      	beq.n	8008d7c <I2C_ITSlaveCplt+0x16c>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a69      	ldr	r2, [pc, #420]	; (8008ea4 <I2C_ITSlaveCplt+0x294>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d03b      	beq.n	8008d7c <I2C_ITSlaveCplt+0x16c>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a67      	ldr	r2, [pc, #412]	; (8008ea8 <I2C_ITSlaveCplt+0x298>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d035      	beq.n	8008d7c <I2C_ITSlaveCplt+0x16c>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a65      	ldr	r2, [pc, #404]	; (8008eac <I2C_ITSlaveCplt+0x29c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d02f      	beq.n	8008d7c <I2C_ITSlaveCplt+0x16c>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a63      	ldr	r2, [pc, #396]	; (8008eb0 <I2C_ITSlaveCplt+0x2a0>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d029      	beq.n	8008d7c <I2C_ITSlaveCplt+0x16c>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a61      	ldr	r2, [pc, #388]	; (8008eb4 <I2C_ITSlaveCplt+0x2a4>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d023      	beq.n	8008d7c <I2C_ITSlaveCplt+0x16c>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a5f      	ldr	r2, [pc, #380]	; (8008eb8 <I2C_ITSlaveCplt+0x2a8>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d01d      	beq.n	8008d7c <I2C_ITSlaveCplt+0x16c>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a5d      	ldr	r2, [pc, #372]	; (8008ebc <I2C_ITSlaveCplt+0x2ac>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d017      	beq.n	8008d7c <I2C_ITSlaveCplt+0x16c>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a5b      	ldr	r2, [pc, #364]	; (8008ec0 <I2C_ITSlaveCplt+0x2b0>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d011      	beq.n	8008d7c <I2C_ITSlaveCplt+0x16c>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a59      	ldr	r2, [pc, #356]	; (8008ec4 <I2C_ITSlaveCplt+0x2b4>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d00b      	beq.n	8008d7c <I2C_ITSlaveCplt+0x16c>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a57      	ldr	r2, [pc, #348]	; (8008ec8 <I2C_ITSlaveCplt+0x2b8>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d005      	beq.n	8008d7c <I2C_ITSlaveCplt+0x16c>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a55      	ldr	r2, [pc, #340]	; (8008ecc <I2C_ITSlaveCplt+0x2bc>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d105      	bne.n	8008d88 <I2C_ITSlaveCplt+0x178>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	e004      	b.n	8008d92 <I2C_ITSlaveCplt+0x182>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	8553      	strh	r3, [r2, #42]	; 0x2a
 8008d96:	e0a2      	b.n	8008ede <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	0bdb      	lsrs	r3, r3, #15
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 809c 	beq.w	8008ede <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008db4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 808f 	beq.w	8008ede <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a32      	ldr	r2, [pc, #200]	; (8008e90 <I2C_ITSlaveCplt+0x280>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d059      	beq.n	8008e80 <I2C_ITSlaveCplt+0x270>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a30      	ldr	r2, [pc, #192]	; (8008e94 <I2C_ITSlaveCplt+0x284>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d053      	beq.n	8008e80 <I2C_ITSlaveCplt+0x270>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a2e      	ldr	r2, [pc, #184]	; (8008e98 <I2C_ITSlaveCplt+0x288>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d04d      	beq.n	8008e80 <I2C_ITSlaveCplt+0x270>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a2c      	ldr	r2, [pc, #176]	; (8008e9c <I2C_ITSlaveCplt+0x28c>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d047      	beq.n	8008e80 <I2C_ITSlaveCplt+0x270>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a2a      	ldr	r2, [pc, #168]	; (8008ea0 <I2C_ITSlaveCplt+0x290>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d041      	beq.n	8008e80 <I2C_ITSlaveCplt+0x270>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a28      	ldr	r2, [pc, #160]	; (8008ea4 <I2C_ITSlaveCplt+0x294>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d03b      	beq.n	8008e80 <I2C_ITSlaveCplt+0x270>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a26      	ldr	r2, [pc, #152]	; (8008ea8 <I2C_ITSlaveCplt+0x298>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d035      	beq.n	8008e80 <I2C_ITSlaveCplt+0x270>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a24      	ldr	r2, [pc, #144]	; (8008eac <I2C_ITSlaveCplt+0x29c>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d02f      	beq.n	8008e80 <I2C_ITSlaveCplt+0x270>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a22      	ldr	r2, [pc, #136]	; (8008eb0 <I2C_ITSlaveCplt+0x2a0>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d029      	beq.n	8008e80 <I2C_ITSlaveCplt+0x270>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a20      	ldr	r2, [pc, #128]	; (8008eb4 <I2C_ITSlaveCplt+0x2a4>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d023      	beq.n	8008e80 <I2C_ITSlaveCplt+0x270>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a1e      	ldr	r2, [pc, #120]	; (8008eb8 <I2C_ITSlaveCplt+0x2a8>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d01d      	beq.n	8008e80 <I2C_ITSlaveCplt+0x270>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a1c      	ldr	r2, [pc, #112]	; (8008ebc <I2C_ITSlaveCplt+0x2ac>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d017      	beq.n	8008e80 <I2C_ITSlaveCplt+0x270>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a1a      	ldr	r2, [pc, #104]	; (8008ec0 <I2C_ITSlaveCplt+0x2b0>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d011      	beq.n	8008e80 <I2C_ITSlaveCplt+0x270>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a18      	ldr	r2, [pc, #96]	; (8008ec4 <I2C_ITSlaveCplt+0x2b4>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d00b      	beq.n	8008e80 <I2C_ITSlaveCplt+0x270>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a16      	ldr	r2, [pc, #88]	; (8008ec8 <I2C_ITSlaveCplt+0x2b8>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d005      	beq.n	8008e80 <I2C_ITSlaveCplt+0x270>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a14      	ldr	r2, [pc, #80]	; (8008ecc <I2C_ITSlaveCplt+0x2bc>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d127      	bne.n	8008ed0 <I2C_ITSlaveCplt+0x2c0>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	e026      	b.n	8008eda <I2C_ITSlaveCplt+0x2ca>
 8008e8c:	fe00e800 	.word	0xfe00e800
 8008e90:	40020010 	.word	0x40020010
 8008e94:	40020028 	.word	0x40020028
 8008e98:	40020040 	.word	0x40020040
 8008e9c:	40020058 	.word	0x40020058
 8008ea0:	40020070 	.word	0x40020070
 8008ea4:	40020088 	.word	0x40020088
 8008ea8:	400200a0 	.word	0x400200a0
 8008eac:	400200b8 	.word	0x400200b8
 8008eb0:	40020410 	.word	0x40020410
 8008eb4:	40020428 	.word	0x40020428
 8008eb8:	40020440 	.word	0x40020440
 8008ebc:	40020458 	.word	0x40020458
 8008ec0:	40020470 	.word	0x40020470
 8008ec4:	40020488 	.word	0x40020488
 8008ec8:	400204a0 	.word	0x400204a0
 8008ecc:	400204b8 	.word	0x400204b8
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	089b      	lsrs	r3, r3, #2
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d020      	beq.n	8008f2c <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f023 0304 	bic.w	r3, r3, #4
 8008ef0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	b2d2      	uxtb	r2, r2
 8008efe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00c      	beq.n	8008f2c <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f16:	3b01      	subs	r3, #1
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	3b01      	subs	r3, #1
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d005      	beq.n	8008f42 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f3a:	f043 0204 	orr.w	r2, r3, #4
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d010      	beq.n	8008f7a <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f8a4 	bl	80090ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b28      	cmp	r3, #40	; 0x28
 8008f6e:	d141      	bne.n	8008ff4 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008f70:	6979      	ldr	r1, [r7, #20]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f844 	bl	8009000 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008f78:	e03c      	b.n	8008ff4 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f82:	d014      	beq.n	8008fae <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff fd1a 	bl	80089be <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a1b      	ldr	r2, [pc, #108]	; (8008ffc <I2C_ITSlaveCplt+0x3ec>)
 8008f8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2220      	movs	r2, #32
 8008f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7fe ff98 	bl	8007edc <HAL_I2C_ListenCpltCallback>
}
 8008fac:	e022      	b.n	8008ff4 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b22      	cmp	r3, #34	; 0x22
 8008fb8:	d10e      	bne.n	8008fd8 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f7fe ff6b 	bl	8007eac <HAL_I2C_SlaveRxCpltCallback>
}
 8008fd6:	e00d      	b.n	8008ff4 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2220      	movs	r2, #32
 8008fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7fe ff52 	bl	8007e98 <HAL_I2C_SlaveTxCpltCallback>
}
 8008ff4:	bf00      	nop
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	ffff0000 	.word	0xffff0000

08009000 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a26      	ldr	r2, [pc, #152]	; (80090a8 <I2C_ITListenCplt+0xa8>)
 800900e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2220      	movs	r2, #32
 800901a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	089b      	lsrs	r3, r3, #2
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	2b00      	cmp	r3, #0
 8009036:	d022      	beq.n	800907e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	b2d2      	uxtb	r2, r2
 8009044:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009054:	2b00      	cmp	r3, #0
 8009056:	d012      	beq.n	800907e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800905c:	3b01      	subs	r3, #1
 800905e:	b29a      	uxth	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009068:	b29b      	uxth	r3, r3
 800906a:	3b01      	subs	r3, #1
 800906c:	b29a      	uxth	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009076:	f043 0204 	orr.w	r2, r3, #4
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800907e:	f248 0103 	movw	r1, #32771	; 0x8003
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fc82 	bl	800998c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2210      	movs	r2, #16
 800908e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7fe ff1f 	bl	8007edc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800909e:	bf00      	nop
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	ffff0000 	.word	0xffff0000

080090ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a5d      	ldr	r2, [pc, #372]	; (8009240 <I2C_ITError+0x194>)
 80090ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	431a      	orrs	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80090de:	7bfb      	ldrb	r3, [r7, #15]
 80090e0:	2b28      	cmp	r3, #40	; 0x28
 80090e2:	d005      	beq.n	80090f0 <I2C_ITError+0x44>
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	2b29      	cmp	r3, #41	; 0x29
 80090e8:	d002      	beq.n	80090f0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	2b2a      	cmp	r3, #42	; 0x2a
 80090ee:	d10b      	bne.n	8009108 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80090f0:	2103      	movs	r1, #3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fc4a 	bl	800998c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2228      	movs	r2, #40	; 0x28
 80090fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a50      	ldr	r2, [pc, #320]	; (8009244 <I2C_ITError+0x198>)
 8009104:	635a      	str	r2, [r3, #52]	; 0x34
 8009106:	e011      	b.n	800912c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009108:	f248 0103 	movw	r1, #32771	; 0x8003
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fc3d 	bl	800998c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b60      	cmp	r3, #96	; 0x60
 800911c:	d003      	beq.n	8009126 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2220      	movs	r2, #32
 8009122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009130:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009136:	2b00      	cmp	r3, #0
 8009138:	d039      	beq.n	80091ae <I2C_ITError+0x102>
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2b11      	cmp	r3, #17
 800913e:	d002      	beq.n	8009146 <I2C_ITError+0x9a>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2b21      	cmp	r3, #33	; 0x21
 8009144:	d133      	bne.n	80091ae <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009154:	d107      	bne.n	8009166 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009164:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916a:	4618      	mov	r0, r3
 800916c:	f7fd fcca 	bl	8006b04 <HAL_DMA_GetState>
 8009170:	4603      	mov	r3, r0
 8009172:	2b01      	cmp	r3, #1
 8009174:	d017      	beq.n	80091a6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917a:	4a33      	ldr	r2, [pc, #204]	; (8009248 <I2C_ITError+0x19c>)
 800917c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918a:	4618      	mov	r0, r3
 800918c:	f7fc fb4c 	bl	8005828 <HAL_DMA_Abort_IT>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d04d      	beq.n	8009232 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80091a0:	4610      	mov	r0, r2
 80091a2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80091a4:	e045      	b.n	8009232 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f850 	bl	800924c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80091ac:	e041      	b.n	8009232 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d039      	beq.n	800922a <I2C_ITError+0x17e>
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2b12      	cmp	r3, #18
 80091ba:	d002      	beq.n	80091c2 <I2C_ITError+0x116>
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	2b22      	cmp	r3, #34	; 0x22
 80091c0:	d133      	bne.n	800922a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091d0:	d107      	bne.n	80091e2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091e0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fd fc8c 	bl	8006b04 <HAL_DMA_GetState>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d017      	beq.n	8009222 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091f6:	4a14      	ldr	r2, [pc, #80]	; (8009248 <I2C_ITError+0x19c>)
 80091f8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009206:	4618      	mov	r0, r3
 8009208:	f7fc fb0e 	bl	8005828 <HAL_DMA_Abort_IT>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d011      	beq.n	8009236 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800921c:	4610      	mov	r0, r2
 800921e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009220:	e009      	b.n	8009236 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f812 	bl	800924c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009228:	e005      	b.n	8009236 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f80e 	bl	800924c <I2C_TreatErrorCallback>
  }
}
 8009230:	e002      	b.n	8009238 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009232:	bf00      	nop
 8009234:	e000      	b.n	8009238 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009236:	bf00      	nop
}
 8009238:	bf00      	nop
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	ffff0000 	.word	0xffff0000
 8009244:	08007f41 	.word	0x08007f41
 8009248:	080095e9 	.word	0x080095e9

0800924c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b60      	cmp	r3, #96	; 0x60
 800925e:	d10e      	bne.n	800927e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2220      	movs	r2, #32
 8009264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7fe fe58 	bl	8007f2c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800927c:	e009      	b.n	8009292 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7fe fe43 	bl	8007f18 <HAL_I2C_ErrorCallback>
}
 8009292:	bf00      	nop
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800929a:	b480      	push	{r7}
 800929c:	b083      	sub	sp, #12
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	f003 0302 	and.w	r3, r3, #2
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d103      	bne.n	80092b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2200      	movs	r2, #0
 80092b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	f003 0301 	and.w	r3, r3, #1
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d007      	beq.n	80092d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	699a      	ldr	r2, [r3, #24]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f042 0201 	orr.w	r2, r2, #1
 80092d4:	619a      	str	r2, [r3, #24]
  }
}
 80092d6:	bf00      	nop
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ee:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092fe:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009304:	b29b      	uxth	r3, r3
 8009306:	2b00      	cmp	r3, #0
 8009308:	d104      	bne.n	8009314 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800930a:	2120      	movs	r1, #32
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f000 fad9 	bl	80098c4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009312:	e02d      	b.n	8009370 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800931c:	441a      	add	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009326:	b29b      	uxth	r3, r3
 8009328:	2bff      	cmp	r3, #255	; 0xff
 800932a:	d903      	bls.n	8009334 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	22ff      	movs	r2, #255	; 0xff
 8009330:	851a      	strh	r2, [r3, #40]	; 0x28
 8009332:	e004      	b.n	800933e <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009338:	b29a      	uxth	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3324      	adds	r3, #36	; 0x24
 8009348:	4619      	mov	r1, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934e:	461a      	mov	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009354:	f7fb fce0 	bl	8004d18 <HAL_DMA_Start_IT>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d004      	beq.n	8009368 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800935e:	2110      	movs	r1, #16
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7ff fea3 	bl	80090ac <I2C_ITError>
}
 8009366:	e003      	b.n	8009370 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009368:	2140      	movs	r1, #64	; 0x40
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f000 faaa 	bl	80098c4 <I2C_Enable_IRQ>
}
 8009370:	bf00      	nop
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8009380:	2300      	movs	r3, #0
 8009382:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009388:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938e:	2b00      	cmp	r3, #0
 8009390:	d076      	beq.n	8009480 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a83      	ldr	r2, [pc, #524]	; (80095a8 <I2C_DMAError+0x230>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d059      	beq.n	8009452 <I2C_DMAError+0xda>
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a81      	ldr	r2, [pc, #516]	; (80095ac <I2C_DMAError+0x234>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d053      	beq.n	8009452 <I2C_DMAError+0xda>
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a7f      	ldr	r2, [pc, #508]	; (80095b0 <I2C_DMAError+0x238>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d04d      	beq.n	8009452 <I2C_DMAError+0xda>
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a7d      	ldr	r2, [pc, #500]	; (80095b4 <I2C_DMAError+0x23c>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d047      	beq.n	8009452 <I2C_DMAError+0xda>
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a7b      	ldr	r2, [pc, #492]	; (80095b8 <I2C_DMAError+0x240>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d041      	beq.n	8009452 <I2C_DMAError+0xda>
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a79      	ldr	r2, [pc, #484]	; (80095bc <I2C_DMAError+0x244>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d03b      	beq.n	8009452 <I2C_DMAError+0xda>
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a77      	ldr	r2, [pc, #476]	; (80095c0 <I2C_DMAError+0x248>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d035      	beq.n	8009452 <I2C_DMAError+0xda>
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a75      	ldr	r2, [pc, #468]	; (80095c4 <I2C_DMAError+0x24c>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d02f      	beq.n	8009452 <I2C_DMAError+0xda>
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a73      	ldr	r2, [pc, #460]	; (80095c8 <I2C_DMAError+0x250>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d029      	beq.n	8009452 <I2C_DMAError+0xda>
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a71      	ldr	r2, [pc, #452]	; (80095cc <I2C_DMAError+0x254>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d023      	beq.n	8009452 <I2C_DMAError+0xda>
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a6f      	ldr	r2, [pc, #444]	; (80095d0 <I2C_DMAError+0x258>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d01d      	beq.n	8009452 <I2C_DMAError+0xda>
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a6d      	ldr	r2, [pc, #436]	; (80095d4 <I2C_DMAError+0x25c>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d017      	beq.n	8009452 <I2C_DMAError+0xda>
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a6b      	ldr	r2, [pc, #428]	; (80095d8 <I2C_DMAError+0x260>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d011      	beq.n	8009452 <I2C_DMAError+0xda>
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a69      	ldr	r2, [pc, #420]	; (80095dc <I2C_DMAError+0x264>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d00b      	beq.n	8009452 <I2C_DMAError+0xda>
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a67      	ldr	r2, [pc, #412]	; (80095e0 <I2C_DMAError+0x268>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d005      	beq.n	8009452 <I2C_DMAError+0xda>
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a65      	ldr	r2, [pc, #404]	; (80095e4 <I2C_DMAError+0x26c>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d109      	bne.n	8009466 <I2C_DMAError+0xee>
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	bf0c      	ite	eq
 800945e:	2301      	moveq	r3, #1
 8009460:	2300      	movne	r3, #0
 8009462:	b2db      	uxtb	r3, r3
 8009464:	e008      	b.n	8009478 <I2C_DMAError+0x100>
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	bf0c      	ite	eq
 8009472:	2301      	moveq	r3, #1
 8009474:	2300      	movne	r3, #0
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b00      	cmp	r3, #0
 800947a:	d001      	beq.n	8009480 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800947c:	2301      	movs	r3, #1
 800947e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009484:	2b00      	cmp	r3, #0
 8009486:	d076      	beq.n	8009576 <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a46      	ldr	r2, [pc, #280]	; (80095a8 <I2C_DMAError+0x230>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d059      	beq.n	8009548 <I2C_DMAError+0x1d0>
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a44      	ldr	r2, [pc, #272]	; (80095ac <I2C_DMAError+0x234>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d053      	beq.n	8009548 <I2C_DMAError+0x1d0>
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a42      	ldr	r2, [pc, #264]	; (80095b0 <I2C_DMAError+0x238>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d04d      	beq.n	8009548 <I2C_DMAError+0x1d0>
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a40      	ldr	r2, [pc, #256]	; (80095b4 <I2C_DMAError+0x23c>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d047      	beq.n	8009548 <I2C_DMAError+0x1d0>
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a3e      	ldr	r2, [pc, #248]	; (80095b8 <I2C_DMAError+0x240>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d041      	beq.n	8009548 <I2C_DMAError+0x1d0>
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a3c      	ldr	r2, [pc, #240]	; (80095bc <I2C_DMAError+0x244>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d03b      	beq.n	8009548 <I2C_DMAError+0x1d0>
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a3a      	ldr	r2, [pc, #232]	; (80095c0 <I2C_DMAError+0x248>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d035      	beq.n	8009548 <I2C_DMAError+0x1d0>
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a38      	ldr	r2, [pc, #224]	; (80095c4 <I2C_DMAError+0x24c>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d02f      	beq.n	8009548 <I2C_DMAError+0x1d0>
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a36      	ldr	r2, [pc, #216]	; (80095c8 <I2C_DMAError+0x250>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d029      	beq.n	8009548 <I2C_DMAError+0x1d0>
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a34      	ldr	r2, [pc, #208]	; (80095cc <I2C_DMAError+0x254>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d023      	beq.n	8009548 <I2C_DMAError+0x1d0>
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a32      	ldr	r2, [pc, #200]	; (80095d0 <I2C_DMAError+0x258>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d01d      	beq.n	8009548 <I2C_DMAError+0x1d0>
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a30      	ldr	r2, [pc, #192]	; (80095d4 <I2C_DMAError+0x25c>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d017      	beq.n	8009548 <I2C_DMAError+0x1d0>
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a2e      	ldr	r2, [pc, #184]	; (80095d8 <I2C_DMAError+0x260>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d011      	beq.n	8009548 <I2C_DMAError+0x1d0>
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a2c      	ldr	r2, [pc, #176]	; (80095dc <I2C_DMAError+0x264>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d00b      	beq.n	8009548 <I2C_DMAError+0x1d0>
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a2a      	ldr	r2, [pc, #168]	; (80095e0 <I2C_DMAError+0x268>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d005      	beq.n	8009548 <I2C_DMAError+0x1d0>
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a28      	ldr	r2, [pc, #160]	; (80095e4 <I2C_DMAError+0x26c>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d109      	bne.n	800955c <I2C_DMAError+0x1e4>
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	bf0c      	ite	eq
 8009554:	2301      	moveq	r3, #1
 8009556:	2300      	movne	r3, #0
 8009558:	b2db      	uxtb	r3, r3
 800955a:	e008      	b.n	800956e <I2C_DMAError+0x1f6>
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	bf0c      	ite	eq
 8009568:	2301      	moveq	r3, #1
 800956a:	2300      	movne	r3, #0
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 8009572:	2301      	movs	r3, #1
 8009574:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f7fd fad2 	bl	8006b20 <HAL_DMA_GetError>
 800957c:	4603      	mov	r3, r0
 800957e:	2b02      	cmp	r3, #2
 8009580:	d00e      	beq.n	80095a0 <I2C_DMAError+0x228>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00b      	beq.n	80095a0 <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009596:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009598:	2110      	movs	r1, #16
 800959a:	68b8      	ldr	r0, [r7, #8]
 800959c:	f7ff fd86 	bl	80090ac <I2C_ITError>
  }
}
 80095a0:	bf00      	nop
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	40020010 	.word	0x40020010
 80095ac:	40020028 	.word	0x40020028
 80095b0:	40020040 	.word	0x40020040
 80095b4:	40020058 	.word	0x40020058
 80095b8:	40020070 	.word	0x40020070
 80095bc:	40020088 	.word	0x40020088
 80095c0:	400200a0 	.word	0x400200a0
 80095c4:	400200b8 	.word	0x400200b8
 80095c8:	40020410 	.word	0x40020410
 80095cc:	40020428 	.word	0x40020428
 80095d0:	40020440 	.word	0x40020440
 80095d4:	40020458 	.word	0x40020458
 80095d8:	40020470 	.word	0x40020470
 80095dc:	40020488 	.word	0x40020488
 80095e0:	400204a0 	.word	0x400204a0
 80095e4:	400204b8 	.word	0x400204b8

080095e8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d003      	beq.n	8009606 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	2200      	movs	r2, #0
 8009604:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960a:	2b00      	cmp	r3, #0
 800960c:	d003      	beq.n	8009616 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009612:	2200      	movs	r2, #0
 8009614:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f7ff fe18 	bl	800924c <I2C_TreatErrorCallback>
}
 800961c:	bf00      	nop
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	603b      	str	r3, [r7, #0]
 8009630:	4613      	mov	r3, r2
 8009632:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009634:	e022      	b.n	800967c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963c:	d01e      	beq.n	800967c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800963e:	f7fa fec3 	bl	80043c8 <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	683a      	ldr	r2, [r7, #0]
 800964a:	429a      	cmp	r2, r3
 800964c:	d302      	bcc.n	8009654 <I2C_WaitOnFlagUntilTimeout+0x30>
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d113      	bne.n	800967c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009658:	f043 0220 	orr.w	r2, r3, #32
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2220      	movs	r2, #32
 8009664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e00f      	b.n	800969c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	699a      	ldr	r2, [r3, #24]
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	4013      	ands	r3, r2
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	429a      	cmp	r2, r3
 800968a:	bf0c      	ite	eq
 800968c:	2301      	moveq	r3, #1
 800968e:	2300      	movne	r3, #0
 8009690:	b2db      	uxtb	r3, r3
 8009692:	461a      	mov	r2, r3
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	429a      	cmp	r2, r3
 8009698:	d0cd      	beq.n	8009636 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80096b0:	e02c      	b.n	800970c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	68b9      	ldr	r1, [r7, #8]
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 f870 	bl	800979c <I2C_IsAcknowledgeFailed>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e02a      	b.n	800971c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096cc:	d01e      	beq.n	800970c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ce:	f7fa fe7b 	bl	80043c8 <HAL_GetTick>
 80096d2:	4602      	mov	r2, r0
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d302      	bcc.n	80096e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d113      	bne.n	800970c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096e8:	f043 0220 	orr.w	r2, r3, #32
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2220      	movs	r2, #32
 80096f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e007      	b.n	800971c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	f003 0302 	and.w	r3, r3, #2
 8009716:	2b02      	cmp	r3, #2
 8009718:	d1cb      	bne.n	80096b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009730:	e028      	b.n	8009784 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	68b9      	ldr	r1, [r7, #8]
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 f830 	bl	800979c <I2C_IsAcknowledgeFailed>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e026      	b.n	8009794 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009746:	f7fa fe3f 	bl	80043c8 <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	429a      	cmp	r2, r3
 8009754:	d302      	bcc.n	800975c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d113      	bne.n	8009784 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009760:	f043 0220 	orr.w	r2, r3, #32
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2220      	movs	r2, #32
 800976c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e007      	b.n	8009794 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	f003 0320 	and.w	r3, r3, #32
 800978e:	2b20      	cmp	r3, #32
 8009790:	d1cf      	bne.n	8009732 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	f003 0310 	and.w	r3, r3, #16
 80097b2:	2b10      	cmp	r3, #16
 80097b4:	d151      	bne.n	800985a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097b6:	e022      	b.n	80097fe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097be:	d01e      	beq.n	80097fe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097c0:	f7fa fe02 	bl	80043c8 <HAL_GetTick>
 80097c4:	4602      	mov	r2, r0
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d302      	bcc.n	80097d6 <I2C_IsAcknowledgeFailed+0x3a>
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d113      	bne.n	80097fe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097da:	f043 0220 	orr.w	r2, r3, #32
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2220      	movs	r2, #32
 80097e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e02e      	b.n	800985c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	f003 0320 	and.w	r3, r3, #32
 8009808:	2b20      	cmp	r3, #32
 800980a:	d1d5      	bne.n	80097b8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2210      	movs	r2, #16
 8009812:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2220      	movs	r2, #32
 800981a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f7ff fd3c 	bl	800929a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6859      	ldr	r1, [r3, #4]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	4b0d      	ldr	r3, [pc, #52]	; (8009864 <I2C_IsAcknowledgeFailed+0xc8>)
 800982e:	400b      	ands	r3, r1
 8009830:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009836:	f043 0204 	orr.w	r2, r3, #4
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2220      	movs	r2, #32
 8009842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e000      	b.n	800985c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	fe00e800 	.word	0xfe00e800

08009868 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	607b      	str	r3, [r7, #4]
 8009872:	460b      	mov	r3, r1
 8009874:	817b      	strh	r3, [r7, #10]
 8009876:	4613      	mov	r3, r2
 8009878:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	0d5b      	lsrs	r3, r3, #21
 8009884:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009888:	4b0d      	ldr	r3, [pc, #52]	; (80098c0 <I2C_TransferConfig+0x58>)
 800988a:	430b      	orrs	r3, r1
 800988c:	43db      	mvns	r3, r3
 800988e:	ea02 0103 	and.w	r1, r2, r3
 8009892:	897b      	ldrh	r3, [r7, #10]
 8009894:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009898:	7a7b      	ldrb	r3, [r7, #9]
 800989a:	041b      	lsls	r3, r3, #16
 800989c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80098a0:	431a      	orrs	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	431a      	orrs	r2, r3
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	431a      	orrs	r2, r3
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80098b2:	bf00      	nop
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	03ff63ff 	.word	0x03ff63ff

080098c4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	460b      	mov	r3, r1
 80098ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80098d0:	2300      	movs	r3, #0
 80098d2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d8:	4a2a      	ldr	r2, [pc, #168]	; (8009984 <I2C_Enable_IRQ+0xc0>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d004      	beq.n	80098e8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80098e2:	4a29      	ldr	r2, [pc, #164]	; (8009988 <I2C_Enable_IRQ+0xc4>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d11d      	bne.n	8009924 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80098e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	da03      	bge.n	80098f8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80098f6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80098f8:	887b      	ldrh	r3, [r7, #2]
 80098fa:	2b10      	cmp	r3, #16
 80098fc:	d103      	bne.n	8009906 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009904:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009906:	887b      	ldrh	r3, [r7, #2]
 8009908:	2b20      	cmp	r3, #32
 800990a:	d103      	bne.n	8009914 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009912:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009914:	887b      	ldrh	r3, [r7, #2]
 8009916:	2b40      	cmp	r3, #64	; 0x40
 8009918:	d125      	bne.n	8009966 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009920:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009922:	e020      	b.n	8009966 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009924:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009928:	2b00      	cmp	r3, #0
 800992a:	da03      	bge.n	8009934 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009932:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009934:	887b      	ldrh	r3, [r7, #2]
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	2b00      	cmp	r3, #0
 800993c:	d003      	beq.n	8009946 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8009944:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009946:	887b      	ldrh	r3, [r7, #2]
 8009948:	f003 0302 	and.w	r3, r3, #2
 800994c:	2b00      	cmp	r3, #0
 800994e:	d003      	beq.n	8009958 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8009956:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009958:	887b      	ldrh	r3, [r7, #2]
 800995a:	2b20      	cmp	r3, #32
 800995c:	d103      	bne.n	8009966 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f043 0320 	orr.w	r3, r3, #32
 8009964:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	6819      	ldr	r1, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	430a      	orrs	r2, r1
 8009974:	601a      	str	r2, [r3, #0]
}
 8009976:	bf00      	nop
 8009978:	3714      	adds	r7, #20
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	08008147 	.word	0x08008147
 8009988:	0800832d 	.word	0x0800832d

0800998c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	460b      	mov	r3, r1
 8009996:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009998:	2300      	movs	r3, #0
 800999a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800999c:	887b      	ldrh	r3, [r7, #2]
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00f      	beq.n	80099c6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80099ac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80099ba:	2b28      	cmp	r3, #40	; 0x28
 80099bc:	d003      	beq.n	80099c6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80099c4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80099c6:	887b      	ldrh	r3, [r7, #2]
 80099c8:	f003 0302 	and.w	r3, r3, #2
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00f      	beq.n	80099f0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80099d6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80099e4:	2b28      	cmp	r3, #40	; 0x28
 80099e6:	d003      	beq.n	80099f0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80099ee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80099f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	da03      	bge.n	8009a00 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80099fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009a00:	887b      	ldrh	r3, [r7, #2]
 8009a02:	2b10      	cmp	r3, #16
 8009a04:	d103      	bne.n	8009a0e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009a0c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009a0e:	887b      	ldrh	r3, [r7, #2]
 8009a10:	2b20      	cmp	r3, #32
 8009a12:	d103      	bne.n	8009a1c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f043 0320 	orr.w	r3, r3, #32
 8009a1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009a1c:	887b      	ldrh	r3, [r7, #2]
 8009a1e:	2b40      	cmp	r3, #64	; 0x40
 8009a20:	d103      	bne.n	8009a2a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a28:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6819      	ldr	r1, [r3, #0]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	43da      	mvns	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	400a      	ands	r2, r1
 8009a3a:	601a      	str	r2, [r3, #0]
}
 8009a3c:	bf00      	nop
 8009a3e:	3714      	adds	r7, #20
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b20      	cmp	r3, #32
 8009a5c:	d138      	bne.n	8009ad0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d101      	bne.n	8009a6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009a68:	2302      	movs	r3, #2
 8009a6a:	e032      	b.n	8009ad2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2224      	movs	r2, #36	; 0x24
 8009a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f022 0201 	bic.w	r2, r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6819      	ldr	r1, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	430a      	orrs	r2, r1
 8009aaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f042 0201 	orr.w	r2, r2, #1
 8009aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2220      	movs	r2, #32
 8009ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	e000      	b.n	8009ad2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ad0:	2302      	movs	r3, #2
  }
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b085      	sub	sp, #20
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	2b20      	cmp	r3, #32
 8009af2:	d139      	bne.n	8009b68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d101      	bne.n	8009b02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009afe:	2302      	movs	r3, #2
 8009b00:	e033      	b.n	8009b6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2224      	movs	r2, #36	; 0x24
 8009b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f022 0201 	bic.w	r2, r2, #1
 8009b20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009b30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	021b      	lsls	r3, r3, #8
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f042 0201 	orr.w	r2, r2, #1
 8009b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2220      	movs	r2, #32
 8009b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	e000      	b.n	8009b6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009b68:	2302      	movs	r3, #2
  }
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
	...

08009b78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009b80:	4b19      	ldr	r3, [pc, #100]	; (8009be8 <HAL_PWREx_ConfigSupply+0x70>)
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	f003 0304 	and.w	r3, r3, #4
 8009b88:	2b04      	cmp	r3, #4
 8009b8a:	d00a      	beq.n	8009ba2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009b8c:	4b16      	ldr	r3, [pc, #88]	; (8009be8 <HAL_PWREx_ConfigSupply+0x70>)
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	f003 0307 	and.w	r3, r3, #7
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d001      	beq.n	8009b9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e01f      	b.n	8009bde <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	e01d      	b.n	8009bde <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009ba2:	4b11      	ldr	r3, [pc, #68]	; (8009be8 <HAL_PWREx_ConfigSupply+0x70>)
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	f023 0207 	bic.w	r2, r3, #7
 8009baa:	490f      	ldr	r1, [pc, #60]	; (8009be8 <HAL_PWREx_ConfigSupply+0x70>)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009bb2:	f7fa fc09 	bl	80043c8 <HAL_GetTick>
 8009bb6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009bb8:	e009      	b.n	8009bce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009bba:	f7fa fc05 	bl	80043c8 <HAL_GetTick>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bc8:	d901      	bls.n	8009bce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e007      	b.n	8009bde <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009bce:	4b06      	ldr	r3, [pc, #24]	; (8009be8 <HAL_PWREx_ConfigSupply+0x70>)
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bda:	d1ee      	bne.n	8009bba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	58024800 	.word	0x58024800

08009bec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b08c      	sub	sp, #48	; 0x30
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e3ff      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f000 8087 	beq.w	8009d1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c0c:	4b99      	ldr	r3, [pc, #612]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c16:	4b97      	ldr	r3, [pc, #604]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1e:	2b10      	cmp	r3, #16
 8009c20:	d007      	beq.n	8009c32 <HAL_RCC_OscConfig+0x46>
 8009c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c24:	2b18      	cmp	r3, #24
 8009c26:	d110      	bne.n	8009c4a <HAL_RCC_OscConfig+0x5e>
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	f003 0303 	and.w	r3, r3, #3
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d10b      	bne.n	8009c4a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c32:	4b90      	ldr	r3, [pc, #576]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d06c      	beq.n	8009d18 <HAL_RCC_OscConfig+0x12c>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d168      	bne.n	8009d18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e3d9      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c52:	d106      	bne.n	8009c62 <HAL_RCC_OscConfig+0x76>
 8009c54:	4b87      	ldr	r3, [pc, #540]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a86      	ldr	r2, [pc, #536]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c5e:	6013      	str	r3, [r2, #0]
 8009c60:	e02e      	b.n	8009cc0 <HAL_RCC_OscConfig+0xd4>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10c      	bne.n	8009c84 <HAL_RCC_OscConfig+0x98>
 8009c6a:	4b82      	ldr	r3, [pc, #520]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a81      	ldr	r2, [pc, #516]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c74:	6013      	str	r3, [r2, #0]
 8009c76:	4b7f      	ldr	r3, [pc, #508]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a7e      	ldr	r2, [pc, #504]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009c7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c80:	6013      	str	r3, [r2, #0]
 8009c82:	e01d      	b.n	8009cc0 <HAL_RCC_OscConfig+0xd4>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c8c:	d10c      	bne.n	8009ca8 <HAL_RCC_OscConfig+0xbc>
 8009c8e:	4b79      	ldr	r3, [pc, #484]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a78      	ldr	r2, [pc, #480]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c98:	6013      	str	r3, [r2, #0]
 8009c9a:	4b76      	ldr	r3, [pc, #472]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a75      	ldr	r2, [pc, #468]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ca4:	6013      	str	r3, [r2, #0]
 8009ca6:	e00b      	b.n	8009cc0 <HAL_RCC_OscConfig+0xd4>
 8009ca8:	4b72      	ldr	r3, [pc, #456]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a71      	ldr	r2, [pc, #452]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cb2:	6013      	str	r3, [r2, #0]
 8009cb4:	4b6f      	ldr	r3, [pc, #444]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a6e      	ldr	r2, [pc, #440]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d013      	beq.n	8009cf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cc8:	f7fa fb7e 	bl	80043c8 <HAL_GetTick>
 8009ccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009cce:	e008      	b.n	8009ce2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009cd0:	f7fa fb7a 	bl	80043c8 <HAL_GetTick>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	2b64      	cmp	r3, #100	; 0x64
 8009cdc:	d901      	bls.n	8009ce2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	e38d      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ce2:	4b64      	ldr	r3, [pc, #400]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d0f0      	beq.n	8009cd0 <HAL_RCC_OscConfig+0xe4>
 8009cee:	e014      	b.n	8009d1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cf0:	f7fa fb6a 	bl	80043c8 <HAL_GetTick>
 8009cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009cf6:	e008      	b.n	8009d0a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009cf8:	f7fa fb66 	bl	80043c8 <HAL_GetTick>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	2b64      	cmp	r3, #100	; 0x64
 8009d04:	d901      	bls.n	8009d0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009d06:	2303      	movs	r3, #3
 8009d08:	e379      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009d0a:	4b5a      	ldr	r3, [pc, #360]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1f0      	bne.n	8009cf8 <HAL_RCC_OscConfig+0x10c>
 8009d16:	e000      	b.n	8009d1a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f003 0302 	and.w	r3, r3, #2
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f000 80ae 	beq.w	8009e84 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d28:	4b52      	ldr	r3, [pc, #328]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d30:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d32:	4b50      	ldr	r3, [pc, #320]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d36:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009d38:	6a3b      	ldr	r3, [r7, #32]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d007      	beq.n	8009d4e <HAL_RCC_OscConfig+0x162>
 8009d3e:	6a3b      	ldr	r3, [r7, #32]
 8009d40:	2b18      	cmp	r3, #24
 8009d42:	d13a      	bne.n	8009dba <HAL_RCC_OscConfig+0x1ce>
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	f003 0303 	and.w	r3, r3, #3
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d135      	bne.n	8009dba <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d4e:	4b49      	ldr	r3, [pc, #292]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 0304 	and.w	r3, r3, #4
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d005      	beq.n	8009d66 <HAL_RCC_OscConfig+0x17a>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d101      	bne.n	8009d66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e34b      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d66:	f7fa fb5f 	bl	8004428 <HAL_GetREVID>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d817      	bhi.n	8009da4 <HAL_RCC_OscConfig+0x1b8>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	2b40      	cmp	r3, #64	; 0x40
 8009d7a:	d108      	bne.n	8009d8e <HAL_RCC_OscConfig+0x1a2>
 8009d7c:	4b3d      	ldr	r3, [pc, #244]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009d84:	4a3b      	ldr	r2, [pc, #236]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d8a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d8c:	e07a      	b.n	8009e84 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d8e:	4b39      	ldr	r3, [pc, #228]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	031b      	lsls	r3, r3, #12
 8009d9c:	4935      	ldr	r1, [pc, #212]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009da2:	e06f      	b.n	8009e84 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009da4:	4b33      	ldr	r3, [pc, #204]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	061b      	lsls	r3, r3, #24
 8009db2:	4930      	ldr	r1, [pc, #192]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009db4:	4313      	orrs	r3, r2
 8009db6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009db8:	e064      	b.n	8009e84 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d045      	beq.n	8009e4e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009dc2:	4b2c      	ldr	r3, [pc, #176]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f023 0219 	bic.w	r2, r3, #25
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	4929      	ldr	r1, [pc, #164]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dd4:	f7fa faf8 	bl	80043c8 <HAL_GetTick>
 8009dd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009dda:	e008      	b.n	8009dee <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ddc:	f7fa faf4 	bl	80043c8 <HAL_GetTick>
 8009de0:	4602      	mov	r2, r0
 8009de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d901      	bls.n	8009dee <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8009dea:	2303      	movs	r3, #3
 8009dec:	e307      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009dee:	4b21      	ldr	r3, [pc, #132]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 0304 	and.w	r3, r3, #4
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d0f0      	beq.n	8009ddc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dfa:	f7fa fb15 	bl	8004428 <HAL_GetREVID>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	f241 0203 	movw	r2, #4099	; 0x1003
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d817      	bhi.n	8009e38 <HAL_RCC_OscConfig+0x24c>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	2b40      	cmp	r3, #64	; 0x40
 8009e0e:	d108      	bne.n	8009e22 <HAL_RCC_OscConfig+0x236>
 8009e10:	4b18      	ldr	r3, [pc, #96]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009e18:	4a16      	ldr	r2, [pc, #88]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e1e:	6053      	str	r3, [r2, #4]
 8009e20:	e030      	b.n	8009e84 <HAL_RCC_OscConfig+0x298>
 8009e22:	4b14      	ldr	r3, [pc, #80]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	031b      	lsls	r3, r3, #12
 8009e30:	4910      	ldr	r1, [pc, #64]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009e32:	4313      	orrs	r3, r2
 8009e34:	604b      	str	r3, [r1, #4]
 8009e36:	e025      	b.n	8009e84 <HAL_RCC_OscConfig+0x298>
 8009e38:	4b0e      	ldr	r3, [pc, #56]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	061b      	lsls	r3, r3, #24
 8009e46:	490b      	ldr	r1, [pc, #44]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	604b      	str	r3, [r1, #4]
 8009e4c:	e01a      	b.n	8009e84 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e4e:	4b09      	ldr	r3, [pc, #36]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a08      	ldr	r2, [pc, #32]	; (8009e74 <HAL_RCC_OscConfig+0x288>)
 8009e54:	f023 0301 	bic.w	r3, r3, #1
 8009e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e5a:	f7fa fab5 	bl	80043c8 <HAL_GetTick>
 8009e5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009e60:	e00a      	b.n	8009e78 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e62:	f7fa fab1 	bl	80043c8 <HAL_GetTick>
 8009e66:	4602      	mov	r2, r0
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d903      	bls.n	8009e78 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8009e70:	2303      	movs	r3, #3
 8009e72:	e2c4      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
 8009e74:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009e78:	4ba4      	ldr	r3, [pc, #656]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f003 0304 	and.w	r3, r3, #4
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1ee      	bne.n	8009e62 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0310 	and.w	r3, r3, #16
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f000 80a9 	beq.w	8009fe4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e92:	4b9e      	ldr	r3, [pc, #632]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e9a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e9c:	4b9b      	ldr	r3, [pc, #620]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	2b08      	cmp	r3, #8
 8009ea6:	d007      	beq.n	8009eb8 <HAL_RCC_OscConfig+0x2cc>
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	2b18      	cmp	r3, #24
 8009eac:	d13a      	bne.n	8009f24 <HAL_RCC_OscConfig+0x338>
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f003 0303 	and.w	r3, r3, #3
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d135      	bne.n	8009f24 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009eb8:	4b94      	ldr	r3, [pc, #592]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d005      	beq.n	8009ed0 <HAL_RCC_OscConfig+0x2e4>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	69db      	ldr	r3, [r3, #28]
 8009ec8:	2b80      	cmp	r3, #128	; 0x80
 8009eca:	d001      	beq.n	8009ed0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e296      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ed0:	f7fa faaa 	bl	8004428 <HAL_GetREVID>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	f241 0203 	movw	r2, #4099	; 0x1003
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d817      	bhi.n	8009f0e <HAL_RCC_OscConfig+0x322>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a1b      	ldr	r3, [r3, #32]
 8009ee2:	2b20      	cmp	r3, #32
 8009ee4:	d108      	bne.n	8009ef8 <HAL_RCC_OscConfig+0x30c>
 8009ee6:	4b89      	ldr	r3, [pc, #548]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009eee:	4a87      	ldr	r2, [pc, #540]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009ef0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ef4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009ef6:	e075      	b.n	8009fe4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ef8:	4b84      	ldr	r3, [pc, #528]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a1b      	ldr	r3, [r3, #32]
 8009f04:	069b      	lsls	r3, r3, #26
 8009f06:	4981      	ldr	r1, [pc, #516]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f0c:	e06a      	b.n	8009fe4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f0e:	4b7f      	ldr	r3, [pc, #508]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	061b      	lsls	r3, r3, #24
 8009f1c:	497b      	ldr	r1, [pc, #492]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f22:	e05f      	b.n	8009fe4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	69db      	ldr	r3, [r3, #28]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d042      	beq.n	8009fb2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009f2c:	4b77      	ldr	r3, [pc, #476]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a76      	ldr	r2, [pc, #472]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f38:	f7fa fa46 	bl	80043c8 <HAL_GetTick>
 8009f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f3e:	e008      	b.n	8009f52 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009f40:	f7fa fa42 	bl	80043c8 <HAL_GetTick>
 8009f44:	4602      	mov	r2, r0
 8009f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d901      	bls.n	8009f52 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	e255      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f52:	4b6e      	ldr	r3, [pc, #440]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d0f0      	beq.n	8009f40 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f5e:	f7fa fa63 	bl	8004428 <HAL_GetREVID>
 8009f62:	4603      	mov	r3, r0
 8009f64:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d817      	bhi.n	8009f9c <HAL_RCC_OscConfig+0x3b0>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a1b      	ldr	r3, [r3, #32]
 8009f70:	2b20      	cmp	r3, #32
 8009f72:	d108      	bne.n	8009f86 <HAL_RCC_OscConfig+0x39a>
 8009f74:	4b65      	ldr	r3, [pc, #404]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009f7c:	4a63      	ldr	r2, [pc, #396]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009f7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f82:	6053      	str	r3, [r2, #4]
 8009f84:	e02e      	b.n	8009fe4 <HAL_RCC_OscConfig+0x3f8>
 8009f86:	4b61      	ldr	r3, [pc, #388]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a1b      	ldr	r3, [r3, #32]
 8009f92:	069b      	lsls	r3, r3, #26
 8009f94:	495d      	ldr	r1, [pc, #372]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	604b      	str	r3, [r1, #4]
 8009f9a:	e023      	b.n	8009fe4 <HAL_RCC_OscConfig+0x3f8>
 8009f9c:	4b5b      	ldr	r3, [pc, #364]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a1b      	ldr	r3, [r3, #32]
 8009fa8:	061b      	lsls	r3, r3, #24
 8009faa:	4958      	ldr	r1, [pc, #352]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009fac:	4313      	orrs	r3, r2
 8009fae:	60cb      	str	r3, [r1, #12]
 8009fb0:	e018      	b.n	8009fe4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009fb2:	4b56      	ldr	r3, [pc, #344]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a55      	ldr	r2, [pc, #340]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fbe:	f7fa fa03 	bl	80043c8 <HAL_GetTick>
 8009fc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009fc4:	e008      	b.n	8009fd8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009fc6:	f7fa f9ff 	bl	80043c8 <HAL_GetTick>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d901      	bls.n	8009fd8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8009fd4:	2303      	movs	r3, #3
 8009fd6:	e212      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009fd8:	4b4c      	ldr	r3, [pc, #304]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d1f0      	bne.n	8009fc6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 0308 	and.w	r3, r3, #8
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d036      	beq.n	800a05e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d019      	beq.n	800a02c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ff8:	4b44      	ldr	r3, [pc, #272]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ffc:	4a43      	ldr	r2, [pc, #268]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 8009ffe:	f043 0301 	orr.w	r3, r3, #1
 800a002:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a004:	f7fa f9e0 	bl	80043c8 <HAL_GetTick>
 800a008:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a00a:	e008      	b.n	800a01e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a00c:	f7fa f9dc 	bl	80043c8 <HAL_GetTick>
 800a010:	4602      	mov	r2, r0
 800a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a014:	1ad3      	subs	r3, r2, r3
 800a016:	2b02      	cmp	r3, #2
 800a018:	d901      	bls.n	800a01e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e1ef      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a01e:	4b3b      	ldr	r3, [pc, #236]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 800a020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a022:	f003 0302 	and.w	r3, r3, #2
 800a026:	2b00      	cmp	r3, #0
 800a028:	d0f0      	beq.n	800a00c <HAL_RCC_OscConfig+0x420>
 800a02a:	e018      	b.n	800a05e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a02c:	4b37      	ldr	r3, [pc, #220]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 800a02e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a030:	4a36      	ldr	r2, [pc, #216]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 800a032:	f023 0301 	bic.w	r3, r3, #1
 800a036:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a038:	f7fa f9c6 	bl	80043c8 <HAL_GetTick>
 800a03c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a03e:	e008      	b.n	800a052 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a040:	f7fa f9c2 	bl	80043c8 <HAL_GetTick>
 800a044:	4602      	mov	r2, r0
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d901      	bls.n	800a052 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e1d5      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a052:	4b2e      	ldr	r3, [pc, #184]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 800a054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a056:	f003 0302 	and.w	r3, r3, #2
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1f0      	bne.n	800a040 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 0320 	and.w	r3, r3, #32
 800a066:	2b00      	cmp	r3, #0
 800a068:	d036      	beq.n	800a0d8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d019      	beq.n	800a0a6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a072:	4b26      	ldr	r3, [pc, #152]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a25      	ldr	r2, [pc, #148]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 800a078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a07c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a07e:	f7fa f9a3 	bl	80043c8 <HAL_GetTick>
 800a082:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a084:	e008      	b.n	800a098 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a086:	f7fa f99f 	bl	80043c8 <HAL_GetTick>
 800a08a:	4602      	mov	r2, r0
 800a08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	2b02      	cmp	r3, #2
 800a092:	d901      	bls.n	800a098 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800a094:	2303      	movs	r3, #3
 800a096:	e1b2      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a098:	4b1c      	ldr	r3, [pc, #112]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d0f0      	beq.n	800a086 <HAL_RCC_OscConfig+0x49a>
 800a0a4:	e018      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a0a6:	4b19      	ldr	r3, [pc, #100]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a18      	ldr	r2, [pc, #96]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 800a0ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a0b2:	f7fa f989 	bl	80043c8 <HAL_GetTick>
 800a0b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a0b8:	e008      	b.n	800a0cc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a0ba:	f7fa f985 	bl	80043c8 <HAL_GetTick>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d901      	bls.n	800a0cc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e198      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a0cc:	4b0f      	ldr	r3, [pc, #60]	; (800a10c <HAL_RCC_OscConfig+0x520>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1f0      	bne.n	800a0ba <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 0304 	and.w	r3, r3, #4
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f000 8085 	beq.w	800a1f0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a0e6:	4b0a      	ldr	r3, [pc, #40]	; (800a110 <HAL_RCC_OscConfig+0x524>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a09      	ldr	r2, [pc, #36]	; (800a110 <HAL_RCC_OscConfig+0x524>)
 800a0ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a0f2:	f7fa f969 	bl	80043c8 <HAL_GetTick>
 800a0f6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0f8:	e00c      	b.n	800a114 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a0fa:	f7fa f965 	bl	80043c8 <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	2b64      	cmp	r3, #100	; 0x64
 800a106:	d905      	bls.n	800a114 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e178      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
 800a10c:	58024400 	.word	0x58024400
 800a110:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a114:	4b96      	ldr	r3, [pc, #600]	; (800a370 <HAL_RCC_OscConfig+0x784>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d0ec      	beq.n	800a0fa <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d106      	bne.n	800a136 <HAL_RCC_OscConfig+0x54a>
 800a128:	4b92      	ldr	r3, [pc, #584]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a12a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a12c:	4a91      	ldr	r2, [pc, #580]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a12e:	f043 0301 	orr.w	r3, r3, #1
 800a132:	6713      	str	r3, [r2, #112]	; 0x70
 800a134:	e02d      	b.n	800a192 <HAL_RCC_OscConfig+0x5a6>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10c      	bne.n	800a158 <HAL_RCC_OscConfig+0x56c>
 800a13e:	4b8d      	ldr	r3, [pc, #564]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a142:	4a8c      	ldr	r2, [pc, #560]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a144:	f023 0301 	bic.w	r3, r3, #1
 800a148:	6713      	str	r3, [r2, #112]	; 0x70
 800a14a:	4b8a      	ldr	r3, [pc, #552]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a14c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a14e:	4a89      	ldr	r2, [pc, #548]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a150:	f023 0304 	bic.w	r3, r3, #4
 800a154:	6713      	str	r3, [r2, #112]	; 0x70
 800a156:	e01c      	b.n	800a192 <HAL_RCC_OscConfig+0x5a6>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	2b05      	cmp	r3, #5
 800a15e:	d10c      	bne.n	800a17a <HAL_RCC_OscConfig+0x58e>
 800a160:	4b84      	ldr	r3, [pc, #528]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a164:	4a83      	ldr	r2, [pc, #524]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a166:	f043 0304 	orr.w	r3, r3, #4
 800a16a:	6713      	str	r3, [r2, #112]	; 0x70
 800a16c:	4b81      	ldr	r3, [pc, #516]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a170:	4a80      	ldr	r2, [pc, #512]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a172:	f043 0301 	orr.w	r3, r3, #1
 800a176:	6713      	str	r3, [r2, #112]	; 0x70
 800a178:	e00b      	b.n	800a192 <HAL_RCC_OscConfig+0x5a6>
 800a17a:	4b7e      	ldr	r3, [pc, #504]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a17e:	4a7d      	ldr	r2, [pc, #500]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a180:	f023 0301 	bic.w	r3, r3, #1
 800a184:	6713      	str	r3, [r2, #112]	; 0x70
 800a186:	4b7b      	ldr	r3, [pc, #492]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18a:	4a7a      	ldr	r2, [pc, #488]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a18c:	f023 0304 	bic.w	r3, r3, #4
 800a190:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d015      	beq.n	800a1c6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a19a:	f7fa f915 	bl	80043c8 <HAL_GetTick>
 800a19e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1a0:	e00a      	b.n	800a1b8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a1a2:	f7fa f911 	bl	80043c8 <HAL_GetTick>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d901      	bls.n	800a1b8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e122      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1b8:	4b6e      	ldr	r3, [pc, #440]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1bc:	f003 0302 	and.w	r3, r3, #2
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d0ee      	beq.n	800a1a2 <HAL_RCC_OscConfig+0x5b6>
 800a1c4:	e014      	b.n	800a1f0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1c6:	f7fa f8ff 	bl	80043c8 <HAL_GetTick>
 800a1ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a1cc:	e00a      	b.n	800a1e4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a1ce:	f7fa f8fb 	bl	80043c8 <HAL_GetTick>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d901      	bls.n	800a1e4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e10c      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a1e4:	4b63      	ldr	r3, [pc, #396]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a1e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1e8:	f003 0302 	and.w	r3, r3, #2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1ee      	bne.n	800a1ce <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 8101 	beq.w	800a3fc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a1fa:	4b5e      	ldr	r3, [pc, #376]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a202:	2b18      	cmp	r3, #24
 800a204:	f000 80bc 	beq.w	800a380 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	f040 8095 	bne.w	800a33c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a212:	4b58      	ldr	r3, [pc, #352]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a57      	ldr	r2, [pc, #348]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a218:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a21c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a21e:	f7fa f8d3 	bl	80043c8 <HAL_GetTick>
 800a222:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a224:	e008      	b.n	800a238 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a226:	f7fa f8cf 	bl	80043c8 <HAL_GetTick>
 800a22a:	4602      	mov	r2, r0
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	2b02      	cmp	r3, #2
 800a232:	d901      	bls.n	800a238 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800a234:	2303      	movs	r3, #3
 800a236:	e0e2      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a238:	4b4e      	ldr	r3, [pc, #312]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1f0      	bne.n	800a226 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a244:	4b4b      	ldr	r3, [pc, #300]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a246:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a248:	4b4b      	ldr	r3, [pc, #300]	; (800a378 <HAL_RCC_OscConfig+0x78c>)
 800a24a:	4013      	ands	r3, r2
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a254:	0112      	lsls	r2, r2, #4
 800a256:	430a      	orrs	r2, r1
 800a258:	4946      	ldr	r1, [pc, #280]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a25a:	4313      	orrs	r3, r2
 800a25c:	628b      	str	r3, [r1, #40]	; 0x28
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a262:	3b01      	subs	r3, #1
 800a264:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a26c:	3b01      	subs	r3, #1
 800a26e:	025b      	lsls	r3, r3, #9
 800a270:	b29b      	uxth	r3, r3
 800a272:	431a      	orrs	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a278:	3b01      	subs	r3, #1
 800a27a:	041b      	lsls	r3, r3, #16
 800a27c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a280:	431a      	orrs	r2, r3
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a286:	3b01      	subs	r3, #1
 800a288:	061b      	lsls	r3, r3, #24
 800a28a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a28e:	4939      	ldr	r1, [pc, #228]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a290:	4313      	orrs	r3, r2
 800a292:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a294:	4b37      	ldr	r3, [pc, #220]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a298:	4a36      	ldr	r2, [pc, #216]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a29a:	f023 0301 	bic.w	r3, r3, #1
 800a29e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a2a0:	4b34      	ldr	r3, [pc, #208]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a2a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2a4:	4b35      	ldr	r3, [pc, #212]	; (800a37c <HAL_RCC_OscConfig+0x790>)
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a2ac:	00d2      	lsls	r2, r2, #3
 800a2ae:	4931      	ldr	r1, [pc, #196]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a2b4:	4b2f      	ldr	r3, [pc, #188]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b8:	f023 020c 	bic.w	r2, r3, #12
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c0:	492c      	ldr	r1, [pc, #176]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a2c6:	4b2b      	ldr	r3, [pc, #172]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ca:	f023 0202 	bic.w	r2, r3, #2
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d2:	4928      	ldr	r1, [pc, #160]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a2d8:	4b26      	ldr	r3, [pc, #152]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2dc:	4a25      	ldr	r2, [pc, #148]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a2de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2e4:	4b23      	ldr	r3, [pc, #140]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e8:	4a22      	ldr	r2, [pc, #136]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a2ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a2f0:	4b20      	ldr	r3, [pc, #128]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f4:	4a1f      	ldr	r2, [pc, #124]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a2f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a2fc:	4b1d      	ldr	r3, [pc, #116]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a300:	4a1c      	ldr	r2, [pc, #112]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a302:	f043 0301 	orr.w	r3, r3, #1
 800a306:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a308:	4b1a      	ldr	r3, [pc, #104]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a19      	ldr	r2, [pc, #100]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a30e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a314:	f7fa f858 	bl	80043c8 <HAL_GetTick>
 800a318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a31a:	e008      	b.n	800a32e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a31c:	f7fa f854 	bl	80043c8 <HAL_GetTick>
 800a320:	4602      	mov	r2, r0
 800a322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a324:	1ad3      	subs	r3, r2, r3
 800a326:	2b02      	cmp	r3, #2
 800a328:	d901      	bls.n	800a32e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800a32a:	2303      	movs	r3, #3
 800a32c:	e067      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a32e:	4b11      	ldr	r3, [pc, #68]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a336:	2b00      	cmp	r3, #0
 800a338:	d0f0      	beq.n	800a31c <HAL_RCC_OscConfig+0x730>
 800a33a:	e05f      	b.n	800a3fc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a33c:	4b0d      	ldr	r3, [pc, #52]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a0c      	ldr	r2, [pc, #48]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a348:	f7fa f83e 	bl	80043c8 <HAL_GetTick>
 800a34c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a34e:	e008      	b.n	800a362 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a350:	f7fa f83a 	bl	80043c8 <HAL_GetTick>
 800a354:	4602      	mov	r2, r0
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d901      	bls.n	800a362 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800a35e:	2303      	movs	r3, #3
 800a360:	e04d      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a362:	4b04      	ldr	r3, [pc, #16]	; (800a374 <HAL_RCC_OscConfig+0x788>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1f0      	bne.n	800a350 <HAL_RCC_OscConfig+0x764>
 800a36e:	e045      	b.n	800a3fc <HAL_RCC_OscConfig+0x810>
 800a370:	58024800 	.word	0x58024800
 800a374:	58024400 	.word	0x58024400
 800a378:	fffffc0c 	.word	0xfffffc0c
 800a37c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a380:	4b21      	ldr	r3, [pc, #132]	; (800a408 <HAL_RCC_OscConfig+0x81c>)
 800a382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a384:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a386:	4b20      	ldr	r3, [pc, #128]	; (800a408 <HAL_RCC_OscConfig+0x81c>)
 800a388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a390:	2b01      	cmp	r3, #1
 800a392:	d031      	beq.n	800a3f8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	f003 0203 	and.w	r2, r3, #3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d12a      	bne.n	800a3f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	091b      	lsrs	r3, r3, #4
 800a3a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d122      	bne.n	800a3f8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d11a      	bne.n	800a3f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	0a5b      	lsrs	r3, r3, #9
 800a3c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ce:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d111      	bne.n	800a3f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	0c1b      	lsrs	r3, r3, #16
 800a3d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d108      	bne.n	800a3f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	0e1b      	lsrs	r3, r3, #24
 800a3ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3f2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d001      	beq.n	800a3fc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e000      	b.n	800a3fe <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3730      	adds	r7, #48	; 0x30
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	58024400 	.word	0x58024400

0800a40c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b086      	sub	sp, #24
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d101      	bne.n	800a420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e19c      	b.n	800a75a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a420:	4b8a      	ldr	r3, [pc, #552]	; (800a64c <HAL_RCC_ClockConfig+0x240>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 030f 	and.w	r3, r3, #15
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d910      	bls.n	800a450 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a42e:	4b87      	ldr	r3, [pc, #540]	; (800a64c <HAL_RCC_ClockConfig+0x240>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f023 020f 	bic.w	r2, r3, #15
 800a436:	4985      	ldr	r1, [pc, #532]	; (800a64c <HAL_RCC_ClockConfig+0x240>)
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	4313      	orrs	r3, r2
 800a43c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a43e:	4b83      	ldr	r3, [pc, #524]	; (800a64c <HAL_RCC_ClockConfig+0x240>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f003 030f 	and.w	r3, r3, #15
 800a446:	683a      	ldr	r2, [r7, #0]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d001      	beq.n	800a450 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a44c:	2301      	movs	r3, #1
 800a44e:	e184      	b.n	800a75a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 0304 	and.w	r3, r3, #4
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d010      	beq.n	800a47e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	691a      	ldr	r2, [r3, #16]
 800a460:	4b7b      	ldr	r3, [pc, #492]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a468:	429a      	cmp	r2, r3
 800a46a:	d908      	bls.n	800a47e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a46c:	4b78      	ldr	r3, [pc, #480]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	4975      	ldr	r1, [pc, #468]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a47a:	4313      	orrs	r3, r2
 800a47c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0308 	and.w	r3, r3, #8
 800a486:	2b00      	cmp	r3, #0
 800a488:	d010      	beq.n	800a4ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	695a      	ldr	r2, [r3, #20]
 800a48e:	4b70      	ldr	r3, [pc, #448]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a496:	429a      	cmp	r2, r3
 800a498:	d908      	bls.n	800a4ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a49a:	4b6d      	ldr	r3, [pc, #436]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	496a      	ldr	r1, [pc, #424]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 0310 	and.w	r3, r3, #16
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d010      	beq.n	800a4da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	699a      	ldr	r2, [r3, #24]
 800a4bc:	4b64      	ldr	r3, [pc, #400]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a4be:	69db      	ldr	r3, [r3, #28]
 800a4c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d908      	bls.n	800a4da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a4c8:	4b61      	ldr	r3, [pc, #388]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a4ca:	69db      	ldr	r3, [r3, #28]
 800a4cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	495e      	ldr	r1, [pc, #376]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 0320 	and.w	r3, r3, #32
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d010      	beq.n	800a508 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	69da      	ldr	r2, [r3, #28]
 800a4ea:	4b59      	ldr	r3, [pc, #356]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d908      	bls.n	800a508 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a4f6:	4b56      	ldr	r3, [pc, #344]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	69db      	ldr	r3, [r3, #28]
 800a502:	4953      	ldr	r1, [pc, #332]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a504:	4313      	orrs	r3, r2
 800a506:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 0302 	and.w	r3, r3, #2
 800a510:	2b00      	cmp	r3, #0
 800a512:	d010      	beq.n	800a536 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68da      	ldr	r2, [r3, #12]
 800a518:	4b4d      	ldr	r3, [pc, #308]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a51a:	699b      	ldr	r3, [r3, #24]
 800a51c:	f003 030f 	and.w	r3, r3, #15
 800a520:	429a      	cmp	r2, r3
 800a522:	d908      	bls.n	800a536 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a524:	4b4a      	ldr	r3, [pc, #296]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a526:	699b      	ldr	r3, [r3, #24]
 800a528:	f023 020f 	bic.w	r2, r3, #15
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	4947      	ldr	r1, [pc, #284]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a532:	4313      	orrs	r3, r2
 800a534:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d055      	beq.n	800a5ee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a542:	4b43      	ldr	r3, [pc, #268]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a544:	699b      	ldr	r3, [r3, #24]
 800a546:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	4940      	ldr	r1, [pc, #256]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a550:	4313      	orrs	r3, r2
 800a552:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	2b02      	cmp	r3, #2
 800a55a:	d107      	bne.n	800a56c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a55c:	4b3c      	ldr	r3, [pc, #240]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d121      	bne.n	800a5ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e0f6      	b.n	800a75a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	2b03      	cmp	r3, #3
 800a572:	d107      	bne.n	800a584 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a574:	4b36      	ldr	r3, [pc, #216]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d115      	bne.n	800a5ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a580:	2301      	movs	r3, #1
 800a582:	e0ea      	b.n	800a75a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d107      	bne.n	800a59c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a58c:	4b30      	ldr	r3, [pc, #192]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a594:	2b00      	cmp	r3, #0
 800a596:	d109      	bne.n	800a5ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e0de      	b.n	800a75a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a59c:	4b2c      	ldr	r3, [pc, #176]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 0304 	and.w	r3, r3, #4
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d101      	bne.n	800a5ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e0d6      	b.n	800a75a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a5ac:	4b28      	ldr	r3, [pc, #160]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	f023 0207 	bic.w	r2, r3, #7
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	4925      	ldr	r1, [pc, #148]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5be:	f7f9 ff03 	bl	80043c8 <HAL_GetTick>
 800a5c2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5c4:	e00a      	b.n	800a5dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5c6:	f7f9 feff 	bl	80043c8 <HAL_GetTick>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	1ad3      	subs	r3, r2, r3
 800a5d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d901      	bls.n	800a5dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e0be      	b.n	800a75a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5dc:	4b1c      	ldr	r3, [pc, #112]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	00db      	lsls	r3, r3, #3
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d1eb      	bne.n	800a5c6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 0302 	and.w	r3, r3, #2
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d010      	beq.n	800a61c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68da      	ldr	r2, [r3, #12]
 800a5fe:	4b14      	ldr	r3, [pc, #80]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	f003 030f 	and.w	r3, r3, #15
 800a606:	429a      	cmp	r2, r3
 800a608:	d208      	bcs.n	800a61c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a60a:	4b11      	ldr	r3, [pc, #68]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a60c:	699b      	ldr	r3, [r3, #24]
 800a60e:	f023 020f 	bic.w	r2, r3, #15
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	490e      	ldr	r1, [pc, #56]	; (800a650 <HAL_RCC_ClockConfig+0x244>)
 800a618:	4313      	orrs	r3, r2
 800a61a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a61c:	4b0b      	ldr	r3, [pc, #44]	; (800a64c <HAL_RCC_ClockConfig+0x240>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 030f 	and.w	r3, r3, #15
 800a624:	683a      	ldr	r2, [r7, #0]
 800a626:	429a      	cmp	r2, r3
 800a628:	d214      	bcs.n	800a654 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a62a:	4b08      	ldr	r3, [pc, #32]	; (800a64c <HAL_RCC_ClockConfig+0x240>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f023 020f 	bic.w	r2, r3, #15
 800a632:	4906      	ldr	r1, [pc, #24]	; (800a64c <HAL_RCC_ClockConfig+0x240>)
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	4313      	orrs	r3, r2
 800a638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a63a:	4b04      	ldr	r3, [pc, #16]	; (800a64c <HAL_RCC_ClockConfig+0x240>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f003 030f 	and.w	r3, r3, #15
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	429a      	cmp	r2, r3
 800a646:	d005      	beq.n	800a654 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e086      	b.n	800a75a <HAL_RCC_ClockConfig+0x34e>
 800a64c:	52002000 	.word	0x52002000
 800a650:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 0304 	and.w	r3, r3, #4
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d010      	beq.n	800a682 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	691a      	ldr	r2, [r3, #16]
 800a664:	4b3f      	ldr	r3, [pc, #252]	; (800a764 <HAL_RCC_ClockConfig+0x358>)
 800a666:	699b      	ldr	r3, [r3, #24]
 800a668:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d208      	bcs.n	800a682 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a670:	4b3c      	ldr	r3, [pc, #240]	; (800a764 <HAL_RCC_ClockConfig+0x358>)
 800a672:	699b      	ldr	r3, [r3, #24]
 800a674:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	4939      	ldr	r1, [pc, #228]	; (800a764 <HAL_RCC_ClockConfig+0x358>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0308 	and.w	r3, r3, #8
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d010      	beq.n	800a6b0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	695a      	ldr	r2, [r3, #20]
 800a692:	4b34      	ldr	r3, [pc, #208]	; (800a764 <HAL_RCC_ClockConfig+0x358>)
 800a694:	69db      	ldr	r3, [r3, #28]
 800a696:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d208      	bcs.n	800a6b0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a69e:	4b31      	ldr	r3, [pc, #196]	; (800a764 <HAL_RCC_ClockConfig+0x358>)
 800a6a0:	69db      	ldr	r3, [r3, #28]
 800a6a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	695b      	ldr	r3, [r3, #20]
 800a6aa:	492e      	ldr	r1, [pc, #184]	; (800a764 <HAL_RCC_ClockConfig+0x358>)
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0310 	and.w	r3, r3, #16
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d010      	beq.n	800a6de <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	699a      	ldr	r2, [r3, #24]
 800a6c0:	4b28      	ldr	r3, [pc, #160]	; (800a764 <HAL_RCC_ClockConfig+0x358>)
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d208      	bcs.n	800a6de <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a6cc:	4b25      	ldr	r3, [pc, #148]	; (800a764 <HAL_RCC_ClockConfig+0x358>)
 800a6ce:	69db      	ldr	r3, [r3, #28]
 800a6d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	4922      	ldr	r1, [pc, #136]	; (800a764 <HAL_RCC_ClockConfig+0x358>)
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 0320 	and.w	r3, r3, #32
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d010      	beq.n	800a70c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	69da      	ldr	r2, [r3, #28]
 800a6ee:	4b1d      	ldr	r3, [pc, #116]	; (800a764 <HAL_RCC_ClockConfig+0x358>)
 800a6f0:	6a1b      	ldr	r3, [r3, #32]
 800a6f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d208      	bcs.n	800a70c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a6fa:	4b1a      	ldr	r3, [pc, #104]	; (800a764 <HAL_RCC_ClockConfig+0x358>)
 800a6fc:	6a1b      	ldr	r3, [r3, #32]
 800a6fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	4917      	ldr	r1, [pc, #92]	; (800a764 <HAL_RCC_ClockConfig+0x358>)
 800a708:	4313      	orrs	r3, r2
 800a70a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a70c:	f000 f834 	bl	800a778 <HAL_RCC_GetSysClockFreq>
 800a710:	4602      	mov	r2, r0
 800a712:	4b14      	ldr	r3, [pc, #80]	; (800a764 <HAL_RCC_ClockConfig+0x358>)
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	0a1b      	lsrs	r3, r3, #8
 800a718:	f003 030f 	and.w	r3, r3, #15
 800a71c:	4912      	ldr	r1, [pc, #72]	; (800a768 <HAL_RCC_ClockConfig+0x35c>)
 800a71e:	5ccb      	ldrb	r3, [r1, r3]
 800a720:	f003 031f 	and.w	r3, r3, #31
 800a724:	fa22 f303 	lsr.w	r3, r2, r3
 800a728:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a72a:	4b0e      	ldr	r3, [pc, #56]	; (800a764 <HAL_RCC_ClockConfig+0x358>)
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	f003 030f 	and.w	r3, r3, #15
 800a732:	4a0d      	ldr	r2, [pc, #52]	; (800a768 <HAL_RCC_ClockConfig+0x35c>)
 800a734:	5cd3      	ldrb	r3, [r2, r3]
 800a736:	f003 031f 	and.w	r3, r3, #31
 800a73a:	693a      	ldr	r2, [r7, #16]
 800a73c:	fa22 f303 	lsr.w	r3, r2, r3
 800a740:	4a0a      	ldr	r2, [pc, #40]	; (800a76c <HAL_RCC_ClockConfig+0x360>)
 800a742:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a744:	4a0a      	ldr	r2, [pc, #40]	; (800a770 <HAL_RCC_ClockConfig+0x364>)
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a74a:	4b0a      	ldr	r3, [pc, #40]	; (800a774 <HAL_RCC_ClockConfig+0x368>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4618      	mov	r0, r3
 800a750:	f7f9 fdf0 	bl	8004334 <HAL_InitTick>
 800a754:	4603      	mov	r3, r0
 800a756:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a758:	7bfb      	ldrb	r3, [r7, #15]
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3718      	adds	r7, #24
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	58024400 	.word	0x58024400
 800a768:	08012e98 	.word	0x08012e98
 800a76c:	24000018 	.word	0x24000018
 800a770:	24000014 	.word	0x24000014
 800a774:	2400001c 	.word	0x2400001c

0800a778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a778:	b480      	push	{r7}
 800a77a:	b089      	sub	sp, #36	; 0x24
 800a77c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a77e:	4bb3      	ldr	r3, [pc, #716]	; (800aa4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a786:	2b18      	cmp	r3, #24
 800a788:	f200 8155 	bhi.w	800aa36 <HAL_RCC_GetSysClockFreq+0x2be>
 800a78c:	a201      	add	r2, pc, #4	; (adr r2, 800a794 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a792:	bf00      	nop
 800a794:	0800a7f9 	.word	0x0800a7f9
 800a798:	0800aa37 	.word	0x0800aa37
 800a79c:	0800aa37 	.word	0x0800aa37
 800a7a0:	0800aa37 	.word	0x0800aa37
 800a7a4:	0800aa37 	.word	0x0800aa37
 800a7a8:	0800aa37 	.word	0x0800aa37
 800a7ac:	0800aa37 	.word	0x0800aa37
 800a7b0:	0800aa37 	.word	0x0800aa37
 800a7b4:	0800a81f 	.word	0x0800a81f
 800a7b8:	0800aa37 	.word	0x0800aa37
 800a7bc:	0800aa37 	.word	0x0800aa37
 800a7c0:	0800aa37 	.word	0x0800aa37
 800a7c4:	0800aa37 	.word	0x0800aa37
 800a7c8:	0800aa37 	.word	0x0800aa37
 800a7cc:	0800aa37 	.word	0x0800aa37
 800a7d0:	0800aa37 	.word	0x0800aa37
 800a7d4:	0800a825 	.word	0x0800a825
 800a7d8:	0800aa37 	.word	0x0800aa37
 800a7dc:	0800aa37 	.word	0x0800aa37
 800a7e0:	0800aa37 	.word	0x0800aa37
 800a7e4:	0800aa37 	.word	0x0800aa37
 800a7e8:	0800aa37 	.word	0x0800aa37
 800a7ec:	0800aa37 	.word	0x0800aa37
 800a7f0:	0800aa37 	.word	0x0800aa37
 800a7f4:	0800a82b 	.word	0x0800a82b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7f8:	4b94      	ldr	r3, [pc, #592]	; (800aa4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 0320 	and.w	r3, r3, #32
 800a800:	2b00      	cmp	r3, #0
 800a802:	d009      	beq.n	800a818 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a804:	4b91      	ldr	r3, [pc, #580]	; (800aa4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	08db      	lsrs	r3, r3, #3
 800a80a:	f003 0303 	and.w	r3, r3, #3
 800a80e:	4a90      	ldr	r2, [pc, #576]	; (800aa50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a810:	fa22 f303 	lsr.w	r3, r2, r3
 800a814:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a816:	e111      	b.n	800aa3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a818:	4b8d      	ldr	r3, [pc, #564]	; (800aa50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a81a:	61bb      	str	r3, [r7, #24]
    break;
 800a81c:	e10e      	b.n	800aa3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a81e:	4b8d      	ldr	r3, [pc, #564]	; (800aa54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a820:	61bb      	str	r3, [r7, #24]
    break;
 800a822:	e10b      	b.n	800aa3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a824:	4b8c      	ldr	r3, [pc, #560]	; (800aa58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a826:	61bb      	str	r3, [r7, #24]
    break;
 800a828:	e108      	b.n	800aa3c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a82a:	4b88      	ldr	r3, [pc, #544]	; (800aa4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a82e:	f003 0303 	and.w	r3, r3, #3
 800a832:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a834:	4b85      	ldr	r3, [pc, #532]	; (800aa4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a838:	091b      	lsrs	r3, r3, #4
 800a83a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a83e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a840:	4b82      	ldr	r3, [pc, #520]	; (800aa4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a844:	f003 0301 	and.w	r3, r3, #1
 800a848:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a84a:	4b80      	ldr	r3, [pc, #512]	; (800aa4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a84e:	08db      	lsrs	r3, r3, #3
 800a850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	fb02 f303 	mul.w	r3, r2, r3
 800a85a:	ee07 3a90 	vmov	s15, r3
 800a85e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a862:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f000 80e1 	beq.w	800aa30 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	2b02      	cmp	r3, #2
 800a872:	f000 8083 	beq.w	800a97c <HAL_RCC_GetSysClockFreq+0x204>
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	2b02      	cmp	r3, #2
 800a87a:	f200 80a1 	bhi.w	800a9c0 <HAL_RCC_GetSysClockFreq+0x248>
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d003      	beq.n	800a88c <HAL_RCC_GetSysClockFreq+0x114>
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d056      	beq.n	800a938 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a88a:	e099      	b.n	800a9c0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a88c:	4b6f      	ldr	r3, [pc, #444]	; (800aa4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 0320 	and.w	r3, r3, #32
 800a894:	2b00      	cmp	r3, #0
 800a896:	d02d      	beq.n	800a8f4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a898:	4b6c      	ldr	r3, [pc, #432]	; (800aa4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	08db      	lsrs	r3, r3, #3
 800a89e:	f003 0303 	and.w	r3, r3, #3
 800a8a2:	4a6b      	ldr	r2, [pc, #428]	; (800aa50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a8a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	ee07 3a90 	vmov	s15, r3
 800a8b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	ee07 3a90 	vmov	s15, r3
 800a8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8c2:	4b62      	ldr	r3, [pc, #392]	; (800aa4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ca:	ee07 3a90 	vmov	s15, r3
 800a8ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8d6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800aa5c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a8f2:	e087      	b.n	800aa04 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	ee07 3a90 	vmov	s15, r3
 800a8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8fe:	eddf 6a58 	vldr	s13, [pc, #352]	; 800aa60 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a906:	4b51      	ldr	r3, [pc, #324]	; (800aa4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a90e:	ee07 3a90 	vmov	s15, r3
 800a912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a916:	ed97 6a02 	vldr	s12, [r7, #8]
 800a91a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800aa5c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a91e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a92a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a92e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a932:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a936:	e065      	b.n	800aa04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	ee07 3a90 	vmov	s15, r3
 800a93e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a942:	eddf 6a48 	vldr	s13, [pc, #288]	; 800aa64 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a94a:	4b40      	ldr	r3, [pc, #256]	; (800aa4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a94e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a952:	ee07 3a90 	vmov	s15, r3
 800a956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a95a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a95e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800aa5c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a96a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a96e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a972:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a976:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a97a:	e043      	b.n	800aa04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	ee07 3a90 	vmov	s15, r3
 800a982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a986:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aa68 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a98a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a98e:	4b2f      	ldr	r3, [pc, #188]	; (800aa4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a996:	ee07 3a90 	vmov	s15, r3
 800a99a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a99e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9a2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800aa5c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a9a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9be:	e021      	b.n	800aa04 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	ee07 3a90 	vmov	s15, r3
 800a9c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ca:	eddf 6a26 	vldr	s13, [pc, #152]	; 800aa64 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a9ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9d2:	4b1e      	ldr	r3, [pc, #120]	; (800aa4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9da:	ee07 3a90 	vmov	s15, r3
 800a9de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9e6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aa5c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a9ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa02:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800aa04:	4b11      	ldr	r3, [pc, #68]	; (800aa4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa08:	0a5b      	lsrs	r3, r3, #9
 800aa0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa0e:	3301      	adds	r3, #1
 800aa10:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	ee07 3a90 	vmov	s15, r3
 800aa18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa28:	ee17 3a90 	vmov	r3, s15
 800aa2c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800aa2e:	e005      	b.n	800aa3c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800aa30:	2300      	movs	r3, #0
 800aa32:	61bb      	str	r3, [r7, #24]
    break;
 800aa34:	e002      	b.n	800aa3c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800aa36:	4b07      	ldr	r3, [pc, #28]	; (800aa54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aa38:	61bb      	str	r3, [r7, #24]
    break;
 800aa3a:	bf00      	nop
  }

  return sysclockfreq;
 800aa3c:	69bb      	ldr	r3, [r7, #24]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3724      	adds	r7, #36	; 0x24
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	58024400 	.word	0x58024400
 800aa50:	03d09000 	.word	0x03d09000
 800aa54:	003d0900 	.word	0x003d0900
 800aa58:	017d7840 	.word	0x017d7840
 800aa5c:	46000000 	.word	0x46000000
 800aa60:	4c742400 	.word	0x4c742400
 800aa64:	4a742400 	.word	0x4a742400
 800aa68:	4bbebc20 	.word	0x4bbebc20

0800aa6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aa72:	f7ff fe81 	bl	800a778 <HAL_RCC_GetSysClockFreq>
 800aa76:	4602      	mov	r2, r0
 800aa78:	4b10      	ldr	r3, [pc, #64]	; (800aabc <HAL_RCC_GetHCLKFreq+0x50>)
 800aa7a:	699b      	ldr	r3, [r3, #24]
 800aa7c:	0a1b      	lsrs	r3, r3, #8
 800aa7e:	f003 030f 	and.w	r3, r3, #15
 800aa82:	490f      	ldr	r1, [pc, #60]	; (800aac0 <HAL_RCC_GetHCLKFreq+0x54>)
 800aa84:	5ccb      	ldrb	r3, [r1, r3]
 800aa86:	f003 031f 	and.w	r3, r3, #31
 800aa8a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa90:	4b0a      	ldr	r3, [pc, #40]	; (800aabc <HAL_RCC_GetHCLKFreq+0x50>)
 800aa92:	699b      	ldr	r3, [r3, #24]
 800aa94:	f003 030f 	and.w	r3, r3, #15
 800aa98:	4a09      	ldr	r2, [pc, #36]	; (800aac0 <HAL_RCC_GetHCLKFreq+0x54>)
 800aa9a:	5cd3      	ldrb	r3, [r2, r3]
 800aa9c:	f003 031f 	and.w	r3, r3, #31
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa6:	4a07      	ldr	r2, [pc, #28]	; (800aac4 <HAL_RCC_GetHCLKFreq+0x58>)
 800aaa8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aaaa:	4a07      	ldr	r2, [pc, #28]	; (800aac8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800aab0:	4b04      	ldr	r3, [pc, #16]	; (800aac4 <HAL_RCC_GetHCLKFreq+0x58>)
 800aab2:	681b      	ldr	r3, [r3, #0]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	58024400 	.word	0x58024400
 800aac0:	08012e98 	.word	0x08012e98
 800aac4:	24000018 	.word	0x24000018
 800aac8:	24000014 	.word	0x24000014

0800aacc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800aad0:	f7ff ffcc 	bl	800aa6c <HAL_RCC_GetHCLKFreq>
 800aad4:	4602      	mov	r2, r0
 800aad6:	4b06      	ldr	r3, [pc, #24]	; (800aaf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	091b      	lsrs	r3, r3, #4
 800aadc:	f003 0307 	and.w	r3, r3, #7
 800aae0:	4904      	ldr	r1, [pc, #16]	; (800aaf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aae2:	5ccb      	ldrb	r3, [r1, r3]
 800aae4:	f003 031f 	and.w	r3, r3, #31
 800aae8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	58024400 	.word	0x58024400
 800aaf4:	08012e98 	.word	0x08012e98

0800aaf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aafc:	f7ff ffb6 	bl	800aa6c <HAL_RCC_GetHCLKFreq>
 800ab00:	4602      	mov	r2, r0
 800ab02:	4b06      	ldr	r3, [pc, #24]	; (800ab1c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab04:	69db      	ldr	r3, [r3, #28]
 800ab06:	0a1b      	lsrs	r3, r3, #8
 800ab08:	f003 0307 	and.w	r3, r3, #7
 800ab0c:	4904      	ldr	r1, [pc, #16]	; (800ab20 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ab0e:	5ccb      	ldrb	r3, [r1, r3]
 800ab10:	f003 031f 	and.w	r3, r3, #31
 800ab14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	58024400 	.word	0x58024400
 800ab20:	08012e98 	.word	0x08012e98

0800ab24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b086      	sub	sp, #24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ab30:	2300      	movs	r3, #0
 800ab32:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d03f      	beq.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab48:	d02a      	beq.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ab4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab4e:	d824      	bhi.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ab50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab54:	d018      	beq.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ab56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab5a:	d81e      	bhi.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d003      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ab60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab64:	d007      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ab66:	e018      	b.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab68:	4bab      	ldr	r3, [pc, #684]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6c:	4aaa      	ldr	r2, [pc, #680]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ab74:	e015      	b.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	3304      	adds	r3, #4
 800ab7a:	2102      	movs	r1, #2
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f001 f9cf 	bl	800bf20 <RCCEx_PLL2_Config>
 800ab82:	4603      	mov	r3, r0
 800ab84:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ab86:	e00c      	b.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	3324      	adds	r3, #36	; 0x24
 800ab8c:	2102      	movs	r1, #2
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f001 fa78 	bl	800c084 <RCCEx_PLL3_Config>
 800ab94:	4603      	mov	r3, r0
 800ab96:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ab98:	e003      	b.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab9e:	e000      	b.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800aba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aba2:	7dfb      	ldrb	r3, [r7, #23]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d109      	bne.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aba8:	4b9b      	ldr	r3, [pc, #620]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abb4:	4998      	ldr	r1, [pc, #608]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abb6:	4313      	orrs	r3, r2
 800abb8:	650b      	str	r3, [r1, #80]	; 0x50
 800abba:	e001      	b.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abbc:	7dfb      	ldrb	r3, [r7, #23]
 800abbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d03d      	beq.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abd0:	2b04      	cmp	r3, #4
 800abd2:	d826      	bhi.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800abd4:	a201      	add	r2, pc, #4	; (adr r2, 800abdc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800abd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abda:	bf00      	nop
 800abdc:	0800abf1 	.word	0x0800abf1
 800abe0:	0800abff 	.word	0x0800abff
 800abe4:	0800ac11 	.word	0x0800ac11
 800abe8:	0800ac29 	.word	0x0800ac29
 800abec:	0800ac29 	.word	0x0800ac29
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abf0:	4b89      	ldr	r3, [pc, #548]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf4:	4a88      	ldr	r2, [pc, #544]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800abfc:	e015      	b.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	3304      	adds	r3, #4
 800ac02:	2100      	movs	r1, #0
 800ac04:	4618      	mov	r0, r3
 800ac06:	f001 f98b 	bl	800bf20 <RCCEx_PLL2_Config>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac0e:	e00c      	b.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	3324      	adds	r3, #36	; 0x24
 800ac14:	2100      	movs	r1, #0
 800ac16:	4618      	mov	r0, r3
 800ac18:	f001 fa34 	bl	800c084 <RCCEx_PLL3_Config>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac20:	e003      	b.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	75fb      	strb	r3, [r7, #23]
      break;
 800ac26:	e000      	b.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ac28:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac2a:	7dfb      	ldrb	r3, [r7, #23]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d109      	bne.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ac30:	4b79      	ldr	r3, [pc, #484]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac34:	f023 0207 	bic.w	r2, r3, #7
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac3c:	4976      	ldr	r1, [pc, #472]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	650b      	str	r3, [r1, #80]	; 0x50
 800ac42:	e001      	b.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac44:	7dfb      	ldrb	r3, [r7, #23]
 800ac46:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d042      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac5c:	d02b      	beq.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800ac5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac62:	d825      	bhi.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ac64:	2bc0      	cmp	r3, #192	; 0xc0
 800ac66:	d028      	beq.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ac68:	2bc0      	cmp	r3, #192	; 0xc0
 800ac6a:	d821      	bhi.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ac6c:	2b80      	cmp	r3, #128	; 0x80
 800ac6e:	d016      	beq.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800ac70:	2b80      	cmp	r3, #128	; 0x80
 800ac72:	d81d      	bhi.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800ac78:	2b40      	cmp	r3, #64	; 0x40
 800ac7a:	d007      	beq.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800ac7c:	e018      	b.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac7e:	4b66      	ldr	r3, [pc, #408]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac82:	4a65      	ldr	r2, [pc, #404]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ac8a:	e017      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	3304      	adds	r3, #4
 800ac90:	2100      	movs	r1, #0
 800ac92:	4618      	mov	r0, r3
 800ac94:	f001 f944 	bl	800bf20 <RCCEx_PLL2_Config>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ac9c:	e00e      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	3324      	adds	r3, #36	; 0x24
 800aca2:	2100      	movs	r1, #0
 800aca4:	4618      	mov	r0, r3
 800aca6:	f001 f9ed 	bl	800c084 <RCCEx_PLL3_Config>
 800acaa:	4603      	mov	r3, r0
 800acac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800acae:	e005      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800acb0:	2301      	movs	r3, #1
 800acb2:	75fb      	strb	r3, [r7, #23]
      break;
 800acb4:	e002      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800acb6:	bf00      	nop
 800acb8:	e000      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800acba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d109      	bne.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800acc2:	4b55      	ldr	r3, [pc, #340]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800acc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acc6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acce:	4952      	ldr	r1, [pc, #328]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800acd0:	4313      	orrs	r3, r2
 800acd2:	650b      	str	r3, [r1, #80]	; 0x50
 800acd4:	e001      	b.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd6:	7dfb      	ldrb	r3, [r7, #23]
 800acd8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d049      	beq.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800acec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acf0:	d030      	beq.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800acf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acf6:	d82a      	bhi.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800acf8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800acfc:	d02c      	beq.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800acfe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad02:	d824      	bhi.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ad04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad08:	d018      	beq.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800ad0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad0e:	d81e      	bhi.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d003      	beq.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800ad14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad18:	d007      	beq.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ad1a:	e018      	b.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad1c:	4b3e      	ldr	r3, [pc, #248]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad20:	4a3d      	ldr	r2, [pc, #244]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ad28:	e017      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	2100      	movs	r1, #0
 800ad30:	4618      	mov	r0, r3
 800ad32:	f001 f8f5 	bl	800bf20 <RCCEx_PLL2_Config>
 800ad36:	4603      	mov	r3, r0
 800ad38:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ad3a:	e00e      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	3324      	adds	r3, #36	; 0x24
 800ad40:	2100      	movs	r1, #0
 800ad42:	4618      	mov	r0, r3
 800ad44:	f001 f99e 	bl	800c084 <RCCEx_PLL3_Config>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ad4c:	e005      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	75fb      	strb	r3, [r7, #23]
      break;
 800ad52:	e002      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800ad54:	bf00      	nop
 800ad56:	e000      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800ad58:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad5a:	7dfb      	ldrb	r3, [r7, #23]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d10a      	bne.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ad60:	4b2d      	ldr	r3, [pc, #180]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad64:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad6e:	492a      	ldr	r1, [pc, #168]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad70:	4313      	orrs	r3, r2
 800ad72:	658b      	str	r3, [r1, #88]	; 0x58
 800ad74:	e001      	b.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad76:	7dfb      	ldrb	r3, [r7, #23]
 800ad78:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d04c      	beq.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ad8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad90:	d030      	beq.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800ad92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad96:	d82a      	bhi.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ad98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad9c:	d02c      	beq.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800ad9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ada2:	d824      	bhi.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ada4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ada8:	d018      	beq.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800adaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adae:	d81e      	bhi.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d003      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800adb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800adb8:	d007      	beq.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800adba:	e018      	b.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adbc:	4b16      	ldr	r3, [pc, #88]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800adbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc0:	4a15      	ldr	r2, [pc, #84]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800adc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800adc8:	e017      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	3304      	adds	r3, #4
 800adce:	2100      	movs	r1, #0
 800add0:	4618      	mov	r0, r3
 800add2:	f001 f8a5 	bl	800bf20 <RCCEx_PLL2_Config>
 800add6:	4603      	mov	r3, r0
 800add8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800adda:	e00e      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	3324      	adds	r3, #36	; 0x24
 800ade0:	2100      	movs	r1, #0
 800ade2:	4618      	mov	r0, r3
 800ade4:	f001 f94e 	bl	800c084 <RCCEx_PLL3_Config>
 800ade8:	4603      	mov	r3, r0
 800adea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800adec:	e005      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	75fb      	strb	r3, [r7, #23]
      break;
 800adf2:	e002      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800adf4:	bf00      	nop
 800adf6:	e000      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800adf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adfa:	7dfb      	ldrb	r3, [r7, #23]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d10d      	bne.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ae00:	4b05      	ldr	r3, [pc, #20]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae04:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ae0e:	4902      	ldr	r1, [pc, #8]	; (800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae10:	4313      	orrs	r3, r2
 800ae12:	658b      	str	r3, [r1, #88]	; 0x58
 800ae14:	e004      	b.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800ae16:	bf00      	nop
 800ae18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae1c:	7dfb      	ldrb	r3, [r7, #23]
 800ae1e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d032      	beq.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae30:	2b30      	cmp	r3, #48	; 0x30
 800ae32:	d01c      	beq.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ae34:	2b30      	cmp	r3, #48	; 0x30
 800ae36:	d817      	bhi.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800ae38:	2b20      	cmp	r3, #32
 800ae3a:	d00c      	beq.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800ae3c:	2b20      	cmp	r3, #32
 800ae3e:	d813      	bhi.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d016      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800ae44:	2b10      	cmp	r3, #16
 800ae46:	d10f      	bne.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae48:	4baf      	ldr	r3, [pc, #700]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ae4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4c:	4aae      	ldr	r2, [pc, #696]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ae4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ae54:	e00e      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	3304      	adds	r3, #4
 800ae5a:	2102      	movs	r1, #2
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f001 f85f 	bl	800bf20 <RCCEx_PLL2_Config>
 800ae62:	4603      	mov	r3, r0
 800ae64:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ae66:	e005      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	75fb      	strb	r3, [r7, #23]
      break;
 800ae6c:	e002      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800ae6e:	bf00      	nop
 800ae70:	e000      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800ae72:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae74:	7dfb      	ldrb	r3, [r7, #23]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d109      	bne.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ae7a:	4ba3      	ldr	r3, [pc, #652]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ae7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae86:	49a0      	ldr	r1, [pc, #640]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ae8c:	e001      	b.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae8e:	7dfb      	ldrb	r3, [r7, #23]
 800ae90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d047      	beq.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aea6:	d030      	beq.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800aea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aeac:	d82a      	bhi.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800aeae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aeb2:	d02c      	beq.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800aeb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aeb8:	d824      	bhi.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800aeba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aebe:	d018      	beq.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800aec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aec4:	d81e      	bhi.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800aeca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aece:	d007      	beq.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800aed0:	e018      	b.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aed2:	4b8d      	ldr	r3, [pc, #564]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed6:	4a8c      	ldr	r2, [pc, #560]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aedc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aede:	e017      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	3304      	adds	r3, #4
 800aee4:	2100      	movs	r1, #0
 800aee6:	4618      	mov	r0, r3
 800aee8:	f001 f81a 	bl	800bf20 <RCCEx_PLL2_Config>
 800aeec:	4603      	mov	r3, r0
 800aeee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aef0:	e00e      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	3324      	adds	r3, #36	; 0x24
 800aef6:	2100      	movs	r1, #0
 800aef8:	4618      	mov	r0, r3
 800aefa:	f001 f8c3 	bl	800c084 <RCCEx_PLL3_Config>
 800aefe:	4603      	mov	r3, r0
 800af00:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800af02:	e005      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	75fb      	strb	r3, [r7, #23]
      break;
 800af08:	e002      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800af0a:	bf00      	nop
 800af0c:	e000      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800af0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af10:	7dfb      	ldrb	r3, [r7, #23]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d109      	bne.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800af16:	4b7c      	ldr	r3, [pc, #496]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800af18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af1a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af22:	4979      	ldr	r1, [pc, #484]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800af24:	4313      	orrs	r3, r2
 800af26:	650b      	str	r3, [r1, #80]	; 0x50
 800af28:	e001      	b.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af2a:	7dfb      	ldrb	r3, [r7, #23]
 800af2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af36:	2b00      	cmp	r3, #0
 800af38:	d049      	beq.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af42:	d02e      	beq.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800af44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af48:	d828      	bhi.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800af4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af4e:	d02a      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800af50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af54:	d822      	bhi.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800af56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af5a:	d026      	beq.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0x486>
 800af5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af60:	d81c      	bhi.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800af62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af66:	d010      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x466>
 800af68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af6c:	d816      	bhi.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d01d      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800af72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af76:	d111      	bne.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	3304      	adds	r3, #4
 800af7c:	2101      	movs	r1, #1
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 ffce 	bl	800bf20 <RCCEx_PLL2_Config>
 800af84:	4603      	mov	r3, r0
 800af86:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800af88:	e012      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3324      	adds	r3, #36	; 0x24
 800af8e:	2101      	movs	r1, #1
 800af90:	4618      	mov	r0, r3
 800af92:	f001 f877 	bl	800c084 <RCCEx_PLL3_Config>
 800af96:	4603      	mov	r3, r0
 800af98:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800af9a:	e009      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	75fb      	strb	r3, [r7, #23]
      break;
 800afa0:	e006      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800afa2:	bf00      	nop
 800afa4:	e004      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800afa6:	bf00      	nop
 800afa8:	e002      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800afaa:	bf00      	nop
 800afac:	e000      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800afae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afb0:	7dfb      	ldrb	r3, [r7, #23]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d109      	bne.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800afb6:	4b54      	ldr	r3, [pc, #336]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800afb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afc2:	4951      	ldr	r1, [pc, #324]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800afc4:	4313      	orrs	r3, r2
 800afc6:	650b      	str	r3, [r1, #80]	; 0x50
 800afc8:	e001      	b.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afca:	7dfb      	ldrb	r3, [r7, #23]
 800afcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d04b      	beq.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800afe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afe4:	d02e      	beq.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800afe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afea:	d828      	bhi.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800afec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aff0:	d02a      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800aff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aff6:	d822      	bhi.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800aff8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800affc:	d026      	beq.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800affe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b002:	d81c      	bhi.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b008:	d010      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800b00a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b00e:	d816      	bhi.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b010:	2b00      	cmp	r3, #0
 800b012:	d01d      	beq.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800b014:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b018:	d111      	bne.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	3304      	adds	r3, #4
 800b01e:	2101      	movs	r1, #1
 800b020:	4618      	mov	r0, r3
 800b022:	f000 ff7d 	bl	800bf20 <RCCEx_PLL2_Config>
 800b026:	4603      	mov	r3, r0
 800b028:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b02a:	e012      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	3324      	adds	r3, #36	; 0x24
 800b030:	2101      	movs	r1, #1
 800b032:	4618      	mov	r0, r3
 800b034:	f001 f826 	bl	800c084 <RCCEx_PLL3_Config>
 800b038:	4603      	mov	r3, r0
 800b03a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b03c:	e009      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	75fb      	strb	r3, [r7, #23]
      break;
 800b042:	e006      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b044:	bf00      	nop
 800b046:	e004      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b048:	bf00      	nop
 800b04a:	e002      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b04c:	bf00      	nop
 800b04e:	e000      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b050:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b052:	7dfb      	ldrb	r3, [r7, #23]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10a      	bne.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b058:	4b2b      	ldr	r3, [pc, #172]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b05a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b05c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b066:	4928      	ldr	r1, [pc, #160]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b068:	4313      	orrs	r3, r2
 800b06a:	658b      	str	r3, [r1, #88]	; 0x58
 800b06c:	e001      	b.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b06e:	7dfb      	ldrb	r3, [r7, #23]
 800b070:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d02f      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b086:	d00e      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b08c:	d814      	bhi.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d015      	beq.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b092:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b096:	d10f      	bne.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b098:	4b1b      	ldr	r3, [pc, #108]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09c:	4a1a      	ldr	r2, [pc, #104]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b09e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b0a4:	e00c      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	3304      	adds	r3, #4
 800b0aa:	2101      	movs	r1, #1
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f000 ff37 	bl	800bf20 <RCCEx_PLL2_Config>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b0b6:	e003      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b0bc:	e000      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800b0be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0c0:	7dfb      	ldrb	r3, [r7, #23]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d109      	bne.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b0c6:	4b10      	ldr	r3, [pc, #64]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b0c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0d2:	490d      	ldr	r1, [pc, #52]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	650b      	str	r3, [r1, #80]	; 0x50
 800b0d8:	e001      	b.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0da:	7dfb      	ldrb	r3, [r7, #23]
 800b0dc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d033      	beq.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ee:	2b03      	cmp	r3, #3
 800b0f0:	d81c      	bhi.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b0f2:	a201      	add	r2, pc, #4	; (adr r2, 800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800b0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f8:	0800b133 	.word	0x0800b133
 800b0fc:	0800b10d 	.word	0x0800b10d
 800b100:	0800b11b 	.word	0x0800b11b
 800b104:	0800b133 	.word	0x0800b133
 800b108:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b10c:	4bb8      	ldr	r3, [pc, #736]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b110:	4ab7      	ldr	r2, [pc, #732]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b116:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b118:	e00c      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	3304      	adds	r3, #4
 800b11e:	2102      	movs	r1, #2
 800b120:	4618      	mov	r0, r3
 800b122:	f000 fefd 	bl	800bf20 <RCCEx_PLL2_Config>
 800b126:	4603      	mov	r3, r0
 800b128:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b12a:	e003      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	75fb      	strb	r3, [r7, #23]
      break;
 800b130:	e000      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b132:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b134:	7dfb      	ldrb	r3, [r7, #23]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d109      	bne.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b13a:	4bad      	ldr	r3, [pc, #692]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b13c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b13e:	f023 0203 	bic.w	r2, r3, #3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b146:	49aa      	ldr	r1, [pc, #680]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b148:	4313      	orrs	r3, r2
 800b14a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b14c:	e001      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b14e:	7dfb      	ldrb	r3, [r7, #23]
 800b150:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f000 8086 	beq.w	800b26c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b160:	4ba4      	ldr	r3, [pc, #656]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4aa3      	ldr	r2, [pc, #652]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b16a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b16c:	f7f9 f92c 	bl	80043c8 <HAL_GetTick>
 800b170:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b172:	e009      	b.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b174:	f7f9 f928 	bl	80043c8 <HAL_GetTick>
 800b178:	4602      	mov	r2, r0
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	2b64      	cmp	r3, #100	; 0x64
 800b180:	d902      	bls.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b182:	2303      	movs	r3, #3
 800b184:	75fb      	strb	r3, [r7, #23]
        break;
 800b186:	e005      	b.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b188:	4b9a      	ldr	r3, [pc, #616]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b190:	2b00      	cmp	r3, #0
 800b192:	d0ef      	beq.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b194:	7dfb      	ldrb	r3, [r7, #23]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d166      	bne.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b19a:	4b95      	ldr	r3, [pc, #596]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b19c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b1a4:	4053      	eors	r3, r2
 800b1a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d013      	beq.n	800b1d6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b1ae:	4b90      	ldr	r3, [pc, #576]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b1b8:	4b8d      	ldr	r3, [pc, #564]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1bc:	4a8c      	ldr	r2, [pc, #560]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b1be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b1c4:	4b8a      	ldr	r3, [pc, #552]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b1c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c8:	4a89      	ldr	r2, [pc, #548]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b1ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b1d0:	4a87      	ldr	r2, [pc, #540]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b1dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1e0:	d115      	bne.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1e2:	f7f9 f8f1 	bl	80043c8 <HAL_GetTick>
 800b1e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b1e8:	e00b      	b.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1ea:	f7f9 f8ed 	bl	80043c8 <HAL_GetTick>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d902      	bls.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	75fb      	strb	r3, [r7, #23]
            break;
 800b200:	e005      	b.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b202:	4b7b      	ldr	r3, [pc, #492]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b206:	f003 0302 	and.w	r3, r3, #2
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d0ed      	beq.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b20e:	7dfb      	ldrb	r3, [r7, #23]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d126      	bne.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b21a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b21e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b222:	d10d      	bne.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b224:	4b72      	ldr	r3, [pc, #456]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b226:	691b      	ldr	r3, [r3, #16]
 800b228:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b232:	0919      	lsrs	r1, r3, #4
 800b234:	4b70      	ldr	r3, [pc, #448]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800b236:	400b      	ands	r3, r1
 800b238:	496d      	ldr	r1, [pc, #436]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b23a:	4313      	orrs	r3, r2
 800b23c:	610b      	str	r3, [r1, #16]
 800b23e:	e005      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b240:	4b6b      	ldr	r3, [pc, #428]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	4a6a      	ldr	r2, [pc, #424]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b246:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b24a:	6113      	str	r3, [r2, #16]
 800b24c:	4b68      	ldr	r3, [pc, #416]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b24e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b25a:	4965      	ldr	r1, [pc, #404]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b25c:	4313      	orrs	r3, r2
 800b25e:	670b      	str	r3, [r1, #112]	; 0x70
 800b260:	e004      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b262:	7dfb      	ldrb	r3, [r7, #23]
 800b264:	75bb      	strb	r3, [r7, #22]
 800b266:	e001      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b268:	7dfb      	ldrb	r3, [r7, #23]
 800b26a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f003 0301 	and.w	r3, r3, #1
 800b274:	2b00      	cmp	r3, #0
 800b276:	d07e      	beq.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b27c:	2b28      	cmp	r3, #40	; 0x28
 800b27e:	d867      	bhi.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b280:	a201      	add	r2, pc, #4	; (adr r2, 800b288 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b286:	bf00      	nop
 800b288:	0800b357 	.word	0x0800b357
 800b28c:	0800b351 	.word	0x0800b351
 800b290:	0800b351 	.word	0x0800b351
 800b294:	0800b351 	.word	0x0800b351
 800b298:	0800b351 	.word	0x0800b351
 800b29c:	0800b351 	.word	0x0800b351
 800b2a0:	0800b351 	.word	0x0800b351
 800b2a4:	0800b351 	.word	0x0800b351
 800b2a8:	0800b32d 	.word	0x0800b32d
 800b2ac:	0800b351 	.word	0x0800b351
 800b2b0:	0800b351 	.word	0x0800b351
 800b2b4:	0800b351 	.word	0x0800b351
 800b2b8:	0800b351 	.word	0x0800b351
 800b2bc:	0800b351 	.word	0x0800b351
 800b2c0:	0800b351 	.word	0x0800b351
 800b2c4:	0800b351 	.word	0x0800b351
 800b2c8:	0800b33f 	.word	0x0800b33f
 800b2cc:	0800b351 	.word	0x0800b351
 800b2d0:	0800b351 	.word	0x0800b351
 800b2d4:	0800b351 	.word	0x0800b351
 800b2d8:	0800b351 	.word	0x0800b351
 800b2dc:	0800b351 	.word	0x0800b351
 800b2e0:	0800b351 	.word	0x0800b351
 800b2e4:	0800b351 	.word	0x0800b351
 800b2e8:	0800b357 	.word	0x0800b357
 800b2ec:	0800b351 	.word	0x0800b351
 800b2f0:	0800b351 	.word	0x0800b351
 800b2f4:	0800b351 	.word	0x0800b351
 800b2f8:	0800b351 	.word	0x0800b351
 800b2fc:	0800b351 	.word	0x0800b351
 800b300:	0800b351 	.word	0x0800b351
 800b304:	0800b351 	.word	0x0800b351
 800b308:	0800b357 	.word	0x0800b357
 800b30c:	0800b351 	.word	0x0800b351
 800b310:	0800b351 	.word	0x0800b351
 800b314:	0800b351 	.word	0x0800b351
 800b318:	0800b351 	.word	0x0800b351
 800b31c:	0800b351 	.word	0x0800b351
 800b320:	0800b351 	.word	0x0800b351
 800b324:	0800b351 	.word	0x0800b351
 800b328:	0800b357 	.word	0x0800b357
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	3304      	adds	r3, #4
 800b330:	2101      	movs	r1, #1
 800b332:	4618      	mov	r0, r3
 800b334:	f000 fdf4 	bl	800bf20 <RCCEx_PLL2_Config>
 800b338:	4603      	mov	r3, r0
 800b33a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b33c:	e00c      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	3324      	adds	r3, #36	; 0x24
 800b342:	2101      	movs	r1, #1
 800b344:	4618      	mov	r0, r3
 800b346:	f000 fe9d 	bl	800c084 <RCCEx_PLL3_Config>
 800b34a:	4603      	mov	r3, r0
 800b34c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b34e:	e003      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	75fb      	strb	r3, [r7, #23]
      break;
 800b354:	e000      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800b356:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b358:	7dfb      	ldrb	r3, [r7, #23]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d109      	bne.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b35e:	4b24      	ldr	r3, [pc, #144]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b362:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b36a:	4921      	ldr	r1, [pc, #132]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b36c:	4313      	orrs	r3, r2
 800b36e:	654b      	str	r3, [r1, #84]	; 0x54
 800b370:	e001      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b372:	7dfb      	ldrb	r3, [r7, #23]
 800b374:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f003 0302 	and.w	r3, r3, #2
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d03e      	beq.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b386:	2b05      	cmp	r3, #5
 800b388:	d820      	bhi.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800b38a:	a201      	add	r2, pc, #4	; (adr r2, 800b390 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800b38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b390:	0800b3d3 	.word	0x0800b3d3
 800b394:	0800b3a9 	.word	0x0800b3a9
 800b398:	0800b3bb 	.word	0x0800b3bb
 800b39c:	0800b3d3 	.word	0x0800b3d3
 800b3a0:	0800b3d3 	.word	0x0800b3d3
 800b3a4:	0800b3d3 	.word	0x0800b3d3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	2101      	movs	r1, #1
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f000 fdb6 	bl	800bf20 <RCCEx_PLL2_Config>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b3b8:	e00c      	b.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	3324      	adds	r3, #36	; 0x24
 800b3be:	2101      	movs	r1, #1
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f000 fe5f 	bl	800c084 <RCCEx_PLL3_Config>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b3ca:	e003      	b.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	75fb      	strb	r3, [r7, #23]
      break;
 800b3d0:	e000      	b.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800b3d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3d4:	7dfb      	ldrb	r3, [r7, #23]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d110      	bne.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b3da:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3de:	f023 0207 	bic.w	r2, r3, #7
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3e6:	4902      	ldr	r1, [pc, #8]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	654b      	str	r3, [r1, #84]	; 0x54
 800b3ec:	e008      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b3ee:	bf00      	nop
 800b3f0:	58024400 	.word	0x58024400
 800b3f4:	58024800 	.word	0x58024800
 800b3f8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3fc:	7dfb      	ldrb	r3, [r7, #23]
 800b3fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f003 0304 	and.w	r3, r3, #4
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d039      	beq.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b412:	2b05      	cmp	r3, #5
 800b414:	d820      	bhi.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800b416:	a201      	add	r2, pc, #4	; (adr r2, 800b41c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800b418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b41c:	0800b45f 	.word	0x0800b45f
 800b420:	0800b435 	.word	0x0800b435
 800b424:	0800b447 	.word	0x0800b447
 800b428:	0800b45f 	.word	0x0800b45f
 800b42c:	0800b45f 	.word	0x0800b45f
 800b430:	0800b45f 	.word	0x0800b45f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	3304      	adds	r3, #4
 800b438:	2101      	movs	r1, #1
 800b43a:	4618      	mov	r0, r3
 800b43c:	f000 fd70 	bl	800bf20 <RCCEx_PLL2_Config>
 800b440:	4603      	mov	r3, r0
 800b442:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b444:	e00c      	b.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	3324      	adds	r3, #36	; 0x24
 800b44a:	2101      	movs	r1, #1
 800b44c:	4618      	mov	r0, r3
 800b44e:	f000 fe19 	bl	800c084 <RCCEx_PLL3_Config>
 800b452:	4603      	mov	r3, r0
 800b454:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b456:	e003      	b.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	75fb      	strb	r3, [r7, #23]
      break;
 800b45c:	e000      	b.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800b45e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b460:	7dfb      	ldrb	r3, [r7, #23]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d10a      	bne.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b466:	4bb7      	ldr	r3, [pc, #732]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b46a:	f023 0207 	bic.w	r2, r3, #7
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b474:	49b3      	ldr	r1, [pc, #716]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b476:	4313      	orrs	r3, r2
 800b478:	658b      	str	r3, [r1, #88]	; 0x58
 800b47a:	e001      	b.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b47c:	7dfb      	ldrb	r3, [r7, #23]
 800b47e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 0320 	and.w	r3, r3, #32
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d04b      	beq.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b492:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b496:	d02e      	beq.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800b498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b49c:	d828      	bhi.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b49e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4a2:	d02a      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b4a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4a8:	d822      	bhi.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b4aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4ae:	d026      	beq.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b4b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4b4:	d81c      	bhi.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b4b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4ba:	d010      	beq.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b4bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4c0:	d816      	bhi.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d01d      	beq.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b4c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4ca:	d111      	bne.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	3304      	adds	r3, #4
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f000 fd24 	bl	800bf20 <RCCEx_PLL2_Config>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b4dc:	e012      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3324      	adds	r3, #36	; 0x24
 800b4e2:	2102      	movs	r1, #2
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 fdcd 	bl	800c084 <RCCEx_PLL3_Config>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b4ee:	e009      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b4f4:	e006      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b4f6:	bf00      	nop
 800b4f8:	e004      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b4fa:	bf00      	nop
 800b4fc:	e002      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b4fe:	bf00      	nop
 800b500:	e000      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b502:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b504:	7dfb      	ldrb	r3, [r7, #23]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d10a      	bne.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b50a:	4b8e      	ldr	r3, [pc, #568]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b50e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b518:	498a      	ldr	r1, [pc, #552]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b51a:	4313      	orrs	r3, r2
 800b51c:	654b      	str	r3, [r1, #84]	; 0x54
 800b51e:	e001      	b.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b520:	7dfb      	ldrb	r3, [r7, #23]
 800b522:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d04b      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b536:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b53a:	d02e      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800b53c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b540:	d828      	bhi.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b546:	d02a      	beq.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b54c:	d822      	bhi.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b54e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b552:	d026      	beq.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b554:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b558:	d81c      	bhi.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b55a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b55e:	d010      	beq.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800b560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b564:	d816      	bhi.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b566:	2b00      	cmp	r3, #0
 800b568:	d01d      	beq.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b56a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b56e:	d111      	bne.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	3304      	adds	r3, #4
 800b574:	2100      	movs	r1, #0
 800b576:	4618      	mov	r0, r3
 800b578:	f000 fcd2 	bl	800bf20 <RCCEx_PLL2_Config>
 800b57c:	4603      	mov	r3, r0
 800b57e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b580:	e012      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	3324      	adds	r3, #36	; 0x24
 800b586:	2102      	movs	r1, #2
 800b588:	4618      	mov	r0, r3
 800b58a:	f000 fd7b 	bl	800c084 <RCCEx_PLL3_Config>
 800b58e:	4603      	mov	r3, r0
 800b590:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b592:	e009      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	75fb      	strb	r3, [r7, #23]
      break;
 800b598:	e006      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b59a:	bf00      	nop
 800b59c:	e004      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b59e:	bf00      	nop
 800b5a0:	e002      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b5a2:	bf00      	nop
 800b5a4:	e000      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b5a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5a8:	7dfb      	ldrb	r3, [r7, #23]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d10a      	bne.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b5ae:	4b65      	ldr	r3, [pc, #404]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b5b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5b2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5bc:	4961      	ldr	r1, [pc, #388]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	658b      	str	r3, [r1, #88]	; 0x58
 800b5c2:	e001      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5c4:	7dfb      	ldrb	r3, [r7, #23]
 800b5c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d04b      	beq.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b5de:	d02e      	beq.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800b5e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b5e4:	d828      	bhi.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b5e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5ea:	d02a      	beq.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800b5ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5f0:	d822      	bhi.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b5f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b5f6:	d026      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b5f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b5fc:	d81c      	bhi.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b5fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b602:	d010      	beq.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800b604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b608:	d816      	bhi.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d01d      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b60e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b612:	d111      	bne.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	3304      	adds	r3, #4
 800b618:	2100      	movs	r1, #0
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 fc80 	bl	800bf20 <RCCEx_PLL2_Config>
 800b620:	4603      	mov	r3, r0
 800b622:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b624:	e012      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	3324      	adds	r3, #36	; 0x24
 800b62a:	2102      	movs	r1, #2
 800b62c:	4618      	mov	r0, r3
 800b62e:	f000 fd29 	bl	800c084 <RCCEx_PLL3_Config>
 800b632:	4603      	mov	r3, r0
 800b634:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b636:	e009      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	75fb      	strb	r3, [r7, #23]
      break;
 800b63c:	e006      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b63e:	bf00      	nop
 800b640:	e004      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b642:	bf00      	nop
 800b644:	e002      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b646:	bf00      	nop
 800b648:	e000      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b64a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b64c:	7dfb      	ldrb	r3, [r7, #23]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10a      	bne.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b652:	4b3c      	ldr	r3, [pc, #240]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b660:	4938      	ldr	r1, [pc, #224]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b662:	4313      	orrs	r3, r2
 800b664:	658b      	str	r3, [r1, #88]	; 0x58
 800b666:	e001      	b.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b668:	7dfb      	ldrb	r3, [r7, #23]
 800b66a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f003 0308 	and.w	r3, r3, #8
 800b674:	2b00      	cmp	r3, #0
 800b676:	d01a      	beq.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b67e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b682:	d10a      	bne.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	3324      	adds	r3, #36	; 0x24
 800b688:	2102      	movs	r1, #2
 800b68a:	4618      	mov	r0, r3
 800b68c:	f000 fcfa 	bl	800c084 <RCCEx_PLL3_Config>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d001      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800b696:	2301      	movs	r3, #1
 800b698:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b69a:	4b2a      	ldr	r3, [pc, #168]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b69e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6a8:	4926      	ldr	r1, [pc, #152]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 0310 	and.w	r3, r3, #16
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d01a      	beq.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6c4:	d10a      	bne.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	3324      	adds	r3, #36	; 0x24
 800b6ca:	2102      	movs	r1, #2
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f000 fcd9 	bl	800c084 <RCCEx_PLL3_Config>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d001      	beq.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b6dc:	4b19      	ldr	r3, [pc, #100]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b6de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6ea:	4916      	ldr	r1, [pc, #88]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d036      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b702:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b706:	d01f      	beq.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b70c:	d817      	bhi.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d003      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800b712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b716:	d009      	beq.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800b718:	e011      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	3304      	adds	r3, #4
 800b71e:	2100      	movs	r1, #0
 800b720:	4618      	mov	r0, r3
 800b722:	f000 fbfd 	bl	800bf20 <RCCEx_PLL2_Config>
 800b726:	4603      	mov	r3, r0
 800b728:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b72a:	e00e      	b.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	3324      	adds	r3, #36	; 0x24
 800b730:	2102      	movs	r1, #2
 800b732:	4618      	mov	r0, r3
 800b734:	f000 fca6 	bl	800c084 <RCCEx_PLL3_Config>
 800b738:	4603      	mov	r3, r0
 800b73a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b73c:	e005      	b.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	75fb      	strb	r3, [r7, #23]
      break;
 800b742:	e002      	b.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800b744:	58024400 	.word	0x58024400
      break;
 800b748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b74a:	7dfb      	ldrb	r3, [r7, #23]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d10a      	bne.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b750:	4b93      	ldr	r3, [pc, #588]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b754:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b75e:	4990      	ldr	r1, [pc, #576]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b760:	4313      	orrs	r3, r2
 800b762:	658b      	str	r3, [r1, #88]	; 0x58
 800b764:	e001      	b.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b766:	7dfb      	ldrb	r3, [r7, #23]
 800b768:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b772:	2b00      	cmp	r3, #0
 800b774:	d033      	beq.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b77c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b780:	d01c      	beq.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800b782:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b786:	d816      	bhi.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800b788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b78c:	d003      	beq.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800b78e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b792:	d007      	beq.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800b794:	e00f      	b.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b796:	4b82      	ldr	r3, [pc, #520]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79a:	4a81      	ldr	r2, [pc, #516]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b79c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b7a2:	e00c      	b.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	3324      	adds	r3, #36	; 0x24
 800b7a8:	2101      	movs	r1, #1
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 fc6a 	bl	800c084 <RCCEx_PLL3_Config>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b7b4:	e003      	b.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	75fb      	strb	r3, [r7, #23]
      break;
 800b7ba:	e000      	b.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800b7bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7be:	7dfb      	ldrb	r3, [r7, #23]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10a      	bne.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b7c4:	4b76      	ldr	r3, [pc, #472]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7d2:	4973      	ldr	r1, [pc, #460]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	654b      	str	r3, [r1, #84]	; 0x54
 800b7d8:	e001      	b.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7da:	7dfb      	ldrb	r3, [r7, #23]
 800b7dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d029      	beq.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d003      	beq.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800b7f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7f6:	d007      	beq.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800b7f8:	e00f      	b.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7fa:	4b69      	ldr	r3, [pc, #420]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fe:	4a68      	ldr	r2, [pc, #416]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b804:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b806:	e00b      	b.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	3304      	adds	r3, #4
 800b80c:	2102      	movs	r1, #2
 800b80e:	4618      	mov	r0, r3
 800b810:	f000 fb86 	bl	800bf20 <RCCEx_PLL2_Config>
 800b814:	4603      	mov	r3, r0
 800b816:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b818:	e002      	b.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	75fb      	strb	r3, [r7, #23]
      break;
 800b81e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b820:	7dfb      	ldrb	r3, [r7, #23]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d109      	bne.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b826:	4b5e      	ldr	r3, [pc, #376]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b82a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b832:	495b      	ldr	r1, [pc, #364]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b834:	4313      	orrs	r3, r2
 800b836:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b838:	e001      	b.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b83a:	7dfb      	ldrb	r3, [r7, #23]
 800b83c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00a      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	3324      	adds	r3, #36	; 0x24
 800b84e:	2102      	movs	r1, #2
 800b850:	4618      	mov	r0, r3
 800b852:	f000 fc17 	bl	800c084 <RCCEx_PLL3_Config>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d001      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800b85c:	2301      	movs	r3, #1
 800b85e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d030      	beq.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b870:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b874:	d017      	beq.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800b876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b87a:	d811      	bhi.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b87c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b880:	d013      	beq.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b886:	d80b      	bhi.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d010      	beq.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b88c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b890:	d106      	bne.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b892:	4b43      	ldr	r3, [pc, #268]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b896:	4a42      	ldr	r2, [pc, #264]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b89c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b89e:	e007      	b.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	75fb      	strb	r3, [r7, #23]
      break;
 800b8a4:	e004      	b.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b8a6:	bf00      	nop
 800b8a8:	e002      	b.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b8aa:	bf00      	nop
 800b8ac:	e000      	b.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b8ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8b0:	7dfb      	ldrb	r3, [r7, #23]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d109      	bne.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b8b6:	4b3a      	ldr	r3, [pc, #232]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b8b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8c2:	4937      	ldr	r1, [pc, #220]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	654b      	str	r3, [r1, #84]	; 0x54
 800b8c8:	e001      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
 800b8cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d008      	beq.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b8da:	4b31      	ldr	r3, [pc, #196]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b8dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8e6:	492e      	ldr	r1, [pc, #184]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d009      	beq.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b8f8:	4b29      	ldr	r3, [pc, #164]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b8fa:	691b      	ldr	r3, [r3, #16]
 800b8fc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b906:	4926      	ldr	r1, [pc, #152]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b908:	4313      	orrs	r3, r2
 800b90a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b914:	2b00      	cmp	r3, #0
 800b916:	d008      	beq.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b918:	4b21      	ldr	r3, [pc, #132]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b91a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b91c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b924:	491e      	ldr	r1, [pc, #120]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b926:	4313      	orrs	r3, r2
 800b928:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00d      	beq.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b936:	4b1a      	ldr	r3, [pc, #104]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b938:	691b      	ldr	r3, [r3, #16]
 800b93a:	4a19      	ldr	r2, [pc, #100]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b93c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b940:	6113      	str	r3, [r2, #16]
 800b942:	4b17      	ldr	r3, [pc, #92]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b944:	691a      	ldr	r2, [r3, #16]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b94c:	4914      	ldr	r1, [pc, #80]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b94e:	4313      	orrs	r3, r2
 800b950:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	da08      	bge.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b95a:	4b11      	ldr	r3, [pc, #68]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b95c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b95e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b966:	490e      	ldr	r1, [pc, #56]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b968:	4313      	orrs	r3, r2
 800b96a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b974:	2b00      	cmp	r3, #0
 800b976:	d009      	beq.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b978:	4b09      	ldr	r3, [pc, #36]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b97a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b97c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b986:	4906      	ldr	r1, [pc, #24]	; (800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b988:	4313      	orrs	r3, r2
 800b98a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b98c:	7dbb      	ldrb	r3, [r7, #22]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d101      	bne.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800b992:	2300      	movs	r3, #0
 800b994:	e000      	b.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800b996:	2301      	movs	r3, #1
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3718      	adds	r7, #24
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	58024400 	.word	0x58024400

0800b9a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b9a8:	f7ff f860 	bl	800aa6c <HAL_RCC_GetHCLKFreq>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	4b06      	ldr	r3, [pc, #24]	; (800b9c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b9b0:	6a1b      	ldr	r3, [r3, #32]
 800b9b2:	091b      	lsrs	r3, r3, #4
 800b9b4:	f003 0307 	and.w	r3, r3, #7
 800b9b8:	4904      	ldr	r1, [pc, #16]	; (800b9cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b9ba:	5ccb      	ldrb	r3, [r1, r3]
 800b9bc:	f003 031f 	and.w	r3, r3, #31
 800b9c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	58024400 	.word	0x58024400
 800b9cc:	08012e98 	.word	0x08012e98

0800b9d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b089      	sub	sp, #36	; 0x24
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9d8:	4ba1      	ldr	r3, [pc, #644]	; (800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9dc:	f003 0303 	and.w	r3, r3, #3
 800b9e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b9e2:	4b9f      	ldr	r3, [pc, #636]	; (800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e6:	0b1b      	lsrs	r3, r3, #12
 800b9e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b9ee:	4b9c      	ldr	r3, [pc, #624]	; (800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f2:	091b      	lsrs	r3, r3, #4
 800b9f4:	f003 0301 	and.w	r3, r3, #1
 800b9f8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b9fa:	4b99      	ldr	r3, [pc, #612]	; (800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9fe:	08db      	lsrs	r3, r3, #3
 800ba00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba04:	693a      	ldr	r2, [r7, #16]
 800ba06:	fb02 f303 	mul.w	r3, r2, r3
 800ba0a:	ee07 3a90 	vmov	s15, r3
 800ba0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f000 8111 	beq.w	800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	2b02      	cmp	r3, #2
 800ba22:	f000 8083 	beq.w	800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	f200 80a1 	bhi.w	800bb70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d003      	beq.n	800ba3c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d056      	beq.n	800bae8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ba3a:	e099      	b.n	800bb70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba3c:	4b88      	ldr	r3, [pc, #544]	; (800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f003 0320 	and.w	r3, r3, #32
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d02d      	beq.n	800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba48:	4b85      	ldr	r3, [pc, #532]	; (800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	08db      	lsrs	r3, r3, #3
 800ba4e:	f003 0303 	and.w	r3, r3, #3
 800ba52:	4a84      	ldr	r2, [pc, #528]	; (800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ba54:	fa22 f303 	lsr.w	r3, r2, r3
 800ba58:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	ee07 3a90 	vmov	s15, r3
 800ba60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	ee07 3a90 	vmov	s15, r3
 800ba6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba72:	4b7b      	ldr	r3, [pc, #492]	; (800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba7a:	ee07 3a90 	vmov	s15, r3
 800ba7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba86:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bc68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800baa2:	e087      	b.n	800bbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	ee07 3a90 	vmov	s15, r3
 800baaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bab6:	4b6a      	ldr	r3, [pc, #424]	; (800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800babe:	ee07 3a90 	vmov	s15, r3
 800bac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bac6:	ed97 6a03 	vldr	s12, [r7, #12]
 800baca:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bc68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bade:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bae6:	e065      	b.n	800bbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	ee07 3a90 	vmov	s15, r3
 800baee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bc70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800baf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bafa:	4b59      	ldr	r3, [pc, #356]	; (800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb02:	ee07 3a90 	vmov	s15, r3
 800bb06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bc68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb2a:	e043      	b.n	800bbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	ee07 3a90 	vmov	s15, r3
 800bb32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bb3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb3e:	4b48      	ldr	r3, [pc, #288]	; (800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb46:	ee07 3a90 	vmov	s15, r3
 800bb4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb52:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bc68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb6e:	e021      	b.n	800bbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	ee07 3a90 	vmov	s15, r3
 800bb76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bc70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb82:	4b37      	ldr	r3, [pc, #220]	; (800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb8a:	ee07 3a90 	vmov	s15, r3
 800bb8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb92:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb96:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bc68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bbb2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bbb4:	4b2a      	ldr	r3, [pc, #168]	; (800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb8:	0a5b      	lsrs	r3, r3, #9
 800bbba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbbe:	ee07 3a90 	vmov	s15, r3
 800bbc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbce:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbda:	ee17 2a90 	vmov	r2, s15
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bbe2:	4b1f      	ldr	r3, [pc, #124]	; (800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe6:	0c1b      	lsrs	r3, r3, #16
 800bbe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbec:	ee07 3a90 	vmov	s15, r3
 800bbf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbfc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc08:	ee17 2a90 	vmov	r2, s15
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bc10:	4b13      	ldr	r3, [pc, #76]	; (800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc14:	0e1b      	lsrs	r3, r3, #24
 800bc16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc1a:	ee07 3a90 	vmov	s15, r3
 800bc1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc36:	ee17 2a90 	vmov	r2, s15
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bc3e:	e008      	b.n	800bc52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	609a      	str	r2, [r3, #8]
}
 800bc52:	bf00      	nop
 800bc54:	3724      	adds	r7, #36	; 0x24
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	58024400 	.word	0x58024400
 800bc64:	03d09000 	.word	0x03d09000
 800bc68:	46000000 	.word	0x46000000
 800bc6c:	4c742400 	.word	0x4c742400
 800bc70:	4a742400 	.word	0x4a742400
 800bc74:	4bbebc20 	.word	0x4bbebc20

0800bc78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b089      	sub	sp, #36	; 0x24
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc80:	4ba1      	ldr	r3, [pc, #644]	; (800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc84:	f003 0303 	and.w	r3, r3, #3
 800bc88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bc8a:	4b9f      	ldr	r3, [pc, #636]	; (800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc8e:	0d1b      	lsrs	r3, r3, #20
 800bc90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bc96:	4b9c      	ldr	r3, [pc, #624]	; (800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc9a:	0a1b      	lsrs	r3, r3, #8
 800bc9c:	f003 0301 	and.w	r3, r3, #1
 800bca0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bca2:	4b99      	ldr	r3, [pc, #612]	; (800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bca6:	08db      	lsrs	r3, r3, #3
 800bca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcac:	693a      	ldr	r2, [r7, #16]
 800bcae:	fb02 f303 	mul.w	r3, r2, r3
 800bcb2:	ee07 3a90 	vmov	s15, r3
 800bcb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	f000 8111 	beq.w	800bee8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	f000 8083 	beq.w	800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	2b02      	cmp	r3, #2
 800bcd2:	f200 80a1 	bhi.w	800be18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d003      	beq.n	800bce4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d056      	beq.n	800bd90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bce2:	e099      	b.n	800be18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bce4:	4b88      	ldr	r3, [pc, #544]	; (800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f003 0320 	and.w	r3, r3, #32
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d02d      	beq.n	800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bcf0:	4b85      	ldr	r3, [pc, #532]	; (800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	08db      	lsrs	r3, r3, #3
 800bcf6:	f003 0303 	and.w	r3, r3, #3
 800bcfa:	4a84      	ldr	r2, [pc, #528]	; (800bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bcfc:	fa22 f303 	lsr.w	r3, r2, r3
 800bd00:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	ee07 3a90 	vmov	s15, r3
 800bd08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	ee07 3a90 	vmov	s15, r3
 800bd12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd1a:	4b7b      	ldr	r3, [pc, #492]	; (800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd22:	ee07 3a90 	vmov	s15, r3
 800bd26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bf10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd46:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bd4a:	e087      	b.n	800be5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	ee07 3a90 	vmov	s15, r3
 800bd52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bf14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bd5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd5e:	4b6a      	ldr	r3, [pc, #424]	; (800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd66:	ee07 3a90 	vmov	s15, r3
 800bd6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd72:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bf10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd8e:	e065      	b.n	800be5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	ee07 3a90 	vmov	s15, r3
 800bd96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bf18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bd9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda2:	4b59      	ldr	r3, [pc, #356]	; (800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdaa:	ee07 3a90 	vmov	s15, r3
 800bdae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bf10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdd2:	e043      	b.n	800be5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	ee07 3a90 	vmov	s15, r3
 800bdda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdde:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bde2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bde6:	4b48      	ldr	r3, [pc, #288]	; (800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bde8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdee:	ee07 3a90 	vmov	s15, r3
 800bdf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdfa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bf10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be16:	e021      	b.n	800be5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	ee07 3a90 	vmov	s15, r3
 800be1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bf18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be2a:	4b37      	ldr	r3, [pc, #220]	; (800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be32:	ee07 3a90 	vmov	s15, r3
 800be36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bf10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800be5c:	4b2a      	ldr	r3, [pc, #168]	; (800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be60:	0a5b      	lsrs	r3, r3, #9
 800be62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be66:	ee07 3a90 	vmov	s15, r3
 800be6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be76:	edd7 6a07 	vldr	s13, [r7, #28]
 800be7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be82:	ee17 2a90 	vmov	r2, s15
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800be8a:	4b1f      	ldr	r3, [pc, #124]	; (800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8e:	0c1b      	lsrs	r3, r3, #16
 800be90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be94:	ee07 3a90 	vmov	s15, r3
 800be98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bea0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bea4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beb0:	ee17 2a90 	vmov	r2, s15
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800beb8:	4b13      	ldr	r3, [pc, #76]	; (800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bebc:	0e1b      	lsrs	r3, r3, #24
 800bebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bec2:	ee07 3a90 	vmov	s15, r3
 800bec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bece:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bed2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bede:	ee17 2a90 	vmov	r2, s15
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bee6:	e008      	b.n	800befa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	609a      	str	r2, [r3, #8]
}
 800befa:	bf00      	nop
 800befc:	3724      	adds	r7, #36	; 0x24
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	58024400 	.word	0x58024400
 800bf0c:	03d09000 	.word	0x03d09000
 800bf10:	46000000 	.word	0x46000000
 800bf14:	4c742400 	.word	0x4c742400
 800bf18:	4a742400 	.word	0x4a742400
 800bf1c:	4bbebc20 	.word	0x4bbebc20

0800bf20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf2e:	4b53      	ldr	r3, [pc, #332]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800bf30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf32:	f003 0303 	and.w	r3, r3, #3
 800bf36:	2b03      	cmp	r3, #3
 800bf38:	d101      	bne.n	800bf3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e099      	b.n	800c072 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bf3e:	4b4f      	ldr	r3, [pc, #316]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4a4e      	ldr	r2, [pc, #312]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800bf44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf4a:	f7f8 fa3d 	bl	80043c8 <HAL_GetTick>
 800bf4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bf50:	e008      	b.n	800bf64 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bf52:	f7f8 fa39 	bl	80043c8 <HAL_GetTick>
 800bf56:	4602      	mov	r2, r0
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	1ad3      	subs	r3, r2, r3
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d901      	bls.n	800bf64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bf60:	2303      	movs	r3, #3
 800bf62:	e086      	b.n	800c072 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bf64:	4b45      	ldr	r3, [pc, #276]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1f0      	bne.n	800bf52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bf70:	4b42      	ldr	r3, [pc, #264]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800bf72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	031b      	lsls	r3, r3, #12
 800bf7e:	493f      	ldr	r1, [pc, #252]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800bf80:	4313      	orrs	r3, r2
 800bf82:	628b      	str	r3, [r1, #40]	; 0x28
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	3b01      	subs	r3, #1
 800bf8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	3b01      	subs	r3, #1
 800bf94:	025b      	lsls	r3, r3, #9
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	431a      	orrs	r2, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	041b      	lsls	r3, r3, #16
 800bfa2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bfa6:	431a      	orrs	r2, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	3b01      	subs	r3, #1
 800bfae:	061b      	lsls	r3, r3, #24
 800bfb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bfb4:	4931      	ldr	r1, [pc, #196]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bfba:	4b30      	ldr	r3, [pc, #192]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800bfbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	695b      	ldr	r3, [r3, #20]
 800bfc6:	492d      	ldr	r1, [pc, #180]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bfcc:	4b2b      	ldr	r3, [pc, #172]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800bfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd0:	f023 0220 	bic.w	r2, r3, #32
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	699b      	ldr	r3, [r3, #24]
 800bfd8:	4928      	ldr	r1, [pc, #160]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bfde:	4b27      	ldr	r3, [pc, #156]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800bfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe2:	4a26      	ldr	r2, [pc, #152]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800bfe4:	f023 0310 	bic.w	r3, r3, #16
 800bfe8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bfea:	4b24      	ldr	r3, [pc, #144]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800bfec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfee:	4b24      	ldr	r3, [pc, #144]	; (800c080 <RCCEx_PLL2_Config+0x160>)
 800bff0:	4013      	ands	r3, r2
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	69d2      	ldr	r2, [r2, #28]
 800bff6:	00d2      	lsls	r2, r2, #3
 800bff8:	4920      	ldr	r1, [pc, #128]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800bffa:	4313      	orrs	r3, r2
 800bffc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bffe:	4b1f      	ldr	r3, [pc, #124]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800c000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c002:	4a1e      	ldr	r2, [pc, #120]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800c004:	f043 0310 	orr.w	r3, r3, #16
 800c008:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d106      	bne.n	800c01e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c010:	4b1a      	ldr	r3, [pc, #104]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800c012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c014:	4a19      	ldr	r2, [pc, #100]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800c016:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c01a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c01c:	e00f      	b.n	800c03e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	2b01      	cmp	r3, #1
 800c022:	d106      	bne.n	800c032 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c024:	4b15      	ldr	r3, [pc, #84]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800c026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c028:	4a14      	ldr	r2, [pc, #80]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800c02a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c02e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c030:	e005      	b.n	800c03e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c032:	4b12      	ldr	r3, [pc, #72]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800c034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c036:	4a11      	ldr	r2, [pc, #68]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800c038:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c03c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c03e:	4b0f      	ldr	r3, [pc, #60]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4a0e      	ldr	r2, [pc, #56]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800c044:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c04a:	f7f8 f9bd 	bl	80043c8 <HAL_GetTick>
 800c04e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c050:	e008      	b.n	800c064 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c052:	f7f8 f9b9 	bl	80043c8 <HAL_GetTick>
 800c056:	4602      	mov	r2, r0
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	1ad3      	subs	r3, r2, r3
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	d901      	bls.n	800c064 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c060:	2303      	movs	r3, #3
 800c062:	e006      	b.n	800c072 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c064:	4b05      	ldr	r3, [pc, #20]	; (800c07c <RCCEx_PLL2_Config+0x15c>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d0f0      	beq.n	800c052 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c070:	7bfb      	ldrb	r3, [r7, #15]
}
 800c072:	4618      	mov	r0, r3
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	58024400 	.word	0x58024400
 800c080:	ffff0007 	.word	0xffff0007

0800c084 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c08e:	2300      	movs	r3, #0
 800c090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c092:	4b53      	ldr	r3, [pc, #332]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c096:	f003 0303 	and.w	r3, r3, #3
 800c09a:	2b03      	cmp	r3, #3
 800c09c:	d101      	bne.n	800c0a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e099      	b.n	800c1d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c0a2:	4b4f      	ldr	r3, [pc, #316]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a4e      	ldr	r2, [pc, #312]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c0a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0ae:	f7f8 f98b 	bl	80043c8 <HAL_GetTick>
 800c0b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c0b4:	e008      	b.n	800c0c8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c0b6:	f7f8 f987 	bl	80043c8 <HAL_GetTick>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	2b02      	cmp	r3, #2
 800c0c2:	d901      	bls.n	800c0c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c0c4:	2303      	movs	r3, #3
 800c0c6:	e086      	b.n	800c1d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c0c8:	4b45      	ldr	r3, [pc, #276]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d1f0      	bne.n	800c0b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c0d4:	4b42      	ldr	r3, [pc, #264]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	051b      	lsls	r3, r3, #20
 800c0e2:	493f      	ldr	r1, [pc, #252]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	628b      	str	r3, [r1, #40]	; 0x28
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	025b      	lsls	r3, r3, #9
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	431a      	orrs	r2, r3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	68db      	ldr	r3, [r3, #12]
 800c102:	3b01      	subs	r3, #1
 800c104:	041b      	lsls	r3, r3, #16
 800c106:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c10a:	431a      	orrs	r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	3b01      	subs	r3, #1
 800c112:	061b      	lsls	r3, r3, #24
 800c114:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c118:	4931      	ldr	r1, [pc, #196]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c11a:	4313      	orrs	r3, r2
 800c11c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c11e:	4b30      	ldr	r3, [pc, #192]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c122:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	695b      	ldr	r3, [r3, #20]
 800c12a:	492d      	ldr	r1, [pc, #180]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c12c:	4313      	orrs	r3, r2
 800c12e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c130:	4b2b      	ldr	r3, [pc, #172]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c134:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	699b      	ldr	r3, [r3, #24]
 800c13c:	4928      	ldr	r1, [pc, #160]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c13e:	4313      	orrs	r3, r2
 800c140:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c142:	4b27      	ldr	r3, [pc, #156]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c146:	4a26      	ldr	r2, [pc, #152]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c14c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c14e:	4b24      	ldr	r3, [pc, #144]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c152:	4b24      	ldr	r3, [pc, #144]	; (800c1e4 <RCCEx_PLL3_Config+0x160>)
 800c154:	4013      	ands	r3, r2
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	69d2      	ldr	r2, [r2, #28]
 800c15a:	00d2      	lsls	r2, r2, #3
 800c15c:	4920      	ldr	r1, [pc, #128]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c15e:	4313      	orrs	r3, r2
 800c160:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c162:	4b1f      	ldr	r3, [pc, #124]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c166:	4a1e      	ldr	r2, [pc, #120]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c16c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d106      	bne.n	800c182 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c174:	4b1a      	ldr	r3, [pc, #104]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c178:	4a19      	ldr	r2, [pc, #100]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c17a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c17e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c180:	e00f      	b.n	800c1a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	2b01      	cmp	r3, #1
 800c186:	d106      	bne.n	800c196 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c188:	4b15      	ldr	r3, [pc, #84]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18c:	4a14      	ldr	r2, [pc, #80]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c18e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c192:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c194:	e005      	b.n	800c1a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c196:	4b12      	ldr	r3, [pc, #72]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19a:	4a11      	ldr	r2, [pc, #68]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c19c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c1a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c1a2:	4b0f      	ldr	r3, [pc, #60]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a0e      	ldr	r2, [pc, #56]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c1a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1ae:	f7f8 f90b 	bl	80043c8 <HAL_GetTick>
 800c1b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c1b4:	e008      	b.n	800c1c8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c1b6:	f7f8 f907 	bl	80043c8 <HAL_GetTick>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	2b02      	cmp	r3, #2
 800c1c2:	d901      	bls.n	800c1c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	e006      	b.n	800c1d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c1c8:	4b05      	ldr	r3, [pc, #20]	; (800c1e0 <RCCEx_PLL3_Config+0x15c>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d0f0      	beq.n	800c1b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	58024400 	.word	0x58024400
 800c1e4:	ffff0007 	.word	0xffff0007

0800c1e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d101      	bne.n	800c1fe <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e0eb      	b.n	800c3d6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a75      	ldr	r2, [pc, #468]	; (800c3e0 <HAL_SPI_Init+0x1f8>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d00f      	beq.n	800c22e <HAL_SPI_Init+0x46>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a74      	ldr	r2, [pc, #464]	; (800c3e4 <HAL_SPI_Init+0x1fc>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d00a      	beq.n	800c22e <HAL_SPI_Init+0x46>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a72      	ldr	r2, [pc, #456]	; (800c3e8 <HAL_SPI_Init+0x200>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d005      	beq.n	800c22e <HAL_SPI_Init+0x46>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	2b0f      	cmp	r3, #15
 800c228:	d901      	bls.n	800c22e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800c22a:	2301      	movs	r3, #1
 800c22c:	e0d3      	b.n	800c3d6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f001 f87a 	bl	800d328 <SPI_GetPacketSize>
 800c234:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a69      	ldr	r2, [pc, #420]	; (800c3e0 <HAL_SPI_Init+0x1f8>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d00c      	beq.n	800c25a <HAL_SPI_Init+0x72>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a67      	ldr	r2, [pc, #412]	; (800c3e4 <HAL_SPI_Init+0x1fc>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d007      	beq.n	800c25a <HAL_SPI_Init+0x72>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a66      	ldr	r2, [pc, #408]	; (800c3e8 <HAL_SPI_Init+0x200>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d002      	beq.n	800c25a <HAL_SPI_Init+0x72>
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	2b08      	cmp	r3, #8
 800c258:	d811      	bhi.n	800c27e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c25e:	4a60      	ldr	r2, [pc, #384]	; (800c3e0 <HAL_SPI_Init+0x1f8>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d009      	beq.n	800c278 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a5e      	ldr	r2, [pc, #376]	; (800c3e4 <HAL_SPI_Init+0x1fc>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d004      	beq.n	800c278 <HAL_SPI_Init+0x90>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4a5d      	ldr	r2, [pc, #372]	; (800c3e8 <HAL_SPI_Init+0x200>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d104      	bne.n	800c282 <HAL_SPI_Init+0x9a>
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2b10      	cmp	r3, #16
 800c27c:	d901      	bls.n	800c282 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800c27e:	2301      	movs	r3, #1
 800c280:	e0a9      	b.n	800c3d6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d106      	bne.n	800c29c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f7f7 f8c2 	bl	8003420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2202      	movs	r2, #2
 800c2a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f022 0201 	bic.w	r2, r2, #1
 800c2b2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	699b      	ldr	r3, [r3, #24]
 800c2b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c2bc:	d119      	bne.n	800c2f2 <HAL_SPI_Init+0x10a>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2c6:	d103      	bne.n	800c2d0 <HAL_SPI_Init+0xe8>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d008      	beq.n	800c2e2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10c      	bne.n	800c2f2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2e0:	d107      	bne.n	800c2f2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c2f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	69da      	ldr	r2, [r3, #28]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2fa:	431a      	orrs	r2, r3
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	431a      	orrs	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c304:	ea42 0103 	orr.w	r1, r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	68da      	ldr	r2, [r3, #12]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	430a      	orrs	r2, r1
 800c312:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31c:	431a      	orrs	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c322:	431a      	orrs	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	699b      	ldr	r3, [r3, #24]
 800c328:	431a      	orrs	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	691b      	ldr	r3, [r3, #16]
 800c32e:	431a      	orrs	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	695b      	ldr	r3, [r3, #20]
 800c334:	431a      	orrs	r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6a1b      	ldr	r3, [r3, #32]
 800c33a:	431a      	orrs	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	431a      	orrs	r2, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c346:	431a      	orrs	r2, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	431a      	orrs	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c352:	ea42 0103 	orr.w	r1, r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	430a      	orrs	r2, r1
 800c360:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d113      	bne.n	800c392 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c37c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c390:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f022 0201 	bic.w	r2, r2, #1
 800c3a0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00a      	beq.n	800c3c4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	430a      	orrs	r2, r1
 800c3c2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	40013000 	.word	0x40013000
 800c3e4:	40003800 	.word	0x40003800
 800c3e8:	40003c00 	.word	0x40003c00

0800c3ec <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b08a      	sub	sp, #40	; 0x28
 800c3f0:	af02      	add	r7, sp, #8
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	603b      	str	r3, [r7, #0]
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	3320      	adds	r3, #32
 800c402:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c404:	2300      	movs	r3, #0
 800c406:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d101      	bne.n	800c416 <HAL_SPI_Transmit+0x2a>
 800c412:	2302      	movs	r3, #2
 800c414:	e1d7      	b.n	800c7c6 <HAL_SPI_Transmit+0x3da>
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2201      	movs	r2, #1
 800c41a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c41e:	f7f7 ffd3 	bl	80043c8 <HAL_GetTick>
 800c422:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d007      	beq.n	800c440 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800c430:	2302      	movs	r3, #2
 800c432:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2200      	movs	r2, #0
 800c438:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c43c:	7efb      	ldrb	r3, [r7, #27]
 800c43e:	e1c2      	b.n	800c7c6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d002      	beq.n	800c44c <HAL_SPI_Transmit+0x60>
 800c446:	88fb      	ldrh	r3, [r7, #6]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d107      	bne.n	800c45c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2200      	movs	r2, #0
 800c454:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c458:	7efb      	ldrb	r3, [r7, #27]
 800c45a:	e1b4      	b.n	800c7c6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2203      	movs	r2, #3
 800c460:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2200      	movs	r2, #0
 800c468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	68ba      	ldr	r2, [r7, #8]
 800c470:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	88fa      	ldrh	r2, [r7, #6]
 800c476:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	88fa      	ldrh	r2, [r7, #6]
 800c47e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2200      	movs	r2, #0
 800c486:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2200      	movs	r2, #0
 800c48c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2200      	movs	r2, #0
 800c494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2200      	movs	r2, #0
 800c49c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	689b      	ldr	r3, [r3, #8]
 800c4a8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c4ac:	d107      	bne.n	800c4be <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	685a      	ldr	r2, [r3, #4]
 800c4c4:	4b96      	ldr	r3, [pc, #600]	; (800c720 <HAL_SPI_Transmit+0x334>)
 800c4c6:	4013      	ands	r3, r2
 800c4c8:	88f9      	ldrh	r1, [r7, #6]
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	6812      	ldr	r2, [r2, #0]
 800c4ce:	430b      	orrs	r3, r1
 800c4d0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f042 0201 	orr.w	r2, r2, #1
 800c4e0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4ea:	d107      	bne.n	800c4fc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	2b0f      	cmp	r3, #15
 800c502:	d947      	bls.n	800c594 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c504:	e03f      	b.n	800c586 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	695b      	ldr	r3, [r3, #20]
 800c50c:	f003 0302 	and.w	r3, r3, #2
 800c510:	2b02      	cmp	r3, #2
 800c512:	d114      	bne.n	800c53e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	6812      	ldr	r2, [r2, #0]
 800c51e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c524:	1d1a      	adds	r2, r3, #4
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c530:	b29b      	uxth	r3, r3
 800c532:	3b01      	subs	r3, #1
 800c534:	b29a      	uxth	r2, r3
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c53c:	e023      	b.n	800c586 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c53e:	f7f7 ff43 	bl	80043c8 <HAL_GetTick>
 800c542:	4602      	mov	r2, r0
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	1ad3      	subs	r3, r2, r3
 800c548:	683a      	ldr	r2, [r7, #0]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d803      	bhi.n	800c556 <HAL_SPI_Transmit+0x16a>
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c554:	d102      	bne.n	800c55c <HAL_SPI_Transmit+0x170>
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d114      	bne.n	800c586 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c55c:	68f8      	ldr	r0, [r7, #12]
 800c55e:	f000 fe15 	bl	800d18c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2200      	movs	r2, #0
 800c566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c570:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2201      	movs	r2, #1
 800c57e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	e11f      	b.n	800c7c6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1b9      	bne.n	800c506 <HAL_SPI_Transmit+0x11a>
 800c592:	e0f2      	b.n	800c77a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	2b07      	cmp	r3, #7
 800c59a:	f240 80e7 	bls.w	800c76c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c59e:	e05d      	b.n	800c65c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	695b      	ldr	r3, [r3, #20]
 800c5a6:	f003 0302 	and.w	r3, r3, #2
 800c5aa:	2b02      	cmp	r3, #2
 800c5ac:	d132      	bne.n	800c614 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5b4:	b29b      	uxth	r3, r3
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d918      	bls.n	800c5ec <HAL_SPI_Transmit+0x200>
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d014      	beq.n	800c5ec <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	6812      	ldr	r2, [r2, #0]
 800c5cc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5d2:	1d1a      	adds	r2, r3, #4
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	3b02      	subs	r3, #2
 800c5e2:	b29a      	uxth	r2, r3
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c5ea:	e037      	b.n	800c65c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5f0:	881a      	ldrh	r2, [r3, #0]
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5fa:	1c9a      	adds	r2, r3, #2
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c606:	b29b      	uxth	r3, r3
 800c608:	3b01      	subs	r3, #1
 800c60a:	b29a      	uxth	r2, r3
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c612:	e023      	b.n	800c65c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c614:	f7f7 fed8 	bl	80043c8 <HAL_GetTick>
 800c618:	4602      	mov	r2, r0
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	1ad3      	subs	r3, r2, r3
 800c61e:	683a      	ldr	r2, [r7, #0]
 800c620:	429a      	cmp	r2, r3
 800c622:	d803      	bhi.n	800c62c <HAL_SPI_Transmit+0x240>
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c62a:	d102      	bne.n	800c632 <HAL_SPI_Transmit+0x246>
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d114      	bne.n	800c65c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f000 fdaa 	bl	800d18c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2200      	movs	r2, #0
 800c63c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c646:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	e0b4      	b.n	800c7c6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c662:	b29b      	uxth	r3, r3
 800c664:	2b00      	cmp	r3, #0
 800c666:	d19b      	bne.n	800c5a0 <HAL_SPI_Transmit+0x1b4>
 800c668:	e087      	b.n	800c77a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	695b      	ldr	r3, [r3, #20]
 800c670:	f003 0302 	and.w	r3, r3, #2
 800c674:	2b02      	cmp	r3, #2
 800c676:	d155      	bne.n	800c724 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c67e:	b29b      	uxth	r3, r3
 800c680:	2b03      	cmp	r3, #3
 800c682:	d918      	bls.n	800c6b6 <HAL_SPI_Transmit+0x2ca>
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c688:	2b40      	cmp	r3, #64	; 0x40
 800c68a:	d914      	bls.n	800c6b6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	6812      	ldr	r2, [r2, #0]
 800c696:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c69c:	1d1a      	adds	r2, r3, #4
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	3b04      	subs	r3, #4
 800c6ac:	b29a      	uxth	r2, r3
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c6b4:	e05a      	b.n	800c76c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d917      	bls.n	800c6f2 <HAL_SPI_Transmit+0x306>
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d013      	beq.n	800c6f2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6ce:	881a      	ldrh	r2, [r3, #0]
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6d8:	1c9a      	adds	r2, r3, #2
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	3b02      	subs	r3, #2
 800c6e8:	b29a      	uxth	r2, r3
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c6f0:	e03c      	b.n	800c76c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	3320      	adds	r3, #32
 800c6fc:	7812      	ldrb	r2, [r2, #0]
 800c6fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c704:	1c5a      	adds	r2, r3, #1
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c710:	b29b      	uxth	r3, r3
 800c712:	3b01      	subs	r3, #1
 800c714:	b29a      	uxth	r2, r3
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c71c:	e026      	b.n	800c76c <HAL_SPI_Transmit+0x380>
 800c71e:	bf00      	nop
 800c720:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c724:	f7f7 fe50 	bl	80043c8 <HAL_GetTick>
 800c728:	4602      	mov	r2, r0
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	429a      	cmp	r2, r3
 800c732:	d803      	bhi.n	800c73c <HAL_SPI_Transmit+0x350>
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c73a:	d102      	bne.n	800c742 <HAL_SPI_Transmit+0x356>
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d114      	bne.n	800c76c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f000 fd22 	bl	800d18c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c756:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2201      	movs	r2, #1
 800c764:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c768:	2301      	movs	r3, #1
 800c76a:	e02c      	b.n	800c7c6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c772:	b29b      	uxth	r3, r3
 800c774:	2b00      	cmp	r3, #0
 800c776:	f47f af78 	bne.w	800c66a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	2200      	movs	r2, #0
 800c782:	2108      	movs	r1, #8
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f000 fda1 	bl	800d2cc <SPI_WaitOnFlagUntilTimeout>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d007      	beq.n	800c7a0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c796:	f043 0220 	orr.w	r2, r3, #32
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c7a0:	68f8      	ldr	r0, [r7, #12]
 800c7a2:	f000 fcf3 	bl	800d18c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d001      	beq.n	800c7c4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	e000      	b.n	800c7c6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800c7c4:	7efb      	ldrb	r3, [r7, #27]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3720      	adds	r7, #32
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop

0800c7d0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b08a      	sub	sp, #40	; 0x28
 800c7d4:	af02      	add	r7, sp, #8
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	603b      	str	r3, [r7, #0]
 800c7dc:	4613      	mov	r3, r2
 800c7de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	3330      	adds	r3, #48	; 0x30
 800c7ea:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7f4:	d112      	bne.n	800c81c <HAL_SPI_Receive+0x4c>
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d10e      	bne.n	800c81c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2204      	movs	r2, #4
 800c802:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c806:	88fa      	ldrh	r2, [r7, #6]
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	9300      	str	r3, [sp, #0]
 800c80c:	4613      	mov	r3, r2
 800c80e:	68ba      	ldr	r2, [r7, #8]
 800c810:	68b9      	ldr	r1, [r7, #8]
 800c812:	68f8      	ldr	r0, [r7, #12]
 800c814:	f000 f9ce 	bl	800cbb4 <HAL_SPI_TransmitReceive>
 800c818:	4603      	mov	r3, r0
 800c81a:	e1c7      	b.n	800cbac <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c822:	2b01      	cmp	r3, #1
 800c824:	d101      	bne.n	800c82a <HAL_SPI_Receive+0x5a>
 800c826:	2302      	movs	r3, #2
 800c828:	e1c0      	b.n	800cbac <HAL_SPI_Receive+0x3dc>
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2201      	movs	r2, #1
 800c82e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c832:	f7f7 fdc9 	bl	80043c8 <HAL_GetTick>
 800c836:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	2b01      	cmp	r3, #1
 800c842:	d007      	beq.n	800c854 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800c844:	2302      	movs	r3, #2
 800c846:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c850:	7ffb      	ldrb	r3, [r7, #31]
 800c852:	e1ab      	b.n	800cbac <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d002      	beq.n	800c860 <HAL_SPI_Receive+0x90>
 800c85a:	88fb      	ldrh	r3, [r7, #6]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d107      	bne.n	800c870 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800c860:	2301      	movs	r3, #1
 800c862:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2200      	movs	r2, #0
 800c868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c86c:	7ffb      	ldrb	r3, [r7, #31]
 800c86e:	e19d      	b.n	800cbac <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2204      	movs	r2, #4
 800c874:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	88fa      	ldrh	r2, [r7, #6]
 800c88a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	88fa      	ldrh	r2, [r7, #6]
 800c892:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2200      	movs	r2, #0
 800c89a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c8c0:	d107      	bne.n	800c8d2 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c8d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	685a      	ldr	r2, [r3, #4]
 800c8d8:	4b94      	ldr	r3, [pc, #592]	; (800cb2c <HAL_SPI_Receive+0x35c>)
 800c8da:	4013      	ands	r3, r2
 800c8dc:	88f9      	ldrh	r1, [r7, #6]
 800c8de:	68fa      	ldr	r2, [r7, #12]
 800c8e0:	6812      	ldr	r2, [r2, #0]
 800c8e2:	430b      	orrs	r3, r1
 800c8e4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f042 0201 	orr.w	r2, r2, #1
 800c8f4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8fe:	d107      	bne.n	800c910 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c90e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	2b0f      	cmp	r3, #15
 800c916:	d948      	bls.n	800c9aa <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c918:	e040      	b.n	800c99c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	695a      	ldr	r2, [r3, #20]
 800c920:	f248 0308 	movw	r3, #32776	; 0x8008
 800c924:	4013      	ands	r3, r2
 800c926:	2b00      	cmp	r3, #0
 800c928:	d014      	beq.n	800c954 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c932:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c934:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c93a:	1d1a      	adds	r2, r3, #4
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c946:	b29b      	uxth	r3, r3
 800c948:	3b01      	subs	r3, #1
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c952:	e023      	b.n	800c99c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c954:	f7f7 fd38 	bl	80043c8 <HAL_GetTick>
 800c958:	4602      	mov	r2, r0
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	429a      	cmp	r2, r3
 800c962:	d803      	bhi.n	800c96c <HAL_SPI_Receive+0x19c>
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c96a:	d102      	bne.n	800c972 <HAL_SPI_Receive+0x1a2>
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d114      	bne.n	800c99c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c972:	68f8      	ldr	r0, [r7, #12]
 800c974:	f000 fc0a 	bl	800d18c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c986:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2201      	movs	r2, #1
 800c994:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c998:	2301      	movs	r3, #1
 800c99a:	e107      	b.n	800cbac <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1b8      	bne.n	800c91a <HAL_SPI_Receive+0x14a>
 800c9a8:	e0ed      	b.n	800cb86 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	2b07      	cmp	r3, #7
 800c9b0:	f240 80e2 	bls.w	800cb78 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c9b4:	e05b      	b.n	800ca6e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	695b      	ldr	r3, [r3, #20]
 800c9bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d030      	beq.n	800ca26 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	695b      	ldr	r3, [r3, #20]
 800c9ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d014      	beq.n	800c9fc <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c9dc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9e2:	1d1a      	adds	r2, r3, #4
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	3b02      	subs	r3, #2
 800c9f2:	b29a      	uxth	r2, r3
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c9fa:	e038      	b.n	800ca6e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca00:	69ba      	ldr	r2, [r7, #24]
 800ca02:	8812      	ldrh	r2, [r2, #0]
 800ca04:	b292      	uxth	r2, r2
 800ca06:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca0c:	1c9a      	adds	r2, r3, #2
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ca24:	e023      	b.n	800ca6e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ca26:	f7f7 fccf 	bl	80043c8 <HAL_GetTick>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	1ad3      	subs	r3, r2, r3
 800ca30:	683a      	ldr	r2, [r7, #0]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d803      	bhi.n	800ca3e <HAL_SPI_Receive+0x26e>
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca3c:	d102      	bne.n	800ca44 <HAL_SPI_Receive+0x274>
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d114      	bne.n	800ca6e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	f000 fba1 	bl	800d18c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2201      	movs	r2, #1
 800ca66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e09e      	b.n	800cbac <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d19d      	bne.n	800c9b6 <HAL_SPI_Receive+0x1e6>
 800ca7a:	e084      	b.n	800cb86 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	695b      	ldr	r3, [r3, #20]
 800ca82:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d052      	beq.n	800cb30 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	695b      	ldr	r3, [r3, #20]
 800ca90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d014      	beq.n	800cac2 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800caa0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800caa2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800caa8:	1d1a      	adds	r2, r3, #4
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	3b04      	subs	r3, #4
 800cab8:	b29a      	uxth	r2, r3
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cac0:	e05a      	b.n	800cb78 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	695b      	ldr	r3, [r3, #20]
 800cac8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800cacc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cad0:	d914      	bls.n	800cafc <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cad6:	69ba      	ldr	r2, [r7, #24]
 800cad8:	8812      	ldrh	r2, [r2, #0]
 800cada:	b292      	uxth	r2, r2
 800cadc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cae2:	1c9a      	adds	r2, r3, #2
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800caee:	b29b      	uxth	r3, r3
 800caf0:	3b02      	subs	r3, #2
 800caf2:	b29a      	uxth	r2, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cafa:	e03d      	b.n	800cb78 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb08:	7812      	ldrb	r2, [r2, #0]
 800cb0a:	b2d2      	uxtb	r2, r2
 800cb0c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb12:	1c5a      	adds	r2, r3, #1
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	3b01      	subs	r3, #1
 800cb22:	b29a      	uxth	r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cb2a:	e025      	b.n	800cb78 <HAL_SPI_Receive+0x3a8>
 800cb2c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb30:	f7f7 fc4a 	bl	80043c8 <HAL_GetTick>
 800cb34:	4602      	mov	r2, r0
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	1ad3      	subs	r3, r2, r3
 800cb3a:	683a      	ldr	r2, [r7, #0]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d803      	bhi.n	800cb48 <HAL_SPI_Receive+0x378>
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb46:	d102      	bne.n	800cb4e <HAL_SPI_Receive+0x37e>
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d114      	bne.n	800cb78 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cb4e:	68f8      	ldr	r0, [r7, #12]
 800cb50:	f000 fb1c 	bl	800d18c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cb74:	2301      	movs	r3, #1
 800cb76:	e019      	b.n	800cbac <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f47f af7b 	bne.w	800ca7c <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cb86:	68f8      	ldr	r0, [r7, #12]
 800cb88:	f000 fb00 	bl	800d18c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2201      	movs	r2, #1
 800cb98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d001      	beq.n	800cbaa <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800cba6:	2301      	movs	r3, #1
 800cba8:	e000      	b.n	800cbac <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800cbaa:	7ffb      	ldrb	r3, [r7, #31]
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3720      	adds	r7, #32
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b08e      	sub	sp, #56	; 0x38
 800cbb8:	af02      	add	r7, sp, #8
 800cbba:	60f8      	str	r0, [r7, #12]
 800cbbc:	60b9      	str	r1, [r7, #8]
 800cbbe:	607a      	str	r2, [r7, #4]
 800cbc0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	3320      	adds	r3, #32
 800cbce:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	3330      	adds	r3, #48	; 0x30
 800cbd6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	d101      	bne.n	800cbe6 <HAL_SPI_TransmitReceive+0x32>
 800cbe2:	2302      	movs	r3, #2
 800cbe4:	e2ce      	b.n	800d184 <HAL_SPI_TransmitReceive+0x5d0>
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cbee:	f7f7 fbeb 	bl	80043c8 <HAL_GetTick>
 800cbf2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800cbf4:	887b      	ldrh	r3, [r7, #2]
 800cbf6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800cbf8:	887b      	ldrh	r3, [r7, #2]
 800cbfa:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc02:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cc0a:	7efb      	ldrb	r3, [r7, #27]
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d014      	beq.n	800cc3a <HAL_SPI_TransmitReceive+0x86>
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc16:	d106      	bne.n	800cc26 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	689b      	ldr	r3, [r3, #8]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d102      	bne.n	800cc26 <HAL_SPI_TransmitReceive+0x72>
 800cc20:	7efb      	ldrb	r3, [r7, #27]
 800cc22:	2b04      	cmp	r3, #4
 800cc24:	d009      	beq.n	800cc3a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800cc26:	2302      	movs	r3, #2
 800cc28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cc34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc38:	e2a4      	b.n	800d184 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d005      	beq.n	800cc4c <HAL_SPI_TransmitReceive+0x98>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d002      	beq.n	800cc4c <HAL_SPI_TransmitReceive+0x98>
 800cc46:	887b      	ldrh	r3, [r7, #2]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d109      	bne.n	800cc60 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cc5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc5e:	e291      	b.n	800d184 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	2b04      	cmp	r3, #4
 800cc6a:	d003      	beq.n	800cc74 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2205      	movs	r2, #5
 800cc70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2200      	movs	r2, #0
 800cc78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	887a      	ldrh	r2, [r7, #2]
 800cc86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	887a      	ldrh	r2, [r7, #2]
 800cc8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	68ba      	ldr	r2, [r7, #8]
 800cc96:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	887a      	ldrh	r2, [r7, #2]
 800cc9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	887a      	ldrh	r2, [r7, #2]
 800cca4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	685a      	ldr	r2, [r3, #4]
 800ccba:	4b9f      	ldr	r3, [pc, #636]	; (800cf38 <HAL_SPI_TransmitReceive+0x384>)
 800ccbc:	4013      	ands	r3, r2
 800ccbe:	8879      	ldrh	r1, [r7, #2]
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	6812      	ldr	r2, [r2, #0]
 800ccc4:	430b      	orrs	r3, r1
 800ccc6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f042 0201 	orr.w	r2, r2, #1
 800ccd6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cce0:	d107      	bne.n	800ccf2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ccf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	2b0f      	cmp	r3, #15
 800ccf8:	d970      	bls.n	800cddc <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ccfa:	e068      	b.n	800cdce <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	695b      	ldr	r3, [r3, #20]
 800cd02:	f003 0302 	and.w	r3, r3, #2
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	d11a      	bne.n	800cd40 <HAL_SPI_TransmitReceive+0x18c>
 800cd0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d017      	beq.n	800cd40 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	6812      	ldr	r2, [r2, #0]
 800cd1a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd20:	1d1a      	adds	r2, r3, #4
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	3b01      	subs	r3, #1
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	695a      	ldr	r2, [r3, #20]
 800cd46:	f248 0308 	movw	r3, #32776	; 0x8008
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d01a      	beq.n	800cd86 <HAL_SPI_TransmitReceive+0x1d2>
 800cd50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d017      	beq.n	800cd86 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cd60:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd66:	1d1a      	adds	r2, r3, #4
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	3b01      	subs	r3, #1
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd84:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd86:	f7f7 fb1f 	bl	80043c8 <HAL_GetTick>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d803      	bhi.n	800cd9e <HAL_SPI_TransmitReceive+0x1ea>
 800cd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd9c:	d102      	bne.n	800cda4 <HAL_SPI_TransmitReceive+0x1f0>
 800cd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d114      	bne.n	800cdce <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	f000 f9f1 	bl	800d18c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2200      	movs	r2, #0
 800cdae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e1da      	b.n	800d184 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cdce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d193      	bne.n	800ccfc <HAL_SPI_TransmitReceive+0x148>
 800cdd4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d190      	bne.n	800ccfc <HAL_SPI_TransmitReceive+0x148>
 800cdda:	e1ac      	b.n	800d136 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	2b07      	cmp	r3, #7
 800cde2:	f240 81a0 	bls.w	800d126 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cde6:	e0a9      	b.n	800cf3c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	f003 0302 	and.w	r3, r3, #2
 800cdf2:	2b02      	cmp	r3, #2
 800cdf4:	d139      	bne.n	800ce6a <HAL_SPI_TransmitReceive+0x2b6>
 800cdf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d036      	beq.n	800ce6a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cdfc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d91c      	bls.n	800ce3c <HAL_SPI_TransmitReceive+0x288>
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d018      	beq.n	800ce3c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	6812      	ldr	r2, [r2, #0]
 800ce14:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce1a:	1d1a      	adds	r2, r3, #4
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce26:	b29b      	uxth	r3, r3
 800ce28:	3b02      	subs	r3, #2
 800ce2a:	b29a      	uxth	r2, r3
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ce3a:	e016      	b.n	800ce6a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce40:	881a      	ldrh	r2, [r3, #0]
 800ce42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce44:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce4a:	1c9a      	adds	r2, r3, #2
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	b29a      	uxth	r2, r3
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce68:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	695b      	ldr	r3, [r3, #20]
 800ce70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d03a      	beq.n	800ceee <HAL_SPI_TransmitReceive+0x33a>
 800ce78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d037      	beq.n	800ceee <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	695b      	ldr	r3, [r3, #20]
 800ce84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d018      	beq.n	800cebe <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681a      	ldr	r2, [r3, #0]
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ce96:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce9c:	1d1a      	adds	r2, r3, #4
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	3b02      	subs	r3, #2
 800ceac:	b29a      	uxth	r2, r3
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ceba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cebc:	e017      	b.n	800ceee <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cec2:	6a3a      	ldr	r2, [r7, #32]
 800cec4:	8812      	ldrh	r2, [r2, #0]
 800cec6:	b292      	uxth	r2, r2
 800cec8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cece:	1c9a      	adds	r2, r3, #2
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	3b01      	subs	r3, #1
 800cede:	b29a      	uxth	r2, r3
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ceec:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ceee:	f7f7 fa6b 	bl	80043c8 <HAL_GetTick>
 800cef2:	4602      	mov	r2, r0
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	1ad3      	subs	r3, r2, r3
 800cef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d803      	bhi.n	800cf06 <HAL_SPI_TransmitReceive+0x352>
 800cefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf04:	d102      	bne.n	800cf0c <HAL_SPI_TransmitReceive+0x358>
 800cf06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d117      	bne.n	800cf3c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800cf0c:	68f8      	ldr	r0, [r7, #12]
 800cf0e:	f000 f93d 	bl	800d18c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2200      	movs	r2, #0
 800cf16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800cf32:	2301      	movs	r3, #1
 800cf34:	e126      	b.n	800d184 <HAL_SPI_TransmitReceive+0x5d0>
 800cf36:	bf00      	nop
 800cf38:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cf3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f47f af52 	bne.w	800cde8 <HAL_SPI_TransmitReceive+0x234>
 800cf44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f47f af4e 	bne.w	800cde8 <HAL_SPI_TransmitReceive+0x234>
 800cf4c:	e0f3      	b.n	800d136 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	695b      	ldr	r3, [r3, #20]
 800cf54:	f003 0302 	and.w	r3, r3, #2
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d15a      	bne.n	800d012 <HAL_SPI_TransmitReceive+0x45e>
 800cf5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d057      	beq.n	800d012 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cf62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf64:	2b03      	cmp	r3, #3
 800cf66:	d91c      	bls.n	800cfa2 <HAL_SPI_TransmitReceive+0x3ee>
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf6c:	2b40      	cmp	r3, #64	; 0x40
 800cf6e:	d918      	bls.n	800cfa2 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	6812      	ldr	r2, [r2, #0]
 800cf7a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf80:	1d1a      	adds	r2, r3, #4
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	3b04      	subs	r3, #4
 800cf90:	b29a      	uxth	r2, r3
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cfa0:	e037      	b.n	800d012 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cfa2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d91b      	bls.n	800cfe0 <HAL_SPI_TransmitReceive+0x42c>
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d017      	beq.n	800cfe0 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfb4:	881a      	ldrh	r2, [r3, #0]
 800cfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfbe:	1c9a      	adds	r2, r3, #2
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	3b02      	subs	r3, #2
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cfdc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cfde:	e018      	b.n	800d012 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	3320      	adds	r3, #32
 800cfea:	7812      	ldrb	r2, [r2, #0]
 800cfec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cff2:	1c5a      	adds	r2, r3, #1
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cffe:	b29b      	uxth	r3, r3
 800d000:	3b01      	subs	r3, #1
 800d002:	b29a      	uxth	r2, r3
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d010:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	695b      	ldr	r3, [r3, #20]
 800d018:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d05e      	beq.n	800d0de <HAL_SPI_TransmitReceive+0x52a>
 800d020:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d022:	2b00      	cmp	r3, #0
 800d024:	d05b      	beq.n	800d0de <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	695b      	ldr	r3, [r3, #20]
 800d02c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d030:	2b00      	cmp	r3, #0
 800d032:	d018      	beq.n	800d066 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d03c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d03e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d044:	1d1a      	adds	r2, r3, #4
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d050:	b29b      	uxth	r3, r3
 800d052:	3b04      	subs	r3, #4
 800d054:	b29a      	uxth	r2, r3
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d062:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d064:	e03b      	b.n	800d0de <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	695b      	ldr	r3, [r3, #20]
 800d06c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d074:	d918      	bls.n	800d0a8 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d07a:	6a3a      	ldr	r2, [r7, #32]
 800d07c:	8812      	ldrh	r2, [r2, #0]
 800d07e:	b292      	uxth	r2, r2
 800d080:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d086:	1c9a      	adds	r2, r3, #2
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d092:	b29b      	uxth	r3, r3
 800d094:	3b02      	subs	r3, #2
 800d096:	b29a      	uxth	r2, r3
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d0a6:	e01a      	b.n	800d0de <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0b4:	7812      	ldrb	r2, [r2, #0]
 800d0b6:	b2d2      	uxtb	r2, r2
 800d0b8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0be:	1c5a      	adds	r2, r3, #1
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	b29a      	uxth	r2, r3
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0de:	f7f7 f973 	bl	80043c8 <HAL_GetTick>
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	69fb      	ldr	r3, [r7, #28]
 800d0e6:	1ad3      	subs	r3, r2, r3
 800d0e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d803      	bhi.n	800d0f6 <HAL_SPI_TransmitReceive+0x542>
 800d0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0f4:	d102      	bne.n	800d0fc <HAL_SPI_TransmitReceive+0x548>
 800d0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d114      	bne.n	800d126 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d0fc:	68f8      	ldr	r0, [r7, #12]
 800d0fe:	f000 f845 	bl	800d18c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2200      	movs	r2, #0
 800d106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d110:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2201      	movs	r2, #1
 800d11e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d122:	2301      	movs	r3, #1
 800d124:	e02e      	b.n	800d184 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d126:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d128:	2b00      	cmp	r3, #0
 800d12a:	f47f af10 	bne.w	800cf4e <HAL_SPI_TransmitReceive+0x39a>
 800d12e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d130:	2b00      	cmp	r3, #0
 800d132:	f47f af0c 	bne.w	800cf4e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d138:	9300      	str	r3, [sp, #0]
 800d13a:	69fb      	ldr	r3, [r7, #28]
 800d13c:	2200      	movs	r2, #0
 800d13e:	2108      	movs	r1, #8
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f000 f8c3 	bl	800d2cc <SPI_WaitOnFlagUntilTimeout>
 800d146:	4603      	mov	r3, r0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d007      	beq.n	800d15c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d152:	f043 0220 	orr.w	r2, r3, #32
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f000 f815 	bl	800d18c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2200      	movs	r2, #0
 800d166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2201      	movs	r2, #1
 800d16e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d001      	beq.n	800d180 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800d17c:	2301      	movs	r3, #1
 800d17e:	e001      	b.n	800d184 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800d180:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d184:	4618      	mov	r0, r3
 800d186:	3730      	adds	r7, #48	; 0x30
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b085      	sub	sp, #20
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	695b      	ldr	r3, [r3, #20]
 800d19a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	699a      	ldr	r2, [r3, #24]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f042 0208 	orr.w	r2, r2, #8
 800d1aa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	699a      	ldr	r2, [r3, #24]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f042 0210 	orr.w	r2, r2, #16
 800d1ba:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f022 0201 	bic.w	r2, r2, #1
 800d1ca:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	6919      	ldr	r1, [r3, #16]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	4b3c      	ldr	r3, [pc, #240]	; (800d2c8 <SPI_CloseTransfer+0x13c>)
 800d1d8:	400b      	ands	r3, r1
 800d1da:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	689a      	ldr	r2, [r3, #8]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d1ea:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	2b04      	cmp	r3, #4
 800d1f6:	d014      	beq.n	800d222 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f003 0320 	and.w	r3, r3, #32
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d00f      	beq.n	800d222 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d208:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	699a      	ldr	r2, [r3, #24]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f042 0220 	orr.w	r2, r2, #32
 800d220:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	2b03      	cmp	r3, #3
 800d22c:	d014      	beq.n	800d258 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d234:	2b00      	cmp	r3, #0
 800d236:	d00f      	beq.n	800d258 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d23e:	f043 0204 	orr.w	r2, r3, #4
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	699a      	ldr	r2, [r3, #24]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d256:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d00f      	beq.n	800d282 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d268:	f043 0201 	orr.w	r2, r3, #1
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	699a      	ldr	r2, [r3, #24]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d280:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d00f      	beq.n	800d2ac <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d292:	f043 0208 	orr.w	r2, r3, #8
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	699a      	ldr	r2, [r3, #24]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d2aa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d2bc:	bf00      	nop
 800d2be:	3714      	adds	r7, #20
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr
 800d2c8:	fffffc90 	.word	0xfffffc90

0800d2cc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b084      	sub	sp, #16
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	603b      	str	r3, [r7, #0]
 800d2d8:	4613      	mov	r3, r2
 800d2da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d2dc:	e010      	b.n	800d300 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d2de:	f7f7 f873 	bl	80043c8 <HAL_GetTick>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	1ad3      	subs	r3, r2, r3
 800d2e8:	69ba      	ldr	r2, [r7, #24]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d803      	bhi.n	800d2f6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f4:	d102      	bne.n	800d2fc <SPI_WaitOnFlagUntilTimeout+0x30>
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d101      	bne.n	800d300 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d2fc:	2303      	movs	r3, #3
 800d2fe:	e00f      	b.n	800d320 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	695a      	ldr	r2, [r3, #20]
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	4013      	ands	r3, r2
 800d30a:	68ba      	ldr	r2, [r7, #8]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	bf0c      	ite	eq
 800d310:	2301      	moveq	r3, #1
 800d312:	2300      	movne	r3, #0
 800d314:	b2db      	uxtb	r3, r3
 800d316:	461a      	mov	r2, r3
 800d318:	79fb      	ldrb	r3, [r7, #7]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d0df      	beq.n	800d2de <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3710      	adds	r7, #16
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d328:	b480      	push	{r7}
 800d32a:	b085      	sub	sp, #20
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d334:	095b      	lsrs	r3, r3, #5
 800d336:	3301      	adds	r3, #1
 800d338:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	3301      	adds	r3, #1
 800d340:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	3307      	adds	r3, #7
 800d346:	08db      	lsrs	r3, r3, #3
 800d348:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	fb02 f303 	mul.w	r3, r2, r3
}
 800d352:	4618      	mov	r0, r3
 800d354:	3714      	adds	r7, #20
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr

0800d35e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b082      	sub	sp, #8
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d101      	bne.n	800d370 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d36c:	2301      	movs	r3, #1
 800d36e:	e049      	b.n	800d404 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d376:	b2db      	uxtb	r3, r3
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d106      	bne.n	800d38a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f7f6 f8b1 	bl	80034ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2202      	movs	r2, #2
 800d38e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	3304      	adds	r3, #4
 800d39a:	4619      	mov	r1, r3
 800d39c:	4610      	mov	r0, r2
 800d39e:	f000 f9ed 	bl	800d77c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2201      	movs	r2, #1
 800d3be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b085      	sub	sp, #20
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d001      	beq.n	800d424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d420:	2301      	movs	r3, #1
 800d422:	e04f      	b.n	800d4c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2202      	movs	r2, #2
 800d428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68da      	ldr	r2, [r3, #12]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f042 0201 	orr.w	r2, r2, #1
 800d43a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a23      	ldr	r2, [pc, #140]	; (800d4d0 <HAL_TIM_Base_Start_IT+0xc4>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d01d      	beq.n	800d482 <HAL_TIM_Base_Start_IT+0x76>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d44e:	d018      	beq.n	800d482 <HAL_TIM_Base_Start_IT+0x76>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a1f      	ldr	r2, [pc, #124]	; (800d4d4 <HAL_TIM_Base_Start_IT+0xc8>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d013      	beq.n	800d482 <HAL_TIM_Base_Start_IT+0x76>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4a1e      	ldr	r2, [pc, #120]	; (800d4d8 <HAL_TIM_Base_Start_IT+0xcc>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d00e      	beq.n	800d482 <HAL_TIM_Base_Start_IT+0x76>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a1c      	ldr	r2, [pc, #112]	; (800d4dc <HAL_TIM_Base_Start_IT+0xd0>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d009      	beq.n	800d482 <HAL_TIM_Base_Start_IT+0x76>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	4a1b      	ldr	r2, [pc, #108]	; (800d4e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d004      	beq.n	800d482 <HAL_TIM_Base_Start_IT+0x76>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4a19      	ldr	r2, [pc, #100]	; (800d4e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d115      	bne.n	800d4ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	689a      	ldr	r2, [r3, #8]
 800d488:	4b17      	ldr	r3, [pc, #92]	; (800d4e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800d48a:	4013      	ands	r3, r2
 800d48c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2b06      	cmp	r3, #6
 800d492:	d015      	beq.n	800d4c0 <HAL_TIM_Base_Start_IT+0xb4>
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d49a:	d011      	beq.n	800d4c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	681a      	ldr	r2, [r3, #0]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f042 0201 	orr.w	r2, r2, #1
 800d4aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4ac:	e008      	b.n	800d4c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	681a      	ldr	r2, [r3, #0]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f042 0201 	orr.w	r2, r2, #1
 800d4bc:	601a      	str	r2, [r3, #0]
 800d4be:	e000      	b.n	800d4c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d4c2:	2300      	movs	r3, #0
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3714      	adds	r7, #20
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr
 800d4d0:	40010000 	.word	0x40010000
 800d4d4:	40000400 	.word	0x40000400
 800d4d8:	40000800 	.word	0x40000800
 800d4dc:	40000c00 	.word	0x40000c00
 800d4e0:	40010400 	.word	0x40010400
 800d4e4:	40001800 	.word	0x40001800
 800d4e8:	00010007 	.word	0x00010007

0800d4ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	691b      	ldr	r3, [r3, #16]
 800d4fa:	f003 0302 	and.w	r3, r3, #2
 800d4fe:	2b02      	cmp	r3, #2
 800d500:	d122      	bne.n	800d548 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	68db      	ldr	r3, [r3, #12]
 800d508:	f003 0302 	and.w	r3, r3, #2
 800d50c:	2b02      	cmp	r3, #2
 800d50e:	d11b      	bne.n	800d548 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f06f 0202 	mvn.w	r2, #2
 800d518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2201      	movs	r2, #1
 800d51e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	699b      	ldr	r3, [r3, #24]
 800d526:	f003 0303 	and.w	r3, r3, #3
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d003      	beq.n	800d536 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 f905 	bl	800d73e <HAL_TIM_IC_CaptureCallback>
 800d534:	e005      	b.n	800d542 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 f8f7 	bl	800d72a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 f908 	bl	800d752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	691b      	ldr	r3, [r3, #16]
 800d54e:	f003 0304 	and.w	r3, r3, #4
 800d552:	2b04      	cmp	r3, #4
 800d554:	d122      	bne.n	800d59c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	f003 0304 	and.w	r3, r3, #4
 800d560:	2b04      	cmp	r3, #4
 800d562:	d11b      	bne.n	800d59c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f06f 0204 	mvn.w	r2, #4
 800d56c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2202      	movs	r2, #2
 800d572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	699b      	ldr	r3, [r3, #24]
 800d57a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d003      	beq.n	800d58a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 f8db 	bl	800d73e <HAL_TIM_IC_CaptureCallback>
 800d588:	e005      	b.n	800d596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 f8cd 	bl	800d72a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f000 f8de 	bl	800d752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2200      	movs	r2, #0
 800d59a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	691b      	ldr	r3, [r3, #16]
 800d5a2:	f003 0308 	and.w	r3, r3, #8
 800d5a6:	2b08      	cmp	r3, #8
 800d5a8:	d122      	bne.n	800d5f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	68db      	ldr	r3, [r3, #12]
 800d5b0:	f003 0308 	and.w	r3, r3, #8
 800d5b4:	2b08      	cmp	r3, #8
 800d5b6:	d11b      	bne.n	800d5f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f06f 0208 	mvn.w	r2, #8
 800d5c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2204      	movs	r2, #4
 800d5c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	69db      	ldr	r3, [r3, #28]
 800d5ce:	f003 0303 	and.w	r3, r3, #3
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d003      	beq.n	800d5de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 f8b1 	bl	800d73e <HAL_TIM_IC_CaptureCallback>
 800d5dc:	e005      	b.n	800d5ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 f8a3 	bl	800d72a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 f8b4 	bl	800d752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	691b      	ldr	r3, [r3, #16]
 800d5f6:	f003 0310 	and.w	r3, r3, #16
 800d5fa:	2b10      	cmp	r3, #16
 800d5fc:	d122      	bne.n	800d644 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	f003 0310 	and.w	r3, r3, #16
 800d608:	2b10      	cmp	r3, #16
 800d60a:	d11b      	bne.n	800d644 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f06f 0210 	mvn.w	r2, #16
 800d614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2208      	movs	r2, #8
 800d61a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	69db      	ldr	r3, [r3, #28]
 800d622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d626:	2b00      	cmp	r3, #0
 800d628:	d003      	beq.n	800d632 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 f887 	bl	800d73e <HAL_TIM_IC_CaptureCallback>
 800d630:	e005      	b.n	800d63e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 f879 	bl	800d72a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 f88a 	bl	800d752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	691b      	ldr	r3, [r3, #16]
 800d64a:	f003 0301 	and.w	r3, r3, #1
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d10e      	bne.n	800d670 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	68db      	ldr	r3, [r3, #12]
 800d658:	f003 0301 	and.w	r3, r3, #1
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d107      	bne.n	800d670 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f06f 0201 	mvn.w	r2, #1
 800d668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f7f6 f860 	bl	8003730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	691b      	ldr	r3, [r3, #16]
 800d676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d67a:	2b80      	cmp	r3, #128	; 0x80
 800d67c:	d10e      	bne.n	800d69c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	68db      	ldr	r3, [r3, #12]
 800d684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d688:	2b80      	cmp	r3, #128	; 0x80
 800d68a:	d107      	bne.n	800d69c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 f99c 	bl	800d9d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	691b      	ldr	r3, [r3, #16]
 800d6a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6aa:	d10e      	bne.n	800d6ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	68db      	ldr	r3, [r3, #12]
 800d6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6b6:	2b80      	cmp	r3, #128	; 0x80
 800d6b8:	d107      	bne.n	800d6ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d6c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 f98f 	bl	800d9e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6d4:	2b40      	cmp	r3, #64	; 0x40
 800d6d6:	d10e      	bne.n	800d6f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	68db      	ldr	r3, [r3, #12]
 800d6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6e2:	2b40      	cmp	r3, #64	; 0x40
 800d6e4:	d107      	bne.n	800d6f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d6ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f000 f838 	bl	800d766 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	691b      	ldr	r3, [r3, #16]
 800d6fc:	f003 0320 	and.w	r3, r3, #32
 800d700:	2b20      	cmp	r3, #32
 800d702:	d10e      	bne.n	800d722 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	f003 0320 	and.w	r3, r3, #32
 800d70e:	2b20      	cmp	r3, #32
 800d710:	d107      	bne.n	800d722 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f06f 0220 	mvn.w	r2, #32
 800d71a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 f94f 	bl	800d9c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d722:	bf00      	nop
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d72a:	b480      	push	{r7}
 800d72c:	b083      	sub	sp, #12
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d732:	bf00      	nop
 800d734:	370c      	adds	r7, #12
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr

0800d73e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d73e:	b480      	push	{r7}
 800d740:	b083      	sub	sp, #12
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d746:	bf00      	nop
 800d748:	370c      	adds	r7, #12
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr

0800d752 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d752:	b480      	push	{r7}
 800d754:	b083      	sub	sp, #12
 800d756:	af00      	add	r7, sp, #0
 800d758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d75a:	bf00      	nop
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr

0800d766 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d766:	b480      	push	{r7}
 800d768:	b083      	sub	sp, #12
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d76e:	bf00      	nop
 800d770:	370c      	adds	r7, #12
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr
	...

0800d77c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b085      	sub	sp, #20
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	4a40      	ldr	r2, [pc, #256]	; (800d890 <TIM_Base_SetConfig+0x114>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d013      	beq.n	800d7bc <TIM_Base_SetConfig+0x40>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d79a:	d00f      	beq.n	800d7bc <TIM_Base_SetConfig+0x40>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	4a3d      	ldr	r2, [pc, #244]	; (800d894 <TIM_Base_SetConfig+0x118>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d00b      	beq.n	800d7bc <TIM_Base_SetConfig+0x40>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	4a3c      	ldr	r2, [pc, #240]	; (800d898 <TIM_Base_SetConfig+0x11c>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d007      	beq.n	800d7bc <TIM_Base_SetConfig+0x40>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a3b      	ldr	r2, [pc, #236]	; (800d89c <TIM_Base_SetConfig+0x120>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d003      	beq.n	800d7bc <TIM_Base_SetConfig+0x40>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a3a      	ldr	r2, [pc, #232]	; (800d8a0 <TIM_Base_SetConfig+0x124>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d108      	bne.n	800d7ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	4a2f      	ldr	r2, [pc, #188]	; (800d890 <TIM_Base_SetConfig+0x114>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d01f      	beq.n	800d816 <TIM_Base_SetConfig+0x9a>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7dc:	d01b      	beq.n	800d816 <TIM_Base_SetConfig+0x9a>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	4a2c      	ldr	r2, [pc, #176]	; (800d894 <TIM_Base_SetConfig+0x118>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d017      	beq.n	800d816 <TIM_Base_SetConfig+0x9a>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	4a2b      	ldr	r2, [pc, #172]	; (800d898 <TIM_Base_SetConfig+0x11c>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d013      	beq.n	800d816 <TIM_Base_SetConfig+0x9a>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4a2a      	ldr	r2, [pc, #168]	; (800d89c <TIM_Base_SetConfig+0x120>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d00f      	beq.n	800d816 <TIM_Base_SetConfig+0x9a>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4a29      	ldr	r2, [pc, #164]	; (800d8a0 <TIM_Base_SetConfig+0x124>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d00b      	beq.n	800d816 <TIM_Base_SetConfig+0x9a>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4a28      	ldr	r2, [pc, #160]	; (800d8a4 <TIM_Base_SetConfig+0x128>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d007      	beq.n	800d816 <TIM_Base_SetConfig+0x9a>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4a27      	ldr	r2, [pc, #156]	; (800d8a8 <TIM_Base_SetConfig+0x12c>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d003      	beq.n	800d816 <TIM_Base_SetConfig+0x9a>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a26      	ldr	r2, [pc, #152]	; (800d8ac <TIM_Base_SetConfig+0x130>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d108      	bne.n	800d828 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d81c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	4313      	orrs	r3, r2
 800d826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	4313      	orrs	r3, r2
 800d834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	689a      	ldr	r2, [r3, #8]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	4a10      	ldr	r2, [pc, #64]	; (800d890 <TIM_Base_SetConfig+0x114>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d00f      	beq.n	800d874 <TIM_Base_SetConfig+0xf8>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4a12      	ldr	r2, [pc, #72]	; (800d8a0 <TIM_Base_SetConfig+0x124>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d00b      	beq.n	800d874 <TIM_Base_SetConfig+0xf8>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	4a11      	ldr	r2, [pc, #68]	; (800d8a4 <TIM_Base_SetConfig+0x128>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d007      	beq.n	800d874 <TIM_Base_SetConfig+0xf8>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4a10      	ldr	r2, [pc, #64]	; (800d8a8 <TIM_Base_SetConfig+0x12c>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d003      	beq.n	800d874 <TIM_Base_SetConfig+0xf8>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	4a0f      	ldr	r2, [pc, #60]	; (800d8ac <TIM_Base_SetConfig+0x130>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d103      	bne.n	800d87c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	691a      	ldr	r2, [r3, #16]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2201      	movs	r2, #1
 800d880:	615a      	str	r2, [r3, #20]
}
 800d882:	bf00      	nop
 800d884:	3714      	adds	r7, #20
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr
 800d88e:	bf00      	nop
 800d890:	40010000 	.word	0x40010000
 800d894:	40000400 	.word	0x40000400
 800d898:	40000800 	.word	0x40000800
 800d89c:	40000c00 	.word	0x40000c00
 800d8a0:	40010400 	.word	0x40010400
 800d8a4:	40014000 	.word	0x40014000
 800d8a8:	40014400 	.word	0x40014400
 800d8ac:	40014800 	.word	0x40014800

0800d8b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b085      	sub	sp, #20
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d101      	bne.n	800d8c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d8c4:	2302      	movs	r3, #2
 800d8c6:	e068      	b.n	800d99a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2202      	movs	r2, #2
 800d8d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a2e      	ldr	r2, [pc, #184]	; (800d9a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d004      	beq.n	800d8fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4a2d      	ldr	r2, [pc, #180]	; (800d9ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d108      	bne.n	800d90e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d902:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	68fa      	ldr	r2, [r7, #12]
 800d90a:	4313      	orrs	r3, r2
 800d90c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d914:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	68fa      	ldr	r2, [r7, #12]
 800d91c:	4313      	orrs	r3, r2
 800d91e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	68fa      	ldr	r2, [r7, #12]
 800d926:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4a1e      	ldr	r2, [pc, #120]	; (800d9a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d01d      	beq.n	800d96e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d93a:	d018      	beq.n	800d96e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a1b      	ldr	r2, [pc, #108]	; (800d9b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d013      	beq.n	800d96e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a1a      	ldr	r2, [pc, #104]	; (800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d00e      	beq.n	800d96e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a18      	ldr	r2, [pc, #96]	; (800d9b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d009      	beq.n	800d96e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4a13      	ldr	r2, [pc, #76]	; (800d9ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d004      	beq.n	800d96e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a14      	ldr	r2, [pc, #80]	; (800d9bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d10c      	bne.n	800d988 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	4313      	orrs	r3, r2
 800d97e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	68ba      	ldr	r2, [r7, #8]
 800d986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2201      	movs	r2, #1
 800d98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2200      	movs	r2, #0
 800d994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d998:	2300      	movs	r3, #0
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3714      	adds	r7, #20
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	40010000 	.word	0x40010000
 800d9ac:	40010400 	.word	0x40010400
 800d9b0:	40000400 	.word	0x40000400
 800d9b4:	40000800 	.word	0x40000800
 800d9b8:	40000c00 	.word	0x40000c00
 800d9bc:	40001800 	.word	0x40001800

0800d9c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b083      	sub	sp, #12
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d9c8:	bf00      	nop
 800d9ca:	370c      	adds	r7, #12
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d9dc:	bf00      	nop
 800d9de:	370c      	adds	r7, #12
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr

0800d9e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d9f0:	bf00      	nop
 800d9f2:	370c      	adds	r7, #12
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d101      	bne.n	800da0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da0a:	2301      	movs	r3, #1
 800da0c:	e042      	b.n	800da94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da14:	2b00      	cmp	r3, #0
 800da16:	d106      	bne.n	800da26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2200      	movs	r2, #0
 800da1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f7f5 fd8b 	bl	800353c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2224      	movs	r2, #36	; 0x24
 800da2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f022 0201 	bic.w	r2, r2, #1
 800da3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 fbd6 	bl	800e1f0 <UART_SetConfig>
 800da44:	4603      	mov	r3, r0
 800da46:	2b01      	cmp	r3, #1
 800da48:	d101      	bne.n	800da4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	e022      	b.n	800da94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da52:	2b00      	cmp	r3, #0
 800da54:	d002      	beq.n	800da5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f001 f92a 	bl	800ecb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	685a      	ldr	r2, [r3, #4]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800da6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	689a      	ldr	r2, [r3, #8]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800da7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f042 0201 	orr.w	r2, r2, #1
 800da8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f001 f9b1 	bl	800edf4 <UART_CheckIdleState>
 800da92:	4603      	mov	r3, r0
}
 800da94:	4618      	mov	r0, r3
 800da96:	3708      	adds	r7, #8
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	4613      	mov	r3, r2
 800daa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dab0:	2b20      	cmp	r3, #32
 800dab2:	d131      	bne.n	800db18 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d002      	beq.n	800dac0 <HAL_UART_Receive_IT+0x24>
 800daba:	88fb      	ldrh	r3, [r7, #6]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d101      	bne.n	800dac4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800dac0:	2301      	movs	r3, #1
 800dac2:	e02a      	b.n	800db1a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d101      	bne.n	800dad2 <HAL_UART_Receive_IT+0x36>
 800dace:	2302      	movs	r3, #2
 800dad0:	e023      	b.n	800db1a <HAL_UART_Receive_IT+0x7e>
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2201      	movs	r2, #1
 800dad6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2200      	movs	r2, #0
 800dade:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a0f      	ldr	r2, [pc, #60]	; (800db24 <HAL_UART_Receive_IT+0x88>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d00e      	beq.n	800db08 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d007      	beq.n	800db08 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	681a      	ldr	r2, [r3, #0]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800db06:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800db08:	88fb      	ldrh	r3, [r7, #6]
 800db0a:	461a      	mov	r2, r3
 800db0c:	68b9      	ldr	r1, [r7, #8]
 800db0e:	68f8      	ldr	r0, [r7, #12]
 800db10:	f001 fa3c 	bl	800ef8c <UART_Start_Receive_IT>
 800db14:	4603      	mov	r3, r0
 800db16:	e000      	b.n	800db1a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800db18:	2302      	movs	r3, #2
  }
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	58000c00 	.word	0x58000c00

0800db28 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	4613      	mov	r3, r2
 800db34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db3c:	2b20      	cmp	r3, #32
 800db3e:	d168      	bne.n	800dc12 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d002      	beq.n	800db4c <HAL_UART_Transmit_DMA+0x24>
 800db46:	88fb      	ldrh	r3, [r7, #6]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d101      	bne.n	800db50 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800db4c:	2301      	movs	r3, #1
 800db4e:	e061      	b.n	800dc14 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db56:	2b01      	cmp	r3, #1
 800db58:	d101      	bne.n	800db5e <HAL_UART_Transmit_DMA+0x36>
 800db5a:	2302      	movs	r3, #2
 800db5c:	e05a      	b.n	800dc14 <HAL_UART_Transmit_DMA+0xec>
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2201      	movs	r2, #1
 800db62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	68ba      	ldr	r2, [r7, #8]
 800db6a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	88fa      	ldrh	r2, [r7, #6]
 800db70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	88fa      	ldrh	r2, [r7, #6]
 800db78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2200      	movs	r2, #0
 800db80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2221      	movs	r2, #33	; 0x21
 800db88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db90:	2b00      	cmp	r3, #0
 800db92:	d02c      	beq.n	800dbee <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db98:	4a20      	ldr	r2, [pc, #128]	; (800dc1c <HAL_UART_Transmit_DMA+0xf4>)
 800db9a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dba0:	4a1f      	ldr	r2, [pc, #124]	; (800dc20 <HAL_UART_Transmit_DMA+0xf8>)
 800dba2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dba8:	4a1e      	ldr	r2, [pc, #120]	; (800dc24 <HAL_UART_Transmit_DMA+0xfc>)
 800dbaa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	3328      	adds	r3, #40	; 0x28
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	88fb      	ldrh	r3, [r7, #6]
 800dbc8:	f7f7 f8a6 	bl	8004d18 <HAL_DMA_Start_IT>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00d      	beq.n	800dbee <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2210      	movs	r2, #16
 800dbd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2220      	movs	r2, #32
 800dbe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800dbea:	2301      	movs	r3, #1
 800dbec:	e012      	b.n	800dc14 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2240      	movs	r2, #64	; 0x40
 800dbf4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	689a      	ldr	r2, [r3, #8]
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dc0c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e000      	b.n	800dc14 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800dc12:	2302      	movs	r3, #2
  }
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3710      	adds	r7, #16
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	0800f1a9 	.word	0x0800f1a9
 800dc20:	0800f1f9 	.word	0x0800f1f9
 800dc24:	0800f215 	.word	0x0800f215

0800dc28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b088      	sub	sp, #32
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	69db      	ldr	r3, [r3, #28]
 800dc36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	689b      	ldr	r3, [r3, #8]
 800dc46:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dc48:	69fa      	ldr	r2, [r7, #28]
 800dc4a:	f640 030f 	movw	r3, #2063	; 0x80f
 800dc4e:	4013      	ands	r3, r2
 800dc50:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d118      	bne.n	800dc8a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	f003 0320 	and.w	r3, r3, #32
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d013      	beq.n	800dc8a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dc62:	69bb      	ldr	r3, [r7, #24]
 800dc64:	f003 0320 	and.w	r3, r3, #32
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d104      	bne.n	800dc76 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d009      	beq.n	800dc8a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	f000 8282 	beq.w	800e184 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	4798      	blx	r3
      }
      return;
 800dc88:	e27c      	b.n	800e184 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f000 80ef 	beq.w	800de70 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dc92:	697a      	ldr	r2, [r7, #20]
 800dc94:	4b73      	ldr	r3, [pc, #460]	; (800de64 <HAL_UART_IRQHandler+0x23c>)
 800dc96:	4013      	ands	r3, r2
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d105      	bne.n	800dca8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dc9c:	69ba      	ldr	r2, [r7, #24]
 800dc9e:	4b72      	ldr	r3, [pc, #456]	; (800de68 <HAL_UART_IRQHandler+0x240>)
 800dca0:	4013      	ands	r3, r2
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	f000 80e4 	beq.w	800de70 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	f003 0301 	and.w	r3, r3, #1
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d010      	beq.n	800dcd4 <HAL_UART_IRQHandler+0xac>
 800dcb2:	69bb      	ldr	r3, [r7, #24]
 800dcb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d00b      	beq.n	800dcd4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dcca:	f043 0201 	orr.w	r2, r3, #1
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	f003 0302 	and.w	r3, r3, #2
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d010      	beq.n	800dd00 <HAL_UART_IRQHandler+0xd8>
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	f003 0301 	and.w	r3, r3, #1
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00b      	beq.n	800dd00 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2202      	movs	r2, #2
 800dcee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dcf6:	f043 0204 	orr.w	r2, r3, #4
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	f003 0304 	and.w	r3, r3, #4
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d010      	beq.n	800dd2c <HAL_UART_IRQHandler+0x104>
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	f003 0301 	and.w	r3, r3, #1
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d00b      	beq.n	800dd2c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2204      	movs	r2, #4
 800dd1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd22:	f043 0202 	orr.w	r2, r3, #2
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dd2c:	69fb      	ldr	r3, [r7, #28]
 800dd2e:	f003 0308 	and.w	r3, r3, #8
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d015      	beq.n	800dd62 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	f003 0320 	and.w	r3, r3, #32
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d104      	bne.n	800dd4a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dd40:	697a      	ldr	r2, [r7, #20]
 800dd42:	4b48      	ldr	r3, [pc, #288]	; (800de64 <HAL_UART_IRQHandler+0x23c>)
 800dd44:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d00b      	beq.n	800dd62 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2208      	movs	r2, #8
 800dd50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd58:	f043 0208 	orr.w	r2, r3, #8
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dd62:	69fb      	ldr	r3, [r7, #28]
 800dd64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d011      	beq.n	800dd90 <HAL_UART_IRQHandler+0x168>
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d00c      	beq.n	800dd90 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd86:	f043 0220 	orr.w	r2, r3, #32
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f000 81f6 	beq.w	800e188 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	f003 0320 	and.w	r3, r3, #32
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d011      	beq.n	800ddca <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	f003 0320 	and.w	r3, r3, #32
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d104      	bne.n	800ddba <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d007      	beq.n	800ddca <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d003      	beq.n	800ddca <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddd0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	689b      	ldr	r3, [r3, #8]
 800ddd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dddc:	2b40      	cmp	r3, #64	; 0x40
 800ddde:	d004      	beq.n	800ddea <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d031      	beq.n	800de4e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f001 f9aa 	bl	800f144 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	689b      	ldr	r3, [r3, #8]
 800ddf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddfa:	2b40      	cmp	r3, #64	; 0x40
 800ddfc:	d123      	bne.n	800de46 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	689a      	ldr	r2, [r3, #8]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de0c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de12:	2b00      	cmp	r3, #0
 800de14:	d013      	beq.n	800de3e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de1a:	4a14      	ldr	r2, [pc, #80]	; (800de6c <HAL_UART_IRQHandler+0x244>)
 800de1c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de22:	4618      	mov	r0, r3
 800de24:	f7f7 fd00 	bl	8005828 <HAL_DMA_Abort_IT>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d017      	beq.n	800de5e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800de38:	4610      	mov	r0, r2
 800de3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de3c:	e00f      	b.n	800de5e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 f9c0 	bl	800e1c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de44:	e00b      	b.n	800de5e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 f9bc 	bl	800e1c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de4c:	e007      	b.n	800de5e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f000 f9b8 	bl	800e1c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2200      	movs	r2, #0
 800de58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800de5c:	e194      	b.n	800e188 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de5e:	bf00      	nop
    return;
 800de60:	e192      	b.n	800e188 <HAL_UART_IRQHandler+0x560>
 800de62:	bf00      	nop
 800de64:	10000001 	.word	0x10000001
 800de68:	04000120 	.word	0x04000120
 800de6c:	0800f295 	.word	0x0800f295

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de74:	2b01      	cmp	r3, #1
 800de76:	f040 810f 	bne.w	800e098 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800de7a:	69fb      	ldr	r3, [r7, #28]
 800de7c:	f003 0310 	and.w	r3, r3, #16
 800de80:	2b00      	cmp	r3, #0
 800de82:	f000 8109 	beq.w	800e098 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800de86:	69bb      	ldr	r3, [r7, #24]
 800de88:	f003 0310 	and.w	r3, r3, #16
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	f000 8103 	beq.w	800e098 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2210      	movs	r2, #16
 800de98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dea4:	2b40      	cmp	r3, #64	; 0x40
 800dea6:	f040 80bb 	bne.w	800e020 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	4a96      	ldr	r2, [pc, #600]	; (800e10c <HAL_UART_IRQHandler+0x4e4>)
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d059      	beq.n	800df6a <HAL_UART_IRQHandler+0x342>
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	4a94      	ldr	r2, [pc, #592]	; (800e110 <HAL_UART_IRQHandler+0x4e8>)
 800debe:	4293      	cmp	r3, r2
 800dec0:	d053      	beq.n	800df6a <HAL_UART_IRQHandler+0x342>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4a92      	ldr	r2, [pc, #584]	; (800e114 <HAL_UART_IRQHandler+0x4ec>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d04d      	beq.n	800df6a <HAL_UART_IRQHandler+0x342>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4a90      	ldr	r2, [pc, #576]	; (800e118 <HAL_UART_IRQHandler+0x4f0>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d047      	beq.n	800df6a <HAL_UART_IRQHandler+0x342>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4a8e      	ldr	r2, [pc, #568]	; (800e11c <HAL_UART_IRQHandler+0x4f4>)
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d041      	beq.n	800df6a <HAL_UART_IRQHandler+0x342>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4a8c      	ldr	r2, [pc, #560]	; (800e120 <HAL_UART_IRQHandler+0x4f8>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d03b      	beq.n	800df6a <HAL_UART_IRQHandler+0x342>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4a8a      	ldr	r2, [pc, #552]	; (800e124 <HAL_UART_IRQHandler+0x4fc>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d035      	beq.n	800df6a <HAL_UART_IRQHandler+0x342>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4a88      	ldr	r2, [pc, #544]	; (800e128 <HAL_UART_IRQHandler+0x500>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d02f      	beq.n	800df6a <HAL_UART_IRQHandler+0x342>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a86      	ldr	r2, [pc, #536]	; (800e12c <HAL_UART_IRQHandler+0x504>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d029      	beq.n	800df6a <HAL_UART_IRQHandler+0x342>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4a84      	ldr	r2, [pc, #528]	; (800e130 <HAL_UART_IRQHandler+0x508>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d023      	beq.n	800df6a <HAL_UART_IRQHandler+0x342>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4a82      	ldr	r2, [pc, #520]	; (800e134 <HAL_UART_IRQHandler+0x50c>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d01d      	beq.n	800df6a <HAL_UART_IRQHandler+0x342>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4a80      	ldr	r2, [pc, #512]	; (800e138 <HAL_UART_IRQHandler+0x510>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d017      	beq.n	800df6a <HAL_UART_IRQHandler+0x342>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4a7e      	ldr	r2, [pc, #504]	; (800e13c <HAL_UART_IRQHandler+0x514>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d011      	beq.n	800df6a <HAL_UART_IRQHandler+0x342>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4a7c      	ldr	r2, [pc, #496]	; (800e140 <HAL_UART_IRQHandler+0x518>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d00b      	beq.n	800df6a <HAL_UART_IRQHandler+0x342>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a7a      	ldr	r2, [pc, #488]	; (800e144 <HAL_UART_IRQHandler+0x51c>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d005      	beq.n	800df6a <HAL_UART_IRQHandler+0x342>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	4a78      	ldr	r2, [pc, #480]	; (800e148 <HAL_UART_IRQHandler+0x520>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d105      	bne.n	800df76 <HAL_UART_IRQHandler+0x34e>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	b29b      	uxth	r3, r3
 800df74:	e004      	b.n	800df80 <HAL_UART_IRQHandler+0x358>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	b29b      	uxth	r3, r3
 800df80:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800df82:	893b      	ldrh	r3, [r7, #8]
 800df84:	2b00      	cmp	r3, #0
 800df86:	f000 8101 	beq.w	800e18c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800df90:	893a      	ldrh	r2, [r7, #8]
 800df92:	429a      	cmp	r2, r3
 800df94:	f080 80fa 	bcs.w	800e18c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	893a      	ldrh	r2, [r7, #8]
 800df9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfa4:	69db      	ldr	r3, [r3, #28]
 800dfa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfaa:	d02b      	beq.n	800e004 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	681a      	ldr	r2, [r3, #0]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dfba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	689a      	ldr	r2, [r3, #8]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f022 0201 	bic.w	r2, r2, #1
 800dfca:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	689a      	ldr	r2, [r3, #8]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dfda:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2220      	movs	r2, #32
 800dfe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f022 0210 	bic.w	r2, r2, #16
 800dff8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dffe:	4618      	mov	r0, r3
 800e000:	f7f7 f8f4 	bl	80051ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e010:	b29b      	uxth	r3, r3
 800e012:	1ad3      	subs	r3, r2, r3
 800e014:	b29b      	uxth	r3, r3
 800e016:	4619      	mov	r1, r3
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f000 f8dd 	bl	800e1d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e01e:	e0b5      	b.n	800e18c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	1ad3      	subs	r3, r2, r3
 800e030:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e038:	b29b      	uxth	r3, r3
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	f000 80a8 	beq.w	800e190 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800e040:	897b      	ldrh	r3, [r7, #10]
 800e042:	2b00      	cmp	r3, #0
 800e044:	f000 80a4 	beq.w	800e190 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e056:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	6899      	ldr	r1, [r3, #8]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	4b3a      	ldr	r3, [pc, #232]	; (800e14c <HAL_UART_IRQHandler+0x524>)
 800e064:	400b      	ands	r3, r1
 800e066:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2220      	movs	r2, #32
 800e06c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2200      	movs	r2, #0
 800e074:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2200      	movs	r2, #0
 800e07a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f022 0210 	bic.w	r2, r2, #16
 800e08a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e08c:	897b      	ldrh	r3, [r7, #10]
 800e08e:	4619      	mov	r1, r3
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f000 f8a1 	bl	800e1d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e096:	e07b      	b.n	800e190 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e098:	69fb      	ldr	r3, [r7, #28]
 800e09a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d00d      	beq.n	800e0be <HAL_UART_IRQHandler+0x496>
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d008      	beq.n	800e0be <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e0b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f001 fbf8 	bl	800f8ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e0bc:	e06b      	b.n	800e196 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e0be:	69fb      	ldr	r3, [r7, #28]
 800e0c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d012      	beq.n	800e0ee <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d104      	bne.n	800e0dc <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d008      	beq.n	800e0ee <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d057      	beq.n	800e194 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	4798      	blx	r3
    }
    return;
 800e0ec:	e052      	b.n	800e194 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d02b      	beq.n	800e150 <HAL_UART_IRQHandler+0x528>
 800e0f8:	69bb      	ldr	r3, [r7, #24]
 800e0fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d026      	beq.n	800e150 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f001 f8dc 	bl	800f2c0 <UART_EndTransmit_IT>
    return;
 800e108:	e045      	b.n	800e196 <HAL_UART_IRQHandler+0x56e>
 800e10a:	bf00      	nop
 800e10c:	40020010 	.word	0x40020010
 800e110:	40020028 	.word	0x40020028
 800e114:	40020040 	.word	0x40020040
 800e118:	40020058 	.word	0x40020058
 800e11c:	40020070 	.word	0x40020070
 800e120:	40020088 	.word	0x40020088
 800e124:	400200a0 	.word	0x400200a0
 800e128:	400200b8 	.word	0x400200b8
 800e12c:	40020410 	.word	0x40020410
 800e130:	40020428 	.word	0x40020428
 800e134:	40020440 	.word	0x40020440
 800e138:	40020458 	.word	0x40020458
 800e13c:	40020470 	.word	0x40020470
 800e140:	40020488 	.word	0x40020488
 800e144:	400204a0 	.word	0x400204a0
 800e148:	400204b8 	.word	0x400204b8
 800e14c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e156:	2b00      	cmp	r3, #0
 800e158:	d008      	beq.n	800e16c <HAL_UART_IRQHandler+0x544>
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e160:	2b00      	cmp	r3, #0
 800e162:	d003      	beq.n	800e16c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f001 fbb5 	bl	800f8d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e16a:	e014      	b.n	800e196 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e16c:	69fb      	ldr	r3, [r7, #28]
 800e16e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e172:	2b00      	cmp	r3, #0
 800e174:	d00f      	beq.n	800e196 <HAL_UART_IRQHandler+0x56e>
 800e176:	69bb      	ldr	r3, [r7, #24]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	da0c      	bge.n	800e196 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f001 fb9f 	bl	800f8c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e182:	e008      	b.n	800e196 <HAL_UART_IRQHandler+0x56e>
      return;
 800e184:	bf00      	nop
 800e186:	e006      	b.n	800e196 <HAL_UART_IRQHandler+0x56e>
    return;
 800e188:	bf00      	nop
 800e18a:	e004      	b.n	800e196 <HAL_UART_IRQHandler+0x56e>
      return;
 800e18c:	bf00      	nop
 800e18e:	e002      	b.n	800e196 <HAL_UART_IRQHandler+0x56e>
      return;
 800e190:	bf00      	nop
 800e192:	e000      	b.n	800e196 <HAL_UART_IRQHandler+0x56e>
    return;
 800e194:	bf00      	nop
  }
}
 800e196:	3720      	adds	r7, #32
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b083      	sub	sp, #12
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e1a4:	bf00      	nop
 800e1a6:	370c      	adds	r7, #12
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr

0800e1b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b083      	sub	sp, #12
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e1b8:	bf00      	nop
 800e1ba:	370c      	adds	r7, #12
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr

0800e1c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e1cc:	bf00      	nop
 800e1ce:	370c      	adds	r7, #12
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b083      	sub	sp, #12
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e1e4:	bf00      	nop
 800e1e6:	370c      	adds	r7, #12
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ee:	4770      	bx	lr

0800e1f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e1f0:	b5b0      	push	{r4, r5, r7, lr}
 800e1f2:	b08e      	sub	sp, #56	; 0x38
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	689a      	ldr	r2, [r3, #8]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	691b      	ldr	r3, [r3, #16]
 800e206:	431a      	orrs	r2, r3
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	695b      	ldr	r3, [r3, #20]
 800e20c:	431a      	orrs	r2, r3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	69db      	ldr	r3, [r3, #28]
 800e212:	4313      	orrs	r3, r2
 800e214:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	4bbf      	ldr	r3, [pc, #764]	; (800e51c <UART_SetConfig+0x32c>)
 800e21e:	4013      	ands	r3, r2
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	6812      	ldr	r2, [r2, #0]
 800e224:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e226:	430b      	orrs	r3, r1
 800e228:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	68da      	ldr	r2, [r3, #12]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	430a      	orrs	r2, r1
 800e23e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	699b      	ldr	r3, [r3, #24]
 800e244:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4ab5      	ldr	r2, [pc, #724]	; (800e520 <UART_SetConfig+0x330>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d004      	beq.n	800e25a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6a1b      	ldr	r3, [r3, #32]
 800e254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e256:	4313      	orrs	r3, r2
 800e258:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	689a      	ldr	r2, [r3, #8]
 800e260:	4bb0      	ldr	r3, [pc, #704]	; (800e524 <UART_SetConfig+0x334>)
 800e262:	4013      	ands	r3, r2
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	6812      	ldr	r2, [r2, #0]
 800e268:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e26a:	430b      	orrs	r3, r1
 800e26c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e274:	f023 010f 	bic.w	r1, r3, #15
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	430a      	orrs	r2, r1
 800e282:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4aa7      	ldr	r2, [pc, #668]	; (800e528 <UART_SetConfig+0x338>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d176      	bne.n	800e37c <UART_SetConfig+0x18c>
 800e28e:	4ba7      	ldr	r3, [pc, #668]	; (800e52c <UART_SetConfig+0x33c>)
 800e290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e292:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e296:	2b28      	cmp	r3, #40	; 0x28
 800e298:	d86c      	bhi.n	800e374 <UART_SetConfig+0x184>
 800e29a:	a201      	add	r2, pc, #4	; (adr r2, 800e2a0 <UART_SetConfig+0xb0>)
 800e29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a0:	0800e345 	.word	0x0800e345
 800e2a4:	0800e375 	.word	0x0800e375
 800e2a8:	0800e375 	.word	0x0800e375
 800e2ac:	0800e375 	.word	0x0800e375
 800e2b0:	0800e375 	.word	0x0800e375
 800e2b4:	0800e375 	.word	0x0800e375
 800e2b8:	0800e375 	.word	0x0800e375
 800e2bc:	0800e375 	.word	0x0800e375
 800e2c0:	0800e34d 	.word	0x0800e34d
 800e2c4:	0800e375 	.word	0x0800e375
 800e2c8:	0800e375 	.word	0x0800e375
 800e2cc:	0800e375 	.word	0x0800e375
 800e2d0:	0800e375 	.word	0x0800e375
 800e2d4:	0800e375 	.word	0x0800e375
 800e2d8:	0800e375 	.word	0x0800e375
 800e2dc:	0800e375 	.word	0x0800e375
 800e2e0:	0800e355 	.word	0x0800e355
 800e2e4:	0800e375 	.word	0x0800e375
 800e2e8:	0800e375 	.word	0x0800e375
 800e2ec:	0800e375 	.word	0x0800e375
 800e2f0:	0800e375 	.word	0x0800e375
 800e2f4:	0800e375 	.word	0x0800e375
 800e2f8:	0800e375 	.word	0x0800e375
 800e2fc:	0800e375 	.word	0x0800e375
 800e300:	0800e35d 	.word	0x0800e35d
 800e304:	0800e375 	.word	0x0800e375
 800e308:	0800e375 	.word	0x0800e375
 800e30c:	0800e375 	.word	0x0800e375
 800e310:	0800e375 	.word	0x0800e375
 800e314:	0800e375 	.word	0x0800e375
 800e318:	0800e375 	.word	0x0800e375
 800e31c:	0800e375 	.word	0x0800e375
 800e320:	0800e365 	.word	0x0800e365
 800e324:	0800e375 	.word	0x0800e375
 800e328:	0800e375 	.word	0x0800e375
 800e32c:	0800e375 	.word	0x0800e375
 800e330:	0800e375 	.word	0x0800e375
 800e334:	0800e375 	.word	0x0800e375
 800e338:	0800e375 	.word	0x0800e375
 800e33c:	0800e375 	.word	0x0800e375
 800e340:	0800e36d 	.word	0x0800e36d
 800e344:	2301      	movs	r3, #1
 800e346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e34a:	e222      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e34c:	2304      	movs	r3, #4
 800e34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e352:	e21e      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e354:	2308      	movs	r3, #8
 800e356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e35a:	e21a      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e35c:	2310      	movs	r3, #16
 800e35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e362:	e216      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e364:	2320      	movs	r3, #32
 800e366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e36a:	e212      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e36c:	2340      	movs	r3, #64	; 0x40
 800e36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e372:	e20e      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e374:	2380      	movs	r3, #128	; 0x80
 800e376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e37a:	e20a      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4a6b      	ldr	r2, [pc, #428]	; (800e530 <UART_SetConfig+0x340>)
 800e382:	4293      	cmp	r3, r2
 800e384:	d130      	bne.n	800e3e8 <UART_SetConfig+0x1f8>
 800e386:	4b69      	ldr	r3, [pc, #420]	; (800e52c <UART_SetConfig+0x33c>)
 800e388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e38a:	f003 0307 	and.w	r3, r3, #7
 800e38e:	2b05      	cmp	r3, #5
 800e390:	d826      	bhi.n	800e3e0 <UART_SetConfig+0x1f0>
 800e392:	a201      	add	r2, pc, #4	; (adr r2, 800e398 <UART_SetConfig+0x1a8>)
 800e394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e398:	0800e3b1 	.word	0x0800e3b1
 800e39c:	0800e3b9 	.word	0x0800e3b9
 800e3a0:	0800e3c1 	.word	0x0800e3c1
 800e3a4:	0800e3c9 	.word	0x0800e3c9
 800e3a8:	0800e3d1 	.word	0x0800e3d1
 800e3ac:	0800e3d9 	.word	0x0800e3d9
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3b6:	e1ec      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e3b8:	2304      	movs	r3, #4
 800e3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3be:	e1e8      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e3c0:	2308      	movs	r3, #8
 800e3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3c6:	e1e4      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e3c8:	2310      	movs	r3, #16
 800e3ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3ce:	e1e0      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e3d0:	2320      	movs	r3, #32
 800e3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3d6:	e1dc      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e3d8:	2340      	movs	r3, #64	; 0x40
 800e3da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3de:	e1d8      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e3e0:	2380      	movs	r3, #128	; 0x80
 800e3e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3e6:	e1d4      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4a51      	ldr	r2, [pc, #324]	; (800e534 <UART_SetConfig+0x344>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d130      	bne.n	800e454 <UART_SetConfig+0x264>
 800e3f2:	4b4e      	ldr	r3, [pc, #312]	; (800e52c <UART_SetConfig+0x33c>)
 800e3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3f6:	f003 0307 	and.w	r3, r3, #7
 800e3fa:	2b05      	cmp	r3, #5
 800e3fc:	d826      	bhi.n	800e44c <UART_SetConfig+0x25c>
 800e3fe:	a201      	add	r2, pc, #4	; (adr r2, 800e404 <UART_SetConfig+0x214>)
 800e400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e404:	0800e41d 	.word	0x0800e41d
 800e408:	0800e425 	.word	0x0800e425
 800e40c:	0800e42d 	.word	0x0800e42d
 800e410:	0800e435 	.word	0x0800e435
 800e414:	0800e43d 	.word	0x0800e43d
 800e418:	0800e445 	.word	0x0800e445
 800e41c:	2300      	movs	r3, #0
 800e41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e422:	e1b6      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e424:	2304      	movs	r3, #4
 800e426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e42a:	e1b2      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e42c:	2308      	movs	r3, #8
 800e42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e432:	e1ae      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e434:	2310      	movs	r3, #16
 800e436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e43a:	e1aa      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e43c:	2320      	movs	r3, #32
 800e43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e442:	e1a6      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e444:	2340      	movs	r3, #64	; 0x40
 800e446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e44a:	e1a2      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e44c:	2380      	movs	r3, #128	; 0x80
 800e44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e452:	e19e      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4a37      	ldr	r2, [pc, #220]	; (800e538 <UART_SetConfig+0x348>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d130      	bne.n	800e4c0 <UART_SetConfig+0x2d0>
 800e45e:	4b33      	ldr	r3, [pc, #204]	; (800e52c <UART_SetConfig+0x33c>)
 800e460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e462:	f003 0307 	and.w	r3, r3, #7
 800e466:	2b05      	cmp	r3, #5
 800e468:	d826      	bhi.n	800e4b8 <UART_SetConfig+0x2c8>
 800e46a:	a201      	add	r2, pc, #4	; (adr r2, 800e470 <UART_SetConfig+0x280>)
 800e46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e470:	0800e489 	.word	0x0800e489
 800e474:	0800e491 	.word	0x0800e491
 800e478:	0800e499 	.word	0x0800e499
 800e47c:	0800e4a1 	.word	0x0800e4a1
 800e480:	0800e4a9 	.word	0x0800e4a9
 800e484:	0800e4b1 	.word	0x0800e4b1
 800e488:	2300      	movs	r3, #0
 800e48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e48e:	e180      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e490:	2304      	movs	r3, #4
 800e492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e496:	e17c      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e498:	2308      	movs	r3, #8
 800e49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e49e:	e178      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e4a0:	2310      	movs	r3, #16
 800e4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4a6:	e174      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e4a8:	2320      	movs	r3, #32
 800e4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4ae:	e170      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e4b0:	2340      	movs	r3, #64	; 0x40
 800e4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4b6:	e16c      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e4b8:	2380      	movs	r3, #128	; 0x80
 800e4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4be:	e168      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	4a1d      	ldr	r2, [pc, #116]	; (800e53c <UART_SetConfig+0x34c>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d142      	bne.n	800e550 <UART_SetConfig+0x360>
 800e4ca:	4b18      	ldr	r3, [pc, #96]	; (800e52c <UART_SetConfig+0x33c>)
 800e4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ce:	f003 0307 	and.w	r3, r3, #7
 800e4d2:	2b05      	cmp	r3, #5
 800e4d4:	d838      	bhi.n	800e548 <UART_SetConfig+0x358>
 800e4d6:	a201      	add	r2, pc, #4	; (adr r2, 800e4dc <UART_SetConfig+0x2ec>)
 800e4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4dc:	0800e4f5 	.word	0x0800e4f5
 800e4e0:	0800e4fd 	.word	0x0800e4fd
 800e4e4:	0800e505 	.word	0x0800e505
 800e4e8:	0800e50d 	.word	0x0800e50d
 800e4ec:	0800e515 	.word	0x0800e515
 800e4f0:	0800e541 	.word	0x0800e541
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4fa:	e14a      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e4fc:	2304      	movs	r3, #4
 800e4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e502:	e146      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e504:	2308      	movs	r3, #8
 800e506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e50a:	e142      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e50c:	2310      	movs	r3, #16
 800e50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e512:	e13e      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e514:	2320      	movs	r3, #32
 800e516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e51a:	e13a      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e51c:	cfff69f3 	.word	0xcfff69f3
 800e520:	58000c00 	.word	0x58000c00
 800e524:	11fff4ff 	.word	0x11fff4ff
 800e528:	40011000 	.word	0x40011000
 800e52c:	58024400 	.word	0x58024400
 800e530:	40004400 	.word	0x40004400
 800e534:	40004800 	.word	0x40004800
 800e538:	40004c00 	.word	0x40004c00
 800e53c:	40005000 	.word	0x40005000
 800e540:	2340      	movs	r3, #64	; 0x40
 800e542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e546:	e124      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e548:	2380      	movs	r3, #128	; 0x80
 800e54a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e54e:	e120      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4acc      	ldr	r2, [pc, #816]	; (800e888 <UART_SetConfig+0x698>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d176      	bne.n	800e648 <UART_SetConfig+0x458>
 800e55a:	4bcc      	ldr	r3, [pc, #816]	; (800e88c <UART_SetConfig+0x69c>)
 800e55c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e55e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e562:	2b28      	cmp	r3, #40	; 0x28
 800e564:	d86c      	bhi.n	800e640 <UART_SetConfig+0x450>
 800e566:	a201      	add	r2, pc, #4	; (adr r2, 800e56c <UART_SetConfig+0x37c>)
 800e568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e56c:	0800e611 	.word	0x0800e611
 800e570:	0800e641 	.word	0x0800e641
 800e574:	0800e641 	.word	0x0800e641
 800e578:	0800e641 	.word	0x0800e641
 800e57c:	0800e641 	.word	0x0800e641
 800e580:	0800e641 	.word	0x0800e641
 800e584:	0800e641 	.word	0x0800e641
 800e588:	0800e641 	.word	0x0800e641
 800e58c:	0800e619 	.word	0x0800e619
 800e590:	0800e641 	.word	0x0800e641
 800e594:	0800e641 	.word	0x0800e641
 800e598:	0800e641 	.word	0x0800e641
 800e59c:	0800e641 	.word	0x0800e641
 800e5a0:	0800e641 	.word	0x0800e641
 800e5a4:	0800e641 	.word	0x0800e641
 800e5a8:	0800e641 	.word	0x0800e641
 800e5ac:	0800e621 	.word	0x0800e621
 800e5b0:	0800e641 	.word	0x0800e641
 800e5b4:	0800e641 	.word	0x0800e641
 800e5b8:	0800e641 	.word	0x0800e641
 800e5bc:	0800e641 	.word	0x0800e641
 800e5c0:	0800e641 	.word	0x0800e641
 800e5c4:	0800e641 	.word	0x0800e641
 800e5c8:	0800e641 	.word	0x0800e641
 800e5cc:	0800e629 	.word	0x0800e629
 800e5d0:	0800e641 	.word	0x0800e641
 800e5d4:	0800e641 	.word	0x0800e641
 800e5d8:	0800e641 	.word	0x0800e641
 800e5dc:	0800e641 	.word	0x0800e641
 800e5e0:	0800e641 	.word	0x0800e641
 800e5e4:	0800e641 	.word	0x0800e641
 800e5e8:	0800e641 	.word	0x0800e641
 800e5ec:	0800e631 	.word	0x0800e631
 800e5f0:	0800e641 	.word	0x0800e641
 800e5f4:	0800e641 	.word	0x0800e641
 800e5f8:	0800e641 	.word	0x0800e641
 800e5fc:	0800e641 	.word	0x0800e641
 800e600:	0800e641 	.word	0x0800e641
 800e604:	0800e641 	.word	0x0800e641
 800e608:	0800e641 	.word	0x0800e641
 800e60c:	0800e639 	.word	0x0800e639
 800e610:	2301      	movs	r3, #1
 800e612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e616:	e0bc      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e618:	2304      	movs	r3, #4
 800e61a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e61e:	e0b8      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e620:	2308      	movs	r3, #8
 800e622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e626:	e0b4      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e628:	2310      	movs	r3, #16
 800e62a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e62e:	e0b0      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e630:	2320      	movs	r3, #32
 800e632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e636:	e0ac      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e638:	2340      	movs	r3, #64	; 0x40
 800e63a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e63e:	e0a8      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e640:	2380      	movs	r3, #128	; 0x80
 800e642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e646:	e0a4      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4a90      	ldr	r2, [pc, #576]	; (800e890 <UART_SetConfig+0x6a0>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d130      	bne.n	800e6b4 <UART_SetConfig+0x4c4>
 800e652:	4b8e      	ldr	r3, [pc, #568]	; (800e88c <UART_SetConfig+0x69c>)
 800e654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e656:	f003 0307 	and.w	r3, r3, #7
 800e65a:	2b05      	cmp	r3, #5
 800e65c:	d826      	bhi.n	800e6ac <UART_SetConfig+0x4bc>
 800e65e:	a201      	add	r2, pc, #4	; (adr r2, 800e664 <UART_SetConfig+0x474>)
 800e660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e664:	0800e67d 	.word	0x0800e67d
 800e668:	0800e685 	.word	0x0800e685
 800e66c:	0800e68d 	.word	0x0800e68d
 800e670:	0800e695 	.word	0x0800e695
 800e674:	0800e69d 	.word	0x0800e69d
 800e678:	0800e6a5 	.word	0x0800e6a5
 800e67c:	2300      	movs	r3, #0
 800e67e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e682:	e086      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e684:	2304      	movs	r3, #4
 800e686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e68a:	e082      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e68c:	2308      	movs	r3, #8
 800e68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e692:	e07e      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e694:	2310      	movs	r3, #16
 800e696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e69a:	e07a      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e69c:	2320      	movs	r3, #32
 800e69e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6a2:	e076      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e6a4:	2340      	movs	r3, #64	; 0x40
 800e6a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6aa:	e072      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e6ac:	2380      	movs	r3, #128	; 0x80
 800e6ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6b2:	e06e      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4a76      	ldr	r2, [pc, #472]	; (800e894 <UART_SetConfig+0x6a4>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d130      	bne.n	800e720 <UART_SetConfig+0x530>
 800e6be:	4b73      	ldr	r3, [pc, #460]	; (800e88c <UART_SetConfig+0x69c>)
 800e6c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6c2:	f003 0307 	and.w	r3, r3, #7
 800e6c6:	2b05      	cmp	r3, #5
 800e6c8:	d826      	bhi.n	800e718 <UART_SetConfig+0x528>
 800e6ca:	a201      	add	r2, pc, #4	; (adr r2, 800e6d0 <UART_SetConfig+0x4e0>)
 800e6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6d0:	0800e6e9 	.word	0x0800e6e9
 800e6d4:	0800e6f1 	.word	0x0800e6f1
 800e6d8:	0800e6f9 	.word	0x0800e6f9
 800e6dc:	0800e701 	.word	0x0800e701
 800e6e0:	0800e709 	.word	0x0800e709
 800e6e4:	0800e711 	.word	0x0800e711
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6ee:	e050      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e6f0:	2304      	movs	r3, #4
 800e6f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6f6:	e04c      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e6f8:	2308      	movs	r3, #8
 800e6fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6fe:	e048      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e700:	2310      	movs	r3, #16
 800e702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e706:	e044      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e708:	2320      	movs	r3, #32
 800e70a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e70e:	e040      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e710:	2340      	movs	r3, #64	; 0x40
 800e712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e716:	e03c      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e718:	2380      	movs	r3, #128	; 0x80
 800e71a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e71e:	e038      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4a5c      	ldr	r2, [pc, #368]	; (800e898 <UART_SetConfig+0x6a8>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d130      	bne.n	800e78c <UART_SetConfig+0x59c>
 800e72a:	4b58      	ldr	r3, [pc, #352]	; (800e88c <UART_SetConfig+0x69c>)
 800e72c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e72e:	f003 0307 	and.w	r3, r3, #7
 800e732:	2b05      	cmp	r3, #5
 800e734:	d826      	bhi.n	800e784 <UART_SetConfig+0x594>
 800e736:	a201      	add	r2, pc, #4	; (adr r2, 800e73c <UART_SetConfig+0x54c>)
 800e738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e73c:	0800e755 	.word	0x0800e755
 800e740:	0800e75d 	.word	0x0800e75d
 800e744:	0800e765 	.word	0x0800e765
 800e748:	0800e76d 	.word	0x0800e76d
 800e74c:	0800e775 	.word	0x0800e775
 800e750:	0800e77d 	.word	0x0800e77d
 800e754:	2302      	movs	r3, #2
 800e756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e75a:	e01a      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e75c:	2304      	movs	r3, #4
 800e75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e762:	e016      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e764:	2308      	movs	r3, #8
 800e766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e76a:	e012      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e76c:	2310      	movs	r3, #16
 800e76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e772:	e00e      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e774:	2320      	movs	r3, #32
 800e776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e77a:	e00a      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e77c:	2340      	movs	r3, #64	; 0x40
 800e77e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e782:	e006      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e784:	2380      	movs	r3, #128	; 0x80
 800e786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e78a:	e002      	b.n	800e792 <UART_SetConfig+0x5a2>
 800e78c:	2380      	movs	r3, #128	; 0x80
 800e78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4a40      	ldr	r2, [pc, #256]	; (800e898 <UART_SetConfig+0x6a8>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	f040 80ef 	bne.w	800e97c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e79e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e7a2:	2b20      	cmp	r3, #32
 800e7a4:	dc46      	bgt.n	800e834 <UART_SetConfig+0x644>
 800e7a6:	2b02      	cmp	r3, #2
 800e7a8:	f2c0 8081 	blt.w	800e8ae <UART_SetConfig+0x6be>
 800e7ac:	3b02      	subs	r3, #2
 800e7ae:	2b1e      	cmp	r3, #30
 800e7b0:	d87d      	bhi.n	800e8ae <UART_SetConfig+0x6be>
 800e7b2:	a201      	add	r2, pc, #4	; (adr r2, 800e7b8 <UART_SetConfig+0x5c8>)
 800e7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b8:	0800e83b 	.word	0x0800e83b
 800e7bc:	0800e8af 	.word	0x0800e8af
 800e7c0:	0800e843 	.word	0x0800e843
 800e7c4:	0800e8af 	.word	0x0800e8af
 800e7c8:	0800e8af 	.word	0x0800e8af
 800e7cc:	0800e8af 	.word	0x0800e8af
 800e7d0:	0800e853 	.word	0x0800e853
 800e7d4:	0800e8af 	.word	0x0800e8af
 800e7d8:	0800e8af 	.word	0x0800e8af
 800e7dc:	0800e8af 	.word	0x0800e8af
 800e7e0:	0800e8af 	.word	0x0800e8af
 800e7e4:	0800e8af 	.word	0x0800e8af
 800e7e8:	0800e8af 	.word	0x0800e8af
 800e7ec:	0800e8af 	.word	0x0800e8af
 800e7f0:	0800e863 	.word	0x0800e863
 800e7f4:	0800e8af 	.word	0x0800e8af
 800e7f8:	0800e8af 	.word	0x0800e8af
 800e7fc:	0800e8af 	.word	0x0800e8af
 800e800:	0800e8af 	.word	0x0800e8af
 800e804:	0800e8af 	.word	0x0800e8af
 800e808:	0800e8af 	.word	0x0800e8af
 800e80c:	0800e8af 	.word	0x0800e8af
 800e810:	0800e8af 	.word	0x0800e8af
 800e814:	0800e8af 	.word	0x0800e8af
 800e818:	0800e8af 	.word	0x0800e8af
 800e81c:	0800e8af 	.word	0x0800e8af
 800e820:	0800e8af 	.word	0x0800e8af
 800e824:	0800e8af 	.word	0x0800e8af
 800e828:	0800e8af 	.word	0x0800e8af
 800e82c:	0800e8af 	.word	0x0800e8af
 800e830:	0800e8a1 	.word	0x0800e8a1
 800e834:	2b40      	cmp	r3, #64	; 0x40
 800e836:	d036      	beq.n	800e8a6 <UART_SetConfig+0x6b6>
 800e838:	e039      	b.n	800e8ae <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e83a:	f7fd f8b3 	bl	800b9a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800e83e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e840:	e03b      	b.n	800e8ba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e842:	f107 0314 	add.w	r3, r7, #20
 800e846:	4618      	mov	r0, r3
 800e848:	f7fd f8c2 	bl	800b9d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e850:	e033      	b.n	800e8ba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e852:	f107 0308 	add.w	r3, r7, #8
 800e856:	4618      	mov	r0, r3
 800e858:	f7fd fa0e 	bl	800bc78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e860:	e02b      	b.n	800e8ba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e862:	4b0a      	ldr	r3, [pc, #40]	; (800e88c <UART_SetConfig+0x69c>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f003 0320 	and.w	r3, r3, #32
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d009      	beq.n	800e882 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e86e:	4b07      	ldr	r3, [pc, #28]	; (800e88c <UART_SetConfig+0x69c>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	08db      	lsrs	r3, r3, #3
 800e874:	f003 0303 	and.w	r3, r3, #3
 800e878:	4a08      	ldr	r2, [pc, #32]	; (800e89c <UART_SetConfig+0x6ac>)
 800e87a:	fa22 f303 	lsr.w	r3, r2, r3
 800e87e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e880:	e01b      	b.n	800e8ba <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800e882:	4b06      	ldr	r3, [pc, #24]	; (800e89c <UART_SetConfig+0x6ac>)
 800e884:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e886:	e018      	b.n	800e8ba <UART_SetConfig+0x6ca>
 800e888:	40011400 	.word	0x40011400
 800e88c:	58024400 	.word	0x58024400
 800e890:	40007800 	.word	0x40007800
 800e894:	40007c00 	.word	0x40007c00
 800e898:	58000c00 	.word	0x58000c00
 800e89c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e8a0:	4bc4      	ldr	r3, [pc, #784]	; (800ebb4 <UART_SetConfig+0x9c4>)
 800e8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e8a4:	e009      	b.n	800e8ba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e8ac:	e005      	b.n	800e8ba <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e8b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f000 81da 	beq.w	800ec76 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c6:	4abc      	ldr	r2, [pc, #752]	; (800ebb8 <UART_SetConfig+0x9c8>)
 800e8c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8d4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	685a      	ldr	r2, [r3, #4]
 800e8da:	4613      	mov	r3, r2
 800e8dc:	005b      	lsls	r3, r3, #1
 800e8de:	4413      	add	r3, r2
 800e8e0:	6a3a      	ldr	r2, [r7, #32]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d305      	bcc.n	800e8f2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e8ec:	6a3a      	ldr	r2, [r7, #32]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d903      	bls.n	800e8fa <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e8f8:	e1bd      	b.n	800ec76 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f04f 0100 	mov.w	r1, #0
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e906:	4aac      	ldr	r2, [pc, #688]	; (800ebb8 <UART_SetConfig+0x9c8>)
 800e908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e90c:	b29a      	uxth	r2, r3
 800e90e:	f04f 0300 	mov.w	r3, #0
 800e912:	f7f1 fd3d 	bl	8000390 <__aeabi_uldivmod>
 800e916:	4602      	mov	r2, r0
 800e918:	460b      	mov	r3, r1
 800e91a:	4610      	mov	r0, r2
 800e91c:	4619      	mov	r1, r3
 800e91e:	f04f 0200 	mov.w	r2, #0
 800e922:	f04f 0300 	mov.w	r3, #0
 800e926:	020b      	lsls	r3, r1, #8
 800e928:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e92c:	0202      	lsls	r2, r0, #8
 800e92e:	6879      	ldr	r1, [r7, #4]
 800e930:	6849      	ldr	r1, [r1, #4]
 800e932:	0849      	lsrs	r1, r1, #1
 800e934:	4608      	mov	r0, r1
 800e936:	f04f 0100 	mov.w	r1, #0
 800e93a:	1814      	adds	r4, r2, r0
 800e93c:	eb43 0501 	adc.w	r5, r3, r1
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	461a      	mov	r2, r3
 800e946:	f04f 0300 	mov.w	r3, #0
 800e94a:	4620      	mov	r0, r4
 800e94c:	4629      	mov	r1, r5
 800e94e:	f7f1 fd1f 	bl	8000390 <__aeabi_uldivmod>
 800e952:	4602      	mov	r2, r0
 800e954:	460b      	mov	r3, r1
 800e956:	4613      	mov	r3, r2
 800e958:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e960:	d308      	bcc.n	800e974 <UART_SetConfig+0x784>
 800e962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e968:	d204      	bcs.n	800e974 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e970:	60da      	str	r2, [r3, #12]
 800e972:	e180      	b.n	800ec76 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800e974:	2301      	movs	r3, #1
 800e976:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e97a:	e17c      	b.n	800ec76 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	69db      	ldr	r3, [r3, #28]
 800e980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e984:	f040 80bf 	bne.w	800eb06 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800e988:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e98c:	2b20      	cmp	r3, #32
 800e98e:	dc49      	bgt.n	800ea24 <UART_SetConfig+0x834>
 800e990:	2b00      	cmp	r3, #0
 800e992:	db7c      	blt.n	800ea8e <UART_SetConfig+0x89e>
 800e994:	2b20      	cmp	r3, #32
 800e996:	d87a      	bhi.n	800ea8e <UART_SetConfig+0x89e>
 800e998:	a201      	add	r2, pc, #4	; (adr r2, 800e9a0 <UART_SetConfig+0x7b0>)
 800e99a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e99e:	bf00      	nop
 800e9a0:	0800ea2b 	.word	0x0800ea2b
 800e9a4:	0800ea33 	.word	0x0800ea33
 800e9a8:	0800ea8f 	.word	0x0800ea8f
 800e9ac:	0800ea8f 	.word	0x0800ea8f
 800e9b0:	0800ea3b 	.word	0x0800ea3b
 800e9b4:	0800ea8f 	.word	0x0800ea8f
 800e9b8:	0800ea8f 	.word	0x0800ea8f
 800e9bc:	0800ea8f 	.word	0x0800ea8f
 800e9c0:	0800ea4b 	.word	0x0800ea4b
 800e9c4:	0800ea8f 	.word	0x0800ea8f
 800e9c8:	0800ea8f 	.word	0x0800ea8f
 800e9cc:	0800ea8f 	.word	0x0800ea8f
 800e9d0:	0800ea8f 	.word	0x0800ea8f
 800e9d4:	0800ea8f 	.word	0x0800ea8f
 800e9d8:	0800ea8f 	.word	0x0800ea8f
 800e9dc:	0800ea8f 	.word	0x0800ea8f
 800e9e0:	0800ea5b 	.word	0x0800ea5b
 800e9e4:	0800ea8f 	.word	0x0800ea8f
 800e9e8:	0800ea8f 	.word	0x0800ea8f
 800e9ec:	0800ea8f 	.word	0x0800ea8f
 800e9f0:	0800ea8f 	.word	0x0800ea8f
 800e9f4:	0800ea8f 	.word	0x0800ea8f
 800e9f8:	0800ea8f 	.word	0x0800ea8f
 800e9fc:	0800ea8f 	.word	0x0800ea8f
 800ea00:	0800ea8f 	.word	0x0800ea8f
 800ea04:	0800ea8f 	.word	0x0800ea8f
 800ea08:	0800ea8f 	.word	0x0800ea8f
 800ea0c:	0800ea8f 	.word	0x0800ea8f
 800ea10:	0800ea8f 	.word	0x0800ea8f
 800ea14:	0800ea8f 	.word	0x0800ea8f
 800ea18:	0800ea8f 	.word	0x0800ea8f
 800ea1c:	0800ea8f 	.word	0x0800ea8f
 800ea20:	0800ea81 	.word	0x0800ea81
 800ea24:	2b40      	cmp	r3, #64	; 0x40
 800ea26:	d02e      	beq.n	800ea86 <UART_SetConfig+0x896>
 800ea28:	e031      	b.n	800ea8e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea2a:	f7fc f84f 	bl	800aacc <HAL_RCC_GetPCLK1Freq>
 800ea2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ea30:	e033      	b.n	800ea9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea32:	f7fc f861 	bl	800aaf8 <HAL_RCC_GetPCLK2Freq>
 800ea36:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ea38:	e02f      	b.n	800ea9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea3a:	f107 0314 	add.w	r3, r7, #20
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7fc ffc6 	bl	800b9d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea48:	e027      	b.n	800ea9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea4a:	f107 0308 	add.w	r3, r7, #8
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7fd f912 	bl	800bc78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea58:	e01f      	b.n	800ea9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea5a:	4b58      	ldr	r3, [pc, #352]	; (800ebbc <UART_SetConfig+0x9cc>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f003 0320 	and.w	r3, r3, #32
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d009      	beq.n	800ea7a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea66:	4b55      	ldr	r3, [pc, #340]	; (800ebbc <UART_SetConfig+0x9cc>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	08db      	lsrs	r3, r3, #3
 800ea6c:	f003 0303 	and.w	r3, r3, #3
 800ea70:	4a53      	ldr	r2, [pc, #332]	; (800ebc0 <UART_SetConfig+0x9d0>)
 800ea72:	fa22 f303 	lsr.w	r3, r2, r3
 800ea76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea78:	e00f      	b.n	800ea9a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800ea7a:	4b51      	ldr	r3, [pc, #324]	; (800ebc0 <UART_SetConfig+0x9d0>)
 800ea7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea7e:	e00c      	b.n	800ea9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ea80:	4b4c      	ldr	r3, [pc, #304]	; (800ebb4 <UART_SetConfig+0x9c4>)
 800ea82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea84:	e009      	b.n	800ea9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea8c:	e005      	b.n	800ea9a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ea92:	2301      	movs	r3, #1
 800ea94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ea98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ea9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	f000 80ea 	beq.w	800ec76 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaa6:	4a44      	ldr	r2, [pc, #272]	; (800ebb8 <UART_SetConfig+0x9c8>)
 800eaa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eaac:	461a      	mov	r2, r3
 800eaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab0:	fbb3 f3f2 	udiv	r3, r3, r2
 800eab4:	005a      	lsls	r2, r3, #1
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	685b      	ldr	r3, [r3, #4]
 800eaba:	085b      	lsrs	r3, r3, #1
 800eabc:	441a      	add	r2, r3
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	fbb2 f3f3 	udiv	r3, r2, r3
 800eac6:	b29b      	uxth	r3, r3
 800eac8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eacc:	2b0f      	cmp	r3, #15
 800eace:	d916      	bls.n	800eafe <UART_SetConfig+0x90e>
 800ead0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ead6:	d212      	bcs.n	800eafe <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ead8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eada:	b29b      	uxth	r3, r3
 800eadc:	f023 030f 	bic.w	r3, r3, #15
 800eae0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae4:	085b      	lsrs	r3, r3, #1
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	f003 0307 	and.w	r3, r3, #7
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eaf0:	4313      	orrs	r3, r2
 800eaf2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eafa:	60da      	str	r2, [r3, #12]
 800eafc:	e0bb      	b.n	800ec76 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800eafe:	2301      	movs	r3, #1
 800eb00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800eb04:	e0b7      	b.n	800ec76 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eb06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eb0a:	2b20      	cmp	r3, #32
 800eb0c:	dc4a      	bgt.n	800eba4 <UART_SetConfig+0x9b4>
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	f2c0 8086 	blt.w	800ec20 <UART_SetConfig+0xa30>
 800eb14:	2b20      	cmp	r3, #32
 800eb16:	f200 8083 	bhi.w	800ec20 <UART_SetConfig+0xa30>
 800eb1a:	a201      	add	r2, pc, #4	; (adr r2, 800eb20 <UART_SetConfig+0x930>)
 800eb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb20:	0800ebab 	.word	0x0800ebab
 800eb24:	0800ebc5 	.word	0x0800ebc5
 800eb28:	0800ec21 	.word	0x0800ec21
 800eb2c:	0800ec21 	.word	0x0800ec21
 800eb30:	0800ebcd 	.word	0x0800ebcd
 800eb34:	0800ec21 	.word	0x0800ec21
 800eb38:	0800ec21 	.word	0x0800ec21
 800eb3c:	0800ec21 	.word	0x0800ec21
 800eb40:	0800ebdd 	.word	0x0800ebdd
 800eb44:	0800ec21 	.word	0x0800ec21
 800eb48:	0800ec21 	.word	0x0800ec21
 800eb4c:	0800ec21 	.word	0x0800ec21
 800eb50:	0800ec21 	.word	0x0800ec21
 800eb54:	0800ec21 	.word	0x0800ec21
 800eb58:	0800ec21 	.word	0x0800ec21
 800eb5c:	0800ec21 	.word	0x0800ec21
 800eb60:	0800ebed 	.word	0x0800ebed
 800eb64:	0800ec21 	.word	0x0800ec21
 800eb68:	0800ec21 	.word	0x0800ec21
 800eb6c:	0800ec21 	.word	0x0800ec21
 800eb70:	0800ec21 	.word	0x0800ec21
 800eb74:	0800ec21 	.word	0x0800ec21
 800eb78:	0800ec21 	.word	0x0800ec21
 800eb7c:	0800ec21 	.word	0x0800ec21
 800eb80:	0800ec21 	.word	0x0800ec21
 800eb84:	0800ec21 	.word	0x0800ec21
 800eb88:	0800ec21 	.word	0x0800ec21
 800eb8c:	0800ec21 	.word	0x0800ec21
 800eb90:	0800ec21 	.word	0x0800ec21
 800eb94:	0800ec21 	.word	0x0800ec21
 800eb98:	0800ec21 	.word	0x0800ec21
 800eb9c:	0800ec21 	.word	0x0800ec21
 800eba0:	0800ec13 	.word	0x0800ec13
 800eba4:	2b40      	cmp	r3, #64	; 0x40
 800eba6:	d037      	beq.n	800ec18 <UART_SetConfig+0xa28>
 800eba8:	e03a      	b.n	800ec20 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ebaa:	f7fb ff8f 	bl	800aacc <HAL_RCC_GetPCLK1Freq>
 800ebae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ebb0:	e03c      	b.n	800ec2c <UART_SetConfig+0xa3c>
 800ebb2:	bf00      	nop
 800ebb4:	003d0900 	.word	0x003d0900
 800ebb8:	08012eb0 	.word	0x08012eb0
 800ebbc:	58024400 	.word	0x58024400
 800ebc0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ebc4:	f7fb ff98 	bl	800aaf8 <HAL_RCC_GetPCLK2Freq>
 800ebc8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ebca:	e02f      	b.n	800ec2c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebcc:	f107 0314 	add.w	r3, r7, #20
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7fc fefd 	bl	800b9d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ebd6:	69bb      	ldr	r3, [r7, #24]
 800ebd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ebda:	e027      	b.n	800ec2c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebdc:	f107 0308 	add.w	r3, r7, #8
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7fd f849 	bl	800bc78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ebea:	e01f      	b.n	800ec2c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebec:	4b2c      	ldr	r3, [pc, #176]	; (800eca0 <UART_SetConfig+0xab0>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f003 0320 	and.w	r3, r3, #32
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d009      	beq.n	800ec0c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ebf8:	4b29      	ldr	r3, [pc, #164]	; (800eca0 <UART_SetConfig+0xab0>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	08db      	lsrs	r3, r3, #3
 800ebfe:	f003 0303 	and.w	r3, r3, #3
 800ec02:	4a28      	ldr	r2, [pc, #160]	; (800eca4 <UART_SetConfig+0xab4>)
 800ec04:	fa22 f303 	lsr.w	r3, r2, r3
 800ec08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec0a:	e00f      	b.n	800ec2c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800ec0c:	4b25      	ldr	r3, [pc, #148]	; (800eca4 <UART_SetConfig+0xab4>)
 800ec0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec10:	e00c      	b.n	800ec2c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec12:	4b25      	ldr	r3, [pc, #148]	; (800eca8 <UART_SetConfig+0xab8>)
 800ec14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec16:	e009      	b.n	800ec2c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec1e:	e005      	b.n	800ec2c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800ec20:	2300      	movs	r3, #0
 800ec22:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ec24:	2301      	movs	r3, #1
 800ec26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ec2a:	bf00      	nop
    }

    if (pclk != 0U)
 800ec2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d021      	beq.n	800ec76 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec36:	4a1d      	ldr	r2, [pc, #116]	; (800ecac <UART_SetConfig+0xabc>)
 800ec38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec40:	fbb3 f2f2 	udiv	r2, r3, r2
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	085b      	lsrs	r3, r3, #1
 800ec4a:	441a      	add	r2, r3
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5a:	2b0f      	cmp	r3, #15
 800ec5c:	d908      	bls.n	800ec70 <UART_SetConfig+0xa80>
 800ec5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec64:	d204      	bcs.n	800ec70 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec6c:	60da      	str	r2, [r3, #12]
 800ec6e:	e002      	b.n	800ec76 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800ec70:	2301      	movs	r3, #1
 800ec72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2201      	movs	r2, #1
 800ec7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2201      	movs	r2, #1
 800ec82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ec92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3738      	adds	r7, #56	; 0x38
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bdb0      	pop	{r4, r5, r7, pc}
 800ec9e:	bf00      	nop
 800eca0:	58024400 	.word	0x58024400
 800eca4:	03d09000 	.word	0x03d09000
 800eca8:	003d0900 	.word	0x003d0900
 800ecac:	08012eb0 	.word	0x08012eb0

0800ecb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecbc:	f003 0301 	and.w	r3, r3, #1
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d00a      	beq.n	800ecda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	430a      	orrs	r2, r1
 800ecd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecde:	f003 0302 	and.w	r3, r3, #2
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d00a      	beq.n	800ecfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	430a      	orrs	r2, r1
 800ecfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed00:	f003 0304 	and.w	r3, r3, #4
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d00a      	beq.n	800ed1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	430a      	orrs	r2, r1
 800ed1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed22:	f003 0308 	and.w	r3, r3, #8
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d00a      	beq.n	800ed40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	430a      	orrs	r2, r1
 800ed3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed44:	f003 0310 	and.w	r3, r3, #16
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00a      	beq.n	800ed62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	689b      	ldr	r3, [r3, #8]
 800ed52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	430a      	orrs	r2, r1
 800ed60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed66:	f003 0320 	and.w	r3, r3, #32
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d00a      	beq.n	800ed84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	430a      	orrs	r2, r1
 800ed82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d01a      	beq.n	800edc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	430a      	orrs	r2, r1
 800eda4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800edae:	d10a      	bne.n	800edc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	685b      	ldr	r3, [r3, #4]
 800edb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	430a      	orrs	r2, r1
 800edc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d00a      	beq.n	800ede8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	685b      	ldr	r3, [r3, #4]
 800edd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	430a      	orrs	r2, r1
 800ede6:	605a      	str	r2, [r3, #4]
  }
}
 800ede8:	bf00      	nop
 800edea:	370c      	adds	r7, #12
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr

0800edf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b086      	sub	sp, #24
 800edf8:	af02      	add	r7, sp, #8
 800edfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2200      	movs	r2, #0
 800ee00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ee04:	f7f5 fae0 	bl	80043c8 <HAL_GetTick>
 800ee08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f003 0308 	and.w	r3, r3, #8
 800ee14:	2b08      	cmp	r3, #8
 800ee16:	d10e      	bne.n	800ee36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee1c:	9300      	str	r3, [sp, #0]
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2200      	movs	r2, #0
 800ee22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f000 f82f 	bl	800ee8a <UART_WaitOnFlagUntilTimeout>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d001      	beq.n	800ee36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee32:	2303      	movs	r3, #3
 800ee34:	e025      	b.n	800ee82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f003 0304 	and.w	r3, r3, #4
 800ee40:	2b04      	cmp	r3, #4
 800ee42:	d10e      	bne.n	800ee62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee48:	9300      	str	r3, [sp, #0]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 f819 	bl	800ee8a <UART_WaitOnFlagUntilTimeout>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d001      	beq.n	800ee62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee5e:	2303      	movs	r3, #3
 800ee60:	e00f      	b.n	800ee82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2220      	movs	r2, #32
 800ee66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2220      	movs	r2, #32
 800ee6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ee80:	2300      	movs	r3, #0
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3710      	adds	r7, #16
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}

0800ee8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ee8a:	b580      	push	{r7, lr}
 800ee8c:	b084      	sub	sp, #16
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	60f8      	str	r0, [r7, #12]
 800ee92:	60b9      	str	r1, [r7, #8]
 800ee94:	603b      	str	r3, [r7, #0]
 800ee96:	4613      	mov	r3, r2
 800ee98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee9a:	e062      	b.n	800ef62 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea2:	d05e      	beq.n	800ef62 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eea4:	f7f5 fa90 	bl	80043c8 <HAL_GetTick>
 800eea8:	4602      	mov	r2, r0
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	1ad3      	subs	r3, r2, r3
 800eeae:	69ba      	ldr	r2, [r7, #24]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d302      	bcc.n	800eeba <UART_WaitOnFlagUntilTimeout+0x30>
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d11d      	bne.n	800eef6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800eec8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	689a      	ldr	r2, [r3, #8]
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f022 0201 	bic.w	r2, r2, #1
 800eed8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2220      	movs	r2, #32
 800eede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2220      	movs	r2, #32
 800eee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2200      	movs	r2, #0
 800eeee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800eef2:	2303      	movs	r3, #3
 800eef4:	e045      	b.n	800ef82 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f003 0304 	and.w	r3, r3, #4
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d02e      	beq.n	800ef62 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	69db      	ldr	r3, [r3, #28]
 800ef0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef12:	d126      	bne.n	800ef62 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ef2c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	689a      	ldr	r2, [r3, #8]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f022 0201 	bic.w	r2, r2, #1
 800ef3c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2220      	movs	r2, #32
 800ef42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	2220      	movs	r2, #32
 800ef4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2220      	movs	r2, #32
 800ef52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ef5e:	2303      	movs	r3, #3
 800ef60:	e00f      	b.n	800ef82 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	69da      	ldr	r2, [r3, #28]
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	4013      	ands	r3, r2
 800ef6c:	68ba      	ldr	r2, [r7, #8]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	bf0c      	ite	eq
 800ef72:	2301      	moveq	r3, #1
 800ef74:	2300      	movne	r3, #0
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	461a      	mov	r2, r3
 800ef7a:	79fb      	ldrb	r3, [r7, #7]
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d08d      	beq.n	800ee9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ef80:	2300      	movs	r3, #0
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
	...

0800ef8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b085      	sub	sp, #20
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	60b9      	str	r1, [r7, #8]
 800ef96:	4613      	mov	r3, r2
 800ef98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	68ba      	ldr	r2, [r7, #8]
 800ef9e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	88fa      	ldrh	r2, [r7, #6]
 800efa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	88fa      	ldrh	r2, [r7, #6]
 800efac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2200      	movs	r2, #0
 800efb4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	689b      	ldr	r3, [r3, #8]
 800efba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efbe:	d10e      	bne.n	800efde <UART_Start_Receive_IT+0x52>
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	691b      	ldr	r3, [r3, #16]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d105      	bne.n	800efd4 <UART_Start_Receive_IT+0x48>
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f240 12ff 	movw	r2, #511	; 0x1ff
 800efce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800efd2:	e02d      	b.n	800f030 <UART_Start_Receive_IT+0xa4>
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	22ff      	movs	r2, #255	; 0xff
 800efd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800efdc:	e028      	b.n	800f030 <UART_Start_Receive_IT+0xa4>
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	689b      	ldr	r3, [r3, #8]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d10d      	bne.n	800f002 <UART_Start_Receive_IT+0x76>
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	691b      	ldr	r3, [r3, #16]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d104      	bne.n	800eff8 <UART_Start_Receive_IT+0x6c>
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	22ff      	movs	r2, #255	; 0xff
 800eff2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eff6:	e01b      	b.n	800f030 <UART_Start_Receive_IT+0xa4>
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	227f      	movs	r2, #127	; 0x7f
 800effc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f000:	e016      	b.n	800f030 <UART_Start_Receive_IT+0xa4>
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	689b      	ldr	r3, [r3, #8]
 800f006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f00a:	d10d      	bne.n	800f028 <UART_Start_Receive_IT+0x9c>
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	691b      	ldr	r3, [r3, #16]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d104      	bne.n	800f01e <UART_Start_Receive_IT+0x92>
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	227f      	movs	r2, #127	; 0x7f
 800f018:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f01c:	e008      	b.n	800f030 <UART_Start_Receive_IT+0xa4>
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	223f      	movs	r2, #63	; 0x3f
 800f022:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f026:	e003      	b.n	800f030 <UART_Start_Receive_IT+0xa4>
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2200      	movs	r2, #0
 800f02c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2200      	movs	r2, #0
 800f034:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2222      	movs	r2, #34	; 0x22
 800f03c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	689a      	ldr	r2, [r3, #8]
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f042 0201 	orr.w	r2, r2, #1
 800f04e:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f058:	d12a      	bne.n	800f0b0 <UART_Start_Receive_IT+0x124>
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f060:	88fa      	ldrh	r2, [r7, #6]
 800f062:	429a      	cmp	r2, r3
 800f064:	d324      	bcc.n	800f0b0 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	689b      	ldr	r3, [r3, #8]
 800f06a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f06e:	d107      	bne.n	800f080 <UART_Start_Receive_IT+0xf4>
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	691b      	ldr	r3, [r3, #16]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d103      	bne.n	800f080 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	4a1f      	ldr	r2, [pc, #124]	; (800f0f8 <UART_Start_Receive_IT+0x16c>)
 800f07c:	671a      	str	r2, [r3, #112]	; 0x70
 800f07e:	e002      	b.n	800f086 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	4a1e      	ldr	r2, [pc, #120]	; (800f0fc <UART_Start_Receive_IT+0x170>)
 800f084:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	2200      	movs	r2, #0
 800f08a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	681a      	ldr	r2, [r3, #0]
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f09c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	689a      	ldr	r2, [r3, #8]
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f0ac:	609a      	str	r2, [r3, #8]
 800f0ae:	e01b      	b.n	800f0e8 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	689b      	ldr	r3, [r3, #8]
 800f0b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0b8:	d107      	bne.n	800f0ca <UART_Start_Receive_IT+0x13e>
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	691b      	ldr	r3, [r3, #16]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d103      	bne.n	800f0ca <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	4a0e      	ldr	r2, [pc, #56]	; (800f100 <UART_Start_Receive_IT+0x174>)
 800f0c6:	671a      	str	r2, [r3, #112]	; 0x70
 800f0c8:	e002      	b.n	800f0d0 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	4a0d      	ldr	r2, [pc, #52]	; (800f104 <UART_Start_Receive_IT+0x178>)
 800f0ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800f0e6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800f0e8:	2300      	movs	r3, #0
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3714      	adds	r7, #20
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f4:	4770      	bx	lr
 800f0f6:	bf00      	nop
 800f0f8:	0800f6a9 	.word	0x0800f6a9
 800f0fc:	0800f4a5 	.word	0x0800f4a5
 800f100:	0800f3cd 	.word	0x0800f3cd
 800f104:	0800f2f5 	.word	0x0800f2f5

0800f108 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f11e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	689a      	ldr	r2, [r3, #8]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800f12e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2220      	movs	r2, #32
 800f134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f138:	bf00      	nop
 800f13a:	370c      	adds	r7, #12
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr

0800f144 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f15a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	6899      	ldr	r1, [r3, #8]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	4b0f      	ldr	r3, [pc, #60]	; (800f1a4 <UART_EndRxTransfer+0x60>)
 800f168:	400b      	ands	r3, r1
 800f16a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f170:	2b01      	cmp	r3, #1
 800f172:	d107      	bne.n	800f184 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	681a      	ldr	r2, [r3, #0]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f022 0210 	bic.w	r2, r2, #16
 800f182:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2220      	movs	r2, #32
 800f188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2200      	movs	r2, #0
 800f190:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2200      	movs	r2, #0
 800f196:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f198:	bf00      	nop
 800f19a:	370c      	adds	r7, #12
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr
 800f1a4:	effffffe 	.word	0xeffffffe

0800f1a8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b084      	sub	sp, #16
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1b4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	69db      	ldr	r3, [r3, #28]
 800f1ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1be:	d014      	beq.n	800f1ea <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	689a      	ldr	r2, [r3, #8]
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f1d6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	681a      	ldr	r2, [r3, #0]
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f1e6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f1e8:	e002      	b.n	800f1f0 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800f1ea:	68f8      	ldr	r0, [r7, #12]
 800f1ec:	f7fe ffd6 	bl	800e19c <HAL_UART_TxCpltCallback>
}
 800f1f0:	bf00      	nop
 800f1f2:	3710      	adds	r7, #16
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b084      	sub	sp, #16
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f204:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f206:	68f8      	ldr	r0, [r7, #12]
 800f208:	f7fe ffd2 	bl	800e1b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f20c:	bf00      	nop
 800f20e:	3710      	adds	r7, #16
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b086      	sub	sp, #24
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f220:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f228:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f230:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	689b      	ldr	r3, [r3, #8]
 800f238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f23c:	2b80      	cmp	r3, #128	; 0x80
 800f23e:	d109      	bne.n	800f254 <UART_DMAError+0x40>
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	2b21      	cmp	r3, #33	; 0x21
 800f244:	d106      	bne.n	800f254 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	2200      	movs	r2, #0
 800f24a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f24e:	6978      	ldr	r0, [r7, #20]
 800f250:	f7ff ff5a 	bl	800f108 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f25e:	2b40      	cmp	r3, #64	; 0x40
 800f260:	d109      	bne.n	800f276 <UART_DMAError+0x62>
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2b22      	cmp	r3, #34	; 0x22
 800f266:	d106      	bne.n	800f276 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f270:	6978      	ldr	r0, [r7, #20]
 800f272:	f7ff ff67 	bl	800f144 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f27c:	f043 0210 	orr.w	r2, r3, #16
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f286:	6978      	ldr	r0, [r7, #20]
 800f288:	f7fe ff9c 	bl	800e1c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f28c:	bf00      	nop
 800f28e:	3718      	adds	r7, #24
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b084      	sub	sp, #16
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f2b2:	68f8      	ldr	r0, [r7, #12]
 800f2b4:	f7fe ff86 	bl	800e1c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2b8:	bf00      	nop
 800f2ba:	3710      	adds	r7, #16
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f2d6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2220      	movs	r2, #32
 800f2dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f7fe ff58 	bl	800e19c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2ec:	bf00      	nop
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b084      	sub	sp, #16
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f302:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f30a:	2b22      	cmp	r3, #34	; 0x22
 800f30c:	d152      	bne.n	800f3b4 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f314:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f316:	89bb      	ldrh	r3, [r7, #12]
 800f318:	b2d9      	uxtb	r1, r3
 800f31a:	89fb      	ldrh	r3, [r7, #14]
 800f31c:	b2da      	uxtb	r2, r3
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f322:	400a      	ands	r2, r1
 800f324:	b2d2      	uxtb	r2, r2
 800f326:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f32c:	1c5a      	adds	r2, r3, #1
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f338:	b29b      	uxth	r3, r3
 800f33a:	3b01      	subs	r3, #1
 800f33c:	b29a      	uxth	r2, r3
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d139      	bne.n	800f3c4 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	681a      	ldr	r2, [r3, #0]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f35e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	689a      	ldr	r2, [r3, #8]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f022 0201 	bic.w	r2, r2, #1
 800f36e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2220      	movs	r2, #32
 800f374:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2200      	movs	r2, #0
 800f37c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f382:	2b01      	cmp	r3, #1
 800f384:	d10f      	bne.n	800f3a6 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f022 0210 	bic.w	r2, r2, #16
 800f394:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f39c:	4619      	mov	r1, r3
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7fe ff1a 	bl	800e1d8 <HAL_UARTEx_RxEventCallback>
 800f3a4:	e002      	b.n	800f3ac <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f7f4 f9fc 	bl	80037a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f3b2:	e007      	b.n	800f3c4 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	699a      	ldr	r2, [r3, #24]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	f042 0208 	orr.w	r2, r2, #8
 800f3c2:	619a      	str	r2, [r3, #24]
}
 800f3c4:	bf00      	nop
 800f3c6:	3710      	adds	r7, #16
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}

0800f3cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3da:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3e2:	2b22      	cmp	r3, #34	; 0x22
 800f3e4:	d152      	bne.n	800f48c <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ec:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3f2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800f3f4:	89ba      	ldrh	r2, [r7, #12]
 800f3f6:	89fb      	ldrh	r3, [r7, #14]
 800f3f8:	4013      	ands	r3, r2
 800f3fa:	b29a      	uxth	r2, r3
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f404:	1c9a      	adds	r2, r3, #2
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f410:	b29b      	uxth	r3, r3
 800f412:	3b01      	subs	r3, #1
 800f414:	b29a      	uxth	r2, r3
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f422:	b29b      	uxth	r3, r3
 800f424:	2b00      	cmp	r3, #0
 800f426:	d139      	bne.n	800f49c <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f436:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	689a      	ldr	r2, [r3, #8]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f022 0201 	bic.w	r2, r2, #1
 800f446:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2220      	movs	r2, #32
 800f44c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2200      	movs	r2, #0
 800f454:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f45a:	2b01      	cmp	r3, #1
 800f45c:	d10f      	bne.n	800f47e <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f022 0210 	bic.w	r2, r2, #16
 800f46c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f474:	4619      	mov	r1, r3
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f7fe feae 	bl	800e1d8 <HAL_UARTEx_RxEventCallback>
 800f47c:	e002      	b.n	800f484 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f7f4 f990 	bl	80037a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2200      	movs	r2, #0
 800f488:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f48a:	e007      	b.n	800f49c <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	699a      	ldr	r2, [r3, #24]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f042 0208 	orr.w	r2, r2, #8
 800f49a:	619a      	str	r2, [r3, #24]
}
 800f49c:	bf00      	nop
 800f49e:	3710      	adds	r7, #16
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b088      	sub	sp, #32
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f4b2:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	69db      	ldr	r3, [r3, #28]
 800f4ba:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	689b      	ldr	r3, [r3, #8]
 800f4ca:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4d2:	2b22      	cmp	r3, #34	; 0x22
 800f4d4:	f040 80d8 	bne.w	800f688 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f4de:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f4e0:	e0a8      	b.n	800f634 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e8:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f4ea:	89bb      	ldrh	r3, [r7, #12]
 800f4ec:	b2d9      	uxtb	r1, r3
 800f4ee:	8b7b      	ldrh	r3, [r7, #26]
 800f4f0:	b2da      	uxtb	r2, r3
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4f6:	400a      	ands	r2, r1
 800f4f8:	b2d2      	uxtb	r2, r2
 800f4fa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f500:	1c5a      	adds	r2, r3, #1
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	3b01      	subs	r3, #1
 800f510:	b29a      	uxth	r2, r3
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	69db      	ldr	r3, [r3, #28]
 800f51e:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f520:	69fb      	ldr	r3, [r7, #28]
 800f522:	f003 0307 	and.w	r3, r3, #7
 800f526:	2b00      	cmp	r3, #0
 800f528:	d04d      	beq.n	800f5c6 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f52a:	69fb      	ldr	r3, [r7, #28]
 800f52c:	f003 0301 	and.w	r3, r3, #1
 800f530:	2b00      	cmp	r3, #0
 800f532:	d010      	beq.n	800f556 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d00b      	beq.n	800f556 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	2201      	movs	r2, #1
 800f544:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f54c:	f043 0201 	orr.w	r2, r3, #1
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f556:	69fb      	ldr	r3, [r7, #28]
 800f558:	f003 0302 	and.w	r3, r3, #2
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d010      	beq.n	800f582 <UART_RxISR_8BIT_FIFOEN+0xde>
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	f003 0301 	and.w	r3, r3, #1
 800f566:	2b00      	cmp	r3, #0
 800f568:	d00b      	beq.n	800f582 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	2202      	movs	r2, #2
 800f570:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f578:	f043 0204 	orr.w	r2, r3, #4
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f582:	69fb      	ldr	r3, [r7, #28]
 800f584:	f003 0304 	and.w	r3, r3, #4
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d010      	beq.n	800f5ae <UART_RxISR_8BIT_FIFOEN+0x10a>
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	f003 0301 	and.w	r3, r3, #1
 800f592:	2b00      	cmp	r3, #0
 800f594:	d00b      	beq.n	800f5ae <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	2204      	movs	r2, #4
 800f59c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5a4:	f043 0202 	orr.w	r2, r3, #2
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d006      	beq.n	800f5c6 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f7fe fe03 	bl	800e1c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d130      	bne.n	800f634 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f5e0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	6899      	ldr	r1, [r3, #8]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	4b2c      	ldr	r3, [pc, #176]	; (800f6a0 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800f5ee:	400b      	ands	r3, r1
 800f5f0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2220      	movs	r2, #32
 800f5f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f604:	2b01      	cmp	r3, #1
 800f606:	d10f      	bne.n	800f628 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	681a      	ldr	r2, [r3, #0]
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	f022 0210 	bic.w	r2, r2, #16
 800f616:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f61e:	4619      	mov	r1, r3
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f7fe fdd9 	bl	800e1d8 <HAL_UARTEx_RxEventCallback>
 800f626:	e002      	b.n	800f62e <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f7f4 f8bb 	bl	80037a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2200      	movs	r2, #0
 800f632:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f634:	89fb      	ldrh	r3, [r7, #14]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d005      	beq.n	800f646 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800f63a:	69fb      	ldr	r3, [r7, #28]
 800f63c:	f003 0320 	and.w	r3, r3, #32
 800f640:	2b00      	cmp	r3, #0
 800f642:	f47f af4e 	bne.w	800f4e2 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f64c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f64e:	897b      	ldrh	r3, [r7, #10]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d021      	beq.n	800f698 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f65a:	897a      	ldrh	r2, [r7, #10]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d21b      	bcs.n	800f698 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	689a      	ldr	r2, [r3, #8]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f66e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	4a0c      	ldr	r2, [pc, #48]	; (800f6a4 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800f674:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	681a      	ldr	r2, [r3, #0]
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	f042 0220 	orr.w	r2, r2, #32
 800f684:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f686:	e007      	b.n	800f698 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	699a      	ldr	r2, [r3, #24]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f042 0208 	orr.w	r2, r2, #8
 800f696:	619a      	str	r2, [r3, #24]
}
 800f698:	bf00      	nop
 800f69a:	3720      	adds	r7, #32
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}
 800f6a0:	effffffe 	.word	0xeffffffe
 800f6a4:	0800f2f5 	.word	0x0800f2f5

0800f6a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b08a      	sub	sp, #40	; 0x28
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f6b6:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	69db      	ldr	r3, [r3, #28]
 800f6be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	689b      	ldr	r3, [r3, #8]
 800f6ce:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6d6:	2b22      	cmp	r3, #34	; 0x22
 800f6d8:	f040 80d8 	bne.w	800f88c <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f6e2:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f6e4:	e0a8      	b.n	800f838 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ec:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6f2:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800f6f4:	8aba      	ldrh	r2, [r7, #20]
 800f6f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f6f8:	4013      	ands	r3, r2
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f704:	1c9a      	adds	r2, r3, #2
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f710:	b29b      	uxth	r3, r3
 800f712:	3b01      	subs	r3, #1
 800f714:	b29a      	uxth	r2, r3
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	69db      	ldr	r3, [r3, #28]
 800f722:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f726:	f003 0307 	and.w	r3, r3, #7
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d04d      	beq.n	800f7ca <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f730:	f003 0301 	and.w	r3, r3, #1
 800f734:	2b00      	cmp	r3, #0
 800f736:	d010      	beq.n	800f75a <UART_RxISR_16BIT_FIFOEN+0xb2>
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d00b      	beq.n	800f75a <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	2201      	movs	r2, #1
 800f748:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f750:	f043 0201 	orr.w	r2, r3, #1
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75c:	f003 0302 	and.w	r3, r3, #2
 800f760:	2b00      	cmp	r3, #0
 800f762:	d010      	beq.n	800f786 <UART_RxISR_16BIT_FIFOEN+0xde>
 800f764:	69bb      	ldr	r3, [r7, #24]
 800f766:	f003 0301 	and.w	r3, r3, #1
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d00b      	beq.n	800f786 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	2202      	movs	r2, #2
 800f774:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f77c:	f043 0204 	orr.w	r2, r3, #4
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f788:	f003 0304 	and.w	r3, r3, #4
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d010      	beq.n	800f7b2 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800f790:	69bb      	ldr	r3, [r7, #24]
 800f792:	f003 0301 	and.w	r3, r3, #1
 800f796:	2b00      	cmp	r3, #0
 800f798:	d00b      	beq.n	800f7b2 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2204      	movs	r2, #4
 800f7a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7a8:	f043 0202 	orr.w	r2, r3, #2
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d006      	beq.n	800f7ca <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f7fe fd01 	bl	800e1c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f7d0:	b29b      	uxth	r3, r3
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d130      	bne.n	800f838 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	681a      	ldr	r2, [r3, #0]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f7e4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	6899      	ldr	r1, [r3, #8]
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681a      	ldr	r2, [r3, #0]
 800f7f0:	4b2c      	ldr	r3, [pc, #176]	; (800f8a4 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800f7f2:	400b      	ands	r3, r1
 800f7f4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2220      	movs	r2, #32
 800f7fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2200      	movs	r2, #0
 800f802:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f808:	2b01      	cmp	r3, #1
 800f80a:	d10f      	bne.n	800f82c <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f022 0210 	bic.w	r2, r2, #16
 800f81a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f822:	4619      	mov	r1, r3
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f7fe fcd7 	bl	800e1d8 <HAL_UARTEx_RxEventCallback>
 800f82a:	e002      	b.n	800f832 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7f3 ffb9 	bl	80037a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2200      	movs	r2, #0
 800f836:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f838:	8afb      	ldrh	r3, [r7, #22]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d005      	beq.n	800f84a <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800f83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f840:	f003 0320 	and.w	r3, r3, #32
 800f844:	2b00      	cmp	r3, #0
 800f846:	f47f af4e 	bne.w	800f6e6 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f850:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f852:	89fb      	ldrh	r3, [r7, #14]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d021      	beq.n	800f89c <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f85e:	89fa      	ldrh	r2, [r7, #14]
 800f860:	429a      	cmp	r2, r3
 800f862:	d21b      	bcs.n	800f89c <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	689a      	ldr	r2, [r3, #8]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f872:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4a0c      	ldr	r2, [pc, #48]	; (800f8a8 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800f878:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	681a      	ldr	r2, [r3, #0]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	f042 0220 	orr.w	r2, r2, #32
 800f888:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f88a:	e007      	b.n	800f89c <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	699a      	ldr	r2, [r3, #24]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	f042 0208 	orr.w	r2, r2, #8
 800f89a:	619a      	str	r2, [r3, #24]
}
 800f89c:	bf00      	nop
 800f89e:	3728      	adds	r7, #40	; 0x28
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}
 800f8a4:	effffffe 	.word	0xeffffffe
 800f8a8:	0800f3cd 	.word	0x0800f3cd

0800f8ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b083      	sub	sp, #12
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f8b4:	bf00      	nop
 800f8b6:	370c      	adds	r7, #12
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f8c8:	bf00      	nop
 800f8ca:	370c      	adds	r7, #12
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr

0800f8d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f8dc:	bf00      	nop
 800f8de:	370c      	adds	r7, #12
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr

0800f8e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	d101      	bne.n	800f8fe <HAL_UARTEx_DisableFifoMode+0x16>
 800f8fa:	2302      	movs	r3, #2
 800f8fc:	e027      	b.n	800f94e <HAL_UARTEx_DisableFifoMode+0x66>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2201      	movs	r2, #1
 800f902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2224      	movs	r2, #36	; 0x24
 800f90a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	681a      	ldr	r2, [r3, #0]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f022 0201 	bic.w	r2, r2, #1
 800f924:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f92c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2200      	movs	r2, #0
 800f932:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	68fa      	ldr	r2, [r7, #12]
 800f93a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2220      	movs	r2, #32
 800f940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2200      	movs	r2, #0
 800f948:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f94c:	2300      	movs	r3, #0
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3714      	adds	r7, #20
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr

0800f95a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f95a:	b580      	push	{r7, lr}
 800f95c:	b084      	sub	sp, #16
 800f95e:	af00      	add	r7, sp, #0
 800f960:	6078      	str	r0, [r7, #4]
 800f962:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f96a:	2b01      	cmp	r3, #1
 800f96c:	d101      	bne.n	800f972 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f96e:	2302      	movs	r3, #2
 800f970:	e02d      	b.n	800f9ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2201      	movs	r2, #1
 800f976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2224      	movs	r2, #36	; 0x24
 800f97e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f022 0201 	bic.w	r2, r2, #1
 800f998:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	689b      	ldr	r3, [r3, #8]
 800f9a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	683a      	ldr	r2, [r7, #0]
 800f9aa:	430a      	orrs	r2, r1
 800f9ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 f850 	bl	800fa54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	68fa      	ldr	r2, [r7, #12]
 800f9ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2220      	movs	r2, #32
 800f9c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f9cc:	2300      	movs	r3, #0
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3710      	adds	r7, #16
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}

0800f9d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f9d6:	b580      	push	{r7, lr}
 800f9d8:	b084      	sub	sp, #16
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
 800f9de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f9e6:	2b01      	cmp	r3, #1
 800f9e8:	d101      	bne.n	800f9ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f9ea:	2302      	movs	r3, #2
 800f9ec:	e02d      	b.n	800fa4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2201      	movs	r2, #1
 800f9f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2224      	movs	r2, #36	; 0x24
 800f9fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	f022 0201 	bic.w	r2, r2, #1
 800fa14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	689b      	ldr	r3, [r3, #8]
 800fa1c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	683a      	ldr	r2, [r7, #0]
 800fa26:	430a      	orrs	r2, r1
 800fa28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f000 f812 	bl	800fa54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	68fa      	ldr	r2, [r7, #12]
 800fa36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2220      	movs	r2, #32
 800fa3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2200      	movs	r2, #0
 800fa44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fa48:	2300      	movs	r3, #0
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3710      	adds	r7, #16
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}
	...

0800fa54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fa54:	b480      	push	{r7}
 800fa56:	b085      	sub	sp, #20
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d108      	bne.n	800fa76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2201      	movs	r2, #1
 800fa68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2201      	movs	r2, #1
 800fa70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fa74:	e031      	b.n	800fada <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fa76:	2310      	movs	r3, #16
 800fa78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fa7a:	2310      	movs	r3, #16
 800fa7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	689b      	ldr	r3, [r3, #8]
 800fa84:	0e5b      	lsrs	r3, r3, #25
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	f003 0307 	and.w	r3, r3, #7
 800fa8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	689b      	ldr	r3, [r3, #8]
 800fa94:	0f5b      	lsrs	r3, r3, #29
 800fa96:	b2db      	uxtb	r3, r3
 800fa98:	f003 0307 	and.w	r3, r3, #7
 800fa9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fa9e:	7bbb      	ldrb	r3, [r7, #14]
 800faa0:	7b3a      	ldrb	r2, [r7, #12]
 800faa2:	4911      	ldr	r1, [pc, #68]	; (800fae8 <UARTEx_SetNbDataToProcess+0x94>)
 800faa4:	5c8a      	ldrb	r2, [r1, r2]
 800faa6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800faaa:	7b3a      	ldrb	r2, [r7, #12]
 800faac:	490f      	ldr	r1, [pc, #60]	; (800faec <UARTEx_SetNbDataToProcess+0x98>)
 800faae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fab0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fab4:	b29a      	uxth	r2, r3
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fabc:	7bfb      	ldrb	r3, [r7, #15]
 800fabe:	7b7a      	ldrb	r2, [r7, #13]
 800fac0:	4909      	ldr	r1, [pc, #36]	; (800fae8 <UARTEx_SetNbDataToProcess+0x94>)
 800fac2:	5c8a      	ldrb	r2, [r1, r2]
 800fac4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fac8:	7b7a      	ldrb	r2, [r7, #13]
 800faca:	4908      	ldr	r1, [pc, #32]	; (800faec <UARTEx_SetNbDataToProcess+0x98>)
 800facc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800face:	fb93 f3f2 	sdiv	r3, r3, r2
 800fad2:	b29a      	uxth	r2, r3
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fada:	bf00      	nop
 800fadc:	3714      	adds	r7, #20
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr
 800fae6:	bf00      	nop
 800fae8:	08012ec8 	.word	0x08012ec8
 800faec:	08012ed0 	.word	0x08012ed0

0800faf0 <__errno>:
 800faf0:	4b01      	ldr	r3, [pc, #4]	; (800faf8 <__errno+0x8>)
 800faf2:	6818      	ldr	r0, [r3, #0]
 800faf4:	4770      	bx	lr
 800faf6:	bf00      	nop
 800faf8:	24000024 	.word	0x24000024

0800fafc <__libc_init_array>:
 800fafc:	b570      	push	{r4, r5, r6, lr}
 800fafe:	4d0d      	ldr	r5, [pc, #52]	; (800fb34 <__libc_init_array+0x38>)
 800fb00:	4c0d      	ldr	r4, [pc, #52]	; (800fb38 <__libc_init_array+0x3c>)
 800fb02:	1b64      	subs	r4, r4, r5
 800fb04:	10a4      	asrs	r4, r4, #2
 800fb06:	2600      	movs	r6, #0
 800fb08:	42a6      	cmp	r6, r4
 800fb0a:	d109      	bne.n	800fb20 <__libc_init_array+0x24>
 800fb0c:	4d0b      	ldr	r5, [pc, #44]	; (800fb3c <__libc_init_array+0x40>)
 800fb0e:	4c0c      	ldr	r4, [pc, #48]	; (800fb40 <__libc_init_array+0x44>)
 800fb10:	f003 f994 	bl	8012e3c <_init>
 800fb14:	1b64      	subs	r4, r4, r5
 800fb16:	10a4      	asrs	r4, r4, #2
 800fb18:	2600      	movs	r6, #0
 800fb1a:	42a6      	cmp	r6, r4
 800fb1c:	d105      	bne.n	800fb2a <__libc_init_array+0x2e>
 800fb1e:	bd70      	pop	{r4, r5, r6, pc}
 800fb20:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb24:	4798      	blx	r3
 800fb26:	3601      	adds	r6, #1
 800fb28:	e7ee      	b.n	800fb08 <__libc_init_array+0xc>
 800fb2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb2e:	4798      	blx	r3
 800fb30:	3601      	adds	r6, #1
 800fb32:	e7f2      	b.n	800fb1a <__libc_init_array+0x1e>
 800fb34:	08013370 	.word	0x08013370
 800fb38:	08013370 	.word	0x08013370
 800fb3c:	08013370 	.word	0x08013370
 800fb40:	08013374 	.word	0x08013374

0800fb44 <memset>:
 800fb44:	4402      	add	r2, r0
 800fb46:	4603      	mov	r3, r0
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d100      	bne.n	800fb4e <memset+0xa>
 800fb4c:	4770      	bx	lr
 800fb4e:	f803 1b01 	strb.w	r1, [r3], #1
 800fb52:	e7f9      	b.n	800fb48 <memset+0x4>

0800fb54 <__cvt>:
 800fb54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb56:	ed2d 8b02 	vpush	{d8}
 800fb5a:	eeb0 8b40 	vmov.f64	d8, d0
 800fb5e:	b085      	sub	sp, #20
 800fb60:	4617      	mov	r7, r2
 800fb62:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fb64:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fb66:	ee18 2a90 	vmov	r2, s17
 800fb6a:	f025 0520 	bic.w	r5, r5, #32
 800fb6e:	2a00      	cmp	r2, #0
 800fb70:	bfb6      	itet	lt
 800fb72:	222d      	movlt	r2, #45	; 0x2d
 800fb74:	2200      	movge	r2, #0
 800fb76:	eeb1 8b40 	vneglt.f64	d8, d0
 800fb7a:	2d46      	cmp	r5, #70	; 0x46
 800fb7c:	460c      	mov	r4, r1
 800fb7e:	701a      	strb	r2, [r3, #0]
 800fb80:	d004      	beq.n	800fb8c <__cvt+0x38>
 800fb82:	2d45      	cmp	r5, #69	; 0x45
 800fb84:	d100      	bne.n	800fb88 <__cvt+0x34>
 800fb86:	3401      	adds	r4, #1
 800fb88:	2102      	movs	r1, #2
 800fb8a:	e000      	b.n	800fb8e <__cvt+0x3a>
 800fb8c:	2103      	movs	r1, #3
 800fb8e:	ab03      	add	r3, sp, #12
 800fb90:	9301      	str	r3, [sp, #4]
 800fb92:	ab02      	add	r3, sp, #8
 800fb94:	9300      	str	r3, [sp, #0]
 800fb96:	4622      	mov	r2, r4
 800fb98:	4633      	mov	r3, r6
 800fb9a:	eeb0 0b48 	vmov.f64	d0, d8
 800fb9e:	f000 fdf7 	bl	8010790 <_dtoa_r>
 800fba2:	2d47      	cmp	r5, #71	; 0x47
 800fba4:	d109      	bne.n	800fbba <__cvt+0x66>
 800fba6:	07fb      	lsls	r3, r7, #31
 800fba8:	d407      	bmi.n	800fbba <__cvt+0x66>
 800fbaa:	9b03      	ldr	r3, [sp, #12]
 800fbac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fbae:	1a1b      	subs	r3, r3, r0
 800fbb0:	6013      	str	r3, [r2, #0]
 800fbb2:	b005      	add	sp, #20
 800fbb4:	ecbd 8b02 	vpop	{d8}
 800fbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbba:	2d46      	cmp	r5, #70	; 0x46
 800fbbc:	eb00 0204 	add.w	r2, r0, r4
 800fbc0:	d10c      	bne.n	800fbdc <__cvt+0x88>
 800fbc2:	7803      	ldrb	r3, [r0, #0]
 800fbc4:	2b30      	cmp	r3, #48	; 0x30
 800fbc6:	d107      	bne.n	800fbd8 <__cvt+0x84>
 800fbc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fbcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbd0:	bf1c      	itt	ne
 800fbd2:	f1c4 0401 	rsbne	r4, r4, #1
 800fbd6:	6034      	strne	r4, [r6, #0]
 800fbd8:	6833      	ldr	r3, [r6, #0]
 800fbda:	441a      	add	r2, r3
 800fbdc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fbe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbe4:	bf08      	it	eq
 800fbe6:	9203      	streq	r2, [sp, #12]
 800fbe8:	2130      	movs	r1, #48	; 0x30
 800fbea:	9b03      	ldr	r3, [sp, #12]
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d2dc      	bcs.n	800fbaa <__cvt+0x56>
 800fbf0:	1c5c      	adds	r4, r3, #1
 800fbf2:	9403      	str	r4, [sp, #12]
 800fbf4:	7019      	strb	r1, [r3, #0]
 800fbf6:	e7f8      	b.n	800fbea <__cvt+0x96>

0800fbf8 <__exponent>:
 800fbf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2900      	cmp	r1, #0
 800fbfe:	bfb8      	it	lt
 800fc00:	4249      	neglt	r1, r1
 800fc02:	f803 2b02 	strb.w	r2, [r3], #2
 800fc06:	bfb4      	ite	lt
 800fc08:	222d      	movlt	r2, #45	; 0x2d
 800fc0a:	222b      	movge	r2, #43	; 0x2b
 800fc0c:	2909      	cmp	r1, #9
 800fc0e:	7042      	strb	r2, [r0, #1]
 800fc10:	dd2a      	ble.n	800fc68 <__exponent+0x70>
 800fc12:	f10d 0407 	add.w	r4, sp, #7
 800fc16:	46a4      	mov	ip, r4
 800fc18:	270a      	movs	r7, #10
 800fc1a:	46a6      	mov	lr, r4
 800fc1c:	460a      	mov	r2, r1
 800fc1e:	fb91 f6f7 	sdiv	r6, r1, r7
 800fc22:	fb07 1516 	mls	r5, r7, r6, r1
 800fc26:	3530      	adds	r5, #48	; 0x30
 800fc28:	2a63      	cmp	r2, #99	; 0x63
 800fc2a:	f104 34ff 	add.w	r4, r4, #4294967295
 800fc2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fc32:	4631      	mov	r1, r6
 800fc34:	dcf1      	bgt.n	800fc1a <__exponent+0x22>
 800fc36:	3130      	adds	r1, #48	; 0x30
 800fc38:	f1ae 0502 	sub.w	r5, lr, #2
 800fc3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fc40:	1c44      	adds	r4, r0, #1
 800fc42:	4629      	mov	r1, r5
 800fc44:	4561      	cmp	r1, ip
 800fc46:	d30a      	bcc.n	800fc5e <__exponent+0x66>
 800fc48:	f10d 0209 	add.w	r2, sp, #9
 800fc4c:	eba2 020e 	sub.w	r2, r2, lr
 800fc50:	4565      	cmp	r5, ip
 800fc52:	bf88      	it	hi
 800fc54:	2200      	movhi	r2, #0
 800fc56:	4413      	add	r3, r2
 800fc58:	1a18      	subs	r0, r3, r0
 800fc5a:	b003      	add	sp, #12
 800fc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc62:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fc66:	e7ed      	b.n	800fc44 <__exponent+0x4c>
 800fc68:	2330      	movs	r3, #48	; 0x30
 800fc6a:	3130      	adds	r1, #48	; 0x30
 800fc6c:	7083      	strb	r3, [r0, #2]
 800fc6e:	70c1      	strb	r1, [r0, #3]
 800fc70:	1d03      	adds	r3, r0, #4
 800fc72:	e7f1      	b.n	800fc58 <__exponent+0x60>
 800fc74:	0000      	movs	r0, r0
	...

0800fc78 <_printf_float>:
 800fc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc7c:	b08b      	sub	sp, #44	; 0x2c
 800fc7e:	460c      	mov	r4, r1
 800fc80:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800fc84:	4616      	mov	r6, r2
 800fc86:	461f      	mov	r7, r3
 800fc88:	4605      	mov	r5, r0
 800fc8a:	f001 fcbb 	bl	8011604 <_localeconv_r>
 800fc8e:	f8d0 b000 	ldr.w	fp, [r0]
 800fc92:	4658      	mov	r0, fp
 800fc94:	f7f0 fb24 	bl	80002e0 <strlen>
 800fc98:	2300      	movs	r3, #0
 800fc9a:	9308      	str	r3, [sp, #32]
 800fc9c:	f8d8 3000 	ldr.w	r3, [r8]
 800fca0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fca4:	6822      	ldr	r2, [r4, #0]
 800fca6:	3307      	adds	r3, #7
 800fca8:	f023 0307 	bic.w	r3, r3, #7
 800fcac:	f103 0108 	add.w	r1, r3, #8
 800fcb0:	f8c8 1000 	str.w	r1, [r8]
 800fcb4:	4682      	mov	sl, r0
 800fcb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fcba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800fcbe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ff20 <_printf_float+0x2a8>
 800fcc2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800fcc6:	eeb0 6bc0 	vabs.f64	d6, d0
 800fcca:	eeb4 6b47 	vcmp.f64	d6, d7
 800fcce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd2:	dd24      	ble.n	800fd1e <_printf_float+0xa6>
 800fcd4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcdc:	d502      	bpl.n	800fce4 <_printf_float+0x6c>
 800fcde:	232d      	movs	r3, #45	; 0x2d
 800fce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fce4:	4b90      	ldr	r3, [pc, #576]	; (800ff28 <_printf_float+0x2b0>)
 800fce6:	4891      	ldr	r0, [pc, #580]	; (800ff2c <_printf_float+0x2b4>)
 800fce8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fcec:	bf94      	ite	ls
 800fcee:	4698      	movls	r8, r3
 800fcf0:	4680      	movhi	r8, r0
 800fcf2:	2303      	movs	r3, #3
 800fcf4:	6123      	str	r3, [r4, #16]
 800fcf6:	f022 0204 	bic.w	r2, r2, #4
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	6022      	str	r2, [r4, #0]
 800fcfe:	9304      	str	r3, [sp, #16]
 800fd00:	9700      	str	r7, [sp, #0]
 800fd02:	4633      	mov	r3, r6
 800fd04:	aa09      	add	r2, sp, #36	; 0x24
 800fd06:	4621      	mov	r1, r4
 800fd08:	4628      	mov	r0, r5
 800fd0a:	f000 f9d3 	bl	80100b4 <_printf_common>
 800fd0e:	3001      	adds	r0, #1
 800fd10:	f040 808a 	bne.w	800fe28 <_printf_float+0x1b0>
 800fd14:	f04f 30ff 	mov.w	r0, #4294967295
 800fd18:	b00b      	add	sp, #44	; 0x2c
 800fd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd1e:	eeb4 0b40 	vcmp.f64	d0, d0
 800fd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd26:	d709      	bvc.n	800fd3c <_printf_float+0xc4>
 800fd28:	ee10 3a90 	vmov	r3, s1
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	bfbc      	itt	lt
 800fd30:	232d      	movlt	r3, #45	; 0x2d
 800fd32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fd36:	487e      	ldr	r0, [pc, #504]	; (800ff30 <_printf_float+0x2b8>)
 800fd38:	4b7e      	ldr	r3, [pc, #504]	; (800ff34 <_printf_float+0x2bc>)
 800fd3a:	e7d5      	b.n	800fce8 <_printf_float+0x70>
 800fd3c:	6863      	ldr	r3, [r4, #4]
 800fd3e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800fd42:	9104      	str	r1, [sp, #16]
 800fd44:	1c59      	adds	r1, r3, #1
 800fd46:	d13c      	bne.n	800fdc2 <_printf_float+0x14a>
 800fd48:	2306      	movs	r3, #6
 800fd4a:	6063      	str	r3, [r4, #4]
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	9303      	str	r3, [sp, #12]
 800fd50:	ab08      	add	r3, sp, #32
 800fd52:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fd56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fd5a:	ab07      	add	r3, sp, #28
 800fd5c:	6861      	ldr	r1, [r4, #4]
 800fd5e:	9300      	str	r3, [sp, #0]
 800fd60:	6022      	str	r2, [r4, #0]
 800fd62:	f10d 031b 	add.w	r3, sp, #27
 800fd66:	4628      	mov	r0, r5
 800fd68:	f7ff fef4 	bl	800fb54 <__cvt>
 800fd6c:	9b04      	ldr	r3, [sp, #16]
 800fd6e:	9907      	ldr	r1, [sp, #28]
 800fd70:	2b47      	cmp	r3, #71	; 0x47
 800fd72:	4680      	mov	r8, r0
 800fd74:	d108      	bne.n	800fd88 <_printf_float+0x110>
 800fd76:	1cc8      	adds	r0, r1, #3
 800fd78:	db02      	blt.n	800fd80 <_printf_float+0x108>
 800fd7a:	6863      	ldr	r3, [r4, #4]
 800fd7c:	4299      	cmp	r1, r3
 800fd7e:	dd41      	ble.n	800fe04 <_printf_float+0x18c>
 800fd80:	f1a9 0902 	sub.w	r9, r9, #2
 800fd84:	fa5f f989 	uxtb.w	r9, r9
 800fd88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fd8c:	d820      	bhi.n	800fdd0 <_printf_float+0x158>
 800fd8e:	3901      	subs	r1, #1
 800fd90:	464a      	mov	r2, r9
 800fd92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fd96:	9107      	str	r1, [sp, #28]
 800fd98:	f7ff ff2e 	bl	800fbf8 <__exponent>
 800fd9c:	9a08      	ldr	r2, [sp, #32]
 800fd9e:	9004      	str	r0, [sp, #16]
 800fda0:	1813      	adds	r3, r2, r0
 800fda2:	2a01      	cmp	r2, #1
 800fda4:	6123      	str	r3, [r4, #16]
 800fda6:	dc02      	bgt.n	800fdae <_printf_float+0x136>
 800fda8:	6822      	ldr	r2, [r4, #0]
 800fdaa:	07d2      	lsls	r2, r2, #31
 800fdac:	d501      	bpl.n	800fdb2 <_printf_float+0x13a>
 800fdae:	3301      	adds	r3, #1
 800fdb0:	6123      	str	r3, [r4, #16]
 800fdb2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d0a2      	beq.n	800fd00 <_printf_float+0x88>
 800fdba:	232d      	movs	r3, #45	; 0x2d
 800fdbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdc0:	e79e      	b.n	800fd00 <_printf_float+0x88>
 800fdc2:	9904      	ldr	r1, [sp, #16]
 800fdc4:	2947      	cmp	r1, #71	; 0x47
 800fdc6:	d1c1      	bne.n	800fd4c <_printf_float+0xd4>
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d1bf      	bne.n	800fd4c <_printf_float+0xd4>
 800fdcc:	2301      	movs	r3, #1
 800fdce:	e7bc      	b.n	800fd4a <_printf_float+0xd2>
 800fdd0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800fdd4:	d118      	bne.n	800fe08 <_printf_float+0x190>
 800fdd6:	2900      	cmp	r1, #0
 800fdd8:	6863      	ldr	r3, [r4, #4]
 800fdda:	dd0b      	ble.n	800fdf4 <_printf_float+0x17c>
 800fddc:	6121      	str	r1, [r4, #16]
 800fdde:	b913      	cbnz	r3, 800fde6 <_printf_float+0x16e>
 800fde0:	6822      	ldr	r2, [r4, #0]
 800fde2:	07d0      	lsls	r0, r2, #31
 800fde4:	d502      	bpl.n	800fdec <_printf_float+0x174>
 800fde6:	3301      	adds	r3, #1
 800fde8:	440b      	add	r3, r1
 800fdea:	6123      	str	r3, [r4, #16]
 800fdec:	2300      	movs	r3, #0
 800fdee:	65a1      	str	r1, [r4, #88]	; 0x58
 800fdf0:	9304      	str	r3, [sp, #16]
 800fdf2:	e7de      	b.n	800fdb2 <_printf_float+0x13a>
 800fdf4:	b913      	cbnz	r3, 800fdfc <_printf_float+0x184>
 800fdf6:	6822      	ldr	r2, [r4, #0]
 800fdf8:	07d2      	lsls	r2, r2, #31
 800fdfa:	d501      	bpl.n	800fe00 <_printf_float+0x188>
 800fdfc:	3302      	adds	r3, #2
 800fdfe:	e7f4      	b.n	800fdea <_printf_float+0x172>
 800fe00:	2301      	movs	r3, #1
 800fe02:	e7f2      	b.n	800fdea <_printf_float+0x172>
 800fe04:	f04f 0967 	mov.w	r9, #103	; 0x67
 800fe08:	9b08      	ldr	r3, [sp, #32]
 800fe0a:	4299      	cmp	r1, r3
 800fe0c:	db05      	blt.n	800fe1a <_printf_float+0x1a2>
 800fe0e:	6823      	ldr	r3, [r4, #0]
 800fe10:	6121      	str	r1, [r4, #16]
 800fe12:	07d8      	lsls	r0, r3, #31
 800fe14:	d5ea      	bpl.n	800fdec <_printf_float+0x174>
 800fe16:	1c4b      	adds	r3, r1, #1
 800fe18:	e7e7      	b.n	800fdea <_printf_float+0x172>
 800fe1a:	2900      	cmp	r1, #0
 800fe1c:	bfd4      	ite	le
 800fe1e:	f1c1 0202 	rsble	r2, r1, #2
 800fe22:	2201      	movgt	r2, #1
 800fe24:	4413      	add	r3, r2
 800fe26:	e7e0      	b.n	800fdea <_printf_float+0x172>
 800fe28:	6823      	ldr	r3, [r4, #0]
 800fe2a:	055a      	lsls	r2, r3, #21
 800fe2c:	d407      	bmi.n	800fe3e <_printf_float+0x1c6>
 800fe2e:	6923      	ldr	r3, [r4, #16]
 800fe30:	4642      	mov	r2, r8
 800fe32:	4631      	mov	r1, r6
 800fe34:	4628      	mov	r0, r5
 800fe36:	47b8      	blx	r7
 800fe38:	3001      	adds	r0, #1
 800fe3a:	d12a      	bne.n	800fe92 <_printf_float+0x21a>
 800fe3c:	e76a      	b.n	800fd14 <_printf_float+0x9c>
 800fe3e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fe42:	f240 80e2 	bls.w	801000a <_printf_float+0x392>
 800fe46:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fe4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fe4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe52:	d133      	bne.n	800febc <_printf_float+0x244>
 800fe54:	4a38      	ldr	r2, [pc, #224]	; (800ff38 <_printf_float+0x2c0>)
 800fe56:	2301      	movs	r3, #1
 800fe58:	4631      	mov	r1, r6
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	47b8      	blx	r7
 800fe5e:	3001      	adds	r0, #1
 800fe60:	f43f af58 	beq.w	800fd14 <_printf_float+0x9c>
 800fe64:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	db02      	blt.n	800fe72 <_printf_float+0x1fa>
 800fe6c:	6823      	ldr	r3, [r4, #0]
 800fe6e:	07d8      	lsls	r0, r3, #31
 800fe70:	d50f      	bpl.n	800fe92 <_printf_float+0x21a>
 800fe72:	4653      	mov	r3, sl
 800fe74:	465a      	mov	r2, fp
 800fe76:	4631      	mov	r1, r6
 800fe78:	4628      	mov	r0, r5
 800fe7a:	47b8      	blx	r7
 800fe7c:	3001      	adds	r0, #1
 800fe7e:	f43f af49 	beq.w	800fd14 <_printf_float+0x9c>
 800fe82:	f04f 0800 	mov.w	r8, #0
 800fe86:	f104 091a 	add.w	r9, r4, #26
 800fe8a:	9b08      	ldr	r3, [sp, #32]
 800fe8c:	3b01      	subs	r3, #1
 800fe8e:	4543      	cmp	r3, r8
 800fe90:	dc09      	bgt.n	800fea6 <_printf_float+0x22e>
 800fe92:	6823      	ldr	r3, [r4, #0]
 800fe94:	079b      	lsls	r3, r3, #30
 800fe96:	f100 8108 	bmi.w	80100aa <_printf_float+0x432>
 800fe9a:	68e0      	ldr	r0, [r4, #12]
 800fe9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe9e:	4298      	cmp	r0, r3
 800fea0:	bfb8      	it	lt
 800fea2:	4618      	movlt	r0, r3
 800fea4:	e738      	b.n	800fd18 <_printf_float+0xa0>
 800fea6:	2301      	movs	r3, #1
 800fea8:	464a      	mov	r2, r9
 800feaa:	4631      	mov	r1, r6
 800feac:	4628      	mov	r0, r5
 800feae:	47b8      	blx	r7
 800feb0:	3001      	adds	r0, #1
 800feb2:	f43f af2f 	beq.w	800fd14 <_printf_float+0x9c>
 800feb6:	f108 0801 	add.w	r8, r8, #1
 800feba:	e7e6      	b.n	800fe8a <_printf_float+0x212>
 800febc:	9b07      	ldr	r3, [sp, #28]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	dc3c      	bgt.n	800ff3c <_printf_float+0x2c4>
 800fec2:	4a1d      	ldr	r2, [pc, #116]	; (800ff38 <_printf_float+0x2c0>)
 800fec4:	2301      	movs	r3, #1
 800fec6:	4631      	mov	r1, r6
 800fec8:	4628      	mov	r0, r5
 800feca:	47b8      	blx	r7
 800fecc:	3001      	adds	r0, #1
 800fece:	f43f af21 	beq.w	800fd14 <_printf_float+0x9c>
 800fed2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fed6:	4313      	orrs	r3, r2
 800fed8:	d102      	bne.n	800fee0 <_printf_float+0x268>
 800feda:	6823      	ldr	r3, [r4, #0]
 800fedc:	07d9      	lsls	r1, r3, #31
 800fede:	d5d8      	bpl.n	800fe92 <_printf_float+0x21a>
 800fee0:	4653      	mov	r3, sl
 800fee2:	465a      	mov	r2, fp
 800fee4:	4631      	mov	r1, r6
 800fee6:	4628      	mov	r0, r5
 800fee8:	47b8      	blx	r7
 800feea:	3001      	adds	r0, #1
 800feec:	f43f af12 	beq.w	800fd14 <_printf_float+0x9c>
 800fef0:	f04f 0900 	mov.w	r9, #0
 800fef4:	f104 0a1a 	add.w	sl, r4, #26
 800fef8:	9b07      	ldr	r3, [sp, #28]
 800fefa:	425b      	negs	r3, r3
 800fefc:	454b      	cmp	r3, r9
 800fefe:	dc01      	bgt.n	800ff04 <_printf_float+0x28c>
 800ff00:	9b08      	ldr	r3, [sp, #32]
 800ff02:	e795      	b.n	800fe30 <_printf_float+0x1b8>
 800ff04:	2301      	movs	r3, #1
 800ff06:	4652      	mov	r2, sl
 800ff08:	4631      	mov	r1, r6
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	47b8      	blx	r7
 800ff0e:	3001      	adds	r0, #1
 800ff10:	f43f af00 	beq.w	800fd14 <_printf_float+0x9c>
 800ff14:	f109 0901 	add.w	r9, r9, #1
 800ff18:	e7ee      	b.n	800fef8 <_printf_float+0x280>
 800ff1a:	bf00      	nop
 800ff1c:	f3af 8000 	nop.w
 800ff20:	ffffffff 	.word	0xffffffff
 800ff24:	7fefffff 	.word	0x7fefffff
 800ff28:	08012edc 	.word	0x08012edc
 800ff2c:	08012ee0 	.word	0x08012ee0
 800ff30:	08012ee8 	.word	0x08012ee8
 800ff34:	08012ee4 	.word	0x08012ee4
 800ff38:	08012eec 	.word	0x08012eec
 800ff3c:	9a08      	ldr	r2, [sp, #32]
 800ff3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ff40:	429a      	cmp	r2, r3
 800ff42:	bfa8      	it	ge
 800ff44:	461a      	movge	r2, r3
 800ff46:	2a00      	cmp	r2, #0
 800ff48:	4691      	mov	r9, r2
 800ff4a:	dc38      	bgt.n	800ffbe <_printf_float+0x346>
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	9305      	str	r3, [sp, #20]
 800ff50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff54:	f104 021a 	add.w	r2, r4, #26
 800ff58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ff5a:	9905      	ldr	r1, [sp, #20]
 800ff5c:	9304      	str	r3, [sp, #16]
 800ff5e:	eba3 0309 	sub.w	r3, r3, r9
 800ff62:	428b      	cmp	r3, r1
 800ff64:	dc33      	bgt.n	800ffce <_printf_float+0x356>
 800ff66:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	db3c      	blt.n	800ffe8 <_printf_float+0x370>
 800ff6e:	6823      	ldr	r3, [r4, #0]
 800ff70:	07da      	lsls	r2, r3, #31
 800ff72:	d439      	bmi.n	800ffe8 <_printf_float+0x370>
 800ff74:	9a08      	ldr	r2, [sp, #32]
 800ff76:	9b04      	ldr	r3, [sp, #16]
 800ff78:	9907      	ldr	r1, [sp, #28]
 800ff7a:	1ad3      	subs	r3, r2, r3
 800ff7c:	eba2 0901 	sub.w	r9, r2, r1
 800ff80:	4599      	cmp	r9, r3
 800ff82:	bfa8      	it	ge
 800ff84:	4699      	movge	r9, r3
 800ff86:	f1b9 0f00 	cmp.w	r9, #0
 800ff8a:	dc35      	bgt.n	800fff8 <_printf_float+0x380>
 800ff8c:	f04f 0800 	mov.w	r8, #0
 800ff90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff94:	f104 0a1a 	add.w	sl, r4, #26
 800ff98:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ff9c:	1a9b      	subs	r3, r3, r2
 800ff9e:	eba3 0309 	sub.w	r3, r3, r9
 800ffa2:	4543      	cmp	r3, r8
 800ffa4:	f77f af75 	ble.w	800fe92 <_printf_float+0x21a>
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	4652      	mov	r2, sl
 800ffac:	4631      	mov	r1, r6
 800ffae:	4628      	mov	r0, r5
 800ffb0:	47b8      	blx	r7
 800ffb2:	3001      	adds	r0, #1
 800ffb4:	f43f aeae 	beq.w	800fd14 <_printf_float+0x9c>
 800ffb8:	f108 0801 	add.w	r8, r8, #1
 800ffbc:	e7ec      	b.n	800ff98 <_printf_float+0x320>
 800ffbe:	4613      	mov	r3, r2
 800ffc0:	4631      	mov	r1, r6
 800ffc2:	4642      	mov	r2, r8
 800ffc4:	4628      	mov	r0, r5
 800ffc6:	47b8      	blx	r7
 800ffc8:	3001      	adds	r0, #1
 800ffca:	d1bf      	bne.n	800ff4c <_printf_float+0x2d4>
 800ffcc:	e6a2      	b.n	800fd14 <_printf_float+0x9c>
 800ffce:	2301      	movs	r3, #1
 800ffd0:	4631      	mov	r1, r6
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	9204      	str	r2, [sp, #16]
 800ffd6:	47b8      	blx	r7
 800ffd8:	3001      	adds	r0, #1
 800ffda:	f43f ae9b 	beq.w	800fd14 <_printf_float+0x9c>
 800ffde:	9b05      	ldr	r3, [sp, #20]
 800ffe0:	9a04      	ldr	r2, [sp, #16]
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	9305      	str	r3, [sp, #20]
 800ffe6:	e7b7      	b.n	800ff58 <_printf_float+0x2e0>
 800ffe8:	4653      	mov	r3, sl
 800ffea:	465a      	mov	r2, fp
 800ffec:	4631      	mov	r1, r6
 800ffee:	4628      	mov	r0, r5
 800fff0:	47b8      	blx	r7
 800fff2:	3001      	adds	r0, #1
 800fff4:	d1be      	bne.n	800ff74 <_printf_float+0x2fc>
 800fff6:	e68d      	b.n	800fd14 <_printf_float+0x9c>
 800fff8:	9a04      	ldr	r2, [sp, #16]
 800fffa:	464b      	mov	r3, r9
 800fffc:	4442      	add	r2, r8
 800fffe:	4631      	mov	r1, r6
 8010000:	4628      	mov	r0, r5
 8010002:	47b8      	blx	r7
 8010004:	3001      	adds	r0, #1
 8010006:	d1c1      	bne.n	800ff8c <_printf_float+0x314>
 8010008:	e684      	b.n	800fd14 <_printf_float+0x9c>
 801000a:	9a08      	ldr	r2, [sp, #32]
 801000c:	2a01      	cmp	r2, #1
 801000e:	dc01      	bgt.n	8010014 <_printf_float+0x39c>
 8010010:	07db      	lsls	r3, r3, #31
 8010012:	d537      	bpl.n	8010084 <_printf_float+0x40c>
 8010014:	2301      	movs	r3, #1
 8010016:	4642      	mov	r2, r8
 8010018:	4631      	mov	r1, r6
 801001a:	4628      	mov	r0, r5
 801001c:	47b8      	blx	r7
 801001e:	3001      	adds	r0, #1
 8010020:	f43f ae78 	beq.w	800fd14 <_printf_float+0x9c>
 8010024:	4653      	mov	r3, sl
 8010026:	465a      	mov	r2, fp
 8010028:	4631      	mov	r1, r6
 801002a:	4628      	mov	r0, r5
 801002c:	47b8      	blx	r7
 801002e:	3001      	adds	r0, #1
 8010030:	f43f ae70 	beq.w	800fd14 <_printf_float+0x9c>
 8010034:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010038:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801003c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010040:	d01b      	beq.n	801007a <_printf_float+0x402>
 8010042:	9b08      	ldr	r3, [sp, #32]
 8010044:	f108 0201 	add.w	r2, r8, #1
 8010048:	3b01      	subs	r3, #1
 801004a:	4631      	mov	r1, r6
 801004c:	4628      	mov	r0, r5
 801004e:	47b8      	blx	r7
 8010050:	3001      	adds	r0, #1
 8010052:	d10e      	bne.n	8010072 <_printf_float+0x3fa>
 8010054:	e65e      	b.n	800fd14 <_printf_float+0x9c>
 8010056:	2301      	movs	r3, #1
 8010058:	464a      	mov	r2, r9
 801005a:	4631      	mov	r1, r6
 801005c:	4628      	mov	r0, r5
 801005e:	47b8      	blx	r7
 8010060:	3001      	adds	r0, #1
 8010062:	f43f ae57 	beq.w	800fd14 <_printf_float+0x9c>
 8010066:	f108 0801 	add.w	r8, r8, #1
 801006a:	9b08      	ldr	r3, [sp, #32]
 801006c:	3b01      	subs	r3, #1
 801006e:	4543      	cmp	r3, r8
 8010070:	dcf1      	bgt.n	8010056 <_printf_float+0x3de>
 8010072:	9b04      	ldr	r3, [sp, #16]
 8010074:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010078:	e6db      	b.n	800fe32 <_printf_float+0x1ba>
 801007a:	f04f 0800 	mov.w	r8, #0
 801007e:	f104 091a 	add.w	r9, r4, #26
 8010082:	e7f2      	b.n	801006a <_printf_float+0x3f2>
 8010084:	2301      	movs	r3, #1
 8010086:	4642      	mov	r2, r8
 8010088:	e7df      	b.n	801004a <_printf_float+0x3d2>
 801008a:	2301      	movs	r3, #1
 801008c:	464a      	mov	r2, r9
 801008e:	4631      	mov	r1, r6
 8010090:	4628      	mov	r0, r5
 8010092:	47b8      	blx	r7
 8010094:	3001      	adds	r0, #1
 8010096:	f43f ae3d 	beq.w	800fd14 <_printf_float+0x9c>
 801009a:	f108 0801 	add.w	r8, r8, #1
 801009e:	68e3      	ldr	r3, [r4, #12]
 80100a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100a2:	1a5b      	subs	r3, r3, r1
 80100a4:	4543      	cmp	r3, r8
 80100a6:	dcf0      	bgt.n	801008a <_printf_float+0x412>
 80100a8:	e6f7      	b.n	800fe9a <_printf_float+0x222>
 80100aa:	f04f 0800 	mov.w	r8, #0
 80100ae:	f104 0919 	add.w	r9, r4, #25
 80100b2:	e7f4      	b.n	801009e <_printf_float+0x426>

080100b4 <_printf_common>:
 80100b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100b8:	4616      	mov	r6, r2
 80100ba:	4699      	mov	r9, r3
 80100bc:	688a      	ldr	r2, [r1, #8]
 80100be:	690b      	ldr	r3, [r1, #16]
 80100c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80100c4:	4293      	cmp	r3, r2
 80100c6:	bfb8      	it	lt
 80100c8:	4613      	movlt	r3, r2
 80100ca:	6033      	str	r3, [r6, #0]
 80100cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100d0:	4607      	mov	r7, r0
 80100d2:	460c      	mov	r4, r1
 80100d4:	b10a      	cbz	r2, 80100da <_printf_common+0x26>
 80100d6:	3301      	adds	r3, #1
 80100d8:	6033      	str	r3, [r6, #0]
 80100da:	6823      	ldr	r3, [r4, #0]
 80100dc:	0699      	lsls	r1, r3, #26
 80100de:	bf42      	ittt	mi
 80100e0:	6833      	ldrmi	r3, [r6, #0]
 80100e2:	3302      	addmi	r3, #2
 80100e4:	6033      	strmi	r3, [r6, #0]
 80100e6:	6825      	ldr	r5, [r4, #0]
 80100e8:	f015 0506 	ands.w	r5, r5, #6
 80100ec:	d106      	bne.n	80100fc <_printf_common+0x48>
 80100ee:	f104 0a19 	add.w	sl, r4, #25
 80100f2:	68e3      	ldr	r3, [r4, #12]
 80100f4:	6832      	ldr	r2, [r6, #0]
 80100f6:	1a9b      	subs	r3, r3, r2
 80100f8:	42ab      	cmp	r3, r5
 80100fa:	dc26      	bgt.n	801014a <_printf_common+0x96>
 80100fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010100:	1e13      	subs	r3, r2, #0
 8010102:	6822      	ldr	r2, [r4, #0]
 8010104:	bf18      	it	ne
 8010106:	2301      	movne	r3, #1
 8010108:	0692      	lsls	r2, r2, #26
 801010a:	d42b      	bmi.n	8010164 <_printf_common+0xb0>
 801010c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010110:	4649      	mov	r1, r9
 8010112:	4638      	mov	r0, r7
 8010114:	47c0      	blx	r8
 8010116:	3001      	adds	r0, #1
 8010118:	d01e      	beq.n	8010158 <_printf_common+0xa4>
 801011a:	6823      	ldr	r3, [r4, #0]
 801011c:	68e5      	ldr	r5, [r4, #12]
 801011e:	6832      	ldr	r2, [r6, #0]
 8010120:	f003 0306 	and.w	r3, r3, #6
 8010124:	2b04      	cmp	r3, #4
 8010126:	bf08      	it	eq
 8010128:	1aad      	subeq	r5, r5, r2
 801012a:	68a3      	ldr	r3, [r4, #8]
 801012c:	6922      	ldr	r2, [r4, #16]
 801012e:	bf0c      	ite	eq
 8010130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010134:	2500      	movne	r5, #0
 8010136:	4293      	cmp	r3, r2
 8010138:	bfc4      	itt	gt
 801013a:	1a9b      	subgt	r3, r3, r2
 801013c:	18ed      	addgt	r5, r5, r3
 801013e:	2600      	movs	r6, #0
 8010140:	341a      	adds	r4, #26
 8010142:	42b5      	cmp	r5, r6
 8010144:	d11a      	bne.n	801017c <_printf_common+0xc8>
 8010146:	2000      	movs	r0, #0
 8010148:	e008      	b.n	801015c <_printf_common+0xa8>
 801014a:	2301      	movs	r3, #1
 801014c:	4652      	mov	r2, sl
 801014e:	4649      	mov	r1, r9
 8010150:	4638      	mov	r0, r7
 8010152:	47c0      	blx	r8
 8010154:	3001      	adds	r0, #1
 8010156:	d103      	bne.n	8010160 <_printf_common+0xac>
 8010158:	f04f 30ff 	mov.w	r0, #4294967295
 801015c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010160:	3501      	adds	r5, #1
 8010162:	e7c6      	b.n	80100f2 <_printf_common+0x3e>
 8010164:	18e1      	adds	r1, r4, r3
 8010166:	1c5a      	adds	r2, r3, #1
 8010168:	2030      	movs	r0, #48	; 0x30
 801016a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801016e:	4422      	add	r2, r4
 8010170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010178:	3302      	adds	r3, #2
 801017a:	e7c7      	b.n	801010c <_printf_common+0x58>
 801017c:	2301      	movs	r3, #1
 801017e:	4622      	mov	r2, r4
 8010180:	4649      	mov	r1, r9
 8010182:	4638      	mov	r0, r7
 8010184:	47c0      	blx	r8
 8010186:	3001      	adds	r0, #1
 8010188:	d0e6      	beq.n	8010158 <_printf_common+0xa4>
 801018a:	3601      	adds	r6, #1
 801018c:	e7d9      	b.n	8010142 <_printf_common+0x8e>
	...

08010190 <_printf_i>:
 8010190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010194:	460c      	mov	r4, r1
 8010196:	4691      	mov	r9, r2
 8010198:	7e27      	ldrb	r7, [r4, #24]
 801019a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801019c:	2f78      	cmp	r7, #120	; 0x78
 801019e:	4680      	mov	r8, r0
 80101a0:	469a      	mov	sl, r3
 80101a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80101a6:	d807      	bhi.n	80101b8 <_printf_i+0x28>
 80101a8:	2f62      	cmp	r7, #98	; 0x62
 80101aa:	d80a      	bhi.n	80101c2 <_printf_i+0x32>
 80101ac:	2f00      	cmp	r7, #0
 80101ae:	f000 80d8 	beq.w	8010362 <_printf_i+0x1d2>
 80101b2:	2f58      	cmp	r7, #88	; 0x58
 80101b4:	f000 80a3 	beq.w	80102fe <_printf_i+0x16e>
 80101b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80101bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80101c0:	e03a      	b.n	8010238 <_printf_i+0xa8>
 80101c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80101c6:	2b15      	cmp	r3, #21
 80101c8:	d8f6      	bhi.n	80101b8 <_printf_i+0x28>
 80101ca:	a001      	add	r0, pc, #4	; (adr r0, 80101d0 <_printf_i+0x40>)
 80101cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80101d0:	08010229 	.word	0x08010229
 80101d4:	0801023d 	.word	0x0801023d
 80101d8:	080101b9 	.word	0x080101b9
 80101dc:	080101b9 	.word	0x080101b9
 80101e0:	080101b9 	.word	0x080101b9
 80101e4:	080101b9 	.word	0x080101b9
 80101e8:	0801023d 	.word	0x0801023d
 80101ec:	080101b9 	.word	0x080101b9
 80101f0:	080101b9 	.word	0x080101b9
 80101f4:	080101b9 	.word	0x080101b9
 80101f8:	080101b9 	.word	0x080101b9
 80101fc:	08010349 	.word	0x08010349
 8010200:	0801026d 	.word	0x0801026d
 8010204:	0801032b 	.word	0x0801032b
 8010208:	080101b9 	.word	0x080101b9
 801020c:	080101b9 	.word	0x080101b9
 8010210:	0801036b 	.word	0x0801036b
 8010214:	080101b9 	.word	0x080101b9
 8010218:	0801026d 	.word	0x0801026d
 801021c:	080101b9 	.word	0x080101b9
 8010220:	080101b9 	.word	0x080101b9
 8010224:	08010333 	.word	0x08010333
 8010228:	680b      	ldr	r3, [r1, #0]
 801022a:	1d1a      	adds	r2, r3, #4
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	600a      	str	r2, [r1, #0]
 8010230:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010238:	2301      	movs	r3, #1
 801023a:	e0a3      	b.n	8010384 <_printf_i+0x1f4>
 801023c:	6825      	ldr	r5, [r4, #0]
 801023e:	6808      	ldr	r0, [r1, #0]
 8010240:	062e      	lsls	r6, r5, #24
 8010242:	f100 0304 	add.w	r3, r0, #4
 8010246:	d50a      	bpl.n	801025e <_printf_i+0xce>
 8010248:	6805      	ldr	r5, [r0, #0]
 801024a:	600b      	str	r3, [r1, #0]
 801024c:	2d00      	cmp	r5, #0
 801024e:	da03      	bge.n	8010258 <_printf_i+0xc8>
 8010250:	232d      	movs	r3, #45	; 0x2d
 8010252:	426d      	negs	r5, r5
 8010254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010258:	485e      	ldr	r0, [pc, #376]	; (80103d4 <_printf_i+0x244>)
 801025a:	230a      	movs	r3, #10
 801025c:	e019      	b.n	8010292 <_printf_i+0x102>
 801025e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010262:	6805      	ldr	r5, [r0, #0]
 8010264:	600b      	str	r3, [r1, #0]
 8010266:	bf18      	it	ne
 8010268:	b22d      	sxthne	r5, r5
 801026a:	e7ef      	b.n	801024c <_printf_i+0xbc>
 801026c:	680b      	ldr	r3, [r1, #0]
 801026e:	6825      	ldr	r5, [r4, #0]
 8010270:	1d18      	adds	r0, r3, #4
 8010272:	6008      	str	r0, [r1, #0]
 8010274:	0628      	lsls	r0, r5, #24
 8010276:	d501      	bpl.n	801027c <_printf_i+0xec>
 8010278:	681d      	ldr	r5, [r3, #0]
 801027a:	e002      	b.n	8010282 <_printf_i+0xf2>
 801027c:	0669      	lsls	r1, r5, #25
 801027e:	d5fb      	bpl.n	8010278 <_printf_i+0xe8>
 8010280:	881d      	ldrh	r5, [r3, #0]
 8010282:	4854      	ldr	r0, [pc, #336]	; (80103d4 <_printf_i+0x244>)
 8010284:	2f6f      	cmp	r7, #111	; 0x6f
 8010286:	bf0c      	ite	eq
 8010288:	2308      	moveq	r3, #8
 801028a:	230a      	movne	r3, #10
 801028c:	2100      	movs	r1, #0
 801028e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010292:	6866      	ldr	r6, [r4, #4]
 8010294:	60a6      	str	r6, [r4, #8]
 8010296:	2e00      	cmp	r6, #0
 8010298:	bfa2      	ittt	ge
 801029a:	6821      	ldrge	r1, [r4, #0]
 801029c:	f021 0104 	bicge.w	r1, r1, #4
 80102a0:	6021      	strge	r1, [r4, #0]
 80102a2:	b90d      	cbnz	r5, 80102a8 <_printf_i+0x118>
 80102a4:	2e00      	cmp	r6, #0
 80102a6:	d04d      	beq.n	8010344 <_printf_i+0x1b4>
 80102a8:	4616      	mov	r6, r2
 80102aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80102ae:	fb03 5711 	mls	r7, r3, r1, r5
 80102b2:	5dc7      	ldrb	r7, [r0, r7]
 80102b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80102b8:	462f      	mov	r7, r5
 80102ba:	42bb      	cmp	r3, r7
 80102bc:	460d      	mov	r5, r1
 80102be:	d9f4      	bls.n	80102aa <_printf_i+0x11a>
 80102c0:	2b08      	cmp	r3, #8
 80102c2:	d10b      	bne.n	80102dc <_printf_i+0x14c>
 80102c4:	6823      	ldr	r3, [r4, #0]
 80102c6:	07df      	lsls	r7, r3, #31
 80102c8:	d508      	bpl.n	80102dc <_printf_i+0x14c>
 80102ca:	6923      	ldr	r3, [r4, #16]
 80102cc:	6861      	ldr	r1, [r4, #4]
 80102ce:	4299      	cmp	r1, r3
 80102d0:	bfde      	ittt	le
 80102d2:	2330      	movle	r3, #48	; 0x30
 80102d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80102d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80102dc:	1b92      	subs	r2, r2, r6
 80102de:	6122      	str	r2, [r4, #16]
 80102e0:	f8cd a000 	str.w	sl, [sp]
 80102e4:	464b      	mov	r3, r9
 80102e6:	aa03      	add	r2, sp, #12
 80102e8:	4621      	mov	r1, r4
 80102ea:	4640      	mov	r0, r8
 80102ec:	f7ff fee2 	bl	80100b4 <_printf_common>
 80102f0:	3001      	adds	r0, #1
 80102f2:	d14c      	bne.n	801038e <_printf_i+0x1fe>
 80102f4:	f04f 30ff 	mov.w	r0, #4294967295
 80102f8:	b004      	add	sp, #16
 80102fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102fe:	4835      	ldr	r0, [pc, #212]	; (80103d4 <_printf_i+0x244>)
 8010300:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010304:	6823      	ldr	r3, [r4, #0]
 8010306:	680e      	ldr	r6, [r1, #0]
 8010308:	061f      	lsls	r7, r3, #24
 801030a:	f856 5b04 	ldr.w	r5, [r6], #4
 801030e:	600e      	str	r6, [r1, #0]
 8010310:	d514      	bpl.n	801033c <_printf_i+0x1ac>
 8010312:	07d9      	lsls	r1, r3, #31
 8010314:	bf44      	itt	mi
 8010316:	f043 0320 	orrmi.w	r3, r3, #32
 801031a:	6023      	strmi	r3, [r4, #0]
 801031c:	b91d      	cbnz	r5, 8010326 <_printf_i+0x196>
 801031e:	6823      	ldr	r3, [r4, #0]
 8010320:	f023 0320 	bic.w	r3, r3, #32
 8010324:	6023      	str	r3, [r4, #0]
 8010326:	2310      	movs	r3, #16
 8010328:	e7b0      	b.n	801028c <_printf_i+0xfc>
 801032a:	6823      	ldr	r3, [r4, #0]
 801032c:	f043 0320 	orr.w	r3, r3, #32
 8010330:	6023      	str	r3, [r4, #0]
 8010332:	2378      	movs	r3, #120	; 0x78
 8010334:	4828      	ldr	r0, [pc, #160]	; (80103d8 <_printf_i+0x248>)
 8010336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801033a:	e7e3      	b.n	8010304 <_printf_i+0x174>
 801033c:	065e      	lsls	r6, r3, #25
 801033e:	bf48      	it	mi
 8010340:	b2ad      	uxthmi	r5, r5
 8010342:	e7e6      	b.n	8010312 <_printf_i+0x182>
 8010344:	4616      	mov	r6, r2
 8010346:	e7bb      	b.n	80102c0 <_printf_i+0x130>
 8010348:	680b      	ldr	r3, [r1, #0]
 801034a:	6826      	ldr	r6, [r4, #0]
 801034c:	6960      	ldr	r0, [r4, #20]
 801034e:	1d1d      	adds	r5, r3, #4
 8010350:	600d      	str	r5, [r1, #0]
 8010352:	0635      	lsls	r5, r6, #24
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	d501      	bpl.n	801035c <_printf_i+0x1cc>
 8010358:	6018      	str	r0, [r3, #0]
 801035a:	e002      	b.n	8010362 <_printf_i+0x1d2>
 801035c:	0671      	lsls	r1, r6, #25
 801035e:	d5fb      	bpl.n	8010358 <_printf_i+0x1c8>
 8010360:	8018      	strh	r0, [r3, #0]
 8010362:	2300      	movs	r3, #0
 8010364:	6123      	str	r3, [r4, #16]
 8010366:	4616      	mov	r6, r2
 8010368:	e7ba      	b.n	80102e0 <_printf_i+0x150>
 801036a:	680b      	ldr	r3, [r1, #0]
 801036c:	1d1a      	adds	r2, r3, #4
 801036e:	600a      	str	r2, [r1, #0]
 8010370:	681e      	ldr	r6, [r3, #0]
 8010372:	6862      	ldr	r2, [r4, #4]
 8010374:	2100      	movs	r1, #0
 8010376:	4630      	mov	r0, r6
 8010378:	f7ef ffba 	bl	80002f0 <memchr>
 801037c:	b108      	cbz	r0, 8010382 <_printf_i+0x1f2>
 801037e:	1b80      	subs	r0, r0, r6
 8010380:	6060      	str	r0, [r4, #4]
 8010382:	6863      	ldr	r3, [r4, #4]
 8010384:	6123      	str	r3, [r4, #16]
 8010386:	2300      	movs	r3, #0
 8010388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801038c:	e7a8      	b.n	80102e0 <_printf_i+0x150>
 801038e:	6923      	ldr	r3, [r4, #16]
 8010390:	4632      	mov	r2, r6
 8010392:	4649      	mov	r1, r9
 8010394:	4640      	mov	r0, r8
 8010396:	47d0      	blx	sl
 8010398:	3001      	adds	r0, #1
 801039a:	d0ab      	beq.n	80102f4 <_printf_i+0x164>
 801039c:	6823      	ldr	r3, [r4, #0]
 801039e:	079b      	lsls	r3, r3, #30
 80103a0:	d413      	bmi.n	80103ca <_printf_i+0x23a>
 80103a2:	68e0      	ldr	r0, [r4, #12]
 80103a4:	9b03      	ldr	r3, [sp, #12]
 80103a6:	4298      	cmp	r0, r3
 80103a8:	bfb8      	it	lt
 80103aa:	4618      	movlt	r0, r3
 80103ac:	e7a4      	b.n	80102f8 <_printf_i+0x168>
 80103ae:	2301      	movs	r3, #1
 80103b0:	4632      	mov	r2, r6
 80103b2:	4649      	mov	r1, r9
 80103b4:	4640      	mov	r0, r8
 80103b6:	47d0      	blx	sl
 80103b8:	3001      	adds	r0, #1
 80103ba:	d09b      	beq.n	80102f4 <_printf_i+0x164>
 80103bc:	3501      	adds	r5, #1
 80103be:	68e3      	ldr	r3, [r4, #12]
 80103c0:	9903      	ldr	r1, [sp, #12]
 80103c2:	1a5b      	subs	r3, r3, r1
 80103c4:	42ab      	cmp	r3, r5
 80103c6:	dcf2      	bgt.n	80103ae <_printf_i+0x21e>
 80103c8:	e7eb      	b.n	80103a2 <_printf_i+0x212>
 80103ca:	2500      	movs	r5, #0
 80103cc:	f104 0619 	add.w	r6, r4, #25
 80103d0:	e7f5      	b.n	80103be <_printf_i+0x22e>
 80103d2:	bf00      	nop
 80103d4:	08012eee 	.word	0x08012eee
 80103d8:	08012eff 	.word	0x08012eff

080103dc <iprintf>:
 80103dc:	b40f      	push	{r0, r1, r2, r3}
 80103de:	4b0a      	ldr	r3, [pc, #40]	; (8010408 <iprintf+0x2c>)
 80103e0:	b513      	push	{r0, r1, r4, lr}
 80103e2:	681c      	ldr	r4, [r3, #0]
 80103e4:	b124      	cbz	r4, 80103f0 <iprintf+0x14>
 80103e6:	69a3      	ldr	r3, [r4, #24]
 80103e8:	b913      	cbnz	r3, 80103f0 <iprintf+0x14>
 80103ea:	4620      	mov	r0, r4
 80103ec:	f001 f86c 	bl	80114c8 <__sinit>
 80103f0:	ab05      	add	r3, sp, #20
 80103f2:	9a04      	ldr	r2, [sp, #16]
 80103f4:	68a1      	ldr	r1, [r4, #8]
 80103f6:	9301      	str	r3, [sp, #4]
 80103f8:	4620      	mov	r0, r4
 80103fa:	f001 fde7 	bl	8011fcc <_vfiprintf_r>
 80103fe:	b002      	add	sp, #8
 8010400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010404:	b004      	add	sp, #16
 8010406:	4770      	bx	lr
 8010408:	24000024 	.word	0x24000024

0801040c <_puts_r>:
 801040c:	b570      	push	{r4, r5, r6, lr}
 801040e:	460e      	mov	r6, r1
 8010410:	4605      	mov	r5, r0
 8010412:	b118      	cbz	r0, 801041c <_puts_r+0x10>
 8010414:	6983      	ldr	r3, [r0, #24]
 8010416:	b90b      	cbnz	r3, 801041c <_puts_r+0x10>
 8010418:	f001 f856 	bl	80114c8 <__sinit>
 801041c:	69ab      	ldr	r3, [r5, #24]
 801041e:	68ac      	ldr	r4, [r5, #8]
 8010420:	b913      	cbnz	r3, 8010428 <_puts_r+0x1c>
 8010422:	4628      	mov	r0, r5
 8010424:	f001 f850 	bl	80114c8 <__sinit>
 8010428:	4b2c      	ldr	r3, [pc, #176]	; (80104dc <_puts_r+0xd0>)
 801042a:	429c      	cmp	r4, r3
 801042c:	d120      	bne.n	8010470 <_puts_r+0x64>
 801042e:	686c      	ldr	r4, [r5, #4]
 8010430:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010432:	07db      	lsls	r3, r3, #31
 8010434:	d405      	bmi.n	8010442 <_puts_r+0x36>
 8010436:	89a3      	ldrh	r3, [r4, #12]
 8010438:	0598      	lsls	r0, r3, #22
 801043a:	d402      	bmi.n	8010442 <_puts_r+0x36>
 801043c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801043e:	f001 f8e6 	bl	801160e <__retarget_lock_acquire_recursive>
 8010442:	89a3      	ldrh	r3, [r4, #12]
 8010444:	0719      	lsls	r1, r3, #28
 8010446:	d51d      	bpl.n	8010484 <_puts_r+0x78>
 8010448:	6923      	ldr	r3, [r4, #16]
 801044a:	b1db      	cbz	r3, 8010484 <_puts_r+0x78>
 801044c:	3e01      	subs	r6, #1
 801044e:	68a3      	ldr	r3, [r4, #8]
 8010450:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010454:	3b01      	subs	r3, #1
 8010456:	60a3      	str	r3, [r4, #8]
 8010458:	bb39      	cbnz	r1, 80104aa <_puts_r+0x9e>
 801045a:	2b00      	cmp	r3, #0
 801045c:	da38      	bge.n	80104d0 <_puts_r+0xc4>
 801045e:	4622      	mov	r2, r4
 8010460:	210a      	movs	r1, #10
 8010462:	4628      	mov	r0, r5
 8010464:	f000 f848 	bl	80104f8 <__swbuf_r>
 8010468:	3001      	adds	r0, #1
 801046a:	d011      	beq.n	8010490 <_puts_r+0x84>
 801046c:	250a      	movs	r5, #10
 801046e:	e011      	b.n	8010494 <_puts_r+0x88>
 8010470:	4b1b      	ldr	r3, [pc, #108]	; (80104e0 <_puts_r+0xd4>)
 8010472:	429c      	cmp	r4, r3
 8010474:	d101      	bne.n	801047a <_puts_r+0x6e>
 8010476:	68ac      	ldr	r4, [r5, #8]
 8010478:	e7da      	b.n	8010430 <_puts_r+0x24>
 801047a:	4b1a      	ldr	r3, [pc, #104]	; (80104e4 <_puts_r+0xd8>)
 801047c:	429c      	cmp	r4, r3
 801047e:	bf08      	it	eq
 8010480:	68ec      	ldreq	r4, [r5, #12]
 8010482:	e7d5      	b.n	8010430 <_puts_r+0x24>
 8010484:	4621      	mov	r1, r4
 8010486:	4628      	mov	r0, r5
 8010488:	f000 f888 	bl	801059c <__swsetup_r>
 801048c:	2800      	cmp	r0, #0
 801048e:	d0dd      	beq.n	801044c <_puts_r+0x40>
 8010490:	f04f 35ff 	mov.w	r5, #4294967295
 8010494:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010496:	07da      	lsls	r2, r3, #31
 8010498:	d405      	bmi.n	80104a6 <_puts_r+0x9a>
 801049a:	89a3      	ldrh	r3, [r4, #12]
 801049c:	059b      	lsls	r3, r3, #22
 801049e:	d402      	bmi.n	80104a6 <_puts_r+0x9a>
 80104a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104a2:	f001 f8b5 	bl	8011610 <__retarget_lock_release_recursive>
 80104a6:	4628      	mov	r0, r5
 80104a8:	bd70      	pop	{r4, r5, r6, pc}
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	da04      	bge.n	80104b8 <_puts_r+0xac>
 80104ae:	69a2      	ldr	r2, [r4, #24]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	dc06      	bgt.n	80104c2 <_puts_r+0xb6>
 80104b4:	290a      	cmp	r1, #10
 80104b6:	d004      	beq.n	80104c2 <_puts_r+0xb6>
 80104b8:	6823      	ldr	r3, [r4, #0]
 80104ba:	1c5a      	adds	r2, r3, #1
 80104bc:	6022      	str	r2, [r4, #0]
 80104be:	7019      	strb	r1, [r3, #0]
 80104c0:	e7c5      	b.n	801044e <_puts_r+0x42>
 80104c2:	4622      	mov	r2, r4
 80104c4:	4628      	mov	r0, r5
 80104c6:	f000 f817 	bl	80104f8 <__swbuf_r>
 80104ca:	3001      	adds	r0, #1
 80104cc:	d1bf      	bne.n	801044e <_puts_r+0x42>
 80104ce:	e7df      	b.n	8010490 <_puts_r+0x84>
 80104d0:	6823      	ldr	r3, [r4, #0]
 80104d2:	250a      	movs	r5, #10
 80104d4:	1c5a      	adds	r2, r3, #1
 80104d6:	6022      	str	r2, [r4, #0]
 80104d8:	701d      	strb	r5, [r3, #0]
 80104da:	e7db      	b.n	8010494 <_puts_r+0x88>
 80104dc:	08012fc4 	.word	0x08012fc4
 80104e0:	08012fe4 	.word	0x08012fe4
 80104e4:	08012fa4 	.word	0x08012fa4

080104e8 <puts>:
 80104e8:	4b02      	ldr	r3, [pc, #8]	; (80104f4 <puts+0xc>)
 80104ea:	4601      	mov	r1, r0
 80104ec:	6818      	ldr	r0, [r3, #0]
 80104ee:	f7ff bf8d 	b.w	801040c <_puts_r>
 80104f2:	bf00      	nop
 80104f4:	24000024 	.word	0x24000024

080104f8 <__swbuf_r>:
 80104f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104fa:	460e      	mov	r6, r1
 80104fc:	4614      	mov	r4, r2
 80104fe:	4605      	mov	r5, r0
 8010500:	b118      	cbz	r0, 801050a <__swbuf_r+0x12>
 8010502:	6983      	ldr	r3, [r0, #24]
 8010504:	b90b      	cbnz	r3, 801050a <__swbuf_r+0x12>
 8010506:	f000 ffdf 	bl	80114c8 <__sinit>
 801050a:	4b21      	ldr	r3, [pc, #132]	; (8010590 <__swbuf_r+0x98>)
 801050c:	429c      	cmp	r4, r3
 801050e:	d12b      	bne.n	8010568 <__swbuf_r+0x70>
 8010510:	686c      	ldr	r4, [r5, #4]
 8010512:	69a3      	ldr	r3, [r4, #24]
 8010514:	60a3      	str	r3, [r4, #8]
 8010516:	89a3      	ldrh	r3, [r4, #12]
 8010518:	071a      	lsls	r2, r3, #28
 801051a:	d52f      	bpl.n	801057c <__swbuf_r+0x84>
 801051c:	6923      	ldr	r3, [r4, #16]
 801051e:	b36b      	cbz	r3, 801057c <__swbuf_r+0x84>
 8010520:	6923      	ldr	r3, [r4, #16]
 8010522:	6820      	ldr	r0, [r4, #0]
 8010524:	1ac0      	subs	r0, r0, r3
 8010526:	6963      	ldr	r3, [r4, #20]
 8010528:	b2f6      	uxtb	r6, r6
 801052a:	4283      	cmp	r3, r0
 801052c:	4637      	mov	r7, r6
 801052e:	dc04      	bgt.n	801053a <__swbuf_r+0x42>
 8010530:	4621      	mov	r1, r4
 8010532:	4628      	mov	r0, r5
 8010534:	f000 ff34 	bl	80113a0 <_fflush_r>
 8010538:	bb30      	cbnz	r0, 8010588 <__swbuf_r+0x90>
 801053a:	68a3      	ldr	r3, [r4, #8]
 801053c:	3b01      	subs	r3, #1
 801053e:	60a3      	str	r3, [r4, #8]
 8010540:	6823      	ldr	r3, [r4, #0]
 8010542:	1c5a      	adds	r2, r3, #1
 8010544:	6022      	str	r2, [r4, #0]
 8010546:	701e      	strb	r6, [r3, #0]
 8010548:	6963      	ldr	r3, [r4, #20]
 801054a:	3001      	adds	r0, #1
 801054c:	4283      	cmp	r3, r0
 801054e:	d004      	beq.n	801055a <__swbuf_r+0x62>
 8010550:	89a3      	ldrh	r3, [r4, #12]
 8010552:	07db      	lsls	r3, r3, #31
 8010554:	d506      	bpl.n	8010564 <__swbuf_r+0x6c>
 8010556:	2e0a      	cmp	r6, #10
 8010558:	d104      	bne.n	8010564 <__swbuf_r+0x6c>
 801055a:	4621      	mov	r1, r4
 801055c:	4628      	mov	r0, r5
 801055e:	f000 ff1f 	bl	80113a0 <_fflush_r>
 8010562:	b988      	cbnz	r0, 8010588 <__swbuf_r+0x90>
 8010564:	4638      	mov	r0, r7
 8010566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010568:	4b0a      	ldr	r3, [pc, #40]	; (8010594 <__swbuf_r+0x9c>)
 801056a:	429c      	cmp	r4, r3
 801056c:	d101      	bne.n	8010572 <__swbuf_r+0x7a>
 801056e:	68ac      	ldr	r4, [r5, #8]
 8010570:	e7cf      	b.n	8010512 <__swbuf_r+0x1a>
 8010572:	4b09      	ldr	r3, [pc, #36]	; (8010598 <__swbuf_r+0xa0>)
 8010574:	429c      	cmp	r4, r3
 8010576:	bf08      	it	eq
 8010578:	68ec      	ldreq	r4, [r5, #12]
 801057a:	e7ca      	b.n	8010512 <__swbuf_r+0x1a>
 801057c:	4621      	mov	r1, r4
 801057e:	4628      	mov	r0, r5
 8010580:	f000 f80c 	bl	801059c <__swsetup_r>
 8010584:	2800      	cmp	r0, #0
 8010586:	d0cb      	beq.n	8010520 <__swbuf_r+0x28>
 8010588:	f04f 37ff 	mov.w	r7, #4294967295
 801058c:	e7ea      	b.n	8010564 <__swbuf_r+0x6c>
 801058e:	bf00      	nop
 8010590:	08012fc4 	.word	0x08012fc4
 8010594:	08012fe4 	.word	0x08012fe4
 8010598:	08012fa4 	.word	0x08012fa4

0801059c <__swsetup_r>:
 801059c:	4b32      	ldr	r3, [pc, #200]	; (8010668 <__swsetup_r+0xcc>)
 801059e:	b570      	push	{r4, r5, r6, lr}
 80105a0:	681d      	ldr	r5, [r3, #0]
 80105a2:	4606      	mov	r6, r0
 80105a4:	460c      	mov	r4, r1
 80105a6:	b125      	cbz	r5, 80105b2 <__swsetup_r+0x16>
 80105a8:	69ab      	ldr	r3, [r5, #24]
 80105aa:	b913      	cbnz	r3, 80105b2 <__swsetup_r+0x16>
 80105ac:	4628      	mov	r0, r5
 80105ae:	f000 ff8b 	bl	80114c8 <__sinit>
 80105b2:	4b2e      	ldr	r3, [pc, #184]	; (801066c <__swsetup_r+0xd0>)
 80105b4:	429c      	cmp	r4, r3
 80105b6:	d10f      	bne.n	80105d8 <__swsetup_r+0x3c>
 80105b8:	686c      	ldr	r4, [r5, #4]
 80105ba:	89a3      	ldrh	r3, [r4, #12]
 80105bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80105c0:	0719      	lsls	r1, r3, #28
 80105c2:	d42c      	bmi.n	801061e <__swsetup_r+0x82>
 80105c4:	06dd      	lsls	r5, r3, #27
 80105c6:	d411      	bmi.n	80105ec <__swsetup_r+0x50>
 80105c8:	2309      	movs	r3, #9
 80105ca:	6033      	str	r3, [r6, #0]
 80105cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80105d0:	81a3      	strh	r3, [r4, #12]
 80105d2:	f04f 30ff 	mov.w	r0, #4294967295
 80105d6:	e03e      	b.n	8010656 <__swsetup_r+0xba>
 80105d8:	4b25      	ldr	r3, [pc, #148]	; (8010670 <__swsetup_r+0xd4>)
 80105da:	429c      	cmp	r4, r3
 80105dc:	d101      	bne.n	80105e2 <__swsetup_r+0x46>
 80105de:	68ac      	ldr	r4, [r5, #8]
 80105e0:	e7eb      	b.n	80105ba <__swsetup_r+0x1e>
 80105e2:	4b24      	ldr	r3, [pc, #144]	; (8010674 <__swsetup_r+0xd8>)
 80105e4:	429c      	cmp	r4, r3
 80105e6:	bf08      	it	eq
 80105e8:	68ec      	ldreq	r4, [r5, #12]
 80105ea:	e7e6      	b.n	80105ba <__swsetup_r+0x1e>
 80105ec:	0758      	lsls	r0, r3, #29
 80105ee:	d512      	bpl.n	8010616 <__swsetup_r+0x7a>
 80105f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105f2:	b141      	cbz	r1, 8010606 <__swsetup_r+0x6a>
 80105f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105f8:	4299      	cmp	r1, r3
 80105fa:	d002      	beq.n	8010602 <__swsetup_r+0x66>
 80105fc:	4630      	mov	r0, r6
 80105fe:	f001 fc11 	bl	8011e24 <_free_r>
 8010602:	2300      	movs	r3, #0
 8010604:	6363      	str	r3, [r4, #52]	; 0x34
 8010606:	89a3      	ldrh	r3, [r4, #12]
 8010608:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801060c:	81a3      	strh	r3, [r4, #12]
 801060e:	2300      	movs	r3, #0
 8010610:	6063      	str	r3, [r4, #4]
 8010612:	6923      	ldr	r3, [r4, #16]
 8010614:	6023      	str	r3, [r4, #0]
 8010616:	89a3      	ldrh	r3, [r4, #12]
 8010618:	f043 0308 	orr.w	r3, r3, #8
 801061c:	81a3      	strh	r3, [r4, #12]
 801061e:	6923      	ldr	r3, [r4, #16]
 8010620:	b94b      	cbnz	r3, 8010636 <__swsetup_r+0x9a>
 8010622:	89a3      	ldrh	r3, [r4, #12]
 8010624:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801062c:	d003      	beq.n	8010636 <__swsetup_r+0x9a>
 801062e:	4621      	mov	r1, r4
 8010630:	4630      	mov	r0, r6
 8010632:	f001 f813 	bl	801165c <__smakebuf_r>
 8010636:	89a0      	ldrh	r0, [r4, #12]
 8010638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801063c:	f010 0301 	ands.w	r3, r0, #1
 8010640:	d00a      	beq.n	8010658 <__swsetup_r+0xbc>
 8010642:	2300      	movs	r3, #0
 8010644:	60a3      	str	r3, [r4, #8]
 8010646:	6963      	ldr	r3, [r4, #20]
 8010648:	425b      	negs	r3, r3
 801064a:	61a3      	str	r3, [r4, #24]
 801064c:	6923      	ldr	r3, [r4, #16]
 801064e:	b943      	cbnz	r3, 8010662 <__swsetup_r+0xc6>
 8010650:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010654:	d1ba      	bne.n	80105cc <__swsetup_r+0x30>
 8010656:	bd70      	pop	{r4, r5, r6, pc}
 8010658:	0781      	lsls	r1, r0, #30
 801065a:	bf58      	it	pl
 801065c:	6963      	ldrpl	r3, [r4, #20]
 801065e:	60a3      	str	r3, [r4, #8]
 8010660:	e7f4      	b.n	801064c <__swsetup_r+0xb0>
 8010662:	2000      	movs	r0, #0
 8010664:	e7f7      	b.n	8010656 <__swsetup_r+0xba>
 8010666:	bf00      	nop
 8010668:	24000024 	.word	0x24000024
 801066c:	08012fc4 	.word	0x08012fc4
 8010670:	08012fe4 	.word	0x08012fe4
 8010674:	08012fa4 	.word	0x08012fa4

08010678 <quorem>:
 8010678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801067c:	6903      	ldr	r3, [r0, #16]
 801067e:	690c      	ldr	r4, [r1, #16]
 8010680:	42a3      	cmp	r3, r4
 8010682:	4607      	mov	r7, r0
 8010684:	f2c0 8081 	blt.w	801078a <quorem+0x112>
 8010688:	3c01      	subs	r4, #1
 801068a:	f101 0814 	add.w	r8, r1, #20
 801068e:	f100 0514 	add.w	r5, r0, #20
 8010692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010696:	9301      	str	r3, [sp, #4]
 8010698:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801069c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80106a0:	3301      	adds	r3, #1
 80106a2:	429a      	cmp	r2, r3
 80106a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80106a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80106ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80106b0:	d331      	bcc.n	8010716 <quorem+0x9e>
 80106b2:	f04f 0e00 	mov.w	lr, #0
 80106b6:	4640      	mov	r0, r8
 80106b8:	46ac      	mov	ip, r5
 80106ba:	46f2      	mov	sl, lr
 80106bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80106c0:	b293      	uxth	r3, r2
 80106c2:	fb06 e303 	mla	r3, r6, r3, lr
 80106c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80106ca:	b29b      	uxth	r3, r3
 80106cc:	ebaa 0303 	sub.w	r3, sl, r3
 80106d0:	0c12      	lsrs	r2, r2, #16
 80106d2:	f8dc a000 	ldr.w	sl, [ip]
 80106d6:	fb06 e202 	mla	r2, r6, r2, lr
 80106da:	fa13 f38a 	uxtah	r3, r3, sl
 80106de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80106e2:	fa1f fa82 	uxth.w	sl, r2
 80106e6:	f8dc 2000 	ldr.w	r2, [ip]
 80106ea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80106ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106f8:	4581      	cmp	r9, r0
 80106fa:	f84c 3b04 	str.w	r3, [ip], #4
 80106fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010702:	d2db      	bcs.n	80106bc <quorem+0x44>
 8010704:	f855 300b 	ldr.w	r3, [r5, fp]
 8010708:	b92b      	cbnz	r3, 8010716 <quorem+0x9e>
 801070a:	9b01      	ldr	r3, [sp, #4]
 801070c:	3b04      	subs	r3, #4
 801070e:	429d      	cmp	r5, r3
 8010710:	461a      	mov	r2, r3
 8010712:	d32e      	bcc.n	8010772 <quorem+0xfa>
 8010714:	613c      	str	r4, [r7, #16]
 8010716:	4638      	mov	r0, r7
 8010718:	f001 fa74 	bl	8011c04 <__mcmp>
 801071c:	2800      	cmp	r0, #0
 801071e:	db24      	blt.n	801076a <quorem+0xf2>
 8010720:	3601      	adds	r6, #1
 8010722:	4628      	mov	r0, r5
 8010724:	f04f 0c00 	mov.w	ip, #0
 8010728:	f858 2b04 	ldr.w	r2, [r8], #4
 801072c:	f8d0 e000 	ldr.w	lr, [r0]
 8010730:	b293      	uxth	r3, r2
 8010732:	ebac 0303 	sub.w	r3, ip, r3
 8010736:	0c12      	lsrs	r2, r2, #16
 8010738:	fa13 f38e 	uxtah	r3, r3, lr
 801073c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010740:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010744:	b29b      	uxth	r3, r3
 8010746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801074a:	45c1      	cmp	r9, r8
 801074c:	f840 3b04 	str.w	r3, [r0], #4
 8010750:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010754:	d2e8      	bcs.n	8010728 <quorem+0xb0>
 8010756:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801075a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801075e:	b922      	cbnz	r2, 801076a <quorem+0xf2>
 8010760:	3b04      	subs	r3, #4
 8010762:	429d      	cmp	r5, r3
 8010764:	461a      	mov	r2, r3
 8010766:	d30a      	bcc.n	801077e <quorem+0x106>
 8010768:	613c      	str	r4, [r7, #16]
 801076a:	4630      	mov	r0, r6
 801076c:	b003      	add	sp, #12
 801076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010772:	6812      	ldr	r2, [r2, #0]
 8010774:	3b04      	subs	r3, #4
 8010776:	2a00      	cmp	r2, #0
 8010778:	d1cc      	bne.n	8010714 <quorem+0x9c>
 801077a:	3c01      	subs	r4, #1
 801077c:	e7c7      	b.n	801070e <quorem+0x96>
 801077e:	6812      	ldr	r2, [r2, #0]
 8010780:	3b04      	subs	r3, #4
 8010782:	2a00      	cmp	r2, #0
 8010784:	d1f0      	bne.n	8010768 <quorem+0xf0>
 8010786:	3c01      	subs	r4, #1
 8010788:	e7eb      	b.n	8010762 <quorem+0xea>
 801078a:	2000      	movs	r0, #0
 801078c:	e7ee      	b.n	801076c <quorem+0xf4>
	...

08010790 <_dtoa_r>:
 8010790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010794:	ec59 8b10 	vmov	r8, r9, d0
 8010798:	b095      	sub	sp, #84	; 0x54
 801079a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801079c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801079e:	9107      	str	r1, [sp, #28]
 80107a0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80107a4:	4606      	mov	r6, r0
 80107a6:	9209      	str	r2, [sp, #36]	; 0x24
 80107a8:	9310      	str	r3, [sp, #64]	; 0x40
 80107aa:	b975      	cbnz	r5, 80107ca <_dtoa_r+0x3a>
 80107ac:	2010      	movs	r0, #16
 80107ae:	f000 ff95 	bl	80116dc <malloc>
 80107b2:	4602      	mov	r2, r0
 80107b4:	6270      	str	r0, [r6, #36]	; 0x24
 80107b6:	b920      	cbnz	r0, 80107c2 <_dtoa_r+0x32>
 80107b8:	4bab      	ldr	r3, [pc, #684]	; (8010a68 <_dtoa_r+0x2d8>)
 80107ba:	21ea      	movs	r1, #234	; 0xea
 80107bc:	48ab      	ldr	r0, [pc, #684]	; (8010a6c <_dtoa_r+0x2dc>)
 80107be:	f001 fd9b 	bl	80122f8 <__assert_func>
 80107c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80107c6:	6005      	str	r5, [r0, #0]
 80107c8:	60c5      	str	r5, [r0, #12]
 80107ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80107cc:	6819      	ldr	r1, [r3, #0]
 80107ce:	b151      	cbz	r1, 80107e6 <_dtoa_r+0x56>
 80107d0:	685a      	ldr	r2, [r3, #4]
 80107d2:	604a      	str	r2, [r1, #4]
 80107d4:	2301      	movs	r3, #1
 80107d6:	4093      	lsls	r3, r2
 80107d8:	608b      	str	r3, [r1, #8]
 80107da:	4630      	mov	r0, r6
 80107dc:	f000 ffd4 	bl	8011788 <_Bfree>
 80107e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80107e2:	2200      	movs	r2, #0
 80107e4:	601a      	str	r2, [r3, #0]
 80107e6:	f1b9 0300 	subs.w	r3, r9, #0
 80107ea:	bfbb      	ittet	lt
 80107ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80107f0:	9303      	strlt	r3, [sp, #12]
 80107f2:	2300      	movge	r3, #0
 80107f4:	2201      	movlt	r2, #1
 80107f6:	bfac      	ite	ge
 80107f8:	6023      	strge	r3, [r4, #0]
 80107fa:	6022      	strlt	r2, [r4, #0]
 80107fc:	4b9c      	ldr	r3, [pc, #624]	; (8010a70 <_dtoa_r+0x2e0>)
 80107fe:	9c03      	ldr	r4, [sp, #12]
 8010800:	43a3      	bics	r3, r4
 8010802:	d11a      	bne.n	801083a <_dtoa_r+0xaa>
 8010804:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010806:	f242 730f 	movw	r3, #9999	; 0x270f
 801080a:	6013      	str	r3, [r2, #0]
 801080c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010810:	ea53 0308 	orrs.w	r3, r3, r8
 8010814:	f000 8512 	beq.w	801123c <_dtoa_r+0xaac>
 8010818:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801081a:	b953      	cbnz	r3, 8010832 <_dtoa_r+0xa2>
 801081c:	4b95      	ldr	r3, [pc, #596]	; (8010a74 <_dtoa_r+0x2e4>)
 801081e:	e01f      	b.n	8010860 <_dtoa_r+0xd0>
 8010820:	4b95      	ldr	r3, [pc, #596]	; (8010a78 <_dtoa_r+0x2e8>)
 8010822:	9300      	str	r3, [sp, #0]
 8010824:	3308      	adds	r3, #8
 8010826:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010828:	6013      	str	r3, [r2, #0]
 801082a:	9800      	ldr	r0, [sp, #0]
 801082c:	b015      	add	sp, #84	; 0x54
 801082e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010832:	4b90      	ldr	r3, [pc, #576]	; (8010a74 <_dtoa_r+0x2e4>)
 8010834:	9300      	str	r3, [sp, #0]
 8010836:	3303      	adds	r3, #3
 8010838:	e7f5      	b.n	8010826 <_dtoa_r+0x96>
 801083a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801083e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010846:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801084a:	d10b      	bne.n	8010864 <_dtoa_r+0xd4>
 801084c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801084e:	2301      	movs	r3, #1
 8010850:	6013      	str	r3, [r2, #0]
 8010852:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010854:	2b00      	cmp	r3, #0
 8010856:	f000 84ee 	beq.w	8011236 <_dtoa_r+0xaa6>
 801085a:	4888      	ldr	r0, [pc, #544]	; (8010a7c <_dtoa_r+0x2ec>)
 801085c:	6018      	str	r0, [r3, #0]
 801085e:	1e43      	subs	r3, r0, #1
 8010860:	9300      	str	r3, [sp, #0]
 8010862:	e7e2      	b.n	801082a <_dtoa_r+0x9a>
 8010864:	a913      	add	r1, sp, #76	; 0x4c
 8010866:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801086a:	aa12      	add	r2, sp, #72	; 0x48
 801086c:	4630      	mov	r0, r6
 801086e:	f001 fa6d 	bl	8011d4c <__d2b>
 8010872:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8010876:	4605      	mov	r5, r0
 8010878:	9812      	ldr	r0, [sp, #72]	; 0x48
 801087a:	2900      	cmp	r1, #0
 801087c:	d047      	beq.n	801090e <_dtoa_r+0x17e>
 801087e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010880:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010884:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010888:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801088c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010890:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010894:	2400      	movs	r4, #0
 8010896:	ec43 2b16 	vmov	d6, r2, r3
 801089a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801089e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8010a50 <_dtoa_r+0x2c0>
 80108a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80108a6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8010a58 <_dtoa_r+0x2c8>
 80108aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80108ae:	eeb0 7b46 	vmov.f64	d7, d6
 80108b2:	ee06 1a90 	vmov	s13, r1
 80108b6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80108ba:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010a60 <_dtoa_r+0x2d0>
 80108be:	eea5 7b06 	vfma.f64	d7, d5, d6
 80108c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80108c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80108ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ce:	ee16 ba90 	vmov	fp, s13
 80108d2:	9411      	str	r4, [sp, #68]	; 0x44
 80108d4:	d508      	bpl.n	80108e8 <_dtoa_r+0x158>
 80108d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80108da:	eeb4 6b47 	vcmp.f64	d6, d7
 80108de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108e2:	bf18      	it	ne
 80108e4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80108e8:	f1bb 0f16 	cmp.w	fp, #22
 80108ec:	d832      	bhi.n	8010954 <_dtoa_r+0x1c4>
 80108ee:	4b64      	ldr	r3, [pc, #400]	; (8010a80 <_dtoa_r+0x2f0>)
 80108f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80108f4:	ed93 7b00 	vldr	d7, [r3]
 80108f8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80108fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010904:	d501      	bpl.n	801090a <_dtoa_r+0x17a>
 8010906:	f10b 3bff 	add.w	fp, fp, #4294967295
 801090a:	2300      	movs	r3, #0
 801090c:	e023      	b.n	8010956 <_dtoa_r+0x1c6>
 801090e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010910:	4401      	add	r1, r0
 8010912:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8010916:	2b20      	cmp	r3, #32
 8010918:	bfc3      	ittte	gt
 801091a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801091e:	fa04 f303 	lslgt.w	r3, r4, r3
 8010922:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8010926:	f1c3 0320 	rsble	r3, r3, #32
 801092a:	bfc6      	itte	gt
 801092c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8010930:	ea43 0308 	orrgt.w	r3, r3, r8
 8010934:	fa08 f303 	lslle.w	r3, r8, r3
 8010938:	ee07 3a90 	vmov	s15, r3
 801093c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010940:	3901      	subs	r1, #1
 8010942:	ed8d 7b00 	vstr	d7, [sp]
 8010946:	9c01      	ldr	r4, [sp, #4]
 8010948:	e9dd 2300 	ldrd	r2, r3, [sp]
 801094c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8010950:	2401      	movs	r4, #1
 8010952:	e7a0      	b.n	8010896 <_dtoa_r+0x106>
 8010954:	2301      	movs	r3, #1
 8010956:	930f      	str	r3, [sp, #60]	; 0x3c
 8010958:	1a43      	subs	r3, r0, r1
 801095a:	1e5a      	subs	r2, r3, #1
 801095c:	bf45      	ittet	mi
 801095e:	f1c3 0301 	rsbmi	r3, r3, #1
 8010962:	9305      	strmi	r3, [sp, #20]
 8010964:	2300      	movpl	r3, #0
 8010966:	2300      	movmi	r3, #0
 8010968:	9206      	str	r2, [sp, #24]
 801096a:	bf54      	ite	pl
 801096c:	9305      	strpl	r3, [sp, #20]
 801096e:	9306      	strmi	r3, [sp, #24]
 8010970:	f1bb 0f00 	cmp.w	fp, #0
 8010974:	db18      	blt.n	80109a8 <_dtoa_r+0x218>
 8010976:	9b06      	ldr	r3, [sp, #24]
 8010978:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801097c:	445b      	add	r3, fp
 801097e:	9306      	str	r3, [sp, #24]
 8010980:	2300      	movs	r3, #0
 8010982:	9a07      	ldr	r2, [sp, #28]
 8010984:	2a09      	cmp	r2, #9
 8010986:	d849      	bhi.n	8010a1c <_dtoa_r+0x28c>
 8010988:	2a05      	cmp	r2, #5
 801098a:	bfc4      	itt	gt
 801098c:	3a04      	subgt	r2, #4
 801098e:	9207      	strgt	r2, [sp, #28]
 8010990:	9a07      	ldr	r2, [sp, #28]
 8010992:	f1a2 0202 	sub.w	r2, r2, #2
 8010996:	bfcc      	ite	gt
 8010998:	2400      	movgt	r4, #0
 801099a:	2401      	movle	r4, #1
 801099c:	2a03      	cmp	r2, #3
 801099e:	d848      	bhi.n	8010a32 <_dtoa_r+0x2a2>
 80109a0:	e8df f002 	tbb	[pc, r2]
 80109a4:	3a2c2e0b 	.word	0x3a2c2e0b
 80109a8:	9b05      	ldr	r3, [sp, #20]
 80109aa:	2200      	movs	r2, #0
 80109ac:	eba3 030b 	sub.w	r3, r3, fp
 80109b0:	9305      	str	r3, [sp, #20]
 80109b2:	920e      	str	r2, [sp, #56]	; 0x38
 80109b4:	f1cb 0300 	rsb	r3, fp, #0
 80109b8:	e7e3      	b.n	8010982 <_dtoa_r+0x1f2>
 80109ba:	2200      	movs	r2, #0
 80109bc:	9208      	str	r2, [sp, #32]
 80109be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109c0:	2a00      	cmp	r2, #0
 80109c2:	dc39      	bgt.n	8010a38 <_dtoa_r+0x2a8>
 80109c4:	f04f 0a01 	mov.w	sl, #1
 80109c8:	46d1      	mov	r9, sl
 80109ca:	4652      	mov	r2, sl
 80109cc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80109d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80109d2:	2100      	movs	r1, #0
 80109d4:	6079      	str	r1, [r7, #4]
 80109d6:	2004      	movs	r0, #4
 80109d8:	f100 0c14 	add.w	ip, r0, #20
 80109dc:	4594      	cmp	ip, r2
 80109de:	6879      	ldr	r1, [r7, #4]
 80109e0:	d92f      	bls.n	8010a42 <_dtoa_r+0x2b2>
 80109e2:	4630      	mov	r0, r6
 80109e4:	930c      	str	r3, [sp, #48]	; 0x30
 80109e6:	f000 fe8f 	bl	8011708 <_Balloc>
 80109ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109ec:	9000      	str	r0, [sp, #0]
 80109ee:	4602      	mov	r2, r0
 80109f0:	2800      	cmp	r0, #0
 80109f2:	d149      	bne.n	8010a88 <_dtoa_r+0x2f8>
 80109f4:	4b23      	ldr	r3, [pc, #140]	; (8010a84 <_dtoa_r+0x2f4>)
 80109f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80109fa:	e6df      	b.n	80107bc <_dtoa_r+0x2c>
 80109fc:	2201      	movs	r2, #1
 80109fe:	e7dd      	b.n	80109bc <_dtoa_r+0x22c>
 8010a00:	2200      	movs	r2, #0
 8010a02:	9208      	str	r2, [sp, #32]
 8010a04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a06:	eb0b 0a02 	add.w	sl, fp, r2
 8010a0a:	f10a 0901 	add.w	r9, sl, #1
 8010a0e:	464a      	mov	r2, r9
 8010a10:	2a01      	cmp	r2, #1
 8010a12:	bfb8      	it	lt
 8010a14:	2201      	movlt	r2, #1
 8010a16:	e7db      	b.n	80109d0 <_dtoa_r+0x240>
 8010a18:	2201      	movs	r2, #1
 8010a1a:	e7f2      	b.n	8010a02 <_dtoa_r+0x272>
 8010a1c:	2401      	movs	r4, #1
 8010a1e:	2200      	movs	r2, #0
 8010a20:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010a24:	f04f 3aff 	mov.w	sl, #4294967295
 8010a28:	2100      	movs	r1, #0
 8010a2a:	46d1      	mov	r9, sl
 8010a2c:	2212      	movs	r2, #18
 8010a2e:	9109      	str	r1, [sp, #36]	; 0x24
 8010a30:	e7ce      	b.n	80109d0 <_dtoa_r+0x240>
 8010a32:	2201      	movs	r2, #1
 8010a34:	9208      	str	r2, [sp, #32]
 8010a36:	e7f5      	b.n	8010a24 <_dtoa_r+0x294>
 8010a38:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8010a3c:	46d1      	mov	r9, sl
 8010a3e:	4652      	mov	r2, sl
 8010a40:	e7c6      	b.n	80109d0 <_dtoa_r+0x240>
 8010a42:	3101      	adds	r1, #1
 8010a44:	6079      	str	r1, [r7, #4]
 8010a46:	0040      	lsls	r0, r0, #1
 8010a48:	e7c6      	b.n	80109d8 <_dtoa_r+0x248>
 8010a4a:	bf00      	nop
 8010a4c:	f3af 8000 	nop.w
 8010a50:	636f4361 	.word	0x636f4361
 8010a54:	3fd287a7 	.word	0x3fd287a7
 8010a58:	8b60c8b3 	.word	0x8b60c8b3
 8010a5c:	3fc68a28 	.word	0x3fc68a28
 8010a60:	509f79fb 	.word	0x509f79fb
 8010a64:	3fd34413 	.word	0x3fd34413
 8010a68:	08012f1d 	.word	0x08012f1d
 8010a6c:	08012f34 	.word	0x08012f34
 8010a70:	7ff00000 	.word	0x7ff00000
 8010a74:	08012f19 	.word	0x08012f19
 8010a78:	08012f10 	.word	0x08012f10
 8010a7c:	08012eed 	.word	0x08012eed
 8010a80:	08013090 	.word	0x08013090
 8010a84:	08012f93 	.word	0x08012f93
 8010a88:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010a8a:	9900      	ldr	r1, [sp, #0]
 8010a8c:	6011      	str	r1, [r2, #0]
 8010a8e:	f1b9 0f0e 	cmp.w	r9, #14
 8010a92:	d872      	bhi.n	8010b7a <_dtoa_r+0x3ea>
 8010a94:	2c00      	cmp	r4, #0
 8010a96:	d070      	beq.n	8010b7a <_dtoa_r+0x3ea>
 8010a98:	f1bb 0f00 	cmp.w	fp, #0
 8010a9c:	f340 80a6 	ble.w	8010bec <_dtoa_r+0x45c>
 8010aa0:	49ca      	ldr	r1, [pc, #808]	; (8010dcc <_dtoa_r+0x63c>)
 8010aa2:	f00b 020f 	and.w	r2, fp, #15
 8010aa6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010aaa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010aae:	ed92 7b00 	vldr	d7, [r2]
 8010ab2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010ab6:	f000 808d 	beq.w	8010bd4 <_dtoa_r+0x444>
 8010aba:	4ac5      	ldr	r2, [pc, #788]	; (8010dd0 <_dtoa_r+0x640>)
 8010abc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010ac0:	ed92 6b08 	vldr	d6, [r2, #32]
 8010ac4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8010ac8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010acc:	f001 010f 	and.w	r1, r1, #15
 8010ad0:	2203      	movs	r2, #3
 8010ad2:	48bf      	ldr	r0, [pc, #764]	; (8010dd0 <_dtoa_r+0x640>)
 8010ad4:	2900      	cmp	r1, #0
 8010ad6:	d17f      	bne.n	8010bd8 <_dtoa_r+0x448>
 8010ad8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010adc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010ae0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010ae4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010ae6:	2900      	cmp	r1, #0
 8010ae8:	f000 80b2 	beq.w	8010c50 <_dtoa_r+0x4c0>
 8010aec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010af0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010af4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010afc:	f140 80a8 	bpl.w	8010c50 <_dtoa_r+0x4c0>
 8010b00:	f1b9 0f00 	cmp.w	r9, #0
 8010b04:	f000 80a4 	beq.w	8010c50 <_dtoa_r+0x4c0>
 8010b08:	f1ba 0f00 	cmp.w	sl, #0
 8010b0c:	dd31      	ble.n	8010b72 <_dtoa_r+0x3e2>
 8010b0e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010b12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010b16:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010b1a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010b1e:	3201      	adds	r2, #1
 8010b20:	4650      	mov	r0, sl
 8010b22:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010b26:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010b2a:	ee07 2a90 	vmov	s15, r2
 8010b2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010b32:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010b36:	ed8d 5b02 	vstr	d5, [sp, #8]
 8010b3a:	9c03      	ldr	r4, [sp, #12]
 8010b3c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010b40:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8010b44:	2800      	cmp	r0, #0
 8010b46:	f040 8086 	bne.w	8010c56 <_dtoa_r+0x4c6>
 8010b4a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010b4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010b52:	ec42 1b17 	vmov	d7, r1, r2
 8010b56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b5e:	f300 8272 	bgt.w	8011046 <_dtoa_r+0x8b6>
 8010b62:	eeb1 7b47 	vneg.f64	d7, d7
 8010b66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b6e:	f100 8267 	bmi.w	8011040 <_dtoa_r+0x8b0>
 8010b72:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8010b76:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010b7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010b7c:	2a00      	cmp	r2, #0
 8010b7e:	f2c0 8129 	blt.w	8010dd4 <_dtoa_r+0x644>
 8010b82:	f1bb 0f0e 	cmp.w	fp, #14
 8010b86:	f300 8125 	bgt.w	8010dd4 <_dtoa_r+0x644>
 8010b8a:	4b90      	ldr	r3, [pc, #576]	; (8010dcc <_dtoa_r+0x63c>)
 8010b8c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010b90:	ed93 6b00 	vldr	d6, [r3]
 8010b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	f280 80c3 	bge.w	8010d22 <_dtoa_r+0x592>
 8010b9c:	f1b9 0f00 	cmp.w	r9, #0
 8010ba0:	f300 80bf 	bgt.w	8010d22 <_dtoa_r+0x592>
 8010ba4:	f040 824c 	bne.w	8011040 <_dtoa_r+0x8b0>
 8010ba8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010bac:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010bb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010bb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bbc:	464c      	mov	r4, r9
 8010bbe:	464f      	mov	r7, r9
 8010bc0:	f280 8222 	bge.w	8011008 <_dtoa_r+0x878>
 8010bc4:	f8dd 8000 	ldr.w	r8, [sp]
 8010bc8:	2331      	movs	r3, #49	; 0x31
 8010bca:	f808 3b01 	strb.w	r3, [r8], #1
 8010bce:	f10b 0b01 	add.w	fp, fp, #1
 8010bd2:	e21e      	b.n	8011012 <_dtoa_r+0x882>
 8010bd4:	2202      	movs	r2, #2
 8010bd6:	e77c      	b.n	8010ad2 <_dtoa_r+0x342>
 8010bd8:	07cc      	lsls	r4, r1, #31
 8010bda:	d504      	bpl.n	8010be6 <_dtoa_r+0x456>
 8010bdc:	ed90 6b00 	vldr	d6, [r0]
 8010be0:	3201      	adds	r2, #1
 8010be2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010be6:	1049      	asrs	r1, r1, #1
 8010be8:	3008      	adds	r0, #8
 8010bea:	e773      	b.n	8010ad4 <_dtoa_r+0x344>
 8010bec:	d02e      	beq.n	8010c4c <_dtoa_r+0x4bc>
 8010bee:	f1cb 0100 	rsb	r1, fp, #0
 8010bf2:	4a76      	ldr	r2, [pc, #472]	; (8010dcc <_dtoa_r+0x63c>)
 8010bf4:	f001 000f 	and.w	r0, r1, #15
 8010bf8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010bfc:	ed92 7b00 	vldr	d7, [r2]
 8010c00:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010c04:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010c08:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010c0c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8010c10:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010c14:	486e      	ldr	r0, [pc, #440]	; (8010dd0 <_dtoa_r+0x640>)
 8010c16:	1109      	asrs	r1, r1, #4
 8010c18:	2400      	movs	r4, #0
 8010c1a:	2202      	movs	r2, #2
 8010c1c:	b939      	cbnz	r1, 8010c2e <_dtoa_r+0x49e>
 8010c1e:	2c00      	cmp	r4, #0
 8010c20:	f43f af60 	beq.w	8010ae4 <_dtoa_r+0x354>
 8010c24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010c28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c2c:	e75a      	b.n	8010ae4 <_dtoa_r+0x354>
 8010c2e:	07cf      	lsls	r7, r1, #31
 8010c30:	d509      	bpl.n	8010c46 <_dtoa_r+0x4b6>
 8010c32:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8010c36:	ed90 7b00 	vldr	d7, [r0]
 8010c3a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010c3e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010c42:	3201      	adds	r2, #1
 8010c44:	2401      	movs	r4, #1
 8010c46:	1049      	asrs	r1, r1, #1
 8010c48:	3008      	adds	r0, #8
 8010c4a:	e7e7      	b.n	8010c1c <_dtoa_r+0x48c>
 8010c4c:	2202      	movs	r2, #2
 8010c4e:	e749      	b.n	8010ae4 <_dtoa_r+0x354>
 8010c50:	465f      	mov	r7, fp
 8010c52:	4648      	mov	r0, r9
 8010c54:	e765      	b.n	8010b22 <_dtoa_r+0x392>
 8010c56:	ec42 1b17 	vmov	d7, r1, r2
 8010c5a:	4a5c      	ldr	r2, [pc, #368]	; (8010dcc <_dtoa_r+0x63c>)
 8010c5c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010c60:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010c64:	9a00      	ldr	r2, [sp, #0]
 8010c66:	1814      	adds	r4, r2, r0
 8010c68:	9a08      	ldr	r2, [sp, #32]
 8010c6a:	b352      	cbz	r2, 8010cc2 <_dtoa_r+0x532>
 8010c6c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010c70:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010c74:	f8dd 8000 	ldr.w	r8, [sp]
 8010c78:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010c7c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010c80:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010c84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010c88:	ee14 2a90 	vmov	r2, s9
 8010c8c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010c90:	3230      	adds	r2, #48	; 0x30
 8010c92:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010c96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c9e:	f808 2b01 	strb.w	r2, [r8], #1
 8010ca2:	d439      	bmi.n	8010d18 <_dtoa_r+0x588>
 8010ca4:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010ca8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cb0:	d472      	bmi.n	8010d98 <_dtoa_r+0x608>
 8010cb2:	45a0      	cmp	r8, r4
 8010cb4:	f43f af5d 	beq.w	8010b72 <_dtoa_r+0x3e2>
 8010cb8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010cbc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010cc0:	e7e0      	b.n	8010c84 <_dtoa_r+0x4f4>
 8010cc2:	f8dd 8000 	ldr.w	r8, [sp]
 8010cc6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010cca:	4621      	mov	r1, r4
 8010ccc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010cd0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010cd4:	ee14 2a90 	vmov	r2, s9
 8010cd8:	3230      	adds	r2, #48	; 0x30
 8010cda:	f808 2b01 	strb.w	r2, [r8], #1
 8010cde:	45a0      	cmp	r8, r4
 8010ce0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010ce4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010ce8:	d118      	bne.n	8010d1c <_dtoa_r+0x58c>
 8010cea:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010cee:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010cf2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfa:	dc4d      	bgt.n	8010d98 <_dtoa_r+0x608>
 8010cfc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010d00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d08:	f57f af33 	bpl.w	8010b72 <_dtoa_r+0x3e2>
 8010d0c:	4688      	mov	r8, r1
 8010d0e:	3901      	subs	r1, #1
 8010d10:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010d14:	2b30      	cmp	r3, #48	; 0x30
 8010d16:	d0f9      	beq.n	8010d0c <_dtoa_r+0x57c>
 8010d18:	46bb      	mov	fp, r7
 8010d1a:	e02a      	b.n	8010d72 <_dtoa_r+0x5e2>
 8010d1c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010d20:	e7d6      	b.n	8010cd0 <_dtoa_r+0x540>
 8010d22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d26:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010d2a:	f8dd 8000 	ldr.w	r8, [sp]
 8010d2e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010d32:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010d36:	ee15 3a10 	vmov	r3, s10
 8010d3a:	3330      	adds	r3, #48	; 0x30
 8010d3c:	f808 3b01 	strb.w	r3, [r8], #1
 8010d40:	9b00      	ldr	r3, [sp, #0]
 8010d42:	eba8 0303 	sub.w	r3, r8, r3
 8010d46:	4599      	cmp	r9, r3
 8010d48:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010d4c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010d50:	d133      	bne.n	8010dba <_dtoa_r+0x62a>
 8010d52:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010d56:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d5e:	dc1a      	bgt.n	8010d96 <_dtoa_r+0x606>
 8010d60:	eeb4 7b46 	vcmp.f64	d7, d6
 8010d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d68:	d103      	bne.n	8010d72 <_dtoa_r+0x5e2>
 8010d6a:	ee15 3a10 	vmov	r3, s10
 8010d6e:	07d9      	lsls	r1, r3, #31
 8010d70:	d411      	bmi.n	8010d96 <_dtoa_r+0x606>
 8010d72:	4629      	mov	r1, r5
 8010d74:	4630      	mov	r0, r6
 8010d76:	f000 fd07 	bl	8011788 <_Bfree>
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010d7e:	f888 3000 	strb.w	r3, [r8]
 8010d82:	f10b 0301 	add.w	r3, fp, #1
 8010d86:	6013      	str	r3, [r2, #0]
 8010d88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	f43f ad4d 	beq.w	801082a <_dtoa_r+0x9a>
 8010d90:	f8c3 8000 	str.w	r8, [r3]
 8010d94:	e549      	b.n	801082a <_dtoa_r+0x9a>
 8010d96:	465f      	mov	r7, fp
 8010d98:	4643      	mov	r3, r8
 8010d9a:	4698      	mov	r8, r3
 8010d9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010da0:	2a39      	cmp	r2, #57	; 0x39
 8010da2:	d106      	bne.n	8010db2 <_dtoa_r+0x622>
 8010da4:	9a00      	ldr	r2, [sp, #0]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d1f7      	bne.n	8010d9a <_dtoa_r+0x60a>
 8010daa:	9900      	ldr	r1, [sp, #0]
 8010dac:	2230      	movs	r2, #48	; 0x30
 8010dae:	3701      	adds	r7, #1
 8010db0:	700a      	strb	r2, [r1, #0]
 8010db2:	781a      	ldrb	r2, [r3, #0]
 8010db4:	3201      	adds	r2, #1
 8010db6:	701a      	strb	r2, [r3, #0]
 8010db8:	e7ae      	b.n	8010d18 <_dtoa_r+0x588>
 8010dba:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010dbe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc6:	d1b2      	bne.n	8010d2e <_dtoa_r+0x59e>
 8010dc8:	e7d3      	b.n	8010d72 <_dtoa_r+0x5e2>
 8010dca:	bf00      	nop
 8010dcc:	08013090 	.word	0x08013090
 8010dd0:	08013068 	.word	0x08013068
 8010dd4:	9908      	ldr	r1, [sp, #32]
 8010dd6:	2900      	cmp	r1, #0
 8010dd8:	f000 80d1 	beq.w	8010f7e <_dtoa_r+0x7ee>
 8010ddc:	9907      	ldr	r1, [sp, #28]
 8010dde:	2901      	cmp	r1, #1
 8010de0:	f300 80b4 	bgt.w	8010f4c <_dtoa_r+0x7bc>
 8010de4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010de6:	2900      	cmp	r1, #0
 8010de8:	f000 80ac 	beq.w	8010f44 <_dtoa_r+0x7b4>
 8010dec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010df0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010df4:	461c      	mov	r4, r3
 8010df6:	930a      	str	r3, [sp, #40]	; 0x28
 8010df8:	9b05      	ldr	r3, [sp, #20]
 8010dfa:	4413      	add	r3, r2
 8010dfc:	9305      	str	r3, [sp, #20]
 8010dfe:	9b06      	ldr	r3, [sp, #24]
 8010e00:	2101      	movs	r1, #1
 8010e02:	4413      	add	r3, r2
 8010e04:	4630      	mov	r0, r6
 8010e06:	9306      	str	r3, [sp, #24]
 8010e08:	f000 fd7a 	bl	8011900 <__i2b>
 8010e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e0e:	4607      	mov	r7, r0
 8010e10:	f1b8 0f00 	cmp.w	r8, #0
 8010e14:	dd0d      	ble.n	8010e32 <_dtoa_r+0x6a2>
 8010e16:	9a06      	ldr	r2, [sp, #24]
 8010e18:	2a00      	cmp	r2, #0
 8010e1a:	dd0a      	ble.n	8010e32 <_dtoa_r+0x6a2>
 8010e1c:	4542      	cmp	r2, r8
 8010e1e:	9905      	ldr	r1, [sp, #20]
 8010e20:	bfa8      	it	ge
 8010e22:	4642      	movge	r2, r8
 8010e24:	1a89      	subs	r1, r1, r2
 8010e26:	9105      	str	r1, [sp, #20]
 8010e28:	9906      	ldr	r1, [sp, #24]
 8010e2a:	eba8 0802 	sub.w	r8, r8, r2
 8010e2e:	1a8a      	subs	r2, r1, r2
 8010e30:	9206      	str	r2, [sp, #24]
 8010e32:	b303      	cbz	r3, 8010e76 <_dtoa_r+0x6e6>
 8010e34:	9a08      	ldr	r2, [sp, #32]
 8010e36:	2a00      	cmp	r2, #0
 8010e38:	f000 80a6 	beq.w	8010f88 <_dtoa_r+0x7f8>
 8010e3c:	2c00      	cmp	r4, #0
 8010e3e:	dd13      	ble.n	8010e68 <_dtoa_r+0x6d8>
 8010e40:	4639      	mov	r1, r7
 8010e42:	4622      	mov	r2, r4
 8010e44:	4630      	mov	r0, r6
 8010e46:	930c      	str	r3, [sp, #48]	; 0x30
 8010e48:	f000 fe16 	bl	8011a78 <__pow5mult>
 8010e4c:	462a      	mov	r2, r5
 8010e4e:	4601      	mov	r1, r0
 8010e50:	4607      	mov	r7, r0
 8010e52:	4630      	mov	r0, r6
 8010e54:	f000 fd6a 	bl	801192c <__multiply>
 8010e58:	4629      	mov	r1, r5
 8010e5a:	900a      	str	r0, [sp, #40]	; 0x28
 8010e5c:	4630      	mov	r0, r6
 8010e5e:	f000 fc93 	bl	8011788 <_Bfree>
 8010e62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e66:	4615      	mov	r5, r2
 8010e68:	1b1a      	subs	r2, r3, r4
 8010e6a:	d004      	beq.n	8010e76 <_dtoa_r+0x6e6>
 8010e6c:	4629      	mov	r1, r5
 8010e6e:	4630      	mov	r0, r6
 8010e70:	f000 fe02 	bl	8011a78 <__pow5mult>
 8010e74:	4605      	mov	r5, r0
 8010e76:	2101      	movs	r1, #1
 8010e78:	4630      	mov	r0, r6
 8010e7a:	f000 fd41 	bl	8011900 <__i2b>
 8010e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	4604      	mov	r4, r0
 8010e84:	f340 8082 	ble.w	8010f8c <_dtoa_r+0x7fc>
 8010e88:	461a      	mov	r2, r3
 8010e8a:	4601      	mov	r1, r0
 8010e8c:	4630      	mov	r0, r6
 8010e8e:	f000 fdf3 	bl	8011a78 <__pow5mult>
 8010e92:	9b07      	ldr	r3, [sp, #28]
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	4604      	mov	r4, r0
 8010e98:	dd7b      	ble.n	8010f92 <_dtoa_r+0x802>
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	930a      	str	r3, [sp, #40]	; 0x28
 8010e9e:	6922      	ldr	r2, [r4, #16]
 8010ea0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010ea4:	6910      	ldr	r0, [r2, #16]
 8010ea6:	f000 fcdb 	bl	8011860 <__hi0bits>
 8010eaa:	f1c0 0020 	rsb	r0, r0, #32
 8010eae:	9b06      	ldr	r3, [sp, #24]
 8010eb0:	4418      	add	r0, r3
 8010eb2:	f010 001f 	ands.w	r0, r0, #31
 8010eb6:	f000 808d 	beq.w	8010fd4 <_dtoa_r+0x844>
 8010eba:	f1c0 0220 	rsb	r2, r0, #32
 8010ebe:	2a04      	cmp	r2, #4
 8010ec0:	f340 8086 	ble.w	8010fd0 <_dtoa_r+0x840>
 8010ec4:	f1c0 001c 	rsb	r0, r0, #28
 8010ec8:	9b05      	ldr	r3, [sp, #20]
 8010eca:	4403      	add	r3, r0
 8010ecc:	9305      	str	r3, [sp, #20]
 8010ece:	9b06      	ldr	r3, [sp, #24]
 8010ed0:	4403      	add	r3, r0
 8010ed2:	4480      	add	r8, r0
 8010ed4:	9306      	str	r3, [sp, #24]
 8010ed6:	9b05      	ldr	r3, [sp, #20]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	dd05      	ble.n	8010ee8 <_dtoa_r+0x758>
 8010edc:	4629      	mov	r1, r5
 8010ede:	461a      	mov	r2, r3
 8010ee0:	4630      	mov	r0, r6
 8010ee2:	f000 fe23 	bl	8011b2c <__lshift>
 8010ee6:	4605      	mov	r5, r0
 8010ee8:	9b06      	ldr	r3, [sp, #24]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	dd05      	ble.n	8010efa <_dtoa_r+0x76a>
 8010eee:	4621      	mov	r1, r4
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	4630      	mov	r0, r6
 8010ef4:	f000 fe1a 	bl	8011b2c <__lshift>
 8010ef8:	4604      	mov	r4, r0
 8010efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d06b      	beq.n	8010fd8 <_dtoa_r+0x848>
 8010f00:	4621      	mov	r1, r4
 8010f02:	4628      	mov	r0, r5
 8010f04:	f000 fe7e 	bl	8011c04 <__mcmp>
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	da65      	bge.n	8010fd8 <_dtoa_r+0x848>
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	4629      	mov	r1, r5
 8010f10:	220a      	movs	r2, #10
 8010f12:	4630      	mov	r0, r6
 8010f14:	f000 fc5a 	bl	80117cc <__multadd>
 8010f18:	9b08      	ldr	r3, [sp, #32]
 8010f1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010f1e:	4605      	mov	r5, r0
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	f000 8192 	beq.w	801124a <_dtoa_r+0xaba>
 8010f26:	4639      	mov	r1, r7
 8010f28:	2300      	movs	r3, #0
 8010f2a:	220a      	movs	r2, #10
 8010f2c:	4630      	mov	r0, r6
 8010f2e:	f000 fc4d 	bl	80117cc <__multadd>
 8010f32:	f1ba 0f00 	cmp.w	sl, #0
 8010f36:	4607      	mov	r7, r0
 8010f38:	f300 808e 	bgt.w	8011058 <_dtoa_r+0x8c8>
 8010f3c:	9b07      	ldr	r3, [sp, #28]
 8010f3e:	2b02      	cmp	r3, #2
 8010f40:	dc51      	bgt.n	8010fe6 <_dtoa_r+0x856>
 8010f42:	e089      	b.n	8011058 <_dtoa_r+0x8c8>
 8010f44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010f46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010f4a:	e751      	b.n	8010df0 <_dtoa_r+0x660>
 8010f4c:	f109 34ff 	add.w	r4, r9, #4294967295
 8010f50:	42a3      	cmp	r3, r4
 8010f52:	bfbf      	itttt	lt
 8010f54:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8010f56:	1ae3      	sublt	r3, r4, r3
 8010f58:	18d2      	addlt	r2, r2, r3
 8010f5a:	4613      	movlt	r3, r2
 8010f5c:	bfb7      	itett	lt
 8010f5e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010f60:	1b1c      	subge	r4, r3, r4
 8010f62:	4623      	movlt	r3, r4
 8010f64:	2400      	movlt	r4, #0
 8010f66:	f1b9 0f00 	cmp.w	r9, #0
 8010f6a:	bfb5      	itete	lt
 8010f6c:	9a05      	ldrlt	r2, [sp, #20]
 8010f6e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8010f72:	eba2 0809 	sublt.w	r8, r2, r9
 8010f76:	464a      	movge	r2, r9
 8010f78:	bfb8      	it	lt
 8010f7a:	2200      	movlt	r2, #0
 8010f7c:	e73b      	b.n	8010df6 <_dtoa_r+0x666>
 8010f7e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010f82:	9f08      	ldr	r7, [sp, #32]
 8010f84:	461c      	mov	r4, r3
 8010f86:	e743      	b.n	8010e10 <_dtoa_r+0x680>
 8010f88:	461a      	mov	r2, r3
 8010f8a:	e76f      	b.n	8010e6c <_dtoa_r+0x6dc>
 8010f8c:	9b07      	ldr	r3, [sp, #28]
 8010f8e:	2b01      	cmp	r3, #1
 8010f90:	dc18      	bgt.n	8010fc4 <_dtoa_r+0x834>
 8010f92:	9b02      	ldr	r3, [sp, #8]
 8010f94:	b9b3      	cbnz	r3, 8010fc4 <_dtoa_r+0x834>
 8010f96:	9b03      	ldr	r3, [sp, #12]
 8010f98:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010f9c:	b9a2      	cbnz	r2, 8010fc8 <_dtoa_r+0x838>
 8010f9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010fa2:	0d12      	lsrs	r2, r2, #20
 8010fa4:	0512      	lsls	r2, r2, #20
 8010fa6:	b18a      	cbz	r2, 8010fcc <_dtoa_r+0x83c>
 8010fa8:	9b05      	ldr	r3, [sp, #20]
 8010faa:	3301      	adds	r3, #1
 8010fac:	9305      	str	r3, [sp, #20]
 8010fae:	9b06      	ldr	r3, [sp, #24]
 8010fb0:	3301      	adds	r3, #1
 8010fb2:	9306      	str	r3, [sp, #24]
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8010fb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	f47f af6f 	bne.w	8010e9e <_dtoa_r+0x70e>
 8010fc0:	2001      	movs	r0, #1
 8010fc2:	e774      	b.n	8010eae <_dtoa_r+0x71e>
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	e7f6      	b.n	8010fb6 <_dtoa_r+0x826>
 8010fc8:	9b02      	ldr	r3, [sp, #8]
 8010fca:	e7f4      	b.n	8010fb6 <_dtoa_r+0x826>
 8010fcc:	920a      	str	r2, [sp, #40]	; 0x28
 8010fce:	e7f3      	b.n	8010fb8 <_dtoa_r+0x828>
 8010fd0:	d081      	beq.n	8010ed6 <_dtoa_r+0x746>
 8010fd2:	4610      	mov	r0, r2
 8010fd4:	301c      	adds	r0, #28
 8010fd6:	e777      	b.n	8010ec8 <_dtoa_r+0x738>
 8010fd8:	f1b9 0f00 	cmp.w	r9, #0
 8010fdc:	dc37      	bgt.n	801104e <_dtoa_r+0x8be>
 8010fde:	9b07      	ldr	r3, [sp, #28]
 8010fe0:	2b02      	cmp	r3, #2
 8010fe2:	dd34      	ble.n	801104e <_dtoa_r+0x8be>
 8010fe4:	46ca      	mov	sl, r9
 8010fe6:	f1ba 0f00 	cmp.w	sl, #0
 8010fea:	d10d      	bne.n	8011008 <_dtoa_r+0x878>
 8010fec:	4621      	mov	r1, r4
 8010fee:	4653      	mov	r3, sl
 8010ff0:	2205      	movs	r2, #5
 8010ff2:	4630      	mov	r0, r6
 8010ff4:	f000 fbea 	bl	80117cc <__multadd>
 8010ff8:	4601      	mov	r1, r0
 8010ffa:	4604      	mov	r4, r0
 8010ffc:	4628      	mov	r0, r5
 8010ffe:	f000 fe01 	bl	8011c04 <__mcmp>
 8011002:	2800      	cmp	r0, #0
 8011004:	f73f adde 	bgt.w	8010bc4 <_dtoa_r+0x434>
 8011008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801100a:	f8dd 8000 	ldr.w	r8, [sp]
 801100e:	ea6f 0b03 	mvn.w	fp, r3
 8011012:	f04f 0900 	mov.w	r9, #0
 8011016:	4621      	mov	r1, r4
 8011018:	4630      	mov	r0, r6
 801101a:	f000 fbb5 	bl	8011788 <_Bfree>
 801101e:	2f00      	cmp	r7, #0
 8011020:	f43f aea7 	beq.w	8010d72 <_dtoa_r+0x5e2>
 8011024:	f1b9 0f00 	cmp.w	r9, #0
 8011028:	d005      	beq.n	8011036 <_dtoa_r+0x8a6>
 801102a:	45b9      	cmp	r9, r7
 801102c:	d003      	beq.n	8011036 <_dtoa_r+0x8a6>
 801102e:	4649      	mov	r1, r9
 8011030:	4630      	mov	r0, r6
 8011032:	f000 fba9 	bl	8011788 <_Bfree>
 8011036:	4639      	mov	r1, r7
 8011038:	4630      	mov	r0, r6
 801103a:	f000 fba5 	bl	8011788 <_Bfree>
 801103e:	e698      	b.n	8010d72 <_dtoa_r+0x5e2>
 8011040:	2400      	movs	r4, #0
 8011042:	4627      	mov	r7, r4
 8011044:	e7e0      	b.n	8011008 <_dtoa_r+0x878>
 8011046:	46bb      	mov	fp, r7
 8011048:	4604      	mov	r4, r0
 801104a:	4607      	mov	r7, r0
 801104c:	e5ba      	b.n	8010bc4 <_dtoa_r+0x434>
 801104e:	9b08      	ldr	r3, [sp, #32]
 8011050:	46ca      	mov	sl, r9
 8011052:	2b00      	cmp	r3, #0
 8011054:	f000 8100 	beq.w	8011258 <_dtoa_r+0xac8>
 8011058:	f1b8 0f00 	cmp.w	r8, #0
 801105c:	dd05      	ble.n	801106a <_dtoa_r+0x8da>
 801105e:	4639      	mov	r1, r7
 8011060:	4642      	mov	r2, r8
 8011062:	4630      	mov	r0, r6
 8011064:	f000 fd62 	bl	8011b2c <__lshift>
 8011068:	4607      	mov	r7, r0
 801106a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801106c:	2b00      	cmp	r3, #0
 801106e:	d05d      	beq.n	801112c <_dtoa_r+0x99c>
 8011070:	6879      	ldr	r1, [r7, #4]
 8011072:	4630      	mov	r0, r6
 8011074:	f000 fb48 	bl	8011708 <_Balloc>
 8011078:	4680      	mov	r8, r0
 801107a:	b928      	cbnz	r0, 8011088 <_dtoa_r+0x8f8>
 801107c:	4b82      	ldr	r3, [pc, #520]	; (8011288 <_dtoa_r+0xaf8>)
 801107e:	4602      	mov	r2, r0
 8011080:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011084:	f7ff bb9a 	b.w	80107bc <_dtoa_r+0x2c>
 8011088:	693a      	ldr	r2, [r7, #16]
 801108a:	3202      	adds	r2, #2
 801108c:	0092      	lsls	r2, r2, #2
 801108e:	f107 010c 	add.w	r1, r7, #12
 8011092:	300c      	adds	r0, #12
 8011094:	f000 fb2a 	bl	80116ec <memcpy>
 8011098:	2201      	movs	r2, #1
 801109a:	4641      	mov	r1, r8
 801109c:	4630      	mov	r0, r6
 801109e:	f000 fd45 	bl	8011b2c <__lshift>
 80110a2:	9b00      	ldr	r3, [sp, #0]
 80110a4:	3301      	adds	r3, #1
 80110a6:	9305      	str	r3, [sp, #20]
 80110a8:	9b00      	ldr	r3, [sp, #0]
 80110aa:	4453      	add	r3, sl
 80110ac:	9309      	str	r3, [sp, #36]	; 0x24
 80110ae:	9b02      	ldr	r3, [sp, #8]
 80110b0:	f003 0301 	and.w	r3, r3, #1
 80110b4:	46b9      	mov	r9, r7
 80110b6:	9308      	str	r3, [sp, #32]
 80110b8:	4607      	mov	r7, r0
 80110ba:	9b05      	ldr	r3, [sp, #20]
 80110bc:	4621      	mov	r1, r4
 80110be:	3b01      	subs	r3, #1
 80110c0:	4628      	mov	r0, r5
 80110c2:	9302      	str	r3, [sp, #8]
 80110c4:	f7ff fad8 	bl	8010678 <quorem>
 80110c8:	4603      	mov	r3, r0
 80110ca:	3330      	adds	r3, #48	; 0x30
 80110cc:	9006      	str	r0, [sp, #24]
 80110ce:	4649      	mov	r1, r9
 80110d0:	4628      	mov	r0, r5
 80110d2:	930a      	str	r3, [sp, #40]	; 0x28
 80110d4:	f000 fd96 	bl	8011c04 <__mcmp>
 80110d8:	463a      	mov	r2, r7
 80110da:	4682      	mov	sl, r0
 80110dc:	4621      	mov	r1, r4
 80110de:	4630      	mov	r0, r6
 80110e0:	f000 fdac 	bl	8011c3c <__mdiff>
 80110e4:	68c2      	ldr	r2, [r0, #12]
 80110e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110e8:	4680      	mov	r8, r0
 80110ea:	bb0a      	cbnz	r2, 8011130 <_dtoa_r+0x9a0>
 80110ec:	4601      	mov	r1, r0
 80110ee:	4628      	mov	r0, r5
 80110f0:	f000 fd88 	bl	8011c04 <__mcmp>
 80110f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110f6:	4602      	mov	r2, r0
 80110f8:	4641      	mov	r1, r8
 80110fa:	4630      	mov	r0, r6
 80110fc:	920e      	str	r2, [sp, #56]	; 0x38
 80110fe:	930a      	str	r3, [sp, #40]	; 0x28
 8011100:	f000 fb42 	bl	8011788 <_Bfree>
 8011104:	9b07      	ldr	r3, [sp, #28]
 8011106:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011108:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801110c:	ea43 0102 	orr.w	r1, r3, r2
 8011110:	9b08      	ldr	r3, [sp, #32]
 8011112:	430b      	orrs	r3, r1
 8011114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011116:	d10d      	bne.n	8011134 <_dtoa_r+0x9a4>
 8011118:	2b39      	cmp	r3, #57	; 0x39
 801111a:	d029      	beq.n	8011170 <_dtoa_r+0x9e0>
 801111c:	f1ba 0f00 	cmp.w	sl, #0
 8011120:	dd01      	ble.n	8011126 <_dtoa_r+0x996>
 8011122:	9b06      	ldr	r3, [sp, #24]
 8011124:	3331      	adds	r3, #49	; 0x31
 8011126:	9a02      	ldr	r2, [sp, #8]
 8011128:	7013      	strb	r3, [r2, #0]
 801112a:	e774      	b.n	8011016 <_dtoa_r+0x886>
 801112c:	4638      	mov	r0, r7
 801112e:	e7b8      	b.n	80110a2 <_dtoa_r+0x912>
 8011130:	2201      	movs	r2, #1
 8011132:	e7e1      	b.n	80110f8 <_dtoa_r+0x968>
 8011134:	f1ba 0f00 	cmp.w	sl, #0
 8011138:	db06      	blt.n	8011148 <_dtoa_r+0x9b8>
 801113a:	9907      	ldr	r1, [sp, #28]
 801113c:	ea41 0a0a 	orr.w	sl, r1, sl
 8011140:	9908      	ldr	r1, [sp, #32]
 8011142:	ea5a 0101 	orrs.w	r1, sl, r1
 8011146:	d120      	bne.n	801118a <_dtoa_r+0x9fa>
 8011148:	2a00      	cmp	r2, #0
 801114a:	ddec      	ble.n	8011126 <_dtoa_r+0x996>
 801114c:	4629      	mov	r1, r5
 801114e:	2201      	movs	r2, #1
 8011150:	4630      	mov	r0, r6
 8011152:	9305      	str	r3, [sp, #20]
 8011154:	f000 fcea 	bl	8011b2c <__lshift>
 8011158:	4621      	mov	r1, r4
 801115a:	4605      	mov	r5, r0
 801115c:	f000 fd52 	bl	8011c04 <__mcmp>
 8011160:	2800      	cmp	r0, #0
 8011162:	9b05      	ldr	r3, [sp, #20]
 8011164:	dc02      	bgt.n	801116c <_dtoa_r+0x9dc>
 8011166:	d1de      	bne.n	8011126 <_dtoa_r+0x996>
 8011168:	07da      	lsls	r2, r3, #31
 801116a:	d5dc      	bpl.n	8011126 <_dtoa_r+0x996>
 801116c:	2b39      	cmp	r3, #57	; 0x39
 801116e:	d1d8      	bne.n	8011122 <_dtoa_r+0x992>
 8011170:	9a02      	ldr	r2, [sp, #8]
 8011172:	2339      	movs	r3, #57	; 0x39
 8011174:	7013      	strb	r3, [r2, #0]
 8011176:	4643      	mov	r3, r8
 8011178:	4698      	mov	r8, r3
 801117a:	3b01      	subs	r3, #1
 801117c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8011180:	2a39      	cmp	r2, #57	; 0x39
 8011182:	d051      	beq.n	8011228 <_dtoa_r+0xa98>
 8011184:	3201      	adds	r2, #1
 8011186:	701a      	strb	r2, [r3, #0]
 8011188:	e745      	b.n	8011016 <_dtoa_r+0x886>
 801118a:	2a00      	cmp	r2, #0
 801118c:	dd03      	ble.n	8011196 <_dtoa_r+0xa06>
 801118e:	2b39      	cmp	r3, #57	; 0x39
 8011190:	d0ee      	beq.n	8011170 <_dtoa_r+0x9e0>
 8011192:	3301      	adds	r3, #1
 8011194:	e7c7      	b.n	8011126 <_dtoa_r+0x996>
 8011196:	9a05      	ldr	r2, [sp, #20]
 8011198:	9909      	ldr	r1, [sp, #36]	; 0x24
 801119a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801119e:	428a      	cmp	r2, r1
 80111a0:	d02b      	beq.n	80111fa <_dtoa_r+0xa6a>
 80111a2:	4629      	mov	r1, r5
 80111a4:	2300      	movs	r3, #0
 80111a6:	220a      	movs	r2, #10
 80111a8:	4630      	mov	r0, r6
 80111aa:	f000 fb0f 	bl	80117cc <__multadd>
 80111ae:	45b9      	cmp	r9, r7
 80111b0:	4605      	mov	r5, r0
 80111b2:	f04f 0300 	mov.w	r3, #0
 80111b6:	f04f 020a 	mov.w	r2, #10
 80111ba:	4649      	mov	r1, r9
 80111bc:	4630      	mov	r0, r6
 80111be:	d107      	bne.n	80111d0 <_dtoa_r+0xa40>
 80111c0:	f000 fb04 	bl	80117cc <__multadd>
 80111c4:	4681      	mov	r9, r0
 80111c6:	4607      	mov	r7, r0
 80111c8:	9b05      	ldr	r3, [sp, #20]
 80111ca:	3301      	adds	r3, #1
 80111cc:	9305      	str	r3, [sp, #20]
 80111ce:	e774      	b.n	80110ba <_dtoa_r+0x92a>
 80111d0:	f000 fafc 	bl	80117cc <__multadd>
 80111d4:	4639      	mov	r1, r7
 80111d6:	4681      	mov	r9, r0
 80111d8:	2300      	movs	r3, #0
 80111da:	220a      	movs	r2, #10
 80111dc:	4630      	mov	r0, r6
 80111de:	f000 faf5 	bl	80117cc <__multadd>
 80111e2:	4607      	mov	r7, r0
 80111e4:	e7f0      	b.n	80111c8 <_dtoa_r+0xa38>
 80111e6:	f1ba 0f00 	cmp.w	sl, #0
 80111ea:	9a00      	ldr	r2, [sp, #0]
 80111ec:	bfcc      	ite	gt
 80111ee:	46d0      	movgt	r8, sl
 80111f0:	f04f 0801 	movle.w	r8, #1
 80111f4:	4490      	add	r8, r2
 80111f6:	f04f 0900 	mov.w	r9, #0
 80111fa:	4629      	mov	r1, r5
 80111fc:	2201      	movs	r2, #1
 80111fe:	4630      	mov	r0, r6
 8011200:	9302      	str	r3, [sp, #8]
 8011202:	f000 fc93 	bl	8011b2c <__lshift>
 8011206:	4621      	mov	r1, r4
 8011208:	4605      	mov	r5, r0
 801120a:	f000 fcfb 	bl	8011c04 <__mcmp>
 801120e:	2800      	cmp	r0, #0
 8011210:	dcb1      	bgt.n	8011176 <_dtoa_r+0x9e6>
 8011212:	d102      	bne.n	801121a <_dtoa_r+0xa8a>
 8011214:	9b02      	ldr	r3, [sp, #8]
 8011216:	07db      	lsls	r3, r3, #31
 8011218:	d4ad      	bmi.n	8011176 <_dtoa_r+0x9e6>
 801121a:	4643      	mov	r3, r8
 801121c:	4698      	mov	r8, r3
 801121e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011222:	2a30      	cmp	r2, #48	; 0x30
 8011224:	d0fa      	beq.n	801121c <_dtoa_r+0xa8c>
 8011226:	e6f6      	b.n	8011016 <_dtoa_r+0x886>
 8011228:	9a00      	ldr	r2, [sp, #0]
 801122a:	429a      	cmp	r2, r3
 801122c:	d1a4      	bne.n	8011178 <_dtoa_r+0x9e8>
 801122e:	f10b 0b01 	add.w	fp, fp, #1
 8011232:	2331      	movs	r3, #49	; 0x31
 8011234:	e778      	b.n	8011128 <_dtoa_r+0x998>
 8011236:	4b15      	ldr	r3, [pc, #84]	; (801128c <_dtoa_r+0xafc>)
 8011238:	f7ff bb12 	b.w	8010860 <_dtoa_r+0xd0>
 801123c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801123e:	2b00      	cmp	r3, #0
 8011240:	f47f aaee 	bne.w	8010820 <_dtoa_r+0x90>
 8011244:	4b12      	ldr	r3, [pc, #72]	; (8011290 <_dtoa_r+0xb00>)
 8011246:	f7ff bb0b 	b.w	8010860 <_dtoa_r+0xd0>
 801124a:	f1ba 0f00 	cmp.w	sl, #0
 801124e:	dc03      	bgt.n	8011258 <_dtoa_r+0xac8>
 8011250:	9b07      	ldr	r3, [sp, #28]
 8011252:	2b02      	cmp	r3, #2
 8011254:	f73f aec7 	bgt.w	8010fe6 <_dtoa_r+0x856>
 8011258:	f8dd 8000 	ldr.w	r8, [sp]
 801125c:	4621      	mov	r1, r4
 801125e:	4628      	mov	r0, r5
 8011260:	f7ff fa0a 	bl	8010678 <quorem>
 8011264:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011268:	f808 3b01 	strb.w	r3, [r8], #1
 801126c:	9a00      	ldr	r2, [sp, #0]
 801126e:	eba8 0202 	sub.w	r2, r8, r2
 8011272:	4592      	cmp	sl, r2
 8011274:	ddb7      	ble.n	80111e6 <_dtoa_r+0xa56>
 8011276:	4629      	mov	r1, r5
 8011278:	2300      	movs	r3, #0
 801127a:	220a      	movs	r2, #10
 801127c:	4630      	mov	r0, r6
 801127e:	f000 faa5 	bl	80117cc <__multadd>
 8011282:	4605      	mov	r5, r0
 8011284:	e7ea      	b.n	801125c <_dtoa_r+0xacc>
 8011286:	bf00      	nop
 8011288:	08012f93 	.word	0x08012f93
 801128c:	08012eec 	.word	0x08012eec
 8011290:	08012f10 	.word	0x08012f10

08011294 <__sflush_r>:
 8011294:	898a      	ldrh	r2, [r1, #12]
 8011296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801129a:	4605      	mov	r5, r0
 801129c:	0710      	lsls	r0, r2, #28
 801129e:	460c      	mov	r4, r1
 80112a0:	d458      	bmi.n	8011354 <__sflush_r+0xc0>
 80112a2:	684b      	ldr	r3, [r1, #4]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	dc05      	bgt.n	80112b4 <__sflush_r+0x20>
 80112a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	dc02      	bgt.n	80112b4 <__sflush_r+0x20>
 80112ae:	2000      	movs	r0, #0
 80112b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112b6:	2e00      	cmp	r6, #0
 80112b8:	d0f9      	beq.n	80112ae <__sflush_r+0x1a>
 80112ba:	2300      	movs	r3, #0
 80112bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80112c0:	682f      	ldr	r7, [r5, #0]
 80112c2:	602b      	str	r3, [r5, #0]
 80112c4:	d032      	beq.n	801132c <__sflush_r+0x98>
 80112c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80112c8:	89a3      	ldrh	r3, [r4, #12]
 80112ca:	075a      	lsls	r2, r3, #29
 80112cc:	d505      	bpl.n	80112da <__sflush_r+0x46>
 80112ce:	6863      	ldr	r3, [r4, #4]
 80112d0:	1ac0      	subs	r0, r0, r3
 80112d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112d4:	b10b      	cbz	r3, 80112da <__sflush_r+0x46>
 80112d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80112d8:	1ac0      	subs	r0, r0, r3
 80112da:	2300      	movs	r3, #0
 80112dc:	4602      	mov	r2, r0
 80112de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112e0:	6a21      	ldr	r1, [r4, #32]
 80112e2:	4628      	mov	r0, r5
 80112e4:	47b0      	blx	r6
 80112e6:	1c43      	adds	r3, r0, #1
 80112e8:	89a3      	ldrh	r3, [r4, #12]
 80112ea:	d106      	bne.n	80112fa <__sflush_r+0x66>
 80112ec:	6829      	ldr	r1, [r5, #0]
 80112ee:	291d      	cmp	r1, #29
 80112f0:	d82c      	bhi.n	801134c <__sflush_r+0xb8>
 80112f2:	4a2a      	ldr	r2, [pc, #168]	; (801139c <__sflush_r+0x108>)
 80112f4:	40ca      	lsrs	r2, r1
 80112f6:	07d6      	lsls	r6, r2, #31
 80112f8:	d528      	bpl.n	801134c <__sflush_r+0xb8>
 80112fa:	2200      	movs	r2, #0
 80112fc:	6062      	str	r2, [r4, #4]
 80112fe:	04d9      	lsls	r1, r3, #19
 8011300:	6922      	ldr	r2, [r4, #16]
 8011302:	6022      	str	r2, [r4, #0]
 8011304:	d504      	bpl.n	8011310 <__sflush_r+0x7c>
 8011306:	1c42      	adds	r2, r0, #1
 8011308:	d101      	bne.n	801130e <__sflush_r+0x7a>
 801130a:	682b      	ldr	r3, [r5, #0]
 801130c:	b903      	cbnz	r3, 8011310 <__sflush_r+0x7c>
 801130e:	6560      	str	r0, [r4, #84]	; 0x54
 8011310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011312:	602f      	str	r7, [r5, #0]
 8011314:	2900      	cmp	r1, #0
 8011316:	d0ca      	beq.n	80112ae <__sflush_r+0x1a>
 8011318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801131c:	4299      	cmp	r1, r3
 801131e:	d002      	beq.n	8011326 <__sflush_r+0x92>
 8011320:	4628      	mov	r0, r5
 8011322:	f000 fd7f 	bl	8011e24 <_free_r>
 8011326:	2000      	movs	r0, #0
 8011328:	6360      	str	r0, [r4, #52]	; 0x34
 801132a:	e7c1      	b.n	80112b0 <__sflush_r+0x1c>
 801132c:	6a21      	ldr	r1, [r4, #32]
 801132e:	2301      	movs	r3, #1
 8011330:	4628      	mov	r0, r5
 8011332:	47b0      	blx	r6
 8011334:	1c41      	adds	r1, r0, #1
 8011336:	d1c7      	bne.n	80112c8 <__sflush_r+0x34>
 8011338:	682b      	ldr	r3, [r5, #0]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d0c4      	beq.n	80112c8 <__sflush_r+0x34>
 801133e:	2b1d      	cmp	r3, #29
 8011340:	d001      	beq.n	8011346 <__sflush_r+0xb2>
 8011342:	2b16      	cmp	r3, #22
 8011344:	d101      	bne.n	801134a <__sflush_r+0xb6>
 8011346:	602f      	str	r7, [r5, #0]
 8011348:	e7b1      	b.n	80112ae <__sflush_r+0x1a>
 801134a:	89a3      	ldrh	r3, [r4, #12]
 801134c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011350:	81a3      	strh	r3, [r4, #12]
 8011352:	e7ad      	b.n	80112b0 <__sflush_r+0x1c>
 8011354:	690f      	ldr	r7, [r1, #16]
 8011356:	2f00      	cmp	r7, #0
 8011358:	d0a9      	beq.n	80112ae <__sflush_r+0x1a>
 801135a:	0793      	lsls	r3, r2, #30
 801135c:	680e      	ldr	r6, [r1, #0]
 801135e:	bf08      	it	eq
 8011360:	694b      	ldreq	r3, [r1, #20]
 8011362:	600f      	str	r7, [r1, #0]
 8011364:	bf18      	it	ne
 8011366:	2300      	movne	r3, #0
 8011368:	eba6 0807 	sub.w	r8, r6, r7
 801136c:	608b      	str	r3, [r1, #8]
 801136e:	f1b8 0f00 	cmp.w	r8, #0
 8011372:	dd9c      	ble.n	80112ae <__sflush_r+0x1a>
 8011374:	6a21      	ldr	r1, [r4, #32]
 8011376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011378:	4643      	mov	r3, r8
 801137a:	463a      	mov	r2, r7
 801137c:	4628      	mov	r0, r5
 801137e:	47b0      	blx	r6
 8011380:	2800      	cmp	r0, #0
 8011382:	dc06      	bgt.n	8011392 <__sflush_r+0xfe>
 8011384:	89a3      	ldrh	r3, [r4, #12]
 8011386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801138a:	81a3      	strh	r3, [r4, #12]
 801138c:	f04f 30ff 	mov.w	r0, #4294967295
 8011390:	e78e      	b.n	80112b0 <__sflush_r+0x1c>
 8011392:	4407      	add	r7, r0
 8011394:	eba8 0800 	sub.w	r8, r8, r0
 8011398:	e7e9      	b.n	801136e <__sflush_r+0xda>
 801139a:	bf00      	nop
 801139c:	20400001 	.word	0x20400001

080113a0 <_fflush_r>:
 80113a0:	b538      	push	{r3, r4, r5, lr}
 80113a2:	690b      	ldr	r3, [r1, #16]
 80113a4:	4605      	mov	r5, r0
 80113a6:	460c      	mov	r4, r1
 80113a8:	b913      	cbnz	r3, 80113b0 <_fflush_r+0x10>
 80113aa:	2500      	movs	r5, #0
 80113ac:	4628      	mov	r0, r5
 80113ae:	bd38      	pop	{r3, r4, r5, pc}
 80113b0:	b118      	cbz	r0, 80113ba <_fflush_r+0x1a>
 80113b2:	6983      	ldr	r3, [r0, #24]
 80113b4:	b90b      	cbnz	r3, 80113ba <_fflush_r+0x1a>
 80113b6:	f000 f887 	bl	80114c8 <__sinit>
 80113ba:	4b14      	ldr	r3, [pc, #80]	; (801140c <_fflush_r+0x6c>)
 80113bc:	429c      	cmp	r4, r3
 80113be:	d11b      	bne.n	80113f8 <_fflush_r+0x58>
 80113c0:	686c      	ldr	r4, [r5, #4]
 80113c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d0ef      	beq.n	80113aa <_fflush_r+0xa>
 80113ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80113cc:	07d0      	lsls	r0, r2, #31
 80113ce:	d404      	bmi.n	80113da <_fflush_r+0x3a>
 80113d0:	0599      	lsls	r1, r3, #22
 80113d2:	d402      	bmi.n	80113da <_fflush_r+0x3a>
 80113d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113d6:	f000 f91a 	bl	801160e <__retarget_lock_acquire_recursive>
 80113da:	4628      	mov	r0, r5
 80113dc:	4621      	mov	r1, r4
 80113de:	f7ff ff59 	bl	8011294 <__sflush_r>
 80113e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113e4:	07da      	lsls	r2, r3, #31
 80113e6:	4605      	mov	r5, r0
 80113e8:	d4e0      	bmi.n	80113ac <_fflush_r+0xc>
 80113ea:	89a3      	ldrh	r3, [r4, #12]
 80113ec:	059b      	lsls	r3, r3, #22
 80113ee:	d4dd      	bmi.n	80113ac <_fflush_r+0xc>
 80113f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113f2:	f000 f90d 	bl	8011610 <__retarget_lock_release_recursive>
 80113f6:	e7d9      	b.n	80113ac <_fflush_r+0xc>
 80113f8:	4b05      	ldr	r3, [pc, #20]	; (8011410 <_fflush_r+0x70>)
 80113fa:	429c      	cmp	r4, r3
 80113fc:	d101      	bne.n	8011402 <_fflush_r+0x62>
 80113fe:	68ac      	ldr	r4, [r5, #8]
 8011400:	e7df      	b.n	80113c2 <_fflush_r+0x22>
 8011402:	4b04      	ldr	r3, [pc, #16]	; (8011414 <_fflush_r+0x74>)
 8011404:	429c      	cmp	r4, r3
 8011406:	bf08      	it	eq
 8011408:	68ec      	ldreq	r4, [r5, #12]
 801140a:	e7da      	b.n	80113c2 <_fflush_r+0x22>
 801140c:	08012fc4 	.word	0x08012fc4
 8011410:	08012fe4 	.word	0x08012fe4
 8011414:	08012fa4 	.word	0x08012fa4

08011418 <std>:
 8011418:	2300      	movs	r3, #0
 801141a:	b510      	push	{r4, lr}
 801141c:	4604      	mov	r4, r0
 801141e:	e9c0 3300 	strd	r3, r3, [r0]
 8011422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011426:	6083      	str	r3, [r0, #8]
 8011428:	8181      	strh	r1, [r0, #12]
 801142a:	6643      	str	r3, [r0, #100]	; 0x64
 801142c:	81c2      	strh	r2, [r0, #14]
 801142e:	6183      	str	r3, [r0, #24]
 8011430:	4619      	mov	r1, r3
 8011432:	2208      	movs	r2, #8
 8011434:	305c      	adds	r0, #92	; 0x5c
 8011436:	f7fe fb85 	bl	800fb44 <memset>
 801143a:	4b05      	ldr	r3, [pc, #20]	; (8011450 <std+0x38>)
 801143c:	6263      	str	r3, [r4, #36]	; 0x24
 801143e:	4b05      	ldr	r3, [pc, #20]	; (8011454 <std+0x3c>)
 8011440:	62a3      	str	r3, [r4, #40]	; 0x28
 8011442:	4b05      	ldr	r3, [pc, #20]	; (8011458 <std+0x40>)
 8011444:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011446:	4b05      	ldr	r3, [pc, #20]	; (801145c <std+0x44>)
 8011448:	6224      	str	r4, [r4, #32]
 801144a:	6323      	str	r3, [r4, #48]	; 0x30
 801144c:	bd10      	pop	{r4, pc}
 801144e:	bf00      	nop
 8011450:	0801224d 	.word	0x0801224d
 8011454:	0801226f 	.word	0x0801226f
 8011458:	080122a7 	.word	0x080122a7
 801145c:	080122cb 	.word	0x080122cb

08011460 <_cleanup_r>:
 8011460:	4901      	ldr	r1, [pc, #4]	; (8011468 <_cleanup_r+0x8>)
 8011462:	f000 b8af 	b.w	80115c4 <_fwalk_reent>
 8011466:	bf00      	nop
 8011468:	080113a1 	.word	0x080113a1

0801146c <__sfmoreglue>:
 801146c:	b570      	push	{r4, r5, r6, lr}
 801146e:	1e4a      	subs	r2, r1, #1
 8011470:	2568      	movs	r5, #104	; 0x68
 8011472:	4355      	muls	r5, r2
 8011474:	460e      	mov	r6, r1
 8011476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801147a:	f000 fd23 	bl	8011ec4 <_malloc_r>
 801147e:	4604      	mov	r4, r0
 8011480:	b140      	cbz	r0, 8011494 <__sfmoreglue+0x28>
 8011482:	2100      	movs	r1, #0
 8011484:	e9c0 1600 	strd	r1, r6, [r0]
 8011488:	300c      	adds	r0, #12
 801148a:	60a0      	str	r0, [r4, #8]
 801148c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011490:	f7fe fb58 	bl	800fb44 <memset>
 8011494:	4620      	mov	r0, r4
 8011496:	bd70      	pop	{r4, r5, r6, pc}

08011498 <__sfp_lock_acquire>:
 8011498:	4801      	ldr	r0, [pc, #4]	; (80114a0 <__sfp_lock_acquire+0x8>)
 801149a:	f000 b8b8 	b.w	801160e <__retarget_lock_acquire_recursive>
 801149e:	bf00      	nop
 80114a0:	240005bc 	.word	0x240005bc

080114a4 <__sfp_lock_release>:
 80114a4:	4801      	ldr	r0, [pc, #4]	; (80114ac <__sfp_lock_release+0x8>)
 80114a6:	f000 b8b3 	b.w	8011610 <__retarget_lock_release_recursive>
 80114aa:	bf00      	nop
 80114ac:	240005bc 	.word	0x240005bc

080114b0 <__sinit_lock_acquire>:
 80114b0:	4801      	ldr	r0, [pc, #4]	; (80114b8 <__sinit_lock_acquire+0x8>)
 80114b2:	f000 b8ac 	b.w	801160e <__retarget_lock_acquire_recursive>
 80114b6:	bf00      	nop
 80114b8:	240005b7 	.word	0x240005b7

080114bc <__sinit_lock_release>:
 80114bc:	4801      	ldr	r0, [pc, #4]	; (80114c4 <__sinit_lock_release+0x8>)
 80114be:	f000 b8a7 	b.w	8011610 <__retarget_lock_release_recursive>
 80114c2:	bf00      	nop
 80114c4:	240005b7 	.word	0x240005b7

080114c8 <__sinit>:
 80114c8:	b510      	push	{r4, lr}
 80114ca:	4604      	mov	r4, r0
 80114cc:	f7ff fff0 	bl	80114b0 <__sinit_lock_acquire>
 80114d0:	69a3      	ldr	r3, [r4, #24]
 80114d2:	b11b      	cbz	r3, 80114dc <__sinit+0x14>
 80114d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114d8:	f7ff bff0 	b.w	80114bc <__sinit_lock_release>
 80114dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80114e0:	6523      	str	r3, [r4, #80]	; 0x50
 80114e2:	4b13      	ldr	r3, [pc, #76]	; (8011530 <__sinit+0x68>)
 80114e4:	4a13      	ldr	r2, [pc, #76]	; (8011534 <__sinit+0x6c>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80114ea:	42a3      	cmp	r3, r4
 80114ec:	bf04      	itt	eq
 80114ee:	2301      	moveq	r3, #1
 80114f0:	61a3      	streq	r3, [r4, #24]
 80114f2:	4620      	mov	r0, r4
 80114f4:	f000 f820 	bl	8011538 <__sfp>
 80114f8:	6060      	str	r0, [r4, #4]
 80114fa:	4620      	mov	r0, r4
 80114fc:	f000 f81c 	bl	8011538 <__sfp>
 8011500:	60a0      	str	r0, [r4, #8]
 8011502:	4620      	mov	r0, r4
 8011504:	f000 f818 	bl	8011538 <__sfp>
 8011508:	2200      	movs	r2, #0
 801150a:	60e0      	str	r0, [r4, #12]
 801150c:	2104      	movs	r1, #4
 801150e:	6860      	ldr	r0, [r4, #4]
 8011510:	f7ff ff82 	bl	8011418 <std>
 8011514:	68a0      	ldr	r0, [r4, #8]
 8011516:	2201      	movs	r2, #1
 8011518:	2109      	movs	r1, #9
 801151a:	f7ff ff7d 	bl	8011418 <std>
 801151e:	68e0      	ldr	r0, [r4, #12]
 8011520:	2202      	movs	r2, #2
 8011522:	2112      	movs	r1, #18
 8011524:	f7ff ff78 	bl	8011418 <std>
 8011528:	2301      	movs	r3, #1
 801152a:	61a3      	str	r3, [r4, #24]
 801152c:	e7d2      	b.n	80114d4 <__sinit+0xc>
 801152e:	bf00      	nop
 8011530:	08012ed8 	.word	0x08012ed8
 8011534:	08011461 	.word	0x08011461

08011538 <__sfp>:
 8011538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801153a:	4607      	mov	r7, r0
 801153c:	f7ff ffac 	bl	8011498 <__sfp_lock_acquire>
 8011540:	4b1e      	ldr	r3, [pc, #120]	; (80115bc <__sfp+0x84>)
 8011542:	681e      	ldr	r6, [r3, #0]
 8011544:	69b3      	ldr	r3, [r6, #24]
 8011546:	b913      	cbnz	r3, 801154e <__sfp+0x16>
 8011548:	4630      	mov	r0, r6
 801154a:	f7ff ffbd 	bl	80114c8 <__sinit>
 801154e:	3648      	adds	r6, #72	; 0x48
 8011550:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011554:	3b01      	subs	r3, #1
 8011556:	d503      	bpl.n	8011560 <__sfp+0x28>
 8011558:	6833      	ldr	r3, [r6, #0]
 801155a:	b30b      	cbz	r3, 80115a0 <__sfp+0x68>
 801155c:	6836      	ldr	r6, [r6, #0]
 801155e:	e7f7      	b.n	8011550 <__sfp+0x18>
 8011560:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011564:	b9d5      	cbnz	r5, 801159c <__sfp+0x64>
 8011566:	4b16      	ldr	r3, [pc, #88]	; (80115c0 <__sfp+0x88>)
 8011568:	60e3      	str	r3, [r4, #12]
 801156a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801156e:	6665      	str	r5, [r4, #100]	; 0x64
 8011570:	f000 f84c 	bl	801160c <__retarget_lock_init_recursive>
 8011574:	f7ff ff96 	bl	80114a4 <__sfp_lock_release>
 8011578:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801157c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011580:	6025      	str	r5, [r4, #0]
 8011582:	61a5      	str	r5, [r4, #24]
 8011584:	2208      	movs	r2, #8
 8011586:	4629      	mov	r1, r5
 8011588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801158c:	f7fe fada 	bl	800fb44 <memset>
 8011590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011598:	4620      	mov	r0, r4
 801159a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801159c:	3468      	adds	r4, #104	; 0x68
 801159e:	e7d9      	b.n	8011554 <__sfp+0x1c>
 80115a0:	2104      	movs	r1, #4
 80115a2:	4638      	mov	r0, r7
 80115a4:	f7ff ff62 	bl	801146c <__sfmoreglue>
 80115a8:	4604      	mov	r4, r0
 80115aa:	6030      	str	r0, [r6, #0]
 80115ac:	2800      	cmp	r0, #0
 80115ae:	d1d5      	bne.n	801155c <__sfp+0x24>
 80115b0:	f7ff ff78 	bl	80114a4 <__sfp_lock_release>
 80115b4:	230c      	movs	r3, #12
 80115b6:	603b      	str	r3, [r7, #0]
 80115b8:	e7ee      	b.n	8011598 <__sfp+0x60>
 80115ba:	bf00      	nop
 80115bc:	08012ed8 	.word	0x08012ed8
 80115c0:	ffff0001 	.word	0xffff0001

080115c4 <_fwalk_reent>:
 80115c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115c8:	4606      	mov	r6, r0
 80115ca:	4688      	mov	r8, r1
 80115cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80115d0:	2700      	movs	r7, #0
 80115d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80115d6:	f1b9 0901 	subs.w	r9, r9, #1
 80115da:	d505      	bpl.n	80115e8 <_fwalk_reent+0x24>
 80115dc:	6824      	ldr	r4, [r4, #0]
 80115de:	2c00      	cmp	r4, #0
 80115e0:	d1f7      	bne.n	80115d2 <_fwalk_reent+0xe>
 80115e2:	4638      	mov	r0, r7
 80115e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115e8:	89ab      	ldrh	r3, [r5, #12]
 80115ea:	2b01      	cmp	r3, #1
 80115ec:	d907      	bls.n	80115fe <_fwalk_reent+0x3a>
 80115ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80115f2:	3301      	adds	r3, #1
 80115f4:	d003      	beq.n	80115fe <_fwalk_reent+0x3a>
 80115f6:	4629      	mov	r1, r5
 80115f8:	4630      	mov	r0, r6
 80115fa:	47c0      	blx	r8
 80115fc:	4307      	orrs	r7, r0
 80115fe:	3568      	adds	r5, #104	; 0x68
 8011600:	e7e9      	b.n	80115d6 <_fwalk_reent+0x12>
	...

08011604 <_localeconv_r>:
 8011604:	4800      	ldr	r0, [pc, #0]	; (8011608 <_localeconv_r+0x4>)
 8011606:	4770      	bx	lr
 8011608:	24000178 	.word	0x24000178

0801160c <__retarget_lock_init_recursive>:
 801160c:	4770      	bx	lr

0801160e <__retarget_lock_acquire_recursive>:
 801160e:	4770      	bx	lr

08011610 <__retarget_lock_release_recursive>:
 8011610:	4770      	bx	lr

08011612 <__swhatbuf_r>:
 8011612:	b570      	push	{r4, r5, r6, lr}
 8011614:	460e      	mov	r6, r1
 8011616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801161a:	2900      	cmp	r1, #0
 801161c:	b096      	sub	sp, #88	; 0x58
 801161e:	4614      	mov	r4, r2
 8011620:	461d      	mov	r5, r3
 8011622:	da07      	bge.n	8011634 <__swhatbuf_r+0x22>
 8011624:	2300      	movs	r3, #0
 8011626:	602b      	str	r3, [r5, #0]
 8011628:	89b3      	ldrh	r3, [r6, #12]
 801162a:	061a      	lsls	r2, r3, #24
 801162c:	d410      	bmi.n	8011650 <__swhatbuf_r+0x3e>
 801162e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011632:	e00e      	b.n	8011652 <__swhatbuf_r+0x40>
 8011634:	466a      	mov	r2, sp
 8011636:	f000 fe9f 	bl	8012378 <_fstat_r>
 801163a:	2800      	cmp	r0, #0
 801163c:	dbf2      	blt.n	8011624 <__swhatbuf_r+0x12>
 801163e:	9a01      	ldr	r2, [sp, #4]
 8011640:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011644:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011648:	425a      	negs	r2, r3
 801164a:	415a      	adcs	r2, r3
 801164c:	602a      	str	r2, [r5, #0]
 801164e:	e7ee      	b.n	801162e <__swhatbuf_r+0x1c>
 8011650:	2340      	movs	r3, #64	; 0x40
 8011652:	2000      	movs	r0, #0
 8011654:	6023      	str	r3, [r4, #0]
 8011656:	b016      	add	sp, #88	; 0x58
 8011658:	bd70      	pop	{r4, r5, r6, pc}
	...

0801165c <__smakebuf_r>:
 801165c:	898b      	ldrh	r3, [r1, #12]
 801165e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011660:	079d      	lsls	r5, r3, #30
 8011662:	4606      	mov	r6, r0
 8011664:	460c      	mov	r4, r1
 8011666:	d507      	bpl.n	8011678 <__smakebuf_r+0x1c>
 8011668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801166c:	6023      	str	r3, [r4, #0]
 801166e:	6123      	str	r3, [r4, #16]
 8011670:	2301      	movs	r3, #1
 8011672:	6163      	str	r3, [r4, #20]
 8011674:	b002      	add	sp, #8
 8011676:	bd70      	pop	{r4, r5, r6, pc}
 8011678:	ab01      	add	r3, sp, #4
 801167a:	466a      	mov	r2, sp
 801167c:	f7ff ffc9 	bl	8011612 <__swhatbuf_r>
 8011680:	9900      	ldr	r1, [sp, #0]
 8011682:	4605      	mov	r5, r0
 8011684:	4630      	mov	r0, r6
 8011686:	f000 fc1d 	bl	8011ec4 <_malloc_r>
 801168a:	b948      	cbnz	r0, 80116a0 <__smakebuf_r+0x44>
 801168c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011690:	059a      	lsls	r2, r3, #22
 8011692:	d4ef      	bmi.n	8011674 <__smakebuf_r+0x18>
 8011694:	f023 0303 	bic.w	r3, r3, #3
 8011698:	f043 0302 	orr.w	r3, r3, #2
 801169c:	81a3      	strh	r3, [r4, #12]
 801169e:	e7e3      	b.n	8011668 <__smakebuf_r+0xc>
 80116a0:	4b0d      	ldr	r3, [pc, #52]	; (80116d8 <__smakebuf_r+0x7c>)
 80116a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80116a4:	89a3      	ldrh	r3, [r4, #12]
 80116a6:	6020      	str	r0, [r4, #0]
 80116a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116ac:	81a3      	strh	r3, [r4, #12]
 80116ae:	9b00      	ldr	r3, [sp, #0]
 80116b0:	6163      	str	r3, [r4, #20]
 80116b2:	9b01      	ldr	r3, [sp, #4]
 80116b4:	6120      	str	r0, [r4, #16]
 80116b6:	b15b      	cbz	r3, 80116d0 <__smakebuf_r+0x74>
 80116b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116bc:	4630      	mov	r0, r6
 80116be:	f000 fe6d 	bl	801239c <_isatty_r>
 80116c2:	b128      	cbz	r0, 80116d0 <__smakebuf_r+0x74>
 80116c4:	89a3      	ldrh	r3, [r4, #12]
 80116c6:	f023 0303 	bic.w	r3, r3, #3
 80116ca:	f043 0301 	orr.w	r3, r3, #1
 80116ce:	81a3      	strh	r3, [r4, #12]
 80116d0:	89a0      	ldrh	r0, [r4, #12]
 80116d2:	4305      	orrs	r5, r0
 80116d4:	81a5      	strh	r5, [r4, #12]
 80116d6:	e7cd      	b.n	8011674 <__smakebuf_r+0x18>
 80116d8:	08011461 	.word	0x08011461

080116dc <malloc>:
 80116dc:	4b02      	ldr	r3, [pc, #8]	; (80116e8 <malloc+0xc>)
 80116de:	4601      	mov	r1, r0
 80116e0:	6818      	ldr	r0, [r3, #0]
 80116e2:	f000 bbef 	b.w	8011ec4 <_malloc_r>
 80116e6:	bf00      	nop
 80116e8:	24000024 	.word	0x24000024

080116ec <memcpy>:
 80116ec:	440a      	add	r2, r1
 80116ee:	4291      	cmp	r1, r2
 80116f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80116f4:	d100      	bne.n	80116f8 <memcpy+0xc>
 80116f6:	4770      	bx	lr
 80116f8:	b510      	push	{r4, lr}
 80116fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011702:	4291      	cmp	r1, r2
 8011704:	d1f9      	bne.n	80116fa <memcpy+0xe>
 8011706:	bd10      	pop	{r4, pc}

08011708 <_Balloc>:
 8011708:	b570      	push	{r4, r5, r6, lr}
 801170a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801170c:	4604      	mov	r4, r0
 801170e:	460d      	mov	r5, r1
 8011710:	b976      	cbnz	r6, 8011730 <_Balloc+0x28>
 8011712:	2010      	movs	r0, #16
 8011714:	f7ff ffe2 	bl	80116dc <malloc>
 8011718:	4602      	mov	r2, r0
 801171a:	6260      	str	r0, [r4, #36]	; 0x24
 801171c:	b920      	cbnz	r0, 8011728 <_Balloc+0x20>
 801171e:	4b18      	ldr	r3, [pc, #96]	; (8011780 <_Balloc+0x78>)
 8011720:	4818      	ldr	r0, [pc, #96]	; (8011784 <_Balloc+0x7c>)
 8011722:	2166      	movs	r1, #102	; 0x66
 8011724:	f000 fde8 	bl	80122f8 <__assert_func>
 8011728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801172c:	6006      	str	r6, [r0, #0]
 801172e:	60c6      	str	r6, [r0, #12]
 8011730:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011732:	68f3      	ldr	r3, [r6, #12]
 8011734:	b183      	cbz	r3, 8011758 <_Balloc+0x50>
 8011736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011738:	68db      	ldr	r3, [r3, #12]
 801173a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801173e:	b9b8      	cbnz	r0, 8011770 <_Balloc+0x68>
 8011740:	2101      	movs	r1, #1
 8011742:	fa01 f605 	lsl.w	r6, r1, r5
 8011746:	1d72      	adds	r2, r6, #5
 8011748:	0092      	lsls	r2, r2, #2
 801174a:	4620      	mov	r0, r4
 801174c:	f000 fb5a 	bl	8011e04 <_calloc_r>
 8011750:	b160      	cbz	r0, 801176c <_Balloc+0x64>
 8011752:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011756:	e00e      	b.n	8011776 <_Balloc+0x6e>
 8011758:	2221      	movs	r2, #33	; 0x21
 801175a:	2104      	movs	r1, #4
 801175c:	4620      	mov	r0, r4
 801175e:	f000 fb51 	bl	8011e04 <_calloc_r>
 8011762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011764:	60f0      	str	r0, [r6, #12]
 8011766:	68db      	ldr	r3, [r3, #12]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d1e4      	bne.n	8011736 <_Balloc+0x2e>
 801176c:	2000      	movs	r0, #0
 801176e:	bd70      	pop	{r4, r5, r6, pc}
 8011770:	6802      	ldr	r2, [r0, #0]
 8011772:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011776:	2300      	movs	r3, #0
 8011778:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801177c:	e7f7      	b.n	801176e <_Balloc+0x66>
 801177e:	bf00      	nop
 8011780:	08012f1d 	.word	0x08012f1d
 8011784:	08013004 	.word	0x08013004

08011788 <_Bfree>:
 8011788:	b570      	push	{r4, r5, r6, lr}
 801178a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801178c:	4605      	mov	r5, r0
 801178e:	460c      	mov	r4, r1
 8011790:	b976      	cbnz	r6, 80117b0 <_Bfree+0x28>
 8011792:	2010      	movs	r0, #16
 8011794:	f7ff ffa2 	bl	80116dc <malloc>
 8011798:	4602      	mov	r2, r0
 801179a:	6268      	str	r0, [r5, #36]	; 0x24
 801179c:	b920      	cbnz	r0, 80117a8 <_Bfree+0x20>
 801179e:	4b09      	ldr	r3, [pc, #36]	; (80117c4 <_Bfree+0x3c>)
 80117a0:	4809      	ldr	r0, [pc, #36]	; (80117c8 <_Bfree+0x40>)
 80117a2:	218a      	movs	r1, #138	; 0x8a
 80117a4:	f000 fda8 	bl	80122f8 <__assert_func>
 80117a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80117ac:	6006      	str	r6, [r0, #0]
 80117ae:	60c6      	str	r6, [r0, #12]
 80117b0:	b13c      	cbz	r4, 80117c2 <_Bfree+0x3a>
 80117b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80117b4:	6862      	ldr	r2, [r4, #4]
 80117b6:	68db      	ldr	r3, [r3, #12]
 80117b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80117bc:	6021      	str	r1, [r4, #0]
 80117be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80117c2:	bd70      	pop	{r4, r5, r6, pc}
 80117c4:	08012f1d 	.word	0x08012f1d
 80117c8:	08013004 	.word	0x08013004

080117cc <__multadd>:
 80117cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117d0:	690e      	ldr	r6, [r1, #16]
 80117d2:	4607      	mov	r7, r0
 80117d4:	4698      	mov	r8, r3
 80117d6:	460c      	mov	r4, r1
 80117d8:	f101 0014 	add.w	r0, r1, #20
 80117dc:	2300      	movs	r3, #0
 80117de:	6805      	ldr	r5, [r0, #0]
 80117e0:	b2a9      	uxth	r1, r5
 80117e2:	fb02 8101 	mla	r1, r2, r1, r8
 80117e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80117ea:	0c2d      	lsrs	r5, r5, #16
 80117ec:	fb02 c505 	mla	r5, r2, r5, ip
 80117f0:	b289      	uxth	r1, r1
 80117f2:	3301      	adds	r3, #1
 80117f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80117f8:	429e      	cmp	r6, r3
 80117fa:	f840 1b04 	str.w	r1, [r0], #4
 80117fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011802:	dcec      	bgt.n	80117de <__multadd+0x12>
 8011804:	f1b8 0f00 	cmp.w	r8, #0
 8011808:	d022      	beq.n	8011850 <__multadd+0x84>
 801180a:	68a3      	ldr	r3, [r4, #8]
 801180c:	42b3      	cmp	r3, r6
 801180e:	dc19      	bgt.n	8011844 <__multadd+0x78>
 8011810:	6861      	ldr	r1, [r4, #4]
 8011812:	4638      	mov	r0, r7
 8011814:	3101      	adds	r1, #1
 8011816:	f7ff ff77 	bl	8011708 <_Balloc>
 801181a:	4605      	mov	r5, r0
 801181c:	b928      	cbnz	r0, 801182a <__multadd+0x5e>
 801181e:	4602      	mov	r2, r0
 8011820:	4b0d      	ldr	r3, [pc, #52]	; (8011858 <__multadd+0x8c>)
 8011822:	480e      	ldr	r0, [pc, #56]	; (801185c <__multadd+0x90>)
 8011824:	21b5      	movs	r1, #181	; 0xb5
 8011826:	f000 fd67 	bl	80122f8 <__assert_func>
 801182a:	6922      	ldr	r2, [r4, #16]
 801182c:	3202      	adds	r2, #2
 801182e:	f104 010c 	add.w	r1, r4, #12
 8011832:	0092      	lsls	r2, r2, #2
 8011834:	300c      	adds	r0, #12
 8011836:	f7ff ff59 	bl	80116ec <memcpy>
 801183a:	4621      	mov	r1, r4
 801183c:	4638      	mov	r0, r7
 801183e:	f7ff ffa3 	bl	8011788 <_Bfree>
 8011842:	462c      	mov	r4, r5
 8011844:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011848:	3601      	adds	r6, #1
 801184a:	f8c3 8014 	str.w	r8, [r3, #20]
 801184e:	6126      	str	r6, [r4, #16]
 8011850:	4620      	mov	r0, r4
 8011852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011856:	bf00      	nop
 8011858:	08012f93 	.word	0x08012f93
 801185c:	08013004 	.word	0x08013004

08011860 <__hi0bits>:
 8011860:	0c03      	lsrs	r3, r0, #16
 8011862:	041b      	lsls	r3, r3, #16
 8011864:	b9d3      	cbnz	r3, 801189c <__hi0bits+0x3c>
 8011866:	0400      	lsls	r0, r0, #16
 8011868:	2310      	movs	r3, #16
 801186a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801186e:	bf04      	itt	eq
 8011870:	0200      	lsleq	r0, r0, #8
 8011872:	3308      	addeq	r3, #8
 8011874:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011878:	bf04      	itt	eq
 801187a:	0100      	lsleq	r0, r0, #4
 801187c:	3304      	addeq	r3, #4
 801187e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011882:	bf04      	itt	eq
 8011884:	0080      	lsleq	r0, r0, #2
 8011886:	3302      	addeq	r3, #2
 8011888:	2800      	cmp	r0, #0
 801188a:	db05      	blt.n	8011898 <__hi0bits+0x38>
 801188c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011890:	f103 0301 	add.w	r3, r3, #1
 8011894:	bf08      	it	eq
 8011896:	2320      	moveq	r3, #32
 8011898:	4618      	mov	r0, r3
 801189a:	4770      	bx	lr
 801189c:	2300      	movs	r3, #0
 801189e:	e7e4      	b.n	801186a <__hi0bits+0xa>

080118a0 <__lo0bits>:
 80118a0:	6803      	ldr	r3, [r0, #0]
 80118a2:	f013 0207 	ands.w	r2, r3, #7
 80118a6:	4601      	mov	r1, r0
 80118a8:	d00b      	beq.n	80118c2 <__lo0bits+0x22>
 80118aa:	07da      	lsls	r2, r3, #31
 80118ac:	d424      	bmi.n	80118f8 <__lo0bits+0x58>
 80118ae:	0798      	lsls	r0, r3, #30
 80118b0:	bf49      	itett	mi
 80118b2:	085b      	lsrmi	r3, r3, #1
 80118b4:	089b      	lsrpl	r3, r3, #2
 80118b6:	2001      	movmi	r0, #1
 80118b8:	600b      	strmi	r3, [r1, #0]
 80118ba:	bf5c      	itt	pl
 80118bc:	600b      	strpl	r3, [r1, #0]
 80118be:	2002      	movpl	r0, #2
 80118c0:	4770      	bx	lr
 80118c2:	b298      	uxth	r0, r3
 80118c4:	b9b0      	cbnz	r0, 80118f4 <__lo0bits+0x54>
 80118c6:	0c1b      	lsrs	r3, r3, #16
 80118c8:	2010      	movs	r0, #16
 80118ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80118ce:	bf04      	itt	eq
 80118d0:	0a1b      	lsreq	r3, r3, #8
 80118d2:	3008      	addeq	r0, #8
 80118d4:	071a      	lsls	r2, r3, #28
 80118d6:	bf04      	itt	eq
 80118d8:	091b      	lsreq	r3, r3, #4
 80118da:	3004      	addeq	r0, #4
 80118dc:	079a      	lsls	r2, r3, #30
 80118de:	bf04      	itt	eq
 80118e0:	089b      	lsreq	r3, r3, #2
 80118e2:	3002      	addeq	r0, #2
 80118e4:	07da      	lsls	r2, r3, #31
 80118e6:	d403      	bmi.n	80118f0 <__lo0bits+0x50>
 80118e8:	085b      	lsrs	r3, r3, #1
 80118ea:	f100 0001 	add.w	r0, r0, #1
 80118ee:	d005      	beq.n	80118fc <__lo0bits+0x5c>
 80118f0:	600b      	str	r3, [r1, #0]
 80118f2:	4770      	bx	lr
 80118f4:	4610      	mov	r0, r2
 80118f6:	e7e8      	b.n	80118ca <__lo0bits+0x2a>
 80118f8:	2000      	movs	r0, #0
 80118fa:	4770      	bx	lr
 80118fc:	2020      	movs	r0, #32
 80118fe:	4770      	bx	lr

08011900 <__i2b>:
 8011900:	b510      	push	{r4, lr}
 8011902:	460c      	mov	r4, r1
 8011904:	2101      	movs	r1, #1
 8011906:	f7ff feff 	bl	8011708 <_Balloc>
 801190a:	4602      	mov	r2, r0
 801190c:	b928      	cbnz	r0, 801191a <__i2b+0x1a>
 801190e:	4b05      	ldr	r3, [pc, #20]	; (8011924 <__i2b+0x24>)
 8011910:	4805      	ldr	r0, [pc, #20]	; (8011928 <__i2b+0x28>)
 8011912:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011916:	f000 fcef 	bl	80122f8 <__assert_func>
 801191a:	2301      	movs	r3, #1
 801191c:	6144      	str	r4, [r0, #20]
 801191e:	6103      	str	r3, [r0, #16]
 8011920:	bd10      	pop	{r4, pc}
 8011922:	bf00      	nop
 8011924:	08012f93 	.word	0x08012f93
 8011928:	08013004 	.word	0x08013004

0801192c <__multiply>:
 801192c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011930:	4614      	mov	r4, r2
 8011932:	690a      	ldr	r2, [r1, #16]
 8011934:	6923      	ldr	r3, [r4, #16]
 8011936:	429a      	cmp	r2, r3
 8011938:	bfb8      	it	lt
 801193a:	460b      	movlt	r3, r1
 801193c:	460d      	mov	r5, r1
 801193e:	bfbc      	itt	lt
 8011940:	4625      	movlt	r5, r4
 8011942:	461c      	movlt	r4, r3
 8011944:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011948:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801194c:	68ab      	ldr	r3, [r5, #8]
 801194e:	6869      	ldr	r1, [r5, #4]
 8011950:	eb0a 0709 	add.w	r7, sl, r9
 8011954:	42bb      	cmp	r3, r7
 8011956:	b085      	sub	sp, #20
 8011958:	bfb8      	it	lt
 801195a:	3101      	addlt	r1, #1
 801195c:	f7ff fed4 	bl	8011708 <_Balloc>
 8011960:	b930      	cbnz	r0, 8011970 <__multiply+0x44>
 8011962:	4602      	mov	r2, r0
 8011964:	4b42      	ldr	r3, [pc, #264]	; (8011a70 <__multiply+0x144>)
 8011966:	4843      	ldr	r0, [pc, #268]	; (8011a74 <__multiply+0x148>)
 8011968:	f240 115d 	movw	r1, #349	; 0x15d
 801196c:	f000 fcc4 	bl	80122f8 <__assert_func>
 8011970:	f100 0614 	add.w	r6, r0, #20
 8011974:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011978:	4633      	mov	r3, r6
 801197a:	2200      	movs	r2, #0
 801197c:	4543      	cmp	r3, r8
 801197e:	d31e      	bcc.n	80119be <__multiply+0x92>
 8011980:	f105 0c14 	add.w	ip, r5, #20
 8011984:	f104 0314 	add.w	r3, r4, #20
 8011988:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801198c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011990:	9202      	str	r2, [sp, #8]
 8011992:	ebac 0205 	sub.w	r2, ip, r5
 8011996:	3a15      	subs	r2, #21
 8011998:	f022 0203 	bic.w	r2, r2, #3
 801199c:	3204      	adds	r2, #4
 801199e:	f105 0115 	add.w	r1, r5, #21
 80119a2:	458c      	cmp	ip, r1
 80119a4:	bf38      	it	cc
 80119a6:	2204      	movcc	r2, #4
 80119a8:	9201      	str	r2, [sp, #4]
 80119aa:	9a02      	ldr	r2, [sp, #8]
 80119ac:	9303      	str	r3, [sp, #12]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d808      	bhi.n	80119c4 <__multiply+0x98>
 80119b2:	2f00      	cmp	r7, #0
 80119b4:	dc55      	bgt.n	8011a62 <__multiply+0x136>
 80119b6:	6107      	str	r7, [r0, #16]
 80119b8:	b005      	add	sp, #20
 80119ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119be:	f843 2b04 	str.w	r2, [r3], #4
 80119c2:	e7db      	b.n	801197c <__multiply+0x50>
 80119c4:	f8b3 a000 	ldrh.w	sl, [r3]
 80119c8:	f1ba 0f00 	cmp.w	sl, #0
 80119cc:	d020      	beq.n	8011a10 <__multiply+0xe4>
 80119ce:	f105 0e14 	add.w	lr, r5, #20
 80119d2:	46b1      	mov	r9, r6
 80119d4:	2200      	movs	r2, #0
 80119d6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80119da:	f8d9 b000 	ldr.w	fp, [r9]
 80119de:	b2a1      	uxth	r1, r4
 80119e0:	fa1f fb8b 	uxth.w	fp, fp
 80119e4:	fb0a b101 	mla	r1, sl, r1, fp
 80119e8:	4411      	add	r1, r2
 80119ea:	f8d9 2000 	ldr.w	r2, [r9]
 80119ee:	0c24      	lsrs	r4, r4, #16
 80119f0:	0c12      	lsrs	r2, r2, #16
 80119f2:	fb0a 2404 	mla	r4, sl, r4, r2
 80119f6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80119fa:	b289      	uxth	r1, r1
 80119fc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011a00:	45f4      	cmp	ip, lr
 8011a02:	f849 1b04 	str.w	r1, [r9], #4
 8011a06:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011a0a:	d8e4      	bhi.n	80119d6 <__multiply+0xaa>
 8011a0c:	9901      	ldr	r1, [sp, #4]
 8011a0e:	5072      	str	r2, [r6, r1]
 8011a10:	9a03      	ldr	r2, [sp, #12]
 8011a12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011a16:	3304      	adds	r3, #4
 8011a18:	f1b9 0f00 	cmp.w	r9, #0
 8011a1c:	d01f      	beq.n	8011a5e <__multiply+0x132>
 8011a1e:	6834      	ldr	r4, [r6, #0]
 8011a20:	f105 0114 	add.w	r1, r5, #20
 8011a24:	46b6      	mov	lr, r6
 8011a26:	f04f 0a00 	mov.w	sl, #0
 8011a2a:	880a      	ldrh	r2, [r1, #0]
 8011a2c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011a30:	fb09 b202 	mla	r2, r9, r2, fp
 8011a34:	4492      	add	sl, r2
 8011a36:	b2a4      	uxth	r4, r4
 8011a38:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011a3c:	f84e 4b04 	str.w	r4, [lr], #4
 8011a40:	f851 4b04 	ldr.w	r4, [r1], #4
 8011a44:	f8be 2000 	ldrh.w	r2, [lr]
 8011a48:	0c24      	lsrs	r4, r4, #16
 8011a4a:	fb09 2404 	mla	r4, r9, r4, r2
 8011a4e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011a52:	458c      	cmp	ip, r1
 8011a54:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011a58:	d8e7      	bhi.n	8011a2a <__multiply+0xfe>
 8011a5a:	9a01      	ldr	r2, [sp, #4]
 8011a5c:	50b4      	str	r4, [r6, r2]
 8011a5e:	3604      	adds	r6, #4
 8011a60:	e7a3      	b.n	80119aa <__multiply+0x7e>
 8011a62:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d1a5      	bne.n	80119b6 <__multiply+0x8a>
 8011a6a:	3f01      	subs	r7, #1
 8011a6c:	e7a1      	b.n	80119b2 <__multiply+0x86>
 8011a6e:	bf00      	nop
 8011a70:	08012f93 	.word	0x08012f93
 8011a74:	08013004 	.word	0x08013004

08011a78 <__pow5mult>:
 8011a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a7c:	4615      	mov	r5, r2
 8011a7e:	f012 0203 	ands.w	r2, r2, #3
 8011a82:	4606      	mov	r6, r0
 8011a84:	460f      	mov	r7, r1
 8011a86:	d007      	beq.n	8011a98 <__pow5mult+0x20>
 8011a88:	4c25      	ldr	r4, [pc, #148]	; (8011b20 <__pow5mult+0xa8>)
 8011a8a:	3a01      	subs	r2, #1
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a92:	f7ff fe9b 	bl	80117cc <__multadd>
 8011a96:	4607      	mov	r7, r0
 8011a98:	10ad      	asrs	r5, r5, #2
 8011a9a:	d03d      	beq.n	8011b18 <__pow5mult+0xa0>
 8011a9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011a9e:	b97c      	cbnz	r4, 8011ac0 <__pow5mult+0x48>
 8011aa0:	2010      	movs	r0, #16
 8011aa2:	f7ff fe1b 	bl	80116dc <malloc>
 8011aa6:	4602      	mov	r2, r0
 8011aa8:	6270      	str	r0, [r6, #36]	; 0x24
 8011aaa:	b928      	cbnz	r0, 8011ab8 <__pow5mult+0x40>
 8011aac:	4b1d      	ldr	r3, [pc, #116]	; (8011b24 <__pow5mult+0xac>)
 8011aae:	481e      	ldr	r0, [pc, #120]	; (8011b28 <__pow5mult+0xb0>)
 8011ab0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011ab4:	f000 fc20 	bl	80122f8 <__assert_func>
 8011ab8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011abc:	6004      	str	r4, [r0, #0]
 8011abe:	60c4      	str	r4, [r0, #12]
 8011ac0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011ac4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011ac8:	b94c      	cbnz	r4, 8011ade <__pow5mult+0x66>
 8011aca:	f240 2171 	movw	r1, #625	; 0x271
 8011ace:	4630      	mov	r0, r6
 8011ad0:	f7ff ff16 	bl	8011900 <__i2b>
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	f8c8 0008 	str.w	r0, [r8, #8]
 8011ada:	4604      	mov	r4, r0
 8011adc:	6003      	str	r3, [r0, #0]
 8011ade:	f04f 0900 	mov.w	r9, #0
 8011ae2:	07eb      	lsls	r3, r5, #31
 8011ae4:	d50a      	bpl.n	8011afc <__pow5mult+0x84>
 8011ae6:	4639      	mov	r1, r7
 8011ae8:	4622      	mov	r2, r4
 8011aea:	4630      	mov	r0, r6
 8011aec:	f7ff ff1e 	bl	801192c <__multiply>
 8011af0:	4639      	mov	r1, r7
 8011af2:	4680      	mov	r8, r0
 8011af4:	4630      	mov	r0, r6
 8011af6:	f7ff fe47 	bl	8011788 <_Bfree>
 8011afa:	4647      	mov	r7, r8
 8011afc:	106d      	asrs	r5, r5, #1
 8011afe:	d00b      	beq.n	8011b18 <__pow5mult+0xa0>
 8011b00:	6820      	ldr	r0, [r4, #0]
 8011b02:	b938      	cbnz	r0, 8011b14 <__pow5mult+0x9c>
 8011b04:	4622      	mov	r2, r4
 8011b06:	4621      	mov	r1, r4
 8011b08:	4630      	mov	r0, r6
 8011b0a:	f7ff ff0f 	bl	801192c <__multiply>
 8011b0e:	6020      	str	r0, [r4, #0]
 8011b10:	f8c0 9000 	str.w	r9, [r0]
 8011b14:	4604      	mov	r4, r0
 8011b16:	e7e4      	b.n	8011ae2 <__pow5mult+0x6a>
 8011b18:	4638      	mov	r0, r7
 8011b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b1e:	bf00      	nop
 8011b20:	08013158 	.word	0x08013158
 8011b24:	08012f1d 	.word	0x08012f1d
 8011b28:	08013004 	.word	0x08013004

08011b2c <__lshift>:
 8011b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b30:	460c      	mov	r4, r1
 8011b32:	6849      	ldr	r1, [r1, #4]
 8011b34:	6923      	ldr	r3, [r4, #16]
 8011b36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011b3a:	68a3      	ldr	r3, [r4, #8]
 8011b3c:	4607      	mov	r7, r0
 8011b3e:	4691      	mov	r9, r2
 8011b40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011b44:	f108 0601 	add.w	r6, r8, #1
 8011b48:	42b3      	cmp	r3, r6
 8011b4a:	db0b      	blt.n	8011b64 <__lshift+0x38>
 8011b4c:	4638      	mov	r0, r7
 8011b4e:	f7ff fddb 	bl	8011708 <_Balloc>
 8011b52:	4605      	mov	r5, r0
 8011b54:	b948      	cbnz	r0, 8011b6a <__lshift+0x3e>
 8011b56:	4602      	mov	r2, r0
 8011b58:	4b28      	ldr	r3, [pc, #160]	; (8011bfc <__lshift+0xd0>)
 8011b5a:	4829      	ldr	r0, [pc, #164]	; (8011c00 <__lshift+0xd4>)
 8011b5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011b60:	f000 fbca 	bl	80122f8 <__assert_func>
 8011b64:	3101      	adds	r1, #1
 8011b66:	005b      	lsls	r3, r3, #1
 8011b68:	e7ee      	b.n	8011b48 <__lshift+0x1c>
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	f100 0114 	add.w	r1, r0, #20
 8011b70:	f100 0210 	add.w	r2, r0, #16
 8011b74:	4618      	mov	r0, r3
 8011b76:	4553      	cmp	r3, sl
 8011b78:	db33      	blt.n	8011be2 <__lshift+0xb6>
 8011b7a:	6920      	ldr	r0, [r4, #16]
 8011b7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b80:	f104 0314 	add.w	r3, r4, #20
 8011b84:	f019 091f 	ands.w	r9, r9, #31
 8011b88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011b90:	d02b      	beq.n	8011bea <__lshift+0xbe>
 8011b92:	f1c9 0e20 	rsb	lr, r9, #32
 8011b96:	468a      	mov	sl, r1
 8011b98:	2200      	movs	r2, #0
 8011b9a:	6818      	ldr	r0, [r3, #0]
 8011b9c:	fa00 f009 	lsl.w	r0, r0, r9
 8011ba0:	4302      	orrs	r2, r0
 8011ba2:	f84a 2b04 	str.w	r2, [sl], #4
 8011ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011baa:	459c      	cmp	ip, r3
 8011bac:	fa22 f20e 	lsr.w	r2, r2, lr
 8011bb0:	d8f3      	bhi.n	8011b9a <__lshift+0x6e>
 8011bb2:	ebac 0304 	sub.w	r3, ip, r4
 8011bb6:	3b15      	subs	r3, #21
 8011bb8:	f023 0303 	bic.w	r3, r3, #3
 8011bbc:	3304      	adds	r3, #4
 8011bbe:	f104 0015 	add.w	r0, r4, #21
 8011bc2:	4584      	cmp	ip, r0
 8011bc4:	bf38      	it	cc
 8011bc6:	2304      	movcc	r3, #4
 8011bc8:	50ca      	str	r2, [r1, r3]
 8011bca:	b10a      	cbz	r2, 8011bd0 <__lshift+0xa4>
 8011bcc:	f108 0602 	add.w	r6, r8, #2
 8011bd0:	3e01      	subs	r6, #1
 8011bd2:	4638      	mov	r0, r7
 8011bd4:	612e      	str	r6, [r5, #16]
 8011bd6:	4621      	mov	r1, r4
 8011bd8:	f7ff fdd6 	bl	8011788 <_Bfree>
 8011bdc:	4628      	mov	r0, r5
 8011bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011be2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011be6:	3301      	adds	r3, #1
 8011be8:	e7c5      	b.n	8011b76 <__lshift+0x4a>
 8011bea:	3904      	subs	r1, #4
 8011bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bf0:	f841 2f04 	str.w	r2, [r1, #4]!
 8011bf4:	459c      	cmp	ip, r3
 8011bf6:	d8f9      	bhi.n	8011bec <__lshift+0xc0>
 8011bf8:	e7ea      	b.n	8011bd0 <__lshift+0xa4>
 8011bfa:	bf00      	nop
 8011bfc:	08012f93 	.word	0x08012f93
 8011c00:	08013004 	.word	0x08013004

08011c04 <__mcmp>:
 8011c04:	b530      	push	{r4, r5, lr}
 8011c06:	6902      	ldr	r2, [r0, #16]
 8011c08:	690c      	ldr	r4, [r1, #16]
 8011c0a:	1b12      	subs	r2, r2, r4
 8011c0c:	d10e      	bne.n	8011c2c <__mcmp+0x28>
 8011c0e:	f100 0314 	add.w	r3, r0, #20
 8011c12:	3114      	adds	r1, #20
 8011c14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011c18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011c1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011c20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011c24:	42a5      	cmp	r5, r4
 8011c26:	d003      	beq.n	8011c30 <__mcmp+0x2c>
 8011c28:	d305      	bcc.n	8011c36 <__mcmp+0x32>
 8011c2a:	2201      	movs	r2, #1
 8011c2c:	4610      	mov	r0, r2
 8011c2e:	bd30      	pop	{r4, r5, pc}
 8011c30:	4283      	cmp	r3, r0
 8011c32:	d3f3      	bcc.n	8011c1c <__mcmp+0x18>
 8011c34:	e7fa      	b.n	8011c2c <__mcmp+0x28>
 8011c36:	f04f 32ff 	mov.w	r2, #4294967295
 8011c3a:	e7f7      	b.n	8011c2c <__mcmp+0x28>

08011c3c <__mdiff>:
 8011c3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c40:	460c      	mov	r4, r1
 8011c42:	4606      	mov	r6, r0
 8011c44:	4611      	mov	r1, r2
 8011c46:	4620      	mov	r0, r4
 8011c48:	4617      	mov	r7, r2
 8011c4a:	f7ff ffdb 	bl	8011c04 <__mcmp>
 8011c4e:	1e05      	subs	r5, r0, #0
 8011c50:	d110      	bne.n	8011c74 <__mdiff+0x38>
 8011c52:	4629      	mov	r1, r5
 8011c54:	4630      	mov	r0, r6
 8011c56:	f7ff fd57 	bl	8011708 <_Balloc>
 8011c5a:	b930      	cbnz	r0, 8011c6a <__mdiff+0x2e>
 8011c5c:	4b39      	ldr	r3, [pc, #228]	; (8011d44 <__mdiff+0x108>)
 8011c5e:	4602      	mov	r2, r0
 8011c60:	f240 2132 	movw	r1, #562	; 0x232
 8011c64:	4838      	ldr	r0, [pc, #224]	; (8011d48 <__mdiff+0x10c>)
 8011c66:	f000 fb47 	bl	80122f8 <__assert_func>
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011c70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c74:	bfa4      	itt	ge
 8011c76:	463b      	movge	r3, r7
 8011c78:	4627      	movge	r7, r4
 8011c7a:	4630      	mov	r0, r6
 8011c7c:	6879      	ldr	r1, [r7, #4]
 8011c7e:	bfa6      	itte	ge
 8011c80:	461c      	movge	r4, r3
 8011c82:	2500      	movge	r5, #0
 8011c84:	2501      	movlt	r5, #1
 8011c86:	f7ff fd3f 	bl	8011708 <_Balloc>
 8011c8a:	b920      	cbnz	r0, 8011c96 <__mdiff+0x5a>
 8011c8c:	4b2d      	ldr	r3, [pc, #180]	; (8011d44 <__mdiff+0x108>)
 8011c8e:	4602      	mov	r2, r0
 8011c90:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011c94:	e7e6      	b.n	8011c64 <__mdiff+0x28>
 8011c96:	693e      	ldr	r6, [r7, #16]
 8011c98:	60c5      	str	r5, [r0, #12]
 8011c9a:	6925      	ldr	r5, [r4, #16]
 8011c9c:	f107 0114 	add.w	r1, r7, #20
 8011ca0:	f104 0914 	add.w	r9, r4, #20
 8011ca4:	f100 0e14 	add.w	lr, r0, #20
 8011ca8:	f107 0210 	add.w	r2, r7, #16
 8011cac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011cb0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011cb4:	46f2      	mov	sl, lr
 8011cb6:	2700      	movs	r7, #0
 8011cb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8011cbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011cc0:	fa1f f883 	uxth.w	r8, r3
 8011cc4:	fa17 f78b 	uxtah	r7, r7, fp
 8011cc8:	0c1b      	lsrs	r3, r3, #16
 8011cca:	eba7 0808 	sub.w	r8, r7, r8
 8011cce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011cd2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011cd6:	fa1f f888 	uxth.w	r8, r8
 8011cda:	141f      	asrs	r7, r3, #16
 8011cdc:	454d      	cmp	r5, r9
 8011cde:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011ce2:	f84a 3b04 	str.w	r3, [sl], #4
 8011ce6:	d8e7      	bhi.n	8011cb8 <__mdiff+0x7c>
 8011ce8:	1b2b      	subs	r3, r5, r4
 8011cea:	3b15      	subs	r3, #21
 8011cec:	f023 0303 	bic.w	r3, r3, #3
 8011cf0:	3304      	adds	r3, #4
 8011cf2:	3415      	adds	r4, #21
 8011cf4:	42a5      	cmp	r5, r4
 8011cf6:	bf38      	it	cc
 8011cf8:	2304      	movcc	r3, #4
 8011cfa:	4419      	add	r1, r3
 8011cfc:	4473      	add	r3, lr
 8011cfe:	469e      	mov	lr, r3
 8011d00:	460d      	mov	r5, r1
 8011d02:	4565      	cmp	r5, ip
 8011d04:	d30e      	bcc.n	8011d24 <__mdiff+0xe8>
 8011d06:	f10c 0203 	add.w	r2, ip, #3
 8011d0a:	1a52      	subs	r2, r2, r1
 8011d0c:	f022 0203 	bic.w	r2, r2, #3
 8011d10:	3903      	subs	r1, #3
 8011d12:	458c      	cmp	ip, r1
 8011d14:	bf38      	it	cc
 8011d16:	2200      	movcc	r2, #0
 8011d18:	441a      	add	r2, r3
 8011d1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011d1e:	b17b      	cbz	r3, 8011d40 <__mdiff+0x104>
 8011d20:	6106      	str	r6, [r0, #16]
 8011d22:	e7a5      	b.n	8011c70 <__mdiff+0x34>
 8011d24:	f855 8b04 	ldr.w	r8, [r5], #4
 8011d28:	fa17 f488 	uxtah	r4, r7, r8
 8011d2c:	1422      	asrs	r2, r4, #16
 8011d2e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011d32:	b2a4      	uxth	r4, r4
 8011d34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011d38:	f84e 4b04 	str.w	r4, [lr], #4
 8011d3c:	1417      	asrs	r7, r2, #16
 8011d3e:	e7e0      	b.n	8011d02 <__mdiff+0xc6>
 8011d40:	3e01      	subs	r6, #1
 8011d42:	e7ea      	b.n	8011d1a <__mdiff+0xde>
 8011d44:	08012f93 	.word	0x08012f93
 8011d48:	08013004 	.word	0x08013004

08011d4c <__d2b>:
 8011d4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011d50:	4689      	mov	r9, r1
 8011d52:	2101      	movs	r1, #1
 8011d54:	ec57 6b10 	vmov	r6, r7, d0
 8011d58:	4690      	mov	r8, r2
 8011d5a:	f7ff fcd5 	bl	8011708 <_Balloc>
 8011d5e:	4604      	mov	r4, r0
 8011d60:	b930      	cbnz	r0, 8011d70 <__d2b+0x24>
 8011d62:	4602      	mov	r2, r0
 8011d64:	4b25      	ldr	r3, [pc, #148]	; (8011dfc <__d2b+0xb0>)
 8011d66:	4826      	ldr	r0, [pc, #152]	; (8011e00 <__d2b+0xb4>)
 8011d68:	f240 310a 	movw	r1, #778	; 0x30a
 8011d6c:	f000 fac4 	bl	80122f8 <__assert_func>
 8011d70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011d74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011d78:	bb35      	cbnz	r5, 8011dc8 <__d2b+0x7c>
 8011d7a:	2e00      	cmp	r6, #0
 8011d7c:	9301      	str	r3, [sp, #4]
 8011d7e:	d028      	beq.n	8011dd2 <__d2b+0x86>
 8011d80:	4668      	mov	r0, sp
 8011d82:	9600      	str	r6, [sp, #0]
 8011d84:	f7ff fd8c 	bl	80118a0 <__lo0bits>
 8011d88:	9900      	ldr	r1, [sp, #0]
 8011d8a:	b300      	cbz	r0, 8011dce <__d2b+0x82>
 8011d8c:	9a01      	ldr	r2, [sp, #4]
 8011d8e:	f1c0 0320 	rsb	r3, r0, #32
 8011d92:	fa02 f303 	lsl.w	r3, r2, r3
 8011d96:	430b      	orrs	r3, r1
 8011d98:	40c2      	lsrs	r2, r0
 8011d9a:	6163      	str	r3, [r4, #20]
 8011d9c:	9201      	str	r2, [sp, #4]
 8011d9e:	9b01      	ldr	r3, [sp, #4]
 8011da0:	61a3      	str	r3, [r4, #24]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	bf14      	ite	ne
 8011da6:	2202      	movne	r2, #2
 8011da8:	2201      	moveq	r2, #1
 8011daa:	6122      	str	r2, [r4, #16]
 8011dac:	b1d5      	cbz	r5, 8011de4 <__d2b+0x98>
 8011dae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011db2:	4405      	add	r5, r0
 8011db4:	f8c9 5000 	str.w	r5, [r9]
 8011db8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011dbc:	f8c8 0000 	str.w	r0, [r8]
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	b003      	add	sp, #12
 8011dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011dcc:	e7d5      	b.n	8011d7a <__d2b+0x2e>
 8011dce:	6161      	str	r1, [r4, #20]
 8011dd0:	e7e5      	b.n	8011d9e <__d2b+0x52>
 8011dd2:	a801      	add	r0, sp, #4
 8011dd4:	f7ff fd64 	bl	80118a0 <__lo0bits>
 8011dd8:	9b01      	ldr	r3, [sp, #4]
 8011dda:	6163      	str	r3, [r4, #20]
 8011ddc:	2201      	movs	r2, #1
 8011dde:	6122      	str	r2, [r4, #16]
 8011de0:	3020      	adds	r0, #32
 8011de2:	e7e3      	b.n	8011dac <__d2b+0x60>
 8011de4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011de8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011dec:	f8c9 0000 	str.w	r0, [r9]
 8011df0:	6918      	ldr	r0, [r3, #16]
 8011df2:	f7ff fd35 	bl	8011860 <__hi0bits>
 8011df6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011dfa:	e7df      	b.n	8011dbc <__d2b+0x70>
 8011dfc:	08012f93 	.word	0x08012f93
 8011e00:	08013004 	.word	0x08013004

08011e04 <_calloc_r>:
 8011e04:	b513      	push	{r0, r1, r4, lr}
 8011e06:	434a      	muls	r2, r1
 8011e08:	4611      	mov	r1, r2
 8011e0a:	9201      	str	r2, [sp, #4]
 8011e0c:	f000 f85a 	bl	8011ec4 <_malloc_r>
 8011e10:	4604      	mov	r4, r0
 8011e12:	b118      	cbz	r0, 8011e1c <_calloc_r+0x18>
 8011e14:	9a01      	ldr	r2, [sp, #4]
 8011e16:	2100      	movs	r1, #0
 8011e18:	f7fd fe94 	bl	800fb44 <memset>
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	b002      	add	sp, #8
 8011e20:	bd10      	pop	{r4, pc}
	...

08011e24 <_free_r>:
 8011e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e26:	2900      	cmp	r1, #0
 8011e28:	d048      	beq.n	8011ebc <_free_r+0x98>
 8011e2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e2e:	9001      	str	r0, [sp, #4]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	f1a1 0404 	sub.w	r4, r1, #4
 8011e36:	bfb8      	it	lt
 8011e38:	18e4      	addlt	r4, r4, r3
 8011e3a:	f000 fae3 	bl	8012404 <__malloc_lock>
 8011e3e:	4a20      	ldr	r2, [pc, #128]	; (8011ec0 <_free_r+0x9c>)
 8011e40:	9801      	ldr	r0, [sp, #4]
 8011e42:	6813      	ldr	r3, [r2, #0]
 8011e44:	4615      	mov	r5, r2
 8011e46:	b933      	cbnz	r3, 8011e56 <_free_r+0x32>
 8011e48:	6063      	str	r3, [r4, #4]
 8011e4a:	6014      	str	r4, [r2, #0]
 8011e4c:	b003      	add	sp, #12
 8011e4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e52:	f000 badd 	b.w	8012410 <__malloc_unlock>
 8011e56:	42a3      	cmp	r3, r4
 8011e58:	d90b      	bls.n	8011e72 <_free_r+0x4e>
 8011e5a:	6821      	ldr	r1, [r4, #0]
 8011e5c:	1862      	adds	r2, r4, r1
 8011e5e:	4293      	cmp	r3, r2
 8011e60:	bf04      	itt	eq
 8011e62:	681a      	ldreq	r2, [r3, #0]
 8011e64:	685b      	ldreq	r3, [r3, #4]
 8011e66:	6063      	str	r3, [r4, #4]
 8011e68:	bf04      	itt	eq
 8011e6a:	1852      	addeq	r2, r2, r1
 8011e6c:	6022      	streq	r2, [r4, #0]
 8011e6e:	602c      	str	r4, [r5, #0]
 8011e70:	e7ec      	b.n	8011e4c <_free_r+0x28>
 8011e72:	461a      	mov	r2, r3
 8011e74:	685b      	ldr	r3, [r3, #4]
 8011e76:	b10b      	cbz	r3, 8011e7c <_free_r+0x58>
 8011e78:	42a3      	cmp	r3, r4
 8011e7a:	d9fa      	bls.n	8011e72 <_free_r+0x4e>
 8011e7c:	6811      	ldr	r1, [r2, #0]
 8011e7e:	1855      	adds	r5, r2, r1
 8011e80:	42a5      	cmp	r5, r4
 8011e82:	d10b      	bne.n	8011e9c <_free_r+0x78>
 8011e84:	6824      	ldr	r4, [r4, #0]
 8011e86:	4421      	add	r1, r4
 8011e88:	1854      	adds	r4, r2, r1
 8011e8a:	42a3      	cmp	r3, r4
 8011e8c:	6011      	str	r1, [r2, #0]
 8011e8e:	d1dd      	bne.n	8011e4c <_free_r+0x28>
 8011e90:	681c      	ldr	r4, [r3, #0]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	6053      	str	r3, [r2, #4]
 8011e96:	4421      	add	r1, r4
 8011e98:	6011      	str	r1, [r2, #0]
 8011e9a:	e7d7      	b.n	8011e4c <_free_r+0x28>
 8011e9c:	d902      	bls.n	8011ea4 <_free_r+0x80>
 8011e9e:	230c      	movs	r3, #12
 8011ea0:	6003      	str	r3, [r0, #0]
 8011ea2:	e7d3      	b.n	8011e4c <_free_r+0x28>
 8011ea4:	6825      	ldr	r5, [r4, #0]
 8011ea6:	1961      	adds	r1, r4, r5
 8011ea8:	428b      	cmp	r3, r1
 8011eaa:	bf04      	itt	eq
 8011eac:	6819      	ldreq	r1, [r3, #0]
 8011eae:	685b      	ldreq	r3, [r3, #4]
 8011eb0:	6063      	str	r3, [r4, #4]
 8011eb2:	bf04      	itt	eq
 8011eb4:	1949      	addeq	r1, r1, r5
 8011eb6:	6021      	streq	r1, [r4, #0]
 8011eb8:	6054      	str	r4, [r2, #4]
 8011eba:	e7c7      	b.n	8011e4c <_free_r+0x28>
 8011ebc:	b003      	add	sp, #12
 8011ebe:	bd30      	pop	{r4, r5, pc}
 8011ec0:	24000238 	.word	0x24000238

08011ec4 <_malloc_r>:
 8011ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ec6:	1ccd      	adds	r5, r1, #3
 8011ec8:	f025 0503 	bic.w	r5, r5, #3
 8011ecc:	3508      	adds	r5, #8
 8011ece:	2d0c      	cmp	r5, #12
 8011ed0:	bf38      	it	cc
 8011ed2:	250c      	movcc	r5, #12
 8011ed4:	2d00      	cmp	r5, #0
 8011ed6:	4606      	mov	r6, r0
 8011ed8:	db01      	blt.n	8011ede <_malloc_r+0x1a>
 8011eda:	42a9      	cmp	r1, r5
 8011edc:	d903      	bls.n	8011ee6 <_malloc_r+0x22>
 8011ede:	230c      	movs	r3, #12
 8011ee0:	6033      	str	r3, [r6, #0]
 8011ee2:	2000      	movs	r0, #0
 8011ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ee6:	f000 fa8d 	bl	8012404 <__malloc_lock>
 8011eea:	4921      	ldr	r1, [pc, #132]	; (8011f70 <_malloc_r+0xac>)
 8011eec:	680a      	ldr	r2, [r1, #0]
 8011eee:	4614      	mov	r4, r2
 8011ef0:	b99c      	cbnz	r4, 8011f1a <_malloc_r+0x56>
 8011ef2:	4f20      	ldr	r7, [pc, #128]	; (8011f74 <_malloc_r+0xb0>)
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	b923      	cbnz	r3, 8011f02 <_malloc_r+0x3e>
 8011ef8:	4621      	mov	r1, r4
 8011efa:	4630      	mov	r0, r6
 8011efc:	f000 f996 	bl	801222c <_sbrk_r>
 8011f00:	6038      	str	r0, [r7, #0]
 8011f02:	4629      	mov	r1, r5
 8011f04:	4630      	mov	r0, r6
 8011f06:	f000 f991 	bl	801222c <_sbrk_r>
 8011f0a:	1c43      	adds	r3, r0, #1
 8011f0c:	d123      	bne.n	8011f56 <_malloc_r+0x92>
 8011f0e:	230c      	movs	r3, #12
 8011f10:	6033      	str	r3, [r6, #0]
 8011f12:	4630      	mov	r0, r6
 8011f14:	f000 fa7c 	bl	8012410 <__malloc_unlock>
 8011f18:	e7e3      	b.n	8011ee2 <_malloc_r+0x1e>
 8011f1a:	6823      	ldr	r3, [r4, #0]
 8011f1c:	1b5b      	subs	r3, r3, r5
 8011f1e:	d417      	bmi.n	8011f50 <_malloc_r+0x8c>
 8011f20:	2b0b      	cmp	r3, #11
 8011f22:	d903      	bls.n	8011f2c <_malloc_r+0x68>
 8011f24:	6023      	str	r3, [r4, #0]
 8011f26:	441c      	add	r4, r3
 8011f28:	6025      	str	r5, [r4, #0]
 8011f2a:	e004      	b.n	8011f36 <_malloc_r+0x72>
 8011f2c:	6863      	ldr	r3, [r4, #4]
 8011f2e:	42a2      	cmp	r2, r4
 8011f30:	bf0c      	ite	eq
 8011f32:	600b      	streq	r3, [r1, #0]
 8011f34:	6053      	strne	r3, [r2, #4]
 8011f36:	4630      	mov	r0, r6
 8011f38:	f000 fa6a 	bl	8012410 <__malloc_unlock>
 8011f3c:	f104 000b 	add.w	r0, r4, #11
 8011f40:	1d23      	adds	r3, r4, #4
 8011f42:	f020 0007 	bic.w	r0, r0, #7
 8011f46:	1ac2      	subs	r2, r0, r3
 8011f48:	d0cc      	beq.n	8011ee4 <_malloc_r+0x20>
 8011f4a:	1a1b      	subs	r3, r3, r0
 8011f4c:	50a3      	str	r3, [r4, r2]
 8011f4e:	e7c9      	b.n	8011ee4 <_malloc_r+0x20>
 8011f50:	4622      	mov	r2, r4
 8011f52:	6864      	ldr	r4, [r4, #4]
 8011f54:	e7cc      	b.n	8011ef0 <_malloc_r+0x2c>
 8011f56:	1cc4      	adds	r4, r0, #3
 8011f58:	f024 0403 	bic.w	r4, r4, #3
 8011f5c:	42a0      	cmp	r0, r4
 8011f5e:	d0e3      	beq.n	8011f28 <_malloc_r+0x64>
 8011f60:	1a21      	subs	r1, r4, r0
 8011f62:	4630      	mov	r0, r6
 8011f64:	f000 f962 	bl	801222c <_sbrk_r>
 8011f68:	3001      	adds	r0, #1
 8011f6a:	d1dd      	bne.n	8011f28 <_malloc_r+0x64>
 8011f6c:	e7cf      	b.n	8011f0e <_malloc_r+0x4a>
 8011f6e:	bf00      	nop
 8011f70:	24000238 	.word	0x24000238
 8011f74:	2400023c 	.word	0x2400023c

08011f78 <__sfputc_r>:
 8011f78:	6893      	ldr	r3, [r2, #8]
 8011f7a:	3b01      	subs	r3, #1
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	b410      	push	{r4}
 8011f80:	6093      	str	r3, [r2, #8]
 8011f82:	da08      	bge.n	8011f96 <__sfputc_r+0x1e>
 8011f84:	6994      	ldr	r4, [r2, #24]
 8011f86:	42a3      	cmp	r3, r4
 8011f88:	db01      	blt.n	8011f8e <__sfputc_r+0x16>
 8011f8a:	290a      	cmp	r1, #10
 8011f8c:	d103      	bne.n	8011f96 <__sfputc_r+0x1e>
 8011f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f92:	f7fe bab1 	b.w	80104f8 <__swbuf_r>
 8011f96:	6813      	ldr	r3, [r2, #0]
 8011f98:	1c58      	adds	r0, r3, #1
 8011f9a:	6010      	str	r0, [r2, #0]
 8011f9c:	7019      	strb	r1, [r3, #0]
 8011f9e:	4608      	mov	r0, r1
 8011fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fa4:	4770      	bx	lr

08011fa6 <__sfputs_r>:
 8011fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fa8:	4606      	mov	r6, r0
 8011faa:	460f      	mov	r7, r1
 8011fac:	4614      	mov	r4, r2
 8011fae:	18d5      	adds	r5, r2, r3
 8011fb0:	42ac      	cmp	r4, r5
 8011fb2:	d101      	bne.n	8011fb8 <__sfputs_r+0x12>
 8011fb4:	2000      	movs	r0, #0
 8011fb6:	e007      	b.n	8011fc8 <__sfputs_r+0x22>
 8011fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fbc:	463a      	mov	r2, r7
 8011fbe:	4630      	mov	r0, r6
 8011fc0:	f7ff ffda 	bl	8011f78 <__sfputc_r>
 8011fc4:	1c43      	adds	r3, r0, #1
 8011fc6:	d1f3      	bne.n	8011fb0 <__sfputs_r+0xa>
 8011fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011fcc <_vfiprintf_r>:
 8011fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd0:	460d      	mov	r5, r1
 8011fd2:	b09d      	sub	sp, #116	; 0x74
 8011fd4:	4614      	mov	r4, r2
 8011fd6:	4698      	mov	r8, r3
 8011fd8:	4606      	mov	r6, r0
 8011fda:	b118      	cbz	r0, 8011fe4 <_vfiprintf_r+0x18>
 8011fdc:	6983      	ldr	r3, [r0, #24]
 8011fde:	b90b      	cbnz	r3, 8011fe4 <_vfiprintf_r+0x18>
 8011fe0:	f7ff fa72 	bl	80114c8 <__sinit>
 8011fe4:	4b89      	ldr	r3, [pc, #548]	; (801220c <_vfiprintf_r+0x240>)
 8011fe6:	429d      	cmp	r5, r3
 8011fe8:	d11b      	bne.n	8012022 <_vfiprintf_r+0x56>
 8011fea:	6875      	ldr	r5, [r6, #4]
 8011fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011fee:	07d9      	lsls	r1, r3, #31
 8011ff0:	d405      	bmi.n	8011ffe <_vfiprintf_r+0x32>
 8011ff2:	89ab      	ldrh	r3, [r5, #12]
 8011ff4:	059a      	lsls	r2, r3, #22
 8011ff6:	d402      	bmi.n	8011ffe <_vfiprintf_r+0x32>
 8011ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ffa:	f7ff fb08 	bl	801160e <__retarget_lock_acquire_recursive>
 8011ffe:	89ab      	ldrh	r3, [r5, #12]
 8012000:	071b      	lsls	r3, r3, #28
 8012002:	d501      	bpl.n	8012008 <_vfiprintf_r+0x3c>
 8012004:	692b      	ldr	r3, [r5, #16]
 8012006:	b9eb      	cbnz	r3, 8012044 <_vfiprintf_r+0x78>
 8012008:	4629      	mov	r1, r5
 801200a:	4630      	mov	r0, r6
 801200c:	f7fe fac6 	bl	801059c <__swsetup_r>
 8012010:	b1c0      	cbz	r0, 8012044 <_vfiprintf_r+0x78>
 8012012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012014:	07dc      	lsls	r4, r3, #31
 8012016:	d50e      	bpl.n	8012036 <_vfiprintf_r+0x6a>
 8012018:	f04f 30ff 	mov.w	r0, #4294967295
 801201c:	b01d      	add	sp, #116	; 0x74
 801201e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012022:	4b7b      	ldr	r3, [pc, #492]	; (8012210 <_vfiprintf_r+0x244>)
 8012024:	429d      	cmp	r5, r3
 8012026:	d101      	bne.n	801202c <_vfiprintf_r+0x60>
 8012028:	68b5      	ldr	r5, [r6, #8]
 801202a:	e7df      	b.n	8011fec <_vfiprintf_r+0x20>
 801202c:	4b79      	ldr	r3, [pc, #484]	; (8012214 <_vfiprintf_r+0x248>)
 801202e:	429d      	cmp	r5, r3
 8012030:	bf08      	it	eq
 8012032:	68f5      	ldreq	r5, [r6, #12]
 8012034:	e7da      	b.n	8011fec <_vfiprintf_r+0x20>
 8012036:	89ab      	ldrh	r3, [r5, #12]
 8012038:	0598      	lsls	r0, r3, #22
 801203a:	d4ed      	bmi.n	8012018 <_vfiprintf_r+0x4c>
 801203c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801203e:	f7ff fae7 	bl	8011610 <__retarget_lock_release_recursive>
 8012042:	e7e9      	b.n	8012018 <_vfiprintf_r+0x4c>
 8012044:	2300      	movs	r3, #0
 8012046:	9309      	str	r3, [sp, #36]	; 0x24
 8012048:	2320      	movs	r3, #32
 801204a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801204e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012052:	2330      	movs	r3, #48	; 0x30
 8012054:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012218 <_vfiprintf_r+0x24c>
 8012058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801205c:	f04f 0901 	mov.w	r9, #1
 8012060:	4623      	mov	r3, r4
 8012062:	469a      	mov	sl, r3
 8012064:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012068:	b10a      	cbz	r2, 801206e <_vfiprintf_r+0xa2>
 801206a:	2a25      	cmp	r2, #37	; 0x25
 801206c:	d1f9      	bne.n	8012062 <_vfiprintf_r+0x96>
 801206e:	ebba 0b04 	subs.w	fp, sl, r4
 8012072:	d00b      	beq.n	801208c <_vfiprintf_r+0xc0>
 8012074:	465b      	mov	r3, fp
 8012076:	4622      	mov	r2, r4
 8012078:	4629      	mov	r1, r5
 801207a:	4630      	mov	r0, r6
 801207c:	f7ff ff93 	bl	8011fa6 <__sfputs_r>
 8012080:	3001      	adds	r0, #1
 8012082:	f000 80aa 	beq.w	80121da <_vfiprintf_r+0x20e>
 8012086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012088:	445a      	add	r2, fp
 801208a:	9209      	str	r2, [sp, #36]	; 0x24
 801208c:	f89a 3000 	ldrb.w	r3, [sl]
 8012090:	2b00      	cmp	r3, #0
 8012092:	f000 80a2 	beq.w	80121da <_vfiprintf_r+0x20e>
 8012096:	2300      	movs	r3, #0
 8012098:	f04f 32ff 	mov.w	r2, #4294967295
 801209c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120a0:	f10a 0a01 	add.w	sl, sl, #1
 80120a4:	9304      	str	r3, [sp, #16]
 80120a6:	9307      	str	r3, [sp, #28]
 80120a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120ac:	931a      	str	r3, [sp, #104]	; 0x68
 80120ae:	4654      	mov	r4, sl
 80120b0:	2205      	movs	r2, #5
 80120b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120b6:	4858      	ldr	r0, [pc, #352]	; (8012218 <_vfiprintf_r+0x24c>)
 80120b8:	f7ee f91a 	bl	80002f0 <memchr>
 80120bc:	9a04      	ldr	r2, [sp, #16]
 80120be:	b9d8      	cbnz	r0, 80120f8 <_vfiprintf_r+0x12c>
 80120c0:	06d1      	lsls	r1, r2, #27
 80120c2:	bf44      	itt	mi
 80120c4:	2320      	movmi	r3, #32
 80120c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120ca:	0713      	lsls	r3, r2, #28
 80120cc:	bf44      	itt	mi
 80120ce:	232b      	movmi	r3, #43	; 0x2b
 80120d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120d4:	f89a 3000 	ldrb.w	r3, [sl]
 80120d8:	2b2a      	cmp	r3, #42	; 0x2a
 80120da:	d015      	beq.n	8012108 <_vfiprintf_r+0x13c>
 80120dc:	9a07      	ldr	r2, [sp, #28]
 80120de:	4654      	mov	r4, sl
 80120e0:	2000      	movs	r0, #0
 80120e2:	f04f 0c0a 	mov.w	ip, #10
 80120e6:	4621      	mov	r1, r4
 80120e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120ec:	3b30      	subs	r3, #48	; 0x30
 80120ee:	2b09      	cmp	r3, #9
 80120f0:	d94e      	bls.n	8012190 <_vfiprintf_r+0x1c4>
 80120f2:	b1b0      	cbz	r0, 8012122 <_vfiprintf_r+0x156>
 80120f4:	9207      	str	r2, [sp, #28]
 80120f6:	e014      	b.n	8012122 <_vfiprintf_r+0x156>
 80120f8:	eba0 0308 	sub.w	r3, r0, r8
 80120fc:	fa09 f303 	lsl.w	r3, r9, r3
 8012100:	4313      	orrs	r3, r2
 8012102:	9304      	str	r3, [sp, #16]
 8012104:	46a2      	mov	sl, r4
 8012106:	e7d2      	b.n	80120ae <_vfiprintf_r+0xe2>
 8012108:	9b03      	ldr	r3, [sp, #12]
 801210a:	1d19      	adds	r1, r3, #4
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	9103      	str	r1, [sp, #12]
 8012110:	2b00      	cmp	r3, #0
 8012112:	bfbb      	ittet	lt
 8012114:	425b      	neglt	r3, r3
 8012116:	f042 0202 	orrlt.w	r2, r2, #2
 801211a:	9307      	strge	r3, [sp, #28]
 801211c:	9307      	strlt	r3, [sp, #28]
 801211e:	bfb8      	it	lt
 8012120:	9204      	strlt	r2, [sp, #16]
 8012122:	7823      	ldrb	r3, [r4, #0]
 8012124:	2b2e      	cmp	r3, #46	; 0x2e
 8012126:	d10c      	bne.n	8012142 <_vfiprintf_r+0x176>
 8012128:	7863      	ldrb	r3, [r4, #1]
 801212a:	2b2a      	cmp	r3, #42	; 0x2a
 801212c:	d135      	bne.n	801219a <_vfiprintf_r+0x1ce>
 801212e:	9b03      	ldr	r3, [sp, #12]
 8012130:	1d1a      	adds	r2, r3, #4
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	9203      	str	r2, [sp, #12]
 8012136:	2b00      	cmp	r3, #0
 8012138:	bfb8      	it	lt
 801213a:	f04f 33ff 	movlt.w	r3, #4294967295
 801213e:	3402      	adds	r4, #2
 8012140:	9305      	str	r3, [sp, #20]
 8012142:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012228 <_vfiprintf_r+0x25c>
 8012146:	7821      	ldrb	r1, [r4, #0]
 8012148:	2203      	movs	r2, #3
 801214a:	4650      	mov	r0, sl
 801214c:	f7ee f8d0 	bl	80002f0 <memchr>
 8012150:	b140      	cbz	r0, 8012164 <_vfiprintf_r+0x198>
 8012152:	2340      	movs	r3, #64	; 0x40
 8012154:	eba0 000a 	sub.w	r0, r0, sl
 8012158:	fa03 f000 	lsl.w	r0, r3, r0
 801215c:	9b04      	ldr	r3, [sp, #16]
 801215e:	4303      	orrs	r3, r0
 8012160:	3401      	adds	r4, #1
 8012162:	9304      	str	r3, [sp, #16]
 8012164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012168:	482c      	ldr	r0, [pc, #176]	; (801221c <_vfiprintf_r+0x250>)
 801216a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801216e:	2206      	movs	r2, #6
 8012170:	f7ee f8be 	bl	80002f0 <memchr>
 8012174:	2800      	cmp	r0, #0
 8012176:	d03f      	beq.n	80121f8 <_vfiprintf_r+0x22c>
 8012178:	4b29      	ldr	r3, [pc, #164]	; (8012220 <_vfiprintf_r+0x254>)
 801217a:	bb1b      	cbnz	r3, 80121c4 <_vfiprintf_r+0x1f8>
 801217c:	9b03      	ldr	r3, [sp, #12]
 801217e:	3307      	adds	r3, #7
 8012180:	f023 0307 	bic.w	r3, r3, #7
 8012184:	3308      	adds	r3, #8
 8012186:	9303      	str	r3, [sp, #12]
 8012188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801218a:	443b      	add	r3, r7
 801218c:	9309      	str	r3, [sp, #36]	; 0x24
 801218e:	e767      	b.n	8012060 <_vfiprintf_r+0x94>
 8012190:	fb0c 3202 	mla	r2, ip, r2, r3
 8012194:	460c      	mov	r4, r1
 8012196:	2001      	movs	r0, #1
 8012198:	e7a5      	b.n	80120e6 <_vfiprintf_r+0x11a>
 801219a:	2300      	movs	r3, #0
 801219c:	3401      	adds	r4, #1
 801219e:	9305      	str	r3, [sp, #20]
 80121a0:	4619      	mov	r1, r3
 80121a2:	f04f 0c0a 	mov.w	ip, #10
 80121a6:	4620      	mov	r0, r4
 80121a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121ac:	3a30      	subs	r2, #48	; 0x30
 80121ae:	2a09      	cmp	r2, #9
 80121b0:	d903      	bls.n	80121ba <_vfiprintf_r+0x1ee>
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d0c5      	beq.n	8012142 <_vfiprintf_r+0x176>
 80121b6:	9105      	str	r1, [sp, #20]
 80121b8:	e7c3      	b.n	8012142 <_vfiprintf_r+0x176>
 80121ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80121be:	4604      	mov	r4, r0
 80121c0:	2301      	movs	r3, #1
 80121c2:	e7f0      	b.n	80121a6 <_vfiprintf_r+0x1da>
 80121c4:	ab03      	add	r3, sp, #12
 80121c6:	9300      	str	r3, [sp, #0]
 80121c8:	462a      	mov	r2, r5
 80121ca:	4b16      	ldr	r3, [pc, #88]	; (8012224 <_vfiprintf_r+0x258>)
 80121cc:	a904      	add	r1, sp, #16
 80121ce:	4630      	mov	r0, r6
 80121d0:	f7fd fd52 	bl	800fc78 <_printf_float>
 80121d4:	4607      	mov	r7, r0
 80121d6:	1c78      	adds	r0, r7, #1
 80121d8:	d1d6      	bne.n	8012188 <_vfiprintf_r+0x1bc>
 80121da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121dc:	07d9      	lsls	r1, r3, #31
 80121de:	d405      	bmi.n	80121ec <_vfiprintf_r+0x220>
 80121e0:	89ab      	ldrh	r3, [r5, #12]
 80121e2:	059a      	lsls	r2, r3, #22
 80121e4:	d402      	bmi.n	80121ec <_vfiprintf_r+0x220>
 80121e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121e8:	f7ff fa12 	bl	8011610 <__retarget_lock_release_recursive>
 80121ec:	89ab      	ldrh	r3, [r5, #12]
 80121ee:	065b      	lsls	r3, r3, #25
 80121f0:	f53f af12 	bmi.w	8012018 <_vfiprintf_r+0x4c>
 80121f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121f6:	e711      	b.n	801201c <_vfiprintf_r+0x50>
 80121f8:	ab03      	add	r3, sp, #12
 80121fa:	9300      	str	r3, [sp, #0]
 80121fc:	462a      	mov	r2, r5
 80121fe:	4b09      	ldr	r3, [pc, #36]	; (8012224 <_vfiprintf_r+0x258>)
 8012200:	a904      	add	r1, sp, #16
 8012202:	4630      	mov	r0, r6
 8012204:	f7fd ffc4 	bl	8010190 <_printf_i>
 8012208:	e7e4      	b.n	80121d4 <_vfiprintf_r+0x208>
 801220a:	bf00      	nop
 801220c:	08012fc4 	.word	0x08012fc4
 8012210:	08012fe4 	.word	0x08012fe4
 8012214:	08012fa4 	.word	0x08012fa4
 8012218:	08013164 	.word	0x08013164
 801221c:	0801316e 	.word	0x0801316e
 8012220:	0800fc79 	.word	0x0800fc79
 8012224:	08011fa7 	.word	0x08011fa7
 8012228:	0801316a 	.word	0x0801316a

0801222c <_sbrk_r>:
 801222c:	b538      	push	{r3, r4, r5, lr}
 801222e:	4d06      	ldr	r5, [pc, #24]	; (8012248 <_sbrk_r+0x1c>)
 8012230:	2300      	movs	r3, #0
 8012232:	4604      	mov	r4, r0
 8012234:	4608      	mov	r0, r1
 8012236:	602b      	str	r3, [r5, #0]
 8012238:	f7f1 fb46 	bl	80038c8 <_sbrk>
 801223c:	1c43      	adds	r3, r0, #1
 801223e:	d102      	bne.n	8012246 <_sbrk_r+0x1a>
 8012240:	682b      	ldr	r3, [r5, #0]
 8012242:	b103      	cbz	r3, 8012246 <_sbrk_r+0x1a>
 8012244:	6023      	str	r3, [r4, #0]
 8012246:	bd38      	pop	{r3, r4, r5, pc}
 8012248:	240005c0 	.word	0x240005c0

0801224c <__sread>:
 801224c:	b510      	push	{r4, lr}
 801224e:	460c      	mov	r4, r1
 8012250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012254:	f000 f8e2 	bl	801241c <_read_r>
 8012258:	2800      	cmp	r0, #0
 801225a:	bfab      	itete	ge
 801225c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801225e:	89a3      	ldrhlt	r3, [r4, #12]
 8012260:	181b      	addge	r3, r3, r0
 8012262:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012266:	bfac      	ite	ge
 8012268:	6563      	strge	r3, [r4, #84]	; 0x54
 801226a:	81a3      	strhlt	r3, [r4, #12]
 801226c:	bd10      	pop	{r4, pc}

0801226e <__swrite>:
 801226e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012272:	461f      	mov	r7, r3
 8012274:	898b      	ldrh	r3, [r1, #12]
 8012276:	05db      	lsls	r3, r3, #23
 8012278:	4605      	mov	r5, r0
 801227a:	460c      	mov	r4, r1
 801227c:	4616      	mov	r6, r2
 801227e:	d505      	bpl.n	801228c <__swrite+0x1e>
 8012280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012284:	2302      	movs	r3, #2
 8012286:	2200      	movs	r2, #0
 8012288:	f000 f898 	bl	80123bc <_lseek_r>
 801228c:	89a3      	ldrh	r3, [r4, #12]
 801228e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012296:	81a3      	strh	r3, [r4, #12]
 8012298:	4632      	mov	r2, r6
 801229a:	463b      	mov	r3, r7
 801229c:	4628      	mov	r0, r5
 801229e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122a2:	f000 b817 	b.w	80122d4 <_write_r>

080122a6 <__sseek>:
 80122a6:	b510      	push	{r4, lr}
 80122a8:	460c      	mov	r4, r1
 80122aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122ae:	f000 f885 	bl	80123bc <_lseek_r>
 80122b2:	1c43      	adds	r3, r0, #1
 80122b4:	89a3      	ldrh	r3, [r4, #12]
 80122b6:	bf15      	itete	ne
 80122b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80122ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80122be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80122c2:	81a3      	strheq	r3, [r4, #12]
 80122c4:	bf18      	it	ne
 80122c6:	81a3      	strhne	r3, [r4, #12]
 80122c8:	bd10      	pop	{r4, pc}

080122ca <__sclose>:
 80122ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122ce:	f000 b831 	b.w	8012334 <_close_r>
	...

080122d4 <_write_r>:
 80122d4:	b538      	push	{r3, r4, r5, lr}
 80122d6:	4d07      	ldr	r5, [pc, #28]	; (80122f4 <_write_r+0x20>)
 80122d8:	4604      	mov	r4, r0
 80122da:	4608      	mov	r0, r1
 80122dc:	4611      	mov	r1, r2
 80122de:	2200      	movs	r2, #0
 80122e0:	602a      	str	r2, [r5, #0]
 80122e2:	461a      	mov	r2, r3
 80122e4:	f7f0 fb5e 	bl	80029a4 <_write>
 80122e8:	1c43      	adds	r3, r0, #1
 80122ea:	d102      	bne.n	80122f2 <_write_r+0x1e>
 80122ec:	682b      	ldr	r3, [r5, #0]
 80122ee:	b103      	cbz	r3, 80122f2 <_write_r+0x1e>
 80122f0:	6023      	str	r3, [r4, #0]
 80122f2:	bd38      	pop	{r3, r4, r5, pc}
 80122f4:	240005c0 	.word	0x240005c0

080122f8 <__assert_func>:
 80122f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80122fa:	4614      	mov	r4, r2
 80122fc:	461a      	mov	r2, r3
 80122fe:	4b09      	ldr	r3, [pc, #36]	; (8012324 <__assert_func+0x2c>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	4605      	mov	r5, r0
 8012304:	68d8      	ldr	r0, [r3, #12]
 8012306:	b14c      	cbz	r4, 801231c <__assert_func+0x24>
 8012308:	4b07      	ldr	r3, [pc, #28]	; (8012328 <__assert_func+0x30>)
 801230a:	9100      	str	r1, [sp, #0]
 801230c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012310:	4906      	ldr	r1, [pc, #24]	; (801232c <__assert_func+0x34>)
 8012312:	462b      	mov	r3, r5
 8012314:	f000 f81e 	bl	8012354 <fiprintf>
 8012318:	f000 f89f 	bl	801245a <abort>
 801231c:	4b04      	ldr	r3, [pc, #16]	; (8012330 <__assert_func+0x38>)
 801231e:	461c      	mov	r4, r3
 8012320:	e7f3      	b.n	801230a <__assert_func+0x12>
 8012322:	bf00      	nop
 8012324:	24000024 	.word	0x24000024
 8012328:	08013175 	.word	0x08013175
 801232c:	08013182 	.word	0x08013182
 8012330:	080131b0 	.word	0x080131b0

08012334 <_close_r>:
 8012334:	b538      	push	{r3, r4, r5, lr}
 8012336:	4d06      	ldr	r5, [pc, #24]	; (8012350 <_close_r+0x1c>)
 8012338:	2300      	movs	r3, #0
 801233a:	4604      	mov	r4, r0
 801233c:	4608      	mov	r0, r1
 801233e:	602b      	str	r3, [r5, #0]
 8012340:	f7f1 fa8d 	bl	800385e <_close>
 8012344:	1c43      	adds	r3, r0, #1
 8012346:	d102      	bne.n	801234e <_close_r+0x1a>
 8012348:	682b      	ldr	r3, [r5, #0]
 801234a:	b103      	cbz	r3, 801234e <_close_r+0x1a>
 801234c:	6023      	str	r3, [r4, #0]
 801234e:	bd38      	pop	{r3, r4, r5, pc}
 8012350:	240005c0 	.word	0x240005c0

08012354 <fiprintf>:
 8012354:	b40e      	push	{r1, r2, r3}
 8012356:	b503      	push	{r0, r1, lr}
 8012358:	4601      	mov	r1, r0
 801235a:	ab03      	add	r3, sp, #12
 801235c:	4805      	ldr	r0, [pc, #20]	; (8012374 <fiprintf+0x20>)
 801235e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012362:	6800      	ldr	r0, [r0, #0]
 8012364:	9301      	str	r3, [sp, #4]
 8012366:	f7ff fe31 	bl	8011fcc <_vfiprintf_r>
 801236a:	b002      	add	sp, #8
 801236c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012370:	b003      	add	sp, #12
 8012372:	4770      	bx	lr
 8012374:	24000024 	.word	0x24000024

08012378 <_fstat_r>:
 8012378:	b538      	push	{r3, r4, r5, lr}
 801237a:	4d07      	ldr	r5, [pc, #28]	; (8012398 <_fstat_r+0x20>)
 801237c:	2300      	movs	r3, #0
 801237e:	4604      	mov	r4, r0
 8012380:	4608      	mov	r0, r1
 8012382:	4611      	mov	r1, r2
 8012384:	602b      	str	r3, [r5, #0]
 8012386:	f7f1 fa76 	bl	8003876 <_fstat>
 801238a:	1c43      	adds	r3, r0, #1
 801238c:	d102      	bne.n	8012394 <_fstat_r+0x1c>
 801238e:	682b      	ldr	r3, [r5, #0]
 8012390:	b103      	cbz	r3, 8012394 <_fstat_r+0x1c>
 8012392:	6023      	str	r3, [r4, #0]
 8012394:	bd38      	pop	{r3, r4, r5, pc}
 8012396:	bf00      	nop
 8012398:	240005c0 	.word	0x240005c0

0801239c <_isatty_r>:
 801239c:	b538      	push	{r3, r4, r5, lr}
 801239e:	4d06      	ldr	r5, [pc, #24]	; (80123b8 <_isatty_r+0x1c>)
 80123a0:	2300      	movs	r3, #0
 80123a2:	4604      	mov	r4, r0
 80123a4:	4608      	mov	r0, r1
 80123a6:	602b      	str	r3, [r5, #0]
 80123a8:	f7f1 fa75 	bl	8003896 <_isatty>
 80123ac:	1c43      	adds	r3, r0, #1
 80123ae:	d102      	bne.n	80123b6 <_isatty_r+0x1a>
 80123b0:	682b      	ldr	r3, [r5, #0]
 80123b2:	b103      	cbz	r3, 80123b6 <_isatty_r+0x1a>
 80123b4:	6023      	str	r3, [r4, #0]
 80123b6:	bd38      	pop	{r3, r4, r5, pc}
 80123b8:	240005c0 	.word	0x240005c0

080123bc <_lseek_r>:
 80123bc:	b538      	push	{r3, r4, r5, lr}
 80123be:	4d07      	ldr	r5, [pc, #28]	; (80123dc <_lseek_r+0x20>)
 80123c0:	4604      	mov	r4, r0
 80123c2:	4608      	mov	r0, r1
 80123c4:	4611      	mov	r1, r2
 80123c6:	2200      	movs	r2, #0
 80123c8:	602a      	str	r2, [r5, #0]
 80123ca:	461a      	mov	r2, r3
 80123cc:	f7f1 fa6e 	bl	80038ac <_lseek>
 80123d0:	1c43      	adds	r3, r0, #1
 80123d2:	d102      	bne.n	80123da <_lseek_r+0x1e>
 80123d4:	682b      	ldr	r3, [r5, #0]
 80123d6:	b103      	cbz	r3, 80123da <_lseek_r+0x1e>
 80123d8:	6023      	str	r3, [r4, #0]
 80123da:	bd38      	pop	{r3, r4, r5, pc}
 80123dc:	240005c0 	.word	0x240005c0

080123e0 <__ascii_mbtowc>:
 80123e0:	b082      	sub	sp, #8
 80123e2:	b901      	cbnz	r1, 80123e6 <__ascii_mbtowc+0x6>
 80123e4:	a901      	add	r1, sp, #4
 80123e6:	b142      	cbz	r2, 80123fa <__ascii_mbtowc+0x1a>
 80123e8:	b14b      	cbz	r3, 80123fe <__ascii_mbtowc+0x1e>
 80123ea:	7813      	ldrb	r3, [r2, #0]
 80123ec:	600b      	str	r3, [r1, #0]
 80123ee:	7812      	ldrb	r2, [r2, #0]
 80123f0:	1e10      	subs	r0, r2, #0
 80123f2:	bf18      	it	ne
 80123f4:	2001      	movne	r0, #1
 80123f6:	b002      	add	sp, #8
 80123f8:	4770      	bx	lr
 80123fa:	4610      	mov	r0, r2
 80123fc:	e7fb      	b.n	80123f6 <__ascii_mbtowc+0x16>
 80123fe:	f06f 0001 	mvn.w	r0, #1
 8012402:	e7f8      	b.n	80123f6 <__ascii_mbtowc+0x16>

08012404 <__malloc_lock>:
 8012404:	4801      	ldr	r0, [pc, #4]	; (801240c <__malloc_lock+0x8>)
 8012406:	f7ff b902 	b.w	801160e <__retarget_lock_acquire_recursive>
 801240a:	bf00      	nop
 801240c:	240005b8 	.word	0x240005b8

08012410 <__malloc_unlock>:
 8012410:	4801      	ldr	r0, [pc, #4]	; (8012418 <__malloc_unlock+0x8>)
 8012412:	f7ff b8fd 	b.w	8011610 <__retarget_lock_release_recursive>
 8012416:	bf00      	nop
 8012418:	240005b8 	.word	0x240005b8

0801241c <_read_r>:
 801241c:	b538      	push	{r3, r4, r5, lr}
 801241e:	4d07      	ldr	r5, [pc, #28]	; (801243c <_read_r+0x20>)
 8012420:	4604      	mov	r4, r0
 8012422:	4608      	mov	r0, r1
 8012424:	4611      	mov	r1, r2
 8012426:	2200      	movs	r2, #0
 8012428:	602a      	str	r2, [r5, #0]
 801242a:	461a      	mov	r2, r3
 801242c:	f7f1 f9fa 	bl	8003824 <_read>
 8012430:	1c43      	adds	r3, r0, #1
 8012432:	d102      	bne.n	801243a <_read_r+0x1e>
 8012434:	682b      	ldr	r3, [r5, #0]
 8012436:	b103      	cbz	r3, 801243a <_read_r+0x1e>
 8012438:	6023      	str	r3, [r4, #0]
 801243a:	bd38      	pop	{r3, r4, r5, pc}
 801243c:	240005c0 	.word	0x240005c0

08012440 <__ascii_wctomb>:
 8012440:	b149      	cbz	r1, 8012456 <__ascii_wctomb+0x16>
 8012442:	2aff      	cmp	r2, #255	; 0xff
 8012444:	bf85      	ittet	hi
 8012446:	238a      	movhi	r3, #138	; 0x8a
 8012448:	6003      	strhi	r3, [r0, #0]
 801244a:	700a      	strbls	r2, [r1, #0]
 801244c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012450:	bf98      	it	ls
 8012452:	2001      	movls	r0, #1
 8012454:	4770      	bx	lr
 8012456:	4608      	mov	r0, r1
 8012458:	4770      	bx	lr

0801245a <abort>:
 801245a:	b508      	push	{r3, lr}
 801245c:	2006      	movs	r0, #6
 801245e:	f000 f82b 	bl	80124b8 <raise>
 8012462:	2001      	movs	r0, #1
 8012464:	f7f1 f9d4 	bl	8003810 <_exit>

08012468 <_raise_r>:
 8012468:	291f      	cmp	r1, #31
 801246a:	b538      	push	{r3, r4, r5, lr}
 801246c:	4604      	mov	r4, r0
 801246e:	460d      	mov	r5, r1
 8012470:	d904      	bls.n	801247c <_raise_r+0x14>
 8012472:	2316      	movs	r3, #22
 8012474:	6003      	str	r3, [r0, #0]
 8012476:	f04f 30ff 	mov.w	r0, #4294967295
 801247a:	bd38      	pop	{r3, r4, r5, pc}
 801247c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801247e:	b112      	cbz	r2, 8012486 <_raise_r+0x1e>
 8012480:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012484:	b94b      	cbnz	r3, 801249a <_raise_r+0x32>
 8012486:	4620      	mov	r0, r4
 8012488:	f000 f830 	bl	80124ec <_getpid_r>
 801248c:	462a      	mov	r2, r5
 801248e:	4601      	mov	r1, r0
 8012490:	4620      	mov	r0, r4
 8012492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012496:	f000 b817 	b.w	80124c8 <_kill_r>
 801249a:	2b01      	cmp	r3, #1
 801249c:	d00a      	beq.n	80124b4 <_raise_r+0x4c>
 801249e:	1c59      	adds	r1, r3, #1
 80124a0:	d103      	bne.n	80124aa <_raise_r+0x42>
 80124a2:	2316      	movs	r3, #22
 80124a4:	6003      	str	r3, [r0, #0]
 80124a6:	2001      	movs	r0, #1
 80124a8:	e7e7      	b.n	801247a <_raise_r+0x12>
 80124aa:	2400      	movs	r4, #0
 80124ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80124b0:	4628      	mov	r0, r5
 80124b2:	4798      	blx	r3
 80124b4:	2000      	movs	r0, #0
 80124b6:	e7e0      	b.n	801247a <_raise_r+0x12>

080124b8 <raise>:
 80124b8:	4b02      	ldr	r3, [pc, #8]	; (80124c4 <raise+0xc>)
 80124ba:	4601      	mov	r1, r0
 80124bc:	6818      	ldr	r0, [r3, #0]
 80124be:	f7ff bfd3 	b.w	8012468 <_raise_r>
 80124c2:	bf00      	nop
 80124c4:	24000024 	.word	0x24000024

080124c8 <_kill_r>:
 80124c8:	b538      	push	{r3, r4, r5, lr}
 80124ca:	4d07      	ldr	r5, [pc, #28]	; (80124e8 <_kill_r+0x20>)
 80124cc:	2300      	movs	r3, #0
 80124ce:	4604      	mov	r4, r0
 80124d0:	4608      	mov	r0, r1
 80124d2:	4611      	mov	r1, r2
 80124d4:	602b      	str	r3, [r5, #0]
 80124d6:	f7f1 f98b 	bl	80037f0 <_kill>
 80124da:	1c43      	adds	r3, r0, #1
 80124dc:	d102      	bne.n	80124e4 <_kill_r+0x1c>
 80124de:	682b      	ldr	r3, [r5, #0]
 80124e0:	b103      	cbz	r3, 80124e4 <_kill_r+0x1c>
 80124e2:	6023      	str	r3, [r4, #0]
 80124e4:	bd38      	pop	{r3, r4, r5, pc}
 80124e6:	bf00      	nop
 80124e8:	240005c0 	.word	0x240005c0

080124ec <_getpid_r>:
 80124ec:	f7f1 b978 	b.w	80037e0 <_getpid>

080124f0 <atan2>:
 80124f0:	f000 b862 	b.w	80125b8 <__ieee754_atan2>
 80124f4:	0000      	movs	r0, r0
	...

080124f8 <sqrt>:
 80124f8:	b508      	push	{r3, lr}
 80124fa:	ed2d 8b04 	vpush	{d8-d9}
 80124fe:	eeb0 8b40 	vmov.f64	d8, d0
 8012502:	f000 f927 	bl	8012754 <__ieee754_sqrt>
 8012506:	4b10      	ldr	r3, [pc, #64]	; (8012548 <sqrt+0x50>)
 8012508:	f993 3000 	ldrsb.w	r3, [r3]
 801250c:	3301      	adds	r3, #1
 801250e:	d011      	beq.n	8012534 <sqrt+0x3c>
 8012510:	eeb4 8b48 	vcmp.f64	d8, d8
 8012514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012518:	d60c      	bvs.n	8012534 <sqrt+0x3c>
 801251a:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8012540 <sqrt+0x48>
 801251e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8012522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012526:	d505      	bpl.n	8012534 <sqrt+0x3c>
 8012528:	f7fd fae2 	bl	800faf0 <__errno>
 801252c:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8012530:	2321      	movs	r3, #33	; 0x21
 8012532:	6003      	str	r3, [r0, #0]
 8012534:	ecbd 8b04 	vpop	{d8-d9}
 8012538:	bd08      	pop	{r3, pc}
 801253a:	bf00      	nop
 801253c:	f3af 8000 	nop.w
	...
 8012548:	240001f4 	.word	0x240001f4

0801254c <asinf>:
 801254c:	b508      	push	{r3, lr}
 801254e:	ed2d 8b02 	vpush	{d8}
 8012552:	eeb0 8a40 	vmov.f32	s16, s0
 8012556:	f000 f901 	bl	801275c <__ieee754_asinf>
 801255a:	4b13      	ldr	r3, [pc, #76]	; (80125a8 <asinf+0x5c>)
 801255c:	f993 3000 	ldrsb.w	r3, [r3]
 8012560:	3301      	adds	r3, #1
 8012562:	eef0 8a40 	vmov.f32	s17, s0
 8012566:	d01a      	beq.n	801259e <asinf+0x52>
 8012568:	eeb4 8a48 	vcmp.f32	s16, s16
 801256c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012570:	d615      	bvs.n	801259e <asinf+0x52>
 8012572:	eeb0 0a48 	vmov.f32	s0, s16
 8012576:	f000 fc53 	bl	8012e20 <fabsf>
 801257a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801257e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012586:	dd0a      	ble.n	801259e <asinf+0x52>
 8012588:	f7fd fab2 	bl	800faf0 <__errno>
 801258c:	ecbd 8b02 	vpop	{d8}
 8012590:	2321      	movs	r3, #33	; 0x21
 8012592:	6003      	str	r3, [r0, #0]
 8012594:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012598:	4804      	ldr	r0, [pc, #16]	; (80125ac <asinf+0x60>)
 801259a:	f000 bc49 	b.w	8012e30 <nanf>
 801259e:	eeb0 0a68 	vmov.f32	s0, s17
 80125a2:	ecbd 8b02 	vpop	{d8}
 80125a6:	bd08      	pop	{r3, pc}
 80125a8:	240001f4 	.word	0x240001f4
 80125ac:	080131b0 	.word	0x080131b0

080125b0 <atan2f>:
 80125b0:	f000 b9ba 	b.w	8012928 <__ieee754_atan2f>
 80125b4:	0000      	movs	r0, r0
	...

080125b8 <__ieee754_atan2>:
 80125b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80125ba:	ee11 6a10 	vmov	r6, s2
 80125be:	ee11 0a90 	vmov	r0, s3
 80125c2:	4273      	negs	r3, r6
 80125c4:	4f60      	ldr	r7, [pc, #384]	; (8012748 <__ieee754_atan2+0x190>)
 80125c6:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80125ca:	4333      	orrs	r3, r6
 80125cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80125d0:	42bb      	cmp	r3, r7
 80125d2:	ed8d 0b00 	vstr	d0, [sp]
 80125d6:	d80b      	bhi.n	80125f0 <__ieee754_atan2+0x38>
 80125d8:	e9dd c500 	ldrd	ip, r5, [sp]
 80125dc:	f1cc 0100 	rsb	r1, ip, #0
 80125e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80125e4:	ea41 010c 	orr.w	r1, r1, ip
 80125e8:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 80125ec:	42b9      	cmp	r1, r7
 80125ee:	d906      	bls.n	80125fe <__ieee754_atan2+0x46>
 80125f0:	ed9d 7b00 	vldr	d7, [sp]
 80125f4:	ee37 7b01 	vadd.f64	d7, d7, d1
 80125f8:	ed8d 7b00 	vstr	d7, [sp]
 80125fc:	e054      	b.n	80126a8 <__ieee754_atan2+0xf0>
 80125fe:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8012602:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8012606:	4331      	orrs	r1, r6
 8012608:	d104      	bne.n	8012614 <__ieee754_atan2+0x5c>
 801260a:	b003      	add	sp, #12
 801260c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012610:	f000 ba2e 	b.w	8012a70 <atan>
 8012614:	1784      	asrs	r4, r0, #30
 8012616:	f004 0402 	and.w	r4, r4, #2
 801261a:	ea53 010c 	orrs.w	r1, r3, ip
 801261e:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8012622:	d109      	bne.n	8012638 <__ieee754_atan2+0x80>
 8012624:	2c02      	cmp	r4, #2
 8012626:	d069      	beq.n	80126fc <__ieee754_atan2+0x144>
 8012628:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8012710 <__ieee754_atan2+0x158>
 801262c:	ed9d 6b00 	vldr	d6, [sp]
 8012630:	2c03      	cmp	r4, #3
 8012632:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8012636:	e7df      	b.n	80125f8 <__ieee754_atan2+0x40>
 8012638:	ea52 0106 	orrs.w	r1, r2, r6
 801263c:	d107      	bne.n	801264e <__ieee754_atan2+0x96>
 801263e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8012718 <__ieee754_atan2+0x160>
 8012642:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8012720 <__ieee754_atan2+0x168>
 8012646:	2d00      	cmp	r5, #0
 8012648:	fe26 7b07 	vselge.f64	d7, d6, d7
 801264c:	e7d4      	b.n	80125f8 <__ieee754_atan2+0x40>
 801264e:	42ba      	cmp	r2, r7
 8012650:	d10f      	bne.n	8012672 <__ieee754_atan2+0xba>
 8012652:	4293      	cmp	r3, r2
 8012654:	f104 34ff 	add.w	r4, r4, #4294967295
 8012658:	d107      	bne.n	801266a <__ieee754_atan2+0xb2>
 801265a:	2c02      	cmp	r4, #2
 801265c:	d851      	bhi.n	8012702 <__ieee754_atan2+0x14a>
 801265e:	4b3b      	ldr	r3, [pc, #236]	; (801274c <__ieee754_atan2+0x194>)
 8012660:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012664:	ed94 7b00 	vldr	d7, [r4]
 8012668:	e7c6      	b.n	80125f8 <__ieee754_atan2+0x40>
 801266a:	2c02      	cmp	r4, #2
 801266c:	d84c      	bhi.n	8012708 <__ieee754_atan2+0x150>
 801266e:	4b38      	ldr	r3, [pc, #224]	; (8012750 <__ieee754_atan2+0x198>)
 8012670:	e7f6      	b.n	8012660 <__ieee754_atan2+0xa8>
 8012672:	42bb      	cmp	r3, r7
 8012674:	d0e3      	beq.n	801263e <__ieee754_atan2+0x86>
 8012676:	1a9b      	subs	r3, r3, r2
 8012678:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801267c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012680:	da16      	bge.n	80126b0 <__ieee754_atan2+0xf8>
 8012682:	2800      	cmp	r0, #0
 8012684:	da01      	bge.n	801268a <__ieee754_atan2+0xd2>
 8012686:	323c      	adds	r2, #60	; 0x3c
 8012688:	db17      	blt.n	80126ba <__ieee754_atan2+0x102>
 801268a:	ed9d 7b00 	vldr	d7, [sp]
 801268e:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8012692:	f000 fae7 	bl	8012c64 <fabs>
 8012696:	f000 f9eb 	bl	8012a70 <atan>
 801269a:	ed8d 0b00 	vstr	d0, [sp]
 801269e:	2c01      	cmp	r4, #1
 80126a0:	d00e      	beq.n	80126c0 <__ieee754_atan2+0x108>
 80126a2:	2c02      	cmp	r4, #2
 80126a4:	d014      	beq.n	80126d0 <__ieee754_atan2+0x118>
 80126a6:	b9f4      	cbnz	r4, 80126e6 <__ieee754_atan2+0x12e>
 80126a8:	ed9d 0b00 	vldr	d0, [sp]
 80126ac:	b003      	add	sp, #12
 80126ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126b0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8012718 <__ieee754_atan2+0x160>
 80126b4:	ed8d 7b00 	vstr	d7, [sp]
 80126b8:	e7f1      	b.n	801269e <__ieee754_atan2+0xe6>
 80126ba:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8012728 <__ieee754_atan2+0x170>
 80126be:	e7f9      	b.n	80126b4 <__ieee754_atan2+0xfc>
 80126c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126c4:	9901      	ldr	r1, [sp, #4]
 80126c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80126ca:	e9cd 2300 	strd	r2, r3, [sp]
 80126ce:	e7eb      	b.n	80126a8 <__ieee754_atan2+0xf0>
 80126d0:	ed9d 6b00 	vldr	d6, [sp]
 80126d4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012730 <__ieee754_atan2+0x178>
 80126d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80126dc:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8012738 <__ieee754_atan2+0x180>
 80126e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80126e4:	e788      	b.n	80125f8 <__ieee754_atan2+0x40>
 80126e6:	ed9d 6b00 	vldr	d6, [sp]
 80126ea:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8012730 <__ieee754_atan2+0x178>
 80126ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80126f2:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8012738 <__ieee754_atan2+0x180>
 80126f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80126fa:	e77d      	b.n	80125f8 <__ieee754_atan2+0x40>
 80126fc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012738 <__ieee754_atan2+0x180>
 8012700:	e77a      	b.n	80125f8 <__ieee754_atan2+0x40>
 8012702:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8012740 <__ieee754_atan2+0x188>
 8012706:	e777      	b.n	80125f8 <__ieee754_atan2+0x40>
 8012708:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8012728 <__ieee754_atan2+0x170>
 801270c:	e774      	b.n	80125f8 <__ieee754_atan2+0x40>
 801270e:	bf00      	nop
 8012710:	54442d18 	.word	0x54442d18
 8012714:	c00921fb 	.word	0xc00921fb
 8012718:	54442d18 	.word	0x54442d18
 801271c:	3ff921fb 	.word	0x3ff921fb
 8012720:	54442d18 	.word	0x54442d18
 8012724:	bff921fb 	.word	0xbff921fb
	...
 8012730:	33145c07 	.word	0x33145c07
 8012734:	3ca1a626 	.word	0x3ca1a626
 8012738:	54442d18 	.word	0x54442d18
 801273c:	400921fb 	.word	0x400921fb
 8012740:	54442d18 	.word	0x54442d18
 8012744:	3fe921fb 	.word	0x3fe921fb
 8012748:	7ff00000 	.word	0x7ff00000
 801274c:	080132c0 	.word	0x080132c0
 8012750:	080132d8 	.word	0x080132d8

08012754 <__ieee754_sqrt>:
 8012754:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8012758:	4770      	bx	lr
	...

0801275c <__ieee754_asinf>:
 801275c:	b538      	push	{r3, r4, r5, lr}
 801275e:	ee10 5a10 	vmov	r5, s0
 8012762:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012766:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801276a:	ed2d 8b04 	vpush	{d8-d9}
 801276e:	d10c      	bne.n	801278a <__ieee754_asinf+0x2e>
 8012770:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80128e8 <__ieee754_asinf+0x18c>
 8012774:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80128ec <__ieee754_asinf+0x190>
 8012778:	ee60 7a27 	vmul.f32	s15, s0, s15
 801277c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012780:	eeb0 0a67 	vmov.f32	s0, s15
 8012784:	ecbd 8b04 	vpop	{d8-d9}
 8012788:	bd38      	pop	{r3, r4, r5, pc}
 801278a:	dd04      	ble.n	8012796 <__ieee754_asinf+0x3a>
 801278c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012790:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012794:	e7f6      	b.n	8012784 <__ieee754_asinf+0x28>
 8012796:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801279a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801279e:	da0b      	bge.n	80127b8 <__ieee754_asinf+0x5c>
 80127a0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80127a4:	da52      	bge.n	801284c <__ieee754_asinf+0xf0>
 80127a6:	eddf 7a52 	vldr	s15, [pc, #328]	; 80128f0 <__ieee754_asinf+0x194>
 80127aa:	ee70 7a27 	vadd.f32	s15, s0, s15
 80127ae:	eef4 7ae8 	vcmpe.f32	s15, s17
 80127b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127b6:	dce5      	bgt.n	8012784 <__ieee754_asinf+0x28>
 80127b8:	f000 fb32 	bl	8012e20 <fabsf>
 80127bc:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80127c0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80127c4:	ee20 8a08 	vmul.f32	s16, s0, s16
 80127c8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80128f4 <__ieee754_asinf+0x198>
 80127cc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80128f8 <__ieee754_asinf+0x19c>
 80127d0:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80128fc <__ieee754_asinf+0x1a0>
 80127d4:	eea8 7a27 	vfma.f32	s14, s16, s15
 80127d8:	eddf 7a49 	vldr	s15, [pc, #292]	; 8012900 <__ieee754_asinf+0x1a4>
 80127dc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80127e0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8012904 <__ieee754_asinf+0x1a8>
 80127e4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80127e8:	eddf 7a47 	vldr	s15, [pc, #284]	; 8012908 <__ieee754_asinf+0x1ac>
 80127ec:	eee7 7a08 	vfma.f32	s15, s14, s16
 80127f0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801290c <__ieee754_asinf+0x1b0>
 80127f4:	eea7 9a88 	vfma.f32	s18, s15, s16
 80127f8:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012910 <__ieee754_asinf+0x1b4>
 80127fc:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012800:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8012914 <__ieee754_asinf+0x1b8>
 8012804:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012808:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012918 <__ieee754_asinf+0x1bc>
 801280c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012810:	eeb0 0a48 	vmov.f32	s0, s16
 8012814:	eee7 8a88 	vfma.f32	s17, s15, s16
 8012818:	f000 f924 	bl	8012a64 <__ieee754_sqrtf>
 801281c:	4b3f      	ldr	r3, [pc, #252]	; (801291c <__ieee754_asinf+0x1c0>)
 801281e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012822:	429c      	cmp	r4, r3
 8012824:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8012828:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801282c:	dd3d      	ble.n	80128aa <__ieee754_asinf+0x14e>
 801282e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012832:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8012920 <__ieee754_asinf+0x1c4>
 8012836:	eee0 7a26 	vfma.f32	s15, s0, s13
 801283a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80128ec <__ieee754_asinf+0x190>
 801283e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012842:	2d00      	cmp	r5, #0
 8012844:	bfd8      	it	le
 8012846:	eeb1 0a40 	vnegle.f32	s0, s0
 801284a:	e79b      	b.n	8012784 <__ieee754_asinf+0x28>
 801284c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012850:	eddf 6a28 	vldr	s13, [pc, #160]	; 80128f4 <__ieee754_asinf+0x198>
 8012854:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80128f8 <__ieee754_asinf+0x19c>
 8012858:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801290c <__ieee754_asinf+0x1b0>
 801285c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012860:	eddf 6a27 	vldr	s13, [pc, #156]	; 8012900 <__ieee754_asinf+0x1a4>
 8012864:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012868:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8012904 <__ieee754_asinf+0x1a8>
 801286c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012870:	eddf 6a25 	vldr	s13, [pc, #148]	; 8012908 <__ieee754_asinf+0x1ac>
 8012874:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012878:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80128fc <__ieee754_asinf+0x1a0>
 801287c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012880:	eddf 6a23 	vldr	s13, [pc, #140]	; 8012910 <__ieee754_asinf+0x1b4>
 8012884:	eee7 6a86 	vfma.f32	s13, s15, s12
 8012888:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8012914 <__ieee754_asinf+0x1b8>
 801288c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012890:	eddf 6a21 	vldr	s13, [pc, #132]	; 8012918 <__ieee754_asinf+0x1bc>
 8012894:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012898:	ee27 7a27 	vmul.f32	s14, s14, s15
 801289c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80128a0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80128a4:	eea0 0a27 	vfma.f32	s0, s0, s15
 80128a8:	e76c      	b.n	8012784 <__ieee754_asinf+0x28>
 80128aa:	ee10 3a10 	vmov	r3, s0
 80128ae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80128b2:	f023 030f 	bic.w	r3, r3, #15
 80128b6:	ee07 3a10 	vmov	s14, r3
 80128ba:	eea7 8a47 	vfms.f32	s16, s14, s14
 80128be:	ee70 7a07 	vadd.f32	s15, s0, s14
 80128c2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80128c6:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80128ca:	eddf 7a07 	vldr	s15, [pc, #28]	; 80128e8 <__ieee754_asinf+0x18c>
 80128ce:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80128d2:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80128d6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8012924 <__ieee754_asinf+0x1c8>
 80128da:	eeb0 6a40 	vmov.f32	s12, s0
 80128de:	eea7 6a66 	vfms.f32	s12, s14, s13
 80128e2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80128e6:	e7aa      	b.n	801283e <__ieee754_asinf+0xe2>
 80128e8:	b33bbd2e 	.word	0xb33bbd2e
 80128ec:	3fc90fdb 	.word	0x3fc90fdb
 80128f0:	7149f2ca 	.word	0x7149f2ca
 80128f4:	3811ef08 	.word	0x3811ef08
 80128f8:	3a4f7f04 	.word	0x3a4f7f04
 80128fc:	3e2aaaab 	.word	0x3e2aaaab
 8012900:	bd241146 	.word	0xbd241146
 8012904:	3e4e0aa8 	.word	0x3e4e0aa8
 8012908:	bea6b090 	.word	0xbea6b090
 801290c:	3d9dc62e 	.word	0x3d9dc62e
 8012910:	bf303361 	.word	0xbf303361
 8012914:	4001572d 	.word	0x4001572d
 8012918:	c019d139 	.word	0xc019d139
 801291c:	3f799999 	.word	0x3f799999
 8012920:	333bbd2e 	.word	0x333bbd2e
 8012924:	3f490fdb 	.word	0x3f490fdb

08012928 <__ieee754_atan2f>:
 8012928:	ee10 2a90 	vmov	r2, s1
 801292c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012930:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012934:	b510      	push	{r4, lr}
 8012936:	eef0 7a40 	vmov.f32	s15, s0
 801293a:	dc06      	bgt.n	801294a <__ieee754_atan2f+0x22>
 801293c:	ee10 0a10 	vmov	r0, s0
 8012940:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012944:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012948:	dd04      	ble.n	8012954 <__ieee754_atan2f+0x2c>
 801294a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801294e:	eeb0 0a67 	vmov.f32	s0, s15
 8012952:	bd10      	pop	{r4, pc}
 8012954:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8012958:	d103      	bne.n	8012962 <__ieee754_atan2f+0x3a>
 801295a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801295e:	f000 b98b 	b.w	8012c78 <atanf>
 8012962:	1794      	asrs	r4, r2, #30
 8012964:	f004 0402 	and.w	r4, r4, #2
 8012968:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801296c:	b93b      	cbnz	r3, 801297e <__ieee754_atan2f+0x56>
 801296e:	2c02      	cmp	r4, #2
 8012970:	d05c      	beq.n	8012a2c <__ieee754_atan2f+0x104>
 8012972:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8012a40 <__ieee754_atan2f+0x118>
 8012976:	2c03      	cmp	r4, #3
 8012978:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801297c:	e7e7      	b.n	801294e <__ieee754_atan2f+0x26>
 801297e:	b939      	cbnz	r1, 8012990 <__ieee754_atan2f+0x68>
 8012980:	eddf 7a30 	vldr	s15, [pc, #192]	; 8012a44 <__ieee754_atan2f+0x11c>
 8012984:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8012a48 <__ieee754_atan2f+0x120>
 8012988:	2800      	cmp	r0, #0
 801298a:	fe67 7a80 	vselge.f32	s15, s15, s0
 801298e:	e7de      	b.n	801294e <__ieee754_atan2f+0x26>
 8012990:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012994:	d110      	bne.n	80129b8 <__ieee754_atan2f+0x90>
 8012996:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801299a:	f104 34ff 	add.w	r4, r4, #4294967295
 801299e:	d107      	bne.n	80129b0 <__ieee754_atan2f+0x88>
 80129a0:	2c02      	cmp	r4, #2
 80129a2:	d846      	bhi.n	8012a32 <__ieee754_atan2f+0x10a>
 80129a4:	4b29      	ldr	r3, [pc, #164]	; (8012a4c <__ieee754_atan2f+0x124>)
 80129a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80129aa:	edd4 7a00 	vldr	s15, [r4]
 80129ae:	e7ce      	b.n	801294e <__ieee754_atan2f+0x26>
 80129b0:	2c02      	cmp	r4, #2
 80129b2:	d841      	bhi.n	8012a38 <__ieee754_atan2f+0x110>
 80129b4:	4b26      	ldr	r3, [pc, #152]	; (8012a50 <__ieee754_atan2f+0x128>)
 80129b6:	e7f6      	b.n	80129a6 <__ieee754_atan2f+0x7e>
 80129b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80129bc:	d0e0      	beq.n	8012980 <__ieee754_atan2f+0x58>
 80129be:	1a5b      	subs	r3, r3, r1
 80129c0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80129c4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80129c8:	da1a      	bge.n	8012a00 <__ieee754_atan2f+0xd8>
 80129ca:	2a00      	cmp	r2, #0
 80129cc:	da01      	bge.n	80129d2 <__ieee754_atan2f+0xaa>
 80129ce:	313c      	adds	r1, #60	; 0x3c
 80129d0:	db19      	blt.n	8012a06 <__ieee754_atan2f+0xde>
 80129d2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80129d6:	f000 fa23 	bl	8012e20 <fabsf>
 80129da:	f000 f94d 	bl	8012c78 <atanf>
 80129de:	eef0 7a40 	vmov.f32	s15, s0
 80129e2:	2c01      	cmp	r4, #1
 80129e4:	d012      	beq.n	8012a0c <__ieee754_atan2f+0xe4>
 80129e6:	2c02      	cmp	r4, #2
 80129e8:	d017      	beq.n	8012a1a <__ieee754_atan2f+0xf2>
 80129ea:	2c00      	cmp	r4, #0
 80129ec:	d0af      	beq.n	801294e <__ieee754_atan2f+0x26>
 80129ee:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8012a54 <__ieee754_atan2f+0x12c>
 80129f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80129f6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8012a58 <__ieee754_atan2f+0x130>
 80129fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80129fe:	e7a6      	b.n	801294e <__ieee754_atan2f+0x26>
 8012a00:	eddf 7a10 	vldr	s15, [pc, #64]	; 8012a44 <__ieee754_atan2f+0x11c>
 8012a04:	e7ed      	b.n	80129e2 <__ieee754_atan2f+0xba>
 8012a06:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012a5c <__ieee754_atan2f+0x134>
 8012a0a:	e7ea      	b.n	80129e2 <__ieee754_atan2f+0xba>
 8012a0c:	ee17 3a90 	vmov	r3, s15
 8012a10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012a14:	ee07 3a90 	vmov	s15, r3
 8012a18:	e799      	b.n	801294e <__ieee754_atan2f+0x26>
 8012a1a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8012a54 <__ieee754_atan2f+0x12c>
 8012a1e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012a22:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8012a58 <__ieee754_atan2f+0x130>
 8012a26:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012a2a:	e790      	b.n	801294e <__ieee754_atan2f+0x26>
 8012a2c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8012a58 <__ieee754_atan2f+0x130>
 8012a30:	e78d      	b.n	801294e <__ieee754_atan2f+0x26>
 8012a32:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8012a60 <__ieee754_atan2f+0x138>
 8012a36:	e78a      	b.n	801294e <__ieee754_atan2f+0x26>
 8012a38:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012a5c <__ieee754_atan2f+0x134>
 8012a3c:	e787      	b.n	801294e <__ieee754_atan2f+0x26>
 8012a3e:	bf00      	nop
 8012a40:	c0490fdb 	.word	0xc0490fdb
 8012a44:	3fc90fdb 	.word	0x3fc90fdb
 8012a48:	bfc90fdb 	.word	0xbfc90fdb
 8012a4c:	080132f0 	.word	0x080132f0
 8012a50:	080132fc 	.word	0x080132fc
 8012a54:	33bbbd2e 	.word	0x33bbbd2e
 8012a58:	40490fdb 	.word	0x40490fdb
 8012a5c:	00000000 	.word	0x00000000
 8012a60:	3f490fdb 	.word	0x3f490fdb

08012a64 <__ieee754_sqrtf>:
 8012a64:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012a68:	4770      	bx	lr
 8012a6a:	0000      	movs	r0, r0
 8012a6c:	0000      	movs	r0, r0
	...

08012a70 <atan>:
 8012a70:	b538      	push	{r3, r4, r5, lr}
 8012a72:	eeb0 7b40 	vmov.f64	d7, d0
 8012a76:	ee17 5a90 	vmov	r5, s15
 8012a7a:	4b73      	ldr	r3, [pc, #460]	; (8012c48 <atan+0x1d8>)
 8012a7c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012a80:	429c      	cmp	r4, r3
 8012a82:	dd13      	ble.n	8012aac <atan+0x3c>
 8012a84:	4b71      	ldr	r3, [pc, #452]	; (8012c4c <atan+0x1dc>)
 8012a86:	429c      	cmp	r4, r3
 8012a88:	dc03      	bgt.n	8012a92 <atan+0x22>
 8012a8a:	d107      	bne.n	8012a9c <atan+0x2c>
 8012a8c:	ee10 3a10 	vmov	r3, s0
 8012a90:	b123      	cbz	r3, 8012a9c <atan+0x2c>
 8012a92:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012a96:	eeb0 0b47 	vmov.f64	d0, d7
 8012a9a:	bd38      	pop	{r3, r4, r5, pc}
 8012a9c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012bd8 <atan+0x168>
 8012aa0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8012be0 <atan+0x170>
 8012aa4:	2d00      	cmp	r5, #0
 8012aa6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8012aaa:	e7f4      	b.n	8012a96 <atan+0x26>
 8012aac:	4b68      	ldr	r3, [pc, #416]	; (8012c50 <atan+0x1e0>)
 8012aae:	429c      	cmp	r4, r3
 8012ab0:	dc11      	bgt.n	8012ad6 <atan+0x66>
 8012ab2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012ab6:	429c      	cmp	r4, r3
 8012ab8:	dc0a      	bgt.n	8012ad0 <atan+0x60>
 8012aba:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8012abe:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8012be8 <atan+0x178>
 8012ac2:	ee30 6b06 	vadd.f64	d6, d0, d6
 8012ac6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ace:	dce2      	bgt.n	8012a96 <atan+0x26>
 8012ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ad4:	e013      	b.n	8012afe <atan+0x8e>
 8012ad6:	f000 f8c5 	bl	8012c64 <fabs>
 8012ada:	4b5e      	ldr	r3, [pc, #376]	; (8012c54 <atan+0x1e4>)
 8012adc:	429c      	cmp	r4, r3
 8012ade:	dc4f      	bgt.n	8012b80 <atan+0x110>
 8012ae0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012ae4:	429c      	cmp	r4, r3
 8012ae6:	dc41      	bgt.n	8012b6c <atan+0xfc>
 8012ae8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8012aec:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8012af0:	2300      	movs	r3, #0
 8012af2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012af6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012afa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012afe:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012bf0 <atan+0x180>
 8012b02:	ee27 4b07 	vmul.f64	d4, d7, d7
 8012b06:	ee24 5b04 	vmul.f64	d5, d4, d4
 8012b0a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012bf8 <atan+0x188>
 8012b0e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8012b12:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8012c00 <atan+0x190>
 8012b16:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012b1a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012c08 <atan+0x198>
 8012b1e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8012b22:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8012c10 <atan+0x1a0>
 8012b26:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012b2a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012c18 <atan+0x1a8>
 8012b2e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8012c20 <atan+0x1b0>
 8012b32:	eea6 3b05 	vfma.f64	d3, d6, d5
 8012b36:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012c28 <atan+0x1b8>
 8012b3a:	eea5 2b06 	vfma.f64	d2, d5, d6
 8012b3e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012c30 <atan+0x1c0>
 8012b42:	eea2 6b05 	vfma.f64	d6, d2, d5
 8012b46:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8012c38 <atan+0x1c8>
 8012b4a:	eea6 2b05 	vfma.f64	d2, d6, d5
 8012b4e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012c40 <atan+0x1d0>
 8012b52:	1c5a      	adds	r2, r3, #1
 8012b54:	eea2 6b05 	vfma.f64	d6, d2, d5
 8012b58:	ee26 6b05 	vmul.f64	d6, d6, d5
 8012b5c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8012b60:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012b64:	d121      	bne.n	8012baa <atan+0x13a>
 8012b66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012b6a:	e794      	b.n	8012a96 <atan+0x26>
 8012b6c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012b70:	2301      	movs	r3, #1
 8012b72:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012b76:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012b7a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012b7e:	e7be      	b.n	8012afe <atan+0x8e>
 8012b80:	4b35      	ldr	r3, [pc, #212]	; (8012c58 <atan+0x1e8>)
 8012b82:	429c      	cmp	r4, r3
 8012b84:	da0b      	bge.n	8012b9e <atan+0x12e>
 8012b86:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012b8a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012b8e:	ee30 5b47 	vsub.f64	d5, d0, d7
 8012b92:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012b96:	2302      	movs	r3, #2
 8012b98:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8012b9c:	e7af      	b.n	8012afe <atan+0x8e>
 8012b9e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8012ba2:	2303      	movs	r3, #3
 8012ba4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012ba8:	e7a9      	b.n	8012afe <atan+0x8e>
 8012baa:	4a2c      	ldr	r2, [pc, #176]	; (8012c5c <atan+0x1ec>)
 8012bac:	492c      	ldr	r1, [pc, #176]	; (8012c60 <atan+0x1f0>)
 8012bae:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012bb2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8012bb6:	ed93 5b00 	vldr	d5, [r3]
 8012bba:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012bbe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012bc2:	ed92 6b00 	vldr	d6, [r2]
 8012bc6:	2d00      	cmp	r5, #0
 8012bc8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012bcc:	bfb8      	it	lt
 8012bce:	eeb1 7b47 	vneglt.f64	d7, d7
 8012bd2:	e760      	b.n	8012a96 <atan+0x26>
 8012bd4:	f3af 8000 	nop.w
 8012bd8:	54442d18 	.word	0x54442d18
 8012bdc:	3ff921fb 	.word	0x3ff921fb
 8012be0:	54442d18 	.word	0x54442d18
 8012be4:	bff921fb 	.word	0xbff921fb
 8012be8:	8800759c 	.word	0x8800759c
 8012bec:	7e37e43c 	.word	0x7e37e43c
 8012bf0:	e322da11 	.word	0xe322da11
 8012bf4:	3f90ad3a 	.word	0x3f90ad3a
 8012bf8:	24760deb 	.word	0x24760deb
 8012bfc:	3fa97b4b 	.word	0x3fa97b4b
 8012c00:	a0d03d51 	.word	0xa0d03d51
 8012c04:	3fb10d66 	.word	0x3fb10d66
 8012c08:	c54c206e 	.word	0xc54c206e
 8012c0c:	3fb745cd 	.word	0x3fb745cd
 8012c10:	920083ff 	.word	0x920083ff
 8012c14:	3fc24924 	.word	0x3fc24924
 8012c18:	5555550d 	.word	0x5555550d
 8012c1c:	3fd55555 	.word	0x3fd55555
 8012c20:	52defd9a 	.word	0x52defd9a
 8012c24:	bfadde2d 	.word	0xbfadde2d
 8012c28:	2c6a6c2f 	.word	0x2c6a6c2f
 8012c2c:	bfa2b444 	.word	0xbfa2b444
 8012c30:	af749a6d 	.word	0xaf749a6d
 8012c34:	bfb3b0f2 	.word	0xbfb3b0f2
 8012c38:	fe231671 	.word	0xfe231671
 8012c3c:	bfbc71c6 	.word	0xbfbc71c6
 8012c40:	9998ebc4 	.word	0x9998ebc4
 8012c44:	bfc99999 	.word	0xbfc99999
 8012c48:	440fffff 	.word	0x440fffff
 8012c4c:	7ff00000 	.word	0x7ff00000
 8012c50:	3fdbffff 	.word	0x3fdbffff
 8012c54:	3ff2ffff 	.word	0x3ff2ffff
 8012c58:	40038000 	.word	0x40038000
 8012c5c:	08013308 	.word	0x08013308
 8012c60:	08013328 	.word	0x08013328

08012c64 <fabs>:
 8012c64:	ec51 0b10 	vmov	r0, r1, d0
 8012c68:	ee10 2a10 	vmov	r2, s0
 8012c6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012c70:	ec43 2b10 	vmov	d0, r2, r3
 8012c74:	4770      	bx	lr
	...

08012c78 <atanf>:
 8012c78:	b538      	push	{r3, r4, r5, lr}
 8012c7a:	ee10 5a10 	vmov	r5, s0
 8012c7e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012c82:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8012c86:	eef0 7a40 	vmov.f32	s15, s0
 8012c8a:	db0f      	blt.n	8012cac <atanf+0x34>
 8012c8c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012c90:	dd04      	ble.n	8012c9c <atanf+0x24>
 8012c92:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012c96:	eeb0 0a67 	vmov.f32	s0, s15
 8012c9a:	bd38      	pop	{r3, r4, r5, pc}
 8012c9c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8012dd4 <atanf+0x15c>
 8012ca0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8012dd8 <atanf+0x160>
 8012ca4:	2d00      	cmp	r5, #0
 8012ca6:	fe77 7a80 	vselgt.f32	s15, s15, s0
 8012caa:	e7f4      	b.n	8012c96 <atanf+0x1e>
 8012cac:	4b4b      	ldr	r3, [pc, #300]	; (8012ddc <atanf+0x164>)
 8012cae:	429c      	cmp	r4, r3
 8012cb0:	dc10      	bgt.n	8012cd4 <atanf+0x5c>
 8012cb2:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8012cb6:	da0a      	bge.n	8012cce <atanf+0x56>
 8012cb8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012de0 <atanf+0x168>
 8012cbc:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012cc4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ccc:	dce3      	bgt.n	8012c96 <atanf+0x1e>
 8012cce:	f04f 33ff 	mov.w	r3, #4294967295
 8012cd2:	e013      	b.n	8012cfc <atanf+0x84>
 8012cd4:	f000 f8a4 	bl	8012e20 <fabsf>
 8012cd8:	4b42      	ldr	r3, [pc, #264]	; (8012de4 <atanf+0x16c>)
 8012cda:	429c      	cmp	r4, r3
 8012cdc:	dc4f      	bgt.n	8012d7e <atanf+0x106>
 8012cde:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8012ce2:	429c      	cmp	r4, r3
 8012ce4:	dc41      	bgt.n	8012d6a <atanf+0xf2>
 8012ce6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012cea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012cee:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012cf8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012cfc:	1c5a      	adds	r2, r3, #1
 8012cfe:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8012d02:	eddf 5a39 	vldr	s11, [pc, #228]	; 8012de8 <atanf+0x170>
 8012d06:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8012dec <atanf+0x174>
 8012d0a:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8012df0 <atanf+0x178>
 8012d0e:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8012df4 <atanf+0x17c>
 8012d12:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012d16:	eea7 6a25 	vfma.f32	s12, s14, s11
 8012d1a:	eddf 5a37 	vldr	s11, [pc, #220]	; 8012df8 <atanf+0x180>
 8012d1e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012d22:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8012dfc <atanf+0x184>
 8012d26:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012d2a:	eddf 5a35 	vldr	s11, [pc, #212]	; 8012e00 <atanf+0x188>
 8012d2e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012d32:	ed9f 6a34 	vldr	s12, [pc, #208]	; 8012e04 <atanf+0x18c>
 8012d36:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012d3a:	eddf 5a33 	vldr	s11, [pc, #204]	; 8012e08 <atanf+0x190>
 8012d3e:	eee7 5a05 	vfma.f32	s11, s14, s10
 8012d42:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8012e0c <atanf+0x194>
 8012d46:	eea5 5a87 	vfma.f32	s10, s11, s14
 8012d4a:	eddf 5a31 	vldr	s11, [pc, #196]	; 8012e10 <atanf+0x198>
 8012d4e:	eee5 5a07 	vfma.f32	s11, s10, s14
 8012d52:	eea5 0a87 	vfma.f32	s0, s11, s14
 8012d56:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012d5a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012d5e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012d62:	d121      	bne.n	8012da8 <atanf+0x130>
 8012d64:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012d68:	e795      	b.n	8012c96 <atanf+0x1e>
 8012d6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012d6e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012d72:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012d76:	2301      	movs	r3, #1
 8012d78:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012d7c:	e7be      	b.n	8012cfc <atanf+0x84>
 8012d7e:	4b25      	ldr	r3, [pc, #148]	; (8012e14 <atanf+0x19c>)
 8012d80:	429c      	cmp	r4, r3
 8012d82:	dc0b      	bgt.n	8012d9c <atanf+0x124>
 8012d84:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8012d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d8c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012d90:	2302      	movs	r3, #2
 8012d92:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012d9a:	e7af      	b.n	8012cfc <atanf+0x84>
 8012d9c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012da0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012da4:	2303      	movs	r3, #3
 8012da6:	e7a9      	b.n	8012cfc <atanf+0x84>
 8012da8:	4a1b      	ldr	r2, [pc, #108]	; (8012e18 <atanf+0x1a0>)
 8012daa:	491c      	ldr	r1, [pc, #112]	; (8012e1c <atanf+0x1a4>)
 8012dac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012db0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012db4:	ed93 7a00 	vldr	s14, [r3]
 8012db8:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012dbc:	2d00      	cmp	r5, #0
 8012dbe:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012dc2:	ed92 0a00 	vldr	s0, [r2]
 8012dc6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012dca:	bfb8      	it	lt
 8012dcc:	eef1 7a67 	vneglt.f32	s15, s15
 8012dd0:	e761      	b.n	8012c96 <atanf+0x1e>
 8012dd2:	bf00      	nop
 8012dd4:	3fc90fdb 	.word	0x3fc90fdb
 8012dd8:	bfc90fdb 	.word	0xbfc90fdb
 8012ddc:	3edfffff 	.word	0x3edfffff
 8012de0:	7149f2ca 	.word	0x7149f2ca
 8012de4:	3f97ffff 	.word	0x3f97ffff
 8012de8:	3c8569d7 	.word	0x3c8569d7
 8012dec:	3d4bda59 	.word	0x3d4bda59
 8012df0:	bd15a221 	.word	0xbd15a221
 8012df4:	be4ccccd 	.word	0xbe4ccccd
 8012df8:	3d886b35 	.word	0x3d886b35
 8012dfc:	3dba2e6e 	.word	0x3dba2e6e
 8012e00:	3e124925 	.word	0x3e124925
 8012e04:	3eaaaaab 	.word	0x3eaaaaab
 8012e08:	bd6ef16b 	.word	0xbd6ef16b
 8012e0c:	bd9d8795 	.word	0xbd9d8795
 8012e10:	bde38e38 	.word	0xbde38e38
 8012e14:	401bffff 	.word	0x401bffff
 8012e18:	08013348 	.word	0x08013348
 8012e1c:	08013358 	.word	0x08013358

08012e20 <fabsf>:
 8012e20:	ee10 3a10 	vmov	r3, s0
 8012e24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012e28:	ee00 3a10 	vmov	s0, r3
 8012e2c:	4770      	bx	lr
	...

08012e30 <nanf>:
 8012e30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012e38 <nanf+0x8>
 8012e34:	4770      	bx	lr
 8012e36:	bf00      	nop
 8012e38:	7fc00000 	.word	0x7fc00000

08012e3c <_init>:
 8012e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e3e:	bf00      	nop
 8012e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e42:	bc08      	pop	{r3}
 8012e44:	469e      	mov	lr, r3
 8012e46:	4770      	bx	lr

08012e48 <_fini>:
 8012e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e4a:	bf00      	nop
 8012e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e4e:	bc08      	pop	{r3}
 8012e50:	469e      	mov	lr, r3
 8012e52:	4770      	bx	lr
